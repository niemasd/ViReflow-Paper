2021/07/08 16:50:54 reflow version: reflow1.6.0 (go1.13.15)
2021/07/08 16:50:54 run ID: f7cbdf2c
2021/07/08 16:50:54 evaluating program /home/niema/ViReflow-Paper/data/sarscov2/n100/n100.r04.rf
	(no params)
	(no arguments)
2021/07/08 16:50:54 Trace: /home/niema/.reflow/runs/f7cbdf2c25519607d9b3777ea73438cabd63cab4f680496d6a662c53fe79f48e.trace
2021/07/08 16:50:54 evaluating with configuration: scheduler *sched.Scheduler snapshotter blob.Mux transferer *repository.Manager repository *blobrepo.Repository,url=s3://niema-test-quickstart-cache/ assoc *dydbassoc.Assoc,TableName=niema-test-quickstart flags cacheextern,nocache,nogc,norecomputeempty,topdown flowconfig hashv2 cachelookuptimeout 20m0s imagemap map[] dotwriter(*os.File)
2021/07/08 16:50:56 scheduler task 731ed26b (flow 918bce40): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s055_output\"\n        wget -O \"n100.r04.s055_output/n100.r04.s055.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s055_output/n100.r04.s055.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s055_output/n100.r04.s055.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s055_output/n100.r04.s055.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s055_output/n100.r04.s055.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s055_output/n100.r04.s055.reference.fas\" \"n100.r04.s055_output/n100.r04.s055.fq1.fastq\" \"n100.r04.s055_output/n100.r04.s055.fq2.fastq\" | samtools view -bS - > \"n100.r04.s055_output/n100.r04.s055.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s055_output/n100.r04.s055.untrimmed.sorted.bam\" \"n100.r04.s055_output/n100.r04.s055.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s055_output/n100.r04.s055.untrimmed.sorted.bam\" -b \"n100.r04.s055_output/n100.r04.s055.primers.bed\" -p \"n100.r04.s055_output/n100.r04.s055.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s055_output/n100.r04.s055.trimmed.sorted.bam\" \"n100.r04.s055_output/n100.r04.s055.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s055_output/n100.r04.s055.reference.fas\" \"n100.r04.s055_output/n100.r04.s055.trimmed.sorted.bam\" > \"n100.r04.s055_output/n100.r04.s055.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s055_output/n100.r04.s055.reference.fas\" --call-indels \"n100.r04.s055_output/n100.r04.s055.trimmed.sorted.bam\" > \"n100.r04.s055_output/n100.r04.s055.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s055_output/n100.r04.s055.trimmed.sorted.bam\" > \"n100.r04.s055_output/n100.r04.s055.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s055_output/n100.r04.s055.depth.txt\" \"n100.r04.s055_output/n100.r04.s055.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s055_output/n100.r04.s055.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s055_output/n100.r04.s055.reference.fas\" | bcftools consensus -m \"n100.r04.s055_output/n100.r04.s055.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s055_output/n100.r04.s055.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s055_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s055_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s055_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 8a52bfdb (flow 5bd33203): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s066_output\"\n        wget -O \"n100.r04.s066_output/n100.r04.s066.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s066_output/n100.r04.s066.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s066_output/n100.r04.s066.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s066_output/n100.r04.s066.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s066_output/n100.r04.s066.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s066_output/n100.r04.s066.reference.fas\" \"n100.r04.s066_output/n100.r04.s066.fq1.fastq\" \"n100.r04.s066_output/n100.r04.s066.fq2.fastq\" | samtools view -bS - > \"n100.r04.s066_output/n100.r04.s066.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s066_output/n100.r04.s066.untrimmed.sorted.bam\" \"n100.r04.s066_output/n100.r04.s066.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s066_output/n100.r04.s066.untrimmed.sorted.bam\" -b \"n100.r04.s066_output/n100.r04.s066.primers.bed\" -p \"n100.r04.s066_output/n100.r04.s066.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s066_output/n100.r04.s066.trimmed.sorted.bam\" \"n100.r04.s066_output/n100.r04.s066.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s066_output/n100.r04.s066.reference.fas\" \"n100.r04.s066_output/n100.r04.s066.trimmed.sorted.bam\" > \"n100.r04.s066_output/n100.r04.s066.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s066_output/n100.r04.s066.reference.fas\" --call-indels \"n100.r04.s066_output/n100.r04.s066.trimmed.sorted.bam\" > \"n100.r04.s066_output/n100.r04.s066.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s066_output/n100.r04.s066.trimmed.sorted.bam\" > \"n100.r04.s066_output/n100.r04.s066.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s066_output/n100.r04.s066.depth.txt\" \"n100.r04.s066_output/n100.r04.s066.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s066_output/n100.r04.s066.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s066_output/n100.r04.s066.reference.fas\" | bcftools consensus -m \"n100.r04.s066_output/n100.r04.s066.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s066_output/n100.r04.s066.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s066_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s066_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s066_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 1e424faf (flow 8b4daa08): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s036_output\"\n        wget -O \"n100.r04.s036_output/n100.r04.s036.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s036_output/n100.r04.s036.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s036_output/n100.r04.s036.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s036_output/n100.r04.s036.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s036_output/n100.r04.s036.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s036_output/n100.r04.s036.reference.fas\" \"n100.r04.s036_output/n100.r04.s036.fq1.fastq\" \"n100.r04.s036_output/n100.r04.s036.fq2.fastq\" | samtools view -bS - > \"n100.r04.s036_output/n100.r04.s036.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s036_output/n100.r04.s036.untrimmed.sorted.bam\" \"n100.r04.s036_output/n100.r04.s036.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s036_output/n100.r04.s036.untrimmed.sorted.bam\" -b \"n100.r04.s036_output/n100.r04.s036.primers.bed\" -p \"n100.r04.s036_output/n100.r04.s036.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s036_output/n100.r04.s036.trimmed.sorted.bam\" \"n100.r04.s036_output/n100.r04.s036.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s036_output/n100.r04.s036.reference.fas\" \"n100.r04.s036_output/n100.r04.s036.trimmed.sorted.bam\" > \"n100.r04.s036_output/n100.r04.s036.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s036_output/n100.r04.s036.reference.fas\" --call-indels \"n100.r04.s036_output/n100.r04.s036.trimmed.sorted.bam\" > \"n100.r04.s036_output/n100.r04.s036.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s036_output/n100.r04.s036.trimmed.sorted.bam\" > \"n100.r04.s036_output/n100.r04.s036.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s036_output/n100.r04.s036.depth.txt\" \"n100.r04.s036_output/n100.r04.s036.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s036_output/n100.r04.s036.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s036_output/n100.r04.s036.reference.fas\" | bcftools consensus -m \"n100.r04.s036_output/n100.r04.s036.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s036_output/n100.r04.s036.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s036_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s036_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s036_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 1afbafec (flow 44babb34): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s061_output\"\n        wget -O \"n100.r04.s061_output/n100.r04.s061.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s061_output/n100.r04.s061.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s061_output/n100.r04.s061.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s061_output/n100.r04.s061.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s061_output/n100.r04.s061.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s061_output/n100.r04.s061.reference.fas\" \"n100.r04.s061_output/n100.r04.s061.fq1.fastq\" \"n100.r04.s061_output/n100.r04.s061.fq2.fastq\" | samtools view -bS - > \"n100.r04.s061_output/n100.r04.s061.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s061_output/n100.r04.s061.untrimmed.sorted.bam\" \"n100.r04.s061_output/n100.r04.s061.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s061_output/n100.r04.s061.untrimmed.sorted.bam\" -b \"n100.r04.s061_output/n100.r04.s061.primers.bed\" -p \"n100.r04.s061_output/n100.r04.s061.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s061_output/n100.r04.s061.trimmed.sorted.bam\" \"n100.r04.s061_output/n100.r04.s061.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s061_output/n100.r04.s061.reference.fas\" \"n100.r04.s061_output/n100.r04.s061.trimmed.sorted.bam\" > \"n100.r04.s061_output/n100.r04.s061.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s061_output/n100.r04.s061.reference.fas\" --call-indels \"n100.r04.s061_output/n100.r04.s061.trimmed.sorted.bam\" > \"n100.r04.s061_output/n100.r04.s061.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s061_output/n100.r04.s061.trimmed.sorted.bam\" > \"n100.r04.s061_output/n100.r04.s061.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s061_output/n100.r04.s061.depth.txt\" \"n100.r04.s061_output/n100.r04.s061.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s061_output/n100.r04.s061.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s061_output/n100.r04.s061.reference.fas\" | bcftools consensus -m \"n100.r04.s061_output/n100.r04.s061.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s061_output/n100.r04.s061.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s061_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s061_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s061_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 32f45316 (flow 14b3f0cc): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s007_output\"\n        wget -O \"n100.r04.s007_output/n100.r04.s007.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s007_output/n100.r04.s007.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s007_output/n100.r04.s007.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s007_output/n100.r04.s007.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s007_output/n100.r04.s007.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s007_output/n100.r04.s007.reference.fas\" \"n100.r04.s007_output/n100.r04.s007.fq1.fastq\" \"n100.r04.s007_output/n100.r04.s007.fq2.fastq\" | samtools view -bS - > \"n100.r04.s007_output/n100.r04.s007.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s007_output/n100.r04.s007.untrimmed.sorted.bam\" \"n100.r04.s007_output/n100.r04.s007.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s007_output/n100.r04.s007.untrimmed.sorted.bam\" -b \"n100.r04.s007_output/n100.r04.s007.primers.bed\" -p \"n100.r04.s007_output/n100.r04.s007.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s007_output/n100.r04.s007.trimmed.sorted.bam\" \"n100.r04.s007_output/n100.r04.s007.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s007_output/n100.r04.s007.reference.fas\" \"n100.r04.s007_output/n100.r04.s007.trimmed.sorted.bam\" > \"n100.r04.s007_output/n100.r04.s007.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s007_output/n100.r04.s007.reference.fas\" --call-indels \"n100.r04.s007_output/n100.r04.s007.trimmed.sorted.bam\" > \"n100.r04.s007_output/n100.r04.s007.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s007_output/n100.r04.s007.trimmed.sorted.bam\" > \"n100.r04.s007_output/n100.r04.s007.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s007_output/n100.r04.s007.depth.txt\" \"n100.r04.s007_output/n100.r04.s007.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s007_output/n100.r04.s007.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s007_output/n100.r04.s007.reference.fas\" | bcftools consensus -m \"n100.r04.s007_output/n100.r04.s007.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s007_output/n100.r04.s007.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s007_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s007_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s007_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task d243ea7f (flow f880a376): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s056_output\"\n        wget -O \"n100.r04.s056_output/n100.r04.s056.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s056_output/n100.r04.s056.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s056_output/n100.r04.s056.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s056_output/n100.r04.s056.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s056_output/n100.r04.s056.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s056_output/n100.r04.s056.reference.fas\" \"n100.r04.s056_output/n100.r04.s056.fq1.fastq\" \"n100.r04.s056_output/n100.r04.s056.fq2.fastq\" | samtools view -bS - > \"n100.r04.s056_output/n100.r04.s056.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s056_output/n100.r04.s056.untrimmed.sorted.bam\" \"n100.r04.s056_output/n100.r04.s056.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s056_output/n100.r04.s056.untrimmed.sorted.bam\" -b \"n100.r04.s056_output/n100.r04.s056.primers.bed\" -p \"n100.r04.s056_output/n100.r04.s056.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s056_output/n100.r04.s056.trimmed.sorted.bam\" \"n100.r04.s056_output/n100.r04.s056.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s056_output/n100.r04.s056.reference.fas\" \"n100.r04.s056_output/n100.r04.s056.trimmed.sorted.bam\" > \"n100.r04.s056_output/n100.r04.s056.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s056_output/n100.r04.s056.reference.fas\" --call-indels \"n100.r04.s056_output/n100.r04.s056.trimmed.sorted.bam\" > \"n100.r04.s056_output/n100.r04.s056.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s056_output/n100.r04.s056.trimmed.sorted.bam\" > \"n100.r04.s056_output/n100.r04.s056.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s056_output/n100.r04.s056.depth.txt\" \"n100.r04.s056_output/n100.r04.s056.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s056_output/n100.r04.s056.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s056_output/n100.r04.s056.reference.fas\" | bcftools consensus -m \"n100.r04.s056_output/n100.r04.s056.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s056_output/n100.r04.s056.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s056_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s056_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s056_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 5947e81d (flow 57e39d90): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s083_output\"\n        wget -O \"n100.r04.s083_output/n100.r04.s083.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s083_output/n100.r04.s083.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s083_output/n100.r04.s083.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s083_output/n100.r04.s083.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s083_output/n100.r04.s083.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s083_output/n100.r04.s083.reference.fas\" \"n100.r04.s083_output/n100.r04.s083.fq1.fastq\" \"n100.r04.s083_output/n100.r04.s083.fq2.fastq\" | samtools view -bS - > \"n100.r04.s083_output/n100.r04.s083.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s083_output/n100.r04.s083.untrimmed.sorted.bam\" \"n100.r04.s083_output/n100.r04.s083.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s083_output/n100.r04.s083.untrimmed.sorted.bam\" -b \"n100.r04.s083_output/n100.r04.s083.primers.bed\" -p \"n100.r04.s083_output/n100.r04.s083.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s083_output/n100.r04.s083.trimmed.sorted.bam\" \"n100.r04.s083_output/n100.r04.s083.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s083_output/n100.r04.s083.reference.fas\" \"n100.r04.s083_output/n100.r04.s083.trimmed.sorted.bam\" > \"n100.r04.s083_output/n100.r04.s083.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s083_output/n100.r04.s083.reference.fas\" --call-indels \"n100.r04.s083_output/n100.r04.s083.trimmed.sorted.bam\" > \"n100.r04.s083_output/n100.r04.s083.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s083_output/n100.r04.s083.trimmed.sorted.bam\" > \"n100.r04.s083_output/n100.r04.s083.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s083_output/n100.r04.s083.depth.txt\" \"n100.r04.s083_output/n100.r04.s083.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s083_output/n100.r04.s083.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s083_output/n100.r04.s083.reference.fas\" | bcftools consensus -m \"n100.r04.s083_output/n100.r04.s083.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s083_output/n100.r04.s083.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s083_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s083_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s083_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 5337d60f (flow 1381d801): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s097_output\"\n        wget -O \"n100.r04.s097_output/n100.r04.s097.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s097_output/n100.r04.s097.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s097_output/n100.r04.s097.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s097_output/n100.r04.s097.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s097_output/n100.r04.s097.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s097_output/n100.r04.s097.reference.fas\" \"n100.r04.s097_output/n100.r04.s097.fq1.fastq\" \"n100.r04.s097_output/n100.r04.s097.fq2.fastq\" | samtools view -bS - > \"n100.r04.s097_output/n100.r04.s097.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s097_output/n100.r04.s097.untrimmed.sorted.bam\" \"n100.r04.s097_output/n100.r04.s097.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s097_output/n100.r04.s097.untrimmed.sorted.bam\" -b \"n100.r04.s097_output/n100.r04.s097.primers.bed\" -p \"n100.r04.s097_output/n100.r04.s097.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s097_output/n100.r04.s097.trimmed.sorted.bam\" \"n100.r04.s097_output/n100.r04.s097.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s097_output/n100.r04.s097.reference.fas\" \"n100.r04.s097_output/n100.r04.s097.trimmed.sorted.bam\" > \"n100.r04.s097_output/n100.r04.s097.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s097_output/n100.r04.s097.reference.fas\" --call-indels \"n100.r04.s097_output/n100.r04.s097.trimmed.sorted.bam\" > \"n100.r04.s097_output/n100.r04.s097.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s097_output/n100.r04.s097.trimmed.sorted.bam\" > \"n100.r04.s097_output/n100.r04.s097.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s097_output/n100.r04.s097.depth.txt\" \"n100.r04.s097_output/n100.r04.s097.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s097_output/n100.r04.s097.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s097_output/n100.r04.s097.reference.fas\" | bcftools consensus -m \"n100.r04.s097_output/n100.r04.s097.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s097_output/n100.r04.s097.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s097_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s097_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s097_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task b838e67f (flow f8ffa904): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s065_output\"\n        wget -O \"n100.r04.s065_output/n100.r04.s065.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s065_output/n100.r04.s065.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s065_output/n100.r04.s065.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s065_output/n100.r04.s065.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s065_output/n100.r04.s065.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s065_output/n100.r04.s065.reference.fas\" \"n100.r04.s065_output/n100.r04.s065.fq1.fastq\" \"n100.r04.s065_output/n100.r04.s065.fq2.fastq\" | samtools view -bS - > \"n100.r04.s065_output/n100.r04.s065.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s065_output/n100.r04.s065.untrimmed.sorted.bam\" \"n100.r04.s065_output/n100.r04.s065.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s065_output/n100.r04.s065.untrimmed.sorted.bam\" -b \"n100.r04.s065_output/n100.r04.s065.primers.bed\" -p \"n100.r04.s065_output/n100.r04.s065.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s065_output/n100.r04.s065.trimmed.sorted.bam\" \"n100.r04.s065_output/n100.r04.s065.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s065_output/n100.r04.s065.reference.fas\" \"n100.r04.s065_output/n100.r04.s065.trimmed.sorted.bam\" > \"n100.r04.s065_output/n100.r04.s065.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s065_output/n100.r04.s065.reference.fas\" --call-indels \"n100.r04.s065_output/n100.r04.s065.trimmed.sorted.bam\" > \"n100.r04.s065_output/n100.r04.s065.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s065_output/n100.r04.s065.trimmed.sorted.bam\" > \"n100.r04.s065_output/n100.r04.s065.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s065_output/n100.r04.s065.depth.txt\" \"n100.r04.s065_output/n100.r04.s065.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s065_output/n100.r04.s065.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s065_output/n100.r04.s065.reference.fas\" | bcftools consensus -m \"n100.r04.s065_output/n100.r04.s065.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s065_output/n100.r04.s065.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s065_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s065_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s065_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 3447498f (flow 193dd149): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s023_output\"\n        wget -O \"n100.r04.s023_output/n100.r04.s023.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s023_output/n100.r04.s023.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s023_output/n100.r04.s023.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s023_output/n100.r04.s023.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s023_output/n100.r04.s023.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s023_output/n100.r04.s023.reference.fas\" \"n100.r04.s023_output/n100.r04.s023.fq1.fastq\" \"n100.r04.s023_output/n100.r04.s023.fq2.fastq\" | samtools view -bS - > \"n100.r04.s023_output/n100.r04.s023.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s023_output/n100.r04.s023.untrimmed.sorted.bam\" \"n100.r04.s023_output/n100.r04.s023.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s023_output/n100.r04.s023.untrimmed.sorted.bam\" -b \"n100.r04.s023_output/n100.r04.s023.primers.bed\" -p \"n100.r04.s023_output/n100.r04.s023.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s023_output/n100.r04.s023.trimmed.sorted.bam\" \"n100.r04.s023_output/n100.r04.s023.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s023_output/n100.r04.s023.reference.fas\" \"n100.r04.s023_output/n100.r04.s023.trimmed.sorted.bam\" > \"n100.r04.s023_output/n100.r04.s023.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s023_output/n100.r04.s023.reference.fas\" --call-indels \"n100.r04.s023_output/n100.r04.s023.trimmed.sorted.bam\" > \"n100.r04.s023_output/n100.r04.s023.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s023_output/n100.r04.s023.trimmed.sorted.bam\" > \"n100.r04.s023_output/n100.r04.s023.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s023_output/n100.r04.s023.depth.txt\" \"n100.r04.s023_output/n100.r04.s023.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s023_output/n100.r04.s023.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s023_output/n100.r04.s023.reference.fas\" | bcftools consensus -m \"n100.r04.s023_output/n100.r04.s023.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s023_output/n100.r04.s023.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s023_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s023_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s023_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 0956178b (flow 5468f4a3): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s014_output\"\n        wget -O \"n100.r04.s014_output/n100.r04.s014.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s014_output/n100.r04.s014.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s014_output/n100.r04.s014.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s014_output/n100.r04.s014.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s014_output/n100.r04.s014.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s014_output/n100.r04.s014.reference.fas\" \"n100.r04.s014_output/n100.r04.s014.fq1.fastq\" \"n100.r04.s014_output/n100.r04.s014.fq2.fastq\" | samtools view -bS - > \"n100.r04.s014_output/n100.r04.s014.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s014_output/n100.r04.s014.untrimmed.sorted.bam\" \"n100.r04.s014_output/n100.r04.s014.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s014_output/n100.r04.s014.untrimmed.sorted.bam\" -b \"n100.r04.s014_output/n100.r04.s014.primers.bed\" -p \"n100.r04.s014_output/n100.r04.s014.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s014_output/n100.r04.s014.trimmed.sorted.bam\" \"n100.r04.s014_output/n100.r04.s014.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s014_output/n100.r04.s014.reference.fas\" \"n100.r04.s014_output/n100.r04.s014.trimmed.sorted.bam\" > \"n100.r04.s014_output/n100.r04.s014.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s014_output/n100.r04.s014.reference.fas\" --call-indels \"n100.r04.s014_output/n100.r04.s014.trimmed.sorted.bam\" > \"n100.r04.s014_output/n100.r04.s014.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s014_output/n100.r04.s014.trimmed.sorted.bam\" > \"n100.r04.s014_output/n100.r04.s014.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s014_output/n100.r04.s014.depth.txt\" \"n100.r04.s014_output/n100.r04.s014.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s014_output/n100.r04.s014.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s014_output/n100.r04.s014.reference.fas\" | bcftools consensus -m \"n100.r04.s014_output/n100.r04.s014.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s014_output/n100.r04.s014.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s014_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s014_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s014_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task ce0306d2 (flow f3a54b9e): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s084_output\"\n        wget -O \"n100.r04.s084_output/n100.r04.s084.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s084_output/n100.r04.s084.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s084_output/n100.r04.s084.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s084_output/n100.r04.s084.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s084_output/n100.r04.s084.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s084_output/n100.r04.s084.reference.fas\" \"n100.r04.s084_output/n100.r04.s084.fq1.fastq\" \"n100.r04.s084_output/n100.r04.s084.fq2.fastq\" | samtools view -bS - > \"n100.r04.s084_output/n100.r04.s084.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s084_output/n100.r04.s084.untrimmed.sorted.bam\" \"n100.r04.s084_output/n100.r04.s084.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s084_output/n100.r04.s084.untrimmed.sorted.bam\" -b \"n100.r04.s084_output/n100.r04.s084.primers.bed\" -p \"n100.r04.s084_output/n100.r04.s084.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s084_output/n100.r04.s084.trimmed.sorted.bam\" \"n100.r04.s084_output/n100.r04.s084.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s084_output/n100.r04.s084.reference.fas\" \"n100.r04.s084_output/n100.r04.s084.trimmed.sorted.bam\" > \"n100.r04.s084_output/n100.r04.s084.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s084_output/n100.r04.s084.reference.fas\" --call-indels \"n100.r04.s084_output/n100.r04.s084.trimmed.sorted.bam\" > \"n100.r04.s084_output/n100.r04.s084.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s084_output/n100.r04.s084.trimmed.sorted.bam\" > \"n100.r04.s084_output/n100.r04.s084.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s084_output/n100.r04.s084.depth.txt\" \"n100.r04.s084_output/n100.r04.s084.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s084_output/n100.r04.s084.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s084_output/n100.r04.s084.reference.fas\" | bcftools consensus -m \"n100.r04.s084_output/n100.r04.s084.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s084_output/n100.r04.s084.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s084_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s084_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s084_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 50845845 (flow cc504ab7): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s062_output\"\n        wget -O \"n100.r04.s062_output/n100.r04.s062.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s062_output/n100.r04.s062.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s062_output/n100.r04.s062.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s062_output/n100.r04.s062.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s062_output/n100.r04.s062.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s062_output/n100.r04.s062.reference.fas\" \"n100.r04.s062_output/n100.r04.s062.fq1.fastq\" \"n100.r04.s062_output/n100.r04.s062.fq2.fastq\" | samtools view -bS - > \"n100.r04.s062_output/n100.r04.s062.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s062_output/n100.r04.s062.untrimmed.sorted.bam\" \"n100.r04.s062_output/n100.r04.s062.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s062_output/n100.r04.s062.untrimmed.sorted.bam\" -b \"n100.r04.s062_output/n100.r04.s062.primers.bed\" -p \"n100.r04.s062_output/n100.r04.s062.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s062_output/n100.r04.s062.trimmed.sorted.bam\" \"n100.r04.s062_output/n100.r04.s062.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s062_output/n100.r04.s062.reference.fas\" \"n100.r04.s062_output/n100.r04.s062.trimmed.sorted.bam\" > \"n100.r04.s062_output/n100.r04.s062.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s062_output/n100.r04.s062.reference.fas\" --call-indels \"n100.r04.s062_output/n100.r04.s062.trimmed.sorted.bam\" > \"n100.r04.s062_output/n100.r04.s062.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s062_output/n100.r04.s062.trimmed.sorted.bam\" > \"n100.r04.s062_output/n100.r04.s062.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s062_output/n100.r04.s062.depth.txt\" \"n100.r04.s062_output/n100.r04.s062.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s062_output/n100.r04.s062.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s062_output/n100.r04.s062.reference.fas\" | bcftools consensus -m \"n100.r04.s062_output/n100.r04.s062.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s062_output/n100.r04.s062.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s062_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s062_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s062_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 15151169 (flow a6da6753): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s079_output\"\n        wget -O \"n100.r04.s079_output/n100.r04.s079.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s079_output/n100.r04.s079.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s079_output/n100.r04.s079.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s079_output/n100.r04.s079.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s079_output/n100.r04.s079.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s079_output/n100.r04.s079.reference.fas\" \"n100.r04.s079_output/n100.r04.s079.fq1.fastq\" \"n100.r04.s079_output/n100.r04.s079.fq2.fastq\" | samtools view -bS - > \"n100.r04.s079_output/n100.r04.s079.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s079_output/n100.r04.s079.untrimmed.sorted.bam\" \"n100.r04.s079_output/n100.r04.s079.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s079_output/n100.r04.s079.untrimmed.sorted.bam\" -b \"n100.r04.s079_output/n100.r04.s079.primers.bed\" -p \"n100.r04.s079_output/n100.r04.s079.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s079_output/n100.r04.s079.trimmed.sorted.bam\" \"n100.r04.s079_output/n100.r04.s079.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s079_output/n100.r04.s079.reference.fas\" \"n100.r04.s079_output/n100.r04.s079.trimmed.sorted.bam\" > \"n100.r04.s079_output/n100.r04.s079.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s079_output/n100.r04.s079.reference.fas\" --call-indels \"n100.r04.s079_output/n100.r04.s079.trimmed.sorted.bam\" > \"n100.r04.s079_output/n100.r04.s079.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s079_output/n100.r04.s079.trimmed.sorted.bam\" > \"n100.r04.s079_output/n100.r04.s079.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s079_output/n100.r04.s079.depth.txt\" \"n100.r04.s079_output/n100.r04.s079.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s079_output/n100.r04.s079.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s079_output/n100.r04.s079.reference.fas\" | bcftools consensus -m \"n100.r04.s079_output/n100.r04.s079.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s079_output/n100.r04.s079.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s079_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s079_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s079_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task f7f2648e (flow 062361bd): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s071_output\"\n        wget -O \"n100.r04.s071_output/n100.r04.s071.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s071_output/n100.r04.s071.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s071_output/n100.r04.s071.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s071_output/n100.r04.s071.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s071_output/n100.r04.s071.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s071_output/n100.r04.s071.reference.fas\" \"n100.r04.s071_output/n100.r04.s071.fq1.fastq\" \"n100.r04.s071_output/n100.r04.s071.fq2.fastq\" | samtools view -bS - > \"n100.r04.s071_output/n100.r04.s071.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s071_output/n100.r04.s071.untrimmed.sorted.bam\" \"n100.r04.s071_output/n100.r04.s071.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s071_output/n100.r04.s071.untrimmed.sorted.bam\" -b \"n100.r04.s071_output/n100.r04.s071.primers.bed\" -p \"n100.r04.s071_output/n100.r04.s071.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s071_output/n100.r04.s071.trimmed.sorted.bam\" \"n100.r04.s071_output/n100.r04.s071.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s071_output/n100.r04.s071.reference.fas\" \"n100.r04.s071_output/n100.r04.s071.trimmed.sorted.bam\" > \"n100.r04.s071_output/n100.r04.s071.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s071_output/n100.r04.s071.reference.fas\" --call-indels \"n100.r04.s071_output/n100.r04.s071.trimmed.sorted.bam\" > \"n100.r04.s071_output/n100.r04.s071.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s071_output/n100.r04.s071.trimmed.sorted.bam\" > \"n100.r04.s071_output/n100.r04.s071.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s071_output/n100.r04.s071.depth.txt\" \"n100.r04.s071_output/n100.r04.s071.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s071_output/n100.r04.s071.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s071_output/n100.r04.s071.reference.fas\" | bcftools consensus -m \"n100.r04.s071_output/n100.r04.s071.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s071_output/n100.r04.s071.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s071_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s071_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s071_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 29c9d867 (flow 0f009068): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s081_output\"\n        wget -O \"n100.r04.s081_output/n100.r04.s081.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s081_output/n100.r04.s081.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s081_output/n100.r04.s081.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s081_output/n100.r04.s081.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s081_output/n100.r04.s081.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s081_output/n100.r04.s081.reference.fas\" \"n100.r04.s081_output/n100.r04.s081.fq1.fastq\" \"n100.r04.s081_output/n100.r04.s081.fq2.fastq\" | samtools view -bS - > \"n100.r04.s081_output/n100.r04.s081.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s081_output/n100.r04.s081.untrimmed.sorted.bam\" \"n100.r04.s081_output/n100.r04.s081.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s081_output/n100.r04.s081.untrimmed.sorted.bam\" -b \"n100.r04.s081_output/n100.r04.s081.primers.bed\" -p \"n100.r04.s081_output/n100.r04.s081.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s081_output/n100.r04.s081.trimmed.sorted.bam\" \"n100.r04.s081_output/n100.r04.s081.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s081_output/n100.r04.s081.reference.fas\" \"n100.r04.s081_output/n100.r04.s081.trimmed.sorted.bam\" > \"n100.r04.s081_output/n100.r04.s081.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s081_output/n100.r04.s081.reference.fas\" --call-indels \"n100.r04.s081_output/n100.r04.s081.trimmed.sorted.bam\" > \"n100.r04.s081_output/n100.r04.s081.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s081_output/n100.r04.s081.trimmed.sorted.bam\" > \"n100.r04.s081_output/n100.r04.s081.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s081_output/n100.r04.s081.depth.txt\" \"n100.r04.s081_output/n100.r04.s081.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s081_output/n100.r04.s081.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s081_output/n100.r04.s081.reference.fas\" | bcftools consensus -m \"n100.r04.s081_output/n100.r04.s081.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s081_output/n100.r04.s081.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s081_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s081_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s081_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 7709a29e (flow 20e26740): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s080_output\"\n        wget -O \"n100.r04.s080_output/n100.r04.s080.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s080_output/n100.r04.s080.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s080_output/n100.r04.s080.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s080_output/n100.r04.s080.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s080_output/n100.r04.s080.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s080_output/n100.r04.s080.reference.fas\" \"n100.r04.s080_output/n100.r04.s080.fq1.fastq\" \"n100.r04.s080_output/n100.r04.s080.fq2.fastq\" | samtools view -bS - > \"n100.r04.s080_output/n100.r04.s080.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s080_output/n100.r04.s080.untrimmed.sorted.bam\" \"n100.r04.s080_output/n100.r04.s080.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s080_output/n100.r04.s080.untrimmed.sorted.bam\" -b \"n100.r04.s080_output/n100.r04.s080.primers.bed\" -p \"n100.r04.s080_output/n100.r04.s080.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s080_output/n100.r04.s080.trimmed.sorted.bam\" \"n100.r04.s080_output/n100.r04.s080.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s080_output/n100.r04.s080.reference.fas\" \"n100.r04.s080_output/n100.r04.s080.trimmed.sorted.bam\" > \"n100.r04.s080_output/n100.r04.s080.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s080_output/n100.r04.s080.reference.fas\" --call-indels \"n100.r04.s080_output/n100.r04.s080.trimmed.sorted.bam\" > \"n100.r04.s080_output/n100.r04.s080.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s080_output/n100.r04.s080.trimmed.sorted.bam\" > \"n100.r04.s080_output/n100.r04.s080.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s080_output/n100.r04.s080.depth.txt\" \"n100.r04.s080_output/n100.r04.s080.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s080_output/n100.r04.s080.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s080_output/n100.r04.s080.reference.fas\" | bcftools consensus -m \"n100.r04.s080_output/n100.r04.s080.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s080_output/n100.r04.s080.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s080_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s080_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s080_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 331a85cb (flow e0813834): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s067_output\"\n        wget -O \"n100.r04.s067_output/n100.r04.s067.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s067_output/n100.r04.s067.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s067_output/n100.r04.s067.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s067_output/n100.r04.s067.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s067_output/n100.r04.s067.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s067_output/n100.r04.s067.reference.fas\" \"n100.r04.s067_output/n100.r04.s067.fq1.fastq\" \"n100.r04.s067_output/n100.r04.s067.fq2.fastq\" | samtools view -bS - > \"n100.r04.s067_output/n100.r04.s067.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s067_output/n100.r04.s067.untrimmed.sorted.bam\" \"n100.r04.s067_output/n100.r04.s067.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s067_output/n100.r04.s067.untrimmed.sorted.bam\" -b \"n100.r04.s067_output/n100.r04.s067.primers.bed\" -p \"n100.r04.s067_output/n100.r04.s067.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s067_output/n100.r04.s067.trimmed.sorted.bam\" \"n100.r04.s067_output/n100.r04.s067.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s067_output/n100.r04.s067.reference.fas\" \"n100.r04.s067_output/n100.r04.s067.trimmed.sorted.bam\" > \"n100.r04.s067_output/n100.r04.s067.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s067_output/n100.r04.s067.reference.fas\" --call-indels \"n100.r04.s067_output/n100.r04.s067.trimmed.sorted.bam\" > \"n100.r04.s067_output/n100.r04.s067.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s067_output/n100.r04.s067.trimmed.sorted.bam\" > \"n100.r04.s067_output/n100.r04.s067.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s067_output/n100.r04.s067.depth.txt\" \"n100.r04.s067_output/n100.r04.s067.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s067_output/n100.r04.s067.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s067_output/n100.r04.s067.reference.fas\" | bcftools consensus -m \"n100.r04.s067_output/n100.r04.s067.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s067_output/n100.r04.s067.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s067_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s067_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s067_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task de374a3f (flow c4d8efb1): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s059_output\"\n        wget -O \"n100.r04.s059_output/n100.r04.s059.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s059_output/n100.r04.s059.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s059_output/n100.r04.s059.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s059_output/n100.r04.s059.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s059_output/n100.r04.s059.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s059_output/n100.r04.s059.reference.fas\" \"n100.r04.s059_output/n100.r04.s059.fq1.fastq\" \"n100.r04.s059_output/n100.r04.s059.fq2.fastq\" | samtools view -bS - > \"n100.r04.s059_output/n100.r04.s059.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s059_output/n100.r04.s059.untrimmed.sorted.bam\" \"n100.r04.s059_output/n100.r04.s059.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s059_output/n100.r04.s059.untrimmed.sorted.bam\" -b \"n100.r04.s059_output/n100.r04.s059.primers.bed\" -p \"n100.r04.s059_output/n100.r04.s059.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s059_output/n100.r04.s059.trimmed.sorted.bam\" \"n100.r04.s059_output/n100.r04.s059.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s059_output/n100.r04.s059.reference.fas\" \"n100.r04.s059_output/n100.r04.s059.trimmed.sorted.bam\" > \"n100.r04.s059_output/n100.r04.s059.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s059_output/n100.r04.s059.reference.fas\" --call-indels \"n100.r04.s059_output/n100.r04.s059.trimmed.sorted.bam\" > \"n100.r04.s059_output/n100.r04.s059.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s059_output/n100.r04.s059.trimmed.sorted.bam\" > \"n100.r04.s059_output/n100.r04.s059.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s059_output/n100.r04.s059.depth.txt\" \"n100.r04.s059_output/n100.r04.s059.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s059_output/n100.r04.s059.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s059_output/n100.r04.s059.reference.fas\" | bcftools consensus -m \"n100.r04.s059_output/n100.r04.s059.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s059_output/n100.r04.s059.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s059_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s059_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s059_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 5e492d41 (flow ac9e3373): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s050_output\"\n        wget -O \"n100.r04.s050_output/n100.r04.s050.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s050_output/n100.r04.s050.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s050_output/n100.r04.s050.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s050_output/n100.r04.s050.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s050_output/n100.r04.s050.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s050_output/n100.r04.s050.reference.fas\" \"n100.r04.s050_output/n100.r04.s050.fq1.fastq\" \"n100.r04.s050_output/n100.r04.s050.fq2.fastq\" | samtools view -bS - > \"n100.r04.s050_output/n100.r04.s050.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s050_output/n100.r04.s050.untrimmed.sorted.bam\" \"n100.r04.s050_output/n100.r04.s050.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s050_output/n100.r04.s050.untrimmed.sorted.bam\" -b \"n100.r04.s050_output/n100.r04.s050.primers.bed\" -p \"n100.r04.s050_output/n100.r04.s050.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s050_output/n100.r04.s050.trimmed.sorted.bam\" \"n100.r04.s050_output/n100.r04.s050.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s050_output/n100.r04.s050.reference.fas\" \"n100.r04.s050_output/n100.r04.s050.trimmed.sorted.bam\" > \"n100.r04.s050_output/n100.r04.s050.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s050_output/n100.r04.s050.reference.fas\" --call-indels \"n100.r04.s050_output/n100.r04.s050.trimmed.sorted.bam\" > \"n100.r04.s050_output/n100.r04.s050.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s050_output/n100.r04.s050.trimmed.sorted.bam\" > \"n100.r04.s050_output/n100.r04.s050.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s050_output/n100.r04.s050.depth.txt\" \"n100.r04.s050_output/n100.r04.s050.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s050_output/n100.r04.s050.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s050_output/n100.r04.s050.reference.fas\" | bcftools consensus -m \"n100.r04.s050_output/n100.r04.s050.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s050_output/n100.r04.s050.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s050_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s050_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s050_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 5da77f67 (flow 71f05c8c): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s063_output\"\n        wget -O \"n100.r04.s063_output/n100.r04.s063.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s063_output/n100.r04.s063.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s063_output/n100.r04.s063.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s063_output/n100.r04.s063.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s063_output/n100.r04.s063.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s063_output/n100.r04.s063.reference.fas\" \"n100.r04.s063_output/n100.r04.s063.fq1.fastq\" \"n100.r04.s063_output/n100.r04.s063.fq2.fastq\" | samtools view -bS - > \"n100.r04.s063_output/n100.r04.s063.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s063_output/n100.r04.s063.untrimmed.sorted.bam\" \"n100.r04.s063_output/n100.r04.s063.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s063_output/n100.r04.s063.untrimmed.sorted.bam\" -b \"n100.r04.s063_output/n100.r04.s063.primers.bed\" -p \"n100.r04.s063_output/n100.r04.s063.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s063_output/n100.r04.s063.trimmed.sorted.bam\" \"n100.r04.s063_output/n100.r04.s063.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s063_output/n100.r04.s063.reference.fas\" \"n100.r04.s063_output/n100.r04.s063.trimmed.sorted.bam\" > \"n100.r04.s063_output/n100.r04.s063.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s063_output/n100.r04.s063.reference.fas\" --call-indels \"n100.r04.s063_output/n100.r04.s063.trimmed.sorted.bam\" > \"n100.r04.s063_output/n100.r04.s063.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s063_output/n100.r04.s063.trimmed.sorted.bam\" > \"n100.r04.s063_output/n100.r04.s063.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s063_output/n100.r04.s063.depth.txt\" \"n100.r04.s063_output/n100.r04.s063.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s063_output/n100.r04.s063.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s063_output/n100.r04.s063.reference.fas\" | bcftools consensus -m \"n100.r04.s063_output/n100.r04.s063.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s063_output/n100.r04.s063.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s063_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s063_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s063_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task e7c3fad1 (flow 73faee38): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s002_output\"\n        wget -O \"n100.r04.s002_output/n100.r04.s002.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s002_output/n100.r04.s002.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s002_output/n100.r04.s002.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s002_output/n100.r04.s002.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s002_output/n100.r04.s002.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s002_output/n100.r04.s002.reference.fas\" \"n100.r04.s002_output/n100.r04.s002.fq1.fastq\" \"n100.r04.s002_output/n100.r04.s002.fq2.fastq\" | samtools view -bS - > \"n100.r04.s002_output/n100.r04.s002.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s002_output/n100.r04.s002.untrimmed.sorted.bam\" \"n100.r04.s002_output/n100.r04.s002.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s002_output/n100.r04.s002.untrimmed.sorted.bam\" -b \"n100.r04.s002_output/n100.r04.s002.primers.bed\" -p \"n100.r04.s002_output/n100.r04.s002.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s002_output/n100.r04.s002.trimmed.sorted.bam\" \"n100.r04.s002_output/n100.r04.s002.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s002_output/n100.r04.s002.reference.fas\" \"n100.r04.s002_output/n100.r04.s002.trimmed.sorted.bam\" > \"n100.r04.s002_output/n100.r04.s002.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s002_output/n100.r04.s002.reference.fas\" --call-indels \"n100.r04.s002_output/n100.r04.s002.trimmed.sorted.bam\" > \"n100.r04.s002_output/n100.r04.s002.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s002_output/n100.r04.s002.trimmed.sorted.bam\" > \"n100.r04.s002_output/n100.r04.s002.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s002_output/n100.r04.s002.depth.txt\" \"n100.r04.s002_output/n100.r04.s002.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s002_output/n100.r04.s002.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s002_output/n100.r04.s002.reference.fas\" | bcftools consensus -m \"n100.r04.s002_output/n100.r04.s002.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s002_output/n100.r04.s002.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s002_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s002_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s002_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 5aa4bfc6 (flow e7565ce6): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s054_output\"\n        wget -O \"n100.r04.s054_output/n100.r04.s054.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s054_output/n100.r04.s054.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s054_output/n100.r04.s054.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s054_output/n100.r04.s054.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s054_output/n100.r04.s054.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s054_output/n100.r04.s054.reference.fas\" \"n100.r04.s054_output/n100.r04.s054.fq1.fastq\" \"n100.r04.s054_output/n100.r04.s054.fq2.fastq\" | samtools view -bS - > \"n100.r04.s054_output/n100.r04.s054.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s054_output/n100.r04.s054.untrimmed.sorted.bam\" \"n100.r04.s054_output/n100.r04.s054.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s054_output/n100.r04.s054.untrimmed.sorted.bam\" -b \"n100.r04.s054_output/n100.r04.s054.primers.bed\" -p \"n100.r04.s054_output/n100.r04.s054.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s054_output/n100.r04.s054.trimmed.sorted.bam\" \"n100.r04.s054_output/n100.r04.s054.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s054_output/n100.r04.s054.reference.fas\" \"n100.r04.s054_output/n100.r04.s054.trimmed.sorted.bam\" > \"n100.r04.s054_output/n100.r04.s054.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s054_output/n100.r04.s054.reference.fas\" --call-indels \"n100.r04.s054_output/n100.r04.s054.trimmed.sorted.bam\" > \"n100.r04.s054_output/n100.r04.s054.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s054_output/n100.r04.s054.trimmed.sorted.bam\" > \"n100.r04.s054_output/n100.r04.s054.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s054_output/n100.r04.s054.depth.txt\" \"n100.r04.s054_output/n100.r04.s054.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s054_output/n100.r04.s054.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s054_output/n100.r04.s054.reference.fas\" | bcftools consensus -m \"n100.r04.s054_output/n100.r04.s054.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s054_output/n100.r04.s054.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s054_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s054_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s054_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task e8d5592b (flow 7b4e38f2): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s064_output\"\n        wget -O \"n100.r04.s064_output/n100.r04.s064.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s064_output/n100.r04.s064.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s064_output/n100.r04.s064.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s064_output/n100.r04.s064.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s064_output/n100.r04.s064.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s064_output/n100.r04.s064.reference.fas\" \"n100.r04.s064_output/n100.r04.s064.fq1.fastq\" \"n100.r04.s064_output/n100.r04.s064.fq2.fastq\" | samtools view -bS - > \"n100.r04.s064_output/n100.r04.s064.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s064_output/n100.r04.s064.untrimmed.sorted.bam\" \"n100.r04.s064_output/n100.r04.s064.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s064_output/n100.r04.s064.untrimmed.sorted.bam\" -b \"n100.r04.s064_output/n100.r04.s064.primers.bed\" -p \"n100.r04.s064_output/n100.r04.s064.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s064_output/n100.r04.s064.trimmed.sorted.bam\" \"n100.r04.s064_output/n100.r04.s064.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s064_output/n100.r04.s064.reference.fas\" \"n100.r04.s064_output/n100.r04.s064.trimmed.sorted.bam\" > \"n100.r04.s064_output/n100.r04.s064.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s064_output/n100.r04.s064.reference.fas\" --call-indels \"n100.r04.s064_output/n100.r04.s064.trimmed.sorted.bam\" > \"n100.r04.s064_output/n100.r04.s064.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s064_output/n100.r04.s064.trimmed.sorted.bam\" > \"n100.r04.s064_output/n100.r04.s064.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s064_output/n100.r04.s064.depth.txt\" \"n100.r04.s064_output/n100.r04.s064.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s064_output/n100.r04.s064.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s064_output/n100.r04.s064.reference.fas\" | bcftools consensus -m \"n100.r04.s064_output/n100.r04.s064.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s064_output/n100.r04.s064.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s064_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s064_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s064_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 9a663e4e (flow 2d3488e5): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s053_output\"\n        wget -O \"n100.r04.s053_output/n100.r04.s053.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s053_output/n100.r04.s053.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s053_output/n100.r04.s053.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s053_output/n100.r04.s053.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s053_output/n100.r04.s053.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s053_output/n100.r04.s053.reference.fas\" \"n100.r04.s053_output/n100.r04.s053.fq1.fastq\" \"n100.r04.s053_output/n100.r04.s053.fq2.fastq\" | samtools view -bS - > \"n100.r04.s053_output/n100.r04.s053.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s053_output/n100.r04.s053.untrimmed.sorted.bam\" \"n100.r04.s053_output/n100.r04.s053.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s053_output/n100.r04.s053.untrimmed.sorted.bam\" -b \"n100.r04.s053_output/n100.r04.s053.primers.bed\" -p \"n100.r04.s053_output/n100.r04.s053.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s053_output/n100.r04.s053.trimmed.sorted.bam\" \"n100.r04.s053_output/n100.r04.s053.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s053_output/n100.r04.s053.reference.fas\" \"n100.r04.s053_output/n100.r04.s053.trimmed.sorted.bam\" > \"n100.r04.s053_output/n100.r04.s053.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s053_output/n100.r04.s053.reference.fas\" --call-indels \"n100.r04.s053_output/n100.r04.s053.trimmed.sorted.bam\" > \"n100.r04.s053_output/n100.r04.s053.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s053_output/n100.r04.s053.trimmed.sorted.bam\" > \"n100.r04.s053_output/n100.r04.s053.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s053_output/n100.r04.s053.depth.txt\" \"n100.r04.s053_output/n100.r04.s053.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s053_output/n100.r04.s053.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s053_output/n100.r04.s053.reference.fas\" | bcftools consensus -m \"n100.r04.s053_output/n100.r04.s053.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s053_output/n100.r04.s053.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s053_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s053_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s053_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task fc3e1467 (flow 1d35c114): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s057_output\"\n        wget -O \"n100.r04.s057_output/n100.r04.s057.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s057_output/n100.r04.s057.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s057_output/n100.r04.s057.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s057_output/n100.r04.s057.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s057_output/n100.r04.s057.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s057_output/n100.r04.s057.reference.fas\" \"n100.r04.s057_output/n100.r04.s057.fq1.fastq\" \"n100.r04.s057_output/n100.r04.s057.fq2.fastq\" | samtools view -bS - > \"n100.r04.s057_output/n100.r04.s057.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s057_output/n100.r04.s057.untrimmed.sorted.bam\" \"n100.r04.s057_output/n100.r04.s057.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s057_output/n100.r04.s057.untrimmed.sorted.bam\" -b \"n100.r04.s057_output/n100.r04.s057.primers.bed\" -p \"n100.r04.s057_output/n100.r04.s057.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s057_output/n100.r04.s057.trimmed.sorted.bam\" \"n100.r04.s057_output/n100.r04.s057.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s057_output/n100.r04.s057.reference.fas\" \"n100.r04.s057_output/n100.r04.s057.trimmed.sorted.bam\" > \"n100.r04.s057_output/n100.r04.s057.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s057_output/n100.r04.s057.reference.fas\" --call-indels \"n100.r04.s057_output/n100.r04.s057.trimmed.sorted.bam\" > \"n100.r04.s057_output/n100.r04.s057.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s057_output/n100.r04.s057.trimmed.sorted.bam\" > \"n100.r04.s057_output/n100.r04.s057.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s057_output/n100.r04.s057.depth.txt\" \"n100.r04.s057_output/n100.r04.s057.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s057_output/n100.r04.s057.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s057_output/n100.r04.s057.reference.fas\" | bcftools consensus -m \"n100.r04.s057_output/n100.r04.s057.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s057_output/n100.r04.s057.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s057_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s057_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s057_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task b8eef7a3 (flow 7fe68b7b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s082_output\"\n        wget -O \"n100.r04.s082_output/n100.r04.s082.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s082_output/n100.r04.s082.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s082_output/n100.r04.s082.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s082_output/n100.r04.s082.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s082_output/n100.r04.s082.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s082_output/n100.r04.s082.reference.fas\" \"n100.r04.s082_output/n100.r04.s082.fq1.fastq\" \"n100.r04.s082_output/n100.r04.s082.fq2.fastq\" | samtools view -bS - > \"n100.r04.s082_output/n100.r04.s082.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s082_output/n100.r04.s082.untrimmed.sorted.bam\" \"n100.r04.s082_output/n100.r04.s082.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s082_output/n100.r04.s082.untrimmed.sorted.bam\" -b \"n100.r04.s082_output/n100.r04.s082.primers.bed\" -p \"n100.r04.s082_output/n100.r04.s082.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s082_output/n100.r04.s082.trimmed.sorted.bam\" \"n100.r04.s082_output/n100.r04.s082.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s082_output/n100.r04.s082.reference.fas\" \"n100.r04.s082_output/n100.r04.s082.trimmed.sorted.bam\" > \"n100.r04.s082_output/n100.r04.s082.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s082_output/n100.r04.s082.reference.fas\" --call-indels \"n100.r04.s082_output/n100.r04.s082.trimmed.sorted.bam\" > \"n100.r04.s082_output/n100.r04.s082.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s082_output/n100.r04.s082.trimmed.sorted.bam\" > \"n100.r04.s082_output/n100.r04.s082.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s082_output/n100.r04.s082.depth.txt\" \"n100.r04.s082_output/n100.r04.s082.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s082_output/n100.r04.s082.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s082_output/n100.r04.s082.reference.fas\" | bcftools consensus -m \"n100.r04.s082_output/n100.r04.s082.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s082_output/n100.r04.s082.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s082_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s082_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s082_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task f2ec5fa9 (flow 460aa300): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s052_output\"\n        wget -O \"n100.r04.s052_output/n100.r04.s052.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s052_output/n100.r04.s052.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s052_output/n100.r04.s052.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s052_output/n100.r04.s052.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s052_output/n100.r04.s052.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s052_output/n100.r04.s052.reference.fas\" \"n100.r04.s052_output/n100.r04.s052.fq1.fastq\" \"n100.r04.s052_output/n100.r04.s052.fq2.fastq\" | samtools view -bS - > \"n100.r04.s052_output/n100.r04.s052.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s052_output/n100.r04.s052.untrimmed.sorted.bam\" \"n100.r04.s052_output/n100.r04.s052.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s052_output/n100.r04.s052.untrimmed.sorted.bam\" -b \"n100.r04.s052_output/n100.r04.s052.primers.bed\" -p \"n100.r04.s052_output/n100.r04.s052.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s052_output/n100.r04.s052.trimmed.sorted.bam\" \"n100.r04.s052_output/n100.r04.s052.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s052_output/n100.r04.s052.reference.fas\" \"n100.r04.s052_output/n100.r04.s052.trimmed.sorted.bam\" > \"n100.r04.s052_output/n100.r04.s052.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s052_output/n100.r04.s052.reference.fas\" --call-indels \"n100.r04.s052_output/n100.r04.s052.trimmed.sorted.bam\" > \"n100.r04.s052_output/n100.r04.s052.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s052_output/n100.r04.s052.trimmed.sorted.bam\" > \"n100.r04.s052_output/n100.r04.s052.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s052_output/n100.r04.s052.depth.txt\" \"n100.r04.s052_output/n100.r04.s052.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s052_output/n100.r04.s052.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s052_output/n100.r04.s052.reference.fas\" | bcftools consensus -m \"n100.r04.s052_output/n100.r04.s052.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s052_output/n100.r04.s052.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s052_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s052_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s052_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task d21168f4 (flow fb8de0c9): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s051_output\"\n        wget -O \"n100.r04.s051_output/n100.r04.s051.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s051_output/n100.r04.s051.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s051_output/n100.r04.s051.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s051_output/n100.r04.s051.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s051_output/n100.r04.s051.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s051_output/n100.r04.s051.reference.fas\" \"n100.r04.s051_output/n100.r04.s051.fq1.fastq\" \"n100.r04.s051_output/n100.r04.s051.fq2.fastq\" | samtools view -bS - > \"n100.r04.s051_output/n100.r04.s051.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s051_output/n100.r04.s051.untrimmed.sorted.bam\" \"n100.r04.s051_output/n100.r04.s051.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s051_output/n100.r04.s051.untrimmed.sorted.bam\" -b \"n100.r04.s051_output/n100.r04.s051.primers.bed\" -p \"n100.r04.s051_output/n100.r04.s051.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s051_output/n100.r04.s051.trimmed.sorted.bam\" \"n100.r04.s051_output/n100.r04.s051.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s051_output/n100.r04.s051.reference.fas\" \"n100.r04.s051_output/n100.r04.s051.trimmed.sorted.bam\" > \"n100.r04.s051_output/n100.r04.s051.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s051_output/n100.r04.s051.reference.fas\" --call-indels \"n100.r04.s051_output/n100.r04.s051.trimmed.sorted.bam\" > \"n100.r04.s051_output/n100.r04.s051.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s051_output/n100.r04.s051.trimmed.sorted.bam\" > \"n100.r04.s051_output/n100.r04.s051.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s051_output/n100.r04.s051.depth.txt\" \"n100.r04.s051_output/n100.r04.s051.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s051_output/n100.r04.s051.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s051_output/n100.r04.s051.reference.fas\" | bcftools consensus -m \"n100.r04.s051_output/n100.r04.s051.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s051_output/n100.r04.s051.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s051_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s051_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s051_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 7a4dfaa4 (flow 47beba72): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s085_output\"\n        wget -O \"n100.r04.s085_output/n100.r04.s085.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s085_output/n100.r04.s085.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s085_output/n100.r04.s085.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s085_output/n100.r04.s085.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s085_output/n100.r04.s085.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s085_output/n100.r04.s085.reference.fas\" \"n100.r04.s085_output/n100.r04.s085.fq1.fastq\" \"n100.r04.s085_output/n100.r04.s085.fq2.fastq\" | samtools view -bS - > \"n100.r04.s085_output/n100.r04.s085.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s085_output/n100.r04.s085.untrimmed.sorted.bam\" \"n100.r04.s085_output/n100.r04.s085.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s085_output/n100.r04.s085.untrimmed.sorted.bam\" -b \"n100.r04.s085_output/n100.r04.s085.primers.bed\" -p \"n100.r04.s085_output/n100.r04.s085.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s085_output/n100.r04.s085.trimmed.sorted.bam\" \"n100.r04.s085_output/n100.r04.s085.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s085_output/n100.r04.s085.reference.fas\" \"n100.r04.s085_output/n100.r04.s085.trimmed.sorted.bam\" > \"n100.r04.s085_output/n100.r04.s085.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s085_output/n100.r04.s085.reference.fas\" --call-indels \"n100.r04.s085_output/n100.r04.s085.trimmed.sorted.bam\" > \"n100.r04.s085_output/n100.r04.s085.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s085_output/n100.r04.s085.trimmed.sorted.bam\" > \"n100.r04.s085_output/n100.r04.s085.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s085_output/n100.r04.s085.depth.txt\" \"n100.r04.s085_output/n100.r04.s085.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s085_output/n100.r04.s085.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s085_output/n100.r04.s085.reference.fas\" | bcftools consensus -m \"n100.r04.s085_output/n100.r04.s085.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s085_output/n100.r04.s085.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s085_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s085_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s085_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 9181ecd7 (flow cfd8c852): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s086_output\"\n        wget -O \"n100.r04.s086_output/n100.r04.s086.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s086_output/n100.r04.s086.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s086_output/n100.r04.s086.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s086_output/n100.r04.s086.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s086_output/n100.r04.s086.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s086_output/n100.r04.s086.reference.fas\" \"n100.r04.s086_output/n100.r04.s086.fq1.fastq\" \"n100.r04.s086_output/n100.r04.s086.fq2.fastq\" | samtools view -bS - > \"n100.r04.s086_output/n100.r04.s086.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s086_output/n100.r04.s086.untrimmed.sorted.bam\" \"n100.r04.s086_output/n100.r04.s086.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s086_output/n100.r04.s086.untrimmed.sorted.bam\" -b \"n100.r04.s086_output/n100.r04.s086.primers.bed\" -p \"n100.r04.s086_output/n100.r04.s086.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s086_output/n100.r04.s086.trimmed.sorted.bam\" \"n100.r04.s086_output/n100.r04.s086.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s086_output/n100.r04.s086.reference.fas\" \"n100.r04.s086_output/n100.r04.s086.trimmed.sorted.bam\" > \"n100.r04.s086_output/n100.r04.s086.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s086_output/n100.r04.s086.reference.fas\" --call-indels \"n100.r04.s086_output/n100.r04.s086.trimmed.sorted.bam\" > \"n100.r04.s086_output/n100.r04.s086.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s086_output/n100.r04.s086.trimmed.sorted.bam\" > \"n100.r04.s086_output/n100.r04.s086.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s086_output/n100.r04.s086.depth.txt\" \"n100.r04.s086_output/n100.r04.s086.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s086_output/n100.r04.s086.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s086_output/n100.r04.s086.reference.fas\" | bcftools consensus -m \"n100.r04.s086_output/n100.r04.s086.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s086_output/n100.r04.s086.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s086_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s086_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s086_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task eee3329a (flow 7d1757b7): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s069_output\"\n        wget -O \"n100.r04.s069_output/n100.r04.s069.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s069_output/n100.r04.s069.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s069_output/n100.r04.s069.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s069_output/n100.r04.s069.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s069_output/n100.r04.s069.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s069_output/n100.r04.s069.reference.fas\" \"n100.r04.s069_output/n100.r04.s069.fq1.fastq\" \"n100.r04.s069_output/n100.r04.s069.fq2.fastq\" | samtools view -bS - > \"n100.r04.s069_output/n100.r04.s069.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s069_output/n100.r04.s069.untrimmed.sorted.bam\" \"n100.r04.s069_output/n100.r04.s069.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s069_output/n100.r04.s069.untrimmed.sorted.bam\" -b \"n100.r04.s069_output/n100.r04.s069.primers.bed\" -p \"n100.r04.s069_output/n100.r04.s069.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s069_output/n100.r04.s069.trimmed.sorted.bam\" \"n100.r04.s069_output/n100.r04.s069.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s069_output/n100.r04.s069.reference.fas\" \"n100.r04.s069_output/n100.r04.s069.trimmed.sorted.bam\" > \"n100.r04.s069_output/n100.r04.s069.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s069_output/n100.r04.s069.reference.fas\" --call-indels \"n100.r04.s069_output/n100.r04.s069.trimmed.sorted.bam\" > \"n100.r04.s069_output/n100.r04.s069.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s069_output/n100.r04.s069.trimmed.sorted.bam\" > \"n100.r04.s069_output/n100.r04.s069.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s069_output/n100.r04.s069.depth.txt\" \"n100.r04.s069_output/n100.r04.s069.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s069_output/n100.r04.s069.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s069_output/n100.r04.s069.reference.fas\" | bcftools consensus -m \"n100.r04.s069_output/n100.r04.s069.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s069_output/n100.r04.s069.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s069_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s069_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s069_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 8746c175 (flow e75028fb): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s001_output\"\n        wget -O \"n100.r04.s001_output/n100.r04.s001.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s001_output/n100.r04.s001.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s001_output/n100.r04.s001.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s001_output/n100.r04.s001.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s001_output/n100.r04.s001.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s001_output/n100.r04.s001.reference.fas\" \"n100.r04.s001_output/n100.r04.s001.fq1.fastq\" \"n100.r04.s001_output/n100.r04.s001.fq2.fastq\" | samtools view -bS - > \"n100.r04.s001_output/n100.r04.s001.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s001_output/n100.r04.s001.untrimmed.sorted.bam\" \"n100.r04.s001_output/n100.r04.s001.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s001_output/n100.r04.s001.untrimmed.sorted.bam\" -b \"n100.r04.s001_output/n100.r04.s001.primers.bed\" -p \"n100.r04.s001_output/n100.r04.s001.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s001_output/n100.r04.s001.trimmed.sorted.bam\" \"n100.r04.s001_output/n100.r04.s001.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s001_output/n100.r04.s001.reference.fas\" \"n100.r04.s001_output/n100.r04.s001.trimmed.sorted.bam\" > \"n100.r04.s001_output/n100.r04.s001.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s001_output/n100.r04.s001.reference.fas\" --call-indels \"n100.r04.s001_output/n100.r04.s001.trimmed.sorted.bam\" > \"n100.r04.s001_output/n100.r04.s001.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s001_output/n100.r04.s001.trimmed.sorted.bam\" > \"n100.r04.s001_output/n100.r04.s001.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s001_output/n100.r04.s001.depth.txt\" \"n100.r04.s001_output/n100.r04.s001.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s001_output/n100.r04.s001.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s001_output/n100.r04.s001.reference.fas\" | bcftools consensus -m \"n100.r04.s001_output/n100.r04.s001.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s001_output/n100.r04.s001.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s001_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s001_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s001_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 5bff4606 (flow 9474069c): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s073_output\"\n        wget -O \"n100.r04.s073_output/n100.r04.s073.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s073_output/n100.r04.s073.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s073_output/n100.r04.s073.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s073_output/n100.r04.s073.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s073_output/n100.r04.s073.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s073_output/n100.r04.s073.reference.fas\" \"n100.r04.s073_output/n100.r04.s073.fq1.fastq\" \"n100.r04.s073_output/n100.r04.s073.fq2.fastq\" | samtools view -bS - > \"n100.r04.s073_output/n100.r04.s073.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s073_output/n100.r04.s073.untrimmed.sorted.bam\" \"n100.r04.s073_output/n100.r04.s073.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s073_output/n100.r04.s073.untrimmed.sorted.bam\" -b \"n100.r04.s073_output/n100.r04.s073.primers.bed\" -p \"n100.r04.s073_output/n100.r04.s073.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s073_output/n100.r04.s073.trimmed.sorted.bam\" \"n100.r04.s073_output/n100.r04.s073.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s073_output/n100.r04.s073.reference.fas\" \"n100.r04.s073_output/n100.r04.s073.trimmed.sorted.bam\" > \"n100.r04.s073_output/n100.r04.s073.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s073_output/n100.r04.s073.reference.fas\" --call-indels \"n100.r04.s073_output/n100.r04.s073.trimmed.sorted.bam\" > \"n100.r04.s073_output/n100.r04.s073.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s073_output/n100.r04.s073.trimmed.sorted.bam\" > \"n100.r04.s073_output/n100.r04.s073.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s073_output/n100.r04.s073.depth.txt\" \"n100.r04.s073_output/n100.r04.s073.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s073_output/n100.r04.s073.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s073_output/n100.r04.s073.reference.fas\" | bcftools consensus -m \"n100.r04.s073_output/n100.r04.s073.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s073_output/n100.r04.s073.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s073_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s073_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s073_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task da5603da (flow f97f1e63): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s074_output\"\n        wget -O \"n100.r04.s074_output/n100.r04.s074.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s074_output/n100.r04.s074.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s074_output/n100.r04.s074.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s074_output/n100.r04.s074.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s074_output/n100.r04.s074.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s074_output/n100.r04.s074.reference.fas\" \"n100.r04.s074_output/n100.r04.s074.fq1.fastq\" \"n100.r04.s074_output/n100.r04.s074.fq2.fastq\" | samtools view -bS - > \"n100.r04.s074_output/n100.r04.s074.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s074_output/n100.r04.s074.untrimmed.sorted.bam\" \"n100.r04.s074_output/n100.r04.s074.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s074_output/n100.r04.s074.untrimmed.sorted.bam\" -b \"n100.r04.s074_output/n100.r04.s074.primers.bed\" -p \"n100.r04.s074_output/n100.r04.s074.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s074_output/n100.r04.s074.trimmed.sorted.bam\" \"n100.r04.s074_output/n100.r04.s074.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s074_output/n100.r04.s074.reference.fas\" \"n100.r04.s074_output/n100.r04.s074.trimmed.sorted.bam\" > \"n100.r04.s074_output/n100.r04.s074.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s074_output/n100.r04.s074.reference.fas\" --call-indels \"n100.r04.s074_output/n100.r04.s074.trimmed.sorted.bam\" > \"n100.r04.s074_output/n100.r04.s074.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s074_output/n100.r04.s074.trimmed.sorted.bam\" > \"n100.r04.s074_output/n100.r04.s074.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s074_output/n100.r04.s074.depth.txt\" \"n100.r04.s074_output/n100.r04.s074.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s074_output/n100.r04.s074.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s074_output/n100.r04.s074.reference.fas\" | bcftools consensus -m \"n100.r04.s074_output/n100.r04.s074.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s074_output/n100.r04.s074.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s074_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s074_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s074_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 7ed73c0a (flow 610b915e): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s077_output\"\n        wget -O \"n100.r04.s077_output/n100.r04.s077.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s077_output/n100.r04.s077.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s077_output/n100.r04.s077.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s077_output/n100.r04.s077.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s077_output/n100.r04.s077.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s077_output/n100.r04.s077.reference.fas\" \"n100.r04.s077_output/n100.r04.s077.fq1.fastq\" \"n100.r04.s077_output/n100.r04.s077.fq2.fastq\" | samtools view -bS - > \"n100.r04.s077_output/n100.r04.s077.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s077_output/n100.r04.s077.untrimmed.sorted.bam\" \"n100.r04.s077_output/n100.r04.s077.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s077_output/n100.r04.s077.untrimmed.sorted.bam\" -b \"n100.r04.s077_output/n100.r04.s077.primers.bed\" -p \"n100.r04.s077_output/n100.r04.s077.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s077_output/n100.r04.s077.trimmed.sorted.bam\" \"n100.r04.s077_output/n100.r04.s077.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s077_output/n100.r04.s077.reference.fas\" \"n100.r04.s077_output/n100.r04.s077.trimmed.sorted.bam\" > \"n100.r04.s077_output/n100.r04.s077.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s077_output/n100.r04.s077.reference.fas\" --call-indels \"n100.r04.s077_output/n100.r04.s077.trimmed.sorted.bam\" > \"n100.r04.s077_output/n100.r04.s077.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s077_output/n100.r04.s077.trimmed.sorted.bam\" > \"n100.r04.s077_output/n100.r04.s077.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s077_output/n100.r04.s077.depth.txt\" \"n100.r04.s077_output/n100.r04.s077.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s077_output/n100.r04.s077.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s077_output/n100.r04.s077.reference.fas\" | bcftools consensus -m \"n100.r04.s077_output/n100.r04.s077.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s077_output/n100.r04.s077.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s077_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s077_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s077_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task a9de6e84 (flow 38bba01c): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s033_output\"\n        wget -O \"n100.r04.s033_output/n100.r04.s033.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s033_output/n100.r04.s033.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s033_output/n100.r04.s033.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s033_output/n100.r04.s033.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s033_output/n100.r04.s033.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s033_output/n100.r04.s033.reference.fas\" \"n100.r04.s033_output/n100.r04.s033.fq1.fastq\" \"n100.r04.s033_output/n100.r04.s033.fq2.fastq\" | samtools view -bS - > \"n100.r04.s033_output/n100.r04.s033.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s033_output/n100.r04.s033.untrimmed.sorted.bam\" \"n100.r04.s033_output/n100.r04.s033.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s033_output/n100.r04.s033.untrimmed.sorted.bam\" -b \"n100.r04.s033_output/n100.r04.s033.primers.bed\" -p \"n100.r04.s033_output/n100.r04.s033.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s033_output/n100.r04.s033.trimmed.sorted.bam\" \"n100.r04.s033_output/n100.r04.s033.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s033_output/n100.r04.s033.reference.fas\" \"n100.r04.s033_output/n100.r04.s033.trimmed.sorted.bam\" > \"n100.r04.s033_output/n100.r04.s033.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s033_output/n100.r04.s033.reference.fas\" --call-indels \"n100.r04.s033_output/n100.r04.s033.trimmed.sorted.bam\" > \"n100.r04.s033_output/n100.r04.s033.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s033_output/n100.r04.s033.trimmed.sorted.bam\" > \"n100.r04.s033_output/n100.r04.s033.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s033_output/n100.r04.s033.depth.txt\" \"n100.r04.s033_output/n100.r04.s033.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s033_output/n100.r04.s033.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s033_output/n100.r04.s033.reference.fas\" | bcftools consensus -m \"n100.r04.s033_output/n100.r04.s033.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s033_output/n100.r04.s033.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s033_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s033_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s033_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task ecbdae4e (flow ea7c1d46): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s058_output\"\n        wget -O \"n100.r04.s058_output/n100.r04.s058.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s058_output/n100.r04.s058.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s058_output/n100.r04.s058.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s058_output/n100.r04.s058.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s058_output/n100.r04.s058.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s058_output/n100.r04.s058.reference.fas\" \"n100.r04.s058_output/n100.r04.s058.fq1.fastq\" \"n100.r04.s058_output/n100.r04.s058.fq2.fastq\" | samtools view -bS - > \"n100.r04.s058_output/n100.r04.s058.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s058_output/n100.r04.s058.untrimmed.sorted.bam\" \"n100.r04.s058_output/n100.r04.s058.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s058_output/n100.r04.s058.untrimmed.sorted.bam\" -b \"n100.r04.s058_output/n100.r04.s058.primers.bed\" -p \"n100.r04.s058_output/n100.r04.s058.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s058_output/n100.r04.s058.trimmed.sorted.bam\" \"n100.r04.s058_output/n100.r04.s058.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s058_output/n100.r04.s058.reference.fas\" \"n100.r04.s058_output/n100.r04.s058.trimmed.sorted.bam\" > \"n100.r04.s058_output/n100.r04.s058.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s058_output/n100.r04.s058.reference.fas\" --call-indels \"n100.r04.s058_output/n100.r04.s058.trimmed.sorted.bam\" > \"n100.r04.s058_output/n100.r04.s058.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s058_output/n100.r04.s058.trimmed.sorted.bam\" > \"n100.r04.s058_output/n100.r04.s058.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s058_output/n100.r04.s058.depth.txt\" \"n100.r04.s058_output/n100.r04.s058.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s058_output/n100.r04.s058.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s058_output/n100.r04.s058.reference.fas\" | bcftools consensus -m \"n100.r04.s058_output/n100.r04.s058.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s058_output/n100.r04.s058.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s058_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s058_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s058_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 5a8a7584 (flow 749eedd5): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s032_output\"\n        wget -O \"n100.r04.s032_output/n100.r04.s032.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s032_output/n100.r04.s032.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s032_output/n100.r04.s032.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s032_output/n100.r04.s032.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s032_output/n100.r04.s032.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s032_output/n100.r04.s032.reference.fas\" \"n100.r04.s032_output/n100.r04.s032.fq1.fastq\" \"n100.r04.s032_output/n100.r04.s032.fq2.fastq\" | samtools view -bS - > \"n100.r04.s032_output/n100.r04.s032.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s032_output/n100.r04.s032.untrimmed.sorted.bam\" \"n100.r04.s032_output/n100.r04.s032.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s032_output/n100.r04.s032.untrimmed.sorted.bam\" -b \"n100.r04.s032_output/n100.r04.s032.primers.bed\" -p \"n100.r04.s032_output/n100.r04.s032.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s032_output/n100.r04.s032.trimmed.sorted.bam\" \"n100.r04.s032_output/n100.r04.s032.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s032_output/n100.r04.s032.reference.fas\" \"n100.r04.s032_output/n100.r04.s032.trimmed.sorted.bam\" > \"n100.r04.s032_output/n100.r04.s032.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s032_output/n100.r04.s032.reference.fas\" --call-indels \"n100.r04.s032_output/n100.r04.s032.trimmed.sorted.bam\" > \"n100.r04.s032_output/n100.r04.s032.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s032_output/n100.r04.s032.trimmed.sorted.bam\" > \"n100.r04.s032_output/n100.r04.s032.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s032_output/n100.r04.s032.depth.txt\" \"n100.r04.s032_output/n100.r04.s032.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s032_output/n100.r04.s032.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s032_output/n100.r04.s032.reference.fas\" | bcftools consensus -m \"n100.r04.s032_output/n100.r04.s032.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s032_output/n100.r04.s032.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s032_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s032_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s032_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 32101954 (flow f9878803): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s008_output\"\n        wget -O \"n100.r04.s008_output/n100.r04.s008.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s008_output/n100.r04.s008.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s008_output/n100.r04.s008.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s008_output/n100.r04.s008.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s008_output/n100.r04.s008.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s008_output/n100.r04.s008.reference.fas\" \"n100.r04.s008_output/n100.r04.s008.fq1.fastq\" \"n100.r04.s008_output/n100.r04.s008.fq2.fastq\" | samtools view -bS - > \"n100.r04.s008_output/n100.r04.s008.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s008_output/n100.r04.s008.untrimmed.sorted.bam\" \"n100.r04.s008_output/n100.r04.s008.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s008_output/n100.r04.s008.untrimmed.sorted.bam\" -b \"n100.r04.s008_output/n100.r04.s008.primers.bed\" -p \"n100.r04.s008_output/n100.r04.s008.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s008_output/n100.r04.s008.trimmed.sorted.bam\" \"n100.r04.s008_output/n100.r04.s008.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s008_output/n100.r04.s008.reference.fas\" \"n100.r04.s008_output/n100.r04.s008.trimmed.sorted.bam\" > \"n100.r04.s008_output/n100.r04.s008.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s008_output/n100.r04.s008.reference.fas\" --call-indels \"n100.r04.s008_output/n100.r04.s008.trimmed.sorted.bam\" > \"n100.r04.s008_output/n100.r04.s008.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s008_output/n100.r04.s008.trimmed.sorted.bam\" > \"n100.r04.s008_output/n100.r04.s008.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s008_output/n100.r04.s008.depth.txt\" \"n100.r04.s008_output/n100.r04.s008.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s008_output/n100.r04.s008.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s008_output/n100.r04.s008.reference.fas\" | bcftools consensus -m \"n100.r04.s008_output/n100.r04.s008.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s008_output/n100.r04.s008.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s008_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s008_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s008_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 5cd20acf (flow 77d99fec): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s010_output\"\n        wget -O \"n100.r04.s010_output/n100.r04.s010.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s010_output/n100.r04.s010.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s010_output/n100.r04.s010.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s010_output/n100.r04.s010.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s010_output/n100.r04.s010.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s010_output/n100.r04.s010.reference.fas\" \"n100.r04.s010_output/n100.r04.s010.fq1.fastq\" \"n100.r04.s010_output/n100.r04.s010.fq2.fastq\" | samtools view -bS - > \"n100.r04.s010_output/n100.r04.s010.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s010_output/n100.r04.s010.untrimmed.sorted.bam\" \"n100.r04.s010_output/n100.r04.s010.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s010_output/n100.r04.s010.untrimmed.sorted.bam\" -b \"n100.r04.s010_output/n100.r04.s010.primers.bed\" -p \"n100.r04.s010_output/n100.r04.s010.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s010_output/n100.r04.s010.trimmed.sorted.bam\" \"n100.r04.s010_output/n100.r04.s010.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s010_output/n100.r04.s010.reference.fas\" \"n100.r04.s010_output/n100.r04.s010.trimmed.sorted.bam\" > \"n100.r04.s010_output/n100.r04.s010.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s010_output/n100.r04.s010.reference.fas\" --call-indels \"n100.r04.s010_output/n100.r04.s010.trimmed.sorted.bam\" > \"n100.r04.s010_output/n100.r04.s010.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s010_output/n100.r04.s010.trimmed.sorted.bam\" > \"n100.r04.s010_output/n100.r04.s010.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s010_output/n100.r04.s010.depth.txt\" \"n100.r04.s010_output/n100.r04.s010.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s010_output/n100.r04.s010.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s010_output/n100.r04.s010.reference.fas\" | bcftools consensus -m \"n100.r04.s010_output/n100.r04.s010.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s010_output/n100.r04.s010.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s010_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s010_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s010_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 0d09bc33 (flow 8f555b2a): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s075_output\"\n        wget -O \"n100.r04.s075_output/n100.r04.s075.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s075_output/n100.r04.s075.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s075_output/n100.r04.s075.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s075_output/n100.r04.s075.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s075_output/n100.r04.s075.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s075_output/n100.r04.s075.reference.fas\" \"n100.r04.s075_output/n100.r04.s075.fq1.fastq\" \"n100.r04.s075_output/n100.r04.s075.fq2.fastq\" | samtools view -bS - > \"n100.r04.s075_output/n100.r04.s075.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s075_output/n100.r04.s075.untrimmed.sorted.bam\" \"n100.r04.s075_output/n100.r04.s075.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s075_output/n100.r04.s075.untrimmed.sorted.bam\" -b \"n100.r04.s075_output/n100.r04.s075.primers.bed\" -p \"n100.r04.s075_output/n100.r04.s075.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s075_output/n100.r04.s075.trimmed.sorted.bam\" \"n100.r04.s075_output/n100.r04.s075.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s075_output/n100.r04.s075.reference.fas\" \"n100.r04.s075_output/n100.r04.s075.trimmed.sorted.bam\" > \"n100.r04.s075_output/n100.r04.s075.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s075_output/n100.r04.s075.reference.fas\" --call-indels \"n100.r04.s075_output/n100.r04.s075.trimmed.sorted.bam\" > \"n100.r04.s075_output/n100.r04.s075.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s075_output/n100.r04.s075.trimmed.sorted.bam\" > \"n100.r04.s075_output/n100.r04.s075.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s075_output/n100.r04.s075.depth.txt\" \"n100.r04.s075_output/n100.r04.s075.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s075_output/n100.r04.s075.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s075_output/n100.r04.s075.reference.fas\" | bcftools consensus -m \"n100.r04.s075_output/n100.r04.s075.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s075_output/n100.r04.s075.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s075_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s075_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s075_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 54f6f6fd (flow c54bfbbc): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s092_output\"\n        wget -O \"n100.r04.s092_output/n100.r04.s092.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s092_output/n100.r04.s092.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s092_output/n100.r04.s092.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s092_output/n100.r04.s092.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s092_output/n100.r04.s092.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s092_output/n100.r04.s092.reference.fas\" \"n100.r04.s092_output/n100.r04.s092.fq1.fastq\" \"n100.r04.s092_output/n100.r04.s092.fq2.fastq\" | samtools view -bS - > \"n100.r04.s092_output/n100.r04.s092.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s092_output/n100.r04.s092.untrimmed.sorted.bam\" \"n100.r04.s092_output/n100.r04.s092.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s092_output/n100.r04.s092.untrimmed.sorted.bam\" -b \"n100.r04.s092_output/n100.r04.s092.primers.bed\" -p \"n100.r04.s092_output/n100.r04.s092.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s092_output/n100.r04.s092.trimmed.sorted.bam\" \"n100.r04.s092_output/n100.r04.s092.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s092_output/n100.r04.s092.reference.fas\" \"n100.r04.s092_output/n100.r04.s092.trimmed.sorted.bam\" > \"n100.r04.s092_output/n100.r04.s092.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s092_output/n100.r04.s092.reference.fas\" --call-indels \"n100.r04.s092_output/n100.r04.s092.trimmed.sorted.bam\" > \"n100.r04.s092_output/n100.r04.s092.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s092_output/n100.r04.s092.trimmed.sorted.bam\" > \"n100.r04.s092_output/n100.r04.s092.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s092_output/n100.r04.s092.depth.txt\" \"n100.r04.s092_output/n100.r04.s092.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s092_output/n100.r04.s092.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s092_output/n100.r04.s092.reference.fas\" | bcftools consensus -m \"n100.r04.s092_output/n100.r04.s092.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s092_output/n100.r04.s092.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s092_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s092_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s092_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 5bbe9c3d (flow 5f50c423): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s060_output\"\n        wget -O \"n100.r04.s060_output/n100.r04.s060.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s060_output/n100.r04.s060.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s060_output/n100.r04.s060.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s060_output/n100.r04.s060.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s060_output/n100.r04.s060.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s060_output/n100.r04.s060.reference.fas\" \"n100.r04.s060_output/n100.r04.s060.fq1.fastq\" \"n100.r04.s060_output/n100.r04.s060.fq2.fastq\" | samtools view -bS - > \"n100.r04.s060_output/n100.r04.s060.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s060_output/n100.r04.s060.untrimmed.sorted.bam\" \"n100.r04.s060_output/n100.r04.s060.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s060_output/n100.r04.s060.untrimmed.sorted.bam\" -b \"n100.r04.s060_output/n100.r04.s060.primers.bed\" -p \"n100.r04.s060_output/n100.r04.s060.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s060_output/n100.r04.s060.trimmed.sorted.bam\" \"n100.r04.s060_output/n100.r04.s060.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s060_output/n100.r04.s060.reference.fas\" \"n100.r04.s060_output/n100.r04.s060.trimmed.sorted.bam\" > \"n100.r04.s060_output/n100.r04.s060.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s060_output/n100.r04.s060.reference.fas\" --call-indels \"n100.r04.s060_output/n100.r04.s060.trimmed.sorted.bam\" > \"n100.r04.s060_output/n100.r04.s060.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s060_output/n100.r04.s060.trimmed.sorted.bam\" > \"n100.r04.s060_output/n100.r04.s060.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s060_output/n100.r04.s060.depth.txt\" \"n100.r04.s060_output/n100.r04.s060.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s060_output/n100.r04.s060.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s060_output/n100.r04.s060.reference.fas\" | bcftools consensus -m \"n100.r04.s060_output/n100.r04.s060.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s060_output/n100.r04.s060.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s060_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s060_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s060_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task c8f7947e (flow a052354a): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s040_output\"\n        wget -O \"n100.r04.s040_output/n100.r04.s040.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s040_output/n100.r04.s040.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s040_output/n100.r04.s040.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s040_output/n100.r04.s040.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s040_output/n100.r04.s040.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s040_output/n100.r04.s040.reference.fas\" \"n100.r04.s040_output/n100.r04.s040.fq1.fastq\" \"n100.r04.s040_output/n100.r04.s040.fq2.fastq\" | samtools view -bS - > \"n100.r04.s040_output/n100.r04.s040.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s040_output/n100.r04.s040.untrimmed.sorted.bam\" \"n100.r04.s040_output/n100.r04.s040.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s040_output/n100.r04.s040.untrimmed.sorted.bam\" -b \"n100.r04.s040_output/n100.r04.s040.primers.bed\" -p \"n100.r04.s040_output/n100.r04.s040.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s040_output/n100.r04.s040.trimmed.sorted.bam\" \"n100.r04.s040_output/n100.r04.s040.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s040_output/n100.r04.s040.reference.fas\" \"n100.r04.s040_output/n100.r04.s040.trimmed.sorted.bam\" > \"n100.r04.s040_output/n100.r04.s040.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s040_output/n100.r04.s040.reference.fas\" --call-indels \"n100.r04.s040_output/n100.r04.s040.trimmed.sorted.bam\" > \"n100.r04.s040_output/n100.r04.s040.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s040_output/n100.r04.s040.trimmed.sorted.bam\" > \"n100.r04.s040_output/n100.r04.s040.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s040_output/n100.r04.s040.depth.txt\" \"n100.r04.s040_output/n100.r04.s040.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s040_output/n100.r04.s040.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s040_output/n100.r04.s040.reference.fas\" | bcftools consensus -m \"n100.r04.s040_output/n100.r04.s040.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s040_output/n100.r04.s040.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s040_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s040_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s040_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 41aa6205 (flow 2f22143a): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s099_output\"\n        wget -O \"n100.r04.s099_output/n100.r04.s099.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s099_output/n100.r04.s099.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s099_output/n100.r04.s099.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s099_output/n100.r04.s099.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s099_output/n100.r04.s099.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s099_output/n100.r04.s099.reference.fas\" \"n100.r04.s099_output/n100.r04.s099.fq1.fastq\" \"n100.r04.s099_output/n100.r04.s099.fq2.fastq\" | samtools view -bS - > \"n100.r04.s099_output/n100.r04.s099.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s099_output/n100.r04.s099.untrimmed.sorted.bam\" \"n100.r04.s099_output/n100.r04.s099.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s099_output/n100.r04.s099.untrimmed.sorted.bam\" -b \"n100.r04.s099_output/n100.r04.s099.primers.bed\" -p \"n100.r04.s099_output/n100.r04.s099.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s099_output/n100.r04.s099.trimmed.sorted.bam\" \"n100.r04.s099_output/n100.r04.s099.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s099_output/n100.r04.s099.reference.fas\" \"n100.r04.s099_output/n100.r04.s099.trimmed.sorted.bam\" > \"n100.r04.s099_output/n100.r04.s099.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s099_output/n100.r04.s099.reference.fas\" --call-indels \"n100.r04.s099_output/n100.r04.s099.trimmed.sorted.bam\" > \"n100.r04.s099_output/n100.r04.s099.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s099_output/n100.r04.s099.trimmed.sorted.bam\" > \"n100.r04.s099_output/n100.r04.s099.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s099_output/n100.r04.s099.depth.txt\" \"n100.r04.s099_output/n100.r04.s099.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s099_output/n100.r04.s099.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s099_output/n100.r04.s099.reference.fas\" | bcftools consensus -m \"n100.r04.s099_output/n100.r04.s099.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s099_output/n100.r04.s099.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s099_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s099_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s099_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task ad833c50 (flow e08e8afe): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s015_output\"\n        wget -O \"n100.r04.s015_output/n100.r04.s015.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s015_output/n100.r04.s015.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s015_output/n100.r04.s015.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s015_output/n100.r04.s015.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s015_output/n100.r04.s015.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s015_output/n100.r04.s015.reference.fas\" \"n100.r04.s015_output/n100.r04.s015.fq1.fastq\" \"n100.r04.s015_output/n100.r04.s015.fq2.fastq\" | samtools view -bS - > \"n100.r04.s015_output/n100.r04.s015.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s015_output/n100.r04.s015.untrimmed.sorted.bam\" \"n100.r04.s015_output/n100.r04.s015.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s015_output/n100.r04.s015.untrimmed.sorted.bam\" -b \"n100.r04.s015_output/n100.r04.s015.primers.bed\" -p \"n100.r04.s015_output/n100.r04.s015.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s015_output/n100.r04.s015.trimmed.sorted.bam\" \"n100.r04.s015_output/n100.r04.s015.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s015_output/n100.r04.s015.reference.fas\" \"n100.r04.s015_output/n100.r04.s015.trimmed.sorted.bam\" > \"n100.r04.s015_output/n100.r04.s015.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s015_output/n100.r04.s015.reference.fas\" --call-indels \"n100.r04.s015_output/n100.r04.s015.trimmed.sorted.bam\" > \"n100.r04.s015_output/n100.r04.s015.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s015_output/n100.r04.s015.trimmed.sorted.bam\" > \"n100.r04.s015_output/n100.r04.s015.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s015_output/n100.r04.s015.depth.txt\" \"n100.r04.s015_output/n100.r04.s015.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s015_output/n100.r04.s015.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s015_output/n100.r04.s015.reference.fas\" | bcftools consensus -m \"n100.r04.s015_output/n100.r04.s015.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s015_output/n100.r04.s015.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s015_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s015_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s015_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task faa7be58 (flow 5f9e75c1): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s100_output\"\n        wget -O \"n100.r04.s100_output/n100.r04.s100.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s100_output/n100.r04.s100.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s100_output/n100.r04.s100.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s100_output/n100.r04.s100.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s100_output/n100.r04.s100.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s100_output/n100.r04.s100.reference.fas\" \"n100.r04.s100_output/n100.r04.s100.fq1.fastq\" \"n100.r04.s100_output/n100.r04.s100.fq2.fastq\" | samtools view -bS - > \"n100.r04.s100_output/n100.r04.s100.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s100_output/n100.r04.s100.untrimmed.sorted.bam\" \"n100.r04.s100_output/n100.r04.s100.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s100_output/n100.r04.s100.untrimmed.sorted.bam\" -b \"n100.r04.s100_output/n100.r04.s100.primers.bed\" -p \"n100.r04.s100_output/n100.r04.s100.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s100_output/n100.r04.s100.trimmed.sorted.bam\" \"n100.r04.s100_output/n100.r04.s100.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s100_output/n100.r04.s100.reference.fas\" \"n100.r04.s100_output/n100.r04.s100.trimmed.sorted.bam\" > \"n100.r04.s100_output/n100.r04.s100.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s100_output/n100.r04.s100.reference.fas\" --call-indels \"n100.r04.s100_output/n100.r04.s100.trimmed.sorted.bam\" > \"n100.r04.s100_output/n100.r04.s100.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s100_output/n100.r04.s100.trimmed.sorted.bam\" > \"n100.r04.s100_output/n100.r04.s100.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s100_output/n100.r04.s100.depth.txt\" \"n100.r04.s100_output/n100.r04.s100.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s100_output/n100.r04.s100.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s100_output/n100.r04.s100.reference.fas\" | bcftools consensus -m \"n100.r04.s100_output/n100.r04.s100.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s100_output/n100.r04.s100.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s100_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s100_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s100_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task f1849b51 (flow ff5069df): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s070_output\"\n        wget -O \"n100.r04.s070_output/n100.r04.s070.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s070_output/n100.r04.s070.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s070_output/n100.r04.s070.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s070_output/n100.r04.s070.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s070_output/n100.r04.s070.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s070_output/n100.r04.s070.reference.fas\" \"n100.r04.s070_output/n100.r04.s070.fq1.fastq\" \"n100.r04.s070_output/n100.r04.s070.fq2.fastq\" | samtools view -bS - > \"n100.r04.s070_output/n100.r04.s070.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s070_output/n100.r04.s070.untrimmed.sorted.bam\" \"n100.r04.s070_output/n100.r04.s070.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s070_output/n100.r04.s070.untrimmed.sorted.bam\" -b \"n100.r04.s070_output/n100.r04.s070.primers.bed\" -p \"n100.r04.s070_output/n100.r04.s070.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s070_output/n100.r04.s070.trimmed.sorted.bam\" \"n100.r04.s070_output/n100.r04.s070.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s070_output/n100.r04.s070.reference.fas\" \"n100.r04.s070_output/n100.r04.s070.trimmed.sorted.bam\" > \"n100.r04.s070_output/n100.r04.s070.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s070_output/n100.r04.s070.reference.fas\" --call-indels \"n100.r04.s070_output/n100.r04.s070.trimmed.sorted.bam\" > \"n100.r04.s070_output/n100.r04.s070.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s070_output/n100.r04.s070.trimmed.sorted.bam\" > \"n100.r04.s070_output/n100.r04.s070.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s070_output/n100.r04.s070.depth.txt\" \"n100.r04.s070_output/n100.r04.s070.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s070_output/n100.r04.s070.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s070_output/n100.r04.s070.reference.fas\" | bcftools consensus -m \"n100.r04.s070_output/n100.r04.s070.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s070_output/n100.r04.s070.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s070_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s070_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s070_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 4416f8fe (flow ac3a0076): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s003_output\"\n        wget -O \"n100.r04.s003_output/n100.r04.s003.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s003_output/n100.r04.s003.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s003_output/n100.r04.s003.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s003_output/n100.r04.s003.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s003_output/n100.r04.s003.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s003_output/n100.r04.s003.reference.fas\" \"n100.r04.s003_output/n100.r04.s003.fq1.fastq\" \"n100.r04.s003_output/n100.r04.s003.fq2.fastq\" | samtools view -bS - > \"n100.r04.s003_output/n100.r04.s003.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s003_output/n100.r04.s003.untrimmed.sorted.bam\" \"n100.r04.s003_output/n100.r04.s003.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s003_output/n100.r04.s003.untrimmed.sorted.bam\" -b \"n100.r04.s003_output/n100.r04.s003.primers.bed\" -p \"n100.r04.s003_output/n100.r04.s003.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s003_output/n100.r04.s003.trimmed.sorted.bam\" \"n100.r04.s003_output/n100.r04.s003.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s003_output/n100.r04.s003.reference.fas\" \"n100.r04.s003_output/n100.r04.s003.trimmed.sorted.bam\" > \"n100.r04.s003_output/n100.r04.s003.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s003_output/n100.r04.s003.reference.fas\" --call-indels \"n100.r04.s003_output/n100.r04.s003.trimmed.sorted.bam\" > \"n100.r04.s003_output/n100.r04.s003.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s003_output/n100.r04.s003.trimmed.sorted.bam\" > \"n100.r04.s003_output/n100.r04.s003.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s003_output/n100.r04.s003.depth.txt\" \"n100.r04.s003_output/n100.r04.s003.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s003_output/n100.r04.s003.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s003_output/n100.r04.s003.reference.fas\" | bcftools consensus -m \"n100.r04.s003_output/n100.r04.s003.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s003_output/n100.r04.s003.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s003_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s003_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s003_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task c3b5748c (flow c441a068): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s009_output\"\n        wget -O \"n100.r04.s009_output/n100.r04.s009.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s009_output/n100.r04.s009.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s009_output/n100.r04.s009.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s009_output/n100.r04.s009.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s009_output/n100.r04.s009.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s009_output/n100.r04.s009.reference.fas\" \"n100.r04.s009_output/n100.r04.s009.fq1.fastq\" \"n100.r04.s009_output/n100.r04.s009.fq2.fastq\" | samtools view -bS - > \"n100.r04.s009_output/n100.r04.s009.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s009_output/n100.r04.s009.untrimmed.sorted.bam\" \"n100.r04.s009_output/n100.r04.s009.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s009_output/n100.r04.s009.untrimmed.sorted.bam\" -b \"n100.r04.s009_output/n100.r04.s009.primers.bed\" -p \"n100.r04.s009_output/n100.r04.s009.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s009_output/n100.r04.s009.trimmed.sorted.bam\" \"n100.r04.s009_output/n100.r04.s009.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s009_output/n100.r04.s009.reference.fas\" \"n100.r04.s009_output/n100.r04.s009.trimmed.sorted.bam\" > \"n100.r04.s009_output/n100.r04.s009.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s009_output/n100.r04.s009.reference.fas\" --call-indels \"n100.r04.s009_output/n100.r04.s009.trimmed.sorted.bam\" > \"n100.r04.s009_output/n100.r04.s009.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s009_output/n100.r04.s009.trimmed.sorted.bam\" > \"n100.r04.s009_output/n100.r04.s009.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s009_output/n100.r04.s009.depth.txt\" \"n100.r04.s009_output/n100.r04.s009.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s009_output/n100.r04.s009.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s009_output/n100.r04.s009.reference.fas\" | bcftools consensus -m \"n100.r04.s009_output/n100.r04.s009.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s009_output/n100.r04.s009.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s009_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s009_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s009_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 3cad6a0b (flow f32e0466): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s005_output\"\n        wget -O \"n100.r04.s005_output/n100.r04.s005.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s005_output/n100.r04.s005.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s005_output/n100.r04.s005.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s005_output/n100.r04.s005.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s005_output/n100.r04.s005.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s005_output/n100.r04.s005.reference.fas\" \"n100.r04.s005_output/n100.r04.s005.fq1.fastq\" \"n100.r04.s005_output/n100.r04.s005.fq2.fastq\" | samtools view -bS - > \"n100.r04.s005_output/n100.r04.s005.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s005_output/n100.r04.s005.untrimmed.sorted.bam\" \"n100.r04.s005_output/n100.r04.s005.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s005_output/n100.r04.s005.untrimmed.sorted.bam\" -b \"n100.r04.s005_output/n100.r04.s005.primers.bed\" -p \"n100.r04.s005_output/n100.r04.s005.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s005_output/n100.r04.s005.trimmed.sorted.bam\" \"n100.r04.s005_output/n100.r04.s005.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s005_output/n100.r04.s005.reference.fas\" \"n100.r04.s005_output/n100.r04.s005.trimmed.sorted.bam\" > \"n100.r04.s005_output/n100.r04.s005.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s005_output/n100.r04.s005.reference.fas\" --call-indels \"n100.r04.s005_output/n100.r04.s005.trimmed.sorted.bam\" > \"n100.r04.s005_output/n100.r04.s005.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s005_output/n100.r04.s005.trimmed.sorted.bam\" > \"n100.r04.s005_output/n100.r04.s005.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s005_output/n100.r04.s005.depth.txt\" \"n100.r04.s005_output/n100.r04.s005.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s005_output/n100.r04.s005.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s005_output/n100.r04.s005.reference.fas\" | bcftools consensus -m \"n100.r04.s005_output/n100.r04.s005.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s005_output/n100.r04.s005.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s005_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s005_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s005_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 26683aa0 (flow fc9dabef): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s004_output\"\n        wget -O \"n100.r04.s004_output/n100.r04.s004.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s004_output/n100.r04.s004.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s004_output/n100.r04.s004.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s004_output/n100.r04.s004.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s004_output/n100.r04.s004.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s004_output/n100.r04.s004.reference.fas\" \"n100.r04.s004_output/n100.r04.s004.fq1.fastq\" \"n100.r04.s004_output/n100.r04.s004.fq2.fastq\" | samtools view -bS - > \"n100.r04.s004_output/n100.r04.s004.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s004_output/n100.r04.s004.untrimmed.sorted.bam\" \"n100.r04.s004_output/n100.r04.s004.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s004_output/n100.r04.s004.untrimmed.sorted.bam\" -b \"n100.r04.s004_output/n100.r04.s004.primers.bed\" -p \"n100.r04.s004_output/n100.r04.s004.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s004_output/n100.r04.s004.trimmed.sorted.bam\" \"n100.r04.s004_output/n100.r04.s004.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s004_output/n100.r04.s004.reference.fas\" \"n100.r04.s004_output/n100.r04.s004.trimmed.sorted.bam\" > \"n100.r04.s004_output/n100.r04.s004.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s004_output/n100.r04.s004.reference.fas\" --call-indels \"n100.r04.s004_output/n100.r04.s004.trimmed.sorted.bam\" > \"n100.r04.s004_output/n100.r04.s004.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s004_output/n100.r04.s004.trimmed.sorted.bam\" > \"n100.r04.s004_output/n100.r04.s004.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s004_output/n100.r04.s004.depth.txt\" \"n100.r04.s004_output/n100.r04.s004.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s004_output/n100.r04.s004.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s004_output/n100.r04.s004.reference.fas\" | bcftools consensus -m \"n100.r04.s004_output/n100.r04.s004.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s004_output/n100.r04.s004.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s004_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s004_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s004_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 3e5b10bd (flow 6f981d52): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s087_output\"\n        wget -O \"n100.r04.s087_output/n100.r04.s087.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s087_output/n100.r04.s087.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s087_output/n100.r04.s087.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s087_output/n100.r04.s087.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s087_output/n100.r04.s087.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s087_output/n100.r04.s087.reference.fas\" \"n100.r04.s087_output/n100.r04.s087.fq1.fastq\" \"n100.r04.s087_output/n100.r04.s087.fq2.fastq\" | samtools view -bS - > \"n100.r04.s087_output/n100.r04.s087.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s087_output/n100.r04.s087.untrimmed.sorted.bam\" \"n100.r04.s087_output/n100.r04.s087.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s087_output/n100.r04.s087.untrimmed.sorted.bam\" -b \"n100.r04.s087_output/n100.r04.s087.primers.bed\" -p \"n100.r04.s087_output/n100.r04.s087.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s087_output/n100.r04.s087.trimmed.sorted.bam\" \"n100.r04.s087_output/n100.r04.s087.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s087_output/n100.r04.s087.reference.fas\" \"n100.r04.s087_output/n100.r04.s087.trimmed.sorted.bam\" > \"n100.r04.s087_output/n100.r04.s087.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s087_output/n100.r04.s087.reference.fas\" --call-indels \"n100.r04.s087_output/n100.r04.s087.trimmed.sorted.bam\" > \"n100.r04.s087_output/n100.r04.s087.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s087_output/n100.r04.s087.trimmed.sorted.bam\" > \"n100.r04.s087_output/n100.r04.s087.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s087_output/n100.r04.s087.depth.txt\" \"n100.r04.s087_output/n100.r04.s087.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s087_output/n100.r04.s087.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s087_output/n100.r04.s087.reference.fas\" | bcftools consensus -m \"n100.r04.s087_output/n100.r04.s087.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s087_output/n100.r04.s087.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s087_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s087_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s087_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task ad27dd97 (flow 57f67a1d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s006_output\"\n        wget -O \"n100.r04.s006_output/n100.r04.s006.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s006_output/n100.r04.s006.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s006_output/n100.r04.s006.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s006_output/n100.r04.s006.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s006_output/n100.r04.s006.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s006_output/n100.r04.s006.reference.fas\" \"n100.r04.s006_output/n100.r04.s006.fq1.fastq\" \"n100.r04.s006_output/n100.r04.s006.fq2.fastq\" | samtools view -bS - > \"n100.r04.s006_output/n100.r04.s006.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s006_output/n100.r04.s006.untrimmed.sorted.bam\" \"n100.r04.s006_output/n100.r04.s006.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s006_output/n100.r04.s006.untrimmed.sorted.bam\" -b \"n100.r04.s006_output/n100.r04.s006.primers.bed\" -p \"n100.r04.s006_output/n100.r04.s006.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s006_output/n100.r04.s006.trimmed.sorted.bam\" \"n100.r04.s006_output/n100.r04.s006.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s006_output/n100.r04.s006.reference.fas\" \"n100.r04.s006_output/n100.r04.s006.trimmed.sorted.bam\" > \"n100.r04.s006_output/n100.r04.s006.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s006_output/n100.r04.s006.reference.fas\" --call-indels \"n100.r04.s006_output/n100.r04.s006.trimmed.sorted.bam\" > \"n100.r04.s006_output/n100.r04.s006.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s006_output/n100.r04.s006.trimmed.sorted.bam\" > \"n100.r04.s006_output/n100.r04.s006.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s006_output/n100.r04.s006.depth.txt\" \"n100.r04.s006_output/n100.r04.s006.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s006_output/n100.r04.s006.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s006_output/n100.r04.s006.reference.fas\" | bcftools consensus -m \"n100.r04.s006_output/n100.r04.s006.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s006_output/n100.r04.s006.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s006_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s006_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s006_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 8a9bceb1 (flow 27523267): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s012_output\"\n        wget -O \"n100.r04.s012_output/n100.r04.s012.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s012_output/n100.r04.s012.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s012_output/n100.r04.s012.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s012_output/n100.r04.s012.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s012_output/n100.r04.s012.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s012_output/n100.r04.s012.reference.fas\" \"n100.r04.s012_output/n100.r04.s012.fq1.fastq\" \"n100.r04.s012_output/n100.r04.s012.fq2.fastq\" | samtools view -bS - > \"n100.r04.s012_output/n100.r04.s012.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s012_output/n100.r04.s012.untrimmed.sorted.bam\" \"n100.r04.s012_output/n100.r04.s012.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s012_output/n100.r04.s012.untrimmed.sorted.bam\" -b \"n100.r04.s012_output/n100.r04.s012.primers.bed\" -p \"n100.r04.s012_output/n100.r04.s012.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s012_output/n100.r04.s012.trimmed.sorted.bam\" \"n100.r04.s012_output/n100.r04.s012.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s012_output/n100.r04.s012.reference.fas\" \"n100.r04.s012_output/n100.r04.s012.trimmed.sorted.bam\" > \"n100.r04.s012_output/n100.r04.s012.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s012_output/n100.r04.s012.reference.fas\" --call-indels \"n100.r04.s012_output/n100.r04.s012.trimmed.sorted.bam\" > \"n100.r04.s012_output/n100.r04.s012.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s012_output/n100.r04.s012.trimmed.sorted.bam\" > \"n100.r04.s012_output/n100.r04.s012.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s012_output/n100.r04.s012.depth.txt\" \"n100.r04.s012_output/n100.r04.s012.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s012_output/n100.r04.s012.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s012_output/n100.r04.s012.reference.fas\" | bcftools consensus -m \"n100.r04.s012_output/n100.r04.s012.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s012_output/n100.r04.s012.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s012_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s012_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s012_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task b4a5ccae (flow 6bc2ef0b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s072_output\"\n        wget -O \"n100.r04.s072_output/n100.r04.s072.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s072_output/n100.r04.s072.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s072_output/n100.r04.s072.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s072_output/n100.r04.s072.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s072_output/n100.r04.s072.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s072_output/n100.r04.s072.reference.fas\" \"n100.r04.s072_output/n100.r04.s072.fq1.fastq\" \"n100.r04.s072_output/n100.r04.s072.fq2.fastq\" | samtools view -bS - > \"n100.r04.s072_output/n100.r04.s072.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s072_output/n100.r04.s072.untrimmed.sorted.bam\" \"n100.r04.s072_output/n100.r04.s072.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s072_output/n100.r04.s072.untrimmed.sorted.bam\" -b \"n100.r04.s072_output/n100.r04.s072.primers.bed\" -p \"n100.r04.s072_output/n100.r04.s072.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s072_output/n100.r04.s072.trimmed.sorted.bam\" \"n100.r04.s072_output/n100.r04.s072.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s072_output/n100.r04.s072.reference.fas\" \"n100.r04.s072_output/n100.r04.s072.trimmed.sorted.bam\" > \"n100.r04.s072_output/n100.r04.s072.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s072_output/n100.r04.s072.reference.fas\" --call-indels \"n100.r04.s072_output/n100.r04.s072.trimmed.sorted.bam\" > \"n100.r04.s072_output/n100.r04.s072.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s072_output/n100.r04.s072.trimmed.sorted.bam\" > \"n100.r04.s072_output/n100.r04.s072.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s072_output/n100.r04.s072.depth.txt\" \"n100.r04.s072_output/n100.r04.s072.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s072_output/n100.r04.s072.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s072_output/n100.r04.s072.reference.fas\" | bcftools consensus -m \"n100.r04.s072_output/n100.r04.s072.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s072_output/n100.r04.s072.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s072_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s072_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s072_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task a818b8e8 (flow 1ca35c84): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s011_output\"\n        wget -O \"n100.r04.s011_output/n100.r04.s011.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s011_output/n100.r04.s011.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s011_output/n100.r04.s011.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s011_output/n100.r04.s011.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s011_output/n100.r04.s011.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s011_output/n100.r04.s011.reference.fas\" \"n100.r04.s011_output/n100.r04.s011.fq1.fastq\" \"n100.r04.s011_output/n100.r04.s011.fq2.fastq\" | samtools view -bS - > \"n100.r04.s011_output/n100.r04.s011.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s011_output/n100.r04.s011.untrimmed.sorted.bam\" \"n100.r04.s011_output/n100.r04.s011.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s011_output/n100.r04.s011.untrimmed.sorted.bam\" -b \"n100.r04.s011_output/n100.r04.s011.primers.bed\" -p \"n100.r04.s011_output/n100.r04.s011.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s011_output/n100.r04.s011.trimmed.sorted.bam\" \"n100.r04.s011_output/n100.r04.s011.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s011_output/n100.r04.s011.reference.fas\" \"n100.r04.s011_output/n100.r04.s011.trimmed.sorted.bam\" > \"n100.r04.s011_output/n100.r04.s011.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s011_output/n100.r04.s011.reference.fas\" --call-indels \"n100.r04.s011_output/n100.r04.s011.trimmed.sorted.bam\" > \"n100.r04.s011_output/n100.r04.s011.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s011_output/n100.r04.s011.trimmed.sorted.bam\" > \"n100.r04.s011_output/n100.r04.s011.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s011_output/n100.r04.s011.depth.txt\" \"n100.r04.s011_output/n100.r04.s011.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s011_output/n100.r04.s011.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s011_output/n100.r04.s011.reference.fas\" | bcftools consensus -m \"n100.r04.s011_output/n100.r04.s011.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s011_output/n100.r04.s011.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s011_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s011_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s011_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 4f52560f (flow c39d6831): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s076_output\"\n        wget -O \"n100.r04.s076_output/n100.r04.s076.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s076_output/n100.r04.s076.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s076_output/n100.r04.s076.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s076_output/n100.r04.s076.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s076_output/n100.r04.s076.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s076_output/n100.r04.s076.reference.fas\" \"n100.r04.s076_output/n100.r04.s076.fq1.fastq\" \"n100.r04.s076_output/n100.r04.s076.fq2.fastq\" | samtools view -bS - > \"n100.r04.s076_output/n100.r04.s076.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s076_output/n100.r04.s076.untrimmed.sorted.bam\" \"n100.r04.s076_output/n100.r04.s076.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s076_output/n100.r04.s076.untrimmed.sorted.bam\" -b \"n100.r04.s076_output/n100.r04.s076.primers.bed\" -p \"n100.r04.s076_output/n100.r04.s076.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s076_output/n100.r04.s076.trimmed.sorted.bam\" \"n100.r04.s076_output/n100.r04.s076.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s076_output/n100.r04.s076.reference.fas\" \"n100.r04.s076_output/n100.r04.s076.trimmed.sorted.bam\" > \"n100.r04.s076_output/n100.r04.s076.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s076_output/n100.r04.s076.reference.fas\" --call-indels \"n100.r04.s076_output/n100.r04.s076.trimmed.sorted.bam\" > \"n100.r04.s076_output/n100.r04.s076.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s076_output/n100.r04.s076.trimmed.sorted.bam\" > \"n100.r04.s076_output/n100.r04.s076.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s076_output/n100.r04.s076.depth.txt\" \"n100.r04.s076_output/n100.r04.s076.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s076_output/n100.r04.s076.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s076_output/n100.r04.s076.reference.fas\" | bcftools consensus -m \"n100.r04.s076_output/n100.r04.s076.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s076_output/n100.r04.s076.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s076_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s076_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s076_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task df28c1ac (flow b17ff5c7): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s017_output\"\n        wget -O \"n100.r04.s017_output/n100.r04.s017.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s017_output/n100.r04.s017.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s017_output/n100.r04.s017.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s017_output/n100.r04.s017.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s017_output/n100.r04.s017.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s017_output/n100.r04.s017.reference.fas\" \"n100.r04.s017_output/n100.r04.s017.fq1.fastq\" \"n100.r04.s017_output/n100.r04.s017.fq2.fastq\" | samtools view -bS - > \"n100.r04.s017_output/n100.r04.s017.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s017_output/n100.r04.s017.untrimmed.sorted.bam\" \"n100.r04.s017_output/n100.r04.s017.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s017_output/n100.r04.s017.untrimmed.sorted.bam\" -b \"n100.r04.s017_output/n100.r04.s017.primers.bed\" -p \"n100.r04.s017_output/n100.r04.s017.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s017_output/n100.r04.s017.trimmed.sorted.bam\" \"n100.r04.s017_output/n100.r04.s017.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s017_output/n100.r04.s017.reference.fas\" \"n100.r04.s017_output/n100.r04.s017.trimmed.sorted.bam\" > \"n100.r04.s017_output/n100.r04.s017.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s017_output/n100.r04.s017.reference.fas\" --call-indels \"n100.r04.s017_output/n100.r04.s017.trimmed.sorted.bam\" > \"n100.r04.s017_output/n100.r04.s017.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s017_output/n100.r04.s017.trimmed.sorted.bam\" > \"n100.r04.s017_output/n100.r04.s017.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s017_output/n100.r04.s017.depth.txt\" \"n100.r04.s017_output/n100.r04.s017.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s017_output/n100.r04.s017.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s017_output/n100.r04.s017.reference.fas\" | bcftools consensus -m \"n100.r04.s017_output/n100.r04.s017.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s017_output/n100.r04.s017.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s017_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s017_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s017_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task c9e9d6bb (flow 763a3244): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s068_output\"\n        wget -O \"n100.r04.s068_output/n100.r04.s068.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s068_output/n100.r04.s068.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s068_output/n100.r04.s068.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s068_output/n100.r04.s068.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s068_output/n100.r04.s068.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s068_output/n100.r04.s068.reference.fas\" \"n100.r04.s068_output/n100.r04.s068.fq1.fastq\" \"n100.r04.s068_output/n100.r04.s068.fq2.fastq\" | samtools view -bS - > \"n100.r04.s068_output/n100.r04.s068.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s068_output/n100.r04.s068.untrimmed.sorted.bam\" \"n100.r04.s068_output/n100.r04.s068.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s068_output/n100.r04.s068.untrimmed.sorted.bam\" -b \"n100.r04.s068_output/n100.r04.s068.primers.bed\" -p \"n100.r04.s068_output/n100.r04.s068.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s068_output/n100.r04.s068.trimmed.sorted.bam\" \"n100.r04.s068_output/n100.r04.s068.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s068_output/n100.r04.s068.reference.fas\" \"n100.r04.s068_output/n100.r04.s068.trimmed.sorted.bam\" > \"n100.r04.s068_output/n100.r04.s068.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s068_output/n100.r04.s068.reference.fas\" --call-indels \"n100.r04.s068_output/n100.r04.s068.trimmed.sorted.bam\" > \"n100.r04.s068_output/n100.r04.s068.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s068_output/n100.r04.s068.trimmed.sorted.bam\" > \"n100.r04.s068_output/n100.r04.s068.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s068_output/n100.r04.s068.depth.txt\" \"n100.r04.s068_output/n100.r04.s068.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s068_output/n100.r04.s068.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s068_output/n100.r04.s068.reference.fas\" | bcftools consensus -m \"n100.r04.s068_output/n100.r04.s068.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s068_output/n100.r04.s068.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s068_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s068_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s068_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 04101a49 (flow 2d151cd2): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s013_output\"\n        wget -O \"n100.r04.s013_output/n100.r04.s013.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s013_output/n100.r04.s013.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s013_output/n100.r04.s013.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s013_output/n100.r04.s013.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s013_output/n100.r04.s013.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s013_output/n100.r04.s013.reference.fas\" \"n100.r04.s013_output/n100.r04.s013.fq1.fastq\" \"n100.r04.s013_output/n100.r04.s013.fq2.fastq\" | samtools view -bS - > \"n100.r04.s013_output/n100.r04.s013.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s013_output/n100.r04.s013.untrimmed.sorted.bam\" \"n100.r04.s013_output/n100.r04.s013.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s013_output/n100.r04.s013.untrimmed.sorted.bam\" -b \"n100.r04.s013_output/n100.r04.s013.primers.bed\" -p \"n100.r04.s013_output/n100.r04.s013.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s013_output/n100.r04.s013.trimmed.sorted.bam\" \"n100.r04.s013_output/n100.r04.s013.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s013_output/n100.r04.s013.reference.fas\" \"n100.r04.s013_output/n100.r04.s013.trimmed.sorted.bam\" > \"n100.r04.s013_output/n100.r04.s013.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s013_output/n100.r04.s013.reference.fas\" --call-indels \"n100.r04.s013_output/n100.r04.s013.trimmed.sorted.bam\" > \"n100.r04.s013_output/n100.r04.s013.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s013_output/n100.r04.s013.trimmed.sorted.bam\" > \"n100.r04.s013_output/n100.r04.s013.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s013_output/n100.r04.s013.depth.txt\" \"n100.r04.s013_output/n100.r04.s013.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s013_output/n100.r04.s013.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s013_output/n100.r04.s013.reference.fas\" | bcftools consensus -m \"n100.r04.s013_output/n100.r04.s013.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s013_output/n100.r04.s013.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s013_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s013_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s013_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 11856ee1 (flow 9941c680): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s019_output\"\n        wget -O \"n100.r04.s019_output/n100.r04.s019.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s019_output/n100.r04.s019.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s019_output/n100.r04.s019.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s019_output/n100.r04.s019.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s019_output/n100.r04.s019.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s019_output/n100.r04.s019.reference.fas\" \"n100.r04.s019_output/n100.r04.s019.fq1.fastq\" \"n100.r04.s019_output/n100.r04.s019.fq2.fastq\" | samtools view -bS - > \"n100.r04.s019_output/n100.r04.s019.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s019_output/n100.r04.s019.untrimmed.sorted.bam\" \"n100.r04.s019_output/n100.r04.s019.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s019_output/n100.r04.s019.untrimmed.sorted.bam\" -b \"n100.r04.s019_output/n100.r04.s019.primers.bed\" -p \"n100.r04.s019_output/n100.r04.s019.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s019_output/n100.r04.s019.trimmed.sorted.bam\" \"n100.r04.s019_output/n100.r04.s019.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s019_output/n100.r04.s019.reference.fas\" \"n100.r04.s019_output/n100.r04.s019.trimmed.sorted.bam\" > \"n100.r04.s019_output/n100.r04.s019.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s019_output/n100.r04.s019.reference.fas\" --call-indels \"n100.r04.s019_output/n100.r04.s019.trimmed.sorted.bam\" > \"n100.r04.s019_output/n100.r04.s019.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s019_output/n100.r04.s019.trimmed.sorted.bam\" > \"n100.r04.s019_output/n100.r04.s019.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s019_output/n100.r04.s019.depth.txt\" \"n100.r04.s019_output/n100.r04.s019.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s019_output/n100.r04.s019.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s019_output/n100.r04.s019.reference.fas\" | bcftools consensus -m \"n100.r04.s019_output/n100.r04.s019.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s019_output/n100.r04.s019.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s019_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s019_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s019_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task aee028ec (flow 0f5f6f8e): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s016_output\"\n        wget -O \"n100.r04.s016_output/n100.r04.s016.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s016_output/n100.r04.s016.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s016_output/n100.r04.s016.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s016_output/n100.r04.s016.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s016_output/n100.r04.s016.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s016_output/n100.r04.s016.reference.fas\" \"n100.r04.s016_output/n100.r04.s016.fq1.fastq\" \"n100.r04.s016_output/n100.r04.s016.fq2.fastq\" | samtools view -bS - > \"n100.r04.s016_output/n100.r04.s016.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s016_output/n100.r04.s016.untrimmed.sorted.bam\" \"n100.r04.s016_output/n100.r04.s016.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s016_output/n100.r04.s016.untrimmed.sorted.bam\" -b \"n100.r04.s016_output/n100.r04.s016.primers.bed\" -p \"n100.r04.s016_output/n100.r04.s016.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s016_output/n100.r04.s016.trimmed.sorted.bam\" \"n100.r04.s016_output/n100.r04.s016.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s016_output/n100.r04.s016.reference.fas\" \"n100.r04.s016_output/n100.r04.s016.trimmed.sorted.bam\" > \"n100.r04.s016_output/n100.r04.s016.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s016_output/n100.r04.s016.reference.fas\" --call-indels \"n100.r04.s016_output/n100.r04.s016.trimmed.sorted.bam\" > \"n100.r04.s016_output/n100.r04.s016.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s016_output/n100.r04.s016.trimmed.sorted.bam\" > \"n100.r04.s016_output/n100.r04.s016.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s016_output/n100.r04.s016.depth.txt\" \"n100.r04.s016_output/n100.r04.s016.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s016_output/n100.r04.s016.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s016_output/n100.r04.s016.reference.fas\" | bcftools consensus -m \"n100.r04.s016_output/n100.r04.s016.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s016_output/n100.r04.s016.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s016_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s016_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s016_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 0c8baa7d (flow ff8a339b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s020_output\"\n        wget -O \"n100.r04.s020_output/n100.r04.s020.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s020_output/n100.r04.s020.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s020_output/n100.r04.s020.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s020_output/n100.r04.s020.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s020_output/n100.r04.s020.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s020_output/n100.r04.s020.reference.fas\" \"n100.r04.s020_output/n100.r04.s020.fq1.fastq\" \"n100.r04.s020_output/n100.r04.s020.fq2.fastq\" | samtools view -bS - > \"n100.r04.s020_output/n100.r04.s020.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s020_output/n100.r04.s020.untrimmed.sorted.bam\" \"n100.r04.s020_output/n100.r04.s020.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s020_output/n100.r04.s020.untrimmed.sorted.bam\" -b \"n100.r04.s020_output/n100.r04.s020.primers.bed\" -p \"n100.r04.s020_output/n100.r04.s020.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s020_output/n100.r04.s020.trimmed.sorted.bam\" \"n100.r04.s020_output/n100.r04.s020.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s020_output/n100.r04.s020.reference.fas\" \"n100.r04.s020_output/n100.r04.s020.trimmed.sorted.bam\" > \"n100.r04.s020_output/n100.r04.s020.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s020_output/n100.r04.s020.reference.fas\" --call-indels \"n100.r04.s020_output/n100.r04.s020.trimmed.sorted.bam\" > \"n100.r04.s020_output/n100.r04.s020.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s020_output/n100.r04.s020.trimmed.sorted.bam\" > \"n100.r04.s020_output/n100.r04.s020.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s020_output/n100.r04.s020.depth.txt\" \"n100.r04.s020_output/n100.r04.s020.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s020_output/n100.r04.s020.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s020_output/n100.r04.s020.reference.fas\" | bcftools consensus -m \"n100.r04.s020_output/n100.r04.s020.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s020_output/n100.r04.s020.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s020_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s020_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s020_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 8044c66f (flow 6f63202d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s089_output\"\n        wget -O \"n100.r04.s089_output/n100.r04.s089.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s089_output/n100.r04.s089.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s089_output/n100.r04.s089.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s089_output/n100.r04.s089.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s089_output/n100.r04.s089.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s089_output/n100.r04.s089.reference.fas\" \"n100.r04.s089_output/n100.r04.s089.fq1.fastq\" \"n100.r04.s089_output/n100.r04.s089.fq2.fastq\" | samtools view -bS - > \"n100.r04.s089_output/n100.r04.s089.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s089_output/n100.r04.s089.untrimmed.sorted.bam\" \"n100.r04.s089_output/n100.r04.s089.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s089_output/n100.r04.s089.untrimmed.sorted.bam\" -b \"n100.r04.s089_output/n100.r04.s089.primers.bed\" -p \"n100.r04.s089_output/n100.r04.s089.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s089_output/n100.r04.s089.trimmed.sorted.bam\" \"n100.r04.s089_output/n100.r04.s089.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s089_output/n100.r04.s089.reference.fas\" \"n100.r04.s089_output/n100.r04.s089.trimmed.sorted.bam\" > \"n100.r04.s089_output/n100.r04.s089.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s089_output/n100.r04.s089.reference.fas\" --call-indels \"n100.r04.s089_output/n100.r04.s089.trimmed.sorted.bam\" > \"n100.r04.s089_output/n100.r04.s089.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s089_output/n100.r04.s089.trimmed.sorted.bam\" > \"n100.r04.s089_output/n100.r04.s089.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s089_output/n100.r04.s089.depth.txt\" \"n100.r04.s089_output/n100.r04.s089.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s089_output/n100.r04.s089.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s089_output/n100.r04.s089.reference.fas\" | bcftools consensus -m \"n100.r04.s089_output/n100.r04.s089.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s089_output/n100.r04.s089.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s089_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s089_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s089_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 4bae0b4d (flow 98c409bc): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s090_output\"\n        wget -O \"n100.r04.s090_output/n100.r04.s090.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s090_output/n100.r04.s090.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s090_output/n100.r04.s090.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s090_output/n100.r04.s090.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s090_output/n100.r04.s090.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s090_output/n100.r04.s090.reference.fas\" \"n100.r04.s090_output/n100.r04.s090.fq1.fastq\" \"n100.r04.s090_output/n100.r04.s090.fq2.fastq\" | samtools view -bS - > \"n100.r04.s090_output/n100.r04.s090.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s090_output/n100.r04.s090.untrimmed.sorted.bam\" \"n100.r04.s090_output/n100.r04.s090.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s090_output/n100.r04.s090.untrimmed.sorted.bam\" -b \"n100.r04.s090_output/n100.r04.s090.primers.bed\" -p \"n100.r04.s090_output/n100.r04.s090.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s090_output/n100.r04.s090.trimmed.sorted.bam\" \"n100.r04.s090_output/n100.r04.s090.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s090_output/n100.r04.s090.reference.fas\" \"n100.r04.s090_output/n100.r04.s090.trimmed.sorted.bam\" > \"n100.r04.s090_output/n100.r04.s090.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s090_output/n100.r04.s090.reference.fas\" --call-indels \"n100.r04.s090_output/n100.r04.s090.trimmed.sorted.bam\" > \"n100.r04.s090_output/n100.r04.s090.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s090_output/n100.r04.s090.trimmed.sorted.bam\" > \"n100.r04.s090_output/n100.r04.s090.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s090_output/n100.r04.s090.depth.txt\" \"n100.r04.s090_output/n100.r04.s090.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s090_output/n100.r04.s090.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s090_output/n100.r04.s090.reference.fas\" | bcftools consensus -m \"n100.r04.s090_output/n100.r04.s090.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s090_output/n100.r04.s090.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s090_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s090_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s090_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 176e8b91 (flow 0d7bf897): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s018_output\"\n        wget -O \"n100.r04.s018_output/n100.r04.s018.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s018_output/n100.r04.s018.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s018_output/n100.r04.s018.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s018_output/n100.r04.s018.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s018_output/n100.r04.s018.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s018_output/n100.r04.s018.reference.fas\" \"n100.r04.s018_output/n100.r04.s018.fq1.fastq\" \"n100.r04.s018_output/n100.r04.s018.fq2.fastq\" | samtools view -bS - > \"n100.r04.s018_output/n100.r04.s018.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s018_output/n100.r04.s018.untrimmed.sorted.bam\" \"n100.r04.s018_output/n100.r04.s018.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s018_output/n100.r04.s018.untrimmed.sorted.bam\" -b \"n100.r04.s018_output/n100.r04.s018.primers.bed\" -p \"n100.r04.s018_output/n100.r04.s018.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s018_output/n100.r04.s018.trimmed.sorted.bam\" \"n100.r04.s018_output/n100.r04.s018.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s018_output/n100.r04.s018.reference.fas\" \"n100.r04.s018_output/n100.r04.s018.trimmed.sorted.bam\" > \"n100.r04.s018_output/n100.r04.s018.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s018_output/n100.r04.s018.reference.fas\" --call-indels \"n100.r04.s018_output/n100.r04.s018.trimmed.sorted.bam\" > \"n100.r04.s018_output/n100.r04.s018.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s018_output/n100.r04.s018.trimmed.sorted.bam\" > \"n100.r04.s018_output/n100.r04.s018.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s018_output/n100.r04.s018.depth.txt\" \"n100.r04.s018_output/n100.r04.s018.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s018_output/n100.r04.s018.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s018_output/n100.r04.s018.reference.fas\" | bcftools consensus -m \"n100.r04.s018_output/n100.r04.s018.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s018_output/n100.r04.s018.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s018_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s018_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s018_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 1e419403 (flow 9b73f7e9): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s088_output\"\n        wget -O \"n100.r04.s088_output/n100.r04.s088.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s088_output/n100.r04.s088.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s088_output/n100.r04.s088.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s088_output/n100.r04.s088.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s088_output/n100.r04.s088.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s088_output/n100.r04.s088.reference.fas\" \"n100.r04.s088_output/n100.r04.s088.fq1.fastq\" \"n100.r04.s088_output/n100.r04.s088.fq2.fastq\" | samtools view -bS - > \"n100.r04.s088_output/n100.r04.s088.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s088_output/n100.r04.s088.untrimmed.sorted.bam\" \"n100.r04.s088_output/n100.r04.s088.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s088_output/n100.r04.s088.untrimmed.sorted.bam\" -b \"n100.r04.s088_output/n100.r04.s088.primers.bed\" -p \"n100.r04.s088_output/n100.r04.s088.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s088_output/n100.r04.s088.trimmed.sorted.bam\" \"n100.r04.s088_output/n100.r04.s088.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s088_output/n100.r04.s088.reference.fas\" \"n100.r04.s088_output/n100.r04.s088.trimmed.sorted.bam\" > \"n100.r04.s088_output/n100.r04.s088.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s088_output/n100.r04.s088.reference.fas\" --call-indels \"n100.r04.s088_output/n100.r04.s088.trimmed.sorted.bam\" > \"n100.r04.s088_output/n100.r04.s088.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s088_output/n100.r04.s088.trimmed.sorted.bam\" > \"n100.r04.s088_output/n100.r04.s088.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s088_output/n100.r04.s088.depth.txt\" \"n100.r04.s088_output/n100.r04.s088.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s088_output/n100.r04.s088.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s088_output/n100.r04.s088.reference.fas\" | bcftools consensus -m \"n100.r04.s088_output/n100.r04.s088.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s088_output/n100.r04.s088.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s088_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s088_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s088_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 8f237035 (flow 7731292a): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s095_output\"\n        wget -O \"n100.r04.s095_output/n100.r04.s095.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s095_output/n100.r04.s095.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s095_output/n100.r04.s095.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s095_output/n100.r04.s095.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s095_output/n100.r04.s095.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s095_output/n100.r04.s095.reference.fas\" \"n100.r04.s095_output/n100.r04.s095.fq1.fastq\" \"n100.r04.s095_output/n100.r04.s095.fq2.fastq\" | samtools view -bS - > \"n100.r04.s095_output/n100.r04.s095.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s095_output/n100.r04.s095.untrimmed.sorted.bam\" \"n100.r04.s095_output/n100.r04.s095.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s095_output/n100.r04.s095.untrimmed.sorted.bam\" -b \"n100.r04.s095_output/n100.r04.s095.primers.bed\" -p \"n100.r04.s095_output/n100.r04.s095.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s095_output/n100.r04.s095.trimmed.sorted.bam\" \"n100.r04.s095_output/n100.r04.s095.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s095_output/n100.r04.s095.reference.fas\" \"n100.r04.s095_output/n100.r04.s095.trimmed.sorted.bam\" > \"n100.r04.s095_output/n100.r04.s095.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s095_output/n100.r04.s095.reference.fas\" --call-indels \"n100.r04.s095_output/n100.r04.s095.trimmed.sorted.bam\" > \"n100.r04.s095_output/n100.r04.s095.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s095_output/n100.r04.s095.trimmed.sorted.bam\" > \"n100.r04.s095_output/n100.r04.s095.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s095_output/n100.r04.s095.depth.txt\" \"n100.r04.s095_output/n100.r04.s095.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s095_output/n100.r04.s095.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s095_output/n100.r04.s095.reference.fas\" | bcftools consensus -m \"n100.r04.s095_output/n100.r04.s095.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s095_output/n100.r04.s095.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s095_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s095_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s095_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task cbcd17ff (flow 42a8a7f6): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s093_output\"\n        wget -O \"n100.r04.s093_output/n100.r04.s093.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s093_output/n100.r04.s093.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s093_output/n100.r04.s093.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s093_output/n100.r04.s093.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s093_output/n100.r04.s093.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s093_output/n100.r04.s093.reference.fas\" \"n100.r04.s093_output/n100.r04.s093.fq1.fastq\" \"n100.r04.s093_output/n100.r04.s093.fq2.fastq\" | samtools view -bS - > \"n100.r04.s093_output/n100.r04.s093.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s093_output/n100.r04.s093.untrimmed.sorted.bam\" \"n100.r04.s093_output/n100.r04.s093.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s093_output/n100.r04.s093.untrimmed.sorted.bam\" -b \"n100.r04.s093_output/n100.r04.s093.primers.bed\" -p \"n100.r04.s093_output/n100.r04.s093.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s093_output/n100.r04.s093.trimmed.sorted.bam\" \"n100.r04.s093_output/n100.r04.s093.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s093_output/n100.r04.s093.reference.fas\" \"n100.r04.s093_output/n100.r04.s093.trimmed.sorted.bam\" > \"n100.r04.s093_output/n100.r04.s093.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s093_output/n100.r04.s093.reference.fas\" --call-indels \"n100.r04.s093_output/n100.r04.s093.trimmed.sorted.bam\" > \"n100.r04.s093_output/n100.r04.s093.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s093_output/n100.r04.s093.trimmed.sorted.bam\" > \"n100.r04.s093_output/n100.r04.s093.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s093_output/n100.r04.s093.depth.txt\" \"n100.r04.s093_output/n100.r04.s093.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s093_output/n100.r04.s093.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s093_output/n100.r04.s093.reference.fas\" | bcftools consensus -m \"n100.r04.s093_output/n100.r04.s093.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s093_output/n100.r04.s093.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s093_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s093_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s093_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 1630f0a4 (flow f5f175a1): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s047_output\"\n        wget -O \"n100.r04.s047_output/n100.r04.s047.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s047_output/n100.r04.s047.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s047_output/n100.r04.s047.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s047_output/n100.r04.s047.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s047_output/n100.r04.s047.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s047_output/n100.r04.s047.reference.fas\" \"n100.r04.s047_output/n100.r04.s047.fq1.fastq\" \"n100.r04.s047_output/n100.r04.s047.fq2.fastq\" | samtools view -bS - > \"n100.r04.s047_output/n100.r04.s047.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s047_output/n100.r04.s047.untrimmed.sorted.bam\" \"n100.r04.s047_output/n100.r04.s047.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s047_output/n100.r04.s047.untrimmed.sorted.bam\" -b \"n100.r04.s047_output/n100.r04.s047.primers.bed\" -p \"n100.r04.s047_output/n100.r04.s047.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s047_output/n100.r04.s047.trimmed.sorted.bam\" \"n100.r04.s047_output/n100.r04.s047.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s047_output/n100.r04.s047.reference.fas\" \"n100.r04.s047_output/n100.r04.s047.trimmed.sorted.bam\" > \"n100.r04.s047_output/n100.r04.s047.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s047_output/n100.r04.s047.reference.fas\" --call-indels \"n100.r04.s047_output/n100.r04.s047.trimmed.sorted.bam\" > \"n100.r04.s047_output/n100.r04.s047.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s047_output/n100.r04.s047.trimmed.sorted.bam\" > \"n100.r04.s047_output/n100.r04.s047.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s047_output/n100.r04.s047.depth.txt\" \"n100.r04.s047_output/n100.r04.s047.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s047_output/n100.r04.s047.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s047_output/n100.r04.s047.reference.fas\" | bcftools consensus -m \"n100.r04.s047_output/n100.r04.s047.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s047_output/n100.r04.s047.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s047_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s047_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s047_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 7ab39a0f (flow 017350a1): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s027_output\"\n        wget -O \"n100.r04.s027_output/n100.r04.s027.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s027_output/n100.r04.s027.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s027_output/n100.r04.s027.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s027_output/n100.r04.s027.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s027_output/n100.r04.s027.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s027_output/n100.r04.s027.reference.fas\" \"n100.r04.s027_output/n100.r04.s027.fq1.fastq\" \"n100.r04.s027_output/n100.r04.s027.fq2.fastq\" | samtools view -bS - > \"n100.r04.s027_output/n100.r04.s027.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s027_output/n100.r04.s027.untrimmed.sorted.bam\" \"n100.r04.s027_output/n100.r04.s027.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s027_output/n100.r04.s027.untrimmed.sorted.bam\" -b \"n100.r04.s027_output/n100.r04.s027.primers.bed\" -p \"n100.r04.s027_output/n100.r04.s027.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s027_output/n100.r04.s027.trimmed.sorted.bam\" \"n100.r04.s027_output/n100.r04.s027.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s027_output/n100.r04.s027.reference.fas\" \"n100.r04.s027_output/n100.r04.s027.trimmed.sorted.bam\" > \"n100.r04.s027_output/n100.r04.s027.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s027_output/n100.r04.s027.reference.fas\" --call-indels \"n100.r04.s027_output/n100.r04.s027.trimmed.sorted.bam\" > \"n100.r04.s027_output/n100.r04.s027.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s027_output/n100.r04.s027.trimmed.sorted.bam\" > \"n100.r04.s027_output/n100.r04.s027.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s027_output/n100.r04.s027.depth.txt\" \"n100.r04.s027_output/n100.r04.s027.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s027_output/n100.r04.s027.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s027_output/n100.r04.s027.reference.fas\" | bcftools consensus -m \"n100.r04.s027_output/n100.r04.s027.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s027_output/n100.r04.s027.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s027_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s027_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s027_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 3bb8f0e4 (flow a324358a): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s038_output\"\n        wget -O \"n100.r04.s038_output/n100.r04.s038.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s038_output/n100.r04.s038.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s038_output/n100.r04.s038.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s038_output/n100.r04.s038.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s038_output/n100.r04.s038.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s038_output/n100.r04.s038.reference.fas\" \"n100.r04.s038_output/n100.r04.s038.fq1.fastq\" \"n100.r04.s038_output/n100.r04.s038.fq2.fastq\" | samtools view -bS - > \"n100.r04.s038_output/n100.r04.s038.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s038_output/n100.r04.s038.untrimmed.sorted.bam\" \"n100.r04.s038_output/n100.r04.s038.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s038_output/n100.r04.s038.untrimmed.sorted.bam\" -b \"n100.r04.s038_output/n100.r04.s038.primers.bed\" -p \"n100.r04.s038_output/n100.r04.s038.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s038_output/n100.r04.s038.trimmed.sorted.bam\" \"n100.r04.s038_output/n100.r04.s038.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s038_output/n100.r04.s038.reference.fas\" \"n100.r04.s038_output/n100.r04.s038.trimmed.sorted.bam\" > \"n100.r04.s038_output/n100.r04.s038.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s038_output/n100.r04.s038.reference.fas\" --call-indels \"n100.r04.s038_output/n100.r04.s038.trimmed.sorted.bam\" > \"n100.r04.s038_output/n100.r04.s038.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s038_output/n100.r04.s038.trimmed.sorted.bam\" > \"n100.r04.s038_output/n100.r04.s038.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s038_output/n100.r04.s038.depth.txt\" \"n100.r04.s038_output/n100.r04.s038.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s038_output/n100.r04.s038.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s038_output/n100.r04.s038.reference.fas\" | bcftools consensus -m \"n100.r04.s038_output/n100.r04.s038.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s038_output/n100.r04.s038.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s038_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s038_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s038_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task a322da77 (flow 70dfd3f3): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s091_output\"\n        wget -O \"n100.r04.s091_output/n100.r04.s091.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s091_output/n100.r04.s091.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s091_output/n100.r04.s091.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s091_output/n100.r04.s091.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s091_output/n100.r04.s091.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s091_output/n100.r04.s091.reference.fas\" \"n100.r04.s091_output/n100.r04.s091.fq1.fastq\" \"n100.r04.s091_output/n100.r04.s091.fq2.fastq\" | samtools view -bS - > \"n100.r04.s091_output/n100.r04.s091.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s091_output/n100.r04.s091.untrimmed.sorted.bam\" \"n100.r04.s091_output/n100.r04.s091.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s091_output/n100.r04.s091.untrimmed.sorted.bam\" -b \"n100.r04.s091_output/n100.r04.s091.primers.bed\" -p \"n100.r04.s091_output/n100.r04.s091.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s091_output/n100.r04.s091.trimmed.sorted.bam\" \"n100.r04.s091_output/n100.r04.s091.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s091_output/n100.r04.s091.reference.fas\" \"n100.r04.s091_output/n100.r04.s091.trimmed.sorted.bam\" > \"n100.r04.s091_output/n100.r04.s091.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s091_output/n100.r04.s091.reference.fas\" --call-indels \"n100.r04.s091_output/n100.r04.s091.trimmed.sorted.bam\" > \"n100.r04.s091_output/n100.r04.s091.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s091_output/n100.r04.s091.trimmed.sorted.bam\" > \"n100.r04.s091_output/n100.r04.s091.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s091_output/n100.r04.s091.depth.txt\" \"n100.r04.s091_output/n100.r04.s091.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s091_output/n100.r04.s091.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s091_output/n100.r04.s091.reference.fas\" | bcftools consensus -m \"n100.r04.s091_output/n100.r04.s091.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s091_output/n100.r04.s091.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s091_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s091_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s091_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 8ef79677 (flow e14892e7): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s078_output\"\n        wget -O \"n100.r04.s078_output/n100.r04.s078.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s078_output/n100.r04.s078.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s078_output/n100.r04.s078.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s078_output/n100.r04.s078.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s078_output/n100.r04.s078.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s078_output/n100.r04.s078.reference.fas\" \"n100.r04.s078_output/n100.r04.s078.fq1.fastq\" \"n100.r04.s078_output/n100.r04.s078.fq2.fastq\" | samtools view -bS - > \"n100.r04.s078_output/n100.r04.s078.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s078_output/n100.r04.s078.untrimmed.sorted.bam\" \"n100.r04.s078_output/n100.r04.s078.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s078_output/n100.r04.s078.untrimmed.sorted.bam\" -b \"n100.r04.s078_output/n100.r04.s078.primers.bed\" -p \"n100.r04.s078_output/n100.r04.s078.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s078_output/n100.r04.s078.trimmed.sorted.bam\" \"n100.r04.s078_output/n100.r04.s078.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s078_output/n100.r04.s078.reference.fas\" \"n100.r04.s078_output/n100.r04.s078.trimmed.sorted.bam\" > \"n100.r04.s078_output/n100.r04.s078.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s078_output/n100.r04.s078.reference.fas\" --call-indels \"n100.r04.s078_output/n100.r04.s078.trimmed.sorted.bam\" > \"n100.r04.s078_output/n100.r04.s078.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s078_output/n100.r04.s078.trimmed.sorted.bam\" > \"n100.r04.s078_output/n100.r04.s078.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s078_output/n100.r04.s078.depth.txt\" \"n100.r04.s078_output/n100.r04.s078.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s078_output/n100.r04.s078.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s078_output/n100.r04.s078.reference.fas\" | bcftools consensus -m \"n100.r04.s078_output/n100.r04.s078.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s078_output/n100.r04.s078.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s078_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s078_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s078_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 85eaed6d (flow 1f720a3c): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s024_output\"\n        wget -O \"n100.r04.s024_output/n100.r04.s024.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s024_output/n100.r04.s024.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s024_output/n100.r04.s024.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s024_output/n100.r04.s024.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s024_output/n100.r04.s024.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s024_output/n100.r04.s024.reference.fas\" \"n100.r04.s024_output/n100.r04.s024.fq1.fastq\" \"n100.r04.s024_output/n100.r04.s024.fq2.fastq\" | samtools view -bS - > \"n100.r04.s024_output/n100.r04.s024.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s024_output/n100.r04.s024.untrimmed.sorted.bam\" \"n100.r04.s024_output/n100.r04.s024.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s024_output/n100.r04.s024.untrimmed.sorted.bam\" -b \"n100.r04.s024_output/n100.r04.s024.primers.bed\" -p \"n100.r04.s024_output/n100.r04.s024.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s024_output/n100.r04.s024.trimmed.sorted.bam\" \"n100.r04.s024_output/n100.r04.s024.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s024_output/n100.r04.s024.reference.fas\" \"n100.r04.s024_output/n100.r04.s024.trimmed.sorted.bam\" > \"n100.r04.s024_output/n100.r04.s024.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s024_output/n100.r04.s024.reference.fas\" --call-indels \"n100.r04.s024_output/n100.r04.s024.trimmed.sorted.bam\" > \"n100.r04.s024_output/n100.r04.s024.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s024_output/n100.r04.s024.trimmed.sorted.bam\" > \"n100.r04.s024_output/n100.r04.s024.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s024_output/n100.r04.s024.depth.txt\" \"n100.r04.s024_output/n100.r04.s024.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s024_output/n100.r04.s024.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s024_output/n100.r04.s024.reference.fas\" | bcftools consensus -m \"n100.r04.s024_output/n100.r04.s024.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s024_output/n100.r04.s024.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s024_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s024_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s024_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task ed42d1d8 (flow ec834335): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s025_output\"\n        wget -O \"n100.r04.s025_output/n100.r04.s025.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s025_output/n100.r04.s025.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s025_output/n100.r04.s025.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s025_output/n100.r04.s025.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s025_output/n100.r04.s025.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s025_output/n100.r04.s025.reference.fas\" \"n100.r04.s025_output/n100.r04.s025.fq1.fastq\" \"n100.r04.s025_output/n100.r04.s025.fq2.fastq\" | samtools view -bS - > \"n100.r04.s025_output/n100.r04.s025.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s025_output/n100.r04.s025.untrimmed.sorted.bam\" \"n100.r04.s025_output/n100.r04.s025.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s025_output/n100.r04.s025.untrimmed.sorted.bam\" -b \"n100.r04.s025_output/n100.r04.s025.primers.bed\" -p \"n100.r04.s025_output/n100.r04.s025.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s025_output/n100.r04.s025.trimmed.sorted.bam\" \"n100.r04.s025_output/n100.r04.s025.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s025_output/n100.r04.s025.reference.fas\" \"n100.r04.s025_output/n100.r04.s025.trimmed.sorted.bam\" > \"n100.r04.s025_output/n100.r04.s025.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s025_output/n100.r04.s025.reference.fas\" --call-indels \"n100.r04.s025_output/n100.r04.s025.trimmed.sorted.bam\" > \"n100.r04.s025_output/n100.r04.s025.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s025_output/n100.r04.s025.trimmed.sorted.bam\" > \"n100.r04.s025_output/n100.r04.s025.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s025_output/n100.r04.s025.depth.txt\" \"n100.r04.s025_output/n100.r04.s025.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s025_output/n100.r04.s025.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s025_output/n100.r04.s025.reference.fas\" | bcftools consensus -m \"n100.r04.s025_output/n100.r04.s025.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s025_output/n100.r04.s025.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s025_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s025_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s025_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 81360b45 (flow 5c0f0936): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s031_output\"\n        wget -O \"n100.r04.s031_output/n100.r04.s031.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s031_output/n100.r04.s031.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s031_output/n100.r04.s031.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s031_output/n100.r04.s031.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s031_output/n100.r04.s031.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s031_output/n100.r04.s031.reference.fas\" \"n100.r04.s031_output/n100.r04.s031.fq1.fastq\" \"n100.r04.s031_output/n100.r04.s031.fq2.fastq\" | samtools view -bS - > \"n100.r04.s031_output/n100.r04.s031.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s031_output/n100.r04.s031.untrimmed.sorted.bam\" \"n100.r04.s031_output/n100.r04.s031.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s031_output/n100.r04.s031.untrimmed.sorted.bam\" -b \"n100.r04.s031_output/n100.r04.s031.primers.bed\" -p \"n100.r04.s031_output/n100.r04.s031.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s031_output/n100.r04.s031.trimmed.sorted.bam\" \"n100.r04.s031_output/n100.r04.s031.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s031_output/n100.r04.s031.reference.fas\" \"n100.r04.s031_output/n100.r04.s031.trimmed.sorted.bam\" > \"n100.r04.s031_output/n100.r04.s031.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s031_output/n100.r04.s031.reference.fas\" --call-indels \"n100.r04.s031_output/n100.r04.s031.trimmed.sorted.bam\" > \"n100.r04.s031_output/n100.r04.s031.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s031_output/n100.r04.s031.trimmed.sorted.bam\" > \"n100.r04.s031_output/n100.r04.s031.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s031_output/n100.r04.s031.depth.txt\" \"n100.r04.s031_output/n100.r04.s031.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s031_output/n100.r04.s031.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s031_output/n100.r04.s031.reference.fas\" | bcftools consensus -m \"n100.r04.s031_output/n100.r04.s031.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s031_output/n100.r04.s031.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s031_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s031_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s031_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task d4a3dec7 (flow 86ee751d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s044_output\"\n        wget -O \"n100.r04.s044_output/n100.r04.s044.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s044_output/n100.r04.s044.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s044_output/n100.r04.s044.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s044_output/n100.r04.s044.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s044_output/n100.r04.s044.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s044_output/n100.r04.s044.reference.fas\" \"n100.r04.s044_output/n100.r04.s044.fq1.fastq\" \"n100.r04.s044_output/n100.r04.s044.fq2.fastq\" | samtools view -bS - > \"n100.r04.s044_output/n100.r04.s044.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s044_output/n100.r04.s044.untrimmed.sorted.bam\" \"n100.r04.s044_output/n100.r04.s044.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s044_output/n100.r04.s044.untrimmed.sorted.bam\" -b \"n100.r04.s044_output/n100.r04.s044.primers.bed\" -p \"n100.r04.s044_output/n100.r04.s044.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s044_output/n100.r04.s044.trimmed.sorted.bam\" \"n100.r04.s044_output/n100.r04.s044.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s044_output/n100.r04.s044.reference.fas\" \"n100.r04.s044_output/n100.r04.s044.trimmed.sorted.bam\" > \"n100.r04.s044_output/n100.r04.s044.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s044_output/n100.r04.s044.reference.fas\" --call-indels \"n100.r04.s044_output/n100.r04.s044.trimmed.sorted.bam\" > \"n100.r04.s044_output/n100.r04.s044.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s044_output/n100.r04.s044.trimmed.sorted.bam\" > \"n100.r04.s044_output/n100.r04.s044.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s044_output/n100.r04.s044.depth.txt\" \"n100.r04.s044_output/n100.r04.s044.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s044_output/n100.r04.s044.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s044_output/n100.r04.s044.reference.fas\" | bcftools consensus -m \"n100.r04.s044_output/n100.r04.s044.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s044_output/n100.r04.s044.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s044_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s044_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s044_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task f0cd2c6c (flow 499d9909): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s043_output\"\n        wget -O \"n100.r04.s043_output/n100.r04.s043.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s043_output/n100.r04.s043.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s043_output/n100.r04.s043.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s043_output/n100.r04.s043.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s043_output/n100.r04.s043.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s043_output/n100.r04.s043.reference.fas\" \"n100.r04.s043_output/n100.r04.s043.fq1.fastq\" \"n100.r04.s043_output/n100.r04.s043.fq2.fastq\" | samtools view -bS - > \"n100.r04.s043_output/n100.r04.s043.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s043_output/n100.r04.s043.untrimmed.sorted.bam\" \"n100.r04.s043_output/n100.r04.s043.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s043_output/n100.r04.s043.untrimmed.sorted.bam\" -b \"n100.r04.s043_output/n100.r04.s043.primers.bed\" -p \"n100.r04.s043_output/n100.r04.s043.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s043_output/n100.r04.s043.trimmed.sorted.bam\" \"n100.r04.s043_output/n100.r04.s043.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s043_output/n100.r04.s043.reference.fas\" \"n100.r04.s043_output/n100.r04.s043.trimmed.sorted.bam\" > \"n100.r04.s043_output/n100.r04.s043.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s043_output/n100.r04.s043.reference.fas\" --call-indels \"n100.r04.s043_output/n100.r04.s043.trimmed.sorted.bam\" > \"n100.r04.s043_output/n100.r04.s043.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s043_output/n100.r04.s043.trimmed.sorted.bam\" > \"n100.r04.s043_output/n100.r04.s043.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s043_output/n100.r04.s043.depth.txt\" \"n100.r04.s043_output/n100.r04.s043.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s043_output/n100.r04.s043.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s043_output/n100.r04.s043.reference.fas\" | bcftools consensus -m \"n100.r04.s043_output/n100.r04.s043.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s043_output/n100.r04.s043.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s043_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s043_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s043_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 8bd46694 (flow e8a2d981): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s034_output\"\n        wget -O \"n100.r04.s034_output/n100.r04.s034.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s034_output/n100.r04.s034.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s034_output/n100.r04.s034.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s034_output/n100.r04.s034.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s034_output/n100.r04.s034.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s034_output/n100.r04.s034.reference.fas\" \"n100.r04.s034_output/n100.r04.s034.fq1.fastq\" \"n100.r04.s034_output/n100.r04.s034.fq2.fastq\" | samtools view -bS - > \"n100.r04.s034_output/n100.r04.s034.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s034_output/n100.r04.s034.untrimmed.sorted.bam\" \"n100.r04.s034_output/n100.r04.s034.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s034_output/n100.r04.s034.untrimmed.sorted.bam\" -b \"n100.r04.s034_output/n100.r04.s034.primers.bed\" -p \"n100.r04.s034_output/n100.r04.s034.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s034_output/n100.r04.s034.trimmed.sorted.bam\" \"n100.r04.s034_output/n100.r04.s034.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s034_output/n100.r04.s034.reference.fas\" \"n100.r04.s034_output/n100.r04.s034.trimmed.sorted.bam\" > \"n100.r04.s034_output/n100.r04.s034.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s034_output/n100.r04.s034.reference.fas\" --call-indels \"n100.r04.s034_output/n100.r04.s034.trimmed.sorted.bam\" > \"n100.r04.s034_output/n100.r04.s034.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s034_output/n100.r04.s034.trimmed.sorted.bam\" > \"n100.r04.s034_output/n100.r04.s034.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s034_output/n100.r04.s034.depth.txt\" \"n100.r04.s034_output/n100.r04.s034.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s034_output/n100.r04.s034.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s034_output/n100.r04.s034.reference.fas\" | bcftools consensus -m \"n100.r04.s034_output/n100.r04.s034.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s034_output/n100.r04.s034.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s034_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s034_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s034_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 44129759 (flow 5eef48c8): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s035_output\"\n        wget -O \"n100.r04.s035_output/n100.r04.s035.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s035_output/n100.r04.s035.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s035_output/n100.r04.s035.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s035_output/n100.r04.s035.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s035_output/n100.r04.s035.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s035_output/n100.r04.s035.reference.fas\" \"n100.r04.s035_output/n100.r04.s035.fq1.fastq\" \"n100.r04.s035_output/n100.r04.s035.fq2.fastq\" | samtools view -bS - > \"n100.r04.s035_output/n100.r04.s035.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s035_output/n100.r04.s035.untrimmed.sorted.bam\" \"n100.r04.s035_output/n100.r04.s035.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s035_output/n100.r04.s035.untrimmed.sorted.bam\" -b \"n100.r04.s035_output/n100.r04.s035.primers.bed\" -p \"n100.r04.s035_output/n100.r04.s035.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s035_output/n100.r04.s035.trimmed.sorted.bam\" \"n100.r04.s035_output/n100.r04.s035.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s035_output/n100.r04.s035.reference.fas\" \"n100.r04.s035_output/n100.r04.s035.trimmed.sorted.bam\" > \"n100.r04.s035_output/n100.r04.s035.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s035_output/n100.r04.s035.reference.fas\" --call-indels \"n100.r04.s035_output/n100.r04.s035.trimmed.sorted.bam\" > \"n100.r04.s035_output/n100.r04.s035.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s035_output/n100.r04.s035.trimmed.sorted.bam\" > \"n100.r04.s035_output/n100.r04.s035.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s035_output/n100.r04.s035.depth.txt\" \"n100.r04.s035_output/n100.r04.s035.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s035_output/n100.r04.s035.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s035_output/n100.r04.s035.reference.fas\" | bcftools consensus -m \"n100.r04.s035_output/n100.r04.s035.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s035_output/n100.r04.s035.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s035_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s035_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s035_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task b207b735 (flow 5957e4e6): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s028_output\"\n        wget -O \"n100.r04.s028_output/n100.r04.s028.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s028_output/n100.r04.s028.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s028_output/n100.r04.s028.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s028_output/n100.r04.s028.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s028_output/n100.r04.s028.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s028_output/n100.r04.s028.reference.fas\" \"n100.r04.s028_output/n100.r04.s028.fq1.fastq\" \"n100.r04.s028_output/n100.r04.s028.fq2.fastq\" | samtools view -bS - > \"n100.r04.s028_output/n100.r04.s028.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s028_output/n100.r04.s028.untrimmed.sorted.bam\" \"n100.r04.s028_output/n100.r04.s028.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s028_output/n100.r04.s028.untrimmed.sorted.bam\" -b \"n100.r04.s028_output/n100.r04.s028.primers.bed\" -p \"n100.r04.s028_output/n100.r04.s028.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s028_output/n100.r04.s028.trimmed.sorted.bam\" \"n100.r04.s028_output/n100.r04.s028.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s028_output/n100.r04.s028.reference.fas\" \"n100.r04.s028_output/n100.r04.s028.trimmed.sorted.bam\" > \"n100.r04.s028_output/n100.r04.s028.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s028_output/n100.r04.s028.reference.fas\" --call-indels \"n100.r04.s028_output/n100.r04.s028.trimmed.sorted.bam\" > \"n100.r04.s028_output/n100.r04.s028.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s028_output/n100.r04.s028.trimmed.sorted.bam\" > \"n100.r04.s028_output/n100.r04.s028.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s028_output/n100.r04.s028.depth.txt\" \"n100.r04.s028_output/n100.r04.s028.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s028_output/n100.r04.s028.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s028_output/n100.r04.s028.reference.fas\" | bcftools consensus -m \"n100.r04.s028_output/n100.r04.s028.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s028_output/n100.r04.s028.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s028_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s028_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s028_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 98623b95 (flow 78adf534): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s041_output\"\n        wget -O \"n100.r04.s041_output/n100.r04.s041.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s041_output/n100.r04.s041.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s041_output/n100.r04.s041.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s041_output/n100.r04.s041.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s041_output/n100.r04.s041.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s041_output/n100.r04.s041.reference.fas\" \"n100.r04.s041_output/n100.r04.s041.fq1.fastq\" \"n100.r04.s041_output/n100.r04.s041.fq2.fastq\" | samtools view -bS - > \"n100.r04.s041_output/n100.r04.s041.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s041_output/n100.r04.s041.untrimmed.sorted.bam\" \"n100.r04.s041_output/n100.r04.s041.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s041_output/n100.r04.s041.untrimmed.sorted.bam\" -b \"n100.r04.s041_output/n100.r04.s041.primers.bed\" -p \"n100.r04.s041_output/n100.r04.s041.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s041_output/n100.r04.s041.trimmed.sorted.bam\" \"n100.r04.s041_output/n100.r04.s041.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s041_output/n100.r04.s041.reference.fas\" \"n100.r04.s041_output/n100.r04.s041.trimmed.sorted.bam\" > \"n100.r04.s041_output/n100.r04.s041.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s041_output/n100.r04.s041.reference.fas\" --call-indels \"n100.r04.s041_output/n100.r04.s041.trimmed.sorted.bam\" > \"n100.r04.s041_output/n100.r04.s041.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s041_output/n100.r04.s041.trimmed.sorted.bam\" > \"n100.r04.s041_output/n100.r04.s041.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s041_output/n100.r04.s041.depth.txt\" \"n100.r04.s041_output/n100.r04.s041.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s041_output/n100.r04.s041.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s041_output/n100.r04.s041.reference.fas\" | bcftools consensus -m \"n100.r04.s041_output/n100.r04.s041.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s041_output/n100.r04.s041.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s041_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s041_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s041_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 84a55080 (flow d93a17b8): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s049_output\"\n        wget -O \"n100.r04.s049_output/n100.r04.s049.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s049_output/n100.r04.s049.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s049_output/n100.r04.s049.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s049_output/n100.r04.s049.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s049_output/n100.r04.s049.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s049_output/n100.r04.s049.reference.fas\" \"n100.r04.s049_output/n100.r04.s049.fq1.fastq\" \"n100.r04.s049_output/n100.r04.s049.fq2.fastq\" | samtools view -bS - > \"n100.r04.s049_output/n100.r04.s049.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s049_output/n100.r04.s049.untrimmed.sorted.bam\" \"n100.r04.s049_output/n100.r04.s049.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s049_output/n100.r04.s049.untrimmed.sorted.bam\" -b \"n100.r04.s049_output/n100.r04.s049.primers.bed\" -p \"n100.r04.s049_output/n100.r04.s049.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s049_output/n100.r04.s049.trimmed.sorted.bam\" \"n100.r04.s049_output/n100.r04.s049.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s049_output/n100.r04.s049.reference.fas\" \"n100.r04.s049_output/n100.r04.s049.trimmed.sorted.bam\" > \"n100.r04.s049_output/n100.r04.s049.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s049_output/n100.r04.s049.reference.fas\" --call-indels \"n100.r04.s049_output/n100.r04.s049.trimmed.sorted.bam\" > \"n100.r04.s049_output/n100.r04.s049.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s049_output/n100.r04.s049.trimmed.sorted.bam\" > \"n100.r04.s049_output/n100.r04.s049.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s049_output/n100.r04.s049.depth.txt\" \"n100.r04.s049_output/n100.r04.s049.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s049_output/n100.r04.s049.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s049_output/n100.r04.s049.reference.fas\" | bcftools consensus -m \"n100.r04.s049_output/n100.r04.s049.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s049_output/n100.r04.s049.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s049_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s049_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s049_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task fd10e005 (flow dd86c476): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s021_output\"\n        wget -O \"n100.r04.s021_output/n100.r04.s021.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s021_output/n100.r04.s021.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s021_output/n100.r04.s021.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s021_output/n100.r04.s021.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s021_output/n100.r04.s021.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s021_output/n100.r04.s021.reference.fas\" \"n100.r04.s021_output/n100.r04.s021.fq1.fastq\" \"n100.r04.s021_output/n100.r04.s021.fq2.fastq\" | samtools view -bS - > \"n100.r04.s021_output/n100.r04.s021.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s021_output/n100.r04.s021.untrimmed.sorted.bam\" \"n100.r04.s021_output/n100.r04.s021.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s021_output/n100.r04.s021.untrimmed.sorted.bam\" -b \"n100.r04.s021_output/n100.r04.s021.primers.bed\" -p \"n100.r04.s021_output/n100.r04.s021.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s021_output/n100.r04.s021.trimmed.sorted.bam\" \"n100.r04.s021_output/n100.r04.s021.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s021_output/n100.r04.s021.reference.fas\" \"n100.r04.s021_output/n100.r04.s021.trimmed.sorted.bam\" > \"n100.r04.s021_output/n100.r04.s021.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s021_output/n100.r04.s021.reference.fas\" --call-indels \"n100.r04.s021_output/n100.r04.s021.trimmed.sorted.bam\" > \"n100.r04.s021_output/n100.r04.s021.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s021_output/n100.r04.s021.trimmed.sorted.bam\" > \"n100.r04.s021_output/n100.r04.s021.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s021_output/n100.r04.s021.depth.txt\" \"n100.r04.s021_output/n100.r04.s021.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s021_output/n100.r04.s021.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s021_output/n100.r04.s021.reference.fas\" | bcftools consensus -m \"n100.r04.s021_output/n100.r04.s021.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s021_output/n100.r04.s021.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s021_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s021_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s021_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 9fa868bc (flow 0bb0e047): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s037_output\"\n        wget -O \"n100.r04.s037_output/n100.r04.s037.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s037_output/n100.r04.s037.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s037_output/n100.r04.s037.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s037_output/n100.r04.s037.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s037_output/n100.r04.s037.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s037_output/n100.r04.s037.reference.fas\" \"n100.r04.s037_output/n100.r04.s037.fq1.fastq\" \"n100.r04.s037_output/n100.r04.s037.fq2.fastq\" | samtools view -bS - > \"n100.r04.s037_output/n100.r04.s037.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s037_output/n100.r04.s037.untrimmed.sorted.bam\" \"n100.r04.s037_output/n100.r04.s037.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s037_output/n100.r04.s037.untrimmed.sorted.bam\" -b \"n100.r04.s037_output/n100.r04.s037.primers.bed\" -p \"n100.r04.s037_output/n100.r04.s037.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s037_output/n100.r04.s037.trimmed.sorted.bam\" \"n100.r04.s037_output/n100.r04.s037.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s037_output/n100.r04.s037.reference.fas\" \"n100.r04.s037_output/n100.r04.s037.trimmed.sorted.bam\" > \"n100.r04.s037_output/n100.r04.s037.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s037_output/n100.r04.s037.reference.fas\" --call-indels \"n100.r04.s037_output/n100.r04.s037.trimmed.sorted.bam\" > \"n100.r04.s037_output/n100.r04.s037.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s037_output/n100.r04.s037.trimmed.sorted.bam\" > \"n100.r04.s037_output/n100.r04.s037.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s037_output/n100.r04.s037.depth.txt\" \"n100.r04.s037_output/n100.r04.s037.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s037_output/n100.r04.s037.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s037_output/n100.r04.s037.reference.fas\" | bcftools consensus -m \"n100.r04.s037_output/n100.r04.s037.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s037_output/n100.r04.s037.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s037_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s037_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s037_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 21d2711e (flow a8490785): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s094_output\"\n        wget -O \"n100.r04.s094_output/n100.r04.s094.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s094_output/n100.r04.s094.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s094_output/n100.r04.s094.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s094_output/n100.r04.s094.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s094_output/n100.r04.s094.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s094_output/n100.r04.s094.reference.fas\" \"n100.r04.s094_output/n100.r04.s094.fq1.fastq\" \"n100.r04.s094_output/n100.r04.s094.fq2.fastq\" | samtools view -bS - > \"n100.r04.s094_output/n100.r04.s094.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s094_output/n100.r04.s094.untrimmed.sorted.bam\" \"n100.r04.s094_output/n100.r04.s094.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s094_output/n100.r04.s094.untrimmed.sorted.bam\" -b \"n100.r04.s094_output/n100.r04.s094.primers.bed\" -p \"n100.r04.s094_output/n100.r04.s094.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s094_output/n100.r04.s094.trimmed.sorted.bam\" \"n100.r04.s094_output/n100.r04.s094.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s094_output/n100.r04.s094.reference.fas\" \"n100.r04.s094_output/n100.r04.s094.trimmed.sorted.bam\" > \"n100.r04.s094_output/n100.r04.s094.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s094_output/n100.r04.s094.reference.fas\" --call-indels \"n100.r04.s094_output/n100.r04.s094.trimmed.sorted.bam\" > \"n100.r04.s094_output/n100.r04.s094.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s094_output/n100.r04.s094.trimmed.sorted.bam\" > \"n100.r04.s094_output/n100.r04.s094.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s094_output/n100.r04.s094.depth.txt\" \"n100.r04.s094_output/n100.r04.s094.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s094_output/n100.r04.s094.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s094_output/n100.r04.s094.reference.fas\" | bcftools consensus -m \"n100.r04.s094_output/n100.r04.s094.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s094_output/n100.r04.s094.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s094_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s094_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s094_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 4b88dfbe (flow 5d1a913d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s022_output\"\n        wget -O \"n100.r04.s022_output/n100.r04.s022.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s022_output/n100.r04.s022.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s022_output/n100.r04.s022.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s022_output/n100.r04.s022.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s022_output/n100.r04.s022.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s022_output/n100.r04.s022.reference.fas\" \"n100.r04.s022_output/n100.r04.s022.fq1.fastq\" \"n100.r04.s022_output/n100.r04.s022.fq2.fastq\" | samtools view -bS - > \"n100.r04.s022_output/n100.r04.s022.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s022_output/n100.r04.s022.untrimmed.sorted.bam\" \"n100.r04.s022_output/n100.r04.s022.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s022_output/n100.r04.s022.untrimmed.sorted.bam\" -b \"n100.r04.s022_output/n100.r04.s022.primers.bed\" -p \"n100.r04.s022_output/n100.r04.s022.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s022_output/n100.r04.s022.trimmed.sorted.bam\" \"n100.r04.s022_output/n100.r04.s022.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s022_output/n100.r04.s022.reference.fas\" \"n100.r04.s022_output/n100.r04.s022.trimmed.sorted.bam\" > \"n100.r04.s022_output/n100.r04.s022.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s022_output/n100.r04.s022.reference.fas\" --call-indels \"n100.r04.s022_output/n100.r04.s022.trimmed.sorted.bam\" > \"n100.r04.s022_output/n100.r04.s022.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s022_output/n100.r04.s022.trimmed.sorted.bam\" > \"n100.r04.s022_output/n100.r04.s022.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s022_output/n100.r04.s022.depth.txt\" \"n100.r04.s022_output/n100.r04.s022.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s022_output/n100.r04.s022.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s022_output/n100.r04.s022.reference.fas\" | bcftools consensus -m \"n100.r04.s022_output/n100.r04.s022.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s022_output/n100.r04.s022.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s022_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s022_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s022_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 15255f8b (flow 47dc9646): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s029_output\"\n        wget -O \"n100.r04.s029_output/n100.r04.s029.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s029_output/n100.r04.s029.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s029_output/n100.r04.s029.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s029_output/n100.r04.s029.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s029_output/n100.r04.s029.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s029_output/n100.r04.s029.reference.fas\" \"n100.r04.s029_output/n100.r04.s029.fq1.fastq\" \"n100.r04.s029_output/n100.r04.s029.fq2.fastq\" | samtools view -bS - > \"n100.r04.s029_output/n100.r04.s029.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s029_output/n100.r04.s029.untrimmed.sorted.bam\" \"n100.r04.s029_output/n100.r04.s029.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s029_output/n100.r04.s029.untrimmed.sorted.bam\" -b \"n100.r04.s029_output/n100.r04.s029.primers.bed\" -p \"n100.r04.s029_output/n100.r04.s029.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s029_output/n100.r04.s029.trimmed.sorted.bam\" \"n100.r04.s029_output/n100.r04.s029.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s029_output/n100.r04.s029.reference.fas\" \"n100.r04.s029_output/n100.r04.s029.trimmed.sorted.bam\" > \"n100.r04.s029_output/n100.r04.s029.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s029_output/n100.r04.s029.reference.fas\" --call-indels \"n100.r04.s029_output/n100.r04.s029.trimmed.sorted.bam\" > \"n100.r04.s029_output/n100.r04.s029.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s029_output/n100.r04.s029.trimmed.sorted.bam\" > \"n100.r04.s029_output/n100.r04.s029.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s029_output/n100.r04.s029.depth.txt\" \"n100.r04.s029_output/n100.r04.s029.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s029_output/n100.r04.s029.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s029_output/n100.r04.s029.reference.fas\" | bcftools consensus -m \"n100.r04.s029_output/n100.r04.s029.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s029_output/n100.r04.s029.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s029_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s029_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s029_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task f8b9105e (flow 99c56457): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s048_output\"\n        wget -O \"n100.r04.s048_output/n100.r04.s048.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s048_output/n100.r04.s048.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s048_output/n100.r04.s048.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s048_output/n100.r04.s048.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s048_output/n100.r04.s048.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s048_output/n100.r04.s048.reference.fas\" \"n100.r04.s048_output/n100.r04.s048.fq1.fastq\" \"n100.r04.s048_output/n100.r04.s048.fq2.fastq\" | samtools view -bS - > \"n100.r04.s048_output/n100.r04.s048.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s048_output/n100.r04.s048.untrimmed.sorted.bam\" \"n100.r04.s048_output/n100.r04.s048.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s048_output/n100.r04.s048.untrimmed.sorted.bam\" -b \"n100.r04.s048_output/n100.r04.s048.primers.bed\" -p \"n100.r04.s048_output/n100.r04.s048.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s048_output/n100.r04.s048.trimmed.sorted.bam\" \"n100.r04.s048_output/n100.r04.s048.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s048_output/n100.r04.s048.reference.fas\" \"n100.r04.s048_output/n100.r04.s048.trimmed.sorted.bam\" > \"n100.r04.s048_output/n100.r04.s048.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s048_output/n100.r04.s048.reference.fas\" --call-indels \"n100.r04.s048_output/n100.r04.s048.trimmed.sorted.bam\" > \"n100.r04.s048_output/n100.r04.s048.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s048_output/n100.r04.s048.trimmed.sorted.bam\" > \"n100.r04.s048_output/n100.r04.s048.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s048_output/n100.r04.s048.depth.txt\" \"n100.r04.s048_output/n100.r04.s048.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s048_output/n100.r04.s048.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s048_output/n100.r04.s048.reference.fas\" | bcftools consensus -m \"n100.r04.s048_output/n100.r04.s048.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s048_output/n100.r04.s048.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s048_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s048_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s048_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 44230ac9 (flow 1e40e5b1): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s045_output\"\n        wget -O \"n100.r04.s045_output/n100.r04.s045.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s045_output/n100.r04.s045.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s045_output/n100.r04.s045.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s045_output/n100.r04.s045.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s045_output/n100.r04.s045.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s045_output/n100.r04.s045.reference.fas\" \"n100.r04.s045_output/n100.r04.s045.fq1.fastq\" \"n100.r04.s045_output/n100.r04.s045.fq2.fastq\" | samtools view -bS - > \"n100.r04.s045_output/n100.r04.s045.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s045_output/n100.r04.s045.untrimmed.sorted.bam\" \"n100.r04.s045_output/n100.r04.s045.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s045_output/n100.r04.s045.untrimmed.sorted.bam\" -b \"n100.r04.s045_output/n100.r04.s045.primers.bed\" -p \"n100.r04.s045_output/n100.r04.s045.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s045_output/n100.r04.s045.trimmed.sorted.bam\" \"n100.r04.s045_output/n100.r04.s045.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s045_output/n100.r04.s045.reference.fas\" \"n100.r04.s045_output/n100.r04.s045.trimmed.sorted.bam\" > \"n100.r04.s045_output/n100.r04.s045.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s045_output/n100.r04.s045.reference.fas\" --call-indels \"n100.r04.s045_output/n100.r04.s045.trimmed.sorted.bam\" > \"n100.r04.s045_output/n100.r04.s045.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s045_output/n100.r04.s045.trimmed.sorted.bam\" > \"n100.r04.s045_output/n100.r04.s045.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s045_output/n100.r04.s045.depth.txt\" \"n100.r04.s045_output/n100.r04.s045.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s045_output/n100.r04.s045.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s045_output/n100.r04.s045.reference.fas\" | bcftools consensus -m \"n100.r04.s045_output/n100.r04.s045.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s045_output/n100.r04.s045.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s045_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s045_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s045_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 737c1b6c (flow 39f0abce): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s039_output\"\n        wget -O \"n100.r04.s039_output/n100.r04.s039.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s039_output/n100.r04.s039.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s039_output/n100.r04.s039.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s039_output/n100.r04.s039.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s039_output/n100.r04.s039.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s039_output/n100.r04.s039.reference.fas\" \"n100.r04.s039_output/n100.r04.s039.fq1.fastq\" \"n100.r04.s039_output/n100.r04.s039.fq2.fastq\" | samtools view -bS - > \"n100.r04.s039_output/n100.r04.s039.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s039_output/n100.r04.s039.untrimmed.sorted.bam\" \"n100.r04.s039_output/n100.r04.s039.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s039_output/n100.r04.s039.untrimmed.sorted.bam\" -b \"n100.r04.s039_output/n100.r04.s039.primers.bed\" -p \"n100.r04.s039_output/n100.r04.s039.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s039_output/n100.r04.s039.trimmed.sorted.bam\" \"n100.r04.s039_output/n100.r04.s039.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s039_output/n100.r04.s039.reference.fas\" \"n100.r04.s039_output/n100.r04.s039.trimmed.sorted.bam\" > \"n100.r04.s039_output/n100.r04.s039.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s039_output/n100.r04.s039.reference.fas\" --call-indels \"n100.r04.s039_output/n100.r04.s039.trimmed.sorted.bam\" > \"n100.r04.s039_output/n100.r04.s039.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s039_output/n100.r04.s039.trimmed.sorted.bam\" > \"n100.r04.s039_output/n100.r04.s039.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s039_output/n100.r04.s039.depth.txt\" \"n100.r04.s039_output/n100.r04.s039.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s039_output/n100.r04.s039.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s039_output/n100.r04.s039.reference.fas\" | bcftools consensus -m \"n100.r04.s039_output/n100.r04.s039.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s039_output/n100.r04.s039.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s039_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s039_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s039_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 82963780 (flow 5fa19d0c): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s098_output\"\n        wget -O \"n100.r04.s098_output/n100.r04.s098.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s098_output/n100.r04.s098.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s098_output/n100.r04.s098.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s098_output/n100.r04.s098.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s098_output/n100.r04.s098.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s098_output/n100.r04.s098.reference.fas\" \"n100.r04.s098_output/n100.r04.s098.fq1.fastq\" \"n100.r04.s098_output/n100.r04.s098.fq2.fastq\" | samtools view -bS - > \"n100.r04.s098_output/n100.r04.s098.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s098_output/n100.r04.s098.untrimmed.sorted.bam\" \"n100.r04.s098_output/n100.r04.s098.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s098_output/n100.r04.s098.untrimmed.sorted.bam\" -b \"n100.r04.s098_output/n100.r04.s098.primers.bed\" -p \"n100.r04.s098_output/n100.r04.s098.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s098_output/n100.r04.s098.trimmed.sorted.bam\" \"n100.r04.s098_output/n100.r04.s098.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s098_output/n100.r04.s098.reference.fas\" \"n100.r04.s098_output/n100.r04.s098.trimmed.sorted.bam\" > \"n100.r04.s098_output/n100.r04.s098.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s098_output/n100.r04.s098.reference.fas\" --call-indels \"n100.r04.s098_output/n100.r04.s098.trimmed.sorted.bam\" > \"n100.r04.s098_output/n100.r04.s098.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s098_output/n100.r04.s098.trimmed.sorted.bam\" > \"n100.r04.s098_output/n100.r04.s098.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s098_output/n100.r04.s098.depth.txt\" \"n100.r04.s098_output/n100.r04.s098.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s098_output/n100.r04.s098.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s098_output/n100.r04.s098.reference.fas\" | bcftools consensus -m \"n100.r04.s098_output/n100.r04.s098.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s098_output/n100.r04.s098.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s098_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s098_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s098_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 5aa3253c (flow c8481164): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s096_output\"\n        wget -O \"n100.r04.s096_output/n100.r04.s096.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s096_output/n100.r04.s096.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s096_output/n100.r04.s096.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s096_output/n100.r04.s096.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s096_output/n100.r04.s096.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s096_output/n100.r04.s096.reference.fas\" \"n100.r04.s096_output/n100.r04.s096.fq1.fastq\" \"n100.r04.s096_output/n100.r04.s096.fq2.fastq\" | samtools view -bS - > \"n100.r04.s096_output/n100.r04.s096.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s096_output/n100.r04.s096.untrimmed.sorted.bam\" \"n100.r04.s096_output/n100.r04.s096.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s096_output/n100.r04.s096.untrimmed.sorted.bam\" -b \"n100.r04.s096_output/n100.r04.s096.primers.bed\" -p \"n100.r04.s096_output/n100.r04.s096.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s096_output/n100.r04.s096.trimmed.sorted.bam\" \"n100.r04.s096_output/n100.r04.s096.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s096_output/n100.r04.s096.reference.fas\" \"n100.r04.s096_output/n100.r04.s096.trimmed.sorted.bam\" > \"n100.r04.s096_output/n100.r04.s096.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s096_output/n100.r04.s096.reference.fas\" --call-indels \"n100.r04.s096_output/n100.r04.s096.trimmed.sorted.bam\" > \"n100.r04.s096_output/n100.r04.s096.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s096_output/n100.r04.s096.trimmed.sorted.bam\" > \"n100.r04.s096_output/n100.r04.s096.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s096_output/n100.r04.s096.depth.txt\" \"n100.r04.s096_output/n100.r04.s096.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s096_output/n100.r04.s096.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s096_output/n100.r04.s096.reference.fas\" | bcftools consensus -m \"n100.r04.s096_output/n100.r04.s096.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s096_output/n100.r04.s096.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s096_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s096_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s096_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 36d6e3bf (flow a4dcd123): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s026_output\"\n        wget -O \"n100.r04.s026_output/n100.r04.s026.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s026_output/n100.r04.s026.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s026_output/n100.r04.s026.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s026_output/n100.r04.s026.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s026_output/n100.r04.s026.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s026_output/n100.r04.s026.reference.fas\" \"n100.r04.s026_output/n100.r04.s026.fq1.fastq\" \"n100.r04.s026_output/n100.r04.s026.fq2.fastq\" | samtools view -bS - > \"n100.r04.s026_output/n100.r04.s026.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s026_output/n100.r04.s026.untrimmed.sorted.bam\" \"n100.r04.s026_output/n100.r04.s026.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s026_output/n100.r04.s026.untrimmed.sorted.bam\" -b \"n100.r04.s026_output/n100.r04.s026.primers.bed\" -p \"n100.r04.s026_output/n100.r04.s026.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s026_output/n100.r04.s026.trimmed.sorted.bam\" \"n100.r04.s026_output/n100.r04.s026.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s026_output/n100.r04.s026.reference.fas\" \"n100.r04.s026_output/n100.r04.s026.trimmed.sorted.bam\" > \"n100.r04.s026_output/n100.r04.s026.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s026_output/n100.r04.s026.reference.fas\" --call-indels \"n100.r04.s026_output/n100.r04.s026.trimmed.sorted.bam\" > \"n100.r04.s026_output/n100.r04.s026.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s026_output/n100.r04.s026.trimmed.sorted.bam\" > \"n100.r04.s026_output/n100.r04.s026.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s026_output/n100.r04.s026.depth.txt\" \"n100.r04.s026_output/n100.r04.s026.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s026_output/n100.r04.s026.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s026_output/n100.r04.s026.reference.fas\" | bcftools consensus -m \"n100.r04.s026_output/n100.r04.s026.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s026_output/n100.r04.s026.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s026_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s026_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s026_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task eab1f0b7 (flow 46c93b21): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s046_output\"\n        wget -O \"n100.r04.s046_output/n100.r04.s046.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s046_output/n100.r04.s046.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s046_output/n100.r04.s046.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s046_output/n100.r04.s046.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s046_output/n100.r04.s046.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s046_output/n100.r04.s046.reference.fas\" \"n100.r04.s046_output/n100.r04.s046.fq1.fastq\" \"n100.r04.s046_output/n100.r04.s046.fq2.fastq\" | samtools view -bS - > \"n100.r04.s046_output/n100.r04.s046.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s046_output/n100.r04.s046.untrimmed.sorted.bam\" \"n100.r04.s046_output/n100.r04.s046.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s046_output/n100.r04.s046.untrimmed.sorted.bam\" -b \"n100.r04.s046_output/n100.r04.s046.primers.bed\" -p \"n100.r04.s046_output/n100.r04.s046.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s046_output/n100.r04.s046.trimmed.sorted.bam\" \"n100.r04.s046_output/n100.r04.s046.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s046_output/n100.r04.s046.reference.fas\" \"n100.r04.s046_output/n100.r04.s046.trimmed.sorted.bam\" > \"n100.r04.s046_output/n100.r04.s046.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s046_output/n100.r04.s046.reference.fas\" --call-indels \"n100.r04.s046_output/n100.r04.s046.trimmed.sorted.bam\" > \"n100.r04.s046_output/n100.r04.s046.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s046_output/n100.r04.s046.trimmed.sorted.bam\" > \"n100.r04.s046_output/n100.r04.s046.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s046_output/n100.r04.s046.depth.txt\" \"n100.r04.s046_output/n100.r04.s046.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s046_output/n100.r04.s046.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s046_output/n100.r04.s046.reference.fas\" | bcftools consensus -m \"n100.r04.s046_output/n100.r04.s046.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s046_output/n100.r04.s046.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s046_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s046_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s046_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 64524c69 (flow fac60c68): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s042_output\"\n        wget -O \"n100.r04.s042_output/n100.r04.s042.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s042_output/n100.r04.s042.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s042_output/n100.r04.s042.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s042_output/n100.r04.s042.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s042_output/n100.r04.s042.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s042_output/n100.r04.s042.reference.fas\" \"n100.r04.s042_output/n100.r04.s042.fq1.fastq\" \"n100.r04.s042_output/n100.r04.s042.fq2.fastq\" | samtools view -bS - > \"n100.r04.s042_output/n100.r04.s042.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s042_output/n100.r04.s042.untrimmed.sorted.bam\" \"n100.r04.s042_output/n100.r04.s042.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s042_output/n100.r04.s042.untrimmed.sorted.bam\" -b \"n100.r04.s042_output/n100.r04.s042.primers.bed\" -p \"n100.r04.s042_output/n100.r04.s042.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s042_output/n100.r04.s042.trimmed.sorted.bam\" \"n100.r04.s042_output/n100.r04.s042.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s042_output/n100.r04.s042.reference.fas\" \"n100.r04.s042_output/n100.r04.s042.trimmed.sorted.bam\" > \"n100.r04.s042_output/n100.r04.s042.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s042_output/n100.r04.s042.reference.fas\" --call-indels \"n100.r04.s042_output/n100.r04.s042.trimmed.sorted.bam\" > \"n100.r04.s042_output/n100.r04.s042.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s042_output/n100.r04.s042.trimmed.sorted.bam\" > \"n100.r04.s042_output/n100.r04.s042.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s042_output/n100.r04.s042.depth.txt\" \"n100.r04.s042_output/n100.r04.s042.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s042_output/n100.r04.s042.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s042_output/n100.r04.s042.reference.fas\" | bcftools consensus -m \"n100.r04.s042_output/n100.r04.s042.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s042_output/n100.r04.s042.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s042_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s042_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s042_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:50:56 scheduler task 04aa495d (flow 74a2c8b3): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r04.s030_output\"\n        wget -O \"n100.r04.s030_output/n100.r04.s030.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r04.s030_output/n100.r04.s030.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r04.s030_output/n100.r04.s030.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r04.s030_output/n100.r04.s030.fq1.fastq\"\n        cp \"%s\" \"n100.r04.s030_output/n100.r04.s030.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r04.s030_output/n100.r04.s030.reference.fas\" \"n100.r04.s030_output/n100.r04.s030.fq1.fastq\" \"n100.r04.s030_output/n100.r04.s030.fq2.fastq\" | samtools view -bS - > \"n100.r04.s030_output/n100.r04.s030.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s030_output/n100.r04.s030.untrimmed.sorted.bam\" \"n100.r04.s030_output/n100.r04.s030.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r04.s030_output/n100.r04.s030.untrimmed.sorted.bam\" -b \"n100.r04.s030_output/n100.r04.s030.primers.bed\" -p \"n100.r04.s030_output/n100.r04.s030.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r04.s030_output/n100.r04.s030.trimmed.sorted.bam\" \"n100.r04.s030_output/n100.r04.s030.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r04.s030_output/n100.r04.s030.reference.fas\" \"n100.r04.s030_output/n100.r04.s030.trimmed.sorted.bam\" > \"n100.r04.s030_output/n100.r04.s030.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r04.s030_output/n100.r04.s030.reference.fas\" --call-indels \"n100.r04.s030_output/n100.r04.s030.trimmed.sorted.bam\" > \"n100.r04.s030_output/n100.r04.s030.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r04.s030_output/n100.r04.s030.trimmed.sorted.bam\" > \"n100.r04.s030_output/n100.r04.s030.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r04.s030_output/n100.r04.s030.depth.txt\" \"n100.r04.s030_output/n100.r04.s030.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r04.s030_output/n100.r04.s030.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r04.s030_output/n100.r04.s030.reference.fas\" | bcftools consensus -m \"n100.r04.s030_output/n100.r04.s030.low_depth.tsv\" tmp.vcf.gz > \"n100.r04.s030_output/n100.r04.s030.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r04.s030_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r04/n100.r04.s030_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r04/n100.r04.s030_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:51:39 scheduler task 731ed26b (flow 918bce40): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 04aa495d (flow 74a2c8b3): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 64524c69 (flow fac60c68): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task eab1f0b7 (flow 46c93b21): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 36d6e3bf (flow a4dcd123): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 5aa3253c (flow c8481164): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 82963780 (flow 5fa19d0c): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 737c1b6c (flow 39f0abce): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 44230ac9 (flow 1e40e5b1): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task f8b9105e (flow 99c56457): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 15255f8b (flow 47dc9646): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 4b88dfbe (flow 5d1a913d): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 21d2711e (flow a8490785): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 9fa868bc (flow 0bb0e047): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task fd10e005 (flow dd86c476): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 36d6e3bf (flow a4dcd123): loading (try 0): started
2021/07/08 16:51:39 scheduler task fd10e005 (flow dd86c476): loading (try 0): started
2021/07/08 16:51:39 scheduler task fd10e005 (flow dd86c476): loading val<.=s3://niema-test/n100/r04/n100.r04.s021_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 731ed26b (flow 918bce40): loading (try 0): started
2021/07/08 16:51:39 scheduler task 731ed26b (flow 918bce40): loading val<.=s3://niema-test/n100/r04/n100.r04.s055_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task eab1f0b7 (flow 46c93b21): loading (try 0): started
2021/07/08 16:51:39 scheduler task 731ed26b (flow 918bce40): loading val<.=s3://niema-test/n100/r04/n100.r04.s055_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task eab1f0b7 (flow 46c93b21): loading val<.=s3://niema-test/n100/r04/n100.r04.s046_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 84a55080 (flow d93a17b8): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 98623b95 (flow 78adf534): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 15255f8b (flow 47dc9646): loading (try 0): started
2021/07/08 16:51:39 scheduler task 64524c69 (flow fac60c68): loading (try 0): started
2021/07/08 16:51:39 scheduler task 9fa868bc (flow 0bb0e047): loading (try 0): started
2021/07/08 16:51:39 scheduler task 5aa3253c (flow c8481164): loading (try 0): started
2021/07/08 16:51:39 scheduler task 44230ac9 (flow 1e40e5b1): loading (try 0): started
2021/07/08 16:51:39 scheduler task 9fa868bc (flow 0bb0e047): loading val<.=s3://niema-test/n100/r04/n100.r04.s037_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 5aa3253c (flow c8481164): loading val<.=s3://niema-test/n100/r04/n100.r04.s096_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 64524c69 (flow fac60c68): loading val<.=s3://niema-test/n100/r04/n100.r04.s042_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 44230ac9 (flow 1e40e5b1): loading val<.=s3://niema-test/n100/r04/n100.r04.s045_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 98623b95 (flow 78adf534): loading (try 0): started
2021/07/08 16:51:39 scheduler task 44230ac9 (flow 1e40e5b1): loading val<.=s3://niema-test/n100/r04/n100.r04.s045_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 98623b95 (flow 78adf534): loading val<.=s3://niema-test/n100/r04/n100.r04.s041_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 04aa495d (flow 74a2c8b3): loading (try 0): started
2021/07/08 16:51:39 scheduler task 04aa495d (flow 74a2c8b3): loading val<.=s3://niema-test/n100/r04/n100.r04.s030_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task b207b735 (flow 5957e4e6): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 44129759 (flow 5eef48c8): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 8bd46694 (flow e8a2d981): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task f0cd2c6c (flow 499d9909): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task d4a3dec7 (flow 86ee751d): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 81360b45 (flow 5c0f0936): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task ed42d1d8 (flow ec834335): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 85eaed6d (flow 1f720a3c): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 8bd46694 (flow e8a2d981): loading (try 0): started
2021/07/08 16:51:39 scheduler task 85eaed6d (flow 1f720a3c): loading (try 0): started
2021/07/08 16:51:39 scheduler task 8bd46694 (flow e8a2d981): loading val<.=s3://niema-test/n100/r04/n100.r04.s034_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 81360b45 (flow 5c0f0936): loading (try 0): started
2021/07/08 16:51:39 scheduler task 85eaed6d (flow 1f720a3c): loading val<.=s3://niema-test/n100/r04/n100.r04.s024_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task ed42d1d8 (flow ec834335): loading (try 0): started
2021/07/08 16:51:39 scheduler task 36d6e3bf (flow a4dcd123): loading val<.=s3://niema-test/n100/r04/n100.r04.s026_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 81360b45 (flow 5c0f0936): loading val<.=s3://niema-test/n100/r04/n100.r04.s031_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 81360b45 (flow 5c0f0936): loading val<.=s3://niema-test/n100/r04/n100.r04.s031_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task b207b735 (flow 5957e4e6): loading (try 0): started
2021/07/08 16:51:39 scheduler task 36d6e3bf (flow a4dcd123): loading val<.=s3://niema-test/n100/r04/n100.r04.s026_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task b207b735 (flow 5957e4e6): loading val<.=s3://niema-test/n100/r04/n100.r04.s028_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task ed42d1d8 (flow ec834335): loading val<.=s3://niema-test/n100/r04/n100.r04.s025_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 737c1b6c (flow 39f0abce): loading (try 0): started
2021/07/08 16:51:39 scheduler task b207b735 (flow 5957e4e6): loading val<.=s3://niema-test/n100/r04/n100.r04.s028_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 737c1b6c (flow 39f0abce): loading val<.=s3://niema-test/n100/r04/n100.r04.s039_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 8ef79677 (flow e14892e7): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 737c1b6c (flow 39f0abce): loading val<.=s3://niema-test/n100/r04/n100.r04.s039_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 8ef79677 (flow e14892e7): loading (try 0): started
2021/07/08 16:51:39 scheduler task 8ef79677 (flow e14892e7): loading val<.=s3://niema-test/n100/r04/n100.r04.s078_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 8ef79677 (flow e14892e7): loading val<.=s3://niema-test/n100/r04/n100.r04.s078_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task a322da77 (flow 70dfd3f3): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 3bb8f0e4 (flow a324358a): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 7ab39a0f (flow 017350a1): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 15255f8b (flow 47dc9646): loading val<.=s3://niema-test/n100/r04/n100.r04.s029_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 7ab39a0f (flow 017350a1): loading (try 0): started
2021/07/08 16:51:39 scheduler task 84a55080 (flow d93a17b8): loading (try 0): started
2021/07/08 16:51:39 scheduler task 7ab39a0f (flow 017350a1): loading val<.=s3://niema-test/n100/r04/n100.r04.s027_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task a322da77 (flow 70dfd3f3): loading (try 0): started
2021/07/08 16:51:39 scheduler task a322da77 (flow 70dfd3f3): loading val<.=s3://niema-test/n100/r04/n100.r04.s091_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 3bb8f0e4 (flow a324358a): loading (try 0): started
2021/07/08 16:51:39 scheduler task 3bb8f0e4 (flow a324358a): loading val<.=s3://niema-test/n100/r04/n100.r04.s038_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 4b88dfbe (flow 5d1a913d): loading (try 0): started
2021/07/08 16:51:39 scheduler task 82963780 (flow 5fa19d0c): loading (try 0): started
2021/07/08 16:51:39 scheduler task 64524c69 (flow fac60c68): loading val<.=s3://niema-test/n100/r04/n100.r04.s042_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task f8b9105e (flow 99c56457): loading (try 0): started
2021/07/08 16:51:39 scheduler task 15255f8b (flow 47dc9646): loading val<.=s3://niema-test/n100/r04/n100.r04.s029_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task fd10e005 (flow dd86c476): loading val<.=s3://niema-test/n100/r04/n100.r04.s021_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 5aa3253c (flow c8481164): loading val<.=s3://niema-test/n100/r04/n100.r04.s096_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 21d2711e (flow a8490785): loading (try 0): started
2021/07/08 16:51:39 scheduler task 9fa868bc (flow 0bb0e047): loading val<.=s3://niema-test/n100/r04/n100.r04.s037_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 98623b95 (flow 78adf534): loading val<.=s3://niema-test/n100/r04/n100.r04.s041_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task f0cd2c6c (flow 499d9909): loading (try 0): started
2021/07/08 16:51:39 scheduler task 04aa495d (flow 74a2c8b3): loading val<.=s3://niema-test/n100/r04/n100.r04.s030_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 44129759 (flow 5eef48c8): loading (try 0): started
2021/07/08 16:51:39 scheduler task d4a3dec7 (flow 86ee751d): loading (try 0): started
2021/07/08 16:51:39 scheduler task 8bd46694 (flow e8a2d981): loading val<.=s3://niema-test/n100/r04/n100.r04.s034_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task ed42d1d8 (flow ec834335): loading val<.=s3://niema-test/n100/r04/n100.r04.s025_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 85eaed6d (flow 1f720a3c): loading val<.=s3://niema-test/n100/r04/n100.r04.s024_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task eab1f0b7 (flow 46c93b21): loading val<.=s3://niema-test/n100/r04/n100.r04.s046_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 1630f0a4 (flow f5f175a1): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 7ab39a0f (flow 017350a1): loading val<.=s3://niema-test/n100/r04/n100.r04.s027_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task a322da77 (flow 70dfd3f3): loading val<.=s3://niema-test/n100/r04/n100.r04.s091_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 3bb8f0e4 (flow a324358a): loading val<.=s3://niema-test/n100/r04/n100.r04.s038_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 84a55080 (flow d93a17b8): loading val<.=s3://niema-test/n100/r04/n100.r04.s049_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 84a55080 (flow d93a17b8): loading val<.=s3://niema-test/n100/r04/n100.r04.s049_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 4b88dfbe (flow 5d1a913d): loading val<.=s3://niema-test/n100/r04/n100.r04.s022_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 4b88dfbe (flow 5d1a913d): loading val<.=s3://niema-test/n100/r04/n100.r04.s022_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 82963780 (flow 5fa19d0c): loading val<.=s3://niema-test/n100/r04/n100.r04.s098_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 82963780 (flow 5fa19d0c): loading val<.=s3://niema-test/n100/r04/n100.r04.s098_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task f8b9105e (flow 99c56457): loading val<.=s3://niema-test/n100/r04/n100.r04.s048_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task f8b9105e (flow 99c56457): loading val<.=s3://niema-test/n100/r04/n100.r04.s048_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 21d2711e (flow a8490785): loading val<.=s3://niema-test/n100/r04/n100.r04.s094_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 21d2711e (flow a8490785): loading val<.=s3://niema-test/n100/r04/n100.r04.s094_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task f0cd2c6c (flow 499d9909): loading val<.=s3://niema-test/n100/r04/n100.r04.s043_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 44129759 (flow 5eef48c8): loading val<.=s3://niema-test/n100/r04/n100.r04.s035_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task f0cd2c6c (flow 499d9909): loading val<.=s3://niema-test/n100/r04/n100.r04.s043_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task d4a3dec7 (flow 86ee751d): loading val<.=s3://niema-test/n100/r04/n100.r04.s044_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 44129759 (flow 5eef48c8): loading val<.=s3://niema-test/n100/r04/n100.r04.s035_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task cbcd17ff (flow 42a8a7f6): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 8f237035 (flow 7731292a): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 1e419403 (flow 9b73f7e9): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 176e8b91 (flow 0d7bf897): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 4bae0b4d (flow 98c409bc): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 8044c66f (flow 6f63202d): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 0c8baa7d (flow ff8a339b): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task aee028ec (flow 0f5f6f8e): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 11856ee1 (flow 9941c680): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 04101a49 (flow 2d151cd2): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task c9e9d6bb (flow 763a3244): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task df28c1ac (flow b17ff5c7): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 4f52560f (flow c39d6831): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task a818b8e8 (flow 1ca35c84): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task b4a5ccae (flow 6bc2ef0b): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 8a9bceb1 (flow 27523267): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task ad27dd97 (flow 57f67a1d): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 3e5b10bd (flow 6f981d52): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 26683aa0 (flow fc9dabef): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 3cad6a0b (flow f32e0466): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task c3b5748c (flow c441a068): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 4416f8fe (flow ac3a0076): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task f1849b51 (flow ff5069df): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task faa7be58 (flow 5f9e75c1): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task ad833c50 (flow e08e8afe): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 41aa6205 (flow 2f22143a): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task df28c1ac (flow b17ff5c7): loading (try 0): started
2021/07/08 16:51:39 scheduler task 41aa6205 (flow 2f22143a): loading (try 0): started
2021/07/08 16:51:39 scheduler task cbcd17ff (flow 42a8a7f6): loading (try 0): started
2021/07/08 16:51:39 scheduler task 41aa6205 (flow 2f22143a): loading val<.=s3://niema-test/n100/r04/n100.r04.s099_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 8f237035 (flow 7731292a): loading (try 0): started
2021/07/08 16:51:39 scheduler task 8f237035 (flow 7731292a): loading val<.=s3://niema-test/n100/r04/n100.r04.s095_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 4f52560f (flow c39d6831): loading (try 0): started
2021/07/08 16:51:39 scheduler task 4f52560f (flow c39d6831): loading val<.=s3://niema-test/n100/r04/n100.r04.s076_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task c3b5748c (flow c441a068): loading (try 0): started
2021/07/08 16:51:39 scheduler task 8044c66f (flow 6f63202d): loading (try 0): started
2021/07/08 16:51:39 scheduler task aee028ec (flow 0f5f6f8e): loading (try 0): started
2021/07/08 16:51:39 scheduler task 8044c66f (flow 6f63202d): loading val<.=s3://niema-test/n100/r04/n100.r04.s089_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task aee028ec (flow 0f5f6f8e): loading val<.=s3://niema-test/n100/r04/n100.r04.s016_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 41aa6205 (flow 2f22143a): loading val<.=s3://niema-test/n100/r04/n100.r04.s099_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task ad27dd97 (flow 57f67a1d): loading (try 0): started
2021/07/08 16:51:39 scheduler task cbcd17ff (flow 42a8a7f6): loading val<.=s3://niema-test/n100/r04/n100.r04.s093_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task ad27dd97 (flow 57f67a1d): loading val<.=s3://niema-test/n100/r04/n100.r04.s006_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 04101a49 (flow 2d151cd2): loading (try 0): started
2021/07/08 16:51:39 scheduler task d4a3dec7 (flow 86ee751d): loading val<.=s3://niema-test/n100/r04/n100.r04.s044_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task df28c1ac (flow b17ff5c7): loading val<.=s3://niema-test/n100/r04/n100.r04.s017_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task a818b8e8 (flow 1ca35c84): loading (try 0): started
2021/07/08 16:51:39 scheduler task a818b8e8 (flow 1ca35c84): loading val<.=s3://niema-test/n100/r04/n100.r04.s011_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task c8f7947e (flow a052354a): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task b4a5ccae (flow 6bc2ef0b): loading (try 0): started
2021/07/08 16:51:39 scheduler task c8f7947e (flow a052354a): loading (try 0): started
2021/07/08 16:51:39 scheduler task b4a5ccae (flow 6bc2ef0b): loading val<.=s3://niema-test/n100/r04/n100.r04.s072_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task c8f7947e (flow a052354a): loading val<.=s3://niema-test/n100/r04/n100.r04.s040_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task b4a5ccae (flow 6bc2ef0b): loading val<.=s3://niema-test/n100/r04/n100.r04.s072_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 1e419403 (flow 9b73f7e9): loading (try 0): started
2021/07/08 16:51:39 scheduler task 1e419403 (flow 9b73f7e9): loading val<.=s3://niema-test/n100/r04/n100.r04.s088_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task c8f7947e (flow a052354a): loading val<.=s3://niema-test/n100/r04/n100.r04.s040_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 1e419403 (flow 9b73f7e9): loading val<.=s3://niema-test/n100/r04/n100.r04.s088_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task c3b5748c (flow c441a068): loading val<.=s3://niema-test/n100/r04/n100.r04.s009_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 3cad6a0b (flow f32e0466): loading (try 0): started
2021/07/08 16:51:39 scheduler task 3cad6a0b (flow f32e0466): loading val<.=s3://niema-test/n100/r04/n100.r04.s005_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 4bae0b4d (flow 98c409bc): loading (try 0): started
2021/07/08 16:51:39 scheduler task 4bae0b4d (flow 98c409bc): loading val<.=s3://niema-test/n100/r04/n100.r04.s090_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 3cad6a0b (flow f32e0466): loading val<.=s3://niema-test/n100/r04/n100.r04.s005_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 4bae0b4d (flow 98c409bc): loading val<.=s3://niema-test/n100/r04/n100.r04.s090_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task df28c1ac (flow b17ff5c7): loading val<.=s3://niema-test/n100/r04/n100.r04.s017_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 0c8baa7d (flow ff8a339b): loading (try 0): started
2021/07/08 16:51:39 scheduler task 0c8baa7d (flow ff8a339b): loading val<.=s3://niema-test/n100/r04/n100.r04.s020_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 4416f8fe (flow ac3a0076): loading (try 0): started
2021/07/08 16:51:39 scheduler task 0c8baa7d (flow ff8a339b): loading val<.=s3://niema-test/n100/r04/n100.r04.s020_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 4416f8fe (flow ac3a0076): loading val<.=s3://niema-test/n100/r04/n100.r04.s003_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 4416f8fe (flow ac3a0076): loading val<.=s3://niema-test/n100/r04/n100.r04.s003_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task faa7be58 (flow 5f9e75c1): loading (try 0): started
2021/07/08 16:51:39 scheduler task faa7be58 (flow 5f9e75c1): loading val<.=s3://niema-test/n100/r04/n100.r04.s100_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 8a9bceb1 (flow 27523267): loading (try 0): started
2021/07/08 16:51:39 scheduler task 8a9bceb1 (flow 27523267): loading val<.=s3://niema-test/n100/r04/n100.r04.s012_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task faa7be58 (flow 5f9e75c1): loading val<.=s3://niema-test/n100/r04/n100.r04.s100_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task ad833c50 (flow e08e8afe): loading (try 0): started
2021/07/08 16:51:39 scheduler task 8a9bceb1 (flow 27523267): loading val<.=s3://niema-test/n100/r04/n100.r04.s012_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task ad833c50 (flow e08e8afe): loading val<.=s3://niema-test/n100/r04/n100.r04.s015_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 11856ee1 (flow 9941c680): loading (try 0): started
2021/07/08 16:51:39 scheduler task 11856ee1 (flow 9941c680): loading val<.=s3://niema-test/n100/r04/n100.r04.s019_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task ad833c50 (flow e08e8afe): loading val<.=s3://niema-test/n100/r04/n100.r04.s015_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task cbcd17ff (flow 42a8a7f6): loading val<.=s3://niema-test/n100/r04/n100.r04.s093_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 11856ee1 (flow 9941c680): loading val<.=s3://niema-test/n100/r04/n100.r04.s019_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 176e8b91 (flow 0d7bf897): loading (try 0): started
2021/07/08 16:51:39 scheduler task 176e8b91 (flow 0d7bf897): loading val<.=s3://niema-test/n100/r04/n100.r04.s018_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 8f237035 (flow 7731292a): loading val<.=s3://niema-test/n100/r04/n100.r04.s095_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 176e8b91 (flow 0d7bf897): loading val<.=s3://niema-test/n100/r04/n100.r04.s018_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 04101a49 (flow 2d151cd2): loading val<.=s3://niema-test/n100/r04/n100.r04.s013_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 3e5b10bd (flow 6f981d52): loading (try 0): started
2021/07/08 16:51:39 scheduler task 3e5b10bd (flow 6f981d52): loading val<.=s3://niema-test/n100/r04/n100.r04.s087_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task c3b5748c (flow c441a068): loading val<.=s3://niema-test/n100/r04/n100.r04.s009_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 3e5b10bd (flow 6f981d52): loading val<.=s3://niema-test/n100/r04/n100.r04.s087_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task aee028ec (flow 0f5f6f8e): loading val<.=s3://niema-test/n100/r04/n100.r04.s016_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 8044c66f (flow 6f63202d): loading val<.=s3://niema-test/n100/r04/n100.r04.s089_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task c9e9d6bb (flow 763a3244): loading (try 0): started
2021/07/08 16:51:39 scheduler task 4f52560f (flow c39d6831): loading val<.=s3://niema-test/n100/r04/n100.r04.s076_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task c9e9d6bb (flow 763a3244): loading val<.=s3://niema-test/n100/r04/n100.r04.s068_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 04101a49 (flow 2d151cd2): loading val<.=s3://niema-test/n100/r04/n100.r04.s013_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task ad27dd97 (flow 57f67a1d): loading val<.=s3://niema-test/n100/r04/n100.r04.s006_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task a818b8e8 (flow 1ca35c84): loading val<.=s3://niema-test/n100/r04/n100.r04.s011_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 5bbe9c3d (flow 5f50c423): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 54f6f6fd (flow c54bfbbc): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 0d09bc33 (flow 8f555b2a): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 5cd20acf (flow 77d99fec): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 32101954 (flow f9878803): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 5a8a7584 (flow 749eedd5): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task ecbdae4e (flow ea7c1d46): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task a9de6e84 (flow 38bba01c): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 7ed73c0a (flow 610b915e): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task da5603da (flow f97f1e63): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 5bff4606 (flow 9474069c): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 8746c175 (flow e75028fb): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task eee3329a (flow 7d1757b7): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 9181ecd7 (flow cfd8c852): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 7a4dfaa4 (flow 47beba72): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task d21168f4 (flow fb8de0c9): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task f2ec5fa9 (flow 460aa300): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task b8eef7a3 (flow 7fe68b7b): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task fc3e1467 (flow 1d35c114): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 9a663e4e (flow 2d3488e5): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task e8d5592b (flow 7b4e38f2): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 5aa4bfc6 (flow e7565ce6): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task e7c3fad1 (flow 73faee38): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 5da77f67 (flow 71f05c8c): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 5e492d41 (flow ac9e3373): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task de374a3f (flow c4d8efb1): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 331a85cb (flow e0813834): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 7709a29e (flow 20e26740): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 29c9d867 (flow 0f009068): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task f7f2648e (flow 062361bd): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 15151169 (flow a6da6753): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task eee3329a (flow 7d1757b7): loading (try 0): started
2021/07/08 16:51:39 scheduler task 15151169 (flow a6da6753): loading (try 0): started
2021/07/08 16:51:39 scheduler task 15151169 (flow a6da6753): loading val<.=s3://niema-test/n100/r04/n100.r04.s079_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 5bbe9c3d (flow 5f50c423): loading (try 0): started
2021/07/08 16:51:39 scheduler task 7a4dfaa4 (flow 47beba72): loading (try 0): started
2021/07/08 16:51:39 scheduler task 5bff4606 (flow 9474069c): loading (try 0): started
2021/07/08 16:51:39 scheduler task da5603da (flow f97f1e63): loading (try 0): started
2021/07/08 16:51:39 scheduler task d21168f4 (flow fb8de0c9): loading (try 0): started
2021/07/08 16:51:39 scheduler task 15151169 (flow a6da6753): loading val<.=s3://niema-test/n100/r04/n100.r04.s079_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task da5603da (flow f97f1e63): loading val<.=s3://niema-test/n100/r04/n100.r04.s074_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 5aa4bfc6 (flow e7565ce6): loading (try 0): started
2021/07/08 16:51:39 scheduler task f2ec5fa9 (flow 460aa300): loading (try 0): started
2021/07/08 16:51:39 scheduler task 5bff4606 (flow 9474069c): loading val<.=s3://niema-test/n100/r04/n100.r04.s073_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 5cd20acf (flow 77d99fec): loading (try 0): started
2021/07/08 16:51:39 scheduler task 5a8a7584 (flow 749eedd5): loading (try 0): started
2021/07/08 16:51:39 scheduler task 7ed73c0a (flow 610b915e): loading (try 0): started
2021/07/08 16:51:39 scheduler task 5cd20acf (flow 77d99fec): loading val<.=s3://niema-test/n100/r04/n100.r04.s010_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 5a8a7584 (flow 749eedd5): loading val<.=s3://niema-test/n100/r04/n100.r04.s032_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 7ed73c0a (flow 610b915e): loading val<.=s3://niema-test/n100/r04/n100.r04.s077_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task b8eef7a3 (flow 7fe68b7b): loading (try 0): started
2021/07/08 16:51:39 scheduler task b8eef7a3 (flow 7fe68b7b): loading val<.=s3://niema-test/n100/r04/n100.r04.s082_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task e7c3fad1 (flow 73faee38): loading (try 0): started
2021/07/08 16:51:39 scheduler task e7c3fad1 (flow 73faee38): loading val<.=s3://niema-test/n100/r04/n100.r04.s002_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task b8eef7a3 (flow 7fe68b7b): loading val<.=s3://niema-test/n100/r04/n100.r04.s082_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task eee3329a (flow 7d1757b7): loading val<.=s3://niema-test/n100/r04/n100.r04.s069_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task e7c3fad1 (flow 73faee38): loading val<.=s3://niema-test/n100/r04/n100.r04.s002_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task ecbdae4e (flow ea7c1d46): loading (try 0): started
2021/07/08 16:51:39 scheduler task ecbdae4e (flow ea7c1d46): loading val<.=s3://niema-test/n100/r04/n100.r04.s058_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task eee3329a (flow 7d1757b7): loading val<.=s3://niema-test/n100/r04/n100.r04.s069_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task ecbdae4e (flow ea7c1d46): loading val<.=s3://niema-test/n100/r04/n100.r04.s058_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 50845845 (flow cc504ab7): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task ce0306d2 (flow f3a54b9e): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 0956178b (flow 5468f4a3): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 3447498f (flow 193dd149): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task b838e67f (flow f8ffa904): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 5337d60f (flow 1381d801): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 5947e81d (flow 57e39d90): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task d243ea7f (flow f880a376): assigning to alloc ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:51:39 scheduler task 5bbe9c3d (flow 5f50c423): loading val<.=s3://niema-test/n100/r04/n100.r04.s060_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 50845845 (flow cc504ab7): loading (try 0): started
2021/07/08 16:51:39 scheduler task 50845845 (flow cc504ab7): loading val<.=s3://niema-test/n100/r04/n100.r04.s062_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task ce0306d2 (flow f3a54b9e): loading (try 0): started
2021/07/08 16:51:39 scheduler task ce0306d2 (flow f3a54b9e): loading val<.=s3://niema-test/n100/r04/n100.r04.s084_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 0956178b (flow 5468f4a3): loading (try 0): started
2021/07/08 16:51:39 scheduler task 0956178b (flow 5468f4a3): loading val<.=s3://niema-test/n100/r04/n100.r04.s014_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 3447498f (flow 193dd149): loading (try 0): started
2021/07/08 16:51:39 scheduler task 3447498f (flow 193dd149): loading val<.=s3://niema-test/n100/r04/n100.r04.s023_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task b838e67f (flow f8ffa904): loading (try 0): started
2021/07/08 16:51:39 scheduler task b838e67f (flow f8ffa904): loading val<.=s3://niema-test/n100/r04/n100.r04.s065_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 5337d60f (flow 1381d801): loading (try 0): started
2021/07/08 16:51:39 scheduler task 5337d60f (flow 1381d801): loading val<.=s3://niema-test/n100/r04/n100.r04.s097_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 5947e81d (flow 57e39d90): loading (try 0): started
2021/07/08 16:51:39 scheduler task 5947e81d (flow 57e39d90): loading val<.=s3://niema-test/n100/r04/n100.r04.s083_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task d243ea7f (flow f880a376): loading (try 0): started
2021/07/08 16:51:39 scheduler task d243ea7f (flow f880a376): loading val<.=s3://niema-test/n100/r04/n100.r04.s056_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 3447498f (flow 193dd149): loading val<.=s3://niema-test/n100/r04/n100.r04.s023_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task b838e67f (flow f8ffa904): loading val<.=s3://niema-test/n100/r04/n100.r04.s065_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 5337d60f (flow 1381d801): loading val<.=s3://niema-test/n100/r04/n100.r04.s097_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task ce0306d2 (flow f3a54b9e): loading val<.=s3://niema-test/n100/r04/n100.r04.s084_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 0956178b (flow 5468f4a3): loading val<.=s3://niema-test/n100/r04/n100.r04.s014_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 9a663e4e (flow 2d3488e5): loading (try 0): started
2021/07/08 16:51:39 scheduler task 50845845 (flow cc504ab7): loading val<.=s3://niema-test/n100/r04/n100.r04.s062_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 9a663e4e (flow 2d3488e5): loading val<.=s3://niema-test/n100/r04/n100.r04.s053_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 5947e81d (flow 57e39d90): loading val<.=s3://niema-test/n100/r04/n100.r04.s083_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task c9e9d6bb (flow 763a3244): loading val<.=s3://niema-test/n100/r04/n100.r04.s068_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 1630f0a4 (flow f5f175a1): loading (try 0): started
2021/07/08 16:51:39 scheduler task 1630f0a4 (flow f5f175a1): loading val<.=s3://niema-test/n100/r04/n100.r04.s047_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 9181ecd7 (flow cfd8c852): loading (try 0): started
2021/07/08 16:51:39 scheduler task 9181ecd7 (flow cfd8c852): loading val<.=s3://niema-test/n100/r04/n100.r04.s086_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 1630f0a4 (flow f5f175a1): loading val<.=s3://niema-test/n100/r04/n100.r04.s047_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 5e492d41 (flow ac9e3373): loading (try 0): started
2021/07/08 16:51:39 scheduler task 5e492d41 (flow ac9e3373): loading val<.=s3://niema-test/n100/r04/n100.r04.s050_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 9181ecd7 (flow cfd8c852): loading val<.=s3://niema-test/n100/r04/n100.r04.s086_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 7a4dfaa4 (flow 47beba72): loading val<.=s3://niema-test/n100/r04/n100.r04.s085_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 5e492d41 (flow ac9e3373): loading val<.=s3://niema-test/n100/r04/n100.r04.s050_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task fc3e1467 (flow 1d35c114): loading (try 0): started
2021/07/08 16:51:39 scheduler task fc3e1467 (flow 1d35c114): loading val<.=s3://niema-test/n100/r04/n100.r04.s057_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 5bff4606 (flow 9474069c): loading val<.=s3://niema-test/n100/r04/n100.r04.s073_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task f7f2648e (flow 062361bd): loading (try 0): started
2021/07/08 16:51:39 scheduler task f7f2648e (flow 062361bd): loading val<.=s3://niema-test/n100/r04/n100.r04.s071_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 29c9d867 (flow 0f009068): loading (try 0): started
2021/07/08 16:51:39 scheduler task 29c9d867 (flow 0f009068): loading val<.=s3://niema-test/n100/r04/n100.r04.s081_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task f7f2648e (flow 062361bd): loading val<.=s3://niema-test/n100/r04/n100.r04.s071_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 8746c175 (flow e75028fb): loading (try 0): started
2021/07/08 16:51:39 scheduler task 8746c175 (flow e75028fb): loading val<.=s3://niema-test/n100/r04/n100.r04.s001_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 29c9d867 (flow 0f009068): loading val<.=s3://niema-test/n100/r04/n100.r04.s081_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task de374a3f (flow c4d8efb1): loading (try 0): started
2021/07/08 16:51:39 scheduler task de374a3f (flow c4d8efb1): loading val<.=s3://niema-test/n100/r04/n100.r04.s059_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 8746c175 (flow e75028fb): loading val<.=s3://niema-test/n100/r04/n100.r04.s001_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 7a4dfaa4 (flow 47beba72): loading val<.=s3://niema-test/n100/r04/n100.r04.s085_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task de374a3f (flow c4d8efb1): loading val<.=s3://niema-test/n100/r04/n100.r04.s059_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task e8d5592b (flow 7b4e38f2): loading (try 0): started
2021/07/08 16:51:39 scheduler task e8d5592b (flow 7b4e38f2): loading val<.=s3://niema-test/n100/r04/n100.r04.s064_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task d21168f4 (flow fb8de0c9): loading val<.=s3://niema-test/n100/r04/n100.r04.s051_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task e8d5592b (flow 7b4e38f2): loading val<.=s3://niema-test/n100/r04/n100.r04.s064_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 331a85cb (flow e0813834): loading (try 0): started
2021/07/08 16:51:39 scheduler task 331a85cb (flow e0813834): loading val<.=s3://niema-test/n100/r04/n100.r04.s067_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 5bbe9c3d (flow 5f50c423): loading val<.=s3://niema-test/n100/r04/n100.r04.s060_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 331a85cb (flow e0813834): loading val<.=s3://niema-test/n100/r04/n100.r04.s067_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 7709a29e (flow 20e26740): loading (try 0): started
2021/07/08 16:51:39 scheduler task 5da77f67 (flow 71f05c8c): loading (try 0): started
2021/07/08 16:51:39 scheduler task 5da77f67 (flow 71f05c8c): loading val<.=s3://niema-test/n100/r04/n100.r04.s063_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task f1849b51 (flow ff5069df): loading (try 0): started
2021/07/08 16:51:39 scheduler task 5da77f67 (flow 71f05c8c): loading val<.=s3://niema-test/n100/r04/n100.r04.s063_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task f1849b51 (flow ff5069df): loading val<.=s3://niema-test/n100/r04/n100.r04.s070_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 54f6f6fd (flow c54bfbbc): loading (try 0): started
2021/07/08 16:51:39 scheduler task 26683aa0 (flow fc9dabef): loading (try 0): started
2021/07/08 16:51:39 scheduler task 32101954 (flow f9878803): loading (try 0): started
2021/07/08 16:51:39 scheduler task 5aa4bfc6 (flow e7565ce6): loading val<.=s3://niema-test/n100/r04/n100.r04.s054_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 0d09bc33 (flow 8f555b2a): loading (try 0): started
2021/07/08 16:51:39 scheduler task f2ec5fa9 (flow 460aa300): loading val<.=s3://niema-test/n100/r04/n100.r04.s052_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task a9de6e84 (flow 38bba01c): loading (try 0): started
2021/07/08 16:51:39 scheduler task d21168f4 (flow fb8de0c9): loading val<.=s3://niema-test/n100/r04/n100.r04.s051_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 5aa4bfc6 (flow e7565ce6): loading val<.=s3://niema-test/n100/r04/n100.r04.s054_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task da5603da (flow f97f1e63): loading val<.=s3://niema-test/n100/r04/n100.r04.s074_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task f2ec5fa9 (flow 460aa300): loading val<.=s3://niema-test/n100/r04/n100.r04.s052_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 5cd20acf (flow 77d99fec): loading val<.=s3://niema-test/n100/r04/n100.r04.s010_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 5a8a7584 (flow 749eedd5): loading val<.=s3://niema-test/n100/r04/n100.r04.s032_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 7ed73c0a (flow 610b915e): loading val<.=s3://niema-test/n100/r04/n100.r04.s077_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task d243ea7f (flow f880a376): loading val<.=s3://niema-test/n100/r04/n100.r04.s056_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 9a663e4e (flow 2d3488e5): loading val<.=s3://niema-test/n100/r04/n100.r04.s053_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task fc3e1467 (flow 1d35c114): loading val<.=s3://niema-test/n100/r04/n100.r04.s057_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 7709a29e (flow 20e26740): loading val<.=s3://niema-test/n100/r04/n100.r04.s080_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 7709a29e (flow 20e26740): loading val<.=s3://niema-test/n100/r04/n100.r04.s080_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task f1849b51 (flow ff5069df): loading val<.=s3://niema-test/n100/r04/n100.r04.s070_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 54f6f6fd (flow c54bfbbc): loading val<.=s3://niema-test/n100/r04/n100.r04.s092_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 26683aa0 (flow fc9dabef): loading val<.=s3://niema-test/n100/r04/n100.r04.s004_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 54f6f6fd (flow c54bfbbc): loading val<.=s3://niema-test/n100/r04/n100.r04.s092_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 32101954 (flow f9878803): loading val<.=s3://niema-test/n100/r04/n100.r04.s008_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 26683aa0 (flow fc9dabef): loading val<.=s3://niema-test/n100/r04/n100.r04.s004_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 32101954 (flow f9878803): loading val<.=s3://niema-test/n100/r04/n100.r04.s008_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 0d09bc33 (flow 8f555b2a): loading val<.=s3://niema-test/n100/r04/n100.r04.s075_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task 0d09bc33 (flow 8f555b2a): loading val<.=s3://niema-test/n100/r04/n100.r04.s075_R1.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task a9de6e84 (flow 38bba01c): loading val<.=s3://niema-test/n100/r04/n100.r04.s033_R2.fastq 35.4MiB>
2021/07/08 16:51:39 scheduler task a9de6e84 (flow 38bba01c): loading val<.=s3://niema-test/n100/r04/n100.r04.s033_R1.fastq 35.4MiB>
2021/07/08 16:51:40 scheduler task 32f45316 (flow 14b3f0cc): assigning to alloc ec2-18-220-243-38.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 16:51:40 scheduler task 1afbafec (flow 44babb34): assigning to alloc ec2-18-220-243-38.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 16:51:40 scheduler task 1e424faf (flow 8b4daa08): assigning to alloc ec2-18-220-243-38.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 16:51:40 scheduler task 8a52bfdb (flow 5bd33203): assigning to alloc ec2-18-220-243-38.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 16:51:40 scheduler task 8a52bfdb (flow 5bd33203): loading (try 0): started
2021/07/08 16:51:40 scheduler task 8a52bfdb (flow 5bd33203): loading val<.=s3://niema-test/n100/r04/n100.r04.s066_R2.fastq 35.4MiB>
2021/07/08 16:51:40 scheduler task 32f45316 (flow 14b3f0cc): loading (try 0): started
2021/07/08 16:51:40 scheduler task 32f45316 (flow 14b3f0cc): loading val<.=s3://niema-test/n100/r04/n100.r04.s007_R2.fastq 35.4MiB>
2021/07/08 16:51:40 scheduler task 1afbafec (flow 44babb34): loading (try 0): started
2021/07/08 16:51:40 scheduler task 1afbafec (flow 44babb34): loading val<.=s3://niema-test/n100/r04/n100.r04.s061_R2.fastq 35.4MiB>
2021/07/08 16:51:40 scheduler task 32f45316 (flow 14b3f0cc): loading val<.=s3://niema-test/n100/r04/n100.r04.s007_R1.fastq 35.4MiB>
2021/07/08 16:51:40 scheduler task 1afbafec (flow 44babb34): loading val<.=s3://niema-test/n100/r04/n100.r04.s061_R1.fastq 35.4MiB>
2021/07/08 16:51:40 scheduler task 1e424faf (flow 8b4daa08): loading (try 0): started
2021/07/08 16:51:40 scheduler task 1e424faf (flow 8b4daa08): loading val<.=s3://niema-test/n100/r04/n100.r04.s036_R2.fastq 35.4MiB>
2021/07/08 16:51:40 scheduler task 8a52bfdb (flow 5bd33203): loading val<.=s3://niema-test/n100/r04/n100.r04.s066_R1.fastq 35.4MiB>
2021/07/08 16:51:40 scheduler task 1e424faf (flow 8b4daa08): loading val<.=s3://niema-test/n100/r04/n100.r04.s036_R1.fastq 35.4MiB>
2021/07/08 16:51:40 scheduler task 5aa3253c (flow c8481164): loaded val<.=2b7b9f4f 35.4MiB>
2021/07/08 16:51:40 scheduler task 731ed26b (flow 918bce40): loaded val<.=57316d4a 35.4MiB>
2021/07/08 16:51:40 scheduler task 44230ac9 (flow 1e40e5b1): loaded val<.=f06c42fc 35.4MiB>
2021/07/08 16:51:40 scheduler task 98623b95 (flow 78adf534): loaded val<.=075d7503 35.4MiB>
2021/07/08 16:51:40 scheduler task fd10e005 (flow dd86c476): loaded val<.=e8265380 35.4MiB>
2021/07/08 16:51:40 scheduler task eab1f0b7 (flow 46c93b21): loaded val<.=c6e1147f 35.4MiB>
2021/07/08 16:51:40 scheduler task 737c1b6c (flow 39f0abce): loaded val<.=33805fdd 35.4MiB>
2021/07/08 16:51:40 scheduler task 04aa495d (flow 74a2c8b3): loaded val<.=43847d09 35.4MiB>
2021/07/08 16:51:40 scheduler task eab1f0b7 (flow 46c93b21): loaded val<.=ee425227 35.4MiB>
2021/07/08 16:51:40 scheduler task eab1f0b7 (flow 46c93b21): loading (try 0): successful, next state: submitting
2021/07/08 16:51:40 scheduler task eab1f0b7 (flow 46c93b21): submitting (try 0): started
2021/07/08 16:51:40 scheduler task aee028ec (flow 0f5f6f8e): loaded val<.=02ba4866 35.4MiB>
2021/07/08 16:51:40 scheduler task 36d6e3bf (flow a4dcd123): loaded val<.=61b94c48 35.4MiB>
2021/07/08 16:51:40 scheduler task f8b9105e (flow 99c56457): loaded val<.=ed82aa98 35.4MiB>
2021/07/08 16:51:40 scheduler task df28c1ac (flow b17ff5c7): loaded val<.=ef464e1f 35.4MiB>
2021/07/08 16:51:40 scheduler task b207b735 (flow 5957e4e6): loaded val<.=9da0fa6d 35.4MiB>
2021/07/08 16:51:40 scheduler task 64524c69 (flow fac60c68): loaded val<.=2fd0f796 35.4MiB>
2021/07/08 16:51:40 scheduler task 8ef79677 (flow e14892e7): loaded val<.=11e2b815 35.4MiB>
2021/07/08 16:51:40 scheduler task 81360b45 (flow 5c0f0936): loaded val<.=cd3c1b8f 35.4MiB>
2021/07/08 16:51:40 scheduler task 731ed26b (flow 918bce40): loaded val<.=bfb926d3 35.4MiB>
2021/07/08 16:51:40 scheduler task 731ed26b (flow 918bce40): loading (try 0): successful, next state: submitting
2021/07/08 16:51:40 scheduler task 7ab39a0f (flow 017350a1): loaded val<.=5b05f781 35.4MiB>
2021/07/08 16:51:40 scheduler task 9fa868bc (flow 0bb0e047): loaded val<.=43e08090 35.4MiB>
2021/07/08 16:51:40 scheduler task d4a3dec7 (flow 86ee751d): loaded val<.=c1166807 35.4MiB>
2021/07/08 16:51:40 scheduler task 731ed26b (flow 918bce40): submitting (try 0): started
2021/07/08 16:51:40 scheduler task 15255f8b (flow 47dc9646): loaded val<.=a9e50ce4 35.4MiB>
2021/07/08 16:51:40 scheduler task 04aa495d (flow 74a2c8b3): loaded val<.=5bd7b30a 35.4MiB>
2021/07/08 16:51:40 scheduler task 04aa495d (flow 74a2c8b3): loading (try 0): successful, next state: submitting
2021/07/08 16:51:40 scheduler task 04aa495d (flow 74a2c8b3): submitting (try 0): started
2021/07/08 16:51:40 scheduler task b207b735 (flow 5957e4e6): loaded val<.=78feb7bf 35.4MiB>
2021/07/08 16:51:40 scheduler task b207b735 (flow 5957e4e6): loading (try 0): successful, next state: submitting
2021/07/08 16:51:40 scheduler task 98623b95 (flow 78adf534): loaded val<.=c8c61628 35.4MiB>
2021/07/08 16:51:40 scheduler task 98623b95 (flow 78adf534): loading (try 0): successful, next state: submitting
2021/07/08 16:51:40 scheduler task 4b88dfbe (flow 5d1a913d): loaded val<.=ad9e1a14 35.4MiB>
2021/07/08 16:51:40 scheduler task b207b735 (flow 5957e4e6): submitting (try 0): started
2021/07/08 16:51:40 scheduler task 98623b95 (flow 78adf534): submitting (try 0): started
2021/07/08 16:51:40 scheduler task fd10e005 (flow dd86c476): loaded val<.=c7d6d1df 35.4MiB>
2021/07/08 16:51:40 scheduler task fd10e005 (flow dd86c476): loading (try 0): successful, next state: submitting
2021/07/08 16:51:40 scheduler task 64524c69 (flow fac60c68): loaded val<.=c1e1a056 35.4MiB>
2021/07/08 16:51:40 scheduler task 64524c69 (flow fac60c68): loading (try 0): successful, next state: submitting
2021/07/08 16:51:40 scheduler task 8ef79677 (flow e14892e7): loaded val<.=03ae56aa 35.4MiB>
2021/07/08 16:51:40 scheduler task 8ef79677 (flow e14892e7): loading (try 0): successful, next state: submitting
2021/07/08 16:51:40 scheduler task 82963780 (flow 5fa19d0c): loaded val<.=e03117ba 35.4MiB>
2021/07/08 16:51:40 scheduler task 84a55080 (flow d93a17b8): loaded val<.=1496a42b 35.4MiB>
2021/07/08 16:51:40 scheduler task fd10e005 (flow dd86c476): submitting (try 0): started
2021/07/08 16:51:40 scheduler task 737c1b6c (flow 39f0abce): loaded val<.=f5ac4db5 35.4MiB>
2021/07/08 16:51:40 scheduler task 85eaed6d (flow 1f720a3c): loaded val<.=bbad1776 35.4MiB>
2021/07/08 16:51:40 scheduler task 737c1b6c (flow 39f0abce): loading (try 0): successful, next state: submitting
2021/07/08 16:51:40 scheduler task 4b88dfbe (flow 5d1a913d): loaded val<.=52e365b2 35.4MiB>
2021/07/08 16:51:40 scheduler task 4b88dfbe (flow 5d1a913d): loading (try 0): successful, next state: submitting
2021/07/08 16:51:40 scheduler task 64524c69 (flow fac60c68): submitting (try 0): started
2021/07/08 16:51:40 scheduler task a322da77 (flow 70dfd3f3): loaded val<.=7337304d 35.4MiB>
2021/07/08 16:51:40 scheduler task 8ef79677 (flow e14892e7): submitting (try 0): started
2021/07/08 16:51:40 scheduler task 82963780 (flow 5fa19d0c): loaded val<.=e7f5a4c4 35.4MiB>
2021/07/08 16:51:40 scheduler task 82963780 (flow 5fa19d0c): loading (try 0): successful, next state: submitting
2021/07/08 16:51:40 scheduler task 8bd46694 (flow e8a2d981): loaded val<.=27c460f0 35.4MiB>
2021/07/08 16:51:40 scheduler task 3bb8f0e4 (flow a324358a): loaded val<.=54334788 35.4MiB>
2021/07/08 16:51:40 scheduler task ed42d1d8 (flow ec834335): loaded val<.=cc22b76b 35.4MiB>
2021/07/08 16:51:40 scheduler task 84a55080 (flow d93a17b8): loaded val<.=a6a11c17 35.4MiB>
2021/07/08 16:51:40 scheduler task 84a55080 (flow d93a17b8): loading (try 0): successful, next state: submitting
2021/07/08 16:51:40 scheduler task 737c1b6c (flow 39f0abce): submitting (try 0): started
2021/07/08 16:51:40 scheduler task 5aa3253c (flow c8481164): loaded val<.=4019864a 35.4MiB>
2021/07/08 16:51:40 scheduler task 5aa3253c (flow c8481164): loading (try 0): successful, next state: submitting
2021/07/08 16:51:40 scheduler task 15255f8b (flow 47dc9646): loaded val<.=fe109a23 35.4MiB>
2021/07/08 16:51:40 scheduler task 15255f8b (flow 47dc9646): loading (try 0): successful, next state: submitting
2021/07/08 16:51:40 scheduler task 4b88dfbe (flow 5d1a913d): submitting (try 0): started
2021/07/08 16:51:40 scheduler task 82963780 (flow 5fa19d0c): submitting (try 0): started
2021/07/08 16:51:40 scheduler task 84a55080 (flow d93a17b8): submitting (try 0): started
2021/07/08 16:51:40 scheduler task 9fa868bc (flow 0bb0e047): loaded val<.=149907c9 35.4MiB>
2021/07/08 16:51:40 scheduler task 9fa868bc (flow 0bb0e047): loading (try 0): successful, next state: submitting
2021/07/08 16:51:40 scheduler task 21d2711e (flow a8490785): loaded val<.=398ba09e 35.4MiB>
2021/07/08 16:51:40 scheduler task 5aa3253c (flow c8481164): submitting (try 0): started
2021/07/08 16:51:40 scheduler task f0cd2c6c (flow 499d9909): loaded val<.=124d56f5 35.4MiB>
2021/07/08 16:51:40 scheduler task 81360b45 (flow 5c0f0936): loaded val<.=9459f1dd 35.4MiB>
2021/07/08 16:51:40 scheduler task 81360b45 (flow 5c0f0936): loading (try 0): successful, next state: submitting
2021/07/08 16:51:40 scheduler task f8b9105e (flow 99c56457): loaded val<.=9afabcd5 35.4MiB>
2021/07/08 16:51:40 scheduler task f8b9105e (flow 99c56457): loading (try 0): successful, next state: submitting
2021/07/08 16:51:40 scheduler task 15255f8b (flow 47dc9646): submitting (try 0): started
2021/07/08 16:51:40 scheduler task 44129759 (flow 5eef48c8): loaded val<.=7a55ec69 35.4MiB>
2021/07/08 16:51:40 scheduler task 9fa868bc (flow 0bb0e047): submitting (try 0): started
2021/07/08 16:51:40 scheduler task 21d2711e (flow a8490785): loaded val<.=78af9b7f 35.4MiB>
2021/07/08 16:51:40 scheduler task 21d2711e (flow a8490785): loading (try 0): successful, next state: submitting
2021/07/08 16:51:40 scheduler task 81360b45 (flow 5c0f0936): submitting (try 0): started
2021/07/08 16:51:40 scheduler task f8b9105e (flow 99c56457): submitting (try 0): started
2021/07/08 16:51:40 scheduler task 7ab39a0f (flow 017350a1): loaded val<.=86e572cb 35.4MiB>
2021/07/08 16:51:40 scheduler task 8f237035 (flow 7731292a): loaded val<.=8da7a12d 35.4MiB>
2021/07/08 16:51:40 scheduler task 7ab39a0f (flow 017350a1): loading (try 0): successful, next state: submitting
2021/07/08 16:51:40 scheduler task 21d2711e (flow a8490785): submitting (try 0): started
2021/07/08 16:51:40 scheduler task 7ab39a0f (flow 017350a1): submitting (try 0): started
2021/07/08 16:51:40 scheduler task ed42d1d8 (flow ec834335): loaded val<.=8fa7a808 35.4MiB>
2021/07/08 16:51:40 scheduler task ed42d1d8 (flow ec834335): loading (try 0): successful, next state: submitting
2021/07/08 16:51:40 scheduler task d4a3dec7 (flow 86ee751d): loaded val<.=e4676680 35.4MiB>
2021/07/08 16:51:40 scheduler task d4a3dec7 (flow 86ee751d): loading (try 0): successful, next state: submitting
2021/07/08 16:51:40 scheduler task ed42d1d8 (flow ec834335): submitting (try 0): started
2021/07/08 16:51:40 scheduler task d4a3dec7 (flow 86ee751d): submitting (try 0): started
2021/07/08 16:51:40 scheduler task 44129759 (flow 5eef48c8): loaded val<.=a06a2437 35.4MiB>
2021/07/08 16:51:40 scheduler task 44129759 (flow 5eef48c8): loading (try 0): successful, next state: submitting
2021/07/08 16:51:40 scheduler task 44129759 (flow 5eef48c8): submitting (try 0): started
2021/07/08 16:51:40 scheduler task 1afbafec (flow 44babb34): loaded val<.=a191ca72 35.4MiB>
2021/07/08 16:51:40 scheduler task 1e424faf (flow 8b4daa08): loaded val<.=0a494a3d 35.4MiB>
2021/07/08 16:51:40 scheduler task 8bd46694 (flow e8a2d981): loaded val<.=08223bfa 35.4MiB>
2021/07/08 16:51:40 scheduler task 8bd46694 (flow e8a2d981): loading (try 0): successful, next state: submitting
2021/07/08 16:51:40 scheduler task 41aa6205 (flow 2f22143a): loaded val<.=9b80a07f 35.4MiB>
2021/07/08 16:51:40 scheduler task 8a52bfdb (flow 5bd33203): loaded val<.=aa5724d0 35.4MiB>
2021/07/08 16:51:40 scheduler task 8bd46694 (flow e8a2d981): submitting (try 0): started
2021/07/08 16:51:41 scheduler task 26683aa0 (flow fc9dabef): loaded val<.=94ccc9b9 35.4MiB>
2021/07/08 16:51:41 scheduler task 4f52560f (flow c39d6831): loaded val<.=ebce4dc4 35.4MiB>
2021/07/08 16:51:41 scheduler task 85eaed6d (flow 1f720a3c): loaded val<.=14bd1964 35.4MiB>
2021/07/08 16:51:41 scheduler task 85eaed6d (flow 1f720a3c): loading (try 0): successful, next state: submitting
2021/07/08 16:51:41 scheduler task eab1f0b7 (flow 46c93b21): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:41 scheduler task 8044c66f (flow 6f63202d): loaded val<.=7bf140cf 35.4MiB>
2021/07/08 16:51:41 scheduler task f0cd2c6c (flow 499d9909): loaded val<.=09ee4690 35.4MiB>
2021/07/08 16:51:41 scheduler task f0cd2c6c (flow 499d9909): loading (try 0): successful, next state: submitting
2021/07/08 16:51:41 scheduler task 41aa6205 (flow 2f22143a): loaded val<.=f68b8294 35.4MiB>
2021/07/08 16:51:41 scheduler task 41aa6205 (flow 2f22143a): loading (try 0): successful, next state: submitting
2021/07/08 16:51:41 scheduler task 5947e81d (flow 57e39d90): loaded val<.=e67ee383 35.4MiB>
2021/07/08 16:51:41 scheduler task 36d6e3bf (flow a4dcd123): loaded val<.=fe10adeb 35.4MiB>
2021/07/08 16:51:41 scheduler task 36d6e3bf (flow a4dcd123): loading (try 0): successful, next state: submitting
2021/07/08 16:51:41 scheduler task 85eaed6d (flow 1f720a3c): submitting (try 0): started
2021/07/08 16:51:41 scheduler task eab1f0b7 (flow 46c93b21): waiting for completion (try 0): started
2021/07/08 16:51:41  ->  n100.r04.s046.Main.out_file 46c93b21 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:41 n100.r04.s046.Main.out_file 46c93b21 n100/r04/n100.r04.s046.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5d6a4ea05e99edcbcd340145fe98d6e9d63b313cdf042c40ca606e17beea5a8b
	sha256:46c93b21f95d897bc2699237a17d6f11a43f26aa5f7c41b952c99a2d2d7a4377
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/eab1f0b77848f33ef71b37648a283ede87ddeb4e6daf47f91590696344e35328
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s046_output"
	    wget -O "n100.r04.s046_output/n100.r04.s046.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s046_output/n100.r04.s046.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s046_output/n100.r04.s046.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s046_output/n100.r04.s046.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s046_output/n100.r04.s046.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s046_output/n100.r04.s046.reference.fas" "n100.r04.s046_output/n100.r04.s046.fq1.fastq" "n100.r04.s046_output/n100.r04.s046.fq2.fastq" | samtools view -bS - > "n100.r04.s046_output/n100.r04.s046.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s046_output/n100.r04.s046.untrimmed.sorted.bam" "n100.r04.s046_output/n100.r04.s046.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s046_output/n100.r04.s046.untrimmed.sorted.bam" -b "n100.r04.s046_output/n100.r04.s046.primers.bed" -p "n100.r04.s046_output/n100.r04.s046.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s046_output/n100.r04.s046.trimmed.sorted.bam" "n100.r04.s046_output/n100.r04.s046.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s046_output/n100.r04.s046.reference.fas" "n100.r04.s046_output/n100.r04.s046.trimmed.sorted.bam" > "n100.r04.s046_output/n100.r04.s046.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s046_output/n100.r04.s046.reference.fas" --call-indels "n100.r04.s046_output/n100.r04.s046.trimmed.sorted.bam" > "n100.r04.s046_output/n100.r04.s046.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s046_output/n100.r04.s046.trimmed.sorted.bam" > "n100.r04.s046_output/n100.r04.s046.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s046_output/n100.r04.s046.depth.txt" "n100.r04.s046_output/n100.r04.s046.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s046_output/n100.r04.s046.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s046_output/n100.r04.s046.reference.fas" | bcftools consensus -m "n100.r04.s046_output/n100.r04.s046.low_depth.tsv" tmp.vcf.gz > "n100.r04.s046_output/n100.r04.s046.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s046_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:41 scheduler task f0cd2c6c (flow 499d9909): submitting (try 0): started
2021/07/08 16:51:41 scheduler task 41aa6205 (flow 2f22143a): submitting (try 0): started
2021/07/08 16:51:41 scheduler task 36d6e3bf (flow a4dcd123): submitting (try 0): started
2021/07/08 16:51:41 scheduler task 1e424faf (flow 8b4daa08): loaded val<.=f3cdb74b 35.4MiB>
2021/07/08 16:51:41 scheduler task 32f45316 (flow 14b3f0cc): loaded val<.=001b5b28 35.4MiB>
2021/07/08 16:51:41 scheduler task 32f45316 (flow 14b3f0cc): loaded val<.=ce8dc4ed 35.4MiB>
2021/07/08 16:51:41 scheduler task 32f45316 (flow 14b3f0cc): loading (try 0): successful, next state: submitting
2021/07/08 16:51:41 scheduler task 1afbafec (flow 44babb34): loaded val<.=7fef008e 35.4MiB>
2021/07/08 16:51:41 scheduler task 1afbafec (flow 44babb34): loading (try 0): successful, next state: submitting
2021/07/08 16:51:41 scheduler task 1e424faf (flow 8b4daa08): loading (try 0): successful, next state: submitting
2021/07/08 16:51:41 scheduler task 8a52bfdb (flow 5bd33203): loaded val<.=f26d720c 35.4MiB>
2021/07/08 16:51:41 scheduler task 8a52bfdb (flow 5bd33203): loading (try 0): successful, next state: submitting
2021/07/08 16:51:41 scheduler task 32f45316 (flow 14b3f0cc): submitting (try 0): started
2021/07/08 16:51:41 scheduler task 1afbafec (flow 44babb34): submitting (try 0): started
2021/07/08 16:51:41 scheduler task 1e424faf (flow 8b4daa08): submitting (try 0): started
2021/07/08 16:51:41 scheduler task 8a52bfdb (flow 5bd33203): submitting (try 0): started
2021/07/08 16:51:41 scheduler task 731ed26b (flow 918bce40): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:41 scheduler task 5a8a7584 (flow 749eedd5): loaded val<.=f9c5f131 35.4MiB>
2021/07/08 16:51:41 scheduler task 731ed26b (flow 918bce40): waiting for completion (try 0): started
2021/07/08 16:51:41  ->  n100.r04.s055.Main.out_file 918bce40 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:41 n100.r04.s055.Main.out_file 918bce40 n100/r04/n100.r04.s055.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:bef669d8be6f6e88d439cc7e29eba8a3da9584b39ffb1f52d4bff9b2f32f7e33
	sha256:918bce4086b73d45bc7b0343e9798073cb78c5f863e1b712e2cf63673f08216d
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/731ed26bffc0f0741ed3dc2602d7441627f461fc124decafaa9fa86c00accc19
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s055_output"
	    wget -O "n100.r04.s055_output/n100.r04.s055.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s055_output/n100.r04.s055.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s055_output/n100.r04.s055.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s055_output/n100.r04.s055.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s055_output/n100.r04.s055.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s055_output/n100.r04.s055.reference.fas" "n100.r04.s055_output/n100.r04.s055.fq1.fastq" "n100.r04.s055_output/n100.r04.s055.fq2.fastq" | samtools view -bS - > "n100.r04.s055_output/n100.r04.s055.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s055_output/n100.r04.s055.untrimmed.sorted.bam" "n100.r04.s055_output/n100.r04.s055.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s055_output/n100.r04.s055.untrimmed.sorted.bam" -b "n100.r04.s055_output/n100.r04.s055.primers.bed" -p "n100.r04.s055_output/n100.r04.s055.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s055_output/n100.r04.s055.trimmed.sorted.bam" "n100.r04.s055_output/n100.r04.s055.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s055_output/n100.r04.s055.reference.fas" "n100.r04.s055_output/n100.r04.s055.trimmed.sorted.bam" > "n100.r04.s055_output/n100.r04.s055.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s055_output/n100.r04.s055.reference.fas" --call-indels "n100.r04.s055_output/n100.r04.s055.trimmed.sorted.bam" > "n100.r04.s055_output/n100.r04.s055.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s055_output/n100.r04.s055.trimmed.sorted.bam" > "n100.r04.s055_output/n100.r04.s055.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s055_output/n100.r04.s055.depth.txt" "n100.r04.s055_output/n100.r04.s055.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s055_output/n100.r04.s055.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s055_output/n100.r04.s055.reference.fas" | bcftools consensus -m "n100.r04.s055_output/n100.r04.s055.low_depth.tsv" tmp.vcf.gz > "n100.r04.s055_output/n100.r04.s055.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s055_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:41 scheduler task b4a5ccae (flow 6bc2ef0b): loaded val<.=4557474e 35.4MiB>
2021/07/08 16:51:41 scheduler task 9a663e4e (flow 2d3488e5): loaded val<.=b3389d0f 35.4MiB>
2021/07/08 16:51:41 scheduler task 8746c175 (flow e75028fb): loaded val<.=fe23f0a9 35.4MiB>
2021/07/08 16:51:41 scheduler task d243ea7f (flow f880a376): loaded val<.=f64b1764 35.4MiB>
2021/07/08 16:51:41 scheduler task b838e67f (flow f8ffa904): loaded val<.=1117b91f 35.4MiB>
2021/07/08 16:51:41 scheduler task 5bbe9c3d (flow 5f50c423): loaded val<.=8acda05e 35.4MiB>
2021/07/08 16:51:41 scheduler task ad833c50 (flow e08e8afe): loaded val<.=3b5be503 35.4MiB>
2021/07/08 16:51:41 scheduler task f7f2648e (flow 062361bd): loaded val<.=c9fe7ec9 35.4MiB>
2021/07/08 16:51:41 scheduler task ad27dd97 (flow 57f67a1d): loaded val<.=a452f45d 35.4MiB>
2021/07/08 16:51:41 scheduler task da5603da (flow f97f1e63): loaded val<.=fe454f5c 35.4MiB>
2021/07/08 16:51:41 scheduler task 3cad6a0b (flow f32e0466): loaded val<.=b5fa662c 35.4MiB>
2021/07/08 16:51:41 scheduler task 5a8a7584 (flow 749eedd5): loaded val<.=2ec44f5a 35.4MiB>
2021/07/08 16:51:41 scheduler task 5a8a7584 (flow 749eedd5): loading (try 0): successful, next state: submitting
2021/07/08 16:51:41 scheduler task b8eef7a3 (flow 7fe68b7b): loaded val<.=6d54512b 35.4MiB>
2021/07/08 16:51:41 scheduler task 3e5b10bd (flow 6f981d52): loaded val<.=ae68fe81 35.4MiB>
2021/07/08 16:51:41 scheduler task a9de6e84 (flow 38bba01c): loaded val<.=e1f1e800 35.4MiB>
2021/07/08 16:51:41 scheduler task 04101a49 (flow 2d151cd2): loaded val<.=341839f8 35.4MiB>
2021/07/08 16:51:41 scheduler task 04aa495d (flow 74a2c8b3): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:41 scheduler task 5a8a7584 (flow 749eedd5): submitting (try 0): started
2021/07/08 16:51:41 scheduler task 04aa495d (flow 74a2c8b3): waiting for completion (try 0): started
2021/07/08 16:51:41  ->  n100.r04.s030.Main.out_file 74a2c8b3 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:41 scheduler task 5aa4bfc6 (flow e7565ce6): loaded val<.=87cf2f86 35.4MiB>
2021/07/08 16:51:41 n100.r04.s030.Main.out_file 74a2c8b3 n100/r04/n100.r04.s030.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5ca12c6e777191e08a2a8358d72e406650461a9e2012312ab7a97e93ff3425f5
	sha256:74a2c8b381e52d26d0fe5ab4e21994825b4da0c2953c05f5c0808615bce4c8ca
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/04aa495d30ca640d084e96fec7550a4546f4eeb22d173039e47bf797281e261c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s030_output"
	    wget -O "n100.r04.s030_output/n100.r04.s030.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s030_output/n100.r04.s030.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s030_output/n100.r04.s030.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s030_output/n100.r04.s030.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s030_output/n100.r04.s030.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s030_output/n100.r04.s030.reference.fas" "n100.r04.s030_output/n100.r04.s030.fq1.fastq" "n100.r04.s030_output/n100.r04.s030.fq2.fastq" | samtools view -bS - > "n100.r04.s030_output/n100.r04.s030.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s030_output/n100.r04.s030.untrimmed.sorted.bam" "n100.r04.s030_output/n100.r04.s030.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s030_output/n100.r04.s030.untrimmed.sorted.bam" -b "n100.r04.s030_output/n100.r04.s030.primers.bed" -p "n100.r04.s030_output/n100.r04.s030.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s030_output/n100.r04.s030.trimmed.sorted.bam" "n100.r04.s030_output/n100.r04.s030.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s030_output/n100.r04.s030.reference.fas" "n100.r04.s030_output/n100.r04.s030.trimmed.sorted.bam" > "n100.r04.s030_output/n100.r04.s030.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s030_output/n100.r04.s030.reference.fas" --call-indels "n100.r04.s030_output/n100.r04.s030.trimmed.sorted.bam" > "n100.r04.s030_output/n100.r04.s030.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s030_output/n100.r04.s030.trimmed.sorted.bam" > "n100.r04.s030_output/n100.r04.s030.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s030_output/n100.r04.s030.depth.txt" "n100.r04.s030_output/n100.r04.s030.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s030_output/n100.r04.s030.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s030_output/n100.r04.s030.reference.fas" | bcftools consensus -m "n100.r04.s030_output/n100.r04.s030.low_depth.tsv" tmp.vcf.gz > "n100.r04.s030_output/n100.r04.s030.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s030_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:41 scheduler task 8f237035 (flow 7731292a): loaded val<.=e14dd8dd 35.4MiB>
2021/07/08 16:51:41 scheduler task 8f237035 (flow 7731292a): loading (try 0): successful, next state: submitting
2021/07/08 16:51:41 scheduler task 8f237035 (flow 7731292a): submitting (try 0): started
2021/07/08 16:51:41 scheduler task 0c8baa7d (flow ff8a339b): loaded val<.=10c0b7be 35.4MiB>
2021/07/08 16:51:41 scheduler task 50845845 (flow cc504ab7): loaded val<.=7938656b 35.4MiB>
2021/07/08 16:51:41 scheduler task 0956178b (flow 5468f4a3): loaded val<.=3f96a22f 35.4MiB>
2021/07/08 16:51:41 scheduler task 9181ecd7 (flow cfd8c852): loaded val<.=052577c4 35.4MiB>
2021/07/08 16:51:41 scheduler task 5cd20acf (flow 77d99fec): loaded val<.=ca1d610a 35.4MiB>
2021/07/08 16:51:41 scheduler task 3447498f (flow 193dd149): loaded val<.=cae29817 35.4MiB>
2021/07/08 16:51:41 scheduler task f1849b51 (flow ff5069df): loaded val<.=d9c90b82 35.4MiB>
2021/07/08 16:51:41 scheduler task c3b5748c (flow c441a068): loaded val<.=916d514e 35.4MiB>
2021/07/08 16:51:41 scheduler task 0d09bc33 (flow 8f555b2a): loaded val<.=1ea94a13 35.4MiB>
2021/07/08 16:51:41 scheduler task c8f7947e (flow a052354a): loaded val<.=73906850 35.4MiB>
2021/07/08 16:51:41 scheduler task 9181ecd7 (flow cfd8c852): loaded val<.=afd5687c 35.4MiB>
2021/07/08 16:51:41 scheduler task 9181ecd7 (flow cfd8c852): loading (try 0): successful, next state: submitting
2021/07/08 16:51:41 scheduler task 3e5b10bd (flow 6f981d52): loaded val<.=3a12190c 35.4MiB>
2021/07/08 16:51:41 scheduler task 3e5b10bd (flow 6f981d52): loading (try 0): successful, next state: submitting
2021/07/08 16:51:41 scheduler task 9181ecd7 (flow cfd8c852): submitting (try 0): started
2021/07/08 16:51:41 scheduler task 3e5b10bd (flow 6f981d52): submitting (try 0): started
2021/07/08 16:51:41 scheduler task eee3329a (flow 7d1757b7): loaded val<.=c7ade82f 35.4MiB>
2021/07/08 16:51:41 scheduler task f1849b51 (flow ff5069df): loaded val<.=5c10c6ab 35.4MiB>
2021/07/08 16:51:41 scheduler task 04101a49 (flow 2d151cd2): loaded val<.=90f5cb5d 35.4MiB>
2021/07/08 16:51:41 scheduler task 11856ee1 (flow 9941c680): loaded val<.=bdea5292 35.4MiB>
2021/07/08 16:51:41 scheduler task 04101a49 (flow 2d151cd2): loading (try 0): successful, next state: submitting
2021/07/08 16:51:41 scheduler task 0d09bc33 (flow 8f555b2a): loaded val<.=62352064 35.4MiB>
2021/07/08 16:51:41 scheduler task 0d09bc33 (flow 8f555b2a): loading (try 0): successful, next state: submitting
2021/07/08 16:51:41 scheduler task 7a4dfaa4 (flow 47beba72): loaded val<.=463286ab 35.4MiB>
2021/07/08 16:51:41 scheduler task 5da77f67 (flow 71f05c8c): loaded val<.=36f097f8 35.4MiB>
2021/07/08 16:51:41 scheduler task f1849b51 (flow ff5069df): loading (try 0): successful, next state: submitting
2021/07/08 16:51:41 scheduler task 1e419403 (flow 9b73f7e9): loaded val<.=5f300363 35.4MiB>
2021/07/08 16:51:41 scheduler task ecbdae4e (flow ea7c1d46): loaded val<.=dd8ea4fe 35.4MiB>
2021/07/08 16:51:41 scheduler task e8d5592b (flow 7b4e38f2): loaded val<.=017e4011 35.4MiB>
2021/07/08 16:51:41 scheduler task e7c3fad1 (flow 73faee38): loaded val<.=5d31d1c6 35.4MiB>
2021/07/08 16:51:41 scheduler task 04101a49 (flow 2d151cd2): submitting (try 0): started
2021/07/08 16:51:41 scheduler task 1630f0a4 (flow f5f175a1): loaded val<.=d2fe5b43 35.4MiB>
2021/07/08 16:51:41 scheduler task e7c3fad1 (flow 73faee38): loaded val<.=dc48dd7f 35.4MiB>
2021/07/08 16:51:41 scheduler task e7c3fad1 (flow 73faee38): loading (try 0): successful, next state: submitting
2021/07/08 16:51:41 scheduler task 0d09bc33 (flow 8f555b2a): submitting (try 0): started
2021/07/08 16:51:41 scheduler task f1849b51 (flow ff5069df): submitting (try 0): started
2021/07/08 16:51:41 scheduler task e7c3fad1 (flow 73faee38): submitting (try 0): started
2021/07/08 16:51:41 scheduler task 32f45316 (flow 14b3f0cc): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:41 scheduler task 32f45316 (flow 14b3f0cc): waiting for completion (try 0): started
2021/07/08 16:51:41  ->  n100.r04.s007.Main.out_file 14b3f0cc exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:41 n100.r04.s007.Main.out_file 14b3f0cc n100/r04/n100.r04.s007.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3e3f0feabb2ed862b5214047ad7c28b1911a6255da00dce9a55c2bea2164ab78
	sha256:14b3f0cc347ec7b42e53eb5e67e02c68962638132dff05f0632172b6a4b00b5d
	ec2-18-220-243-38.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/32f45316afb7cc1a1ed6fcd66c56c366f7d1ef458405bd87d2b641a2ce534ba5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s007_output"
	    wget -O "n100.r04.s007_output/n100.r04.s007.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s007_output/n100.r04.s007.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s007_output/n100.r04.s007.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s007_output/n100.r04.s007.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s007_output/n100.r04.s007.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s007_output/n100.r04.s007.reference.fas" "n100.r04.s007_output/n100.r04.s007.fq1.fastq" "n100.r04.s007_output/n100.r04.s007.fq2.fastq" | samtools view -bS - > "n100.r04.s007_output/n100.r04.s007.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s007_output/n100.r04.s007.untrimmed.sorted.bam" "n100.r04.s007_output/n100.r04.s007.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s007_output/n100.r04.s007.untrimmed.sorted.bam" -b "n100.r04.s007_output/n100.r04.s007.primers.bed" -p "n100.r04.s007_output/n100.r04.s007.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s007_output/n100.r04.s007.trimmed.sorted.bam" "n100.r04.s007_output/n100.r04.s007.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s007_output/n100.r04.s007.reference.fas" "n100.r04.s007_output/n100.r04.s007.trimmed.sorted.bam" > "n100.r04.s007_output/n100.r04.s007.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s007_output/n100.r04.s007.reference.fas" --call-indels "n100.r04.s007_output/n100.r04.s007.trimmed.sorted.bam" > "n100.r04.s007_output/n100.r04.s007.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s007_output/n100.r04.s007.trimmed.sorted.bam" > "n100.r04.s007_output/n100.r04.s007.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s007_output/n100.r04.s007.depth.txt" "n100.r04.s007_output/n100.r04.s007.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s007_output/n100.r04.s007.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s007_output/n100.r04.s007.reference.fas" | bcftools consensus -m "n100.r04.s007_output/n100.r04.s007.low_depth.tsv" tmp.vcf.gz > "n100.r04.s007_output/n100.r04.s007.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s007_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:41 scheduler task 1afbafec (flow 44babb34): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:41 scheduler task 1afbafec (flow 44babb34): waiting for completion (try 0): started
2021/07/08 16:51:41  ->  n100.r04.s061.Main.out_file 44babb34 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:41 n100.r04.s061.Main.out_file 44babb34 n100/r04/n100.r04.s061.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a6b4e7718ad23e0f533013e99a8c90b6bb63fbfe6e3a0d7c60701fd7a8e4943d
	sha256:44babb34aade5d979d4d01eca17fa3e3d6ce557f09732c8354533b354b2b3258
	ec2-18-220-243-38.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1afbafec963215fcd6293dedf444d96af095cbb828b2af727da10320b18c96ec
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s061_output"
	    wget -O "n100.r04.s061_output/n100.r04.s061.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s061_output/n100.r04.s061.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s061_output/n100.r04.s061.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s061_output/n100.r04.s061.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s061_output/n100.r04.s061.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s061_output/n100.r04.s061.reference.fas" "n100.r04.s061_output/n100.r04.s061.fq1.fastq" "n100.r04.s061_output/n100.r04.s061.fq2.fastq" | samtools view -bS - > "n100.r04.s061_output/n100.r04.s061.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s061_output/n100.r04.s061.untrimmed.sorted.bam" "n100.r04.s061_output/n100.r04.s061.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s061_output/n100.r04.s061.untrimmed.sorted.bam" -b "n100.r04.s061_output/n100.r04.s061.primers.bed" -p "n100.r04.s061_output/n100.r04.s061.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s061_output/n100.r04.s061.trimmed.sorted.bam" "n100.r04.s061_output/n100.r04.s061.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s061_output/n100.r04.s061.reference.fas" "n100.r04.s061_output/n100.r04.s061.trimmed.sorted.bam" > "n100.r04.s061_output/n100.r04.s061.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s061_output/n100.r04.s061.reference.fas" --call-indels "n100.r04.s061_output/n100.r04.s061.trimmed.sorted.bam" > "n100.r04.s061_output/n100.r04.s061.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s061_output/n100.r04.s061.trimmed.sorted.bam" > "n100.r04.s061_output/n100.r04.s061.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s061_output/n100.r04.s061.depth.txt" "n100.r04.s061_output/n100.r04.s061.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s061_output/n100.r04.s061.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s061_output/n100.r04.s061.reference.fas" | bcftools consensus -m "n100.r04.s061_output/n100.r04.s061.low_depth.tsv" tmp.vcf.gz > "n100.r04.s061_output/n100.r04.s061.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s061_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:41 scheduler task e8d5592b (flow 7b4e38f2): loaded val<.=4bfbe2b2 35.4MiB>
2021/07/08 16:51:41 scheduler task e8d5592b (flow 7b4e38f2): loading (try 0): successful, next state: submitting
2021/07/08 16:51:41 scheduler task 98623b95 (flow 78adf534): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:41 scheduler task 3447498f (flow 193dd149): loaded val<.=b8a63c81 35.4MiB>
2021/07/08 16:51:41 scheduler task 3447498f (flow 193dd149): loading (try 0): successful, next state: submitting
2021/07/08 16:51:41 scheduler task faa7be58 (flow 5f9e75c1): loaded val<.=101fe79c 35.4MiB>
2021/07/08 16:51:41 scheduler task c9e9d6bb (flow 763a3244): loaded val<.=cb428c8d 35.4MiB>
2021/07/08 16:51:41 scheduler task 29c9d867 (flow 0f009068): loaded val<.=1d16d152 35.4MiB>
2021/07/08 16:51:41 scheduler task de374a3f (flow c4d8efb1): loaded val<.=8c8934ee 35.4MiB>
2021/07/08 16:51:41 scheduler task b207b735 (flow 5957e4e6): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:41 scheduler task a818b8e8 (flow 1ca35c84): loaded val<.=5f38c2e2 35.4MiB>
2021/07/08 16:51:41 scheduler task 4f52560f (flow c39d6831): loaded val<.=4bf200cc 35.4MiB>
2021/07/08 16:51:41 scheduler task 4f52560f (flow c39d6831): loading (try 0): successful, next state: submitting
2021/07/08 16:51:41 scheduler task 4416f8fe (flow ac3a0076): loaded val<.=5ea3ae65 35.4MiB>
2021/07/08 16:51:41 scheduler task 176e8b91 (flow 0d7bf897): loaded val<.=e4ac636d 35.4MiB>
2021/07/08 16:51:41 scheduler task 15151169 (flow a6da6753): loaded val<.=0d838b62 35.4MiB>
2021/07/08 16:51:41 scheduler task ad27dd97 (flow 57f67a1d): loaded val<.=2a1065af 35.4MiB>
2021/07/08 16:51:41 scheduler task ad27dd97 (flow 57f67a1d): loading (try 0): successful, next state: submitting
2021/07/08 16:51:41 scheduler task b8eef7a3 (flow 7fe68b7b): loaded val<.=5c2eb3a8 35.4MiB>
2021/07/08 16:51:41 scheduler task b8eef7a3 (flow 7fe68b7b): loading (try 0): successful, next state: submitting
2021/07/08 16:51:41 scheduler task e8d5592b (flow 7b4e38f2): submitting (try 0): started
2021/07/08 16:51:41 scheduler task 98623b95 (flow 78adf534): waiting for completion (try 0): started
2021/07/08 16:51:41  ->  n100.r04.s041.Main.out_file 78adf534 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:41 n100.r04.s041.Main.out_file 78adf534 n100/r04/n100.r04.s041.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f5d58879e1cce68cacf38bb2828b47dc223cf7d12d723a0fbf36a366733ba3d0
	sha256:78adf534f8fecc8ae47dc7ab13dc91743a9e87dc0ffe46b04279ca9b55f81564
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/98623b9510952749ac1502c0262b2b3065e2029ec106e54d77b5ebb22ef975be
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s041_output"
	    wget -O "n100.r04.s041_output/n100.r04.s041.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s041_output/n100.r04.s041.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s041_output/n100.r04.s041.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s041_output/n100.r04.s041.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s041_output/n100.r04.s041.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s041_output/n100.r04.s041.reference.fas" "n100.r04.s041_output/n100.r04.s041.fq1.fastq" "n100.r04.s041_output/n100.r04.s041.fq2.fastq" | samtools view -bS - > "n100.r04.s041_output/n100.r04.s041.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s041_output/n100.r04.s041.untrimmed.sorted.bam" "n100.r04.s041_output/n100.r04.s041.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s041_output/n100.r04.s041.untrimmed.sorted.bam" -b "n100.r04.s041_output/n100.r04.s041.primers.bed" -p "n100.r04.s041_output/n100.r04.s041.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s041_output/n100.r04.s041.trimmed.sorted.bam" "n100.r04.s041_output/n100.r04.s041.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s041_output/n100.r04.s041.reference.fas" "n100.r04.s041_output/n100.r04.s041.trimmed.sorted.bam" > "n100.r04.s041_output/n100.r04.s041.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s041_output/n100.r04.s041.reference.fas" --call-indels "n100.r04.s041_output/n100.r04.s041.trimmed.sorted.bam" > "n100.r04.s041_output/n100.r04.s041.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s041_output/n100.r04.s041.trimmed.sorted.bam" > "n100.r04.s041_output/n100.r04.s041.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s041_output/n100.r04.s041.depth.txt" "n100.r04.s041_output/n100.r04.s041.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s041_output/n100.r04.s041.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s041_output/n100.r04.s041.reference.fas" | bcftools consensus -m "n100.r04.s041_output/n100.r04.s041.low_depth.tsv" tmp.vcf.gz > "n100.r04.s041_output/n100.r04.s041.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s041_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:41 scheduler task 3447498f (flow 193dd149): submitting (try 0): started
2021/07/08 16:51:41 scheduler task b207b735 (flow 5957e4e6): waiting for completion (try 0): started
2021/07/08 16:51:41  ->  n100.r04.s028.Main.out_file 5957e4e6 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:41 n100.r04.s028.Main.out_file 5957e4e6 n100/r04/n100.r04.s028.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:808814aa14db38647eb7cad417a996037dea9fd7b643594ee9c0ba19147f02a7
	sha256:5957e4e6d4310bc5238d539bb69090592e3da62a57e033b4a397c6722f518af1
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b207b735e9fc90b2c8cb7d43a3f300fb35db85bbdf258872957ce5db6b475890
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s028_output"
	    wget -O "n100.r04.s028_output/n100.r04.s028.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s028_output/n100.r04.s028.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s028_output/n100.r04.s028.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s028_output/n100.r04.s028.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s028_output/n100.r04.s028.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s028_output/n100.r04.s028.reference.fas" "n100.r04.s028_output/n100.r04.s028.fq1.fastq" "n100.r04.s028_output/n100.r04.s028.fq2.fastq" | samtools view -bS - > "n100.r04.s028_output/n100.r04.s028.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s028_output/n100.r04.s028.untrimmed.sorted.bam" "n100.r04.s028_output/n100.r04.s028.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s028_output/n100.r04.s028.untrimmed.sorted.bam" -b "n100.r04.s028_output/n100.r04.s028.primers.bed" -p "n100.r04.s028_output/n100.r04.s028.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s028_output/n100.r04.s028.trimmed.sorted.bam" "n100.r04.s028_output/n100.r04.s028.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s028_output/n100.r04.s028.reference.fas" "n100.r04.s028_output/n100.r04.s028.trimmed.sorted.bam" > "n100.r04.s028_output/n100.r04.s028.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s028_output/n100.r04.s028.reference.fas" --call-indels "n100.r04.s028_output/n100.r04.s028.trimmed.sorted.bam" > "n100.r04.s028_output/n100.r04.s028.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s028_output/n100.r04.s028.trimmed.sorted.bam" > "n100.r04.s028_output/n100.r04.s028.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s028_output/n100.r04.s028.depth.txt" "n100.r04.s028_output/n100.r04.s028.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s028_output/n100.r04.s028.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s028_output/n100.r04.s028.reference.fas" | bcftools consensus -m "n100.r04.s028_output/n100.r04.s028.low_depth.tsv" tmp.vcf.gz > "n100.r04.s028_output/n100.r04.s028.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s028_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:41 scheduler task 4f52560f (flow c39d6831): submitting (try 0): started
2021/07/08 16:51:41 scheduler task ad27dd97 (flow 57f67a1d): submitting (try 0): started
2021/07/08 16:51:41 scheduler task b8eef7a3 (flow 7fe68b7b): submitting (try 0): started
2021/07/08 16:51:41 scheduler task 8a9bceb1 (flow 27523267): loaded val<.=8f3a49e4 35.4MiB>
2021/07/08 16:51:41 scheduler task 44230ac9 (flow 1e40e5b1): loaded val<.=6f989b74 35.4MiB>
2021/07/08 16:51:41 scheduler task 44230ac9 (flow 1e40e5b1): loading (try 0): successful, next state: submitting
2021/07/08 16:51:41 scheduler task fd10e005 (flow dd86c476): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:41 scheduler task 44230ac9 (flow 1e40e5b1): submitting (try 0): started
2021/07/08 16:51:41 scheduler task fd10e005 (flow dd86c476): waiting for completion (try 0): started
2021/07/08 16:51:41  ->  n100.r04.s021.Main.out_file dd86c476 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:41 n100.r04.s021.Main.out_file dd86c476 n100/r04/n100.r04.s021.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f216647aa2daaf615e5dd6c188914271b162e890231d023c0ae2cc130c231f9b
	sha256:dd86c47663d817230819484e2649a22c0425e0ee65ea6454b94bb9d11dcbebc5
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fd10e005851bbb3054ff7fcb6df7d9590acbb81b8a1f7446fa5b953d6a266e68
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s021_output"
	    wget -O "n100.r04.s021_output/n100.r04.s021.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s021_output/n100.r04.s021.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s021_output/n100.r04.s021.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s021_output/n100.r04.s021.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s021_output/n100.r04.s021.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s021_output/n100.r04.s021.reference.fas" "n100.r04.s021_output/n100.r04.s021.fq1.fastq" "n100.r04.s021_output/n100.r04.s021.fq2.fastq" | samtools view -bS - > "n100.r04.s021_output/n100.r04.s021.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s021_output/n100.r04.s021.untrimmed.sorted.bam" "n100.r04.s021_output/n100.r04.s021.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s021_output/n100.r04.s021.untrimmed.sorted.bam" -b "n100.r04.s021_output/n100.r04.s021.primers.bed" -p "n100.r04.s021_output/n100.r04.s021.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s021_output/n100.r04.s021.trimmed.sorted.bam" "n100.r04.s021_output/n100.r04.s021.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s021_output/n100.r04.s021.reference.fas" "n100.r04.s021_output/n100.r04.s021.trimmed.sorted.bam" > "n100.r04.s021_output/n100.r04.s021.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s021_output/n100.r04.s021.reference.fas" --call-indels "n100.r04.s021_output/n100.r04.s021.trimmed.sorted.bam" > "n100.r04.s021_output/n100.r04.s021.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s021_output/n100.r04.s021.trimmed.sorted.bam" > "n100.r04.s021_output/n100.r04.s021.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s021_output/n100.r04.s021.depth.txt" "n100.r04.s021_output/n100.r04.s021.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s021_output/n100.r04.s021.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s021_output/n100.r04.s021.reference.fas" | bcftools consensus -m "n100.r04.s021_output/n100.r04.s021.low_depth.tsv" tmp.vcf.gz > "n100.r04.s021_output/n100.r04.s021.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s021_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:41 scheduler task 32101954 (flow f9878803): loaded val<.=1aa18b44 35.4MiB>
2021/07/08 16:51:41 scheduler task 1e424faf (flow 8b4daa08): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:41 scheduler task 1e424faf (flow 8b4daa08): waiting for completion (try 0): started
2021/07/08 16:51:41  ->  n100.r04.s036.Main.out_file 8b4daa08 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:41 n100.r04.s036.Main.out_file 8b4daa08 n100/r04/n100.r04.s036.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:07cb43e75b84587de2f29f4a5b00ed0c1a98a8edfd84ed1b19e11a0dadb53344
	sha256:8b4daa0828c1b956dfdeabf6f561f9de4fcac780bc9cf8e7df5c60874959a5b4
	ec2-18-220-243-38.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1e424faf16d220e9e8123c24355aa6311ed38f2ec70f457a5304f6e1d3ddd089
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s036_output"
	    wget -O "n100.r04.s036_output/n100.r04.s036.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s036_output/n100.r04.s036.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s036_output/n100.r04.s036.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s036_output/n100.r04.s036.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s036_output/n100.r04.s036.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s036_output/n100.r04.s036.reference.fas" "n100.r04.s036_output/n100.r04.s036.fq1.fastq" "n100.r04.s036_output/n100.r04.s036.fq2.fastq" | samtools view -bS - > "n100.r04.s036_output/n100.r04.s036.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s036_output/n100.r04.s036.untrimmed.sorted.bam" "n100.r04.s036_output/n100.r04.s036.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s036_output/n100.r04.s036.untrimmed.sorted.bam" -b "n100.r04.s036_output/n100.r04.s036.primers.bed" -p "n100.r04.s036_output/n100.r04.s036.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s036_output/n100.r04.s036.trimmed.sorted.bam" "n100.r04.s036_output/n100.r04.s036.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s036_output/n100.r04.s036.reference.fas" "n100.r04.s036_output/n100.r04.s036.trimmed.sorted.bam" > "n100.r04.s036_output/n100.r04.s036.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s036_output/n100.r04.s036.reference.fas" --call-indels "n100.r04.s036_output/n100.r04.s036.trimmed.sorted.bam" > "n100.r04.s036_output/n100.r04.s036.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s036_output/n100.r04.s036.trimmed.sorted.bam" > "n100.r04.s036_output/n100.r04.s036.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s036_output/n100.r04.s036.depth.txt" "n100.r04.s036_output/n100.r04.s036.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s036_output/n100.r04.s036.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s036_output/n100.r04.s036.reference.fas" | bcftools consensus -m "n100.r04.s036_output/n100.r04.s036.low_depth.tsv" tmp.vcf.gz > "n100.r04.s036_output/n100.r04.s036.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s036_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:41 scheduler task 3cad6a0b (flow f32e0466): loaded val<.=508f502f 35.4MiB>
2021/07/08 16:51:41 scheduler task 3cad6a0b (flow f32e0466): loading (try 0): successful, next state: submitting
2021/07/08 16:51:41 scheduler task 3cad6a0b (flow f32e0466): submitting (try 0): started
2021/07/08 16:51:42 scheduler task ce0306d2 (flow f3a54b9e): loaded val<.=88768ac8 35.4MiB>
2021/07/08 16:51:42 scheduler task 50845845 (flow cc504ab7): loaded val<.=cc7e7ccc 35.4MiB>
2021/07/08 16:51:42 scheduler task 50845845 (flow cc504ab7): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task d243ea7f (flow f880a376): loaded val<.=86418d8f 35.4MiB>
2021/07/08 16:51:42 scheduler task d243ea7f (flow f880a376): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task 50845845 (flow cc504ab7): submitting (try 0): started
2021/07/08 16:51:42 scheduler task d243ea7f (flow f880a376): submitting (try 0): started
2021/07/08 16:51:42 scheduler task 8044c66f (flow 6f63202d): loaded val<.=edb67e01 35.4MiB>
2021/07/08 16:51:42 scheduler task 8044c66f (flow 6f63202d): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task 8044c66f (flow 6f63202d): submitting (try 0): started
2021/07/08 16:51:42 scheduler task 64524c69 (flow fac60c68): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:42 scheduler task 8a52bfdb (flow 5bd33203): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:42 scheduler task 64524c69 (flow fac60c68): waiting for completion (try 0): started
2021/07/08 16:51:42  ->  n100.r04.s042.Main.out_file fac60c68 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:42 n100.r04.s042.Main.out_file fac60c68 n100/r04/n100.r04.s042.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:70db775543c8e181a7ba46f0a5c3dade7b0042f87bf9a68d53f3cd1b9b87394d
	sha256:fac60c68b2b4435f61d3ee71c267889b004bb7ff783227c466b48c662e439126
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/64524c693bdfa3f1503c6dd6d9944d903c9315d8444b48b4ccd203265f6867c3
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s042_output"
	    wget -O "n100.r04.s042_output/n100.r04.s042.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s042_output/n100.r04.s042.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s042_output/n100.r04.s042.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s042_output/n100.r04.s042.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s042_output/n100.r04.s042.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s042_output/n100.r04.s042.reference.fas" "n100.r04.s042_output/n100.r04.s042.fq1.fastq" "n100.r04.s042_output/n100.r04.s042.fq2.fastq" | samtools view -bS - > "n100.r04.s042_output/n100.r04.s042.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s042_output/n100.r04.s042.untrimmed.sorted.bam" "n100.r04.s042_output/n100.r04.s042.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s042_output/n100.r04.s042.untrimmed.sorted.bam" -b "n100.r04.s042_output/n100.r04.s042.primers.bed" -p "n100.r04.s042_output/n100.r04.s042.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s042_output/n100.r04.s042.trimmed.sorted.bam" "n100.r04.s042_output/n100.r04.s042.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s042_output/n100.r04.s042.reference.fas" "n100.r04.s042_output/n100.r04.s042.trimmed.sorted.bam" > "n100.r04.s042_output/n100.r04.s042.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s042_output/n100.r04.s042.reference.fas" --call-indels "n100.r04.s042_output/n100.r04.s042.trimmed.sorted.bam" > "n100.r04.s042_output/n100.r04.s042.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s042_output/n100.r04.s042.trimmed.sorted.bam" > "n100.r04.s042_output/n100.r04.s042.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s042_output/n100.r04.s042.depth.txt" "n100.r04.s042_output/n100.r04.s042.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s042_output/n100.r04.s042.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s042_output/n100.r04.s042.reference.fas" | bcftools consensus -m "n100.r04.s042_output/n100.r04.s042.low_depth.tsv" tmp.vcf.gz > "n100.r04.s042_output/n100.r04.s042.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s042_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:42 scheduler task f7f2648e (flow 062361bd): loaded val<.=591451be 35.4MiB>
2021/07/08 16:51:42 scheduler task f7f2648e (flow 062361bd): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task 8a52bfdb (flow 5bd33203): waiting for completion (try 0): started
2021/07/08 16:51:42  ->  n100.r04.s066.Main.out_file 5bd33203 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:42 n100.r04.s066.Main.out_file 5bd33203 n100/r04/n100.r04.s066.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5083be50a806d41dbb41e5813afd86453ce235c5d68ca7ad8da63e2b88b20ec9
	sha256:5bd33203bc93ad28fc4dab65354241565d2a293e3888112d06a237d4dcd298b6
	ec2-18-220-243-38.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8a52bfdbf8bdc4557a29be7269beae29e887c026609b8d65a4b2fc8b0c0a7a05
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s066_output"
	    wget -O "n100.r04.s066_output/n100.r04.s066.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s066_output/n100.r04.s066.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s066_output/n100.r04.s066.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s066_output/n100.r04.s066.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s066_output/n100.r04.s066.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s066_output/n100.r04.s066.reference.fas" "n100.r04.s066_output/n100.r04.s066.fq1.fastq" "n100.r04.s066_output/n100.r04.s066.fq2.fastq" | samtools view -bS - > "n100.r04.s066_output/n100.r04.s066.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s066_output/n100.r04.s066.untrimmed.sorted.bam" "n100.r04.s066_output/n100.r04.s066.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s066_output/n100.r04.s066.untrimmed.sorted.bam" -b "n100.r04.s066_output/n100.r04.s066.primers.bed" -p "n100.r04.s066_output/n100.r04.s066.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s066_output/n100.r04.s066.trimmed.sorted.bam" "n100.r04.s066_output/n100.r04.s066.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s066_output/n100.r04.s066.reference.fas" "n100.r04.s066_output/n100.r04.s066.trimmed.sorted.bam" > "n100.r04.s066_output/n100.r04.s066.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s066_output/n100.r04.s066.reference.fas" --call-indels "n100.r04.s066_output/n100.r04.s066.trimmed.sorted.bam" > "n100.r04.s066_output/n100.r04.s066.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s066_output/n100.r04.s066.trimmed.sorted.bam" > "n100.r04.s066_output/n100.r04.s066.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s066_output/n100.r04.s066.depth.txt" "n100.r04.s066_output/n100.r04.s066.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s066_output/n100.r04.s066.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s066_output/n100.r04.s066.reference.fas" | bcftools consensus -m "n100.r04.s066_output/n100.r04.s066.low_depth.tsv" tmp.vcf.gz > "n100.r04.s066_output/n100.r04.s066.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s066_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:42 scheduler task f7f2648e (flow 062361bd): submitting (try 0): started
2021/07/08 16:51:42 scheduler task aee028ec (flow 0f5f6f8e): loaded val<.=2b0f3679 35.4MiB>
2021/07/08 16:51:42 scheduler task aee028ec (flow 0f5f6f8e): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task aee028ec (flow 0f5f6f8e): submitting (try 0): started
2021/07/08 16:51:42 scheduler task d21168f4 (flow fb8de0c9): loaded val<.=b2995b18 35.4MiB>
2021/07/08 16:51:42 scheduler task 331a85cb (flow e0813834): loaded val<.=5db17739 35.4MiB>
2021/07/08 16:51:42 scheduler task 54f6f6fd (flow c54bfbbc): loaded val<.=a4f36ae9 35.4MiB>
2021/07/08 16:51:42 scheduler task df28c1ac (flow b17ff5c7): loaded val<.=1be0aaa8 35.4MiB>
2021/07/08 16:51:42 scheduler task a322da77 (flow 70dfd3f3): loaded val<.=e563189f 35.4MiB>
2021/07/08 16:51:42 scheduler task 7ed73c0a (flow 610b915e): loaded val<.=d876c87b 35.4MiB>
2021/07/08 16:51:42 scheduler task a322da77 (flow 70dfd3f3): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task df28c1ac (flow b17ff5c7): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task b4a5ccae (flow 6bc2ef0b): loaded val<.=05cf8d6f 35.4MiB>
2021/07/08 16:51:42 scheduler task b4a5ccae (flow 6bc2ef0b): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task de374a3f (flow c4d8efb1): loaded val<.=fde6d67e 35.4MiB>
2021/07/08 16:51:42 scheduler task de374a3f (flow c4d8efb1): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task a322da77 (flow 70dfd3f3): submitting (try 0): started
2021/07/08 16:51:42 scheduler task 15151169 (flow a6da6753): loaded val<.=24b5fa3c 35.4MiB>
2021/07/08 16:51:42 scheduler task 15151169 (flow a6da6753): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task df28c1ac (flow b17ff5c7): submitting (try 0): started
2021/07/08 16:51:42 scheduler task 5e492d41 (flow ac9e3373): loaded val<.=b151daa2 35.4MiB>
2021/07/08 16:51:42 scheduler task b4a5ccae (flow 6bc2ef0b): submitting (try 0): started
2021/07/08 16:51:42 scheduler task c9e9d6bb (flow 763a3244): loaded val<.=54cdf305 35.4MiB>
2021/07/08 16:51:42 scheduler task c9e9d6bb (flow 763a3244): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task cbcd17ff (flow 42a8a7f6): loaded val<.=7336dadd 35.4MiB>
2021/07/08 16:51:42 scheduler task de374a3f (flow c4d8efb1): submitting (try 0): started
2021/07/08 16:51:42 scheduler task 8ef79677 (flow e14892e7): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:42 scheduler task 15151169 (flow a6da6753): submitting (try 0): started
2021/07/08 16:51:42 scheduler task c9e9d6bb (flow 763a3244): submitting (try 0): started
2021/07/08 16:51:42 scheduler task 8746c175 (flow e75028fb): loaded val<.=eb66ee9b 35.4MiB>
2021/07/08 16:51:42 scheduler task 8746c175 (flow e75028fb): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task 7709a29e (flow 20e26740): loaded val<.=3265a143 35.4MiB>
2021/07/08 16:51:42 scheduler task 5aa4bfc6 (flow e7565ce6): loaded val<.=fe9fff2b 35.4MiB>
2021/07/08 16:51:42 scheduler task 5aa4bfc6 (flow e7565ce6): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task 5bff4606 (flow 9474069c): loaded val<.=48df3672 35.4MiB>
2021/07/08 16:51:42 scheduler task d21168f4 (flow fb8de0c9): loaded val<.=267d1180 35.4MiB>
2021/07/08 16:51:42 scheduler task d21168f4 (flow fb8de0c9): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task 5e492d41 (flow ac9e3373): loaded val<.=4d4fb082 35.4MiB>
2021/07/08 16:51:42 scheduler task 5e492d41 (flow ac9e3373): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task 8ef79677 (flow e14892e7): waiting for completion (try 0): started
2021/07/08 16:51:42 scheduler task 331a85cb (flow e0813834): loaded val<.=65d7deff 35.4MiB>
2021/07/08 16:51:42 scheduler task 331a85cb (flow e0813834): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42  ->  n100.r04.s078.Main.out_file e14892e7 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:42 n100.r04.s078.Main.out_file e14892e7 n100/r04/n100.r04.s078.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ddd1afc4018442ce8cea58ec07b0ca5b4bd65c7744c54b4b8de9c59e502764d4
	sha256:e14892e7b60d7a66cd65de930019b43ff4e26b8c110378ba0f31f2ffadcc8280
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8ef796778e800e17f561cb353e7b5861c65056c0f7f6fed1f22cdd8f851351c2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s078_output"
	    wget -O "n100.r04.s078_output/n100.r04.s078.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s078_output/n100.r04.s078.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s078_output/n100.r04.s078.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s078_output/n100.r04.s078.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s078_output/n100.r04.s078.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s078_output/n100.r04.s078.reference.fas" "n100.r04.s078_output/n100.r04.s078.fq1.fastq" "n100.r04.s078_output/n100.r04.s078.fq2.fastq" | samtools view -bS - > "n100.r04.s078_output/n100.r04.s078.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s078_output/n100.r04.s078.untrimmed.sorted.bam" "n100.r04.s078_output/n100.r04.s078.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s078_output/n100.r04.s078.untrimmed.sorted.bam" -b "n100.r04.s078_output/n100.r04.s078.primers.bed" -p "n100.r04.s078_output/n100.r04.s078.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s078_output/n100.r04.s078.trimmed.sorted.bam" "n100.r04.s078_output/n100.r04.s078.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s078_output/n100.r04.s078.reference.fas" "n100.r04.s078_output/n100.r04.s078.trimmed.sorted.bam" > "n100.r04.s078_output/n100.r04.s078.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s078_output/n100.r04.s078.reference.fas" --call-indels "n100.r04.s078_output/n100.r04.s078.trimmed.sorted.bam" > "n100.r04.s078_output/n100.r04.s078.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s078_output/n100.r04.s078.trimmed.sorted.bam" > "n100.r04.s078_output/n100.r04.s078.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s078_output/n100.r04.s078.depth.txt" "n100.r04.s078_output/n100.r04.s078.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s078_output/n100.r04.s078.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s078_output/n100.r04.s078.reference.fas" | bcftools consensus -m "n100.r04.s078_output/n100.r04.s078.low_depth.tsv" tmp.vcf.gz > "n100.r04.s078_output/n100.r04.s078.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s078_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:42 scheduler task 0956178b (flow 5468f4a3): loaded val<.=38cd5010 35.4MiB>
2021/07/08 16:51:42 scheduler task 3bb8f0e4 (flow a324358a): loaded val<.=baccca8b 35.4MiB>
2021/07/08 16:51:42 scheduler task 0956178b (flow 5468f4a3): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task 3bb8f0e4 (flow a324358a): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task 8746c175 (flow e75028fb): submitting (try 0): started
2021/07/08 16:51:42 scheduler task ad833c50 (flow e08e8afe): loaded val<.=34aa8351 35.4MiB>
2021/07/08 16:51:42 scheduler task ad833c50 (flow e08e8afe): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task 5aa4bfc6 (flow e7565ce6): submitting (try 0): started
2021/07/08 16:51:42 scheduler task fc3e1467 (flow 1d35c114): loaded val<.=fc02fa41 35.4MiB>
2021/07/08 16:51:42 scheduler task 54f6f6fd (flow c54bfbbc): loaded val<.=360a9034 35.4MiB>
2021/07/08 16:51:42 scheduler task 54f6f6fd (flow c54bfbbc): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task d21168f4 (flow fb8de0c9): submitting (try 0): started
2021/07/08 16:51:42 scheduler task ecbdae4e (flow ea7c1d46): loaded val<.=5fc59d8f 35.4MiB>
2021/07/08 16:51:42 scheduler task ecbdae4e (flow ea7c1d46): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task 5e492d41 (flow ac9e3373): submitting (try 0): started
2021/07/08 16:51:42 scheduler task 1e419403 (flow 9b73f7e9): loaded val<.=d576e4d0 35.4MiB>
2021/07/08 16:51:42 scheduler task 1e419403 (flow 9b73f7e9): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task 5bbe9c3d (flow 5f50c423): loaded val<.=5429d183 35.4MiB>
2021/07/08 16:51:42 scheduler task 5bbe9c3d (flow 5f50c423): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task 331a85cb (flow e0813834): submitting (try 0): started
2021/07/08 16:51:42 scheduler task a9de6e84 (flow 38bba01c): loaded val<.=8175d17a 35.4MiB>
2021/07/08 16:51:42 scheduler task a9de6e84 (flow 38bba01c): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task 5337d60f (flow 1381d801): loaded val<.=577070b4 35.4MiB>
2021/07/08 16:51:42 scheduler task c3b5748c (flow c441a068): loaded val<.=c9346777 35.4MiB>
2021/07/08 16:51:42 scheduler task c3b5748c (flow c441a068): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task 0956178b (flow 5468f4a3): submitting (try 0): started
2021/07/08 16:51:42 scheduler task 3bb8f0e4 (flow a324358a): submitting (try 0): started
2021/07/08 16:51:42 scheduler task 5cd20acf (flow 77d99fec): loaded val<.=d2607697 35.4MiB>
2021/07/08 16:51:42 scheduler task fc3e1467 (flow 1d35c114): loaded val<.=e9142c4c 35.4MiB>
2021/07/08 16:51:42 scheduler task fc3e1467 (flow 1d35c114): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task 5cd20acf (flow 77d99fec): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task ad833c50 (flow e08e8afe): submitting (try 0): started
2021/07/08 16:51:42 scheduler task 54f6f6fd (flow c54bfbbc): submitting (try 0): started
2021/07/08 16:51:42 scheduler task 5947e81d (flow 57e39d90): loaded val<.=923ea57a 35.4MiB>
2021/07/08 16:51:42 scheduler task 5947e81d (flow 57e39d90): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task 4bae0b4d (flow 98c409bc): loaded val<.=515c3a99 35.4MiB>
2021/07/08 16:51:42 scheduler task 7a4dfaa4 (flow 47beba72): loaded val<.=70764f28 35.4MiB>
2021/07/08 16:51:42 scheduler task 7a4dfaa4 (flow 47beba72): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task 7709a29e (flow 20e26740): loaded val<.=a966d4a2 35.4MiB>
2021/07/08 16:51:42 scheduler task 7709a29e (flow 20e26740): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task f2ec5fa9 (flow 460aa300): loaded val<.=e1098135 35.4MiB>
2021/07/08 16:51:42 scheduler task 29c9d867 (flow 0f009068): loaded val<.=ab36b104 35.4MiB>
2021/07/08 16:51:42 scheduler task 29c9d867 (flow 0f009068): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task 0c8baa7d (flow ff8a339b): loaded val<.=70ee912b 35.4MiB>
2021/07/08 16:51:42 scheduler task 0c8baa7d (flow ff8a339b): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task ecbdae4e (flow ea7c1d46): submitting (try 0): started
2021/07/08 16:51:42 scheduler task 9a663e4e (flow 2d3488e5): loaded val<.=855be41b 35.4MiB>
2021/07/08 16:51:42 scheduler task 9a663e4e (flow 2d3488e5): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task 1e419403 (flow 9b73f7e9): submitting (try 0): started
2021/07/08 16:51:42 scheduler task cbcd17ff (flow 42a8a7f6): loaded val<.=e32e4614 35.4MiB>
2021/07/08 16:51:42 scheduler task cbcd17ff (flow 42a8a7f6): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task 5bbe9c3d (flow 5f50c423): submitting (try 0): started
2021/07/08 16:51:42 scheduler task 8a9bceb1 (flow 27523267): loaded val<.=7afa7349 35.4MiB>
2021/07/08 16:51:42 scheduler task 8a9bceb1 (flow 27523267): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task c8f7947e (flow a052354a): loaded val<.=85e604d9 35.4MiB>
2021/07/08 16:51:42 scheduler task c8f7947e (flow a052354a): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task 4bae0b4d (flow 98c409bc): loaded val<.=40480dbf 35.4MiB>
2021/07/08 16:51:42 scheduler task 4bae0b4d (flow 98c409bc): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task 737c1b6c (flow 39f0abce): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:42 scheduler task a818b8e8 (flow 1ca35c84): loaded val<.=035fd7b3 35.4MiB>
2021/07/08 16:51:42 scheduler task a818b8e8 (flow 1ca35c84): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task c3b5748c (flow c441a068): submitting (try 0): started
2021/07/08 16:51:42 scheduler task a9de6e84 (flow 38bba01c): submitting (try 0): started
2021/07/08 16:51:42 scheduler task fc3e1467 (flow 1d35c114): submitting (try 0): started
2021/07/08 16:51:42 scheduler task 5cd20acf (flow 77d99fec): submitting (try 0): started
2021/07/08 16:51:42 scheduler task 5947e81d (flow 57e39d90): submitting (try 0): started
2021/07/08 16:51:42 scheduler task 7a4dfaa4 (flow 47beba72): submitting (try 0): started
2021/07/08 16:51:42 scheduler task 7709a29e (flow 20e26740): submitting (try 0): started
2021/07/08 16:51:42 scheduler task 29c9d867 (flow 0f009068): submitting (try 0): started
2021/07/08 16:51:42 scheduler task 0c8baa7d (flow ff8a339b): submitting (try 0): started
2021/07/08 16:51:42 scheduler task 9a663e4e (flow 2d3488e5): submitting (try 0): started
2021/07/08 16:51:42 scheduler task 8a9bceb1 (flow 27523267): submitting (try 0): started
2021/07/08 16:51:42 scheduler task cbcd17ff (flow 42a8a7f6): submitting (try 0): started
2021/07/08 16:51:42 scheduler task c8f7947e (flow a052354a): submitting (try 0): started
2021/07/08 16:51:42 scheduler task 4bae0b4d (flow 98c409bc): submitting (try 0): started
2021/07/08 16:51:42 scheduler task 737c1b6c (flow 39f0abce): waiting for completion (try 0): started
2021/07/08 16:51:42 scheduler task a818b8e8 (flow 1ca35c84): submitting (try 0): started
2021/07/08 16:51:42  ->  n100.r04.s039.Main.out_file 39f0abce exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:42 n100.r04.s039.Main.out_file 39f0abce n100/r04/n100.r04.s039.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b16506bb115d3b30b72c5f35f23dac477746d190255ad5a8750eb54cedef44cd
	sha256:39f0abcebc92975f0c4d9d247c8eb7755cb6e67c7b12648ddf5a2428510e326e
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/737c1b6c766771783ea2989d100025f944435fe53bf0eb504c04357ab86a7b8b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s039_output"
	    wget -O "n100.r04.s039_output/n100.r04.s039.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s039_output/n100.r04.s039.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s039_output/n100.r04.s039.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s039_output/n100.r04.s039.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s039_output/n100.r04.s039.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s039_output/n100.r04.s039.reference.fas" "n100.r04.s039_output/n100.r04.s039.fq1.fastq" "n100.r04.s039_output/n100.r04.s039.fq2.fastq" | samtools view -bS - > "n100.r04.s039_output/n100.r04.s039.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s039_output/n100.r04.s039.untrimmed.sorted.bam" "n100.r04.s039_output/n100.r04.s039.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s039_output/n100.r04.s039.untrimmed.sorted.bam" -b "n100.r04.s039_output/n100.r04.s039.primers.bed" -p "n100.r04.s039_output/n100.r04.s039.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s039_output/n100.r04.s039.trimmed.sorted.bam" "n100.r04.s039_output/n100.r04.s039.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s039_output/n100.r04.s039.reference.fas" "n100.r04.s039_output/n100.r04.s039.trimmed.sorted.bam" > "n100.r04.s039_output/n100.r04.s039.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s039_output/n100.r04.s039.reference.fas" --call-indels "n100.r04.s039_output/n100.r04.s039.trimmed.sorted.bam" > "n100.r04.s039_output/n100.r04.s039.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s039_output/n100.r04.s039.trimmed.sorted.bam" > "n100.r04.s039_output/n100.r04.s039.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s039_output/n100.r04.s039.depth.txt" "n100.r04.s039_output/n100.r04.s039.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s039_output/n100.r04.s039.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s039_output/n100.r04.s039.reference.fas" | bcftools consensus -m "n100.r04.s039_output/n100.r04.s039.low_depth.tsv" tmp.vcf.gz > "n100.r04.s039_output/n100.r04.s039.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s039_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:42 scheduler task 5337d60f (flow 1381d801): loaded val<.=3980889d 35.4MiB>
2021/07/08 16:51:42 scheduler task 11856ee1 (flow 9941c680): loaded val<.=87721986 35.4MiB>
2021/07/08 16:51:42 scheduler task 5bff4606 (flow 9474069c): loaded val<.=a2677a63 35.4MiB>
2021/07/08 16:51:42 scheduler task 4b88dfbe (flow 5d1a913d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:42 scheduler task 1630f0a4 (flow f5f175a1): loaded val<.=70cf345c 35.4MiB>
2021/07/08 16:51:42 scheduler task 7ed73c0a (flow 610b915e): loaded val<.=d42ae2ba 35.4MiB>
2021/07/08 16:51:42 scheduler task 7ed73c0a (flow 610b915e): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task 32101954 (flow f9878803): loaded val<.=7baaa1f1 35.4MiB>
2021/07/08 16:51:42 scheduler task 32101954 (flow f9878803): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task 1630f0a4 (flow f5f175a1): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task 5bff4606 (flow 9474069c): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task da5603da (flow f97f1e63): loaded val<.=2eac6f27 35.4MiB>
2021/07/08 16:51:42 scheduler task da5603da (flow f97f1e63): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task 5da77f67 (flow 71f05c8c): loaded val<.=7ac3a1ba 35.4MiB>
2021/07/08 16:51:42 scheduler task 5da77f67 (flow 71f05c8c): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task 176e8b91 (flow 0d7bf897): loaded val<.=d614a0a3 35.4MiB>
2021/07/08 16:51:42 scheduler task 176e8b91 (flow 0d7bf897): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task faa7be58 (flow 5f9e75c1): loaded val<.=cae3bc21 35.4MiB>
2021/07/08 16:51:42 scheduler task faa7be58 (flow 5f9e75c1): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task 5337d60f (flow 1381d801): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task 11856ee1 (flow 9941c680): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task 4416f8fe (flow ac3a0076): loaded val<.=b1857df9 35.4MiB>
2021/07/08 16:51:42 scheduler task f2ec5fa9 (flow 460aa300): loaded val<.=bae40d71 35.4MiB>
2021/07/08 16:51:42 scheduler task f2ec5fa9 (flow 460aa300): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task eee3329a (flow 7d1757b7): loaded val<.=b669f707 35.4MiB>
2021/07/08 16:51:42 scheduler task eee3329a (flow 7d1757b7): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task b838e67f (flow f8ffa904): loaded val<.=8b959680 35.4MiB>
2021/07/08 16:51:42 scheduler task ce0306d2 (flow f3a54b9e): loaded val<.=2ca73d1c 35.4MiB>
2021/07/08 16:51:42 scheduler task 26683aa0 (flow fc9dabef): loaded val<.=b591c56d 35.4MiB>
2021/07/08 16:51:42 scheduler task 26683aa0 (flow fc9dabef): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task b838e67f (flow f8ffa904): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task ce0306d2 (flow f3a54b9e): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task 4416f8fe (flow ac3a0076): loading (try 0): successful, next state: submitting
2021/07/08 16:51:42 scheduler task 4b88dfbe (flow 5d1a913d): waiting for completion (try 0): started
2021/07/08 16:51:42  ->  n100.r04.s022.Main.out_file 5d1a913d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:42 n100.r04.s022.Main.out_file 5d1a913d n100/r04/n100.r04.s022.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3416efbafcec434b2355f50e566b0d3adfe3a296bd3d8dd3f1b4ce037550b092
	sha256:5d1a913d91cd9a09df1969bfa73535a7dc4e61bc8eb9423e4cfa28eba545d2e5
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4b88dfbec3e64d6bd896504558602c2c45009d40ae2af0b1129ca19d52eb4ca1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s022_output"
	    wget -O "n100.r04.s022_output/n100.r04.s022.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s022_output/n100.r04.s022.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s022_output/n100.r04.s022.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s022_output/n100.r04.s022.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s022_output/n100.r04.s022.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s022_output/n100.r04.s022.reference.fas" "n100.r04.s022_output/n100.r04.s022.fq1.fastq" "n100.r04.s022_output/n100.r04.s022.fq2.fastq" | samtools view -bS - > "n100.r04.s022_output/n100.r04.s022.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s022_output/n100.r04.s022.untrimmed.sorted.bam" "n100.r04.s022_output/n100.r04.s022.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s022_output/n100.r04.s022.untrimmed.sorted.bam" -b "n100.r04.s022_output/n100.r04.s022.primers.bed" -p "n100.r04.s022_output/n100.r04.s022.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s022_output/n100.r04.s022.trimmed.sorted.bam" "n100.r04.s022_output/n100.r04.s022.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s022_output/n100.r04.s022.reference.fas" "n100.r04.s022_output/n100.r04.s022.trimmed.sorted.bam" > "n100.r04.s022_output/n100.r04.s022.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s022_output/n100.r04.s022.reference.fas" --call-indels "n100.r04.s022_output/n100.r04.s022.trimmed.sorted.bam" > "n100.r04.s022_output/n100.r04.s022.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s022_output/n100.r04.s022.trimmed.sorted.bam" > "n100.r04.s022_output/n100.r04.s022.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s022_output/n100.r04.s022.depth.txt" "n100.r04.s022_output/n100.r04.s022.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s022_output/n100.r04.s022.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s022_output/n100.r04.s022.reference.fas" | bcftools consensus -m "n100.r04.s022_output/n100.r04.s022.low_depth.tsv" tmp.vcf.gz > "n100.r04.s022_output/n100.r04.s022.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s022_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:42 scheduler task 7ed73c0a (flow 610b915e): submitting (try 0): started
2021/07/08 16:51:42 scheduler task 32101954 (flow f9878803): submitting (try 0): started
2021/07/08 16:51:42 scheduler task 1630f0a4 (flow f5f175a1): submitting (try 0): started
2021/07/08 16:51:42 scheduler task 82963780 (flow 5fa19d0c): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:42 scheduler task 5bff4606 (flow 9474069c): submitting (try 0): started
2021/07/08 16:51:42 scheduler task da5603da (flow f97f1e63): submitting (try 0): started
2021/07/08 16:51:42 scheduler task 5da77f67 (flow 71f05c8c): submitting (try 0): started
2021/07/08 16:51:42 scheduler task 176e8b91 (flow 0d7bf897): submitting (try 0): started
2021/07/08 16:51:42 scheduler task faa7be58 (flow 5f9e75c1): submitting (try 0): started
2021/07/08 16:51:42 scheduler task 5337d60f (flow 1381d801): submitting (try 0): started
2021/07/08 16:51:42 scheduler task 11856ee1 (flow 9941c680): submitting (try 0): started
2021/07/08 16:51:42 scheduler task f2ec5fa9 (flow 460aa300): submitting (try 0): started
2021/07/08 16:51:42 scheduler task eee3329a (flow 7d1757b7): submitting (try 0): started
2021/07/08 16:51:42 scheduler task 26683aa0 (flow fc9dabef): submitting (try 0): started
2021/07/08 16:51:42 scheduler task b838e67f (flow f8ffa904): submitting (try 0): started
2021/07/08 16:51:42 scheduler task ce0306d2 (flow f3a54b9e): submitting (try 0): started
2021/07/08 16:51:42 scheduler task 4416f8fe (flow ac3a0076): submitting (try 0): started
2021/07/08 16:51:42 scheduler task 82963780 (flow 5fa19d0c): waiting for completion (try 0): started
2021/07/08 16:51:42  ->  n100.r04.s098.Main.out_file 5fa19d0c exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:42 n100.r04.s098.Main.out_file 5fa19d0c n100/r04/n100.r04.s098.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c0a2f31623ce6770915a9276acb75e67784deb49ed200389e465e0d1d2ba5075
	sha256:5fa19d0c2984e42c6b10673f44f6c83e2911257d654c8e867e7af87c0a9e46ef
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/829637807022f12a3077730b2a58fb7efbb2e45ebbf8818ee656dd37cbd2d0cf
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s098_output"
	    wget -O "n100.r04.s098_output/n100.r04.s098.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s098_output/n100.r04.s098.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s098_output/n100.r04.s098.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s098_output/n100.r04.s098.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s098_output/n100.r04.s098.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s098_output/n100.r04.s098.reference.fas" "n100.r04.s098_output/n100.r04.s098.fq1.fastq" "n100.r04.s098_output/n100.r04.s098.fq2.fastq" | samtools view -bS - > "n100.r04.s098_output/n100.r04.s098.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s098_output/n100.r04.s098.untrimmed.sorted.bam" "n100.r04.s098_output/n100.r04.s098.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s098_output/n100.r04.s098.untrimmed.sorted.bam" -b "n100.r04.s098_output/n100.r04.s098.primers.bed" -p "n100.r04.s098_output/n100.r04.s098.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s098_output/n100.r04.s098.trimmed.sorted.bam" "n100.r04.s098_output/n100.r04.s098.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s098_output/n100.r04.s098.reference.fas" "n100.r04.s098_output/n100.r04.s098.trimmed.sorted.bam" > "n100.r04.s098_output/n100.r04.s098.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s098_output/n100.r04.s098.reference.fas" --call-indels "n100.r04.s098_output/n100.r04.s098.trimmed.sorted.bam" > "n100.r04.s098_output/n100.r04.s098.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s098_output/n100.r04.s098.trimmed.sorted.bam" > "n100.r04.s098_output/n100.r04.s098.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s098_output/n100.r04.s098.depth.txt" "n100.r04.s098_output/n100.r04.s098.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s098_output/n100.r04.s098.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s098_output/n100.r04.s098.reference.fas" | bcftools consensus -m "n100.r04.s098_output/n100.r04.s098.low_depth.tsv" tmp.vcf.gz > "n100.r04.s098_output/n100.r04.s098.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s098_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:42 scheduler task 84a55080 (flow d93a17b8): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:42 scheduler task 84a55080 (flow d93a17b8): waiting for completion (try 0): started
2021/07/08 16:51:42  ->  n100.r04.s049.Main.out_file d93a17b8 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:42 n100.r04.s049.Main.out_file d93a17b8 n100/r04/n100.r04.s049.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:85aa3478242a8a1f6b848eea95cee62370c3b873365f4ed5dd173994e3264a55
	sha256:d93a17b8bed252b1d062c15e284565351d26fe56e5845495f2b49e72da85ae0d
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/84a55080980fd5568a59d99c0b62776090171711e949b0a66a7805ae04e4df32
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s049_output"
	    wget -O "n100.r04.s049_output/n100.r04.s049.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s049_output/n100.r04.s049.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s049_output/n100.r04.s049.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s049_output/n100.r04.s049.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s049_output/n100.r04.s049.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s049_output/n100.r04.s049.reference.fas" "n100.r04.s049_output/n100.r04.s049.fq1.fastq" "n100.r04.s049_output/n100.r04.s049.fq2.fastq" | samtools view -bS - > "n100.r04.s049_output/n100.r04.s049.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s049_output/n100.r04.s049.untrimmed.sorted.bam" "n100.r04.s049_output/n100.r04.s049.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s049_output/n100.r04.s049.untrimmed.sorted.bam" -b "n100.r04.s049_output/n100.r04.s049.primers.bed" -p "n100.r04.s049_output/n100.r04.s049.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s049_output/n100.r04.s049.trimmed.sorted.bam" "n100.r04.s049_output/n100.r04.s049.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s049_output/n100.r04.s049.reference.fas" "n100.r04.s049_output/n100.r04.s049.trimmed.sorted.bam" > "n100.r04.s049_output/n100.r04.s049.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s049_output/n100.r04.s049.reference.fas" --call-indels "n100.r04.s049_output/n100.r04.s049.trimmed.sorted.bam" > "n100.r04.s049_output/n100.r04.s049.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s049_output/n100.r04.s049.trimmed.sorted.bam" > "n100.r04.s049_output/n100.r04.s049.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s049_output/n100.r04.s049.depth.txt" "n100.r04.s049_output/n100.r04.s049.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s049_output/n100.r04.s049.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s049_output/n100.r04.s049.reference.fas" | bcftools consensus -m "n100.r04.s049_output/n100.r04.s049.low_depth.tsv" tmp.vcf.gz > "n100.r04.s049_output/n100.r04.s049.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s049_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:43 scheduler task 5aa3253c (flow c8481164): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:43 scheduler task 5aa3253c (flow c8481164): waiting for completion (try 0): started
2021/07/08 16:51:43  ->  n100.r04.s096.Main.out_file c8481164 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:43 n100.r04.s096.Main.out_file c8481164 n100/r04/n100.r04.s096.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b68b1e8c30719f4cd33df520b367f02723ed3312f76757c251ebc7000f25bb92
	sha256:c84811643b583654862b37c992d49d0d8f51f4e88c3440e4bd48cbb4eb4f0142
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5aa3253c34616e6a74112043764f017f61c40a020263f3e2d6210fe6089fc389
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s096_output"
	    wget -O "n100.r04.s096_output/n100.r04.s096.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s096_output/n100.r04.s096.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s096_output/n100.r04.s096.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s096_output/n100.r04.s096.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s096_output/n100.r04.s096.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s096_output/n100.r04.s096.reference.fas" "n100.r04.s096_output/n100.r04.s096.fq1.fastq" "n100.r04.s096_output/n100.r04.s096.fq2.fastq" | samtools view -bS - > "n100.r04.s096_output/n100.r04.s096.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s096_output/n100.r04.s096.untrimmed.sorted.bam" "n100.r04.s096_output/n100.r04.s096.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s096_output/n100.r04.s096.untrimmed.sorted.bam" -b "n100.r04.s096_output/n100.r04.s096.primers.bed" -p "n100.r04.s096_output/n100.r04.s096.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s096_output/n100.r04.s096.trimmed.sorted.bam" "n100.r04.s096_output/n100.r04.s096.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s096_output/n100.r04.s096.reference.fas" "n100.r04.s096_output/n100.r04.s096.trimmed.sorted.bam" > "n100.r04.s096_output/n100.r04.s096.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s096_output/n100.r04.s096.reference.fas" --call-indels "n100.r04.s096_output/n100.r04.s096.trimmed.sorted.bam" > "n100.r04.s096_output/n100.r04.s096.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s096_output/n100.r04.s096.trimmed.sorted.bam" > "n100.r04.s096_output/n100.r04.s096.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s096_output/n100.r04.s096.depth.txt" "n100.r04.s096_output/n100.r04.s096.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s096_output/n100.r04.s096.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s096_output/n100.r04.s096.reference.fas" | bcftools consensus -m "n100.r04.s096_output/n100.r04.s096.low_depth.tsv" tmp.vcf.gz > "n100.r04.s096_output/n100.r04.s096.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s096_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:43 scheduler task 9fa868bc (flow 0bb0e047): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:43 scheduler task 15255f8b (flow 47dc9646): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:43 scheduler task 9fa868bc (flow 0bb0e047): waiting for completion (try 0): started
2021/07/08 16:51:43  ->  n100.r04.s037.Main.out_file 0bb0e047 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:43 n100.r04.s037.Main.out_file 0bb0e047 n100/r04/n100.r04.s037.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:23c7e72306aaaf81f8d31e5ca598b6d7d9b362a59c06bf7956fd7dd292e20864
	sha256:0bb0e0478edfc9167d568df7fcc941a41072ee0dc6ef02c6ca14c29242ee993c
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9fa868bc5bc949a7641e16f08b9220b4a1c68b8d2d5c5e114760f6d93c982330
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s037_output"
	    wget -O "n100.r04.s037_output/n100.r04.s037.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s037_output/n100.r04.s037.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s037_output/n100.r04.s037.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s037_output/n100.r04.s037.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s037_output/n100.r04.s037.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s037_output/n100.r04.s037.reference.fas" "n100.r04.s037_output/n100.r04.s037.fq1.fastq" "n100.r04.s037_output/n100.r04.s037.fq2.fastq" | samtools view -bS - > "n100.r04.s037_output/n100.r04.s037.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s037_output/n100.r04.s037.untrimmed.sorted.bam" "n100.r04.s037_output/n100.r04.s037.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s037_output/n100.r04.s037.untrimmed.sorted.bam" -b "n100.r04.s037_output/n100.r04.s037.primers.bed" -p "n100.r04.s037_output/n100.r04.s037.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s037_output/n100.r04.s037.trimmed.sorted.bam" "n100.r04.s037_output/n100.r04.s037.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s037_output/n100.r04.s037.reference.fas" "n100.r04.s037_output/n100.r04.s037.trimmed.sorted.bam" > "n100.r04.s037_output/n100.r04.s037.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s037_output/n100.r04.s037.reference.fas" --call-indels "n100.r04.s037_output/n100.r04.s037.trimmed.sorted.bam" > "n100.r04.s037_output/n100.r04.s037.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s037_output/n100.r04.s037.trimmed.sorted.bam" > "n100.r04.s037_output/n100.r04.s037.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s037_output/n100.r04.s037.depth.txt" "n100.r04.s037_output/n100.r04.s037.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s037_output/n100.r04.s037.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s037_output/n100.r04.s037.reference.fas" | bcftools consensus -m "n100.r04.s037_output/n100.r04.s037.low_depth.tsv" tmp.vcf.gz > "n100.r04.s037_output/n100.r04.s037.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s037_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:43 scheduler task 15255f8b (flow 47dc9646): waiting for completion (try 0): started
2021/07/08 16:51:43  ->  n100.r04.s029.Main.out_file 47dc9646 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:43 n100.r04.s029.Main.out_file 47dc9646 n100/r04/n100.r04.s029.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7540ea1bfde9b72db519e1349a9277bd700a48e66eadc93d30eb6644565a3c4f
	sha256:47dc9646d266ddb8bd767df50f17b550115b85f566be31347d0585e458395f72
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/15255f8be0e2a964d81c44f0b0182a7ade01c984abf8f48e8ef25455728e91f6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s029_output"
	    wget -O "n100.r04.s029_output/n100.r04.s029.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s029_output/n100.r04.s029.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s029_output/n100.r04.s029.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s029_output/n100.r04.s029.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s029_output/n100.r04.s029.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s029_output/n100.r04.s029.reference.fas" "n100.r04.s029_output/n100.r04.s029.fq1.fastq" "n100.r04.s029_output/n100.r04.s029.fq2.fastq" | samtools view -bS - > "n100.r04.s029_output/n100.r04.s029.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s029_output/n100.r04.s029.untrimmed.sorted.bam" "n100.r04.s029_output/n100.r04.s029.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s029_output/n100.r04.s029.untrimmed.sorted.bam" -b "n100.r04.s029_output/n100.r04.s029.primers.bed" -p "n100.r04.s029_output/n100.r04.s029.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s029_output/n100.r04.s029.trimmed.sorted.bam" "n100.r04.s029_output/n100.r04.s029.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s029_output/n100.r04.s029.reference.fas" "n100.r04.s029_output/n100.r04.s029.trimmed.sorted.bam" > "n100.r04.s029_output/n100.r04.s029.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s029_output/n100.r04.s029.reference.fas" --call-indels "n100.r04.s029_output/n100.r04.s029.trimmed.sorted.bam" > "n100.r04.s029_output/n100.r04.s029.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s029_output/n100.r04.s029.trimmed.sorted.bam" > "n100.r04.s029_output/n100.r04.s029.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s029_output/n100.r04.s029.depth.txt" "n100.r04.s029_output/n100.r04.s029.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s029_output/n100.r04.s029.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s029_output/n100.r04.s029.reference.fas" | bcftools consensus -m "n100.r04.s029_output/n100.r04.s029.low_depth.tsv" tmp.vcf.gz > "n100.r04.s029_output/n100.r04.s029.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s029_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:43 scheduler task 81360b45 (flow 5c0f0936): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:43 scheduler task 81360b45 (flow 5c0f0936): waiting for completion (try 0): started
2021/07/08 16:51:43  ->  n100.r04.s031.Main.out_file 5c0f0936 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:43 n100.r04.s031.Main.out_file 5c0f0936 n100/r04/n100.r04.s031.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e70d2ce6db3bf59bd446cb25a29ecb1e92c16c5f5a5944639ab642fc40679904
	sha256:5c0f0936f1299d4bd517e29fa0a000277e4f0999f392de7847f605e2760e93aa
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/81360b45ceba92ae43507c7da19947eb43bad0016f64bc2d30671425f7df8338
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s031_output"
	    wget -O "n100.r04.s031_output/n100.r04.s031.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s031_output/n100.r04.s031.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s031_output/n100.r04.s031.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s031_output/n100.r04.s031.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s031_output/n100.r04.s031.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s031_output/n100.r04.s031.reference.fas" "n100.r04.s031_output/n100.r04.s031.fq1.fastq" "n100.r04.s031_output/n100.r04.s031.fq2.fastq" | samtools view -bS - > "n100.r04.s031_output/n100.r04.s031.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s031_output/n100.r04.s031.untrimmed.sorted.bam" "n100.r04.s031_output/n100.r04.s031.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s031_output/n100.r04.s031.untrimmed.sorted.bam" -b "n100.r04.s031_output/n100.r04.s031.primers.bed" -p "n100.r04.s031_output/n100.r04.s031.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s031_output/n100.r04.s031.trimmed.sorted.bam" "n100.r04.s031_output/n100.r04.s031.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s031_output/n100.r04.s031.reference.fas" "n100.r04.s031_output/n100.r04.s031.trimmed.sorted.bam" > "n100.r04.s031_output/n100.r04.s031.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s031_output/n100.r04.s031.reference.fas" --call-indels "n100.r04.s031_output/n100.r04.s031.trimmed.sorted.bam" > "n100.r04.s031_output/n100.r04.s031.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s031_output/n100.r04.s031.trimmed.sorted.bam" > "n100.r04.s031_output/n100.r04.s031.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s031_output/n100.r04.s031.depth.txt" "n100.r04.s031_output/n100.r04.s031.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s031_output/n100.r04.s031.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s031_output/n100.r04.s031.reference.fas" | bcftools consensus -m "n100.r04.s031_output/n100.r04.s031.low_depth.tsv" tmp.vcf.gz > "n100.r04.s031_output/n100.r04.s031.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s031_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:43 scheduler task f8b9105e (flow 99c56457): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:43 scheduler task f8b9105e (flow 99c56457): waiting for completion (try 0): started
2021/07/08 16:51:43  ->  n100.r04.s048.Main.out_file 99c56457 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:43 n100.r04.s048.Main.out_file 99c56457 n100/r04/n100.r04.s048.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b2a0085ff4330aae64a9efcdb2c5d15dff522e66b9c628477f13953d4fd0e88e
	sha256:99c564578776f8f9727ab1ac45790576048fdfb821dbd9f2b584bd2c91cedc7a
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f8b9105e9e95c7d3867f83d3fbca53e6f9cfadcc455ecaa970a6f85786ed034f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s048_output"
	    wget -O "n100.r04.s048_output/n100.r04.s048.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s048_output/n100.r04.s048.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s048_output/n100.r04.s048.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s048_output/n100.r04.s048.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s048_output/n100.r04.s048.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s048_output/n100.r04.s048.reference.fas" "n100.r04.s048_output/n100.r04.s048.fq1.fastq" "n100.r04.s048_output/n100.r04.s048.fq2.fastq" | samtools view -bS - > "n100.r04.s048_output/n100.r04.s048.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s048_output/n100.r04.s048.untrimmed.sorted.bam" "n100.r04.s048_output/n100.r04.s048.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s048_output/n100.r04.s048.untrimmed.sorted.bam" -b "n100.r04.s048_output/n100.r04.s048.primers.bed" -p "n100.r04.s048_output/n100.r04.s048.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s048_output/n100.r04.s048.trimmed.sorted.bam" "n100.r04.s048_output/n100.r04.s048.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s048_output/n100.r04.s048.reference.fas" "n100.r04.s048_output/n100.r04.s048.trimmed.sorted.bam" > "n100.r04.s048_output/n100.r04.s048.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s048_output/n100.r04.s048.reference.fas" --call-indels "n100.r04.s048_output/n100.r04.s048.trimmed.sorted.bam" > "n100.r04.s048_output/n100.r04.s048.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s048_output/n100.r04.s048.trimmed.sorted.bam" > "n100.r04.s048_output/n100.r04.s048.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s048_output/n100.r04.s048.depth.txt" "n100.r04.s048_output/n100.r04.s048.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s048_output/n100.r04.s048.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s048_output/n100.r04.s048.reference.fas" | bcftools consensus -m "n100.r04.s048_output/n100.r04.s048.low_depth.tsv" tmp.vcf.gz > "n100.r04.s048_output/n100.r04.s048.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s048_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:43 scheduler task 21d2711e (flow a8490785): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:43 scheduler task 21d2711e (flow a8490785): waiting for completion (try 0): started
2021/07/08 16:51:43  ->  n100.r04.s094.Main.out_file a8490785 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:43 n100.r04.s094.Main.out_file a8490785 n100/r04/n100.r04.s094.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9aa406ea749e62b0dbf8728e781c221941cb959241dc663a4d2f962c7a32e7ce
	sha256:a8490785be5812918098b63ccb195a91029729d077bc3d224aa07a2a07b360ad
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/21d2711e485d99da13105d8460d89b4235de1a1e997f481fdf27210c8ab17e2f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s094_output"
	    wget -O "n100.r04.s094_output/n100.r04.s094.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s094_output/n100.r04.s094.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s094_output/n100.r04.s094.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s094_output/n100.r04.s094.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s094_output/n100.r04.s094.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s094_output/n100.r04.s094.reference.fas" "n100.r04.s094_output/n100.r04.s094.fq1.fastq" "n100.r04.s094_output/n100.r04.s094.fq2.fastq" | samtools view -bS - > "n100.r04.s094_output/n100.r04.s094.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s094_output/n100.r04.s094.untrimmed.sorted.bam" "n100.r04.s094_output/n100.r04.s094.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s094_output/n100.r04.s094.untrimmed.sorted.bam" -b "n100.r04.s094_output/n100.r04.s094.primers.bed" -p "n100.r04.s094_output/n100.r04.s094.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s094_output/n100.r04.s094.trimmed.sorted.bam" "n100.r04.s094_output/n100.r04.s094.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s094_output/n100.r04.s094.reference.fas" "n100.r04.s094_output/n100.r04.s094.trimmed.sorted.bam" > "n100.r04.s094_output/n100.r04.s094.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s094_output/n100.r04.s094.reference.fas" --call-indels "n100.r04.s094_output/n100.r04.s094.trimmed.sorted.bam" > "n100.r04.s094_output/n100.r04.s094.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s094_output/n100.r04.s094.trimmed.sorted.bam" > "n100.r04.s094_output/n100.r04.s094.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s094_output/n100.r04.s094.depth.txt" "n100.r04.s094_output/n100.r04.s094.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s094_output/n100.r04.s094.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s094_output/n100.r04.s094.reference.fas" | bcftools consensus -m "n100.r04.s094_output/n100.r04.s094.low_depth.tsv" tmp.vcf.gz > "n100.r04.s094_output/n100.r04.s094.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s094_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:43 scheduler task 7ab39a0f (flow 017350a1): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:44 scheduler task 7ab39a0f (flow 017350a1): waiting for completion (try 0): started
2021/07/08 16:51:44  ->  n100.r04.s027.Main.out_file 017350a1 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:44 n100.r04.s027.Main.out_file 017350a1 n100/r04/n100.r04.s027.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:60cebab65f6dccc86591012771ae311eaa426959b1e8e811805ef98dacb33b67
	sha256:017350a177325e94ee23436129d21a7cff487bdb020c75453442cdc4816479c6
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7ab39a0f72c6cb1aaec49a494510819ba03de2ee0054932143eff4158b87902c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s027_output"
	    wget -O "n100.r04.s027_output/n100.r04.s027.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s027_output/n100.r04.s027.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s027_output/n100.r04.s027.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s027_output/n100.r04.s027.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s027_output/n100.r04.s027.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s027_output/n100.r04.s027.reference.fas" "n100.r04.s027_output/n100.r04.s027.fq1.fastq" "n100.r04.s027_output/n100.r04.s027.fq2.fastq" | samtools view -bS - > "n100.r04.s027_output/n100.r04.s027.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s027_output/n100.r04.s027.untrimmed.sorted.bam" "n100.r04.s027_output/n100.r04.s027.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s027_output/n100.r04.s027.untrimmed.sorted.bam" -b "n100.r04.s027_output/n100.r04.s027.primers.bed" -p "n100.r04.s027_output/n100.r04.s027.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s027_output/n100.r04.s027.trimmed.sorted.bam" "n100.r04.s027_output/n100.r04.s027.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s027_output/n100.r04.s027.reference.fas" "n100.r04.s027_output/n100.r04.s027.trimmed.sorted.bam" > "n100.r04.s027_output/n100.r04.s027.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s027_output/n100.r04.s027.reference.fas" --call-indels "n100.r04.s027_output/n100.r04.s027.trimmed.sorted.bam" > "n100.r04.s027_output/n100.r04.s027.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s027_output/n100.r04.s027.trimmed.sorted.bam" > "n100.r04.s027_output/n100.r04.s027.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s027_output/n100.r04.s027.depth.txt" "n100.r04.s027_output/n100.r04.s027.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s027_output/n100.r04.s027.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s027_output/n100.r04.s027.reference.fas" | bcftools consensus -m "n100.r04.s027_output/n100.r04.s027.low_depth.tsv" tmp.vcf.gz > "n100.r04.s027_output/n100.r04.s027.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s027_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:44 scheduler task ed42d1d8 (flow ec834335): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:44 scheduler task ed42d1d8 (flow ec834335): waiting for completion (try 0): started
2021/07/08 16:51:44  ->  n100.r04.s025.Main.out_file ec834335 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:44 n100.r04.s025.Main.out_file ec834335 n100/r04/n100.r04.s025.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0da2de30ec60a6aff0cdf14264738c146242031c0e50e0b4d18325816fc0ec61
	sha256:ec834335aed6798f6e35205b1544fe290d112b5510a1df4af4f1562035b15d2a
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ed42d1d8559b977cb9bd57ccd5d2227929fe9d40b87db2876c990ca8cda4b5a6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s025_output"
	    wget -O "n100.r04.s025_output/n100.r04.s025.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s025_output/n100.r04.s025.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s025_output/n100.r04.s025.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s025_output/n100.r04.s025.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s025_output/n100.r04.s025.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s025_output/n100.r04.s025.reference.fas" "n100.r04.s025_output/n100.r04.s025.fq1.fastq" "n100.r04.s025_output/n100.r04.s025.fq2.fastq" | samtools view -bS - > "n100.r04.s025_output/n100.r04.s025.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s025_output/n100.r04.s025.untrimmed.sorted.bam" "n100.r04.s025_output/n100.r04.s025.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s025_output/n100.r04.s025.untrimmed.sorted.bam" -b "n100.r04.s025_output/n100.r04.s025.primers.bed" -p "n100.r04.s025_output/n100.r04.s025.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s025_output/n100.r04.s025.trimmed.sorted.bam" "n100.r04.s025_output/n100.r04.s025.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s025_output/n100.r04.s025.reference.fas" "n100.r04.s025_output/n100.r04.s025.trimmed.sorted.bam" > "n100.r04.s025_output/n100.r04.s025.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s025_output/n100.r04.s025.reference.fas" --call-indels "n100.r04.s025_output/n100.r04.s025.trimmed.sorted.bam" > "n100.r04.s025_output/n100.r04.s025.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s025_output/n100.r04.s025.trimmed.sorted.bam" > "n100.r04.s025_output/n100.r04.s025.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s025_output/n100.r04.s025.depth.txt" "n100.r04.s025_output/n100.r04.s025.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s025_output/n100.r04.s025.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s025_output/n100.r04.s025.reference.fas" | bcftools consensus -m "n100.r04.s025_output/n100.r04.s025.low_depth.tsv" tmp.vcf.gz > "n100.r04.s025_output/n100.r04.s025.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s025_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:44 scheduler task d4a3dec7 (flow 86ee751d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:44 scheduler task d4a3dec7 (flow 86ee751d): waiting for completion (try 0): started
2021/07/08 16:51:44  ->  n100.r04.s044.Main.out_file 86ee751d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:44 n100.r04.s044.Main.out_file 86ee751d n100/r04/n100.r04.s044.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b5871b03706569d3a2bccfe79db79f4b096f4632ea3456eee1176b06a9cc94ae
	sha256:86ee751d9d90a7d75c6952a61ed9af114ce920a4d683a6aeb5fdd73c8a078c48
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d4a3dec7b2f25e7b596f1c6aeb5e7e232528868d7baa646fe2f8bd4a78fcdf3b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s044_output"
	    wget -O "n100.r04.s044_output/n100.r04.s044.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s044_output/n100.r04.s044.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s044_output/n100.r04.s044.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s044_output/n100.r04.s044.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s044_output/n100.r04.s044.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s044_output/n100.r04.s044.reference.fas" "n100.r04.s044_output/n100.r04.s044.fq1.fastq" "n100.r04.s044_output/n100.r04.s044.fq2.fastq" | samtools view -bS - > "n100.r04.s044_output/n100.r04.s044.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s044_output/n100.r04.s044.untrimmed.sorted.bam" "n100.r04.s044_output/n100.r04.s044.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s044_output/n100.r04.s044.untrimmed.sorted.bam" -b "n100.r04.s044_output/n100.r04.s044.primers.bed" -p "n100.r04.s044_output/n100.r04.s044.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s044_output/n100.r04.s044.trimmed.sorted.bam" "n100.r04.s044_output/n100.r04.s044.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s044_output/n100.r04.s044.reference.fas" "n100.r04.s044_output/n100.r04.s044.trimmed.sorted.bam" > "n100.r04.s044_output/n100.r04.s044.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s044_output/n100.r04.s044.reference.fas" --call-indels "n100.r04.s044_output/n100.r04.s044.trimmed.sorted.bam" > "n100.r04.s044_output/n100.r04.s044.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s044_output/n100.r04.s044.trimmed.sorted.bam" > "n100.r04.s044_output/n100.r04.s044.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s044_output/n100.r04.s044.depth.txt" "n100.r04.s044_output/n100.r04.s044.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s044_output/n100.r04.s044.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s044_output/n100.r04.s044.reference.fas" | bcftools consensus -m "n100.r04.s044_output/n100.r04.s044.low_depth.tsv" tmp.vcf.gz > "n100.r04.s044_output/n100.r04.s044.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s044_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:44 scheduler task 44129759 (flow 5eef48c8): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:44 scheduler task 44129759 (flow 5eef48c8): waiting for completion (try 0): started
2021/07/08 16:51:44  ->  n100.r04.s035.Main.out_file 5eef48c8 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:44 n100.r04.s035.Main.out_file 5eef48c8 n100/r04/n100.r04.s035.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2b74bca4a40b49ce87aa172fe9664eb6aefb78a1dd26660023ebd287234967a7
	sha256:5eef48c862f416c3f6ab426f2d5fbec5eb8b1c1ca392e934612bc717f5db532f
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4412975927e546d3746d9dbf0d9ede233a4358dd53a06c2dc07bd1777bbe34ae
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s035_output"
	    wget -O "n100.r04.s035_output/n100.r04.s035.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s035_output/n100.r04.s035.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s035_output/n100.r04.s035.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s035_output/n100.r04.s035.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s035_output/n100.r04.s035.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s035_output/n100.r04.s035.reference.fas" "n100.r04.s035_output/n100.r04.s035.fq1.fastq" "n100.r04.s035_output/n100.r04.s035.fq2.fastq" | samtools view -bS - > "n100.r04.s035_output/n100.r04.s035.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s035_output/n100.r04.s035.untrimmed.sorted.bam" "n100.r04.s035_output/n100.r04.s035.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s035_output/n100.r04.s035.untrimmed.sorted.bam" -b "n100.r04.s035_output/n100.r04.s035.primers.bed" -p "n100.r04.s035_output/n100.r04.s035.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s035_output/n100.r04.s035.trimmed.sorted.bam" "n100.r04.s035_output/n100.r04.s035.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s035_output/n100.r04.s035.reference.fas" "n100.r04.s035_output/n100.r04.s035.trimmed.sorted.bam" > "n100.r04.s035_output/n100.r04.s035.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s035_output/n100.r04.s035.reference.fas" --call-indels "n100.r04.s035_output/n100.r04.s035.trimmed.sorted.bam" > "n100.r04.s035_output/n100.r04.s035.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s035_output/n100.r04.s035.trimmed.sorted.bam" > "n100.r04.s035_output/n100.r04.s035.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s035_output/n100.r04.s035.depth.txt" "n100.r04.s035_output/n100.r04.s035.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s035_output/n100.r04.s035.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s035_output/n100.r04.s035.reference.fas" | bcftools consensus -m "n100.r04.s035_output/n100.r04.s035.low_depth.tsv" tmp.vcf.gz > "n100.r04.s035_output/n100.r04.s035.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s035_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:44 scheduler task 8bd46694 (flow e8a2d981): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:44 scheduler task 8bd46694 (flow e8a2d981): waiting for completion (try 0): started
2021/07/08 16:51:44  ->  n100.r04.s034.Main.out_file e8a2d981 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:44 n100.r04.s034.Main.out_file e8a2d981 n100/r04/n100.r04.s034.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ad9ec8e2b62405314865f3cced91635bb6910d4c9b526e6ea47869ff3128e196
	sha256:e8a2d981e6f1d08a3aa7a3a1c94027d4ab9a5d0360a21ad256bd800f00c89f0e
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8bd4669448cba48f1391948b17c969b6efdd2204ae106a085e827f50e1d6f683
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s034_output"
	    wget -O "n100.r04.s034_output/n100.r04.s034.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s034_output/n100.r04.s034.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s034_output/n100.r04.s034.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s034_output/n100.r04.s034.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s034_output/n100.r04.s034.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s034_output/n100.r04.s034.reference.fas" "n100.r04.s034_output/n100.r04.s034.fq1.fastq" "n100.r04.s034_output/n100.r04.s034.fq2.fastq" | samtools view -bS - > "n100.r04.s034_output/n100.r04.s034.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s034_output/n100.r04.s034.untrimmed.sorted.bam" "n100.r04.s034_output/n100.r04.s034.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s034_output/n100.r04.s034.untrimmed.sorted.bam" -b "n100.r04.s034_output/n100.r04.s034.primers.bed" -p "n100.r04.s034_output/n100.r04.s034.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s034_output/n100.r04.s034.trimmed.sorted.bam" "n100.r04.s034_output/n100.r04.s034.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s034_output/n100.r04.s034.reference.fas" "n100.r04.s034_output/n100.r04.s034.trimmed.sorted.bam" > "n100.r04.s034_output/n100.r04.s034.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s034_output/n100.r04.s034.reference.fas" --call-indels "n100.r04.s034_output/n100.r04.s034.trimmed.sorted.bam" > "n100.r04.s034_output/n100.r04.s034.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s034_output/n100.r04.s034.trimmed.sorted.bam" > "n100.r04.s034_output/n100.r04.s034.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s034_output/n100.r04.s034.depth.txt" "n100.r04.s034_output/n100.r04.s034.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s034_output/n100.r04.s034.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s034_output/n100.r04.s034.reference.fas" | bcftools consensus -m "n100.r04.s034_output/n100.r04.s034.low_depth.tsv" tmp.vcf.gz > "n100.r04.s034_output/n100.r04.s034.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s034_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:44 scheduler task 85eaed6d (flow 1f720a3c): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:44 scheduler task 85eaed6d (flow 1f720a3c): waiting for completion (try 0): started
2021/07/08 16:51:44  ->  n100.r04.s024.Main.out_file 1f720a3c exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:44 n100.r04.s024.Main.out_file 1f720a3c n100/r04/n100.r04.s024.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1c6a6128ba4339e54e2c9c54d30ea20a34eccbc39ee4f8199968161e7a79453b
	sha256:1f720a3c400d42efdc4c588de9cd10becc2e0dda6f6e7e53add8d0a7e0f7bd3d
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/85eaed6d77b0ed0c3b052cb85dcca7103f5ef2edaf4d72598d60e219d3901415
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s024_output"
	    wget -O "n100.r04.s024_output/n100.r04.s024.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s024_output/n100.r04.s024.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s024_output/n100.r04.s024.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s024_output/n100.r04.s024.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s024_output/n100.r04.s024.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s024_output/n100.r04.s024.reference.fas" "n100.r04.s024_output/n100.r04.s024.fq1.fastq" "n100.r04.s024_output/n100.r04.s024.fq2.fastq" | samtools view -bS - > "n100.r04.s024_output/n100.r04.s024.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s024_output/n100.r04.s024.untrimmed.sorted.bam" "n100.r04.s024_output/n100.r04.s024.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s024_output/n100.r04.s024.untrimmed.sorted.bam" -b "n100.r04.s024_output/n100.r04.s024.primers.bed" -p "n100.r04.s024_output/n100.r04.s024.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s024_output/n100.r04.s024.trimmed.sorted.bam" "n100.r04.s024_output/n100.r04.s024.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s024_output/n100.r04.s024.reference.fas" "n100.r04.s024_output/n100.r04.s024.trimmed.sorted.bam" > "n100.r04.s024_output/n100.r04.s024.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s024_output/n100.r04.s024.reference.fas" --call-indels "n100.r04.s024_output/n100.r04.s024.trimmed.sorted.bam" > "n100.r04.s024_output/n100.r04.s024.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s024_output/n100.r04.s024.trimmed.sorted.bam" > "n100.r04.s024_output/n100.r04.s024.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s024_output/n100.r04.s024.depth.txt" "n100.r04.s024_output/n100.r04.s024.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s024_output/n100.r04.s024.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s024_output/n100.r04.s024.reference.fas" | bcftools consensus -m "n100.r04.s024_output/n100.r04.s024.low_depth.tsv" tmp.vcf.gz > "n100.r04.s024_output/n100.r04.s024.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s024_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:44 scheduler task f0cd2c6c (flow 499d9909): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:44 scheduler task f0cd2c6c (flow 499d9909): waiting for completion (try 0): started
2021/07/08 16:51:44  ->  n100.r04.s043.Main.out_file 499d9909 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:44 n100.r04.s043.Main.out_file 499d9909 n100/r04/n100.r04.s043.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:811d5da9a7a14a731c86a49f2e78737c926dc2081c333b142ea8a136b9683cb9
	sha256:499d99093c505198e3b2e37ca88eb50999a04d74a88bcc3f741a1cc49d63bc69
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f0cd2c6cf60c2009990bbbaea20e0bba38ab2e51f425a69f521a140d7e27c9af
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s043_output"
	    wget -O "n100.r04.s043_output/n100.r04.s043.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s043_output/n100.r04.s043.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s043_output/n100.r04.s043.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s043_output/n100.r04.s043.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s043_output/n100.r04.s043.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s043_output/n100.r04.s043.reference.fas" "n100.r04.s043_output/n100.r04.s043.fq1.fastq" "n100.r04.s043_output/n100.r04.s043.fq2.fastq" | samtools view -bS - > "n100.r04.s043_output/n100.r04.s043.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s043_output/n100.r04.s043.untrimmed.sorted.bam" "n100.r04.s043_output/n100.r04.s043.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s043_output/n100.r04.s043.untrimmed.sorted.bam" -b "n100.r04.s043_output/n100.r04.s043.primers.bed" -p "n100.r04.s043_output/n100.r04.s043.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s043_output/n100.r04.s043.trimmed.sorted.bam" "n100.r04.s043_output/n100.r04.s043.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s043_output/n100.r04.s043.reference.fas" "n100.r04.s043_output/n100.r04.s043.trimmed.sorted.bam" > "n100.r04.s043_output/n100.r04.s043.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s043_output/n100.r04.s043.reference.fas" --call-indels "n100.r04.s043_output/n100.r04.s043.trimmed.sorted.bam" > "n100.r04.s043_output/n100.r04.s043.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s043_output/n100.r04.s043.trimmed.sorted.bam" > "n100.r04.s043_output/n100.r04.s043.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s043_output/n100.r04.s043.depth.txt" "n100.r04.s043_output/n100.r04.s043.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s043_output/n100.r04.s043.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s043_output/n100.r04.s043.reference.fas" | bcftools consensus -m "n100.r04.s043_output/n100.r04.s043.low_depth.tsv" tmp.vcf.gz > "n100.r04.s043_output/n100.r04.s043.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s043_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:45 scheduler task 41aa6205 (flow 2f22143a): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:45 scheduler task 41aa6205 (flow 2f22143a): waiting for completion (try 0): started
2021/07/08 16:51:45  ->  n100.r04.s099.Main.out_file 2f22143a exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:45 n100.r04.s099.Main.out_file 2f22143a n100/r04/n100.r04.s099.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:db1b14d9671c5b77500f8a8840420fe5103d5e110baac7a72eb4f38b9233040e
	sha256:2f22143ae5120f697487260f09d084031c13a5435dc56ccae4adb5562e93a0f2
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/41aa6205fb45c4e836853eb75406d144a68dff3a019b5e4162fbfacd222f5b8a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s099_output"
	    wget -O "n100.r04.s099_output/n100.r04.s099.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s099_output/n100.r04.s099.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s099_output/n100.r04.s099.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s099_output/n100.r04.s099.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s099_output/n100.r04.s099.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s099_output/n100.r04.s099.reference.fas" "n100.r04.s099_output/n100.r04.s099.fq1.fastq" "n100.r04.s099_output/n100.r04.s099.fq2.fastq" | samtools view -bS - > "n100.r04.s099_output/n100.r04.s099.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s099_output/n100.r04.s099.untrimmed.sorted.bam" "n100.r04.s099_output/n100.r04.s099.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s099_output/n100.r04.s099.untrimmed.sorted.bam" -b "n100.r04.s099_output/n100.r04.s099.primers.bed" -p "n100.r04.s099_output/n100.r04.s099.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s099_output/n100.r04.s099.trimmed.sorted.bam" "n100.r04.s099_output/n100.r04.s099.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s099_output/n100.r04.s099.reference.fas" "n100.r04.s099_output/n100.r04.s099.trimmed.sorted.bam" > "n100.r04.s099_output/n100.r04.s099.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s099_output/n100.r04.s099.reference.fas" --call-indels "n100.r04.s099_output/n100.r04.s099.trimmed.sorted.bam" > "n100.r04.s099_output/n100.r04.s099.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s099_output/n100.r04.s099.trimmed.sorted.bam" > "n100.r04.s099_output/n100.r04.s099.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s099_output/n100.r04.s099.depth.txt" "n100.r04.s099_output/n100.r04.s099.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s099_output/n100.r04.s099.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s099_output/n100.r04.s099.reference.fas" | bcftools consensus -m "n100.r04.s099_output/n100.r04.s099.low_depth.tsv" tmp.vcf.gz > "n100.r04.s099_output/n100.r04.s099.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s099_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:45 scheduler task 36d6e3bf (flow a4dcd123): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:45 scheduler task 36d6e3bf (flow a4dcd123): waiting for completion (try 0): started
2021/07/08 16:51:45  ->  n100.r04.s026.Main.out_file a4dcd123 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:45 n100.r04.s026.Main.out_file a4dcd123 n100/r04/n100.r04.s026.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c33c48ba9aae8a94fe7d0c1e14560554e06638b9d3b44800ba443cbefa06fe0b
	sha256:a4dcd123083fd82ffd2cd9ece02b32234db6dcf9c231d3b244cfa0a1b5b02001
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/36d6e3bfc1c4f2e42c4373dfa06117f6791fa1a0345fff4f553ab9149046c2d2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s026_output"
	    wget -O "n100.r04.s026_output/n100.r04.s026.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s026_output/n100.r04.s026.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s026_output/n100.r04.s026.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s026_output/n100.r04.s026.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s026_output/n100.r04.s026.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s026_output/n100.r04.s026.reference.fas" "n100.r04.s026_output/n100.r04.s026.fq1.fastq" "n100.r04.s026_output/n100.r04.s026.fq2.fastq" | samtools view -bS - > "n100.r04.s026_output/n100.r04.s026.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s026_output/n100.r04.s026.untrimmed.sorted.bam" "n100.r04.s026_output/n100.r04.s026.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s026_output/n100.r04.s026.untrimmed.sorted.bam" -b "n100.r04.s026_output/n100.r04.s026.primers.bed" -p "n100.r04.s026_output/n100.r04.s026.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s026_output/n100.r04.s026.trimmed.sorted.bam" "n100.r04.s026_output/n100.r04.s026.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s026_output/n100.r04.s026.reference.fas" "n100.r04.s026_output/n100.r04.s026.trimmed.sorted.bam" > "n100.r04.s026_output/n100.r04.s026.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s026_output/n100.r04.s026.reference.fas" --call-indels "n100.r04.s026_output/n100.r04.s026.trimmed.sorted.bam" > "n100.r04.s026_output/n100.r04.s026.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s026_output/n100.r04.s026.trimmed.sorted.bam" > "n100.r04.s026_output/n100.r04.s026.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s026_output/n100.r04.s026.depth.txt" "n100.r04.s026_output/n100.r04.s026.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s026_output/n100.r04.s026.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s026_output/n100.r04.s026.reference.fas" | bcftools consensus -m "n100.r04.s026_output/n100.r04.s026.low_depth.tsv" tmp.vcf.gz > "n100.r04.s026_output/n100.r04.s026.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s026_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:45 scheduler task 5a8a7584 (flow 749eedd5): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:45 scheduler task 5a8a7584 (flow 749eedd5): waiting for completion (try 0): started
2021/07/08 16:51:45  ->  n100.r04.s032.Main.out_file 749eedd5 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:45 n100.r04.s032.Main.out_file 749eedd5 n100/r04/n100.r04.s032.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:aabf612e6250ef256761e8bdde821c270a48d739c185db1efb9231216e7846df
	sha256:749eedd5ffdd0adc3346b6fcb5411224afd625a7311ab4b646063250b258163b
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5a8a7584efcfa863290842865c672a59a7a56cf503b8fb513bec14182c5edfbc
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s032_output"
	    wget -O "n100.r04.s032_output/n100.r04.s032.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s032_output/n100.r04.s032.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s032_output/n100.r04.s032.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s032_output/n100.r04.s032.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s032_output/n100.r04.s032.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s032_output/n100.r04.s032.reference.fas" "n100.r04.s032_output/n100.r04.s032.fq1.fastq" "n100.r04.s032_output/n100.r04.s032.fq2.fastq" | samtools view -bS - > "n100.r04.s032_output/n100.r04.s032.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s032_output/n100.r04.s032.untrimmed.sorted.bam" "n100.r04.s032_output/n100.r04.s032.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s032_output/n100.r04.s032.untrimmed.sorted.bam" -b "n100.r04.s032_output/n100.r04.s032.primers.bed" -p "n100.r04.s032_output/n100.r04.s032.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s032_output/n100.r04.s032.trimmed.sorted.bam" "n100.r04.s032_output/n100.r04.s032.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s032_output/n100.r04.s032.reference.fas" "n100.r04.s032_output/n100.r04.s032.trimmed.sorted.bam" > "n100.r04.s032_output/n100.r04.s032.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s032_output/n100.r04.s032.reference.fas" --call-indels "n100.r04.s032_output/n100.r04.s032.trimmed.sorted.bam" > "n100.r04.s032_output/n100.r04.s032.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s032_output/n100.r04.s032.trimmed.sorted.bam" > "n100.r04.s032_output/n100.r04.s032.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s032_output/n100.r04.s032.depth.txt" "n100.r04.s032_output/n100.r04.s032.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s032_output/n100.r04.s032.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s032_output/n100.r04.s032.reference.fas" | bcftools consensus -m "n100.r04.s032_output/n100.r04.s032.low_depth.tsv" tmp.vcf.gz > "n100.r04.s032_output/n100.r04.s032.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s032_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:45 scheduler task 8f237035 (flow 7731292a): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:45 scheduler task 8f237035 (flow 7731292a): waiting for completion (try 0): started
2021/07/08 16:51:45  ->  n100.r04.s095.Main.out_file 7731292a exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:45 n100.r04.s095.Main.out_file 7731292a n100/r04/n100.r04.s095.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e4b9e80f1acffe365fbc9cb8a53942023141bb4edf2a8b6b6ea5d7c8f19d5833
	sha256:7731292a47b1b5f16489926c85a7e7b7b5ef4937ec853d2215b462582eab509b
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8f237035b3f232129250bb77bb9b181b9188acacd2373d29a09ba6ebf0b593f8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s095_output"
	    wget -O "n100.r04.s095_output/n100.r04.s095.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s095_output/n100.r04.s095.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s095_output/n100.r04.s095.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s095_output/n100.r04.s095.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s095_output/n100.r04.s095.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s095_output/n100.r04.s095.reference.fas" "n100.r04.s095_output/n100.r04.s095.fq1.fastq" "n100.r04.s095_output/n100.r04.s095.fq2.fastq" | samtools view -bS - > "n100.r04.s095_output/n100.r04.s095.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s095_output/n100.r04.s095.untrimmed.sorted.bam" "n100.r04.s095_output/n100.r04.s095.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s095_output/n100.r04.s095.untrimmed.sorted.bam" -b "n100.r04.s095_output/n100.r04.s095.primers.bed" -p "n100.r04.s095_output/n100.r04.s095.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s095_output/n100.r04.s095.trimmed.sorted.bam" "n100.r04.s095_output/n100.r04.s095.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s095_output/n100.r04.s095.reference.fas" "n100.r04.s095_output/n100.r04.s095.trimmed.sorted.bam" > "n100.r04.s095_output/n100.r04.s095.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s095_output/n100.r04.s095.reference.fas" --call-indels "n100.r04.s095_output/n100.r04.s095.trimmed.sorted.bam" > "n100.r04.s095_output/n100.r04.s095.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s095_output/n100.r04.s095.trimmed.sorted.bam" > "n100.r04.s095_output/n100.r04.s095.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s095_output/n100.r04.s095.depth.txt" "n100.r04.s095_output/n100.r04.s095.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s095_output/n100.r04.s095.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s095_output/n100.r04.s095.reference.fas" | bcftools consensus -m "n100.r04.s095_output/n100.r04.s095.low_depth.tsv" tmp.vcf.gz > "n100.r04.s095_output/n100.r04.s095.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s095_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:45 scheduler task 9181ecd7 (flow cfd8c852): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:45 scheduler task 9181ecd7 (flow cfd8c852): waiting for completion (try 0): started
2021/07/08 16:51:45  ->  n100.r04.s086.Main.out_file cfd8c852 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:45 n100.r04.s086.Main.out_file cfd8c852 n100/r04/n100.r04.s086.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4591546377869f9c3add3c8da387d8232cefea586b3c8d9f2a048b02732e75a1
	sha256:cfd8c8527a2e15e4db024f904801feb43999525a517d9b79a7e2b417ea88af20
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9181ecd7cf99c924576a87f1821e42f2a55d20d6434ab566be9a2ed76b7cd7d8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s086_output"
	    wget -O "n100.r04.s086_output/n100.r04.s086.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s086_output/n100.r04.s086.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s086_output/n100.r04.s086.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s086_output/n100.r04.s086.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s086_output/n100.r04.s086.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s086_output/n100.r04.s086.reference.fas" "n100.r04.s086_output/n100.r04.s086.fq1.fastq" "n100.r04.s086_output/n100.r04.s086.fq2.fastq" | samtools view -bS - > "n100.r04.s086_output/n100.r04.s086.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s086_output/n100.r04.s086.untrimmed.sorted.bam" "n100.r04.s086_output/n100.r04.s086.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s086_output/n100.r04.s086.untrimmed.sorted.bam" -b "n100.r04.s086_output/n100.r04.s086.primers.bed" -p "n100.r04.s086_output/n100.r04.s086.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s086_output/n100.r04.s086.trimmed.sorted.bam" "n100.r04.s086_output/n100.r04.s086.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s086_output/n100.r04.s086.reference.fas" "n100.r04.s086_output/n100.r04.s086.trimmed.sorted.bam" > "n100.r04.s086_output/n100.r04.s086.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s086_output/n100.r04.s086.reference.fas" --call-indels "n100.r04.s086_output/n100.r04.s086.trimmed.sorted.bam" > "n100.r04.s086_output/n100.r04.s086.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s086_output/n100.r04.s086.trimmed.sorted.bam" > "n100.r04.s086_output/n100.r04.s086.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s086_output/n100.r04.s086.depth.txt" "n100.r04.s086_output/n100.r04.s086.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s086_output/n100.r04.s086.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s086_output/n100.r04.s086.reference.fas" | bcftools consensus -m "n100.r04.s086_output/n100.r04.s086.low_depth.tsv" tmp.vcf.gz > "n100.r04.s086_output/n100.r04.s086.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s086_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:46 scheduler task 3e5b10bd (flow 6f981d52): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:46 scheduler task 3e5b10bd (flow 6f981d52): waiting for completion (try 0): started
2021/07/08 16:51:46  ->  n100.r04.s087.Main.out_file 6f981d52 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:46 n100.r04.s087.Main.out_file 6f981d52 n100/r04/n100.r04.s087.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5a38c689051a5a8d5379bc8cbe759c22d008342ae71aabb6a90dbefc3804a38d
	sha256:6f981d52cafab1ece1d97ce3e5300fb5fa59e3d40cb50e76540e4b47968aecc2
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3e5b10bd629d291f2008aab06aef791b43e7f471e0b4717f50ff96a21c3ab94a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s087_output"
	    wget -O "n100.r04.s087_output/n100.r04.s087.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s087_output/n100.r04.s087.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s087_output/n100.r04.s087.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s087_output/n100.r04.s087.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s087_output/n100.r04.s087.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s087_output/n100.r04.s087.reference.fas" "n100.r04.s087_output/n100.r04.s087.fq1.fastq" "n100.r04.s087_output/n100.r04.s087.fq2.fastq" | samtools view -bS - > "n100.r04.s087_output/n100.r04.s087.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s087_output/n100.r04.s087.untrimmed.sorted.bam" "n100.r04.s087_output/n100.r04.s087.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s087_output/n100.r04.s087.untrimmed.sorted.bam" -b "n100.r04.s087_output/n100.r04.s087.primers.bed" -p "n100.r04.s087_output/n100.r04.s087.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s087_output/n100.r04.s087.trimmed.sorted.bam" "n100.r04.s087_output/n100.r04.s087.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s087_output/n100.r04.s087.reference.fas" "n100.r04.s087_output/n100.r04.s087.trimmed.sorted.bam" > "n100.r04.s087_output/n100.r04.s087.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s087_output/n100.r04.s087.reference.fas" --call-indels "n100.r04.s087_output/n100.r04.s087.trimmed.sorted.bam" > "n100.r04.s087_output/n100.r04.s087.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s087_output/n100.r04.s087.trimmed.sorted.bam" > "n100.r04.s087_output/n100.r04.s087.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s087_output/n100.r04.s087.depth.txt" "n100.r04.s087_output/n100.r04.s087.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s087_output/n100.r04.s087.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s087_output/n100.r04.s087.reference.fas" | bcftools consensus -m "n100.r04.s087_output/n100.r04.s087.low_depth.tsv" tmp.vcf.gz > "n100.r04.s087_output/n100.r04.s087.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s087_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:46 scheduler task 04101a49 (flow 2d151cd2): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:46 scheduler task 04101a49 (flow 2d151cd2): waiting for completion (try 0): started
2021/07/08 16:51:46  ->  n100.r04.s013.Main.out_file 2d151cd2 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:46 n100.r04.s013.Main.out_file 2d151cd2 n100/r04/n100.r04.s013.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7c6c258425b575711d762ef78331f7ffd3950fe1dcca69e89deac56d37110239
	sha256:2d151cd22e274202b22e919714d520346ce4b8c76f7ded7c60b2e1c9bbd166f9
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/04101a492f9b4dc6a98f348100a3378fd22c1b5a4fe254e518b93090dec3332a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s013_output"
	    wget -O "n100.r04.s013_output/n100.r04.s013.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s013_output/n100.r04.s013.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s013_output/n100.r04.s013.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s013_output/n100.r04.s013.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s013_output/n100.r04.s013.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s013_output/n100.r04.s013.reference.fas" "n100.r04.s013_output/n100.r04.s013.fq1.fastq" "n100.r04.s013_output/n100.r04.s013.fq2.fastq" | samtools view -bS - > "n100.r04.s013_output/n100.r04.s013.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s013_output/n100.r04.s013.untrimmed.sorted.bam" "n100.r04.s013_output/n100.r04.s013.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s013_output/n100.r04.s013.untrimmed.sorted.bam" -b "n100.r04.s013_output/n100.r04.s013.primers.bed" -p "n100.r04.s013_output/n100.r04.s013.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s013_output/n100.r04.s013.trimmed.sorted.bam" "n100.r04.s013_output/n100.r04.s013.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s013_output/n100.r04.s013.reference.fas" "n100.r04.s013_output/n100.r04.s013.trimmed.sorted.bam" > "n100.r04.s013_output/n100.r04.s013.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s013_output/n100.r04.s013.reference.fas" --call-indels "n100.r04.s013_output/n100.r04.s013.trimmed.sorted.bam" > "n100.r04.s013_output/n100.r04.s013.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s013_output/n100.r04.s013.trimmed.sorted.bam" > "n100.r04.s013_output/n100.r04.s013.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s013_output/n100.r04.s013.depth.txt" "n100.r04.s013_output/n100.r04.s013.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s013_output/n100.r04.s013.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s013_output/n100.r04.s013.reference.fas" | bcftools consensus -m "n100.r04.s013_output/n100.r04.s013.low_depth.tsv" tmp.vcf.gz > "n100.r04.s013_output/n100.r04.s013.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s013_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:46 scheduler task 0d09bc33 (flow 8f555b2a): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:46 scheduler task 0d09bc33 (flow 8f555b2a): waiting for completion (try 0): started
2021/07/08 16:51:46  ->  n100.r04.s075.Main.out_file 8f555b2a exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:46 n100.r04.s075.Main.out_file 8f555b2a n100/r04/n100.r04.s075.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:75f2c0c9aa3fc4c77706384673ddf7788b6b46c51d2bb1e48d6cc84ffd8bb100
	sha256:8f555b2a47e5f00e045e6990059fda206f4d39c62b1dc1cf7e9a81324ad4d2c1
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0d09bc333975ecb7326fd7617f2ff492ad069dcfea465ac6faf8da0c78454d26
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s075_output"
	    wget -O "n100.r04.s075_output/n100.r04.s075.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s075_output/n100.r04.s075.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s075_output/n100.r04.s075.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s075_output/n100.r04.s075.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s075_output/n100.r04.s075.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s075_output/n100.r04.s075.reference.fas" "n100.r04.s075_output/n100.r04.s075.fq1.fastq" "n100.r04.s075_output/n100.r04.s075.fq2.fastq" | samtools view -bS - > "n100.r04.s075_output/n100.r04.s075.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s075_output/n100.r04.s075.untrimmed.sorted.bam" "n100.r04.s075_output/n100.r04.s075.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s075_output/n100.r04.s075.untrimmed.sorted.bam" -b "n100.r04.s075_output/n100.r04.s075.primers.bed" -p "n100.r04.s075_output/n100.r04.s075.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s075_output/n100.r04.s075.trimmed.sorted.bam" "n100.r04.s075_output/n100.r04.s075.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s075_output/n100.r04.s075.reference.fas" "n100.r04.s075_output/n100.r04.s075.trimmed.sorted.bam" > "n100.r04.s075_output/n100.r04.s075.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s075_output/n100.r04.s075.reference.fas" --call-indels "n100.r04.s075_output/n100.r04.s075.trimmed.sorted.bam" > "n100.r04.s075_output/n100.r04.s075.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s075_output/n100.r04.s075.trimmed.sorted.bam" > "n100.r04.s075_output/n100.r04.s075.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s075_output/n100.r04.s075.depth.txt" "n100.r04.s075_output/n100.r04.s075.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s075_output/n100.r04.s075.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s075_output/n100.r04.s075.reference.fas" | bcftools consensus -m "n100.r04.s075_output/n100.r04.s075.low_depth.tsv" tmp.vcf.gz > "n100.r04.s075_output/n100.r04.s075.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s075_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:46 scheduler task f1849b51 (flow ff5069df): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:46 scheduler task f1849b51 (flow ff5069df): waiting for completion (try 0): started
2021/07/08 16:51:46  ->  n100.r04.s070.Main.out_file ff5069df exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:46 n100.r04.s070.Main.out_file ff5069df n100/r04/n100.r04.s070.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4b6370b530509b937596c575509d3ea7fe09fcb5faa8b0ce52040c276951e25f
	sha256:ff5069df20fc72da3aa9ff44bacfb197e910fe1eb66ddb5ab73576ae70bce98c
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f1849b514f9d46a872ea0537d38b2f8713222a297d953fed4470a2c3a16958b3
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s070_output"
	    wget -O "n100.r04.s070_output/n100.r04.s070.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s070_output/n100.r04.s070.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s070_output/n100.r04.s070.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s070_output/n100.r04.s070.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s070_output/n100.r04.s070.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s070_output/n100.r04.s070.reference.fas" "n100.r04.s070_output/n100.r04.s070.fq1.fastq" "n100.r04.s070_output/n100.r04.s070.fq2.fastq" | samtools view -bS - > "n100.r04.s070_output/n100.r04.s070.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s070_output/n100.r04.s070.untrimmed.sorted.bam" "n100.r04.s070_output/n100.r04.s070.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s070_output/n100.r04.s070.untrimmed.sorted.bam" -b "n100.r04.s070_output/n100.r04.s070.primers.bed" -p "n100.r04.s070_output/n100.r04.s070.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s070_output/n100.r04.s070.trimmed.sorted.bam" "n100.r04.s070_output/n100.r04.s070.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s070_output/n100.r04.s070.reference.fas" "n100.r04.s070_output/n100.r04.s070.trimmed.sorted.bam" > "n100.r04.s070_output/n100.r04.s070.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s070_output/n100.r04.s070.reference.fas" --call-indels "n100.r04.s070_output/n100.r04.s070.trimmed.sorted.bam" > "n100.r04.s070_output/n100.r04.s070.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s070_output/n100.r04.s070.trimmed.sorted.bam" > "n100.r04.s070_output/n100.r04.s070.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s070_output/n100.r04.s070.depth.txt" "n100.r04.s070_output/n100.r04.s070.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s070_output/n100.r04.s070.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s070_output/n100.r04.s070.reference.fas" | bcftools consensus -m "n100.r04.s070_output/n100.r04.s070.low_depth.tsv" tmp.vcf.gz > "n100.r04.s070_output/n100.r04.s070.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s070_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:46 scheduler task e7c3fad1 (flow 73faee38): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:46 scheduler task e7c3fad1 (flow 73faee38): waiting for completion (try 0): started
2021/07/08 16:51:46  ->  n100.r04.s002.Main.out_file 73faee38 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:46 n100.r04.s002.Main.out_file 73faee38 n100/r04/n100.r04.s002.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6e590e9c9363302faf55921754e518d894d69bb5bdfed9d9807178f56e085c4d
	sha256:73faee38e24e54449bec704141f964a575fad3b721733d5b0831eaa7d3b195bb
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e7c3fad1648d9c112ab346e7e4c6ef4986835ab705d02a1a712e0a0df4ec3d86
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s002_output"
	    wget -O "n100.r04.s002_output/n100.r04.s002.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s002_output/n100.r04.s002.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s002_output/n100.r04.s002.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s002_output/n100.r04.s002.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s002_output/n100.r04.s002.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s002_output/n100.r04.s002.reference.fas" "n100.r04.s002_output/n100.r04.s002.fq1.fastq" "n100.r04.s002_output/n100.r04.s002.fq2.fastq" | samtools view -bS - > "n100.r04.s002_output/n100.r04.s002.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s002_output/n100.r04.s002.untrimmed.sorted.bam" "n100.r04.s002_output/n100.r04.s002.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s002_output/n100.r04.s002.untrimmed.sorted.bam" -b "n100.r04.s002_output/n100.r04.s002.primers.bed" -p "n100.r04.s002_output/n100.r04.s002.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s002_output/n100.r04.s002.trimmed.sorted.bam" "n100.r04.s002_output/n100.r04.s002.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s002_output/n100.r04.s002.reference.fas" "n100.r04.s002_output/n100.r04.s002.trimmed.sorted.bam" > "n100.r04.s002_output/n100.r04.s002.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s002_output/n100.r04.s002.reference.fas" --call-indels "n100.r04.s002_output/n100.r04.s002.trimmed.sorted.bam" > "n100.r04.s002_output/n100.r04.s002.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s002_output/n100.r04.s002.trimmed.sorted.bam" > "n100.r04.s002_output/n100.r04.s002.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s002_output/n100.r04.s002.depth.txt" "n100.r04.s002_output/n100.r04.s002.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s002_output/n100.r04.s002.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s002_output/n100.r04.s002.reference.fas" | bcftools consensus -m "n100.r04.s002_output/n100.r04.s002.low_depth.tsv" tmp.vcf.gz > "n100.r04.s002_output/n100.r04.s002.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s002_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:47 scheduler task e8d5592b (flow 7b4e38f2): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:47 scheduler task e8d5592b (flow 7b4e38f2): waiting for completion (try 0): started
2021/07/08 16:51:47  ->  n100.r04.s064.Main.out_file 7b4e38f2 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:47 n100.r04.s064.Main.out_file 7b4e38f2 n100/r04/n100.r04.s064.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:76ad720e7e28f3ae5ef91480ea7e7e7232fb7dc7efd1c729b5d5d4e5e14e69a1
	sha256:7b4e38f2c4eb727da99aae084070378e8723b0680d54c7cdffb19f98c111df65
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e8d5592b24babe8a59e13a7ced10b954d518e86976272c9d75360f765768fa42
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s064_output"
	    wget -O "n100.r04.s064_output/n100.r04.s064.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s064_output/n100.r04.s064.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s064_output/n100.r04.s064.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s064_output/n100.r04.s064.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s064_output/n100.r04.s064.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s064_output/n100.r04.s064.reference.fas" "n100.r04.s064_output/n100.r04.s064.fq1.fastq" "n100.r04.s064_output/n100.r04.s064.fq2.fastq" | samtools view -bS - > "n100.r04.s064_output/n100.r04.s064.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s064_output/n100.r04.s064.untrimmed.sorted.bam" "n100.r04.s064_output/n100.r04.s064.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s064_output/n100.r04.s064.untrimmed.sorted.bam" -b "n100.r04.s064_output/n100.r04.s064.primers.bed" -p "n100.r04.s064_output/n100.r04.s064.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s064_output/n100.r04.s064.trimmed.sorted.bam" "n100.r04.s064_output/n100.r04.s064.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s064_output/n100.r04.s064.reference.fas" "n100.r04.s064_output/n100.r04.s064.trimmed.sorted.bam" > "n100.r04.s064_output/n100.r04.s064.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s064_output/n100.r04.s064.reference.fas" --call-indels "n100.r04.s064_output/n100.r04.s064.trimmed.sorted.bam" > "n100.r04.s064_output/n100.r04.s064.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s064_output/n100.r04.s064.trimmed.sorted.bam" > "n100.r04.s064_output/n100.r04.s064.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s064_output/n100.r04.s064.depth.txt" "n100.r04.s064_output/n100.r04.s064.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s064_output/n100.r04.s064.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s064_output/n100.r04.s064.reference.fas" | bcftools consensus -m "n100.r04.s064_output/n100.r04.s064.low_depth.tsv" tmp.vcf.gz > "n100.r04.s064_output/n100.r04.s064.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s064_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:47 scheduler task 3447498f (flow 193dd149): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:47 scheduler task 3447498f (flow 193dd149): waiting for completion (try 0): started
2021/07/08 16:51:47  ->  n100.r04.s023.Main.out_file 193dd149 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:47 n100.r04.s023.Main.out_file 193dd149 n100/r04/n100.r04.s023.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c5ba58a189445f10429b9b12f6de75d58e5f2800ea93b4870688cba2639410b5
	sha256:193dd149854e7f60a30f9729beeb7201cf17d75cbc4e830230366db5292359c7
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3447498f6486237221a417fe6c41b56300653f1ba31f2bce02134321f0c0ff01
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s023_output"
	    wget -O "n100.r04.s023_output/n100.r04.s023.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s023_output/n100.r04.s023.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s023_output/n100.r04.s023.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s023_output/n100.r04.s023.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s023_output/n100.r04.s023.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s023_output/n100.r04.s023.reference.fas" "n100.r04.s023_output/n100.r04.s023.fq1.fastq" "n100.r04.s023_output/n100.r04.s023.fq2.fastq" | samtools view -bS - > "n100.r04.s023_output/n100.r04.s023.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s023_output/n100.r04.s023.untrimmed.sorted.bam" "n100.r04.s023_output/n100.r04.s023.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s023_output/n100.r04.s023.untrimmed.sorted.bam" -b "n100.r04.s023_output/n100.r04.s023.primers.bed" -p "n100.r04.s023_output/n100.r04.s023.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s023_output/n100.r04.s023.trimmed.sorted.bam" "n100.r04.s023_output/n100.r04.s023.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s023_output/n100.r04.s023.reference.fas" "n100.r04.s023_output/n100.r04.s023.trimmed.sorted.bam" > "n100.r04.s023_output/n100.r04.s023.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s023_output/n100.r04.s023.reference.fas" --call-indels "n100.r04.s023_output/n100.r04.s023.trimmed.sorted.bam" > "n100.r04.s023_output/n100.r04.s023.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s023_output/n100.r04.s023.trimmed.sorted.bam" > "n100.r04.s023_output/n100.r04.s023.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s023_output/n100.r04.s023.depth.txt" "n100.r04.s023_output/n100.r04.s023.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s023_output/n100.r04.s023.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s023_output/n100.r04.s023.reference.fas" | bcftools consensus -m "n100.r04.s023_output/n100.r04.s023.low_depth.tsv" tmp.vcf.gz > "n100.r04.s023_output/n100.r04.s023.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s023_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:47 scheduler task 4f52560f (flow c39d6831): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:47 scheduler task 4f52560f (flow c39d6831): waiting for completion (try 0): started
2021/07/08 16:51:47  ->  n100.r04.s076.Main.out_file c39d6831 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:47 n100.r04.s076.Main.out_file c39d6831 n100/r04/n100.r04.s076.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9510e5c211cd3b4b78eb1ae5e93832af5f46ee5147afcf836b4bd7348f2cd8e7
	sha256:c39d68316e3b892932836bf225232cdb8efd82c22ba742406819280ffbdd4c48
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4f52560f082e5a3c974177dc9a6550814e8e29a78aab756fb0e562dcda81e6aa
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s076_output"
	    wget -O "n100.r04.s076_output/n100.r04.s076.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s076_output/n100.r04.s076.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s076_output/n100.r04.s076.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s076_output/n100.r04.s076.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s076_output/n100.r04.s076.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s076_output/n100.r04.s076.reference.fas" "n100.r04.s076_output/n100.r04.s076.fq1.fastq" "n100.r04.s076_output/n100.r04.s076.fq2.fastq" | samtools view -bS - > "n100.r04.s076_output/n100.r04.s076.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s076_output/n100.r04.s076.untrimmed.sorted.bam" "n100.r04.s076_output/n100.r04.s076.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s076_output/n100.r04.s076.untrimmed.sorted.bam" -b "n100.r04.s076_output/n100.r04.s076.primers.bed" -p "n100.r04.s076_output/n100.r04.s076.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s076_output/n100.r04.s076.trimmed.sorted.bam" "n100.r04.s076_output/n100.r04.s076.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s076_output/n100.r04.s076.reference.fas" "n100.r04.s076_output/n100.r04.s076.trimmed.sorted.bam" > "n100.r04.s076_output/n100.r04.s076.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s076_output/n100.r04.s076.reference.fas" --call-indels "n100.r04.s076_output/n100.r04.s076.trimmed.sorted.bam" > "n100.r04.s076_output/n100.r04.s076.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s076_output/n100.r04.s076.trimmed.sorted.bam" > "n100.r04.s076_output/n100.r04.s076.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s076_output/n100.r04.s076.depth.txt" "n100.r04.s076_output/n100.r04.s076.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s076_output/n100.r04.s076.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s076_output/n100.r04.s076.reference.fas" | bcftools consensus -m "n100.r04.s076_output/n100.r04.s076.low_depth.tsv" tmp.vcf.gz > "n100.r04.s076_output/n100.r04.s076.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s076_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:47 scheduler task ad27dd97 (flow 57f67a1d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:47 scheduler task ad27dd97 (flow 57f67a1d): waiting for completion (try 0): started
2021/07/08 16:51:47  ->  n100.r04.s006.Main.out_file 57f67a1d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:47 n100.r04.s006.Main.out_file 57f67a1d n100/r04/n100.r04.s006.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:85a5d3602dccf6178317ba3382b5da94fda31df7c5bcc80e8eb904ae5ed2848d
	sha256:57f67a1d0e680b0ef46984a935b5762049c83d72f0fc8e72f6e6d25c58833ddb
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ad27dd97be57d013f2fa12db9b431715299248d91996ffa6d0fce645cfa41987
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s006_output"
	    wget -O "n100.r04.s006_output/n100.r04.s006.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s006_output/n100.r04.s006.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s006_output/n100.r04.s006.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s006_output/n100.r04.s006.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s006_output/n100.r04.s006.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s006_output/n100.r04.s006.reference.fas" "n100.r04.s006_output/n100.r04.s006.fq1.fastq" "n100.r04.s006_output/n100.r04.s006.fq2.fastq" | samtools view -bS - > "n100.r04.s006_output/n100.r04.s006.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s006_output/n100.r04.s006.untrimmed.sorted.bam" "n100.r04.s006_output/n100.r04.s006.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s006_output/n100.r04.s006.untrimmed.sorted.bam" -b "n100.r04.s006_output/n100.r04.s006.primers.bed" -p "n100.r04.s006_output/n100.r04.s006.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s006_output/n100.r04.s006.trimmed.sorted.bam" "n100.r04.s006_output/n100.r04.s006.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s006_output/n100.r04.s006.reference.fas" "n100.r04.s006_output/n100.r04.s006.trimmed.sorted.bam" > "n100.r04.s006_output/n100.r04.s006.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s006_output/n100.r04.s006.reference.fas" --call-indels "n100.r04.s006_output/n100.r04.s006.trimmed.sorted.bam" > "n100.r04.s006_output/n100.r04.s006.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s006_output/n100.r04.s006.trimmed.sorted.bam" > "n100.r04.s006_output/n100.r04.s006.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s006_output/n100.r04.s006.depth.txt" "n100.r04.s006_output/n100.r04.s006.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s006_output/n100.r04.s006.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s006_output/n100.r04.s006.reference.fas" | bcftools consensus -m "n100.r04.s006_output/n100.r04.s006.low_depth.tsv" tmp.vcf.gz > "n100.r04.s006_output/n100.r04.s006.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s006_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:47 scheduler task b8eef7a3 (flow 7fe68b7b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:47 scheduler task b8eef7a3 (flow 7fe68b7b): waiting for completion (try 0): started
2021/07/08 16:51:47  ->  n100.r04.s082.Main.out_file 7fe68b7b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:47 n100.r04.s082.Main.out_file 7fe68b7b n100/r04/n100.r04.s082.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:931c5f3e06ace6f3463a8bbce4433916d0cbaa645cc63680af8ea8a69d825c86
	sha256:7fe68b7bebf2c5b7b4eee6918404b011cec6d4f520e30ee24111f828e22f12dd
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b8eef7a30a056506915d0e43ddbe4a504265c7ee5d48a57f7138b34f3584fc3a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s082_output"
	    wget -O "n100.r04.s082_output/n100.r04.s082.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s082_output/n100.r04.s082.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s082_output/n100.r04.s082.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s082_output/n100.r04.s082.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s082_output/n100.r04.s082.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s082_output/n100.r04.s082.reference.fas" "n100.r04.s082_output/n100.r04.s082.fq1.fastq" "n100.r04.s082_output/n100.r04.s082.fq2.fastq" | samtools view -bS - > "n100.r04.s082_output/n100.r04.s082.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s082_output/n100.r04.s082.untrimmed.sorted.bam" "n100.r04.s082_output/n100.r04.s082.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s082_output/n100.r04.s082.untrimmed.sorted.bam" -b "n100.r04.s082_output/n100.r04.s082.primers.bed" -p "n100.r04.s082_output/n100.r04.s082.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s082_output/n100.r04.s082.trimmed.sorted.bam" "n100.r04.s082_output/n100.r04.s082.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s082_output/n100.r04.s082.reference.fas" "n100.r04.s082_output/n100.r04.s082.trimmed.sorted.bam" > "n100.r04.s082_output/n100.r04.s082.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s082_output/n100.r04.s082.reference.fas" --call-indels "n100.r04.s082_output/n100.r04.s082.trimmed.sorted.bam" > "n100.r04.s082_output/n100.r04.s082.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s082_output/n100.r04.s082.trimmed.sorted.bam" > "n100.r04.s082_output/n100.r04.s082.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s082_output/n100.r04.s082.depth.txt" "n100.r04.s082_output/n100.r04.s082.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s082_output/n100.r04.s082.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s082_output/n100.r04.s082.reference.fas" | bcftools consensus -m "n100.r04.s082_output/n100.r04.s082.low_depth.tsv" tmp.vcf.gz > "n100.r04.s082_output/n100.r04.s082.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s082_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:47 scheduler task 44230ac9 (flow 1e40e5b1): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:47 scheduler task 44230ac9 (flow 1e40e5b1): waiting for completion (try 0): started
2021/07/08 16:51:47  ->  n100.r04.s045.Main.out_file 1e40e5b1 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:47 n100.r04.s045.Main.out_file 1e40e5b1 n100/r04/n100.r04.s045.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2e646abec853992a6c3c24571b40fe0db82410f367f609915423f5f1248dec77
	sha256:1e40e5b1873497bbbac46fe6e1bd031671cd99045becce198b310a96c4e4f1a0
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/44230ac96ac673a69e1899e7fdb6c7f5dd04e66c558540403e3074ba91d521e6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s045_output"
	    wget -O "n100.r04.s045_output/n100.r04.s045.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s045_output/n100.r04.s045.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s045_output/n100.r04.s045.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s045_output/n100.r04.s045.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s045_output/n100.r04.s045.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s045_output/n100.r04.s045.reference.fas" "n100.r04.s045_output/n100.r04.s045.fq1.fastq" "n100.r04.s045_output/n100.r04.s045.fq2.fastq" | samtools view -bS - > "n100.r04.s045_output/n100.r04.s045.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s045_output/n100.r04.s045.untrimmed.sorted.bam" "n100.r04.s045_output/n100.r04.s045.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s045_output/n100.r04.s045.untrimmed.sorted.bam" -b "n100.r04.s045_output/n100.r04.s045.primers.bed" -p "n100.r04.s045_output/n100.r04.s045.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s045_output/n100.r04.s045.trimmed.sorted.bam" "n100.r04.s045_output/n100.r04.s045.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s045_output/n100.r04.s045.reference.fas" "n100.r04.s045_output/n100.r04.s045.trimmed.sorted.bam" > "n100.r04.s045_output/n100.r04.s045.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s045_output/n100.r04.s045.reference.fas" --call-indels "n100.r04.s045_output/n100.r04.s045.trimmed.sorted.bam" > "n100.r04.s045_output/n100.r04.s045.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s045_output/n100.r04.s045.trimmed.sorted.bam" > "n100.r04.s045_output/n100.r04.s045.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s045_output/n100.r04.s045.depth.txt" "n100.r04.s045_output/n100.r04.s045.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s045_output/n100.r04.s045.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s045_output/n100.r04.s045.reference.fas" | bcftools consensus -m "n100.r04.s045_output/n100.r04.s045.low_depth.tsv" tmp.vcf.gz > "n100.r04.s045_output/n100.r04.s045.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s045_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:47 scheduler task 3cad6a0b (flow f32e0466): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:47 scheduler task 3cad6a0b (flow f32e0466): waiting for completion (try 0): started
2021/07/08 16:51:47  ->  n100.r04.s005.Main.out_file f32e0466 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:47 n100.r04.s005.Main.out_file f32e0466 n100/r04/n100.r04.s005.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:79c47e1d4dd6bec6212c6c9fa61b36246f8a2ca3ed765e44d2098533225bb8a4
	sha256:f32e04669dc85d91e4b10e2cd7c8fe03425a040282f70fbbd956a419d552f6d6
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3cad6a0b5209288439a9ab8b91b4f1915b7a58cb8b8e855b348e37199fc46bb6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s005_output"
	    wget -O "n100.r04.s005_output/n100.r04.s005.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s005_output/n100.r04.s005.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s005_output/n100.r04.s005.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s005_output/n100.r04.s005.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s005_output/n100.r04.s005.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s005_output/n100.r04.s005.reference.fas" "n100.r04.s005_output/n100.r04.s005.fq1.fastq" "n100.r04.s005_output/n100.r04.s005.fq2.fastq" | samtools view -bS - > "n100.r04.s005_output/n100.r04.s005.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s005_output/n100.r04.s005.untrimmed.sorted.bam" "n100.r04.s005_output/n100.r04.s005.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s005_output/n100.r04.s005.untrimmed.sorted.bam" -b "n100.r04.s005_output/n100.r04.s005.primers.bed" -p "n100.r04.s005_output/n100.r04.s005.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s005_output/n100.r04.s005.trimmed.sorted.bam" "n100.r04.s005_output/n100.r04.s005.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s005_output/n100.r04.s005.reference.fas" "n100.r04.s005_output/n100.r04.s005.trimmed.sorted.bam" > "n100.r04.s005_output/n100.r04.s005.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s005_output/n100.r04.s005.reference.fas" --call-indels "n100.r04.s005_output/n100.r04.s005.trimmed.sorted.bam" > "n100.r04.s005_output/n100.r04.s005.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s005_output/n100.r04.s005.trimmed.sorted.bam" > "n100.r04.s005_output/n100.r04.s005.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s005_output/n100.r04.s005.depth.txt" "n100.r04.s005_output/n100.r04.s005.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s005_output/n100.r04.s005.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s005_output/n100.r04.s005.reference.fas" | bcftools consensus -m "n100.r04.s005_output/n100.r04.s005.low_depth.tsv" tmp.vcf.gz > "n100.r04.s005_output/n100.r04.s005.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s005_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:47 scheduler task 50845845 (flow cc504ab7): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:47 scheduler task 50845845 (flow cc504ab7): waiting for completion (try 0): started
2021/07/08 16:51:47  ->  n100.r04.s062.Main.out_file cc504ab7 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:47 n100.r04.s062.Main.out_file cc504ab7 n100/r04/n100.r04.s062.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0ead5a86922efa8ffead4dce50c5334f61c107b912746b1df11b83c47dfa07b7
	sha256:cc504ab797685c6a9afb0cfd0d32fbe2c8bfef855a86cf2cf49324113cefb97b
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/50845845af8beac10dabe1a277d6293be03f3572c227050e91a70ec619d8dbf8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s062_output"
	    wget -O "n100.r04.s062_output/n100.r04.s062.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s062_output/n100.r04.s062.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s062_output/n100.r04.s062.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s062_output/n100.r04.s062.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s062_output/n100.r04.s062.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s062_output/n100.r04.s062.reference.fas" "n100.r04.s062_output/n100.r04.s062.fq1.fastq" "n100.r04.s062_output/n100.r04.s062.fq2.fastq" | samtools view -bS - > "n100.r04.s062_output/n100.r04.s062.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s062_output/n100.r04.s062.untrimmed.sorted.bam" "n100.r04.s062_output/n100.r04.s062.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s062_output/n100.r04.s062.untrimmed.sorted.bam" -b "n100.r04.s062_output/n100.r04.s062.primers.bed" -p "n100.r04.s062_output/n100.r04.s062.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s062_output/n100.r04.s062.trimmed.sorted.bam" "n100.r04.s062_output/n100.r04.s062.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s062_output/n100.r04.s062.reference.fas" "n100.r04.s062_output/n100.r04.s062.trimmed.sorted.bam" > "n100.r04.s062_output/n100.r04.s062.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s062_output/n100.r04.s062.reference.fas" --call-indels "n100.r04.s062_output/n100.r04.s062.trimmed.sorted.bam" > "n100.r04.s062_output/n100.r04.s062.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s062_output/n100.r04.s062.trimmed.sorted.bam" > "n100.r04.s062_output/n100.r04.s062.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s062_output/n100.r04.s062.depth.txt" "n100.r04.s062_output/n100.r04.s062.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s062_output/n100.r04.s062.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s062_output/n100.r04.s062.reference.fas" | bcftools consensus -m "n100.r04.s062_output/n100.r04.s062.low_depth.tsv" tmp.vcf.gz > "n100.r04.s062_output/n100.r04.s062.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s062_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:48 scheduler task d243ea7f (flow f880a376): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:48 scheduler task d243ea7f (flow f880a376): waiting for completion (try 0): started
2021/07/08 16:51:48  ->  n100.r04.s056.Main.out_file f880a376 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:48 n100.r04.s056.Main.out_file f880a376 n100/r04/n100.r04.s056.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:cb43bbbb38509eb954597e5910167f5eb123ccb0862a63b25e4e941dfe68a52a
	sha256:f880a376db1705ae3c2bc487dab0e104f0bcfcc5706311c22ec6310acf05a2b8
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d243ea7fe3a5ef22b3933ac4c1a79c39de8541bd7e13afd7fb92a38cbf13dc9e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s056_output"
	    wget -O "n100.r04.s056_output/n100.r04.s056.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s056_output/n100.r04.s056.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s056_output/n100.r04.s056.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s056_output/n100.r04.s056.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s056_output/n100.r04.s056.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s056_output/n100.r04.s056.reference.fas" "n100.r04.s056_output/n100.r04.s056.fq1.fastq" "n100.r04.s056_output/n100.r04.s056.fq2.fastq" | samtools view -bS - > "n100.r04.s056_output/n100.r04.s056.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s056_output/n100.r04.s056.untrimmed.sorted.bam" "n100.r04.s056_output/n100.r04.s056.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s056_output/n100.r04.s056.untrimmed.sorted.bam" -b "n100.r04.s056_output/n100.r04.s056.primers.bed" -p "n100.r04.s056_output/n100.r04.s056.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s056_output/n100.r04.s056.trimmed.sorted.bam" "n100.r04.s056_output/n100.r04.s056.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s056_output/n100.r04.s056.reference.fas" "n100.r04.s056_output/n100.r04.s056.trimmed.sorted.bam" > "n100.r04.s056_output/n100.r04.s056.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s056_output/n100.r04.s056.reference.fas" --call-indels "n100.r04.s056_output/n100.r04.s056.trimmed.sorted.bam" > "n100.r04.s056_output/n100.r04.s056.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s056_output/n100.r04.s056.trimmed.sorted.bam" > "n100.r04.s056_output/n100.r04.s056.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s056_output/n100.r04.s056.depth.txt" "n100.r04.s056_output/n100.r04.s056.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s056_output/n100.r04.s056.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s056_output/n100.r04.s056.reference.fas" | bcftools consensus -m "n100.r04.s056_output/n100.r04.s056.low_depth.tsv" tmp.vcf.gz > "n100.r04.s056_output/n100.r04.s056.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s056_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:48 scheduler task 8044c66f (flow 6f63202d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:48 scheduler task 8044c66f (flow 6f63202d): waiting for completion (try 0): started
2021/07/08 16:51:48  ->  n100.r04.s089.Main.out_file 6f63202d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:48 n100.r04.s089.Main.out_file 6f63202d n100/r04/n100.r04.s089.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:59f9d7596a9d59a1553abcafa5249d6cdf85848d37086c8ed81b3110009f069b
	sha256:6f63202d3bfafad468f30e26f9ee94bb988aece0a1ef81a751b923620f1b7637
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8044c66fd28c84eeb7fa4026c694f732137b1cf513747e115094a844f2c95ec1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s089_output"
	    wget -O "n100.r04.s089_output/n100.r04.s089.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s089_output/n100.r04.s089.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s089_output/n100.r04.s089.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s089_output/n100.r04.s089.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s089_output/n100.r04.s089.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s089_output/n100.r04.s089.reference.fas" "n100.r04.s089_output/n100.r04.s089.fq1.fastq" "n100.r04.s089_output/n100.r04.s089.fq2.fastq" | samtools view -bS - > "n100.r04.s089_output/n100.r04.s089.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s089_output/n100.r04.s089.untrimmed.sorted.bam" "n100.r04.s089_output/n100.r04.s089.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s089_output/n100.r04.s089.untrimmed.sorted.bam" -b "n100.r04.s089_output/n100.r04.s089.primers.bed" -p "n100.r04.s089_output/n100.r04.s089.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s089_output/n100.r04.s089.trimmed.sorted.bam" "n100.r04.s089_output/n100.r04.s089.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s089_output/n100.r04.s089.reference.fas" "n100.r04.s089_output/n100.r04.s089.trimmed.sorted.bam" > "n100.r04.s089_output/n100.r04.s089.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s089_output/n100.r04.s089.reference.fas" --call-indels "n100.r04.s089_output/n100.r04.s089.trimmed.sorted.bam" > "n100.r04.s089_output/n100.r04.s089.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s089_output/n100.r04.s089.trimmed.sorted.bam" > "n100.r04.s089_output/n100.r04.s089.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s089_output/n100.r04.s089.depth.txt" "n100.r04.s089_output/n100.r04.s089.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s089_output/n100.r04.s089.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s089_output/n100.r04.s089.reference.fas" | bcftools consensus -m "n100.r04.s089_output/n100.r04.s089.low_depth.tsv" tmp.vcf.gz > "n100.r04.s089_output/n100.r04.s089.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s089_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:48 scheduler task f7f2648e (flow 062361bd): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:48 scheduler task f7f2648e (flow 062361bd): waiting for completion (try 0): started
2021/07/08 16:51:48  ->  n100.r04.s071.Main.out_file 062361bd exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:48 n100.r04.s071.Main.out_file 062361bd n100/r04/n100.r04.s071.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:97410d63ea94ea1ec250a86f527995667ab79fc00fe9d569e17996b0fe8e3a21
	sha256:062361bd92d8ceba3da24cc1bebd240383f647b507a43a75e9060c0a8c6d962f
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f7f2648e20f9dc543c2036cbb761f236f4d6cc3f4fae0c5284ee9b1db85f9be4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s071_output"
	    wget -O "n100.r04.s071_output/n100.r04.s071.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s071_output/n100.r04.s071.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s071_output/n100.r04.s071.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s071_output/n100.r04.s071.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s071_output/n100.r04.s071.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s071_output/n100.r04.s071.reference.fas" "n100.r04.s071_output/n100.r04.s071.fq1.fastq" "n100.r04.s071_output/n100.r04.s071.fq2.fastq" | samtools view -bS - > "n100.r04.s071_output/n100.r04.s071.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s071_output/n100.r04.s071.untrimmed.sorted.bam" "n100.r04.s071_output/n100.r04.s071.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s071_output/n100.r04.s071.untrimmed.sorted.bam" -b "n100.r04.s071_output/n100.r04.s071.primers.bed" -p "n100.r04.s071_output/n100.r04.s071.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s071_output/n100.r04.s071.trimmed.sorted.bam" "n100.r04.s071_output/n100.r04.s071.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s071_output/n100.r04.s071.reference.fas" "n100.r04.s071_output/n100.r04.s071.trimmed.sorted.bam" > "n100.r04.s071_output/n100.r04.s071.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s071_output/n100.r04.s071.reference.fas" --call-indels "n100.r04.s071_output/n100.r04.s071.trimmed.sorted.bam" > "n100.r04.s071_output/n100.r04.s071.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s071_output/n100.r04.s071.trimmed.sorted.bam" > "n100.r04.s071_output/n100.r04.s071.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s071_output/n100.r04.s071.depth.txt" "n100.r04.s071_output/n100.r04.s071.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s071_output/n100.r04.s071.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s071_output/n100.r04.s071.reference.fas" | bcftools consensus -m "n100.r04.s071_output/n100.r04.s071.low_depth.tsv" tmp.vcf.gz > "n100.r04.s071_output/n100.r04.s071.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s071_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:48 scheduler task aee028ec (flow 0f5f6f8e): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:48 scheduler task aee028ec (flow 0f5f6f8e): waiting for completion (try 0): started
2021/07/08 16:51:48  ->  n100.r04.s016.Main.out_file 0f5f6f8e exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:48 n100.r04.s016.Main.out_file 0f5f6f8e n100/r04/n100.r04.s016.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:23c8b78628af0a1f6fd07d8e22809f6fbe06cf052772cfca805784947bcec86a
	sha256:0f5f6f8eb16584c52873d072917e26d94e67f00484832360612e9a9c5d235a9c
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/aee028ecbef005860879fb67630b2a411f6f99da68990581f060828b0d57ff2c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s016_output"
	    wget -O "n100.r04.s016_output/n100.r04.s016.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s016_output/n100.r04.s016.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s016_output/n100.r04.s016.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s016_output/n100.r04.s016.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s016_output/n100.r04.s016.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s016_output/n100.r04.s016.reference.fas" "n100.r04.s016_output/n100.r04.s016.fq1.fastq" "n100.r04.s016_output/n100.r04.s016.fq2.fastq" | samtools view -bS - > "n100.r04.s016_output/n100.r04.s016.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s016_output/n100.r04.s016.untrimmed.sorted.bam" "n100.r04.s016_output/n100.r04.s016.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s016_output/n100.r04.s016.untrimmed.sorted.bam" -b "n100.r04.s016_output/n100.r04.s016.primers.bed" -p "n100.r04.s016_output/n100.r04.s016.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s016_output/n100.r04.s016.trimmed.sorted.bam" "n100.r04.s016_output/n100.r04.s016.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s016_output/n100.r04.s016.reference.fas" "n100.r04.s016_output/n100.r04.s016.trimmed.sorted.bam" > "n100.r04.s016_output/n100.r04.s016.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s016_output/n100.r04.s016.reference.fas" --call-indels "n100.r04.s016_output/n100.r04.s016.trimmed.sorted.bam" > "n100.r04.s016_output/n100.r04.s016.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s016_output/n100.r04.s016.trimmed.sorted.bam" > "n100.r04.s016_output/n100.r04.s016.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s016_output/n100.r04.s016.depth.txt" "n100.r04.s016_output/n100.r04.s016.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s016_output/n100.r04.s016.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s016_output/n100.r04.s016.reference.fas" | bcftools consensus -m "n100.r04.s016_output/n100.r04.s016.low_depth.tsv" tmp.vcf.gz > "n100.r04.s016_output/n100.r04.s016.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s016_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:48 scheduler task a322da77 (flow 70dfd3f3): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:48 scheduler task a322da77 (flow 70dfd3f3): waiting for completion (try 0): started
2021/07/08 16:51:48  ->  n100.r04.s091.Main.out_file 70dfd3f3 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:48 n100.r04.s091.Main.out_file 70dfd3f3 n100/r04/n100.r04.s091.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:37044fccfa69963923ad4d622aa74c15162f044224e277f3452da148a89f3c70
	sha256:70dfd3f3d58816542ac2543be7c2526edde850a6031c01beb55e6fef3166a778
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a322da77fa9baf0cbb47a3db670d252e95d17ff80c26712da44074951878589f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s091_output"
	    wget -O "n100.r04.s091_output/n100.r04.s091.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s091_output/n100.r04.s091.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s091_output/n100.r04.s091.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s091_output/n100.r04.s091.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s091_output/n100.r04.s091.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s091_output/n100.r04.s091.reference.fas" "n100.r04.s091_output/n100.r04.s091.fq1.fastq" "n100.r04.s091_output/n100.r04.s091.fq2.fastq" | samtools view -bS - > "n100.r04.s091_output/n100.r04.s091.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s091_output/n100.r04.s091.untrimmed.sorted.bam" "n100.r04.s091_output/n100.r04.s091.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s091_output/n100.r04.s091.untrimmed.sorted.bam" -b "n100.r04.s091_output/n100.r04.s091.primers.bed" -p "n100.r04.s091_output/n100.r04.s091.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s091_output/n100.r04.s091.trimmed.sorted.bam" "n100.r04.s091_output/n100.r04.s091.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s091_output/n100.r04.s091.reference.fas" "n100.r04.s091_output/n100.r04.s091.trimmed.sorted.bam" > "n100.r04.s091_output/n100.r04.s091.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s091_output/n100.r04.s091.reference.fas" --call-indels "n100.r04.s091_output/n100.r04.s091.trimmed.sorted.bam" > "n100.r04.s091_output/n100.r04.s091.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s091_output/n100.r04.s091.trimmed.sorted.bam" > "n100.r04.s091_output/n100.r04.s091.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s091_output/n100.r04.s091.depth.txt" "n100.r04.s091_output/n100.r04.s091.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s091_output/n100.r04.s091.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s091_output/n100.r04.s091.reference.fas" | bcftools consensus -m "n100.r04.s091_output/n100.r04.s091.low_depth.tsv" tmp.vcf.gz > "n100.r04.s091_output/n100.r04.s091.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s091_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:48 scheduler task df28c1ac (flow b17ff5c7): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:48 scheduler task df28c1ac (flow b17ff5c7): waiting for completion (try 0): started
2021/07/08 16:51:48  ->  n100.r04.s017.Main.out_file b17ff5c7 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:48 n100.r04.s017.Main.out_file b17ff5c7 n100/r04/n100.r04.s017.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:96262eab27fbe164be98c7c3d8d68f931a0557d90c73da749386629af196aa60
	sha256:b17ff5c79edb8b2ef1938fc46dfd89fd54b67946da94ab9e48208b674274eb8a
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/df28c1ac2768e7fc1b46c0c49ad43e73f7dfcdab37a534faafc399183ef9d39b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s017_output"
	    wget -O "n100.r04.s017_output/n100.r04.s017.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s017_output/n100.r04.s017.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s017_output/n100.r04.s017.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s017_output/n100.r04.s017.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s017_output/n100.r04.s017.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s017_output/n100.r04.s017.reference.fas" "n100.r04.s017_output/n100.r04.s017.fq1.fastq" "n100.r04.s017_output/n100.r04.s017.fq2.fastq" | samtools view -bS - > "n100.r04.s017_output/n100.r04.s017.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s017_output/n100.r04.s017.untrimmed.sorted.bam" "n100.r04.s017_output/n100.r04.s017.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s017_output/n100.r04.s017.untrimmed.sorted.bam" -b "n100.r04.s017_output/n100.r04.s017.primers.bed" -p "n100.r04.s017_output/n100.r04.s017.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s017_output/n100.r04.s017.trimmed.sorted.bam" "n100.r04.s017_output/n100.r04.s017.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s017_output/n100.r04.s017.reference.fas" "n100.r04.s017_output/n100.r04.s017.trimmed.sorted.bam" > "n100.r04.s017_output/n100.r04.s017.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s017_output/n100.r04.s017.reference.fas" --call-indels "n100.r04.s017_output/n100.r04.s017.trimmed.sorted.bam" > "n100.r04.s017_output/n100.r04.s017.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s017_output/n100.r04.s017.trimmed.sorted.bam" > "n100.r04.s017_output/n100.r04.s017.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s017_output/n100.r04.s017.depth.txt" "n100.r04.s017_output/n100.r04.s017.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s017_output/n100.r04.s017.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s017_output/n100.r04.s017.reference.fas" | bcftools consensus -m "n100.r04.s017_output/n100.r04.s017.low_depth.tsv" tmp.vcf.gz > "n100.r04.s017_output/n100.r04.s017.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s017_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:49 scheduler task b4a5ccae (flow 6bc2ef0b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:49 scheduler task b4a5ccae (flow 6bc2ef0b): waiting for completion (try 0): started
2021/07/08 16:51:49  ->  n100.r04.s072.Main.out_file 6bc2ef0b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:49 n100.r04.s072.Main.out_file 6bc2ef0b n100/r04/n100.r04.s072.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5686d7fff0d49f1cd3d31990a3b806075fd050357bdadefbf1c9afef0f37aa81
	sha256:6bc2ef0bcdfeb4cc847d06e19964691ae2eab9d82832f403fc0edd40e6ace48b
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b4a5ccaefcf4d3b35c31ee5490ce66052ac39de3f9c9feb3dd46747a73040b48
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s072_output"
	    wget -O "n100.r04.s072_output/n100.r04.s072.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s072_output/n100.r04.s072.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s072_output/n100.r04.s072.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s072_output/n100.r04.s072.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s072_output/n100.r04.s072.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s072_output/n100.r04.s072.reference.fas" "n100.r04.s072_output/n100.r04.s072.fq1.fastq" "n100.r04.s072_output/n100.r04.s072.fq2.fastq" | samtools view -bS - > "n100.r04.s072_output/n100.r04.s072.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s072_output/n100.r04.s072.untrimmed.sorted.bam" "n100.r04.s072_output/n100.r04.s072.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s072_output/n100.r04.s072.untrimmed.sorted.bam" -b "n100.r04.s072_output/n100.r04.s072.primers.bed" -p "n100.r04.s072_output/n100.r04.s072.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s072_output/n100.r04.s072.trimmed.sorted.bam" "n100.r04.s072_output/n100.r04.s072.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s072_output/n100.r04.s072.reference.fas" "n100.r04.s072_output/n100.r04.s072.trimmed.sorted.bam" > "n100.r04.s072_output/n100.r04.s072.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s072_output/n100.r04.s072.reference.fas" --call-indels "n100.r04.s072_output/n100.r04.s072.trimmed.sorted.bam" > "n100.r04.s072_output/n100.r04.s072.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s072_output/n100.r04.s072.trimmed.sorted.bam" > "n100.r04.s072_output/n100.r04.s072.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s072_output/n100.r04.s072.depth.txt" "n100.r04.s072_output/n100.r04.s072.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s072_output/n100.r04.s072.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s072_output/n100.r04.s072.reference.fas" | bcftools consensus -m "n100.r04.s072_output/n100.r04.s072.low_depth.tsv" tmp.vcf.gz > "n100.r04.s072_output/n100.r04.s072.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s072_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:49 scheduler task de374a3f (flow c4d8efb1): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:49 scheduler task de374a3f (flow c4d8efb1): waiting for completion (try 0): started
2021/07/08 16:51:49  ->  n100.r04.s059.Main.out_file c4d8efb1 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:49 n100.r04.s059.Main.out_file c4d8efb1 n100/r04/n100.r04.s059.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:07bda1ab6afc4dbf23bfebf316a981957480c66a1201eeaa01d6e66eead34e32
	sha256:c4d8efb136b3a59e1ac97565d4baccd17705ea94c9d01512f30d7f82d9133349
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/de374a3f0c3acf586ba3574aebb1123cc442bc7c4bc38106cc1ebeb7e0fb58b0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s059_output"
	    wget -O "n100.r04.s059_output/n100.r04.s059.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s059_output/n100.r04.s059.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s059_output/n100.r04.s059.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s059_output/n100.r04.s059.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s059_output/n100.r04.s059.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s059_output/n100.r04.s059.reference.fas" "n100.r04.s059_output/n100.r04.s059.fq1.fastq" "n100.r04.s059_output/n100.r04.s059.fq2.fastq" | samtools view -bS - > "n100.r04.s059_output/n100.r04.s059.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s059_output/n100.r04.s059.untrimmed.sorted.bam" "n100.r04.s059_output/n100.r04.s059.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s059_output/n100.r04.s059.untrimmed.sorted.bam" -b "n100.r04.s059_output/n100.r04.s059.primers.bed" -p "n100.r04.s059_output/n100.r04.s059.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s059_output/n100.r04.s059.trimmed.sorted.bam" "n100.r04.s059_output/n100.r04.s059.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s059_output/n100.r04.s059.reference.fas" "n100.r04.s059_output/n100.r04.s059.trimmed.sorted.bam" > "n100.r04.s059_output/n100.r04.s059.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s059_output/n100.r04.s059.reference.fas" --call-indels "n100.r04.s059_output/n100.r04.s059.trimmed.sorted.bam" > "n100.r04.s059_output/n100.r04.s059.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s059_output/n100.r04.s059.trimmed.sorted.bam" > "n100.r04.s059_output/n100.r04.s059.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s059_output/n100.r04.s059.depth.txt" "n100.r04.s059_output/n100.r04.s059.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s059_output/n100.r04.s059.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s059_output/n100.r04.s059.reference.fas" | bcftools consensus -m "n100.r04.s059_output/n100.r04.s059.low_depth.tsv" tmp.vcf.gz > "n100.r04.s059_output/n100.r04.s059.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s059_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:49 scheduler task 15151169 (flow a6da6753): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:49 scheduler task 15151169 (flow a6da6753): waiting for completion (try 0): started
2021/07/08 16:51:49  ->  n100.r04.s079.Main.out_file a6da6753 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:49 n100.r04.s079.Main.out_file a6da6753 n100/r04/n100.r04.s079.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f9c2cb3405855417a5dac9b75760131b8e301224d499615094a3a3561cd4c62d
	sha256:a6da6753637412ea4243db826e53ee9da191f648aa0e4acb03e5a5b780901172
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/151511690cc0ffad033a992b0c116cda47e204590ff0b00394238fce9a61c90d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s079_output"
	    wget -O "n100.r04.s079_output/n100.r04.s079.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s079_output/n100.r04.s079.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s079_output/n100.r04.s079.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s079_output/n100.r04.s079.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s079_output/n100.r04.s079.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s079_output/n100.r04.s079.reference.fas" "n100.r04.s079_output/n100.r04.s079.fq1.fastq" "n100.r04.s079_output/n100.r04.s079.fq2.fastq" | samtools view -bS - > "n100.r04.s079_output/n100.r04.s079.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s079_output/n100.r04.s079.untrimmed.sorted.bam" "n100.r04.s079_output/n100.r04.s079.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s079_output/n100.r04.s079.untrimmed.sorted.bam" -b "n100.r04.s079_output/n100.r04.s079.primers.bed" -p "n100.r04.s079_output/n100.r04.s079.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s079_output/n100.r04.s079.trimmed.sorted.bam" "n100.r04.s079_output/n100.r04.s079.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s079_output/n100.r04.s079.reference.fas" "n100.r04.s079_output/n100.r04.s079.trimmed.sorted.bam" > "n100.r04.s079_output/n100.r04.s079.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s079_output/n100.r04.s079.reference.fas" --call-indels "n100.r04.s079_output/n100.r04.s079.trimmed.sorted.bam" > "n100.r04.s079_output/n100.r04.s079.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s079_output/n100.r04.s079.trimmed.sorted.bam" > "n100.r04.s079_output/n100.r04.s079.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s079_output/n100.r04.s079.depth.txt" "n100.r04.s079_output/n100.r04.s079.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s079_output/n100.r04.s079.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s079_output/n100.r04.s079.reference.fas" | bcftools consensus -m "n100.r04.s079_output/n100.r04.s079.low_depth.tsv" tmp.vcf.gz > "n100.r04.s079_output/n100.r04.s079.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s079_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:49 scheduler task c9e9d6bb (flow 763a3244): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:49 scheduler task c9e9d6bb (flow 763a3244): waiting for completion (try 0): started
2021/07/08 16:51:49  ->  n100.r04.s068.Main.out_file 763a3244 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:49 n100.r04.s068.Main.out_file 763a3244 n100/r04/n100.r04.s068.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ef0ff54ad63fb5f2faf80612d10ba0ab14415896ffc5c57bc1e2d349c0c5695b
	sha256:763a32448f97c378bbca3deea2ac637e0da8b15874ad538b5f0df42c59ed5870
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c9e9d6bb5b41383066d8872af612f707922371c3da08032da83991e8b6dad9f5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s068_output"
	    wget -O "n100.r04.s068_output/n100.r04.s068.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s068_output/n100.r04.s068.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s068_output/n100.r04.s068.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s068_output/n100.r04.s068.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s068_output/n100.r04.s068.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s068_output/n100.r04.s068.reference.fas" "n100.r04.s068_output/n100.r04.s068.fq1.fastq" "n100.r04.s068_output/n100.r04.s068.fq2.fastq" | samtools view -bS - > "n100.r04.s068_output/n100.r04.s068.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s068_output/n100.r04.s068.untrimmed.sorted.bam" "n100.r04.s068_output/n100.r04.s068.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s068_output/n100.r04.s068.untrimmed.sorted.bam" -b "n100.r04.s068_output/n100.r04.s068.primers.bed" -p "n100.r04.s068_output/n100.r04.s068.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s068_output/n100.r04.s068.trimmed.sorted.bam" "n100.r04.s068_output/n100.r04.s068.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s068_output/n100.r04.s068.reference.fas" "n100.r04.s068_output/n100.r04.s068.trimmed.sorted.bam" > "n100.r04.s068_output/n100.r04.s068.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s068_output/n100.r04.s068.reference.fas" --call-indels "n100.r04.s068_output/n100.r04.s068.trimmed.sorted.bam" > "n100.r04.s068_output/n100.r04.s068.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s068_output/n100.r04.s068.trimmed.sorted.bam" > "n100.r04.s068_output/n100.r04.s068.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s068_output/n100.r04.s068.depth.txt" "n100.r04.s068_output/n100.r04.s068.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s068_output/n100.r04.s068.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s068_output/n100.r04.s068.reference.fas" | bcftools consensus -m "n100.r04.s068_output/n100.r04.s068.low_depth.tsv" tmp.vcf.gz > "n100.r04.s068_output/n100.r04.s068.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s068_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:49 scheduler task 8746c175 (flow e75028fb): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:49 scheduler task 8746c175 (flow e75028fb): waiting for completion (try 0): started
2021/07/08 16:51:49  ->  n100.r04.s001.Main.out_file e75028fb exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:49 n100.r04.s001.Main.out_file e75028fb n100/r04/n100.r04.s001.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2fd09c1378db9749f2cc835dd4c1b6ff2e4df22e0ea24437ce8c2f80fbb628ee
	sha256:e75028fb4c6368a6d918c59421ea962065239726f48cb09d394cf06180c8504c
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8746c175962d0629ca342db064c86977fa3b857dcd6f24e69b1da5a2ef021d7c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s001_output"
	    wget -O "n100.r04.s001_output/n100.r04.s001.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s001_output/n100.r04.s001.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s001_output/n100.r04.s001.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s001_output/n100.r04.s001.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s001_output/n100.r04.s001.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s001_output/n100.r04.s001.reference.fas" "n100.r04.s001_output/n100.r04.s001.fq1.fastq" "n100.r04.s001_output/n100.r04.s001.fq2.fastq" | samtools view -bS - > "n100.r04.s001_output/n100.r04.s001.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s001_output/n100.r04.s001.untrimmed.sorted.bam" "n100.r04.s001_output/n100.r04.s001.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s001_output/n100.r04.s001.untrimmed.sorted.bam" -b "n100.r04.s001_output/n100.r04.s001.primers.bed" -p "n100.r04.s001_output/n100.r04.s001.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s001_output/n100.r04.s001.trimmed.sorted.bam" "n100.r04.s001_output/n100.r04.s001.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s001_output/n100.r04.s001.reference.fas" "n100.r04.s001_output/n100.r04.s001.trimmed.sorted.bam" > "n100.r04.s001_output/n100.r04.s001.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s001_output/n100.r04.s001.reference.fas" --call-indels "n100.r04.s001_output/n100.r04.s001.trimmed.sorted.bam" > "n100.r04.s001_output/n100.r04.s001.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s001_output/n100.r04.s001.trimmed.sorted.bam" > "n100.r04.s001_output/n100.r04.s001.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s001_output/n100.r04.s001.depth.txt" "n100.r04.s001_output/n100.r04.s001.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s001_output/n100.r04.s001.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s001_output/n100.r04.s001.reference.fas" | bcftools consensus -m "n100.r04.s001_output/n100.r04.s001.low_depth.tsv" tmp.vcf.gz > "n100.r04.s001_output/n100.r04.s001.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s001_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:49 scheduler task 5aa4bfc6 (flow e7565ce6): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:49 scheduler task 5aa4bfc6 (flow e7565ce6): waiting for completion (try 0): started
2021/07/08 16:51:49  ->  n100.r04.s054.Main.out_file e7565ce6 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:49 n100.r04.s054.Main.out_file e7565ce6 n100/r04/n100.r04.s054.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:94a35da8385b2e7706d6272f31bb01e1703c81fc6545002715515e0ec36ec019
	sha256:e7565ce6830ca1f49051717e87cc57230e4f32e50f7f9fbba1102418732b9d72
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5aa4bfc6bedd86797b499b2ba57a602f046f5e13f8855021f382f05858813f11
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s054_output"
	    wget -O "n100.r04.s054_output/n100.r04.s054.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s054_output/n100.r04.s054.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s054_output/n100.r04.s054.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s054_output/n100.r04.s054.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s054_output/n100.r04.s054.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s054_output/n100.r04.s054.reference.fas" "n100.r04.s054_output/n100.r04.s054.fq1.fastq" "n100.r04.s054_output/n100.r04.s054.fq2.fastq" | samtools view -bS - > "n100.r04.s054_output/n100.r04.s054.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s054_output/n100.r04.s054.untrimmed.sorted.bam" "n100.r04.s054_output/n100.r04.s054.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s054_output/n100.r04.s054.untrimmed.sorted.bam" -b "n100.r04.s054_output/n100.r04.s054.primers.bed" -p "n100.r04.s054_output/n100.r04.s054.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s054_output/n100.r04.s054.trimmed.sorted.bam" "n100.r04.s054_output/n100.r04.s054.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s054_output/n100.r04.s054.reference.fas" "n100.r04.s054_output/n100.r04.s054.trimmed.sorted.bam" > "n100.r04.s054_output/n100.r04.s054.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s054_output/n100.r04.s054.reference.fas" --call-indels "n100.r04.s054_output/n100.r04.s054.trimmed.sorted.bam" > "n100.r04.s054_output/n100.r04.s054.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s054_output/n100.r04.s054.trimmed.sorted.bam" > "n100.r04.s054_output/n100.r04.s054.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s054_output/n100.r04.s054.depth.txt" "n100.r04.s054_output/n100.r04.s054.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s054_output/n100.r04.s054.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s054_output/n100.r04.s054.reference.fas" | bcftools consensus -m "n100.r04.s054_output/n100.r04.s054.low_depth.tsv" tmp.vcf.gz > "n100.r04.s054_output/n100.r04.s054.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s054_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:50 scheduler task d21168f4 (flow fb8de0c9): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:50 scheduler task d21168f4 (flow fb8de0c9): waiting for completion (try 0): started
2021/07/08 16:51:50  ->  n100.r04.s051.Main.out_file fb8de0c9 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:50 n100.r04.s051.Main.out_file fb8de0c9 n100/r04/n100.r04.s051.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6d59e7ac54e53e7ebdeb89fdcf030887a8af627d19b78d30041cb9f80fe73378
	sha256:fb8de0c9cb3b99d7ba135133ac5d52b49d1b86efeb6f76b5a5a781a96c97252b
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d21168f424c1b3f9445e1bd9f0f3a8c75f3d63d5051f1d17eb1395331f84eddf
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s051_output"
	    wget -O "n100.r04.s051_output/n100.r04.s051.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s051_output/n100.r04.s051.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s051_output/n100.r04.s051.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s051_output/n100.r04.s051.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s051_output/n100.r04.s051.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s051_output/n100.r04.s051.reference.fas" "n100.r04.s051_output/n100.r04.s051.fq1.fastq" "n100.r04.s051_output/n100.r04.s051.fq2.fastq" | samtools view -bS - > "n100.r04.s051_output/n100.r04.s051.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s051_output/n100.r04.s051.untrimmed.sorted.bam" "n100.r04.s051_output/n100.r04.s051.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s051_output/n100.r04.s051.untrimmed.sorted.bam" -b "n100.r04.s051_output/n100.r04.s051.primers.bed" -p "n100.r04.s051_output/n100.r04.s051.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s051_output/n100.r04.s051.trimmed.sorted.bam" "n100.r04.s051_output/n100.r04.s051.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s051_output/n100.r04.s051.reference.fas" "n100.r04.s051_output/n100.r04.s051.trimmed.sorted.bam" > "n100.r04.s051_output/n100.r04.s051.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s051_output/n100.r04.s051.reference.fas" --call-indels "n100.r04.s051_output/n100.r04.s051.trimmed.sorted.bam" > "n100.r04.s051_output/n100.r04.s051.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s051_output/n100.r04.s051.trimmed.sorted.bam" > "n100.r04.s051_output/n100.r04.s051.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s051_output/n100.r04.s051.depth.txt" "n100.r04.s051_output/n100.r04.s051.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s051_output/n100.r04.s051.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s051_output/n100.r04.s051.reference.fas" | bcftools consensus -m "n100.r04.s051_output/n100.r04.s051.low_depth.tsv" tmp.vcf.gz > "n100.r04.s051_output/n100.r04.s051.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s051_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:50 scheduler task 5e492d41 (flow ac9e3373): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:50 scheduler task 5e492d41 (flow ac9e3373): waiting for completion (try 0): started
2021/07/08 16:51:50  ->  n100.r04.s050.Main.out_file ac9e3373 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:50 n100.r04.s050.Main.out_file ac9e3373 n100/r04/n100.r04.s050.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f1ca5de7b85f060e2daeceda31bc03ff7c348082da9d2660948b94e03d784399
	sha256:ac9e33730abf559f70f141e6263690272a88d798b82cb13df356ce18ec1952bc
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5e492d419a7a1ee3f20c34abce7d6f1a5810de40499037ce774055fcd002c6cb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s050_output"
	    wget -O "n100.r04.s050_output/n100.r04.s050.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s050_output/n100.r04.s050.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s050_output/n100.r04.s050.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s050_output/n100.r04.s050.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s050_output/n100.r04.s050.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s050_output/n100.r04.s050.reference.fas" "n100.r04.s050_output/n100.r04.s050.fq1.fastq" "n100.r04.s050_output/n100.r04.s050.fq2.fastq" | samtools view -bS - > "n100.r04.s050_output/n100.r04.s050.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s050_output/n100.r04.s050.untrimmed.sorted.bam" "n100.r04.s050_output/n100.r04.s050.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s050_output/n100.r04.s050.untrimmed.sorted.bam" -b "n100.r04.s050_output/n100.r04.s050.primers.bed" -p "n100.r04.s050_output/n100.r04.s050.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s050_output/n100.r04.s050.trimmed.sorted.bam" "n100.r04.s050_output/n100.r04.s050.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s050_output/n100.r04.s050.reference.fas" "n100.r04.s050_output/n100.r04.s050.trimmed.sorted.bam" > "n100.r04.s050_output/n100.r04.s050.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s050_output/n100.r04.s050.reference.fas" --call-indels "n100.r04.s050_output/n100.r04.s050.trimmed.sorted.bam" > "n100.r04.s050_output/n100.r04.s050.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s050_output/n100.r04.s050.trimmed.sorted.bam" > "n100.r04.s050_output/n100.r04.s050.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s050_output/n100.r04.s050.depth.txt" "n100.r04.s050_output/n100.r04.s050.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s050_output/n100.r04.s050.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s050_output/n100.r04.s050.reference.fas" | bcftools consensus -m "n100.r04.s050_output/n100.r04.s050.low_depth.tsv" tmp.vcf.gz > "n100.r04.s050_output/n100.r04.s050.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s050_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:50 scheduler task 331a85cb (flow e0813834): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:50 scheduler task 331a85cb (flow e0813834): waiting for completion (try 0): started
2021/07/08 16:51:50  ->  n100.r04.s067.Main.out_file e0813834 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:50 n100.r04.s067.Main.out_file e0813834 n100/r04/n100.r04.s067.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:205661b87c303501564b44c07406a570876c2cc9bde115aa7232812874b2132b
	sha256:e0813834eb53dfc8b5682749777ac668feab743e718f8024e314a29c7a974b43
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/331a85cbe2239520cd5279c279542ed838aef952d224354dcc960d23410b2298
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s067_output"
	    wget -O "n100.r04.s067_output/n100.r04.s067.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s067_output/n100.r04.s067.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s067_output/n100.r04.s067.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s067_output/n100.r04.s067.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s067_output/n100.r04.s067.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s067_output/n100.r04.s067.reference.fas" "n100.r04.s067_output/n100.r04.s067.fq1.fastq" "n100.r04.s067_output/n100.r04.s067.fq2.fastq" | samtools view -bS - > "n100.r04.s067_output/n100.r04.s067.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s067_output/n100.r04.s067.untrimmed.sorted.bam" "n100.r04.s067_output/n100.r04.s067.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s067_output/n100.r04.s067.untrimmed.sorted.bam" -b "n100.r04.s067_output/n100.r04.s067.primers.bed" -p "n100.r04.s067_output/n100.r04.s067.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s067_output/n100.r04.s067.trimmed.sorted.bam" "n100.r04.s067_output/n100.r04.s067.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s067_output/n100.r04.s067.reference.fas" "n100.r04.s067_output/n100.r04.s067.trimmed.sorted.bam" > "n100.r04.s067_output/n100.r04.s067.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s067_output/n100.r04.s067.reference.fas" --call-indels "n100.r04.s067_output/n100.r04.s067.trimmed.sorted.bam" > "n100.r04.s067_output/n100.r04.s067.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s067_output/n100.r04.s067.trimmed.sorted.bam" > "n100.r04.s067_output/n100.r04.s067.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s067_output/n100.r04.s067.depth.txt" "n100.r04.s067_output/n100.r04.s067.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s067_output/n100.r04.s067.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s067_output/n100.r04.s067.reference.fas" | bcftools consensus -m "n100.r04.s067_output/n100.r04.s067.low_depth.tsv" tmp.vcf.gz > "n100.r04.s067_output/n100.r04.s067.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s067_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:50 scheduler task 0956178b (flow 5468f4a3): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:50 scheduler task 0956178b (flow 5468f4a3): waiting for completion (try 0): started
2021/07/08 16:51:50  ->  n100.r04.s014.Main.out_file 5468f4a3 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:50 n100.r04.s014.Main.out_file 5468f4a3 n100/r04/n100.r04.s014.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0533f6e7b418cdbea9da6ce204d6e1ea6bad32cb4e74a2f898dcebe5d4ab5dc6
	sha256:5468f4a3d69006edc65ea2a45de557a7b8fe4525e245d6d75d79c1cacb2a29f8
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0956178b3f4c7e14023058878e5822b37cebc05f22415ebbcdd3afe2cd45ff66
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s014_output"
	    wget -O "n100.r04.s014_output/n100.r04.s014.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s014_output/n100.r04.s014.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s014_output/n100.r04.s014.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s014_output/n100.r04.s014.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s014_output/n100.r04.s014.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s014_output/n100.r04.s014.reference.fas" "n100.r04.s014_output/n100.r04.s014.fq1.fastq" "n100.r04.s014_output/n100.r04.s014.fq2.fastq" | samtools view -bS - > "n100.r04.s014_output/n100.r04.s014.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s014_output/n100.r04.s014.untrimmed.sorted.bam" "n100.r04.s014_output/n100.r04.s014.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s014_output/n100.r04.s014.untrimmed.sorted.bam" -b "n100.r04.s014_output/n100.r04.s014.primers.bed" -p "n100.r04.s014_output/n100.r04.s014.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s014_output/n100.r04.s014.trimmed.sorted.bam" "n100.r04.s014_output/n100.r04.s014.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s014_output/n100.r04.s014.reference.fas" "n100.r04.s014_output/n100.r04.s014.trimmed.sorted.bam" > "n100.r04.s014_output/n100.r04.s014.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s014_output/n100.r04.s014.reference.fas" --call-indels "n100.r04.s014_output/n100.r04.s014.trimmed.sorted.bam" > "n100.r04.s014_output/n100.r04.s014.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s014_output/n100.r04.s014.trimmed.sorted.bam" > "n100.r04.s014_output/n100.r04.s014.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s014_output/n100.r04.s014.depth.txt" "n100.r04.s014_output/n100.r04.s014.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s014_output/n100.r04.s014.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s014_output/n100.r04.s014.reference.fas" | bcftools consensus -m "n100.r04.s014_output/n100.r04.s014.low_depth.tsv" tmp.vcf.gz > "n100.r04.s014_output/n100.r04.s014.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s014_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:50 scheduler task 3bb8f0e4 (flow a324358a): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:50 scheduler task 3bb8f0e4 (flow a324358a): waiting for completion (try 0): started
2021/07/08 16:51:50  ->  n100.r04.s038.Main.out_file a324358a exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:50 n100.r04.s038.Main.out_file a324358a n100/r04/n100.r04.s038.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:205e40115ac125abe06fb6802858f9fbce1cdd3573b7fe602cf372d1ea3760c2
	sha256:a324358acb22cccb651d592e30f1248b0489dce322c7e9d3ce173da0bdadd28f
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3bb8f0e4bf7d9936fe86131d80127c2a87bcce574150308e1b030475bc9822a9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s038_output"
	    wget -O "n100.r04.s038_output/n100.r04.s038.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s038_output/n100.r04.s038.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s038_output/n100.r04.s038.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s038_output/n100.r04.s038.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s038_output/n100.r04.s038.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s038_output/n100.r04.s038.reference.fas" "n100.r04.s038_output/n100.r04.s038.fq1.fastq" "n100.r04.s038_output/n100.r04.s038.fq2.fastq" | samtools view -bS - > "n100.r04.s038_output/n100.r04.s038.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s038_output/n100.r04.s038.untrimmed.sorted.bam" "n100.r04.s038_output/n100.r04.s038.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s038_output/n100.r04.s038.untrimmed.sorted.bam" -b "n100.r04.s038_output/n100.r04.s038.primers.bed" -p "n100.r04.s038_output/n100.r04.s038.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s038_output/n100.r04.s038.trimmed.sorted.bam" "n100.r04.s038_output/n100.r04.s038.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s038_output/n100.r04.s038.reference.fas" "n100.r04.s038_output/n100.r04.s038.trimmed.sorted.bam" > "n100.r04.s038_output/n100.r04.s038.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s038_output/n100.r04.s038.reference.fas" --call-indels "n100.r04.s038_output/n100.r04.s038.trimmed.sorted.bam" > "n100.r04.s038_output/n100.r04.s038.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s038_output/n100.r04.s038.trimmed.sorted.bam" > "n100.r04.s038_output/n100.r04.s038.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s038_output/n100.r04.s038.depth.txt" "n100.r04.s038_output/n100.r04.s038.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s038_output/n100.r04.s038.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s038_output/n100.r04.s038.reference.fas" | bcftools consensus -m "n100.r04.s038_output/n100.r04.s038.low_depth.tsv" tmp.vcf.gz > "n100.r04.s038_output/n100.r04.s038.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s038_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:50 scheduler task ad833c50 (flow e08e8afe): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:50 scheduler task ad833c50 (flow e08e8afe): waiting for completion (try 0): started
2021/07/08 16:51:50  ->  n100.r04.s015.Main.out_file e08e8afe exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:50 n100.r04.s015.Main.out_file e08e8afe n100/r04/n100.r04.s015.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fcefa8221ff09629d38d4fd9643698193b5485aee380cc69f83cc24a0eb8f791
	sha256:e08e8afe073be31ebcba648be0e686eaac9a876bd87f271defe5f9d00bbb3b94
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ad833c50530cebccde27bed54778aed8eb0908c03e97e4d6449a9a961c62ac25
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s015_output"
	    wget -O "n100.r04.s015_output/n100.r04.s015.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s015_output/n100.r04.s015.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s015_output/n100.r04.s015.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s015_output/n100.r04.s015.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s015_output/n100.r04.s015.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s015_output/n100.r04.s015.reference.fas" "n100.r04.s015_output/n100.r04.s015.fq1.fastq" "n100.r04.s015_output/n100.r04.s015.fq2.fastq" | samtools view -bS - > "n100.r04.s015_output/n100.r04.s015.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s015_output/n100.r04.s015.untrimmed.sorted.bam" "n100.r04.s015_output/n100.r04.s015.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s015_output/n100.r04.s015.untrimmed.sorted.bam" -b "n100.r04.s015_output/n100.r04.s015.primers.bed" -p "n100.r04.s015_output/n100.r04.s015.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s015_output/n100.r04.s015.trimmed.sorted.bam" "n100.r04.s015_output/n100.r04.s015.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s015_output/n100.r04.s015.reference.fas" "n100.r04.s015_output/n100.r04.s015.trimmed.sorted.bam" > "n100.r04.s015_output/n100.r04.s015.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s015_output/n100.r04.s015.reference.fas" --call-indels "n100.r04.s015_output/n100.r04.s015.trimmed.sorted.bam" > "n100.r04.s015_output/n100.r04.s015.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s015_output/n100.r04.s015.trimmed.sorted.bam" > "n100.r04.s015_output/n100.r04.s015.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s015_output/n100.r04.s015.depth.txt" "n100.r04.s015_output/n100.r04.s015.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s015_output/n100.r04.s015.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s015_output/n100.r04.s015.reference.fas" | bcftools consensus -m "n100.r04.s015_output/n100.r04.s015.low_depth.tsv" tmp.vcf.gz > "n100.r04.s015_output/n100.r04.s015.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s015_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:51 scheduler task 54f6f6fd (flow c54bfbbc): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:51 scheduler task 54f6f6fd (flow c54bfbbc): waiting for completion (try 0): started
2021/07/08 16:51:51  ->  n100.r04.s092.Main.out_file c54bfbbc exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:51 n100.r04.s092.Main.out_file c54bfbbc n100/r04/n100.r04.s092.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8a068151b9e6d52824feffad73de9463a638bfd5e6108ea76c2800a1c1d07364
	sha256:c54bfbbc0627fe110b47b40398765ccb940818e40e3b30c134de655a17f186e4
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/54f6f6fd181b7824ef9e2179e137dea55094264d98af4ffca9439cbdaf6054ed
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s092_output"
	    wget -O "n100.r04.s092_output/n100.r04.s092.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s092_output/n100.r04.s092.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s092_output/n100.r04.s092.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s092_output/n100.r04.s092.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s092_output/n100.r04.s092.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s092_output/n100.r04.s092.reference.fas" "n100.r04.s092_output/n100.r04.s092.fq1.fastq" "n100.r04.s092_output/n100.r04.s092.fq2.fastq" | samtools view -bS - > "n100.r04.s092_output/n100.r04.s092.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s092_output/n100.r04.s092.untrimmed.sorted.bam" "n100.r04.s092_output/n100.r04.s092.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s092_output/n100.r04.s092.untrimmed.sorted.bam" -b "n100.r04.s092_output/n100.r04.s092.primers.bed" -p "n100.r04.s092_output/n100.r04.s092.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s092_output/n100.r04.s092.trimmed.sorted.bam" "n100.r04.s092_output/n100.r04.s092.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s092_output/n100.r04.s092.reference.fas" "n100.r04.s092_output/n100.r04.s092.trimmed.sorted.bam" > "n100.r04.s092_output/n100.r04.s092.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s092_output/n100.r04.s092.reference.fas" --call-indels "n100.r04.s092_output/n100.r04.s092.trimmed.sorted.bam" > "n100.r04.s092_output/n100.r04.s092.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s092_output/n100.r04.s092.trimmed.sorted.bam" > "n100.r04.s092_output/n100.r04.s092.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s092_output/n100.r04.s092.depth.txt" "n100.r04.s092_output/n100.r04.s092.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s092_output/n100.r04.s092.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s092_output/n100.r04.s092.reference.fas" | bcftools consensus -m "n100.r04.s092_output/n100.r04.s092.low_depth.tsv" tmp.vcf.gz > "n100.r04.s092_output/n100.r04.s092.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s092_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:51 scheduler task ecbdae4e (flow ea7c1d46): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:51 scheduler task ecbdae4e (flow ea7c1d46): waiting for completion (try 0): started
2021/07/08 16:51:51  ->  n100.r04.s058.Main.out_file ea7c1d46 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:51 n100.r04.s058.Main.out_file ea7c1d46 n100/r04/n100.r04.s058.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:37847556501cbbbaa63f3c845abaeb5ce209a0c85cbd249d78c71141432664d6
	sha256:ea7c1d46087a654fc7da7a68ec66db59ff83131367779a3bf4c2c3b29d4070a2
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ecbdae4edb77881d4469dbe07626d2ab20022e50435bfa60f142a2cf533a2d5d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s058_output"
	    wget -O "n100.r04.s058_output/n100.r04.s058.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s058_output/n100.r04.s058.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s058_output/n100.r04.s058.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s058_output/n100.r04.s058.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s058_output/n100.r04.s058.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s058_output/n100.r04.s058.reference.fas" "n100.r04.s058_output/n100.r04.s058.fq1.fastq" "n100.r04.s058_output/n100.r04.s058.fq2.fastq" | samtools view -bS - > "n100.r04.s058_output/n100.r04.s058.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s058_output/n100.r04.s058.untrimmed.sorted.bam" "n100.r04.s058_output/n100.r04.s058.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s058_output/n100.r04.s058.untrimmed.sorted.bam" -b "n100.r04.s058_output/n100.r04.s058.primers.bed" -p "n100.r04.s058_output/n100.r04.s058.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s058_output/n100.r04.s058.trimmed.sorted.bam" "n100.r04.s058_output/n100.r04.s058.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s058_output/n100.r04.s058.reference.fas" "n100.r04.s058_output/n100.r04.s058.trimmed.sorted.bam" > "n100.r04.s058_output/n100.r04.s058.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s058_output/n100.r04.s058.reference.fas" --call-indels "n100.r04.s058_output/n100.r04.s058.trimmed.sorted.bam" > "n100.r04.s058_output/n100.r04.s058.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s058_output/n100.r04.s058.trimmed.sorted.bam" > "n100.r04.s058_output/n100.r04.s058.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s058_output/n100.r04.s058.depth.txt" "n100.r04.s058_output/n100.r04.s058.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s058_output/n100.r04.s058.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s058_output/n100.r04.s058.reference.fas" | bcftools consensus -m "n100.r04.s058_output/n100.r04.s058.low_depth.tsv" tmp.vcf.gz > "n100.r04.s058_output/n100.r04.s058.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s058_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:51 scheduler task 1e419403 (flow 9b73f7e9): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:51 scheduler task 1e419403 (flow 9b73f7e9): waiting for completion (try 0): started
2021/07/08 16:51:51  ->  n100.r04.s088.Main.out_file 9b73f7e9 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:51 n100.r04.s088.Main.out_file 9b73f7e9 n100/r04/n100.r04.s088.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8016adea81fc0677dc454b02834761155550bf37f72d34df8ce6ef19bc921ee1
	sha256:9b73f7e97183ce4f65355d0c7aff03bc05245b6842c05773b5d2df9177dcdcb8
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1e4194033ea169e3d0aa9796ece5bc58183df265f0a7f29310c4206196e9d032
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s088_output"
	    wget -O "n100.r04.s088_output/n100.r04.s088.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s088_output/n100.r04.s088.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s088_output/n100.r04.s088.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s088_output/n100.r04.s088.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s088_output/n100.r04.s088.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s088_output/n100.r04.s088.reference.fas" "n100.r04.s088_output/n100.r04.s088.fq1.fastq" "n100.r04.s088_output/n100.r04.s088.fq2.fastq" | samtools view -bS - > "n100.r04.s088_output/n100.r04.s088.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s088_output/n100.r04.s088.untrimmed.sorted.bam" "n100.r04.s088_output/n100.r04.s088.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s088_output/n100.r04.s088.untrimmed.sorted.bam" -b "n100.r04.s088_output/n100.r04.s088.primers.bed" -p "n100.r04.s088_output/n100.r04.s088.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s088_output/n100.r04.s088.trimmed.sorted.bam" "n100.r04.s088_output/n100.r04.s088.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s088_output/n100.r04.s088.reference.fas" "n100.r04.s088_output/n100.r04.s088.trimmed.sorted.bam" > "n100.r04.s088_output/n100.r04.s088.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s088_output/n100.r04.s088.reference.fas" --call-indels "n100.r04.s088_output/n100.r04.s088.trimmed.sorted.bam" > "n100.r04.s088_output/n100.r04.s088.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s088_output/n100.r04.s088.trimmed.sorted.bam" > "n100.r04.s088_output/n100.r04.s088.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s088_output/n100.r04.s088.depth.txt" "n100.r04.s088_output/n100.r04.s088.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s088_output/n100.r04.s088.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s088_output/n100.r04.s088.reference.fas" | bcftools consensus -m "n100.r04.s088_output/n100.r04.s088.low_depth.tsv" tmp.vcf.gz > "n100.r04.s088_output/n100.r04.s088.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s088_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:51 scheduler task 5bbe9c3d (flow 5f50c423): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:51 scheduler task 5bbe9c3d (flow 5f50c423): waiting for completion (try 0): started
2021/07/08 16:51:51  ->  n100.r04.s060.Main.out_file 5f50c423 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:51 n100.r04.s060.Main.out_file 5f50c423 n100/r04/n100.r04.s060.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7d9e1e34f8d1a552e369ff2d70febe4e407fafae26089f982141007e29ea4f2a
	sha256:5f50c423de64b276b724520eaa5a8f38061df841b6fb87eb0f1cdd0c26108176
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5bbe9c3dcf832276d78d7fda637be0a3c9d6a0b53c874bddeb9ec2a99b07885a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s060_output"
	    wget -O "n100.r04.s060_output/n100.r04.s060.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s060_output/n100.r04.s060.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s060_output/n100.r04.s060.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s060_output/n100.r04.s060.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s060_output/n100.r04.s060.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s060_output/n100.r04.s060.reference.fas" "n100.r04.s060_output/n100.r04.s060.fq1.fastq" "n100.r04.s060_output/n100.r04.s060.fq2.fastq" | samtools view -bS - > "n100.r04.s060_output/n100.r04.s060.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s060_output/n100.r04.s060.untrimmed.sorted.bam" "n100.r04.s060_output/n100.r04.s060.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s060_output/n100.r04.s060.untrimmed.sorted.bam" -b "n100.r04.s060_output/n100.r04.s060.primers.bed" -p "n100.r04.s060_output/n100.r04.s060.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s060_output/n100.r04.s060.trimmed.sorted.bam" "n100.r04.s060_output/n100.r04.s060.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s060_output/n100.r04.s060.reference.fas" "n100.r04.s060_output/n100.r04.s060.trimmed.sorted.bam" > "n100.r04.s060_output/n100.r04.s060.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s060_output/n100.r04.s060.reference.fas" --call-indels "n100.r04.s060_output/n100.r04.s060.trimmed.sorted.bam" > "n100.r04.s060_output/n100.r04.s060.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s060_output/n100.r04.s060.trimmed.sorted.bam" > "n100.r04.s060_output/n100.r04.s060.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s060_output/n100.r04.s060.depth.txt" "n100.r04.s060_output/n100.r04.s060.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s060_output/n100.r04.s060.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s060_output/n100.r04.s060.reference.fas" | bcftools consensus -m "n100.r04.s060_output/n100.r04.s060.low_depth.tsv" tmp.vcf.gz > "n100.r04.s060_output/n100.r04.s060.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s060_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:51 scheduler task c3b5748c (flow c441a068): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:51 scheduler task c3b5748c (flow c441a068): waiting for completion (try 0): started
2021/07/08 16:51:51  ->  n100.r04.s009.Main.out_file c441a068 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:51 n100.r04.s009.Main.out_file c441a068 n100/r04/n100.r04.s009.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:cea5a4cc8df76435e88092f3ef8a3aae5d56074643d94f0804650790202f6e1c
	sha256:c441a068c58f087638889f775e5ea959cfd8e643d098a936721056100951f6b9
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c3b5748c556167e0447385317710a58abf4fff99c5b4d2ccfaf5043557975604
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s009_output"
	    wget -O "n100.r04.s009_output/n100.r04.s009.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s009_output/n100.r04.s009.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s009_output/n100.r04.s009.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s009_output/n100.r04.s009.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s009_output/n100.r04.s009.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s009_output/n100.r04.s009.reference.fas" "n100.r04.s009_output/n100.r04.s009.fq1.fastq" "n100.r04.s009_output/n100.r04.s009.fq2.fastq" | samtools view -bS - > "n100.r04.s009_output/n100.r04.s009.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s009_output/n100.r04.s009.untrimmed.sorted.bam" "n100.r04.s009_output/n100.r04.s009.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s009_output/n100.r04.s009.untrimmed.sorted.bam" -b "n100.r04.s009_output/n100.r04.s009.primers.bed" -p "n100.r04.s009_output/n100.r04.s009.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s009_output/n100.r04.s009.trimmed.sorted.bam" "n100.r04.s009_output/n100.r04.s009.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s009_output/n100.r04.s009.reference.fas" "n100.r04.s009_output/n100.r04.s009.trimmed.sorted.bam" > "n100.r04.s009_output/n100.r04.s009.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s009_output/n100.r04.s009.reference.fas" --call-indels "n100.r04.s009_output/n100.r04.s009.trimmed.sorted.bam" > "n100.r04.s009_output/n100.r04.s009.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s009_output/n100.r04.s009.trimmed.sorted.bam" > "n100.r04.s009_output/n100.r04.s009.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s009_output/n100.r04.s009.depth.txt" "n100.r04.s009_output/n100.r04.s009.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s009_output/n100.r04.s009.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s009_output/n100.r04.s009.reference.fas" | bcftools consensus -m "n100.r04.s009_output/n100.r04.s009.low_depth.tsv" tmp.vcf.gz > "n100.r04.s009_output/n100.r04.s009.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s009_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:51 scheduler task a9de6e84 (flow 38bba01c): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:51 scheduler task a9de6e84 (flow 38bba01c): waiting for completion (try 0): started
2021/07/08 16:51:51  ->  n100.r04.s033.Main.out_file 38bba01c exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:51 n100.r04.s033.Main.out_file 38bba01c n100/r04/n100.r04.s033.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9cbd41d5892a0a4f83b39c7941cf9575925b6edd13ecde7be43edca3203831b5
	sha256:38bba01c33bdedaa63a01b1e3fcf8cd00d5a364d10bd98de32432bc8c37e18c0
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a9de6e84278a6b9cb2014991199b4ff782fd03e4086a6d51d62eae0702e9e5e8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s033_output"
	    wget -O "n100.r04.s033_output/n100.r04.s033.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s033_output/n100.r04.s033.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s033_output/n100.r04.s033.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s033_output/n100.r04.s033.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s033_output/n100.r04.s033.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s033_output/n100.r04.s033.reference.fas" "n100.r04.s033_output/n100.r04.s033.fq1.fastq" "n100.r04.s033_output/n100.r04.s033.fq2.fastq" | samtools view -bS - > "n100.r04.s033_output/n100.r04.s033.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s033_output/n100.r04.s033.untrimmed.sorted.bam" "n100.r04.s033_output/n100.r04.s033.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s033_output/n100.r04.s033.untrimmed.sorted.bam" -b "n100.r04.s033_output/n100.r04.s033.primers.bed" -p "n100.r04.s033_output/n100.r04.s033.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s033_output/n100.r04.s033.trimmed.sorted.bam" "n100.r04.s033_output/n100.r04.s033.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s033_output/n100.r04.s033.reference.fas" "n100.r04.s033_output/n100.r04.s033.trimmed.sorted.bam" > "n100.r04.s033_output/n100.r04.s033.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s033_output/n100.r04.s033.reference.fas" --call-indels "n100.r04.s033_output/n100.r04.s033.trimmed.sorted.bam" > "n100.r04.s033_output/n100.r04.s033.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s033_output/n100.r04.s033.trimmed.sorted.bam" > "n100.r04.s033_output/n100.r04.s033.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s033_output/n100.r04.s033.depth.txt" "n100.r04.s033_output/n100.r04.s033.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s033_output/n100.r04.s033.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s033_output/n100.r04.s033.reference.fas" | bcftools consensus -m "n100.r04.s033_output/n100.r04.s033.low_depth.tsv" tmp.vcf.gz > "n100.r04.s033_output/n100.r04.s033.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s033_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:52 scheduler task fc3e1467 (flow 1d35c114): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:52 scheduler task fc3e1467 (flow 1d35c114): waiting for completion (try 0): started
2021/07/08 16:51:52  ->  n100.r04.s057.Main.out_file 1d35c114 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:52 n100.r04.s057.Main.out_file 1d35c114 n100/r04/n100.r04.s057.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:61651064d8ad0d48bfbde48d07caeb432571122d5dd78d66c514235781ada270
	sha256:1d35c1146eebddfeec9ca4f1d0ea3435ce2da6cda89218f559188284f73730bd
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fc3e1467dba5ed111df92a917a941e4fbd0f4f44e691ac2ba5131e13384d1ae3
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s057_output"
	    wget -O "n100.r04.s057_output/n100.r04.s057.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s057_output/n100.r04.s057.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s057_output/n100.r04.s057.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s057_output/n100.r04.s057.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s057_output/n100.r04.s057.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s057_output/n100.r04.s057.reference.fas" "n100.r04.s057_output/n100.r04.s057.fq1.fastq" "n100.r04.s057_output/n100.r04.s057.fq2.fastq" | samtools view -bS - > "n100.r04.s057_output/n100.r04.s057.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s057_output/n100.r04.s057.untrimmed.sorted.bam" "n100.r04.s057_output/n100.r04.s057.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s057_output/n100.r04.s057.untrimmed.sorted.bam" -b "n100.r04.s057_output/n100.r04.s057.primers.bed" -p "n100.r04.s057_output/n100.r04.s057.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s057_output/n100.r04.s057.trimmed.sorted.bam" "n100.r04.s057_output/n100.r04.s057.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s057_output/n100.r04.s057.reference.fas" "n100.r04.s057_output/n100.r04.s057.trimmed.sorted.bam" > "n100.r04.s057_output/n100.r04.s057.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s057_output/n100.r04.s057.reference.fas" --call-indels "n100.r04.s057_output/n100.r04.s057.trimmed.sorted.bam" > "n100.r04.s057_output/n100.r04.s057.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s057_output/n100.r04.s057.trimmed.sorted.bam" > "n100.r04.s057_output/n100.r04.s057.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s057_output/n100.r04.s057.depth.txt" "n100.r04.s057_output/n100.r04.s057.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s057_output/n100.r04.s057.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s057_output/n100.r04.s057.reference.fas" | bcftools consensus -m "n100.r04.s057_output/n100.r04.s057.low_depth.tsv" tmp.vcf.gz > "n100.r04.s057_output/n100.r04.s057.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s057_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:52 scheduler task 5cd20acf (flow 77d99fec): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:52 scheduler task 5cd20acf (flow 77d99fec): waiting for completion (try 0): started
2021/07/08 16:51:52  ->  n100.r04.s010.Main.out_file 77d99fec exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:52 n100.r04.s010.Main.out_file 77d99fec n100/r04/n100.r04.s010.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2670e12922915f44491697aff42b80a2f0cff04498cc58282f25bf2b2ec264ec
	sha256:77d99fecb641d50d33fe6c6375ee70b28fd3ee0a18228ad3e275ed9a5a953b66
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5cd20acf5340d3c265ff5c17656000f7054619873c1ce4d0c44b376597ae6007
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s010_output"
	    wget -O "n100.r04.s010_output/n100.r04.s010.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s010_output/n100.r04.s010.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s010_output/n100.r04.s010.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s010_output/n100.r04.s010.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s010_output/n100.r04.s010.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s010_output/n100.r04.s010.reference.fas" "n100.r04.s010_output/n100.r04.s010.fq1.fastq" "n100.r04.s010_output/n100.r04.s010.fq2.fastq" | samtools view -bS - > "n100.r04.s010_output/n100.r04.s010.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s010_output/n100.r04.s010.untrimmed.sorted.bam" "n100.r04.s010_output/n100.r04.s010.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s010_output/n100.r04.s010.untrimmed.sorted.bam" -b "n100.r04.s010_output/n100.r04.s010.primers.bed" -p "n100.r04.s010_output/n100.r04.s010.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s010_output/n100.r04.s010.trimmed.sorted.bam" "n100.r04.s010_output/n100.r04.s010.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s010_output/n100.r04.s010.reference.fas" "n100.r04.s010_output/n100.r04.s010.trimmed.sorted.bam" > "n100.r04.s010_output/n100.r04.s010.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s010_output/n100.r04.s010.reference.fas" --call-indels "n100.r04.s010_output/n100.r04.s010.trimmed.sorted.bam" > "n100.r04.s010_output/n100.r04.s010.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s010_output/n100.r04.s010.trimmed.sorted.bam" > "n100.r04.s010_output/n100.r04.s010.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s010_output/n100.r04.s010.depth.txt" "n100.r04.s010_output/n100.r04.s010.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s010_output/n100.r04.s010.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s010_output/n100.r04.s010.reference.fas" | bcftools consensus -m "n100.r04.s010_output/n100.r04.s010.low_depth.tsv" tmp.vcf.gz > "n100.r04.s010_output/n100.r04.s010.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s010_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:52 scheduler task 5947e81d (flow 57e39d90): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:52 scheduler task 5947e81d (flow 57e39d90): waiting for completion (try 0): started
2021/07/08 16:51:52  ->  n100.r04.s083.Main.out_file 57e39d90 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:52 n100.r04.s083.Main.out_file 57e39d90 n100/r04/n100.r04.s083.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e1596037674dc3a005709bf3a9e035e73773523bb12f755bb0bc022a7b161d9a
	sha256:57e39d90208fc2d8e37ce6ec0e4a9eb4362b687a97c9d775fcf666d7c2f0d8d5
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5947e81d6d38bb06741ddf2fb15effd37f221c459ed37a8493bfe9e8828f1d11
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s083_output"
	    wget -O "n100.r04.s083_output/n100.r04.s083.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s083_output/n100.r04.s083.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s083_output/n100.r04.s083.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s083_output/n100.r04.s083.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s083_output/n100.r04.s083.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s083_output/n100.r04.s083.reference.fas" "n100.r04.s083_output/n100.r04.s083.fq1.fastq" "n100.r04.s083_output/n100.r04.s083.fq2.fastq" | samtools view -bS - > "n100.r04.s083_output/n100.r04.s083.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s083_output/n100.r04.s083.untrimmed.sorted.bam" "n100.r04.s083_output/n100.r04.s083.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s083_output/n100.r04.s083.untrimmed.sorted.bam" -b "n100.r04.s083_output/n100.r04.s083.primers.bed" -p "n100.r04.s083_output/n100.r04.s083.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s083_output/n100.r04.s083.trimmed.sorted.bam" "n100.r04.s083_output/n100.r04.s083.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s083_output/n100.r04.s083.reference.fas" "n100.r04.s083_output/n100.r04.s083.trimmed.sorted.bam" > "n100.r04.s083_output/n100.r04.s083.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s083_output/n100.r04.s083.reference.fas" --call-indels "n100.r04.s083_output/n100.r04.s083.trimmed.sorted.bam" > "n100.r04.s083_output/n100.r04.s083.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s083_output/n100.r04.s083.trimmed.sorted.bam" > "n100.r04.s083_output/n100.r04.s083.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s083_output/n100.r04.s083.depth.txt" "n100.r04.s083_output/n100.r04.s083.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s083_output/n100.r04.s083.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s083_output/n100.r04.s083.reference.fas" | bcftools consensus -m "n100.r04.s083_output/n100.r04.s083.low_depth.tsv" tmp.vcf.gz > "n100.r04.s083_output/n100.r04.s083.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s083_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:52 scheduler task 7a4dfaa4 (flow 47beba72): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:52 scheduler task 7a4dfaa4 (flow 47beba72): waiting for completion (try 0): started
2021/07/08 16:51:52  ->  n100.r04.s085.Main.out_file 47beba72 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:52 n100.r04.s085.Main.out_file 47beba72 n100/r04/n100.r04.s085.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:82eb2e0e956543390b0c0d7dbde52e58e6177606417321dacb261551b4543f46
	sha256:47beba72eb2486bb84f876ffd5621d40368ed7811c278c68d81ebab49b97994b
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7a4dfaa455b7bc8f434f942ca10b7c3aea8ca237670bd746aa35291caf9f71ba
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s085_output"
	    wget -O "n100.r04.s085_output/n100.r04.s085.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s085_output/n100.r04.s085.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s085_output/n100.r04.s085.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s085_output/n100.r04.s085.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s085_output/n100.r04.s085.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s085_output/n100.r04.s085.reference.fas" "n100.r04.s085_output/n100.r04.s085.fq1.fastq" "n100.r04.s085_output/n100.r04.s085.fq2.fastq" | samtools view -bS - > "n100.r04.s085_output/n100.r04.s085.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s085_output/n100.r04.s085.untrimmed.sorted.bam" "n100.r04.s085_output/n100.r04.s085.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s085_output/n100.r04.s085.untrimmed.sorted.bam" -b "n100.r04.s085_output/n100.r04.s085.primers.bed" -p "n100.r04.s085_output/n100.r04.s085.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s085_output/n100.r04.s085.trimmed.sorted.bam" "n100.r04.s085_output/n100.r04.s085.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s085_output/n100.r04.s085.reference.fas" "n100.r04.s085_output/n100.r04.s085.trimmed.sorted.bam" > "n100.r04.s085_output/n100.r04.s085.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s085_output/n100.r04.s085.reference.fas" --call-indels "n100.r04.s085_output/n100.r04.s085.trimmed.sorted.bam" > "n100.r04.s085_output/n100.r04.s085.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s085_output/n100.r04.s085.trimmed.sorted.bam" > "n100.r04.s085_output/n100.r04.s085.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s085_output/n100.r04.s085.depth.txt" "n100.r04.s085_output/n100.r04.s085.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s085_output/n100.r04.s085.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s085_output/n100.r04.s085.reference.fas" | bcftools consensus -m "n100.r04.s085_output/n100.r04.s085.low_depth.tsv" tmp.vcf.gz > "n100.r04.s085_output/n100.r04.s085.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s085_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:52 scheduler task 7709a29e (flow 20e26740): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:52 scheduler task 7709a29e (flow 20e26740): waiting for completion (try 0): started
2021/07/08 16:51:52  ->  n100.r04.s080.Main.out_file 20e26740 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:52 n100.r04.s080.Main.out_file 20e26740 n100/r04/n100.r04.s080.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:bdd34af9287f791daffca9f477ab2a3fe237ba71100608c8ff29eaf4b7406b20
	sha256:20e26740c9df4d87f42e8d55fb83ba2efc3f1df13d1ccfb8e39d9078154d65c3
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7709a29ebccac3c9822f351ebba454b142d0d8d814db35b1a2ca1b728485024b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s080_output"
	    wget -O "n100.r04.s080_output/n100.r04.s080.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s080_output/n100.r04.s080.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s080_output/n100.r04.s080.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s080_output/n100.r04.s080.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s080_output/n100.r04.s080.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s080_output/n100.r04.s080.reference.fas" "n100.r04.s080_output/n100.r04.s080.fq1.fastq" "n100.r04.s080_output/n100.r04.s080.fq2.fastq" | samtools view -bS - > "n100.r04.s080_output/n100.r04.s080.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s080_output/n100.r04.s080.untrimmed.sorted.bam" "n100.r04.s080_output/n100.r04.s080.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s080_output/n100.r04.s080.untrimmed.sorted.bam" -b "n100.r04.s080_output/n100.r04.s080.primers.bed" -p "n100.r04.s080_output/n100.r04.s080.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s080_output/n100.r04.s080.trimmed.sorted.bam" "n100.r04.s080_output/n100.r04.s080.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s080_output/n100.r04.s080.reference.fas" "n100.r04.s080_output/n100.r04.s080.trimmed.sorted.bam" > "n100.r04.s080_output/n100.r04.s080.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s080_output/n100.r04.s080.reference.fas" --call-indels "n100.r04.s080_output/n100.r04.s080.trimmed.sorted.bam" > "n100.r04.s080_output/n100.r04.s080.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s080_output/n100.r04.s080.trimmed.sorted.bam" > "n100.r04.s080_output/n100.r04.s080.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s080_output/n100.r04.s080.depth.txt" "n100.r04.s080_output/n100.r04.s080.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s080_output/n100.r04.s080.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s080_output/n100.r04.s080.reference.fas" | bcftools consensus -m "n100.r04.s080_output/n100.r04.s080.low_depth.tsv" tmp.vcf.gz > "n100.r04.s080_output/n100.r04.s080.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s080_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:52 scheduler task 29c9d867 (flow 0f009068): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:52 scheduler task 29c9d867 (flow 0f009068): waiting for completion (try 0): started
2021/07/08 16:51:52  ->  n100.r04.s081.Main.out_file 0f009068 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:52 n100.r04.s081.Main.out_file 0f009068 n100/r04/n100.r04.s081.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e25ba702e7412c732d100cbb7a115b368cfee94aa642f203f726f370f5e703b4
	sha256:0f009068373d3b4f16db5c091339f0ebbd9efe226e345bfbf22ef4b7c991a49a
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/29c9d867a23ae7cc0241d35ac22adb198e75ed22420c5a9bbdb2faa0fdacc7f0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s081_output"
	    wget -O "n100.r04.s081_output/n100.r04.s081.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s081_output/n100.r04.s081.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s081_output/n100.r04.s081.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s081_output/n100.r04.s081.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s081_output/n100.r04.s081.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s081_output/n100.r04.s081.reference.fas" "n100.r04.s081_output/n100.r04.s081.fq1.fastq" "n100.r04.s081_output/n100.r04.s081.fq2.fastq" | samtools view -bS - > "n100.r04.s081_output/n100.r04.s081.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s081_output/n100.r04.s081.untrimmed.sorted.bam" "n100.r04.s081_output/n100.r04.s081.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s081_output/n100.r04.s081.untrimmed.sorted.bam" -b "n100.r04.s081_output/n100.r04.s081.primers.bed" -p "n100.r04.s081_output/n100.r04.s081.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s081_output/n100.r04.s081.trimmed.sorted.bam" "n100.r04.s081_output/n100.r04.s081.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s081_output/n100.r04.s081.reference.fas" "n100.r04.s081_output/n100.r04.s081.trimmed.sorted.bam" > "n100.r04.s081_output/n100.r04.s081.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s081_output/n100.r04.s081.reference.fas" --call-indels "n100.r04.s081_output/n100.r04.s081.trimmed.sorted.bam" > "n100.r04.s081_output/n100.r04.s081.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s081_output/n100.r04.s081.trimmed.sorted.bam" > "n100.r04.s081_output/n100.r04.s081.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s081_output/n100.r04.s081.depth.txt" "n100.r04.s081_output/n100.r04.s081.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s081_output/n100.r04.s081.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s081_output/n100.r04.s081.reference.fas" | bcftools consensus -m "n100.r04.s081_output/n100.r04.s081.low_depth.tsv" tmp.vcf.gz > "n100.r04.s081_output/n100.r04.s081.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s081_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:52 scheduler task 0c8baa7d (flow ff8a339b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:52 scheduler task 0c8baa7d (flow ff8a339b): waiting for completion (try 0): started
2021/07/08 16:51:52  ->  n100.r04.s020.Main.out_file ff8a339b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:52 n100.r04.s020.Main.out_file ff8a339b n100/r04/n100.r04.s020.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c04d00c9355ff97874a3bcd4c3e77869acc1c45e4ac0b3ce458de0a2e9b6c463
	sha256:ff8a339b28e22402cd1d58759a6a64ecea47dd260231093b0fc601ba08fe8b51
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0c8baa7dd0becfaa169843ec82da4a11a323d7d35e086dcac75df8ccda5fcbe6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s020_output"
	    wget -O "n100.r04.s020_output/n100.r04.s020.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s020_output/n100.r04.s020.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s020_output/n100.r04.s020.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s020_output/n100.r04.s020.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s020_output/n100.r04.s020.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s020_output/n100.r04.s020.reference.fas" "n100.r04.s020_output/n100.r04.s020.fq1.fastq" "n100.r04.s020_output/n100.r04.s020.fq2.fastq" | samtools view -bS - > "n100.r04.s020_output/n100.r04.s020.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s020_output/n100.r04.s020.untrimmed.sorted.bam" "n100.r04.s020_output/n100.r04.s020.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s020_output/n100.r04.s020.untrimmed.sorted.bam" -b "n100.r04.s020_output/n100.r04.s020.primers.bed" -p "n100.r04.s020_output/n100.r04.s020.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s020_output/n100.r04.s020.trimmed.sorted.bam" "n100.r04.s020_output/n100.r04.s020.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s020_output/n100.r04.s020.reference.fas" "n100.r04.s020_output/n100.r04.s020.trimmed.sorted.bam" > "n100.r04.s020_output/n100.r04.s020.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s020_output/n100.r04.s020.reference.fas" --call-indels "n100.r04.s020_output/n100.r04.s020.trimmed.sorted.bam" > "n100.r04.s020_output/n100.r04.s020.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s020_output/n100.r04.s020.trimmed.sorted.bam" > "n100.r04.s020_output/n100.r04.s020.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s020_output/n100.r04.s020.depth.txt" "n100.r04.s020_output/n100.r04.s020.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s020_output/n100.r04.s020.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s020_output/n100.r04.s020.reference.fas" | bcftools consensus -m "n100.r04.s020_output/n100.r04.s020.low_depth.tsv" tmp.vcf.gz > "n100.r04.s020_output/n100.r04.s020.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s020_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:53 scheduler task 9a663e4e (flow 2d3488e5): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:53 scheduler task 9a663e4e (flow 2d3488e5): waiting for completion (try 0): started
2021/07/08 16:51:53  ->  n100.r04.s053.Main.out_file 2d3488e5 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:53 n100.r04.s053.Main.out_file 2d3488e5 n100/r04/n100.r04.s053.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:cca31dbd6019022de6e334e5e7198aaa0bfb4d566f08ebe23241b2e9bb24016d
	sha256:2d3488e5ae911acea03b084058e152fdac1bf40aa1d5bdace96895371d4cc308
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9a663e4e7675983783caf8da2b934c6f077246d9b0e2707722378e9d46360e18
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s053_output"
	    wget -O "n100.r04.s053_output/n100.r04.s053.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s053_output/n100.r04.s053.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s053_output/n100.r04.s053.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s053_output/n100.r04.s053.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s053_output/n100.r04.s053.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s053_output/n100.r04.s053.reference.fas" "n100.r04.s053_output/n100.r04.s053.fq1.fastq" "n100.r04.s053_output/n100.r04.s053.fq2.fastq" | samtools view -bS - > "n100.r04.s053_output/n100.r04.s053.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s053_output/n100.r04.s053.untrimmed.sorted.bam" "n100.r04.s053_output/n100.r04.s053.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s053_output/n100.r04.s053.untrimmed.sorted.bam" -b "n100.r04.s053_output/n100.r04.s053.primers.bed" -p "n100.r04.s053_output/n100.r04.s053.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s053_output/n100.r04.s053.trimmed.sorted.bam" "n100.r04.s053_output/n100.r04.s053.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s053_output/n100.r04.s053.reference.fas" "n100.r04.s053_output/n100.r04.s053.trimmed.sorted.bam" > "n100.r04.s053_output/n100.r04.s053.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s053_output/n100.r04.s053.reference.fas" --call-indels "n100.r04.s053_output/n100.r04.s053.trimmed.sorted.bam" > "n100.r04.s053_output/n100.r04.s053.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s053_output/n100.r04.s053.trimmed.sorted.bam" > "n100.r04.s053_output/n100.r04.s053.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s053_output/n100.r04.s053.depth.txt" "n100.r04.s053_output/n100.r04.s053.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s053_output/n100.r04.s053.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s053_output/n100.r04.s053.reference.fas" | bcftools consensus -m "n100.r04.s053_output/n100.r04.s053.low_depth.tsv" tmp.vcf.gz > "n100.r04.s053_output/n100.r04.s053.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s053_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:53 scheduler task 4bae0b4d (flow 98c409bc): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:53 scheduler task 4bae0b4d (flow 98c409bc): waiting for completion (try 0): started
2021/07/08 16:51:53  ->  n100.r04.s090.Main.out_file 98c409bc exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:53 n100.r04.s090.Main.out_file 98c409bc n100/r04/n100.r04.s090.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1701a81bbbbec0ec7a5da28f3c3dcab0fee5c7826e718124bed7a3ec68b99c18
	sha256:98c409bc88d8c83d9cf4b280fd2648f3239099506b1bf680df85e3aa3f233c56
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4bae0b4d2675dd3d3871242a06bdc28e664f5cfb64d6b2c7b9ce7a8e277e495c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s090_output"
	    wget -O "n100.r04.s090_output/n100.r04.s090.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s090_output/n100.r04.s090.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s090_output/n100.r04.s090.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s090_output/n100.r04.s090.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s090_output/n100.r04.s090.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s090_output/n100.r04.s090.reference.fas" "n100.r04.s090_output/n100.r04.s090.fq1.fastq" "n100.r04.s090_output/n100.r04.s090.fq2.fastq" | samtools view -bS - > "n100.r04.s090_output/n100.r04.s090.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s090_output/n100.r04.s090.untrimmed.sorted.bam" "n100.r04.s090_output/n100.r04.s090.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s090_output/n100.r04.s090.untrimmed.sorted.bam" -b "n100.r04.s090_output/n100.r04.s090.primers.bed" -p "n100.r04.s090_output/n100.r04.s090.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s090_output/n100.r04.s090.trimmed.sorted.bam" "n100.r04.s090_output/n100.r04.s090.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s090_output/n100.r04.s090.reference.fas" "n100.r04.s090_output/n100.r04.s090.trimmed.sorted.bam" > "n100.r04.s090_output/n100.r04.s090.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s090_output/n100.r04.s090.reference.fas" --call-indels "n100.r04.s090_output/n100.r04.s090.trimmed.sorted.bam" > "n100.r04.s090_output/n100.r04.s090.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s090_output/n100.r04.s090.trimmed.sorted.bam" > "n100.r04.s090_output/n100.r04.s090.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s090_output/n100.r04.s090.depth.txt" "n100.r04.s090_output/n100.r04.s090.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s090_output/n100.r04.s090.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s090_output/n100.r04.s090.reference.fas" | bcftools consensus -m "n100.r04.s090_output/n100.r04.s090.low_depth.tsv" tmp.vcf.gz > "n100.r04.s090_output/n100.r04.s090.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s090_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:53 scheduler task 8a9bceb1 (flow 27523267): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:53 scheduler task 8a9bceb1 (flow 27523267): waiting for completion (try 0): started
2021/07/08 16:51:53  ->  n100.r04.s012.Main.out_file 27523267 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:53 n100.r04.s012.Main.out_file 27523267 n100/r04/n100.r04.s012.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d63b130b3147a56d38f41d3e35b4e1ebb5619331056c0f65987215370ee76507
	sha256:275232671b08b27b6d1abfd20d245807ca0950871620b05f9a54c78139808fd1
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8a9bceb1be253f3aa37c9b181b822daa93bb897b992c93085da6d821a8fdf073
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s012_output"
	    wget -O "n100.r04.s012_output/n100.r04.s012.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s012_output/n100.r04.s012.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s012_output/n100.r04.s012.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s012_output/n100.r04.s012.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s012_output/n100.r04.s012.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s012_output/n100.r04.s012.reference.fas" "n100.r04.s012_output/n100.r04.s012.fq1.fastq" "n100.r04.s012_output/n100.r04.s012.fq2.fastq" | samtools view -bS - > "n100.r04.s012_output/n100.r04.s012.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s012_output/n100.r04.s012.untrimmed.sorted.bam" "n100.r04.s012_output/n100.r04.s012.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s012_output/n100.r04.s012.untrimmed.sorted.bam" -b "n100.r04.s012_output/n100.r04.s012.primers.bed" -p "n100.r04.s012_output/n100.r04.s012.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s012_output/n100.r04.s012.trimmed.sorted.bam" "n100.r04.s012_output/n100.r04.s012.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s012_output/n100.r04.s012.reference.fas" "n100.r04.s012_output/n100.r04.s012.trimmed.sorted.bam" > "n100.r04.s012_output/n100.r04.s012.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s012_output/n100.r04.s012.reference.fas" --call-indels "n100.r04.s012_output/n100.r04.s012.trimmed.sorted.bam" > "n100.r04.s012_output/n100.r04.s012.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s012_output/n100.r04.s012.trimmed.sorted.bam" > "n100.r04.s012_output/n100.r04.s012.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s012_output/n100.r04.s012.depth.txt" "n100.r04.s012_output/n100.r04.s012.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s012_output/n100.r04.s012.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s012_output/n100.r04.s012.reference.fas" | bcftools consensus -m "n100.r04.s012_output/n100.r04.s012.low_depth.tsv" tmp.vcf.gz > "n100.r04.s012_output/n100.r04.s012.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s012_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:53 scheduler task cbcd17ff (flow 42a8a7f6): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:53 scheduler task cbcd17ff (flow 42a8a7f6): waiting for completion (try 0): started
2021/07/08 16:51:53  ->  n100.r04.s093.Main.out_file 42a8a7f6 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:53 n100.r04.s093.Main.out_file 42a8a7f6 n100/r04/n100.r04.s093.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a4b467d48e671d442c4f29f78c7c451477d878ffb70a31c53a99f82c607d8e95
	sha256:42a8a7f6b0cceee6744fb899629c3f2a9255bfc51bd3de349045fd47e8d30321
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cbcd17ff44c094cd250d3d7560e8d8dd2663c3f9a73d264c67233b7bfbb11f6d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s093_output"
	    wget -O "n100.r04.s093_output/n100.r04.s093.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s093_output/n100.r04.s093.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s093_output/n100.r04.s093.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s093_output/n100.r04.s093.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s093_output/n100.r04.s093.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s093_output/n100.r04.s093.reference.fas" "n100.r04.s093_output/n100.r04.s093.fq1.fastq" "n100.r04.s093_output/n100.r04.s093.fq2.fastq" | samtools view -bS - > "n100.r04.s093_output/n100.r04.s093.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s093_output/n100.r04.s093.untrimmed.sorted.bam" "n100.r04.s093_output/n100.r04.s093.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s093_output/n100.r04.s093.untrimmed.sorted.bam" -b "n100.r04.s093_output/n100.r04.s093.primers.bed" -p "n100.r04.s093_output/n100.r04.s093.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s093_output/n100.r04.s093.trimmed.sorted.bam" "n100.r04.s093_output/n100.r04.s093.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s093_output/n100.r04.s093.reference.fas" "n100.r04.s093_output/n100.r04.s093.trimmed.sorted.bam" > "n100.r04.s093_output/n100.r04.s093.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s093_output/n100.r04.s093.reference.fas" --call-indels "n100.r04.s093_output/n100.r04.s093.trimmed.sorted.bam" > "n100.r04.s093_output/n100.r04.s093.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s093_output/n100.r04.s093.trimmed.sorted.bam" > "n100.r04.s093_output/n100.r04.s093.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s093_output/n100.r04.s093.depth.txt" "n100.r04.s093_output/n100.r04.s093.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s093_output/n100.r04.s093.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s093_output/n100.r04.s093.reference.fas" | bcftools consensus -m "n100.r04.s093_output/n100.r04.s093.low_depth.tsv" tmp.vcf.gz > "n100.r04.s093_output/n100.r04.s093.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s093_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:53 scheduler task c8f7947e (flow a052354a): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:53 scheduler task c8f7947e (flow a052354a): waiting for completion (try 0): started
2021/07/08 16:51:53  ->  n100.r04.s040.Main.out_file a052354a exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:53 n100.r04.s040.Main.out_file a052354a n100/r04/n100.r04.s040.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b84c3ec5d853573074952bebe279e7bb9b44f14079f1784fe71248371967f890
	sha256:a052354a01cddd4ea679f32326f7f68f3fd356d9aa40319e420474e5d8fa21fd
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c8f7947e8756adf87afccdb8b0c479e37e00ce47dc54ed0add42a1068b8ea05a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s040_output"
	    wget -O "n100.r04.s040_output/n100.r04.s040.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s040_output/n100.r04.s040.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s040_output/n100.r04.s040.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s040_output/n100.r04.s040.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s040_output/n100.r04.s040.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s040_output/n100.r04.s040.reference.fas" "n100.r04.s040_output/n100.r04.s040.fq1.fastq" "n100.r04.s040_output/n100.r04.s040.fq2.fastq" | samtools view -bS - > "n100.r04.s040_output/n100.r04.s040.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s040_output/n100.r04.s040.untrimmed.sorted.bam" "n100.r04.s040_output/n100.r04.s040.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s040_output/n100.r04.s040.untrimmed.sorted.bam" -b "n100.r04.s040_output/n100.r04.s040.primers.bed" -p "n100.r04.s040_output/n100.r04.s040.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s040_output/n100.r04.s040.trimmed.sorted.bam" "n100.r04.s040_output/n100.r04.s040.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s040_output/n100.r04.s040.reference.fas" "n100.r04.s040_output/n100.r04.s040.trimmed.sorted.bam" > "n100.r04.s040_output/n100.r04.s040.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s040_output/n100.r04.s040.reference.fas" --call-indels "n100.r04.s040_output/n100.r04.s040.trimmed.sorted.bam" > "n100.r04.s040_output/n100.r04.s040.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s040_output/n100.r04.s040.trimmed.sorted.bam" > "n100.r04.s040_output/n100.r04.s040.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s040_output/n100.r04.s040.depth.txt" "n100.r04.s040_output/n100.r04.s040.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s040_output/n100.r04.s040.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s040_output/n100.r04.s040.reference.fas" | bcftools consensus -m "n100.r04.s040_output/n100.r04.s040.low_depth.tsv" tmp.vcf.gz > "n100.r04.s040_output/n100.r04.s040.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s040_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:54 scheduler task a818b8e8 (flow 1ca35c84): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:54 scheduler task a818b8e8 (flow 1ca35c84): waiting for completion (try 0): started
2021/07/08 16:51:54  ->  n100.r04.s011.Main.out_file 1ca35c84 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:54 n100.r04.s011.Main.out_file 1ca35c84 n100/r04/n100.r04.s011.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c4d79bd253342f342a6829d8590455d603057b606392193fd285391f715f6941
	sha256:1ca35c845f8e64255c22803f7204fa3276c817683c8d87fb1d44fdbeb3296e60
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a818b8e89d79608f973192973a743ee13d0f7d74fba6358f5343021cc214ac57
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s011_output"
	    wget -O "n100.r04.s011_output/n100.r04.s011.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s011_output/n100.r04.s011.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s011_output/n100.r04.s011.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s011_output/n100.r04.s011.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s011_output/n100.r04.s011.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s011_output/n100.r04.s011.reference.fas" "n100.r04.s011_output/n100.r04.s011.fq1.fastq" "n100.r04.s011_output/n100.r04.s011.fq2.fastq" | samtools view -bS - > "n100.r04.s011_output/n100.r04.s011.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s011_output/n100.r04.s011.untrimmed.sorted.bam" "n100.r04.s011_output/n100.r04.s011.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s011_output/n100.r04.s011.untrimmed.sorted.bam" -b "n100.r04.s011_output/n100.r04.s011.primers.bed" -p "n100.r04.s011_output/n100.r04.s011.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s011_output/n100.r04.s011.trimmed.sorted.bam" "n100.r04.s011_output/n100.r04.s011.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s011_output/n100.r04.s011.reference.fas" "n100.r04.s011_output/n100.r04.s011.trimmed.sorted.bam" > "n100.r04.s011_output/n100.r04.s011.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s011_output/n100.r04.s011.reference.fas" --call-indels "n100.r04.s011_output/n100.r04.s011.trimmed.sorted.bam" > "n100.r04.s011_output/n100.r04.s011.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s011_output/n100.r04.s011.trimmed.sorted.bam" > "n100.r04.s011_output/n100.r04.s011.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s011_output/n100.r04.s011.depth.txt" "n100.r04.s011_output/n100.r04.s011.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s011_output/n100.r04.s011.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s011_output/n100.r04.s011.reference.fas" | bcftools consensus -m "n100.r04.s011_output/n100.r04.s011.low_depth.tsv" tmp.vcf.gz > "n100.r04.s011_output/n100.r04.s011.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s011_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:54 scheduler task 7ed73c0a (flow 610b915e): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:54 scheduler task 7ed73c0a (flow 610b915e): waiting for completion (try 0): started
2021/07/08 16:51:54  ->  n100.r04.s077.Main.out_file 610b915e exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:54 n100.r04.s077.Main.out_file 610b915e n100/r04/n100.r04.s077.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1a0ce68fa92dbe72bfddcd018b9932d73286260b42070d1a351f8c7d831538d2
	sha256:610b915eb3f835c58029bc21c132ed6b3b0af1c79583f70c4883c8df980a3c64
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7ed73c0a5595336e26a637376e19e70ae8dbc174cf7170a36fb32bcc8c804d2a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s077_output"
	    wget -O "n100.r04.s077_output/n100.r04.s077.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s077_output/n100.r04.s077.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s077_output/n100.r04.s077.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s077_output/n100.r04.s077.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s077_output/n100.r04.s077.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s077_output/n100.r04.s077.reference.fas" "n100.r04.s077_output/n100.r04.s077.fq1.fastq" "n100.r04.s077_output/n100.r04.s077.fq2.fastq" | samtools view -bS - > "n100.r04.s077_output/n100.r04.s077.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s077_output/n100.r04.s077.untrimmed.sorted.bam" "n100.r04.s077_output/n100.r04.s077.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s077_output/n100.r04.s077.untrimmed.sorted.bam" -b "n100.r04.s077_output/n100.r04.s077.primers.bed" -p "n100.r04.s077_output/n100.r04.s077.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s077_output/n100.r04.s077.trimmed.sorted.bam" "n100.r04.s077_output/n100.r04.s077.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s077_output/n100.r04.s077.reference.fas" "n100.r04.s077_output/n100.r04.s077.trimmed.sorted.bam" > "n100.r04.s077_output/n100.r04.s077.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s077_output/n100.r04.s077.reference.fas" --call-indels "n100.r04.s077_output/n100.r04.s077.trimmed.sorted.bam" > "n100.r04.s077_output/n100.r04.s077.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s077_output/n100.r04.s077.trimmed.sorted.bam" > "n100.r04.s077_output/n100.r04.s077.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s077_output/n100.r04.s077.depth.txt" "n100.r04.s077_output/n100.r04.s077.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s077_output/n100.r04.s077.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s077_output/n100.r04.s077.reference.fas" | bcftools consensus -m "n100.r04.s077_output/n100.r04.s077.low_depth.tsv" tmp.vcf.gz > "n100.r04.s077_output/n100.r04.s077.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s077_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:54 scheduler task 32101954 (flow f9878803): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:54 scheduler task 32101954 (flow f9878803): waiting for completion (try 0): started
2021/07/08 16:51:54  ->  n100.r04.s008.Main.out_file f9878803 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:54 n100.r04.s008.Main.out_file f9878803 n100/r04/n100.r04.s008.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1f6263820641a4751fe1933ef2aad131f5a92bbff78c055443a3029577ff7a21
	sha256:f987880386106d6e50e015337ae3b88290b8c971ec3414fcc176488f67376586
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/321019541f4b7a35fbfe99460e9e0975086021ae777db8208cbe83c8a532439a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s008_output"
	    wget -O "n100.r04.s008_output/n100.r04.s008.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s008_output/n100.r04.s008.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s008_output/n100.r04.s008.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s008_output/n100.r04.s008.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s008_output/n100.r04.s008.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s008_output/n100.r04.s008.reference.fas" "n100.r04.s008_output/n100.r04.s008.fq1.fastq" "n100.r04.s008_output/n100.r04.s008.fq2.fastq" | samtools view -bS - > "n100.r04.s008_output/n100.r04.s008.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s008_output/n100.r04.s008.untrimmed.sorted.bam" "n100.r04.s008_output/n100.r04.s008.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s008_output/n100.r04.s008.untrimmed.sorted.bam" -b "n100.r04.s008_output/n100.r04.s008.primers.bed" -p "n100.r04.s008_output/n100.r04.s008.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s008_output/n100.r04.s008.trimmed.sorted.bam" "n100.r04.s008_output/n100.r04.s008.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s008_output/n100.r04.s008.reference.fas" "n100.r04.s008_output/n100.r04.s008.trimmed.sorted.bam" > "n100.r04.s008_output/n100.r04.s008.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s008_output/n100.r04.s008.reference.fas" --call-indels "n100.r04.s008_output/n100.r04.s008.trimmed.sorted.bam" > "n100.r04.s008_output/n100.r04.s008.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s008_output/n100.r04.s008.trimmed.sorted.bam" > "n100.r04.s008_output/n100.r04.s008.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s008_output/n100.r04.s008.depth.txt" "n100.r04.s008_output/n100.r04.s008.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s008_output/n100.r04.s008.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s008_output/n100.r04.s008.reference.fas" | bcftools consensus -m "n100.r04.s008_output/n100.r04.s008.low_depth.tsv" tmp.vcf.gz > "n100.r04.s008_output/n100.r04.s008.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s008_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:54 scheduler task 1630f0a4 (flow f5f175a1): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:54 scheduler task 1630f0a4 (flow f5f175a1): waiting for completion (try 0): started
2021/07/08 16:51:54  ->  n100.r04.s047.Main.out_file f5f175a1 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:54 n100.r04.s047.Main.out_file f5f175a1 n100/r04/n100.r04.s047.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4e711334de2f9b6c92ae5848f54c6f03755664280ea8c307f8168ab949f57341
	sha256:f5f175a19a3c0bfe746814953ea5ed6ee5a0e0c39273b28f805af850178b8efe
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1630f0a471b0502efdd3fb842b19b5100ce9868a0abead3f0e344565f0cb2649
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s047_output"
	    wget -O "n100.r04.s047_output/n100.r04.s047.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s047_output/n100.r04.s047.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s047_output/n100.r04.s047.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s047_output/n100.r04.s047.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s047_output/n100.r04.s047.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s047_output/n100.r04.s047.reference.fas" "n100.r04.s047_output/n100.r04.s047.fq1.fastq" "n100.r04.s047_output/n100.r04.s047.fq2.fastq" | samtools view -bS - > "n100.r04.s047_output/n100.r04.s047.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s047_output/n100.r04.s047.untrimmed.sorted.bam" "n100.r04.s047_output/n100.r04.s047.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s047_output/n100.r04.s047.untrimmed.sorted.bam" -b "n100.r04.s047_output/n100.r04.s047.primers.bed" -p "n100.r04.s047_output/n100.r04.s047.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s047_output/n100.r04.s047.trimmed.sorted.bam" "n100.r04.s047_output/n100.r04.s047.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s047_output/n100.r04.s047.reference.fas" "n100.r04.s047_output/n100.r04.s047.trimmed.sorted.bam" > "n100.r04.s047_output/n100.r04.s047.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s047_output/n100.r04.s047.reference.fas" --call-indels "n100.r04.s047_output/n100.r04.s047.trimmed.sorted.bam" > "n100.r04.s047_output/n100.r04.s047.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s047_output/n100.r04.s047.trimmed.sorted.bam" > "n100.r04.s047_output/n100.r04.s047.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s047_output/n100.r04.s047.depth.txt" "n100.r04.s047_output/n100.r04.s047.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s047_output/n100.r04.s047.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s047_output/n100.r04.s047.reference.fas" | bcftools consensus -m "n100.r04.s047_output/n100.r04.s047.low_depth.tsv" tmp.vcf.gz > "n100.r04.s047_output/n100.r04.s047.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s047_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:54 scheduler task 5bff4606 (flow 9474069c): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:54 scheduler task 5bff4606 (flow 9474069c): waiting for completion (try 0): started
2021/07/08 16:51:54  ->  n100.r04.s073.Main.out_file 9474069c exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:54 n100.r04.s073.Main.out_file 9474069c n100/r04/n100.r04.s073.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e9008b25a1d8f31508b2163a52eef02c1519b70c8308ad2bc980fab72e19b566
	sha256:9474069c1a2b69315ead1fcfef8078deabc9410bc95d239e7a4e4e1cd83e2ba6
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5bff4606601517499c33fbf4edb22a2f9011c04e663c4de6cb6bc98851bb567c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s073_output"
	    wget -O "n100.r04.s073_output/n100.r04.s073.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s073_output/n100.r04.s073.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s073_output/n100.r04.s073.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s073_output/n100.r04.s073.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s073_output/n100.r04.s073.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s073_output/n100.r04.s073.reference.fas" "n100.r04.s073_output/n100.r04.s073.fq1.fastq" "n100.r04.s073_output/n100.r04.s073.fq2.fastq" | samtools view -bS - > "n100.r04.s073_output/n100.r04.s073.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s073_output/n100.r04.s073.untrimmed.sorted.bam" "n100.r04.s073_output/n100.r04.s073.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s073_output/n100.r04.s073.untrimmed.sorted.bam" -b "n100.r04.s073_output/n100.r04.s073.primers.bed" -p "n100.r04.s073_output/n100.r04.s073.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s073_output/n100.r04.s073.trimmed.sorted.bam" "n100.r04.s073_output/n100.r04.s073.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s073_output/n100.r04.s073.reference.fas" "n100.r04.s073_output/n100.r04.s073.trimmed.sorted.bam" > "n100.r04.s073_output/n100.r04.s073.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s073_output/n100.r04.s073.reference.fas" --call-indels "n100.r04.s073_output/n100.r04.s073.trimmed.sorted.bam" > "n100.r04.s073_output/n100.r04.s073.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s073_output/n100.r04.s073.trimmed.sorted.bam" > "n100.r04.s073_output/n100.r04.s073.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s073_output/n100.r04.s073.depth.txt" "n100.r04.s073_output/n100.r04.s073.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s073_output/n100.r04.s073.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s073_output/n100.r04.s073.reference.fas" | bcftools consensus -m "n100.r04.s073_output/n100.r04.s073.low_depth.tsv" tmp.vcf.gz > "n100.r04.s073_output/n100.r04.s073.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s073_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:54 scheduler task da5603da (flow f97f1e63): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:54 scheduler task da5603da (flow f97f1e63): waiting for completion (try 0): started
2021/07/08 16:51:54  ->  n100.r04.s074.Main.out_file f97f1e63 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:54 n100.r04.s074.Main.out_file f97f1e63 n100/r04/n100.r04.s074.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3749a160a35ea9e82a8fc807765c94dd03e35838541c1d98d85c3e43bf4c980e
	sha256:f97f1e6328ac24dcadca15898e01afcd55119ea8977251a81e9a79bd899fc640
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/da5603daccb76f18aa7750ada84ab66b32b7f383ec773d33a95b7b278a6812a6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s074_output"
	    wget -O "n100.r04.s074_output/n100.r04.s074.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s074_output/n100.r04.s074.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s074_output/n100.r04.s074.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s074_output/n100.r04.s074.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s074_output/n100.r04.s074.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s074_output/n100.r04.s074.reference.fas" "n100.r04.s074_output/n100.r04.s074.fq1.fastq" "n100.r04.s074_output/n100.r04.s074.fq2.fastq" | samtools view -bS - > "n100.r04.s074_output/n100.r04.s074.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s074_output/n100.r04.s074.untrimmed.sorted.bam" "n100.r04.s074_output/n100.r04.s074.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s074_output/n100.r04.s074.untrimmed.sorted.bam" -b "n100.r04.s074_output/n100.r04.s074.primers.bed" -p "n100.r04.s074_output/n100.r04.s074.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s074_output/n100.r04.s074.trimmed.sorted.bam" "n100.r04.s074_output/n100.r04.s074.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s074_output/n100.r04.s074.reference.fas" "n100.r04.s074_output/n100.r04.s074.trimmed.sorted.bam" > "n100.r04.s074_output/n100.r04.s074.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s074_output/n100.r04.s074.reference.fas" --call-indels "n100.r04.s074_output/n100.r04.s074.trimmed.sorted.bam" > "n100.r04.s074_output/n100.r04.s074.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s074_output/n100.r04.s074.trimmed.sorted.bam" > "n100.r04.s074_output/n100.r04.s074.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s074_output/n100.r04.s074.depth.txt" "n100.r04.s074_output/n100.r04.s074.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s074_output/n100.r04.s074.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s074_output/n100.r04.s074.reference.fas" | bcftools consensus -m "n100.r04.s074_output/n100.r04.s074.low_depth.tsv" tmp.vcf.gz > "n100.r04.s074_output/n100.r04.s074.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s074_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:54 scheduler task 5da77f67 (flow 71f05c8c): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:54 scheduler task 5da77f67 (flow 71f05c8c): waiting for completion (try 0): started
2021/07/08 16:51:54  ->  n100.r04.s063.Main.out_file 71f05c8c exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:54 n100.r04.s063.Main.out_file 71f05c8c n100/r04/n100.r04.s063.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f9b422416e328bc8b6025a7aeee32c1e68ec9a9803da17f3fba0dcd51f9c198f
	sha256:71f05c8c04b368510e882d363f121291b3d4785c10ba6870a09f4083ffcfe252
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5da77f677eed3de909ba4930d5861565af56a9c688d945463faed13faea22af9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s063_output"
	    wget -O "n100.r04.s063_output/n100.r04.s063.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s063_output/n100.r04.s063.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s063_output/n100.r04.s063.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s063_output/n100.r04.s063.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s063_output/n100.r04.s063.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s063_output/n100.r04.s063.reference.fas" "n100.r04.s063_output/n100.r04.s063.fq1.fastq" "n100.r04.s063_output/n100.r04.s063.fq2.fastq" | samtools view -bS - > "n100.r04.s063_output/n100.r04.s063.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s063_output/n100.r04.s063.untrimmed.sorted.bam" "n100.r04.s063_output/n100.r04.s063.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s063_output/n100.r04.s063.untrimmed.sorted.bam" -b "n100.r04.s063_output/n100.r04.s063.primers.bed" -p "n100.r04.s063_output/n100.r04.s063.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s063_output/n100.r04.s063.trimmed.sorted.bam" "n100.r04.s063_output/n100.r04.s063.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s063_output/n100.r04.s063.reference.fas" "n100.r04.s063_output/n100.r04.s063.trimmed.sorted.bam" > "n100.r04.s063_output/n100.r04.s063.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s063_output/n100.r04.s063.reference.fas" --call-indels "n100.r04.s063_output/n100.r04.s063.trimmed.sorted.bam" > "n100.r04.s063_output/n100.r04.s063.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s063_output/n100.r04.s063.trimmed.sorted.bam" > "n100.r04.s063_output/n100.r04.s063.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s063_output/n100.r04.s063.depth.txt" "n100.r04.s063_output/n100.r04.s063.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s063_output/n100.r04.s063.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s063_output/n100.r04.s063.reference.fas" | bcftools consensus -m "n100.r04.s063_output/n100.r04.s063.low_depth.tsv" tmp.vcf.gz > "n100.r04.s063_output/n100.r04.s063.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s063_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:55 scheduler task 176e8b91 (flow 0d7bf897): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:55 scheduler task 176e8b91 (flow 0d7bf897): waiting for completion (try 0): started
2021/07/08 16:51:55  ->  n100.r04.s018.Main.out_file 0d7bf897 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:55 n100.r04.s018.Main.out_file 0d7bf897 n100/r04/n100.r04.s018.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8d07222f5eaa9d4fb69bc81f5afbeee858311652d0fc2b5f10cb3c14c236e218
	sha256:0d7bf897782c3cbea2c1fcc59d946411e6c39b66f6259dfedc9c152d549a273f
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/176e8b919a27f356b7b6eb6676ce7beb184e5343042d48bb52a9004839f8b38f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s018_output"
	    wget -O "n100.r04.s018_output/n100.r04.s018.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s018_output/n100.r04.s018.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s018_output/n100.r04.s018.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s018_output/n100.r04.s018.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s018_output/n100.r04.s018.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s018_output/n100.r04.s018.reference.fas" "n100.r04.s018_output/n100.r04.s018.fq1.fastq" "n100.r04.s018_output/n100.r04.s018.fq2.fastq" | samtools view -bS - > "n100.r04.s018_output/n100.r04.s018.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s018_output/n100.r04.s018.untrimmed.sorted.bam" "n100.r04.s018_output/n100.r04.s018.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s018_output/n100.r04.s018.untrimmed.sorted.bam" -b "n100.r04.s018_output/n100.r04.s018.primers.bed" -p "n100.r04.s018_output/n100.r04.s018.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s018_output/n100.r04.s018.trimmed.sorted.bam" "n100.r04.s018_output/n100.r04.s018.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s018_output/n100.r04.s018.reference.fas" "n100.r04.s018_output/n100.r04.s018.trimmed.sorted.bam" > "n100.r04.s018_output/n100.r04.s018.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s018_output/n100.r04.s018.reference.fas" --call-indels "n100.r04.s018_output/n100.r04.s018.trimmed.sorted.bam" > "n100.r04.s018_output/n100.r04.s018.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s018_output/n100.r04.s018.trimmed.sorted.bam" > "n100.r04.s018_output/n100.r04.s018.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s018_output/n100.r04.s018.depth.txt" "n100.r04.s018_output/n100.r04.s018.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s018_output/n100.r04.s018.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s018_output/n100.r04.s018.reference.fas" | bcftools consensus -m "n100.r04.s018_output/n100.r04.s018.low_depth.tsv" tmp.vcf.gz > "n100.r04.s018_output/n100.r04.s018.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s018_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:55 scheduler task faa7be58 (flow 5f9e75c1): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:55 scheduler task faa7be58 (flow 5f9e75c1): waiting for completion (try 0): started
2021/07/08 16:51:55  ->  n100.r04.s100.Main.out_file 5f9e75c1 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:55 n100.r04.s100.Main.out_file 5f9e75c1 n100/r04/n100.r04.s100.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:38e61602db3cc7028cc6d0b83198ad5d4e808d1f6f6ed9df0bc0f38a5faa310c
	sha256:5f9e75c1ccf5b0efde88a45dc91e806c95477105e2fbdba4bc11672bed36ab04
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/faa7be58e2c19e17e423a6f0f1494fb34446759522cc6439da974febcd0e9a15
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s100_output"
	    wget -O "n100.r04.s100_output/n100.r04.s100.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s100_output/n100.r04.s100.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s100_output/n100.r04.s100.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s100_output/n100.r04.s100.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s100_output/n100.r04.s100.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s100_output/n100.r04.s100.reference.fas" "n100.r04.s100_output/n100.r04.s100.fq1.fastq" "n100.r04.s100_output/n100.r04.s100.fq2.fastq" | samtools view -bS - > "n100.r04.s100_output/n100.r04.s100.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s100_output/n100.r04.s100.untrimmed.sorted.bam" "n100.r04.s100_output/n100.r04.s100.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s100_output/n100.r04.s100.untrimmed.sorted.bam" -b "n100.r04.s100_output/n100.r04.s100.primers.bed" -p "n100.r04.s100_output/n100.r04.s100.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s100_output/n100.r04.s100.trimmed.sorted.bam" "n100.r04.s100_output/n100.r04.s100.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s100_output/n100.r04.s100.reference.fas" "n100.r04.s100_output/n100.r04.s100.trimmed.sorted.bam" > "n100.r04.s100_output/n100.r04.s100.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s100_output/n100.r04.s100.reference.fas" --call-indels "n100.r04.s100_output/n100.r04.s100.trimmed.sorted.bam" > "n100.r04.s100_output/n100.r04.s100.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s100_output/n100.r04.s100.trimmed.sorted.bam" > "n100.r04.s100_output/n100.r04.s100.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s100_output/n100.r04.s100.depth.txt" "n100.r04.s100_output/n100.r04.s100.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s100_output/n100.r04.s100.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s100_output/n100.r04.s100.reference.fas" | bcftools consensus -m "n100.r04.s100_output/n100.r04.s100.low_depth.tsv" tmp.vcf.gz > "n100.r04.s100_output/n100.r04.s100.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s100_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:55 scheduler task 5337d60f (flow 1381d801): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:55 scheduler task 5337d60f (flow 1381d801): waiting for completion (try 0): started
2021/07/08 16:51:55  ->  n100.r04.s097.Main.out_file 1381d801 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:55 n100.r04.s097.Main.out_file 1381d801 n100/r04/n100.r04.s097.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7073fa7aadb21607144d014140f2b513e5dab4f09985e62722db0f4995fc0977
	sha256:1381d80171a98941b226a30c3b976820b67168db767eea56bc4ef3b1e6472278
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5337d60ff9e5877af0faad6348f2fa80ba8f78782efc5e6b78af95e2515ce7c7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s097_output"
	    wget -O "n100.r04.s097_output/n100.r04.s097.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s097_output/n100.r04.s097.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s097_output/n100.r04.s097.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s097_output/n100.r04.s097.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s097_output/n100.r04.s097.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s097_output/n100.r04.s097.reference.fas" "n100.r04.s097_output/n100.r04.s097.fq1.fastq" "n100.r04.s097_output/n100.r04.s097.fq2.fastq" | samtools view -bS - > "n100.r04.s097_output/n100.r04.s097.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s097_output/n100.r04.s097.untrimmed.sorted.bam" "n100.r04.s097_output/n100.r04.s097.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s097_output/n100.r04.s097.untrimmed.sorted.bam" -b "n100.r04.s097_output/n100.r04.s097.primers.bed" -p "n100.r04.s097_output/n100.r04.s097.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s097_output/n100.r04.s097.trimmed.sorted.bam" "n100.r04.s097_output/n100.r04.s097.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s097_output/n100.r04.s097.reference.fas" "n100.r04.s097_output/n100.r04.s097.trimmed.sorted.bam" > "n100.r04.s097_output/n100.r04.s097.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s097_output/n100.r04.s097.reference.fas" --call-indels "n100.r04.s097_output/n100.r04.s097.trimmed.sorted.bam" > "n100.r04.s097_output/n100.r04.s097.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s097_output/n100.r04.s097.trimmed.sorted.bam" > "n100.r04.s097_output/n100.r04.s097.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s097_output/n100.r04.s097.depth.txt" "n100.r04.s097_output/n100.r04.s097.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s097_output/n100.r04.s097.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s097_output/n100.r04.s097.reference.fas" | bcftools consensus -m "n100.r04.s097_output/n100.r04.s097.low_depth.tsv" tmp.vcf.gz > "n100.r04.s097_output/n100.r04.s097.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s097_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:55 scheduler task 11856ee1 (flow 9941c680): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:55 scheduler task 11856ee1 (flow 9941c680): waiting for completion (try 0): started
2021/07/08 16:51:55  ->  n100.r04.s019.Main.out_file 9941c680 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:55 n100.r04.s019.Main.out_file 9941c680 n100/r04/n100.r04.s019.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b16d2c0547a06009a4935c505752b42bf87abb20f11e73d8eaca9e90acb9685a
	sha256:9941c68016d45419edff76f26684926a59706a250e7e400815b618ba6f5e21d2
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/11856ee11970ce761c1633fcac14484df6c528e9a1d6ddf86b248260d75de15d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s019_output"
	    wget -O "n100.r04.s019_output/n100.r04.s019.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s019_output/n100.r04.s019.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s019_output/n100.r04.s019.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s019_output/n100.r04.s019.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s019_output/n100.r04.s019.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s019_output/n100.r04.s019.reference.fas" "n100.r04.s019_output/n100.r04.s019.fq1.fastq" "n100.r04.s019_output/n100.r04.s019.fq2.fastq" | samtools view -bS - > "n100.r04.s019_output/n100.r04.s019.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s019_output/n100.r04.s019.untrimmed.sorted.bam" "n100.r04.s019_output/n100.r04.s019.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s019_output/n100.r04.s019.untrimmed.sorted.bam" -b "n100.r04.s019_output/n100.r04.s019.primers.bed" -p "n100.r04.s019_output/n100.r04.s019.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s019_output/n100.r04.s019.trimmed.sorted.bam" "n100.r04.s019_output/n100.r04.s019.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s019_output/n100.r04.s019.reference.fas" "n100.r04.s019_output/n100.r04.s019.trimmed.sorted.bam" > "n100.r04.s019_output/n100.r04.s019.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s019_output/n100.r04.s019.reference.fas" --call-indels "n100.r04.s019_output/n100.r04.s019.trimmed.sorted.bam" > "n100.r04.s019_output/n100.r04.s019.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s019_output/n100.r04.s019.trimmed.sorted.bam" > "n100.r04.s019_output/n100.r04.s019.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s019_output/n100.r04.s019.depth.txt" "n100.r04.s019_output/n100.r04.s019.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s019_output/n100.r04.s019.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s019_output/n100.r04.s019.reference.fas" | bcftools consensus -m "n100.r04.s019_output/n100.r04.s019.low_depth.tsv" tmp.vcf.gz > "n100.r04.s019_output/n100.r04.s019.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s019_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:55 scheduler task eee3329a (flow 7d1757b7): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:55 scheduler task eee3329a (flow 7d1757b7): waiting for completion (try 0): started
2021/07/08 16:51:55  ->  n100.r04.s069.Main.out_file 7d1757b7 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:55 n100.r04.s069.Main.out_file 7d1757b7 n100/r04/n100.r04.s069.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6394d1af54f043120d271de5494270e0cfd82e1c370fda48f781314d0d255660
	sha256:7d1757b7afd103e7d6e45cdb46390e35af8d020db205e2c008586105a72acafd
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/eee3329a038f049facbb2a361a99eab25be0d9e00dd230dacd82a8e327b0e92d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s069_output"
	    wget -O "n100.r04.s069_output/n100.r04.s069.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s069_output/n100.r04.s069.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s069_output/n100.r04.s069.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s069_output/n100.r04.s069.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s069_output/n100.r04.s069.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s069_output/n100.r04.s069.reference.fas" "n100.r04.s069_output/n100.r04.s069.fq1.fastq" "n100.r04.s069_output/n100.r04.s069.fq2.fastq" | samtools view -bS - > "n100.r04.s069_output/n100.r04.s069.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s069_output/n100.r04.s069.untrimmed.sorted.bam" "n100.r04.s069_output/n100.r04.s069.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s069_output/n100.r04.s069.untrimmed.sorted.bam" -b "n100.r04.s069_output/n100.r04.s069.primers.bed" -p "n100.r04.s069_output/n100.r04.s069.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s069_output/n100.r04.s069.trimmed.sorted.bam" "n100.r04.s069_output/n100.r04.s069.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s069_output/n100.r04.s069.reference.fas" "n100.r04.s069_output/n100.r04.s069.trimmed.sorted.bam" > "n100.r04.s069_output/n100.r04.s069.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s069_output/n100.r04.s069.reference.fas" --call-indels "n100.r04.s069_output/n100.r04.s069.trimmed.sorted.bam" > "n100.r04.s069_output/n100.r04.s069.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s069_output/n100.r04.s069.trimmed.sorted.bam" > "n100.r04.s069_output/n100.r04.s069.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s069_output/n100.r04.s069.depth.txt" "n100.r04.s069_output/n100.r04.s069.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s069_output/n100.r04.s069.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s069_output/n100.r04.s069.reference.fas" | bcftools consensus -m "n100.r04.s069_output/n100.r04.s069.low_depth.tsv" tmp.vcf.gz > "n100.r04.s069_output/n100.r04.s069.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s069_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:55 scheduler task f2ec5fa9 (flow 460aa300): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:55 scheduler task f2ec5fa9 (flow 460aa300): waiting for completion (try 0): started
2021/07/08 16:51:55  ->  n100.r04.s052.Main.out_file 460aa300 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:55 n100.r04.s052.Main.out_file 460aa300 n100/r04/n100.r04.s052.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:bbf969d5a1993f131b39c306e07462fbd4c3b5988e06f4cddb528de8867a8067
	sha256:460aa300b58ce965496ffa873219ac6d871250e89c8e476edb97c3167828e5ed
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f2ec5fa918d226894467b0314b7821a68b827a19ca40312545bef77d74f5362c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s052_output"
	    wget -O "n100.r04.s052_output/n100.r04.s052.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s052_output/n100.r04.s052.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s052_output/n100.r04.s052.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s052_output/n100.r04.s052.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s052_output/n100.r04.s052.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s052_output/n100.r04.s052.reference.fas" "n100.r04.s052_output/n100.r04.s052.fq1.fastq" "n100.r04.s052_output/n100.r04.s052.fq2.fastq" | samtools view -bS - > "n100.r04.s052_output/n100.r04.s052.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s052_output/n100.r04.s052.untrimmed.sorted.bam" "n100.r04.s052_output/n100.r04.s052.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s052_output/n100.r04.s052.untrimmed.sorted.bam" -b "n100.r04.s052_output/n100.r04.s052.primers.bed" -p "n100.r04.s052_output/n100.r04.s052.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s052_output/n100.r04.s052.trimmed.sorted.bam" "n100.r04.s052_output/n100.r04.s052.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s052_output/n100.r04.s052.reference.fas" "n100.r04.s052_output/n100.r04.s052.trimmed.sorted.bam" > "n100.r04.s052_output/n100.r04.s052.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s052_output/n100.r04.s052.reference.fas" --call-indels "n100.r04.s052_output/n100.r04.s052.trimmed.sorted.bam" > "n100.r04.s052_output/n100.r04.s052.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s052_output/n100.r04.s052.trimmed.sorted.bam" > "n100.r04.s052_output/n100.r04.s052.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s052_output/n100.r04.s052.depth.txt" "n100.r04.s052_output/n100.r04.s052.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s052_output/n100.r04.s052.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s052_output/n100.r04.s052.reference.fas" | bcftools consensus -m "n100.r04.s052_output/n100.r04.s052.low_depth.tsv" tmp.vcf.gz > "n100.r04.s052_output/n100.r04.s052.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s052_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:56 scheduler task 26683aa0 (flow fc9dabef): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:56 scheduler task 26683aa0 (flow fc9dabef): waiting for completion (try 0): started
2021/07/08 16:51:56  ->  n100.r04.s004.Main.out_file fc9dabef exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:56 n100.r04.s004.Main.out_file fc9dabef n100/r04/n100.r04.s004.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1350fed93b714dbf6f9cdd152b609ab189c968b8a7bbaf4ba93e7d85475f4884
	sha256:fc9dabef6f96ab4c73145729f65d4ec894a33b442a975b2d224dc2d2acabfceb
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/26683aa02250227a81224d56a75a1e55dafd128fec28728cd28cb3e6c656248b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s004_output"
	    wget -O "n100.r04.s004_output/n100.r04.s004.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s004_output/n100.r04.s004.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s004_output/n100.r04.s004.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s004_output/n100.r04.s004.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s004_output/n100.r04.s004.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s004_output/n100.r04.s004.reference.fas" "n100.r04.s004_output/n100.r04.s004.fq1.fastq" "n100.r04.s004_output/n100.r04.s004.fq2.fastq" | samtools view -bS - > "n100.r04.s004_output/n100.r04.s004.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s004_output/n100.r04.s004.untrimmed.sorted.bam" "n100.r04.s004_output/n100.r04.s004.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s004_output/n100.r04.s004.untrimmed.sorted.bam" -b "n100.r04.s004_output/n100.r04.s004.primers.bed" -p "n100.r04.s004_output/n100.r04.s004.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s004_output/n100.r04.s004.trimmed.sorted.bam" "n100.r04.s004_output/n100.r04.s004.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s004_output/n100.r04.s004.reference.fas" "n100.r04.s004_output/n100.r04.s004.trimmed.sorted.bam" > "n100.r04.s004_output/n100.r04.s004.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s004_output/n100.r04.s004.reference.fas" --call-indels "n100.r04.s004_output/n100.r04.s004.trimmed.sorted.bam" > "n100.r04.s004_output/n100.r04.s004.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s004_output/n100.r04.s004.trimmed.sorted.bam" > "n100.r04.s004_output/n100.r04.s004.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s004_output/n100.r04.s004.depth.txt" "n100.r04.s004_output/n100.r04.s004.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s004_output/n100.r04.s004.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s004_output/n100.r04.s004.reference.fas" | bcftools consensus -m "n100.r04.s004_output/n100.r04.s004.low_depth.tsv" tmp.vcf.gz > "n100.r04.s004_output/n100.r04.s004.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s004_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:56 scheduler task b838e67f (flow f8ffa904): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:56 scheduler task b838e67f (flow f8ffa904): waiting for completion (try 0): started
2021/07/08 16:51:56  ->  n100.r04.s065.Main.out_file f8ffa904 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:56 n100.r04.s065.Main.out_file f8ffa904 n100/r04/n100.r04.s065.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:938839d0e25a76d85d02d0a2ec55138f9a7669f46d39d9a5425ef291ae6d86d6
	sha256:f8ffa90411d555ac3a55e50676a073daae7b1422cf3fb8d9aa912263f27a2a3a
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b838e67f3b3680a6f60f0cd5b469c7536dc06ef558ec9644c9c5ac01901fc23c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s065_output"
	    wget -O "n100.r04.s065_output/n100.r04.s065.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s065_output/n100.r04.s065.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s065_output/n100.r04.s065.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s065_output/n100.r04.s065.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s065_output/n100.r04.s065.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s065_output/n100.r04.s065.reference.fas" "n100.r04.s065_output/n100.r04.s065.fq1.fastq" "n100.r04.s065_output/n100.r04.s065.fq2.fastq" | samtools view -bS - > "n100.r04.s065_output/n100.r04.s065.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s065_output/n100.r04.s065.untrimmed.sorted.bam" "n100.r04.s065_output/n100.r04.s065.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s065_output/n100.r04.s065.untrimmed.sorted.bam" -b "n100.r04.s065_output/n100.r04.s065.primers.bed" -p "n100.r04.s065_output/n100.r04.s065.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s065_output/n100.r04.s065.trimmed.sorted.bam" "n100.r04.s065_output/n100.r04.s065.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s065_output/n100.r04.s065.reference.fas" "n100.r04.s065_output/n100.r04.s065.trimmed.sorted.bam" > "n100.r04.s065_output/n100.r04.s065.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s065_output/n100.r04.s065.reference.fas" --call-indels "n100.r04.s065_output/n100.r04.s065.trimmed.sorted.bam" > "n100.r04.s065_output/n100.r04.s065.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s065_output/n100.r04.s065.trimmed.sorted.bam" > "n100.r04.s065_output/n100.r04.s065.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s065_output/n100.r04.s065.depth.txt" "n100.r04.s065_output/n100.r04.s065.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s065_output/n100.r04.s065.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s065_output/n100.r04.s065.reference.fas" | bcftools consensus -m "n100.r04.s065_output/n100.r04.s065.low_depth.tsv" tmp.vcf.gz > "n100.r04.s065_output/n100.r04.s065.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s065_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:56 scheduler task ce0306d2 (flow f3a54b9e): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:56 scheduler task ce0306d2 (flow f3a54b9e): waiting for completion (try 0): started
2021/07/08 16:51:56  ->  n100.r04.s084.Main.out_file f3a54b9e exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:56 n100.r04.s084.Main.out_file f3a54b9e n100/r04/n100.r04.s084.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3f5098497d1e85fd6ed1fd4954b1313a07a724dcdf07962251038fa118163fa8
	sha256:f3a54b9eb40f10c1e3265577011f6314becdf3a5ef98c66059ed82917a5ee39c
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ce0306d2a6b2f23fac0cf1c39b4b6f66c4eb7f292d0ec1bfc99c2c90fb994ee8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s084_output"
	    wget -O "n100.r04.s084_output/n100.r04.s084.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s084_output/n100.r04.s084.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s084_output/n100.r04.s084.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s084_output/n100.r04.s084.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s084_output/n100.r04.s084.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s084_output/n100.r04.s084.reference.fas" "n100.r04.s084_output/n100.r04.s084.fq1.fastq" "n100.r04.s084_output/n100.r04.s084.fq2.fastq" | samtools view -bS - > "n100.r04.s084_output/n100.r04.s084.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s084_output/n100.r04.s084.untrimmed.sorted.bam" "n100.r04.s084_output/n100.r04.s084.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s084_output/n100.r04.s084.untrimmed.sorted.bam" -b "n100.r04.s084_output/n100.r04.s084.primers.bed" -p "n100.r04.s084_output/n100.r04.s084.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s084_output/n100.r04.s084.trimmed.sorted.bam" "n100.r04.s084_output/n100.r04.s084.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s084_output/n100.r04.s084.reference.fas" "n100.r04.s084_output/n100.r04.s084.trimmed.sorted.bam" > "n100.r04.s084_output/n100.r04.s084.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s084_output/n100.r04.s084.reference.fas" --call-indels "n100.r04.s084_output/n100.r04.s084.trimmed.sorted.bam" > "n100.r04.s084_output/n100.r04.s084.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s084_output/n100.r04.s084.trimmed.sorted.bam" > "n100.r04.s084_output/n100.r04.s084.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s084_output/n100.r04.s084.depth.txt" "n100.r04.s084_output/n100.r04.s084.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s084_output/n100.r04.s084.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s084_output/n100.r04.s084.reference.fas" | bcftools consensus -m "n100.r04.s084_output/n100.r04.s084.low_depth.tsv" tmp.vcf.gz > "n100.r04.s084_output/n100.r04.s084.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s084_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:51:56 scheduler task 4416f8fe (flow ac3a0076): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:51:56 scheduler task 4416f8fe (flow ac3a0076): waiting for completion (try 0): started
2021/07/08 16:51:56  ->  n100.r04.s003.Main.out_file ac3a0076 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:51:56 n100.r04.s003.Main.out_file ac3a0076 n100/r04/n100.r04.s003.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:193af9f07a70a664df9cdffa0147e0a17dd654c64094ef6ff3ad0cdcf57c6880
	sha256:ac3a0076bb5c4dfca9922d67a05dcd45e6ad916c0810531fe3e6aaccddc532e8
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4416f8fea58dab5fda44b2d4941574965b0aa3ab24d142b06baf653ab4ad7bae
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s003_output"
	    wget -O "n100.r04.s003_output/n100.r04.s003.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s003_output/n100.r04.s003.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s003_output/n100.r04.s003.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s003_output/n100.r04.s003.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s003_output/n100.r04.s003.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s003_output/n100.r04.s003.reference.fas" "n100.r04.s003_output/n100.r04.s003.fq1.fastq" "n100.r04.s003_output/n100.r04.s003.fq2.fastq" | samtools view -bS - > "n100.r04.s003_output/n100.r04.s003.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s003_output/n100.r04.s003.untrimmed.sorted.bam" "n100.r04.s003_output/n100.r04.s003.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s003_output/n100.r04.s003.untrimmed.sorted.bam" -b "n100.r04.s003_output/n100.r04.s003.primers.bed" -p "n100.r04.s003_output/n100.r04.s003.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s003_output/n100.r04.s003.trimmed.sorted.bam" "n100.r04.s003_output/n100.r04.s003.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s003_output/n100.r04.s003.reference.fas" "n100.r04.s003_output/n100.r04.s003.trimmed.sorted.bam" > "n100.r04.s003_output/n100.r04.s003.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s003_output/n100.r04.s003.reference.fas" --call-indels "n100.r04.s003_output/n100.r04.s003.trimmed.sorted.bam" > "n100.r04.s003_output/n100.r04.s003.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s003_output/n100.r04.s003.trimmed.sorted.bam" > "n100.r04.s003_output/n100.r04.s003.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s003_output/n100.r04.s003.depth.txt" "n100.r04.s003_output/n100.r04.s003.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s003_output/n100.r04.s003.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s003_output/n100.r04.s003.reference.fas" | bcftools consensus -m "n100.r04.s003_output/n100.r04.s003.low_depth.tsv" tmp.vcf.gz > "n100.r04.s003_output/n100.r04.s003.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s003_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:55:56 scheduler task 8a52bfdb (flow 5bd33203): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:55:56 scheduler task 8a52bfdb (flow 5bd33203): promoting objects (try 0): started
2021/07/08 16:55:56 scheduler task 8a52bfdb (flow 5bd33203): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:55:56 scheduler task 8a52bfdb (flow 5bd33203): retrieving diagnostic output (try 0): started
2021/07/08 16:55:56 scheduler task 1e424faf (flow 8b4daa08): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:55:56 scheduler task 8a52bfdb (flow 5bd33203): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:55:56 scheduler task 1e424faf (flow 8b4daa08): promoting objects (try 0): started
2021/07/08 16:55:56 scheduler task 8a52bfdb (flow 5bd33203): retrieving result (try 0): started
2021/07/08 16:55:56 scheduler task 1afbafec (flow 44babb34): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:55:56 scheduler task 1afbafec (flow 44babb34): promoting objects (try 0): started
2021/07/08 16:55:56 scheduler task 32f45316 (flow 14b3f0cc): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:55:56 scheduler task 1e424faf (flow 8b4daa08): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:55:56 scheduler task 32f45316 (flow 14b3f0cc): promoting objects (try 0): started
2021/07/08 16:55:56 scheduler task 1e424faf (flow 8b4daa08): retrieving diagnostic output (try 0): started
2021/07/08 16:55:56 scheduler task 8a52bfdb (flow 5bd33203): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:55:56 scheduler task 8a52bfdb (flow 5bd33203): transferring output (try 0): started
2021/07/08 16:55:56 scheduler task 1afbafec (flow 44babb34): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:55:56 scheduler task 1afbafec (flow 44babb34): retrieving diagnostic output (try 0): started
2021/07/08 16:55:56 scheduler task 32f45316 (flow 14b3f0cc): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:55:56 scheduler task 32f45316 (flow 14b3f0cc): retrieving diagnostic output (try 0): started
2021/07/08 16:55:57 scheduler task 1e424faf (flow 8b4daa08): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:55:57 scheduler task 1e424faf (flow 8b4daa08): retrieving result (try 0): started
2021/07/08 16:55:57 scheduler task 1afbafec (flow 44babb34): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:55:57 scheduler task 1afbafec (flow 44babb34): retrieving result (try 0): started
2021/07/08 16:55:57 scheduler task 1e424faf (flow 8b4daa08): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:55:57 scheduler task 32f45316 (flow 14b3f0cc): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:55:57 scheduler task 1e424faf (flow 8b4daa08): transferring output (try 0): started
2021/07/08 16:55:57 scheduler task 32f45316 (flow 14b3f0cc): retrieving result (try 0): started
2021/07/08 16:55:57 scheduler task 1afbafec (flow 44babb34): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:55:57 scheduler task 1afbafec (flow 44babb34): transferring output (try 0): started
2021/07/08 16:55:57 scheduler task 32f45316 (flow 14b3f0cc): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:55:57 scheduler task 32f45316 (flow 14b3f0cc): transferring output (try 0): started
2021/07/08 16:55:57 scheduler task 8a52bfdb (flow 5bd33203): transferring output (try 0): successful, next state: unloading
2021/07/08 16:55:57 scheduler task 8a52bfdb (flow 5bd33203): unloading (try 0): started
2021/07/08 16:55:57 scheduler task 8a52bfdb (flow 5bd33203): unloading list<val<.=ab2ceb40 35.7MiB> 35.7MiB>
2021/07/08 16:55:57 scheduler task 8a52bfdb (flow 5bd33203): unloading val<.=f26d720c 35.4MiB>
2021/07/08 16:55:57 scheduler task 8a52bfdb (flow 5bd33203): unloading val<.=aa5724d0 35.4MiB>
2021/07/08 16:55:58 scheduler task 8a52bfdb (flow 5bd33203): unloaded list<val<.=ab2ceb40 35.7MiB> 35.7MiB>
2021/07/08 16:55:58 scheduler task 8a52bfdb (flow 5bd33203): unloaded val<.=aa5724d0 35.4MiB>
2021/07/08 16:55:58 scheduler task 8a52bfdb (flow 5bd33203): unloaded val<.=f26d720c 35.4MiB>
2021/07/08 16:55:58 scheduler task 8a52bfdb (flow 5bd33203): unloading (try 0): successful, next state: complete
2021/07/08 16:55:58  <-  n100.r04.s066.Main.out_file 5bd33203 ok     exec 3m58s 35.7MiB
2021/07/08 16:55:58 n100.r04.s066.Main.out_file 5bd33203 n100/r04/n100.r04.s066.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5083be50a806d41dbb41e5813afd86453ce235c5d68ca7ad8da63e2b88b20ec9
	sha256:5bd33203bc93ad28fc4dab65354241565d2a293e3888112d06a237d4dcd298b6
	ec2-18-220-243-38.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8a52bfdbf8bdc4557a29be7269beae29e887c026609b8d65a4b2fc8b0c0a7a05
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s066_output"
	    wget -O "n100.r04.s066_output/n100.r04.s066.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s066_output/n100.r04.s066.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s066_output/n100.r04.s066.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s066_output/n100.r04.s066.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s066_output/n100.r04.s066.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s066_output/n100.r04.s066.reference.fas" "n100.r04.s066_output/n100.r04.s066.fq1.fastq" "n100.r04.s066_output/n100.r04.s066.fq2.fastq" | samtools view -bS - > "n100.r04.s066_output/n100.r04.s066.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s066_output/n100.r04.s066.untrimmed.sorted.bam" "n100.r04.s066_output/n100.r04.s066.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s066_output/n100.r04.s066.untrimmed.sorted.bam" -b "n100.r04.s066_output/n100.r04.s066.primers.bed" -p "n100.r04.s066_output/n100.r04.s066.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s066_output/n100.r04.s066.trimmed.sorted.bam" "n100.r04.s066_output/n100.r04.s066.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s066_output/n100.r04.s066.reference.fas" "n100.r04.s066_output/n100.r04.s066.trimmed.sorted.bam" > "n100.r04.s066_output/n100.r04.s066.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s066_output/n100.r04.s066.reference.fas" --call-indels "n100.r04.s066_output/n100.r04.s066.trimmed.sorted.bam" > "n100.r04.s066_output/n100.r04.s066.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s066_output/n100.r04.s066.trimmed.sorted.bam" > "n100.r04.s066_output/n100.r04.s066.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s066_output/n100.r04.s066.depth.txt" "n100.r04.s066_output/n100.r04.s066.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s066_output/n100.r04.s066.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s066_output/n100.r04.s066.reference.fas" | bcftools consensus -m "n100.r04.s066_output/n100.r04.s066.low_depth.tsv" tmp.vcf.gz > "n100.r04.s066_output/n100.r04.s066.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s066_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:ab2ceb402ca36d89d2ede2c6efe207ab09334172499a59a6be67ddf18e9efd98 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=17.3MiB max=128.3MiB
	    disk mean=8.9MiB max=35.7MiB
	    tmp mean=259B max=1.0KiB
2021/07/08 16:55:58 scheduler task df4ccb14 (flow 70419303): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s066.tar.gz resources {}
2021/07/08 16:55:58  ->  n100.r04.s066.Main.cp_out_file 70419303 exec extern s3://niema-test/n100/r04/n100.r04.s066.tar.gz 35.7MiB
2021/07/08 16:55:58 scheduler task 1e424faf (flow 8b4daa08): transferring output (try 0): successful, next state: unloading
2021/07/08 16:55:58 scheduler task 1e424faf (flow 8b4daa08): unloading (try 0): started
2021/07/08 16:55:58 scheduler task 1e424faf (flow 8b4daa08): unloading list<val<.=0e485659 35.7MiB> 35.7MiB>
2021/07/08 16:55:58 scheduler task 1e424faf (flow 8b4daa08): unloading val<.=0a494a3d 35.4MiB>
2021/07/08 16:55:58 scheduler task 1e424faf (flow 8b4daa08): unloading val<.=f3cdb74b 35.4MiB>
2021/07/08 16:55:58 scheduler task 1afbafec (flow 44babb34): transferring output (try 0): successful, next state: unloading
2021/07/08 16:55:58 scheduler task 1afbafec (flow 44babb34): unloading (try 0): started
2021/07/08 16:55:58 scheduler task 1afbafec (flow 44babb34): unloading list<val<.=5bcfe8df 35.8MiB> 35.8MiB>
2021/07/08 16:55:58 scheduler task 1afbafec (flow 44babb34): unloading val<.=7fef008e 35.4MiB>
2021/07/08 16:55:58 scheduler task 1afbafec (flow 44babb34): unloading val<.=a191ca72 35.4MiB>
2021/07/08 16:55:58 scheduler task 32f45316 (flow 14b3f0cc): transferring output (try 0): successful, next state: unloading
2021/07/08 16:55:58 scheduler task 32f45316 (flow 14b3f0cc): unloading (try 0): started
2021/07/08 16:55:58 scheduler task 32f45316 (flow 14b3f0cc): unloading list<val<.=f05251d7 35.7MiB> 35.7MiB>
2021/07/08 16:55:58 scheduler task 32f45316 (flow 14b3f0cc): unloading val<.=001b5b28 35.4MiB>
2021/07/08 16:55:58 scheduler task 32f45316 (flow 14b3f0cc): unloading val<.=ce8dc4ed 35.4MiB>
2021/07/08 16:55:58 scheduler task 1e424faf (flow 8b4daa08): unloaded list<val<.=0e485659 35.7MiB> 35.7MiB>
2021/07/08 16:55:58 scheduler task 1e424faf (flow 8b4daa08): unloaded val<.=0a494a3d 35.4MiB>
2021/07/08 16:55:58 scheduler task 1e424faf (flow 8b4daa08): unloaded val<.=f3cdb74b 35.4MiB>
2021/07/08 16:55:58 scheduler task 1e424faf (flow 8b4daa08): unloading (try 0): successful, next state: complete
2021/07/08 16:55:58  <-  n100.r04.s036.Main.out_file 8b4daa08 ok     exec 3m58s 35.7MiB
2021/07/08 16:55:58 n100.r04.s036.Main.out_file 8b4daa08 n100/r04/n100.r04.s036.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:07cb43e75b84587de2f29f4a5b00ed0c1a98a8edfd84ed1b19e11a0dadb53344
	sha256:8b4daa0828c1b956dfdeabf6f561f9de4fcac780bc9cf8e7df5c60874959a5b4
	ec2-18-220-243-38.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1e424faf16d220e9e8123c24355aa6311ed38f2ec70f457a5304f6e1d3ddd089
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s036_output"
	    wget -O "n100.r04.s036_output/n100.r04.s036.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s036_output/n100.r04.s036.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s036_output/n100.r04.s036.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s036_output/n100.r04.s036.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s036_output/n100.r04.s036.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s036_output/n100.r04.s036.reference.fas" "n100.r04.s036_output/n100.r04.s036.fq1.fastq" "n100.r04.s036_output/n100.r04.s036.fq2.fastq" | samtools view -bS - > "n100.r04.s036_output/n100.r04.s036.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s036_output/n100.r04.s036.untrimmed.sorted.bam" "n100.r04.s036_output/n100.r04.s036.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s036_output/n100.r04.s036.untrimmed.sorted.bam" -b "n100.r04.s036_output/n100.r04.s036.primers.bed" -p "n100.r04.s036_output/n100.r04.s036.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s036_output/n100.r04.s036.trimmed.sorted.bam" "n100.r04.s036_output/n100.r04.s036.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s036_output/n100.r04.s036.reference.fas" "n100.r04.s036_output/n100.r04.s036.trimmed.sorted.bam" > "n100.r04.s036_output/n100.r04.s036.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s036_output/n100.r04.s036.reference.fas" --call-indels "n100.r04.s036_output/n100.r04.s036.trimmed.sorted.bam" > "n100.r04.s036_output/n100.r04.s036.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s036_output/n100.r04.s036.trimmed.sorted.bam" > "n100.r04.s036_output/n100.r04.s036.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s036_output/n100.r04.s036.depth.txt" "n100.r04.s036_output/n100.r04.s036.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s036_output/n100.r04.s036.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s036_output/n100.r04.s036.reference.fas" | bcftools consensus -m "n100.r04.s036_output/n100.r04.s036.low_depth.tsv" tmp.vcf.gz > "n100.r04.s036_output/n100.r04.s036.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s036_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:0e4856597d029b89ef280704e9980f4aee406bae403545a25d3658e100723d8f 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=17.4MiB max=127.6MiB
	    disk mean=8.9MiB max=35.7MiB
	    tmp mean=262B max=1.0KiB
2021/07/08 16:55:58 scheduler task 3d2e4d9f (flow 78776832): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s036.tar.gz resources {}
2021/07/08 16:55:58  ->  n100.r04.s036.Main.cp_out_file 78776832 exec extern s3://niema-test/n100/r04/n100.r04.s036.tar.gz 35.7MiB
2021/07/08 16:55:58 scheduler task 1afbafec (flow 44babb34): unloaded val<.=a191ca72 35.4MiB>
2021/07/08 16:55:58 scheduler task 1afbafec (flow 44babb34): unloaded list<val<.=5bcfe8df 35.8MiB> 35.8MiB>
2021/07/08 16:55:58 scheduler task 1afbafec (flow 44babb34): unloaded val<.=7fef008e 35.4MiB>
2021/07/08 16:55:58 scheduler task 1afbafec (flow 44babb34): unloading (try 0): successful, next state: complete
2021/07/08 16:55:58  <-  n100.r04.s061.Main.out_file 44babb34 ok     exec 3m59s 35.8MiB
2021/07/08 16:55:58 n100.r04.s061.Main.out_file 44babb34 n100/r04/n100.r04.s061.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a6b4e7718ad23e0f533013e99a8c90b6bb63fbfe6e3a0d7c60701fd7a8e4943d
	sha256:44babb34aade5d979d4d01eca17fa3e3d6ce557f09732c8354533b354b2b3258
	ec2-18-220-243-38.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1afbafec963215fcd6293dedf444d96af095cbb828b2af727da10320b18c96ec
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s061_output"
	    wget -O "n100.r04.s061_output/n100.r04.s061.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s061_output/n100.r04.s061.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s061_output/n100.r04.s061.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s061_output/n100.r04.s061.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s061_output/n100.r04.s061.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s061_output/n100.r04.s061.reference.fas" "n100.r04.s061_output/n100.r04.s061.fq1.fastq" "n100.r04.s061_output/n100.r04.s061.fq2.fastq" | samtools view -bS - > "n100.r04.s061_output/n100.r04.s061.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s061_output/n100.r04.s061.untrimmed.sorted.bam" "n100.r04.s061_output/n100.r04.s061.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s061_output/n100.r04.s061.untrimmed.sorted.bam" -b "n100.r04.s061_output/n100.r04.s061.primers.bed" -p "n100.r04.s061_output/n100.r04.s061.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s061_output/n100.r04.s061.trimmed.sorted.bam" "n100.r04.s061_output/n100.r04.s061.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s061_output/n100.r04.s061.reference.fas" "n100.r04.s061_output/n100.r04.s061.trimmed.sorted.bam" > "n100.r04.s061_output/n100.r04.s061.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s061_output/n100.r04.s061.reference.fas" --call-indels "n100.r04.s061_output/n100.r04.s061.trimmed.sorted.bam" > "n100.r04.s061_output/n100.r04.s061.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s061_output/n100.r04.s061.trimmed.sorted.bam" > "n100.r04.s061_output/n100.r04.s061.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s061_output/n100.r04.s061.depth.txt" "n100.r04.s061_output/n100.r04.s061.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s061_output/n100.r04.s061.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s061_output/n100.r04.s061.reference.fas" | bcftools consensus -m "n100.r04.s061_output/n100.r04.s061.low_depth.tsv" tmp.vcf.gz > "n100.r04.s061_output/n100.r04.s061.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s061_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:5bcfe8df607b6cc71bfd2819c578b1f934bd2a354f1c464bdb79cba0a9a94e7c 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=17.1MiB max=124.6MiB
	    disk mean=8.9MiB max=35.8MiB
	    tmp mean=259B max=1.0KiB
2021/07/08 16:55:58 scheduler task 0de5531b (flow d016693a): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s061.tar.gz resources {}
2021/07/08 16:55:58  ->  n100.r04.s061.Main.cp_out_file d016693a exec extern s3://niema-test/n100/r04/n100.r04.s061.tar.gz 35.8MiB
2021/07/08 16:55:58 scheduler task 32f45316 (flow 14b3f0cc): unloaded list<val<.=f05251d7 35.7MiB> 35.7MiB>
2021/07/08 16:55:58 scheduler task 32f45316 (flow 14b3f0cc): unloaded val<.=ce8dc4ed 35.4MiB>
2021/07/08 16:55:58 scheduler task 32f45316 (flow 14b3f0cc): unloaded val<.=001b5b28 35.4MiB>
2021/07/08 16:55:58 scheduler task 32f45316 (flow 14b3f0cc): unloading (try 0): successful, next state: complete
2021/07/08 16:55:58  <-  n100.r04.s007.Main.out_file 14b3f0cc ok     exec 3m59s 35.7MiB
2021/07/08 16:55:58 n100.r04.s007.Main.out_file 14b3f0cc n100/r04/n100.r04.s007.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3e3f0feabb2ed862b5214047ad7c28b1911a6255da00dce9a55c2bea2164ab78
	sha256:14b3f0cc347ec7b42e53eb5e67e02c68962638132dff05f0632172b6a4b00b5d
	ec2-18-220-243-38.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/32f45316afb7cc1a1ed6fcd66c56c366f7d1ef458405bd87d2b641a2ce534ba5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s007_output"
	    wget -O "n100.r04.s007_output/n100.r04.s007.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s007_output/n100.r04.s007.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s007_output/n100.r04.s007.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s007_output/n100.r04.s007.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s007_output/n100.r04.s007.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s007_output/n100.r04.s007.reference.fas" "n100.r04.s007_output/n100.r04.s007.fq1.fastq" "n100.r04.s007_output/n100.r04.s007.fq2.fastq" | samtools view -bS - > "n100.r04.s007_output/n100.r04.s007.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s007_output/n100.r04.s007.untrimmed.sorted.bam" "n100.r04.s007_output/n100.r04.s007.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s007_output/n100.r04.s007.untrimmed.sorted.bam" -b "n100.r04.s007_output/n100.r04.s007.primers.bed" -p "n100.r04.s007_output/n100.r04.s007.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s007_output/n100.r04.s007.trimmed.sorted.bam" "n100.r04.s007_output/n100.r04.s007.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s007_output/n100.r04.s007.reference.fas" "n100.r04.s007_output/n100.r04.s007.trimmed.sorted.bam" > "n100.r04.s007_output/n100.r04.s007.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s007_output/n100.r04.s007.reference.fas" --call-indels "n100.r04.s007_output/n100.r04.s007.trimmed.sorted.bam" > "n100.r04.s007_output/n100.r04.s007.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s007_output/n100.r04.s007.trimmed.sorted.bam" > "n100.r04.s007_output/n100.r04.s007.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s007_output/n100.r04.s007.depth.txt" "n100.r04.s007_output/n100.r04.s007.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s007_output/n100.r04.s007.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s007_output/n100.r04.s007.reference.fas" | bcftools consensus -m "n100.r04.s007_output/n100.r04.s007.low_depth.tsv" tmp.vcf.gz > "n100.r04.s007_output/n100.r04.s007.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s007_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f05251d741570967182d5cf00529bb0cc4c4569d9e8ec222ad936a094c3dc7b6 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=17.4MiB max=127.4MiB
	    disk mean=8.9MiB max=35.7MiB
	    tmp mean=262B max=1.0KiB
2021/07/08 16:55:58 scheduler task 3afa8951 (flow df2be735): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s007.tar.gz resources {}
2021/07/08 16:55:58  ->  n100.r04.s007.Main.cp_out_file df2be735 exec extern s3://niema-test/n100/r04/n100.r04.s007.tar.gz 35.7MiB
2021/07/08 16:55:59 scheduler task 0de5531b (flow d016693a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:5bcfe8df607b6cc71bfd2819c578b1f934bd2a354f1c464bdb79cba0a9a94e7c -> s3://niema-test/n100/r04/n100.r04.s061.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:55:59  <-  n100.r04.s061.Main.cp_out_file d016693a ok   extern 0s 35.8MiB
2021/07/08 16:55:59 scheduler task df4ccb14 (flow 70419303): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:ab2ceb402ca36d89d2ede2c6efe207ab09334172499a59a6be67ddf18e9efd98 -> s3://niema-test/n100/r04/n100.r04.s066.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:55:59  <-  n100.r04.s066.Main.cp_out_file 70419303 ok   extern 0s 35.7MiB
2021/07/08 16:55:59 scheduler task 3afa8951 (flow df2be735): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f05251d741570967182d5cf00529bb0cc4c4569d9e8ec222ad936a094c3dc7b6 -> s3://niema-test/n100/r04/n100.r04.s007.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:55:59  <-  n100.r04.s007.Main.cp_out_file df2be735 ok   extern 0s 35.7MiB
2021/07/08 16:55:59 scheduler task 3d2e4d9f (flow 78776832): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:0e4856597d029b89ef280704e9980f4aee406bae403545a25d3658e100723d8f -> s3://niema-test/n100/r04/n100.r04.s036.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:55:59  <-  n100.r04.s036.Main.cp_out_file 78776832 ok   extern 0s 35.7MiB
2021/07/08 16:56:50 scheduler task e8d5592b (flow 7b4e38f2): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:56:50 scheduler task e8d5592b (flow 7b4e38f2): promoting objects (try 0): started
2021/07/08 16:56:50 scheduler task 3bb8f0e4 (flow a324358a): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:56:50 scheduler task 3bb8f0e4 (flow a324358a): promoting objects (try 0): started
2021/07/08 16:56:50 scheduler task e8d5592b (flow 7b4e38f2): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:56:50 scheduler task e8d5592b (flow 7b4e38f2): retrieving diagnostic output (try 0): started
2021/07/08 16:56:50 scheduler task 3bb8f0e4 (flow a324358a): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:56:50 scheduler task 3bb8f0e4 (flow a324358a): retrieving diagnostic output (try 0): started
2021/07/08 16:56:51 scheduler task e8d5592b (flow 7b4e38f2): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:56:51 scheduler task e8d5592b (flow 7b4e38f2): retrieving result (try 0): started
2021/07/08 16:56:51 scheduler task 8bd46694 (flow e8a2d981): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:56:51 scheduler task 3bb8f0e4 (flow a324358a): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:56:51 scheduler task e8d5592b (flow 7b4e38f2): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:56:51 scheduler task 8bd46694 (flow e8a2d981): promoting objects (try 0): started
2021/07/08 16:56:51 scheduler task 3bb8f0e4 (flow a324358a): retrieving result (try 0): started
2021/07/08 16:56:51 scheduler task e8d5592b (flow 7b4e38f2): transferring output (try 0): started
2021/07/08 16:56:51 scheduler task 8bd46694 (flow e8a2d981): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:56:51 scheduler task 8bd46694 (flow e8a2d981): retrieving diagnostic output (try 0): started
2021/07/08 16:56:51 scheduler task 3bb8f0e4 (flow a324358a): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:56:51 scheduler task 3bb8f0e4 (flow a324358a): transferring output (try 0): started
2021/07/08 16:56:51 scheduler task 8bd46694 (flow e8a2d981): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:56:51 scheduler task 8bd46694 (flow e8a2d981): retrieving result (try 0): started
2021/07/08 16:56:51 scheduler task 8bd46694 (flow e8a2d981): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:56:51 scheduler task 8bd46694 (flow e8a2d981): transferring output (try 0): started
2021/07/08 16:56:51 scheduler task 85eaed6d (flow 1f720a3c): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:56:51 scheduler task 85eaed6d (flow 1f720a3c): promoting objects (try 0): started
2021/07/08 16:56:51 scheduler task 85eaed6d (flow 1f720a3c): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:56:51 scheduler task 85eaed6d (flow 1f720a3c): retrieving diagnostic output (try 0): started
2021/07/08 16:56:51 scheduler task 85eaed6d (flow 1f720a3c): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:56:51 scheduler task 85eaed6d (flow 1f720a3c): retrieving result (try 0): started
2021/07/08 16:56:51 scheduler task 85eaed6d (flow 1f720a3c): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:56:51 scheduler task 85eaed6d (flow 1f720a3c): transferring output (try 0): started
2021/07/08 16:56:51 scheduler task e8d5592b (flow 7b4e38f2): transferring output (try 0): successful, next state: unloading
2021/07/08 16:56:52 scheduler task e8d5592b (flow 7b4e38f2): unloading (try 0): started
2021/07/08 16:56:52 scheduler task e8d5592b (flow 7b4e38f2): unloading list<val<.=192b2c57 35.8MiB> 35.8MiB>
2021/07/08 16:56:52 scheduler task e8d5592b (flow 7b4e38f2): unloading val<.=4bfbe2b2 35.4MiB>
2021/07/08 16:56:52 scheduler task e8d5592b (flow 7b4e38f2): unloading val<.=017e4011 35.4MiB>
2021/07/08 16:56:52 scheduler task 3bb8f0e4 (flow a324358a): transferring output (try 0): successful, next state: unloading
2021/07/08 16:56:52 scheduler task 3bb8f0e4 (flow a324358a): unloading (try 0): started
2021/07/08 16:56:52 scheduler task 3bb8f0e4 (flow a324358a): unloading list<val<.=ab256619 35.7MiB> 35.7MiB>
2021/07/08 16:56:52 scheduler task 3bb8f0e4 (flow a324358a): unloading val<.=54334788 35.4MiB>
2021/07/08 16:56:52 scheduler task 3bb8f0e4 (flow a324358a): unloading val<.=baccca8b 35.4MiB>
2021/07/08 16:56:52 scheduler task 8bd46694 (flow e8a2d981): transferring output (try 0): successful, next state: unloading
2021/07/08 16:56:52 scheduler task 8bd46694 (flow e8a2d981): unloading (try 0): started
2021/07/08 16:56:52 scheduler task 8bd46694 (flow e8a2d981): unloading list<val<.=055777af 35.7MiB> 35.7MiB>
2021/07/08 16:56:52 scheduler task 8bd46694 (flow e8a2d981): unloading val<.=27c460f0 35.4MiB>
2021/07/08 16:56:52 scheduler task 8bd46694 (flow e8a2d981): unloading val<.=08223bfa 35.4MiB>
2021/07/08 16:56:52 scheduler task e8d5592b (flow 7b4e38f2): unloaded list<val<.=192b2c57 35.8MiB> 35.8MiB>
2021/07/08 16:56:52 scheduler task e8d5592b (flow 7b4e38f2): unloaded val<.=017e4011 35.4MiB>
2021/07/08 16:56:52 scheduler task e8d5592b (flow 7b4e38f2): unloaded val<.=4bfbe2b2 35.4MiB>
2021/07/08 16:56:52 scheduler task e8d5592b (flow 7b4e38f2): unloading (try 0): successful, next state: complete
2021/07/08 16:56:52  <-  n100.r04.s064.Main.out_file 7b4e38f2 ok     exec 4m52s 35.8MiB
2021/07/08 16:56:52 n100.r04.s064.Main.out_file 7b4e38f2 n100/r04/n100.r04.s064.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:76ad720e7e28f3ae5ef91480ea7e7e7232fb7dc7efd1c729b5d5d4e5e14e69a1
	sha256:7b4e38f2c4eb727da99aae084070378e8723b0680d54c7cdffb19f98c111df65
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e8d5592b24babe8a59e13a7ced10b954d518e86976272c9d75360f765768fa42
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s064_output"
	    wget -O "n100.r04.s064_output/n100.r04.s064.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s064_output/n100.r04.s064.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s064_output/n100.r04.s064.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s064_output/n100.r04.s064.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s064_output/n100.r04.s064.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s064_output/n100.r04.s064.reference.fas" "n100.r04.s064_output/n100.r04.s064.fq1.fastq" "n100.r04.s064_output/n100.r04.s064.fq2.fastq" | samtools view -bS - > "n100.r04.s064_output/n100.r04.s064.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s064_output/n100.r04.s064.untrimmed.sorted.bam" "n100.r04.s064_output/n100.r04.s064.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s064_output/n100.r04.s064.untrimmed.sorted.bam" -b "n100.r04.s064_output/n100.r04.s064.primers.bed" -p "n100.r04.s064_output/n100.r04.s064.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s064_output/n100.r04.s064.trimmed.sorted.bam" "n100.r04.s064_output/n100.r04.s064.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s064_output/n100.r04.s064.reference.fas" "n100.r04.s064_output/n100.r04.s064.trimmed.sorted.bam" > "n100.r04.s064_output/n100.r04.s064.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s064_output/n100.r04.s064.reference.fas" --call-indels "n100.r04.s064_output/n100.r04.s064.trimmed.sorted.bam" > "n100.r04.s064_output/n100.r04.s064.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s064_output/n100.r04.s064.trimmed.sorted.bam" > "n100.r04.s064_output/n100.r04.s064.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s064_output/n100.r04.s064.depth.txt" "n100.r04.s064_output/n100.r04.s064.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s064_output/n100.r04.s064.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s064_output/n100.r04.s064.reference.fas" | bcftools consensus -m "n100.r04.s064_output/n100.r04.s064.low_depth.tsv" tmp.vcf.gz > "n100.r04.s064_output/n100.r04.s064.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s064_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:192b2c57836c12c4bcdc7f08a3b37df61d00430377f35fa1e72e47b04971ba81 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.1MiB max=125.8MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=627B max=2.0KiB
2021/07/08 16:56:52 scheduler task 5f8adefc (flow a0f7514f): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s064.tar.gz resources {}
2021/07/08 16:56:52  ->  n100.r04.s064.Main.cp_out_file a0f7514f exec extern s3://niema-test/n100/r04/n100.r04.s064.tar.gz 35.8MiB
2021/07/08 16:56:52 scheduler task 3bb8f0e4 (flow a324358a): unloaded list<val<.=ab256619 35.7MiB> 35.7MiB>
2021/07/08 16:56:52 scheduler task 3bb8f0e4 (flow a324358a): unloaded val<.=54334788 35.4MiB>
2021/07/08 16:56:52 scheduler task 3bb8f0e4 (flow a324358a): unloaded val<.=baccca8b 35.4MiB>
2021/07/08 16:56:52 scheduler task 3bb8f0e4 (flow a324358a): unloading (try 0): successful, next state: complete
2021/07/08 16:56:52  <-  n100.r04.s038.Main.out_file a324358a ok     exec 4m52s 35.7MiB
2021/07/08 16:56:52 n100.r04.s038.Main.out_file a324358a n100/r04/n100.r04.s038.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:205e40115ac125abe06fb6802858f9fbce1cdd3573b7fe602cf372d1ea3760c2
	sha256:a324358acb22cccb651d592e30f1248b0489dce322c7e9d3ce173da0bdadd28f
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3bb8f0e4bf7d9936fe86131d80127c2a87bcce574150308e1b030475bc9822a9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s038_output"
	    wget -O "n100.r04.s038_output/n100.r04.s038.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s038_output/n100.r04.s038.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s038_output/n100.r04.s038.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s038_output/n100.r04.s038.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s038_output/n100.r04.s038.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s038_output/n100.r04.s038.reference.fas" "n100.r04.s038_output/n100.r04.s038.fq1.fastq" "n100.r04.s038_output/n100.r04.s038.fq2.fastq" | samtools view -bS - > "n100.r04.s038_output/n100.r04.s038.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s038_output/n100.r04.s038.untrimmed.sorted.bam" "n100.r04.s038_output/n100.r04.s038.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s038_output/n100.r04.s038.untrimmed.sorted.bam" -b "n100.r04.s038_output/n100.r04.s038.primers.bed" -p "n100.r04.s038_output/n100.r04.s038.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s038_output/n100.r04.s038.trimmed.sorted.bam" "n100.r04.s038_output/n100.r04.s038.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s038_output/n100.r04.s038.reference.fas" "n100.r04.s038_output/n100.r04.s038.trimmed.sorted.bam" > "n100.r04.s038_output/n100.r04.s038.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s038_output/n100.r04.s038.reference.fas" --call-indels "n100.r04.s038_output/n100.r04.s038.trimmed.sorted.bam" > "n100.r04.s038_output/n100.r04.s038.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s038_output/n100.r04.s038.trimmed.sorted.bam" > "n100.r04.s038_output/n100.r04.s038.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s038_output/n100.r04.s038.depth.txt" "n100.r04.s038_output/n100.r04.s038.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s038_output/n100.r04.s038.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s038_output/n100.r04.s038.reference.fas" | bcftools consensus -m "n100.r04.s038_output/n100.r04.s038.low_depth.tsv" tmp.vcf.gz > "n100.r04.s038_output/n100.r04.s038.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s038_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:ab2566192d37244f4f95eb454de347b8d2593bd6c18adcc4509f3a58c8667a57 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.3MiB max=125.8MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=628B max=2.1KiB
2021/07/08 16:56:52 scheduler task c94deb97 (flow abfd9506): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s038.tar.gz resources {}
2021/07/08 16:56:52  ->  n100.r04.s038.Main.cp_out_file abfd9506 exec extern s3://niema-test/n100/r04/n100.r04.s038.tar.gz 35.7MiB
2021/07/08 16:56:52 scheduler task 8bd46694 (flow e8a2d981): unloaded list<val<.=055777af 35.7MiB> 35.7MiB>
2021/07/08 16:56:52 scheduler task 8bd46694 (flow e8a2d981): unloaded val<.=08223bfa 35.4MiB>
2021/07/08 16:56:52 scheduler task 8bd46694 (flow e8a2d981): unloaded val<.=27c460f0 35.4MiB>
2021/07/08 16:56:52 scheduler task 8bd46694 (flow e8a2d981): unloading (try 0): successful, next state: complete
2021/07/08 16:56:52  <-  n100.r04.s034.Main.out_file e8a2d981 ok     exec 4m52s 35.7MiB
2021/07/08 16:56:52 n100.r04.s034.Main.out_file e8a2d981 n100/r04/n100.r04.s034.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ad9ec8e2b62405314865f3cced91635bb6910d4c9b526e6ea47869ff3128e196
	sha256:e8a2d981e6f1d08a3aa7a3a1c94027d4ab9a5d0360a21ad256bd800f00c89f0e
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8bd4669448cba48f1391948b17c969b6efdd2204ae106a085e827f50e1d6f683
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s034_output"
	    wget -O "n100.r04.s034_output/n100.r04.s034.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s034_output/n100.r04.s034.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s034_output/n100.r04.s034.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s034_output/n100.r04.s034.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s034_output/n100.r04.s034.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s034_output/n100.r04.s034.reference.fas" "n100.r04.s034_output/n100.r04.s034.fq1.fastq" "n100.r04.s034_output/n100.r04.s034.fq2.fastq" | samtools view -bS - > "n100.r04.s034_output/n100.r04.s034.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s034_output/n100.r04.s034.untrimmed.sorted.bam" "n100.r04.s034_output/n100.r04.s034.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s034_output/n100.r04.s034.untrimmed.sorted.bam" -b "n100.r04.s034_output/n100.r04.s034.primers.bed" -p "n100.r04.s034_output/n100.r04.s034.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s034_output/n100.r04.s034.trimmed.sorted.bam" "n100.r04.s034_output/n100.r04.s034.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s034_output/n100.r04.s034.reference.fas" "n100.r04.s034_output/n100.r04.s034.trimmed.sorted.bam" > "n100.r04.s034_output/n100.r04.s034.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s034_output/n100.r04.s034.reference.fas" --call-indels "n100.r04.s034_output/n100.r04.s034.trimmed.sorted.bam" > "n100.r04.s034_output/n100.r04.s034.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s034_output/n100.r04.s034.trimmed.sorted.bam" > "n100.r04.s034_output/n100.r04.s034.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s034_output/n100.r04.s034.depth.txt" "n100.r04.s034_output/n100.r04.s034.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s034_output/n100.r04.s034.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s034_output/n100.r04.s034.reference.fas" | bcftools consensus -m "n100.r04.s034_output/n100.r04.s034.low_depth.tsv" tmp.vcf.gz > "n100.r04.s034_output/n100.r04.s034.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s034_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:055777af5cf2b55def69194c77fd080c18225656f473238feda9f60dee1442f8 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.8MiB max=127.5MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=632B max=2.1KiB
2021/07/08 16:56:52 scheduler task 819219aa (flow 35b60070): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s034.tar.gz resources {}
2021/07/08 16:56:52  ->  n100.r04.s034.Main.cp_out_file 35b60070 exec extern s3://niema-test/n100/r04/n100.r04.s034.tar.gz 35.7MiB
2021/07/08 16:56:52 scheduler task 85eaed6d (flow 1f720a3c): transferring output (try 0): successful, next state: unloading
2021/07/08 16:56:52 scheduler task 85eaed6d (flow 1f720a3c): unloading (try 0): started
2021/07/08 16:56:52 scheduler task 85eaed6d (flow 1f720a3c): unloading list<val<.=5a505635 35.7MiB> 35.7MiB>
2021/07/08 16:56:52 scheduler task 85eaed6d (flow 1f720a3c): unloading val<.=14bd1964 35.4MiB>
2021/07/08 16:56:52 scheduler task 85eaed6d (flow 1f720a3c): unloading val<.=bbad1776 35.4MiB>
2021/07/08 16:56:52 scheduler task 85eaed6d (flow 1f720a3c): unloaded val<.=14bd1964 35.4MiB>
2021/07/08 16:56:52 scheduler task 85eaed6d (flow 1f720a3c): unloaded list<val<.=5a505635 35.7MiB> 35.7MiB>
2021/07/08 16:56:52 scheduler task 85eaed6d (flow 1f720a3c): unloaded val<.=bbad1776 35.4MiB>
2021/07/08 16:56:52 scheduler task 85eaed6d (flow 1f720a3c): unloading (try 0): successful, next state: complete
2021/07/08 16:56:52  <-  n100.r04.s024.Main.out_file 1f720a3c ok     exec 4m53s 35.7MiB
2021/07/08 16:56:52 n100.r04.s024.Main.out_file 1f720a3c n100/r04/n100.r04.s024.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1c6a6128ba4339e54e2c9c54d30ea20a34eccbc39ee4f8199968161e7a79453b
	sha256:1f720a3c400d42efdc4c588de9cd10becc2e0dda6f6e7e53add8d0a7e0f7bd3d
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/85eaed6d77b0ed0c3b052cb85dcca7103f5ef2edaf4d72598d60e219d3901415
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s024_output"
	    wget -O "n100.r04.s024_output/n100.r04.s024.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s024_output/n100.r04.s024.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s024_output/n100.r04.s024.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s024_output/n100.r04.s024.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s024_output/n100.r04.s024.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s024_output/n100.r04.s024.reference.fas" "n100.r04.s024_output/n100.r04.s024.fq1.fastq" "n100.r04.s024_output/n100.r04.s024.fq2.fastq" | samtools view -bS - > "n100.r04.s024_output/n100.r04.s024.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s024_output/n100.r04.s024.untrimmed.sorted.bam" "n100.r04.s024_output/n100.r04.s024.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s024_output/n100.r04.s024.untrimmed.sorted.bam" -b "n100.r04.s024_output/n100.r04.s024.primers.bed" -p "n100.r04.s024_output/n100.r04.s024.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s024_output/n100.r04.s024.trimmed.sorted.bam" "n100.r04.s024_output/n100.r04.s024.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s024_output/n100.r04.s024.reference.fas" "n100.r04.s024_output/n100.r04.s024.trimmed.sorted.bam" > "n100.r04.s024_output/n100.r04.s024.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s024_output/n100.r04.s024.reference.fas" --call-indels "n100.r04.s024_output/n100.r04.s024.trimmed.sorted.bam" > "n100.r04.s024_output/n100.r04.s024.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s024_output/n100.r04.s024.trimmed.sorted.bam" > "n100.r04.s024_output/n100.r04.s024.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s024_output/n100.r04.s024.depth.txt" "n100.r04.s024_output/n100.r04.s024.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s024_output/n100.r04.s024.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s024_output/n100.r04.s024.reference.fas" | bcftools consensus -m "n100.r04.s024_output/n100.r04.s024.low_depth.tsv" tmp.vcf.gz > "n100.r04.s024_output/n100.r04.s024.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s024_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:5a505635b619dbca2c743e5f88cf1d088b04cdadc992d95753bba162b0990141 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.6MiB max=126.3MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=632B max=2.1KiB
2021/07/08 16:56:52 scheduler task 35de91c7 (flow d70c6087): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s024.tar.gz resources {}
2021/07/08 16:56:52  ->  n100.r04.s024.Main.cp_out_file d70c6087 exec extern s3://niema-test/n100/r04/n100.r04.s024.tar.gz 35.7MiB
2021/07/08 16:56:52 scheduler task 8f237035 (flow 7731292a): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:56:52 scheduler task 8f237035 (flow 7731292a): promoting objects (try 0): started
2021/07/08 16:56:52 scheduler task 8f237035 (flow 7731292a): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:56:52 scheduler task 8f237035 (flow 7731292a): retrieving diagnostic output (try 0): started
2021/07/08 16:56:52 scheduler task 8f237035 (flow 7731292a): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:56:52 scheduler task 8f237035 (flow 7731292a): retrieving result (try 0): started
2021/07/08 16:56:52 scheduler task 5a8a7584 (flow 749eedd5): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:56:52 scheduler task 5a8a7584 (flow 749eedd5): promoting objects (try 0): started
2021/07/08 16:56:52 scheduler task 8f237035 (flow 7731292a): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:56:52 scheduler task 8f237035 (flow 7731292a): transferring output (try 0): started
2021/07/08 16:56:53 scheduler task 5a8a7584 (flow 749eedd5): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:56:53 scheduler task 5a8a7584 (flow 749eedd5): retrieving diagnostic output (try 0): started
2021/07/08 16:56:53 scheduler task 5f8adefc (flow a0f7514f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:192b2c57836c12c4bcdc7f08a3b37df61d00430377f35fa1e72e47b04971ba81 -> s3://niema-test/n100/r04/n100.r04.s064.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:56:53  <-  n100.r04.s064.Main.cp_out_file a0f7514f ok   extern 0s 35.8MiB
2021/07/08 16:56:53 scheduler task 5a8a7584 (flow 749eedd5): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:56:53 scheduler task 5a8a7584 (flow 749eedd5): retrieving result (try 0): started
2021/07/08 16:56:53 scheduler task c94deb97 (flow abfd9506): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:ab2566192d37244f4f95eb454de347b8d2593bd6c18adcc4509f3a58c8667a57 -> s3://niema-test/n100/r04/n100.r04.s038.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:56:53  <-  n100.r04.s038.Main.cp_out_file abfd9506 ok   extern 0s 35.7MiB
2021/07/08 16:56:53 scheduler task eab1f0b7 (flow 46c93b21): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:56:53 scheduler task 819219aa (flow 35b60070): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:055777af5cf2b55def69194c77fd080c18225656f473238feda9f60dee1442f8 -> s3://niema-test/n100/r04/n100.r04.s034.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:56:53  <-  n100.r04.s034.Main.cp_out_file 35b60070 ok   extern 0s 35.7MiB
2021/07/08 16:56:53 scheduler task eab1f0b7 (flow 46c93b21): promoting objects (try 0): started
2021/07/08 16:56:53 scheduler task 5a8a7584 (flow 749eedd5): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:56:53 scheduler task 5a8a7584 (flow 749eedd5): transferring output (try 0): started
2021/07/08 16:56:53 scheduler task eab1f0b7 (flow 46c93b21): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:56:53 scheduler task eab1f0b7 (flow 46c93b21): retrieving diagnostic output (try 0): started
2021/07/08 16:56:53 scheduler task 35de91c7 (flow d70c6087): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:5a505635b619dbca2c743e5f88cf1d088b04cdadc992d95753bba162b0990141 -> s3://niema-test/n100/r04/n100.r04.s024.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:56:53  <-  n100.r04.s024.Main.cp_out_file d70c6087 ok   extern 0s 35.7MiB
2021/07/08 16:56:53 scheduler task 8f237035 (flow 7731292a): transferring output (try 0): successful, next state: unloading
2021/07/08 16:56:53 scheduler task eab1f0b7 (flow 46c93b21): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:56:53 scheduler task 8f237035 (flow 7731292a): unloading (try 0): started
2021/07/08 16:56:53 scheduler task 8f237035 (flow 7731292a): unloading list<val<.=d5e21dac 35.7MiB> 35.7MiB>
2021/07/08 16:56:53 scheduler task 8f237035 (flow 7731292a): unloading val<.=e14dd8dd 35.4MiB>
2021/07/08 16:56:53 scheduler task 8f237035 (flow 7731292a): unloading val<.=8da7a12d 35.4MiB>
2021/07/08 16:56:53 scheduler task eab1f0b7 (flow 46c93b21): retrieving result (try 0): started
2021/07/08 16:56:53 scheduler task 8f237035 (flow 7731292a): unloaded val<.=8da7a12d 35.4MiB>
2021/07/08 16:56:53 scheduler task 8f237035 (flow 7731292a): unloaded val<.=e14dd8dd 35.4MiB>
2021/07/08 16:56:53 scheduler task 8f237035 (flow 7731292a): unloaded list<val<.=d5e21dac 35.7MiB> 35.7MiB>
2021/07/08 16:56:53 scheduler task 8f237035 (flow 7731292a): unloading (try 0): successful, next state: complete
2021/07/08 16:56:53 scheduler task eab1f0b7 (flow 46c93b21): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:56:53  <-  n100.r04.s095.Main.out_file 7731292a ok     exec 4m53s 35.7MiB
2021/07/08 16:56:53 n100.r04.s095.Main.out_file 7731292a n100/r04/n100.r04.s095.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e4b9e80f1acffe365fbc9cb8a53942023141bb4edf2a8b6b6ea5d7c8f19d5833
	sha256:7731292a47b1b5f16489926c85a7e7b7b5ef4937ec853d2215b462582eab509b
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8f237035b3f232129250bb77bb9b181b9188acacd2373d29a09ba6ebf0b593f8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s095_output"
	    wget -O "n100.r04.s095_output/n100.r04.s095.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s095_output/n100.r04.s095.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s095_output/n100.r04.s095.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s095_output/n100.r04.s095.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s095_output/n100.r04.s095.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s095_output/n100.r04.s095.reference.fas" "n100.r04.s095_output/n100.r04.s095.fq1.fastq" "n100.r04.s095_output/n100.r04.s095.fq2.fastq" | samtools view -bS - > "n100.r04.s095_output/n100.r04.s095.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s095_output/n100.r04.s095.untrimmed.sorted.bam" "n100.r04.s095_output/n100.r04.s095.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s095_output/n100.r04.s095.untrimmed.sorted.bam" -b "n100.r04.s095_output/n100.r04.s095.primers.bed" -p "n100.r04.s095_output/n100.r04.s095.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s095_output/n100.r04.s095.trimmed.sorted.bam" "n100.r04.s095_output/n100.r04.s095.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s095_output/n100.r04.s095.reference.fas" "n100.r04.s095_output/n100.r04.s095.trimmed.sorted.bam" > "n100.r04.s095_output/n100.r04.s095.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s095_output/n100.r04.s095.reference.fas" --call-indels "n100.r04.s095_output/n100.r04.s095.trimmed.sorted.bam" > "n100.r04.s095_output/n100.r04.s095.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s095_output/n100.r04.s095.trimmed.sorted.bam" > "n100.r04.s095_output/n100.r04.s095.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s095_output/n100.r04.s095.depth.txt" "n100.r04.s095_output/n100.r04.s095.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s095_output/n100.r04.s095.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s095_output/n100.r04.s095.reference.fas" | bcftools consensus -m "n100.r04.s095_output/n100.r04.s095.low_depth.tsv" tmp.vcf.gz > "n100.r04.s095_output/n100.r04.s095.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s095_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d5e21dac91f69870ad77031b7ea851a211bc45fe58d31fa13de7e87dfb137c1f 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.4MiB max=128.5MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 16:56:53 scheduler task c1bd20a2 (flow 949cd1cb): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s095.tar.gz resources {}
2021/07/08 16:56:53  ->  n100.r04.s095.Main.cp_out_file 949cd1cb exec extern s3://niema-test/n100/r04/n100.r04.s095.tar.gz 35.7MiB
2021/07/08 16:56:53 scheduler task eab1f0b7 (flow 46c93b21): transferring output (try 0): started
2021/07/08 16:56:53 scheduler task 5a8a7584 (flow 749eedd5): transferring output (try 0): successful, next state: unloading
2021/07/08 16:56:53 scheduler task 5a8a7584 (flow 749eedd5): unloading (try 0): started
2021/07/08 16:56:53 scheduler task 5a8a7584 (flow 749eedd5): unloading list<val<.=f760f2c6 35.7MiB> 35.7MiB>
2021/07/08 16:56:53 scheduler task 5a8a7584 (flow 749eedd5): unloading val<.=2ec44f5a 35.4MiB>
2021/07/08 16:56:53 scheduler task 5a8a7584 (flow 749eedd5): unloading val<.=f9c5f131 35.4MiB>
2021/07/08 16:56:53 scheduler task 5a8a7584 (flow 749eedd5): unloaded list<val<.=f760f2c6 35.7MiB> 35.7MiB>
2021/07/08 16:56:54 scheduler task 5a8a7584 (flow 749eedd5): unloaded val<.=f9c5f131 35.4MiB>
2021/07/08 16:56:54 scheduler task 5a8a7584 (flow 749eedd5): unloaded val<.=2ec44f5a 35.4MiB>
2021/07/08 16:56:54 scheduler task 5a8a7584 (flow 749eedd5): unloading (try 0): successful, next state: complete
2021/07/08 16:56:54  <-  n100.r04.s032.Main.out_file 749eedd5 ok     exec 4m54s 35.7MiB
2021/07/08 16:56:54 n100.r04.s032.Main.out_file 749eedd5 n100/r04/n100.r04.s032.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:aabf612e6250ef256761e8bdde821c270a48d739c185db1efb9231216e7846df
	sha256:749eedd5ffdd0adc3346b6fcb5411224afd625a7311ab4b646063250b258163b
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5a8a7584efcfa863290842865c672a59a7a56cf503b8fb513bec14182c5edfbc
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s032_output"
	    wget -O "n100.r04.s032_output/n100.r04.s032.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s032_output/n100.r04.s032.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s032_output/n100.r04.s032.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s032_output/n100.r04.s032.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s032_output/n100.r04.s032.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s032_output/n100.r04.s032.reference.fas" "n100.r04.s032_output/n100.r04.s032.fq1.fastq" "n100.r04.s032_output/n100.r04.s032.fq2.fastq" | samtools view -bS - > "n100.r04.s032_output/n100.r04.s032.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s032_output/n100.r04.s032.untrimmed.sorted.bam" "n100.r04.s032_output/n100.r04.s032.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s032_output/n100.r04.s032.untrimmed.sorted.bam" -b "n100.r04.s032_output/n100.r04.s032.primers.bed" -p "n100.r04.s032_output/n100.r04.s032.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s032_output/n100.r04.s032.trimmed.sorted.bam" "n100.r04.s032_output/n100.r04.s032.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s032_output/n100.r04.s032.reference.fas" "n100.r04.s032_output/n100.r04.s032.trimmed.sorted.bam" > "n100.r04.s032_output/n100.r04.s032.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s032_output/n100.r04.s032.reference.fas" --call-indels "n100.r04.s032_output/n100.r04.s032.trimmed.sorted.bam" > "n100.r04.s032_output/n100.r04.s032.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s032_output/n100.r04.s032.trimmed.sorted.bam" > "n100.r04.s032_output/n100.r04.s032.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s032_output/n100.r04.s032.depth.txt" "n100.r04.s032_output/n100.r04.s032.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s032_output/n100.r04.s032.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s032_output/n100.r04.s032.reference.fas" | bcftools consensus -m "n100.r04.s032_output/n100.r04.s032.low_depth.tsv" tmp.vcf.gz > "n100.r04.s032_output/n100.r04.s032.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s032_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f760f2c6d059d1df191b1cae4f2c9abaae53aedece0c233929c5336a3d53e7ec 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.6MiB max=124.1MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=630B max=2.1KiB
2021/07/08 16:56:54 scheduler task 6d1940da (flow 7f739efd): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s032.tar.gz resources {}
2021/07/08 16:56:54  ->  n100.r04.s032.Main.cp_out_file 7f739efd exec extern s3://niema-test/n100/r04/n100.r04.s032.tar.gz 35.7MiB
2021/07/08 16:56:54 scheduler task eab1f0b7 (flow 46c93b21): transferring output (try 0): successful, next state: unloading
2021/07/08 16:56:54 scheduler task eab1f0b7 (flow 46c93b21): unloading (try 0): started
2021/07/08 16:56:54 scheduler task eab1f0b7 (flow 46c93b21): unloading list<val<.=a238dd29 35.7MiB> 35.7MiB>
2021/07/08 16:56:54 scheduler task eab1f0b7 (flow 46c93b21): unloading val<.=ee425227 35.4MiB>
2021/07/08 16:56:54 scheduler task eab1f0b7 (flow 46c93b21): unloading val<.=c6e1147f 35.4MiB>
2021/07/08 16:56:54 scheduler task eab1f0b7 (flow 46c93b21): unloaded list<val<.=a238dd29 35.7MiB> 35.7MiB>
2021/07/08 16:56:54 scheduler task eab1f0b7 (flow 46c93b21): unloaded val<.=c6e1147f 35.4MiB>
2021/07/08 16:56:54 scheduler task eab1f0b7 (flow 46c93b21): unloaded val<.=ee425227 35.4MiB>
2021/07/08 16:56:54 scheduler task eab1f0b7 (flow 46c93b21): unloading (try 0): successful, next state: complete
2021/07/08 16:56:54  <-  n100.r04.s046.Main.out_file 46c93b21 ok     exec 4m55s 35.7MiB
2021/07/08 16:56:54 n100.r04.s046.Main.out_file 46c93b21 n100/r04/n100.r04.s046.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5d6a4ea05e99edcbcd340145fe98d6e9d63b313cdf042c40ca606e17beea5a8b
	sha256:46c93b21f95d897bc2699237a17d6f11a43f26aa5f7c41b952c99a2d2d7a4377
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/eab1f0b77848f33ef71b37648a283ede87ddeb4e6daf47f91590696344e35328
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s046_output"
	    wget -O "n100.r04.s046_output/n100.r04.s046.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s046_output/n100.r04.s046.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s046_output/n100.r04.s046.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s046_output/n100.r04.s046.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s046_output/n100.r04.s046.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s046_output/n100.r04.s046.reference.fas" "n100.r04.s046_output/n100.r04.s046.fq1.fastq" "n100.r04.s046_output/n100.r04.s046.fq2.fastq" | samtools view -bS - > "n100.r04.s046_output/n100.r04.s046.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s046_output/n100.r04.s046.untrimmed.sorted.bam" "n100.r04.s046_output/n100.r04.s046.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s046_output/n100.r04.s046.untrimmed.sorted.bam" -b "n100.r04.s046_output/n100.r04.s046.primers.bed" -p "n100.r04.s046_output/n100.r04.s046.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s046_output/n100.r04.s046.trimmed.sorted.bam" "n100.r04.s046_output/n100.r04.s046.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s046_output/n100.r04.s046.reference.fas" "n100.r04.s046_output/n100.r04.s046.trimmed.sorted.bam" > "n100.r04.s046_output/n100.r04.s046.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s046_output/n100.r04.s046.reference.fas" --call-indels "n100.r04.s046_output/n100.r04.s046.trimmed.sorted.bam" > "n100.r04.s046_output/n100.r04.s046.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s046_output/n100.r04.s046.trimmed.sorted.bam" > "n100.r04.s046_output/n100.r04.s046.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s046_output/n100.r04.s046.depth.txt" "n100.r04.s046_output/n100.r04.s046.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s046_output/n100.r04.s046.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s046_output/n100.r04.s046.reference.fas" | bcftools consensus -m "n100.r04.s046_output/n100.r04.s046.low_depth.tsv" tmp.vcf.gz > "n100.r04.s046_output/n100.r04.s046.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s046_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a238dd291a5470f515709dea617a9d4e934524082feb127b8022e957e100581f 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.9MiB max=126.1MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=627B max=2.1KiB
2021/07/08 16:56:54 scheduler task 198deb8c (flow 1d584051): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s046.tar.gz resources {}
2021/07/08 16:56:54  ->  n100.r04.s046.Main.cp_out_file 1d584051 exec extern s3://niema-test/n100/r04/n100.r04.s046.tar.gz 35.7MiB
2021/07/08 16:56:54 scheduler task c1bd20a2 (flow 949cd1cb): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d5e21dac91f69870ad77031b7ea851a211bc45fe58d31fa13de7e87dfb137c1f -> s3://niema-test/n100/r04/n100.r04.s095.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:56:54  <-  n100.r04.s095.Main.cp_out_file 949cd1cb ok   extern 0s 35.7MiB
2021/07/08 16:56:54 scheduler task 0c8baa7d (flow ff8a339b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:56:54 scheduler task 0c8baa7d (flow ff8a339b): promoting objects (try 0): started
2021/07/08 16:56:54 scheduler task 6d1940da (flow 7f739efd): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f760f2c6d059d1df191b1cae4f2c9abaae53aedece0c233929c5336a3d53e7ec -> s3://niema-test/n100/r04/n100.r04.s032.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:56:54  <-  n100.r04.s032.Main.cp_out_file 7f739efd ok   extern 0s 35.7MiB
2021/07/08 16:56:54 scheduler task 8044c66f (flow 6f63202d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:56:54 scheduler task 8044c66f (flow 6f63202d): promoting objects (try 0): started
2021/07/08 16:56:54 scheduler task 0c8baa7d (flow ff8a339b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:56:54 scheduler task 0c8baa7d (flow ff8a339b): retrieving diagnostic output (try 0): started
2021/07/08 16:56:54 scheduler task 8044c66f (flow 6f63202d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:56:54 scheduler task 8044c66f (flow 6f63202d): retrieving diagnostic output (try 0): started
2021/07/08 16:56:54 scheduler task 198deb8c (flow 1d584051): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a238dd291a5470f515709dea617a9d4e934524082feb127b8022e957e100581f -> s3://niema-test/n100/r04/n100.r04.s046.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:56:54  <-  n100.r04.s046.Main.cp_out_file 1d584051 ok   extern 0s 35.7MiB
2021/07/08 16:56:54 scheduler task 0c8baa7d (flow ff8a339b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:56:55 scheduler task 0c8baa7d (flow ff8a339b): retrieving result (try 0): started
2021/07/08 16:56:55 scheduler task 9fa868bc (flow 0bb0e047): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:56:55 scheduler task 8044c66f (flow 6f63202d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:56:55 scheduler task 9fa868bc (flow 0bb0e047): promoting objects (try 0): started
2021/07/08 16:56:55 scheduler task 8044c66f (flow 6f63202d): retrieving result (try 0): started
2021/07/08 16:56:55 scheduler task 0c8baa7d (flow ff8a339b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:56:55 scheduler task 0c8baa7d (flow ff8a339b): transferring output (try 0): started
2021/07/08 16:56:55 scheduler task 9fa868bc (flow 0bb0e047): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:56:55 scheduler task 8044c66f (flow 6f63202d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:56:55 scheduler task 9fa868bc (flow 0bb0e047): retrieving diagnostic output (try 0): started
2021/07/08 16:56:55 scheduler task 8044c66f (flow 6f63202d): transferring output (try 0): started
2021/07/08 16:56:55 scheduler task 04aa495d (flow 74a2c8b3): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:56:55 scheduler task 04aa495d (flow 74a2c8b3): promoting objects (try 0): started
2021/07/08 16:56:55 scheduler task 04aa495d (flow 74a2c8b3): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:56:55 scheduler task 9fa868bc (flow 0bb0e047): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:56:55 scheduler task 04aa495d (flow 74a2c8b3): retrieving diagnostic output (try 0): started
2021/07/08 16:56:55 scheduler task 9fa868bc (flow 0bb0e047): retrieving result (try 0): started
2021/07/08 16:56:55 scheduler task 04aa495d (flow 74a2c8b3): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:56:55 scheduler task 04aa495d (flow 74a2c8b3): retrieving result (try 0): started
2021/07/08 16:56:55 scheduler task 9fa868bc (flow 0bb0e047): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:56:55 scheduler task 9fa868bc (flow 0bb0e047): transferring output (try 0): started
2021/07/08 16:56:55 scheduler task 04aa495d (flow 74a2c8b3): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:56:55 scheduler task 04aa495d (flow 74a2c8b3): transferring output (try 0): started
2021/07/08 16:56:55 scheduler task 0c8baa7d (flow ff8a339b): transferring output (try 0): successful, next state: unloading
2021/07/08 16:56:55 scheduler task 0c8baa7d (flow ff8a339b): unloading (try 0): started
2021/07/08 16:56:55 scheduler task 0c8baa7d (flow ff8a339b): unloading list<val<.=275a2e80 35.7MiB> 35.7MiB>
2021/07/08 16:56:55 scheduler task 0c8baa7d (flow ff8a339b): unloading val<.=70ee912b 35.4MiB>
2021/07/08 16:56:55 scheduler task 0c8baa7d (flow ff8a339b): unloading val<.=10c0b7be 35.4MiB>
2021/07/08 16:56:55 scheduler task 0c8baa7d (flow ff8a339b): unloaded list<val<.=275a2e80 35.7MiB> 35.7MiB>
2021/07/08 16:56:55 scheduler task 0c8baa7d (flow ff8a339b): unloaded val<.=10c0b7be 35.4MiB>
2021/07/08 16:56:55 scheduler task 0c8baa7d (flow ff8a339b): unloaded val<.=70ee912b 35.4MiB>
2021/07/08 16:56:55 scheduler task 0c8baa7d (flow ff8a339b): unloading (try 0): successful, next state: complete
2021/07/08 16:56:55  <-  n100.r04.s020.Main.out_file ff8a339b ok     exec 4m56s 35.7MiB
2021/07/08 16:56:55 n100.r04.s020.Main.out_file ff8a339b n100/r04/n100.r04.s020.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c04d00c9355ff97874a3bcd4c3e77869acc1c45e4ac0b3ce458de0a2e9b6c463
	sha256:ff8a339b28e22402cd1d58759a6a64ecea47dd260231093b0fc601ba08fe8b51
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0c8baa7dd0becfaa169843ec82da4a11a323d7d35e086dcac75df8ccda5fcbe6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s020_output"
	    wget -O "n100.r04.s020_output/n100.r04.s020.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s020_output/n100.r04.s020.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s020_output/n100.r04.s020.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s020_output/n100.r04.s020.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s020_output/n100.r04.s020.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s020_output/n100.r04.s020.reference.fas" "n100.r04.s020_output/n100.r04.s020.fq1.fastq" "n100.r04.s020_output/n100.r04.s020.fq2.fastq" | samtools view -bS - > "n100.r04.s020_output/n100.r04.s020.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s020_output/n100.r04.s020.untrimmed.sorted.bam" "n100.r04.s020_output/n100.r04.s020.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s020_output/n100.r04.s020.untrimmed.sorted.bam" -b "n100.r04.s020_output/n100.r04.s020.primers.bed" -p "n100.r04.s020_output/n100.r04.s020.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s020_output/n100.r04.s020.trimmed.sorted.bam" "n100.r04.s020_output/n100.r04.s020.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s020_output/n100.r04.s020.reference.fas" "n100.r04.s020_output/n100.r04.s020.trimmed.sorted.bam" > "n100.r04.s020_output/n100.r04.s020.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s020_output/n100.r04.s020.reference.fas" --call-indels "n100.r04.s020_output/n100.r04.s020.trimmed.sorted.bam" > "n100.r04.s020_output/n100.r04.s020.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s020_output/n100.r04.s020.trimmed.sorted.bam" > "n100.r04.s020_output/n100.r04.s020.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s020_output/n100.r04.s020.depth.txt" "n100.r04.s020_output/n100.r04.s020.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s020_output/n100.r04.s020.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s020_output/n100.r04.s020.reference.fas" | bcftools consensus -m "n100.r04.s020_output/n100.r04.s020.low_depth.tsv" tmp.vcf.gz > "n100.r04.s020_output/n100.r04.s020.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s020_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:275a2e8062f066fe576a2879731f5acab10cdeab8f3ef3255579f10e9a8d6266 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.0MiB max=128.9MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 16:56:55 scheduler task 4e693012 (flow 5a5dd163): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s020.tar.gz resources {}
2021/07/08 16:56:55  ->  n100.r04.s020.Main.cp_out_file 5a5dd163 exec extern s3://niema-test/n100/r04/n100.r04.s020.tar.gz 35.7MiB
2021/07/08 16:56:55 scheduler task 8044c66f (flow 6f63202d): transferring output (try 0): successful, next state: unloading
2021/07/08 16:56:55 scheduler task 8044c66f (flow 6f63202d): unloading (try 0): started
2021/07/08 16:56:55 scheduler task 8044c66f (flow 6f63202d): unloading list<val<.=736f9698 35.7MiB> 35.7MiB>
2021/07/08 16:56:55 scheduler task 8044c66f (flow 6f63202d): unloading val<.=7bf140cf 35.4MiB>
2021/07/08 16:56:55 scheduler task 8044c66f (flow 6f63202d): unloading val<.=edb67e01 35.4MiB>
2021/07/08 16:56:55 scheduler task 8044c66f (flow 6f63202d): unloaded val<.=7bf140cf 35.4MiB>
2021/07/08 16:56:55 scheduler task 8044c66f (flow 6f63202d): unloaded list<val<.=736f9698 35.7MiB> 35.7MiB>
2021/07/08 16:56:55 scheduler task 8044c66f (flow 6f63202d): unloaded val<.=edb67e01 35.4MiB>
2021/07/08 16:56:55 scheduler task 8044c66f (flow 6f63202d): unloading (try 0): successful, next state: complete
2021/07/08 16:56:55  <-  n100.r04.s089.Main.out_file 6f63202d ok     exec 4m56s 35.7MiB
2021/07/08 16:56:55 n100.r04.s089.Main.out_file 6f63202d n100/r04/n100.r04.s089.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:59f9d7596a9d59a1553abcafa5249d6cdf85848d37086c8ed81b3110009f069b
	sha256:6f63202d3bfafad468f30e26f9ee94bb988aece0a1ef81a751b923620f1b7637
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8044c66fd28c84eeb7fa4026c694f732137b1cf513747e115094a844f2c95ec1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s089_output"
	    wget -O "n100.r04.s089_output/n100.r04.s089.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s089_output/n100.r04.s089.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s089_output/n100.r04.s089.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s089_output/n100.r04.s089.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s089_output/n100.r04.s089.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s089_output/n100.r04.s089.reference.fas" "n100.r04.s089_output/n100.r04.s089.fq1.fastq" "n100.r04.s089_output/n100.r04.s089.fq2.fastq" | samtools view -bS - > "n100.r04.s089_output/n100.r04.s089.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s089_output/n100.r04.s089.untrimmed.sorted.bam" "n100.r04.s089_output/n100.r04.s089.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s089_output/n100.r04.s089.untrimmed.sorted.bam" -b "n100.r04.s089_output/n100.r04.s089.primers.bed" -p "n100.r04.s089_output/n100.r04.s089.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s089_output/n100.r04.s089.trimmed.sorted.bam" "n100.r04.s089_output/n100.r04.s089.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s089_output/n100.r04.s089.reference.fas" "n100.r04.s089_output/n100.r04.s089.trimmed.sorted.bam" > "n100.r04.s089_output/n100.r04.s089.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s089_output/n100.r04.s089.reference.fas" --call-indels "n100.r04.s089_output/n100.r04.s089.trimmed.sorted.bam" > "n100.r04.s089_output/n100.r04.s089.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s089_output/n100.r04.s089.trimmed.sorted.bam" > "n100.r04.s089_output/n100.r04.s089.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s089_output/n100.r04.s089.depth.txt" "n100.r04.s089_output/n100.r04.s089.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s089_output/n100.r04.s089.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s089_output/n100.r04.s089.reference.fas" | bcftools consensus -m "n100.r04.s089_output/n100.r04.s089.low_depth.tsv" tmp.vcf.gz > "n100.r04.s089_output/n100.r04.s089.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s089_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:736f96988995605a2c9020d1ba0cd09ef2a6b5446dc2b124456475369bff4a0b 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.3MiB max=126.1MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=624B max=2.0KiB
2021/07/08 16:56:55 scheduler task 9660c402 (flow 168fa35c): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s089.tar.gz resources {}
2021/07/08 16:56:55  ->  n100.r04.s089.Main.cp_out_file 168fa35c exec extern s3://niema-test/n100/r04/n100.r04.s089.tar.gz 35.7MiB
2021/07/08 16:56:55 scheduler task 9fa868bc (flow 0bb0e047): transferring output (try 0): successful, next state: unloading
2021/07/08 16:56:56 scheduler task 9fa868bc (flow 0bb0e047): unloading (try 0): started
2021/07/08 16:56:56 scheduler task 9fa868bc (flow 0bb0e047): unloading list<val<.=970918be 35.7MiB> 35.7MiB>
2021/07/08 16:56:56 scheduler task 9fa868bc (flow 0bb0e047): unloading val<.=43e08090 35.4MiB>
2021/07/08 16:56:56 scheduler task 9fa868bc (flow 0bb0e047): unloading val<.=149907c9 35.4MiB>
2021/07/08 16:56:56 scheduler task 04aa495d (flow 74a2c8b3): transferring output (try 0): successful, next state: unloading
2021/07/08 16:56:56 scheduler task 04aa495d (flow 74a2c8b3): unloading (try 0): started
2021/07/08 16:56:56 scheduler task 04aa495d (flow 74a2c8b3): unloading list<val<.=a2ff31cf 35.7MiB> 35.7MiB>
2021/07/08 16:56:56 scheduler task 04aa495d (flow 74a2c8b3): unloading val<.=5bd7b30a 35.4MiB>
2021/07/08 16:56:56 scheduler task 04aa495d (flow 74a2c8b3): unloading val<.=43847d09 35.4MiB>
2021/07/08 16:56:56 scheduler task 9fa868bc (flow 0bb0e047): unloaded val<.=43e08090 35.4MiB>
2021/07/08 16:56:56 scheduler task 9fa868bc (flow 0bb0e047): unloaded list<val<.=970918be 35.7MiB> 35.7MiB>
2021/07/08 16:56:56 scheduler task 9fa868bc (flow 0bb0e047): unloaded val<.=149907c9 35.4MiB>
2021/07/08 16:56:56 scheduler task 9fa868bc (flow 0bb0e047): unloading (try 0): successful, next state: complete
2021/07/08 16:56:56  <-  n100.r04.s037.Main.out_file 0bb0e047 ok     exec 4m56s 35.7MiB
2021/07/08 16:56:56 n100.r04.s037.Main.out_file 0bb0e047 n100/r04/n100.r04.s037.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:23c7e72306aaaf81f8d31e5ca598b6d7d9b362a59c06bf7956fd7dd292e20864
	sha256:0bb0e0478edfc9167d568df7fcc941a41072ee0dc6ef02c6ca14c29242ee993c
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9fa868bc5bc949a7641e16f08b9220b4a1c68b8d2d5c5e114760f6d93c982330
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s037_output"
	    wget -O "n100.r04.s037_output/n100.r04.s037.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s037_output/n100.r04.s037.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s037_output/n100.r04.s037.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s037_output/n100.r04.s037.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s037_output/n100.r04.s037.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s037_output/n100.r04.s037.reference.fas" "n100.r04.s037_output/n100.r04.s037.fq1.fastq" "n100.r04.s037_output/n100.r04.s037.fq2.fastq" | samtools view -bS - > "n100.r04.s037_output/n100.r04.s037.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s037_output/n100.r04.s037.untrimmed.sorted.bam" "n100.r04.s037_output/n100.r04.s037.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s037_output/n100.r04.s037.untrimmed.sorted.bam" -b "n100.r04.s037_output/n100.r04.s037.primers.bed" -p "n100.r04.s037_output/n100.r04.s037.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s037_output/n100.r04.s037.trimmed.sorted.bam" "n100.r04.s037_output/n100.r04.s037.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s037_output/n100.r04.s037.reference.fas" "n100.r04.s037_output/n100.r04.s037.trimmed.sorted.bam" > "n100.r04.s037_output/n100.r04.s037.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s037_output/n100.r04.s037.reference.fas" --call-indels "n100.r04.s037_output/n100.r04.s037.trimmed.sorted.bam" > "n100.r04.s037_output/n100.r04.s037.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s037_output/n100.r04.s037.trimmed.sorted.bam" > "n100.r04.s037_output/n100.r04.s037.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s037_output/n100.r04.s037.depth.txt" "n100.r04.s037_output/n100.r04.s037.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s037_output/n100.r04.s037.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s037_output/n100.r04.s037.reference.fas" | bcftools consensus -m "n100.r04.s037_output/n100.r04.s037.low_depth.tsv" tmp.vcf.gz > "n100.r04.s037_output/n100.r04.s037.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s037_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:970918be7ff7d6c1804c218e5de0645ea36b8e4dae183ff1661b76cf97da41a6 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.9MiB max=126.7MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=627B max=2.1KiB
2021/07/08 16:56:56 scheduler task 65f78ea6 (flow dd3cb703): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s037.tar.gz resources {}
2021/07/08 16:56:56  ->  n100.r04.s037.Main.cp_out_file dd3cb703 exec extern s3://niema-test/n100/r04/n100.r04.s037.tar.gz 35.7MiB
2021/07/08 16:56:56 scheduler task 04aa495d (flow 74a2c8b3): unloaded list<val<.=a2ff31cf 35.7MiB> 35.7MiB>
2021/07/08 16:56:56 scheduler task 04aa495d (flow 74a2c8b3): unloaded val<.=5bd7b30a 35.4MiB>
2021/07/08 16:56:56 scheduler task 04aa495d (flow 74a2c8b3): unloaded val<.=43847d09 35.4MiB>
2021/07/08 16:56:56 scheduler task 04aa495d (flow 74a2c8b3): unloading (try 0): successful, next state: complete
2021/07/08 16:56:56  <-  n100.r04.s030.Main.out_file 74a2c8b3 ok     exec 4m56s 35.7MiB
2021/07/08 16:56:56 n100.r04.s030.Main.out_file 74a2c8b3 n100/r04/n100.r04.s030.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5ca12c6e777191e08a2a8358d72e406650461a9e2012312ab7a97e93ff3425f5
	sha256:74a2c8b381e52d26d0fe5ab4e21994825b4da0c2953c05f5c0808615bce4c8ca
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/04aa495d30ca640d084e96fec7550a4546f4eeb22d173039e47bf797281e261c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s030_output"
	    wget -O "n100.r04.s030_output/n100.r04.s030.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s030_output/n100.r04.s030.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s030_output/n100.r04.s030.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s030_output/n100.r04.s030.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s030_output/n100.r04.s030.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s030_output/n100.r04.s030.reference.fas" "n100.r04.s030_output/n100.r04.s030.fq1.fastq" "n100.r04.s030_output/n100.r04.s030.fq2.fastq" | samtools view -bS - > "n100.r04.s030_output/n100.r04.s030.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s030_output/n100.r04.s030.untrimmed.sorted.bam" "n100.r04.s030_output/n100.r04.s030.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s030_output/n100.r04.s030.untrimmed.sorted.bam" -b "n100.r04.s030_output/n100.r04.s030.primers.bed" -p "n100.r04.s030_output/n100.r04.s030.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s030_output/n100.r04.s030.trimmed.sorted.bam" "n100.r04.s030_output/n100.r04.s030.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s030_output/n100.r04.s030.reference.fas" "n100.r04.s030_output/n100.r04.s030.trimmed.sorted.bam" > "n100.r04.s030_output/n100.r04.s030.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s030_output/n100.r04.s030.reference.fas" --call-indels "n100.r04.s030_output/n100.r04.s030.trimmed.sorted.bam" > "n100.r04.s030_output/n100.r04.s030.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s030_output/n100.r04.s030.trimmed.sorted.bam" > "n100.r04.s030_output/n100.r04.s030.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s030_output/n100.r04.s030.depth.txt" "n100.r04.s030_output/n100.r04.s030.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s030_output/n100.r04.s030.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s030_output/n100.r04.s030.reference.fas" | bcftools consensus -m "n100.r04.s030_output/n100.r04.s030.low_depth.tsv" tmp.vcf.gz > "n100.r04.s030_output/n100.r04.s030.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s030_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a2ff31cfddec36ac296b0ecdecee896310a24306548d2fcd46ab2f1dd09e397a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.5MiB max=124.1MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 16:56:56 scheduler task 1147764e (flow c81ceb47): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s030.tar.gz resources {}
2021/07/08 16:56:56  ->  n100.r04.s030.Main.cp_out_file c81ceb47 exec extern s3://niema-test/n100/r04/n100.r04.s030.tar.gz 35.7MiB
2021/07/08 16:56:56 scheduler task c8f7947e (flow a052354a): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:56:56 scheduler task c8f7947e (flow a052354a): promoting objects (try 0): started
2021/07/08 16:56:56 scheduler task c8f7947e (flow a052354a): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:56:56 scheduler task c8f7947e (flow a052354a): retrieving diagnostic output (try 0): started
2021/07/08 16:56:56 scheduler task 4e693012 (flow 5a5dd163): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:275a2e8062f066fe576a2879731f5acab10cdeab8f3ef3255579f10e9a8d6266 -> s3://niema-test/n100/r04/n100.r04.s020.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:56:56  <-  n100.r04.s020.Main.cp_out_file 5a5dd163 ok   extern 0s 35.7MiB
2021/07/08 16:56:56 scheduler task 9660c402 (flow 168fa35c): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:736f96988995605a2c9020d1ba0cd09ef2a6b5446dc2b124456475369bff4a0b -> s3://niema-test/n100/r04/n100.r04.s089.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:56:56  <-  n100.r04.s089.Main.cp_out_file 168fa35c ok   extern 0s 35.7MiB
2021/07/08 16:56:56 scheduler task c8f7947e (flow a052354a): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:56:56 scheduler task c8f7947e (flow a052354a): retrieving result (try 0): started
2021/07/08 16:56:56 scheduler task 15255f8b (flow 47dc9646): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:56:56 scheduler task c8f7947e (flow a052354a): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:56:56 scheduler task 15255f8b (flow 47dc9646): promoting objects (try 0): started
2021/07/08 16:56:56 scheduler task c8f7947e (flow a052354a): transferring output (try 0): started
2021/07/08 16:56:56 scheduler task 15255f8b (flow 47dc9646): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:56:56 scheduler task 15255f8b (flow 47dc9646): retrieving diagnostic output (try 0): started
2021/07/08 16:56:56 scheduler task 15255f8b (flow 47dc9646): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:56:56 scheduler task 15255f8b (flow 47dc9646): retrieving result (try 0): started
2021/07/08 16:56:56 scheduler task 15255f8b (flow 47dc9646): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:56:56 scheduler task 15255f8b (flow 47dc9646): transferring output (try 0): started
2021/07/08 16:56:56 scheduler task 65f78ea6 (flow dd3cb703): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:970918be7ff7d6c1804c218e5de0645ea36b8e4dae183ff1661b76cf97da41a6 -> s3://niema-test/n100/r04/n100.r04.s037.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:56:56  <-  n100.r04.s037.Main.cp_out_file dd3cb703 ok   extern 0s 35.7MiB
2021/07/08 16:56:57 scheduler task 1147764e (flow c81ceb47): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a2ff31cfddec36ac296b0ecdecee896310a24306548d2fcd46ab2f1dd09e397a -> s3://niema-test/n100/r04/n100.r04.s030.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:56:57  <-  n100.r04.s030.Main.cp_out_file c81ceb47 ok   extern 0s 35.7MiB
2021/07/08 16:56:57 scheduler task c8f7947e (flow a052354a): transferring output (try 0): successful, next state: unloading
2021/07/08 16:56:57 scheduler task c8f7947e (flow a052354a): unloading (try 0): started
2021/07/08 16:56:57 scheduler task c8f7947e (flow a052354a): unloading list<val<.=abe9b1ae 35.7MiB> 35.7MiB>
2021/07/08 16:56:57 scheduler task c8f7947e (flow a052354a): unloading val<.=85e604d9 35.4MiB>
2021/07/08 16:56:57 scheduler task c8f7947e (flow a052354a): unloading val<.=73906850 35.4MiB>
2021/07/08 16:56:57 scheduler task c8f7947e (flow a052354a): unloaded val<.=73906850 35.4MiB>
2021/07/08 16:56:57 scheduler task c8f7947e (flow a052354a): unloaded val<.=85e604d9 35.4MiB>
2021/07/08 16:56:57 scheduler task c8f7947e (flow a052354a): unloaded list<val<.=abe9b1ae 35.7MiB> 35.7MiB>
2021/07/08 16:56:57 scheduler task c8f7947e (flow a052354a): unloading (try 0): successful, next state: complete
2021/07/08 16:56:57  <-  n100.r04.s040.Main.out_file a052354a ok     exec 4m57s 35.7MiB
2021/07/08 16:56:57 n100.r04.s040.Main.out_file a052354a n100/r04/n100.r04.s040.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b84c3ec5d853573074952bebe279e7bb9b44f14079f1784fe71248371967f890
	sha256:a052354a01cddd4ea679f32326f7f68f3fd356d9aa40319e420474e5d8fa21fd
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c8f7947e8756adf87afccdb8b0c479e37e00ce47dc54ed0add42a1068b8ea05a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s040_output"
	    wget -O "n100.r04.s040_output/n100.r04.s040.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s040_output/n100.r04.s040.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s040_output/n100.r04.s040.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s040_output/n100.r04.s040.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s040_output/n100.r04.s040.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s040_output/n100.r04.s040.reference.fas" "n100.r04.s040_output/n100.r04.s040.fq1.fastq" "n100.r04.s040_output/n100.r04.s040.fq2.fastq" | samtools view -bS - > "n100.r04.s040_output/n100.r04.s040.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s040_output/n100.r04.s040.untrimmed.sorted.bam" "n100.r04.s040_output/n100.r04.s040.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s040_output/n100.r04.s040.untrimmed.sorted.bam" -b "n100.r04.s040_output/n100.r04.s040.primers.bed" -p "n100.r04.s040_output/n100.r04.s040.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s040_output/n100.r04.s040.trimmed.sorted.bam" "n100.r04.s040_output/n100.r04.s040.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s040_output/n100.r04.s040.reference.fas" "n100.r04.s040_output/n100.r04.s040.trimmed.sorted.bam" > "n100.r04.s040_output/n100.r04.s040.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s040_output/n100.r04.s040.reference.fas" --call-indels "n100.r04.s040_output/n100.r04.s040.trimmed.sorted.bam" > "n100.r04.s040_output/n100.r04.s040.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s040_output/n100.r04.s040.trimmed.sorted.bam" > "n100.r04.s040_output/n100.r04.s040.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s040_output/n100.r04.s040.depth.txt" "n100.r04.s040_output/n100.r04.s040.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s040_output/n100.r04.s040.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s040_output/n100.r04.s040.reference.fas" | bcftools consensus -m "n100.r04.s040_output/n100.r04.s040.low_depth.tsv" tmp.vcf.gz > "n100.r04.s040_output/n100.r04.s040.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s040_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:abe9b1ae0a113d29de2f0492b3efe82991e63b52074353d492bedca4ff026e6a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.8MiB max=123.3MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=632B max=2.1KiB
2021/07/08 16:56:57 scheduler task fdb57154 (flow 724561ab): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s040.tar.gz resources {}
2021/07/08 16:56:57  ->  n100.r04.s040.Main.cp_out_file 724561ab exec extern s3://niema-test/n100/r04/n100.r04.s040.tar.gz 35.7MiB
2021/07/08 16:56:57 scheduler task 15255f8b (flow 47dc9646): transferring output (try 0): successful, next state: unloading
2021/07/08 16:56:57 scheduler task 15255f8b (flow 47dc9646): unloading (try 0): started
2021/07/08 16:56:57 scheduler task 15255f8b (flow 47dc9646): unloading list<val<.=c4391b7a 35.8MiB> 35.8MiB>
2021/07/08 16:56:57 scheduler task 15255f8b (flow 47dc9646): unloading val<.=fe109a23 35.4MiB>
2021/07/08 16:56:57 scheduler task 15255f8b (flow 47dc9646): unloading val<.=a9e50ce4 35.4MiB>
2021/07/08 16:56:57 scheduler task 15255f8b (flow 47dc9646): unloaded list<val<.=c4391b7a 35.8MiB> 35.8MiB>
2021/07/08 16:56:57 scheduler task 15255f8b (flow 47dc9646): unloaded val<.=fe109a23 35.4MiB>
2021/07/08 16:56:57 scheduler task 15255f8b (flow 47dc9646): unloaded val<.=a9e50ce4 35.4MiB>
2021/07/08 16:56:57 scheduler task 15255f8b (flow 47dc9646): unloading (try 0): successful, next state: complete
2021/07/08 16:56:57  <-  n100.r04.s029.Main.out_file 47dc9646 ok     exec 4m58s 35.8MiB
2021/07/08 16:56:57 n100.r04.s029.Main.out_file 47dc9646 n100/r04/n100.r04.s029.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7540ea1bfde9b72db519e1349a9277bd700a48e66eadc93d30eb6644565a3c4f
	sha256:47dc9646d266ddb8bd767df50f17b550115b85f566be31347d0585e458395f72
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/15255f8be0e2a964d81c44f0b0182a7ade01c984abf8f48e8ef25455728e91f6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s029_output"
	    wget -O "n100.r04.s029_output/n100.r04.s029.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s029_output/n100.r04.s029.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s029_output/n100.r04.s029.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s029_output/n100.r04.s029.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s029_output/n100.r04.s029.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s029_output/n100.r04.s029.reference.fas" "n100.r04.s029_output/n100.r04.s029.fq1.fastq" "n100.r04.s029_output/n100.r04.s029.fq2.fastq" | samtools view -bS - > "n100.r04.s029_output/n100.r04.s029.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s029_output/n100.r04.s029.untrimmed.sorted.bam" "n100.r04.s029_output/n100.r04.s029.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s029_output/n100.r04.s029.untrimmed.sorted.bam" -b "n100.r04.s029_output/n100.r04.s029.primers.bed" -p "n100.r04.s029_output/n100.r04.s029.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s029_output/n100.r04.s029.trimmed.sorted.bam" "n100.r04.s029_output/n100.r04.s029.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s029_output/n100.r04.s029.reference.fas" "n100.r04.s029_output/n100.r04.s029.trimmed.sorted.bam" > "n100.r04.s029_output/n100.r04.s029.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s029_output/n100.r04.s029.reference.fas" --call-indels "n100.r04.s029_output/n100.r04.s029.trimmed.sorted.bam" > "n100.r04.s029_output/n100.r04.s029.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s029_output/n100.r04.s029.trimmed.sorted.bam" > "n100.r04.s029_output/n100.r04.s029.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s029_output/n100.r04.s029.depth.txt" "n100.r04.s029_output/n100.r04.s029.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s029_output/n100.r04.s029.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s029_output/n100.r04.s029.reference.fas" | bcftools consensus -m "n100.r04.s029_output/n100.r04.s029.low_depth.tsv" tmp.vcf.gz > "n100.r04.s029_output/n100.r04.s029.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s029_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:c4391b7a87a64aa5087da445a29bdff219700dbd056b7eef6eb0ff7ab47a969f 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.7MiB max=128.3MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 16:56:57 scheduler task c0001bfa (flow 74c48ed1): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s029.tar.gz resources {}
2021/07/08 16:56:57  ->  n100.r04.s029.Main.cp_out_file 74c48ed1 exec extern s3://niema-test/n100/r04/n100.r04.s029.tar.gz 35.8MiB
2021/07/08 16:56:57 scheduler task fdb57154 (flow 724561ab): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:abe9b1ae0a113d29de2f0492b3efe82991e63b52074353d492bedca4ff026e6a -> s3://niema-test/n100/r04/n100.r04.s040.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:56:57  <-  n100.r04.s040.Main.cp_out_file 724561ab ok   extern 0s 35.7MiB
2021/07/08 16:56:57 scheduler task 41aa6205 (flow 2f22143a): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:56:57 scheduler task 41aa6205 (flow 2f22143a): promoting objects (try 0): started
2021/07/08 16:56:57 scheduler task 41aa6205 (flow 2f22143a): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:56:57 scheduler task 41aa6205 (flow 2f22143a): retrieving diagnostic output (try 0): started
2021/07/08 16:56:58 scheduler task c0001bfa (flow 74c48ed1): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:c4391b7a87a64aa5087da445a29bdff219700dbd056b7eef6eb0ff7ab47a969f -> s3://niema-test/n100/r04/n100.r04.s029.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:56:58  <-  n100.r04.s029.Main.cp_out_file 74c48ed1 ok   extern 0s 35.8MiB
2021/07/08 16:56:58 scheduler task 41aa6205 (flow 2f22143a): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:56:58 scheduler task 41aa6205 (flow 2f22143a): retrieving result (try 0): started
2021/07/08 16:56:58 scheduler task 41aa6205 (flow 2f22143a): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:56:58 scheduler task 41aa6205 (flow 2f22143a): transferring output (try 0): started
2021/07/08 16:56:58 scheduler task a9de6e84 (flow 38bba01c): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:56:58 scheduler task a9de6e84 (flow 38bba01c): promoting objects (try 0): started
2021/07/08 16:56:58 scheduler task 41aa6205 (flow 2f22143a): transferring output (try 0): successful, next state: unloading
2021/07/08 16:56:58 scheduler task 41aa6205 (flow 2f22143a): unloading (try 0): started
2021/07/08 16:56:58 scheduler task 41aa6205 (flow 2f22143a): unloading list<val<.=6ea3482b 35.7MiB> 35.7MiB>
2021/07/08 16:56:58 scheduler task 41aa6205 (flow 2f22143a): unloading val<.=f68b8294 35.4MiB>
2021/07/08 16:56:58 scheduler task 41aa6205 (flow 2f22143a): unloading val<.=9b80a07f 35.4MiB>
2021/07/08 16:56:58 scheduler task a9de6e84 (flow 38bba01c): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:56:58 scheduler task a9de6e84 (flow 38bba01c): retrieving diagnostic output (try 0): started
2021/07/08 16:56:58 scheduler task 41aa6205 (flow 2f22143a): unloaded list<val<.=6ea3482b 35.7MiB> 35.7MiB>
2021/07/08 16:56:58 scheduler task 41aa6205 (flow 2f22143a): unloaded val<.=f68b8294 35.4MiB>
2021/07/08 16:56:58 scheduler task 41aa6205 (flow 2f22143a): unloaded val<.=9b80a07f 35.4MiB>
2021/07/08 16:56:58 scheduler task 41aa6205 (flow 2f22143a): unloading (try 0): successful, next state: complete
2021/07/08 16:56:58  <-  n100.r04.s099.Main.out_file 2f22143a ok     exec 4m59s 35.7MiB
2021/07/08 16:56:58 n100.r04.s099.Main.out_file 2f22143a n100/r04/n100.r04.s099.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:db1b14d9671c5b77500f8a8840420fe5103d5e110baac7a72eb4f38b9233040e
	sha256:2f22143ae5120f697487260f09d084031c13a5435dc56ccae4adb5562e93a0f2
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/41aa6205fb45c4e836853eb75406d144a68dff3a019b5e4162fbfacd222f5b8a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s099_output"
	    wget -O "n100.r04.s099_output/n100.r04.s099.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s099_output/n100.r04.s099.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s099_output/n100.r04.s099.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s099_output/n100.r04.s099.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s099_output/n100.r04.s099.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s099_output/n100.r04.s099.reference.fas" "n100.r04.s099_output/n100.r04.s099.fq1.fastq" "n100.r04.s099_output/n100.r04.s099.fq2.fastq" | samtools view -bS - > "n100.r04.s099_output/n100.r04.s099.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s099_output/n100.r04.s099.untrimmed.sorted.bam" "n100.r04.s099_output/n100.r04.s099.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s099_output/n100.r04.s099.untrimmed.sorted.bam" -b "n100.r04.s099_output/n100.r04.s099.primers.bed" -p "n100.r04.s099_output/n100.r04.s099.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s099_output/n100.r04.s099.trimmed.sorted.bam" "n100.r04.s099_output/n100.r04.s099.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s099_output/n100.r04.s099.reference.fas" "n100.r04.s099_output/n100.r04.s099.trimmed.sorted.bam" > "n100.r04.s099_output/n100.r04.s099.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s099_output/n100.r04.s099.reference.fas" --call-indels "n100.r04.s099_output/n100.r04.s099.trimmed.sorted.bam" > "n100.r04.s099_output/n100.r04.s099.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s099_output/n100.r04.s099.trimmed.sorted.bam" > "n100.r04.s099_output/n100.r04.s099.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s099_output/n100.r04.s099.depth.txt" "n100.r04.s099_output/n100.r04.s099.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s099_output/n100.r04.s099.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s099_output/n100.r04.s099.reference.fas" | bcftools consensus -m "n100.r04.s099_output/n100.r04.s099.low_depth.tsv" tmp.vcf.gz > "n100.r04.s099_output/n100.r04.s099.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s099_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:6ea3482b3f1308ee8622dea4922685f305a131386563bb088364324ecc861166 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.0MiB max=127.0MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 16:56:58 scheduler task 21b28a12 (flow 4acb0cf5): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s099.tar.gz resources {}
2021/07/08 16:56:58  ->  n100.r04.s099.Main.cp_out_file 4acb0cf5 exec extern s3://niema-test/n100/r04/n100.r04.s099.tar.gz 35.7MiB
2021/07/08 16:56:58 scheduler task a9de6e84 (flow 38bba01c): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:56:58 scheduler task a9de6e84 (flow 38bba01c): retrieving result (try 0): started
2021/07/08 16:56:58 scheduler task 7ed73c0a (flow 610b915e): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:56:58 scheduler task 7ed73c0a (flow 610b915e): promoting objects (try 0): started
2021/07/08 16:56:58 scheduler task a9de6e84 (flow 38bba01c): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:56:58 scheduler task a9de6e84 (flow 38bba01c): transferring output (try 0): started
2021/07/08 16:56:58 scheduler task 7ed73c0a (flow 610b915e): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:56:59 scheduler task 7ed73c0a (flow 610b915e): retrieving diagnostic output (try 0): started
2021/07/08 16:56:59 scheduler task 7ed73c0a (flow 610b915e): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:56:59 scheduler task 7ed73c0a (flow 610b915e): retrieving result (try 0): started
2021/07/08 16:56:59 scheduler task 7ed73c0a (flow 610b915e): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:56:59 scheduler task 7ed73c0a (flow 610b915e): transferring output (try 0): started
2021/07/08 16:56:59 scheduler task a9de6e84 (flow 38bba01c): transferring output (try 0): successful, next state: unloading
2021/07/08 16:56:59 scheduler task a9de6e84 (flow 38bba01c): unloading (try 0): started
2021/07/08 16:56:59 scheduler task a9de6e84 (flow 38bba01c): unloading list<val<.=449f0d15 35.7MiB> 35.7MiB>
2021/07/08 16:56:59 scheduler task a9de6e84 (flow 38bba01c): unloading val<.=8175d17a 35.4MiB>
2021/07/08 16:56:59 scheduler task a9de6e84 (flow 38bba01c): unloading val<.=e1f1e800 35.4MiB>
2021/07/08 16:56:59 scheduler task a9de6e84 (flow 38bba01c): unloaded list<val<.=449f0d15 35.7MiB> 35.7MiB>
2021/07/08 16:56:59 scheduler task a9de6e84 (flow 38bba01c): unloaded val<.=8175d17a 35.4MiB>
2021/07/08 16:56:59 scheduler task a9de6e84 (flow 38bba01c): unloaded val<.=e1f1e800 35.4MiB>
2021/07/08 16:56:59 scheduler task a9de6e84 (flow 38bba01c): unloading (try 0): successful, next state: complete
2021/07/08 16:56:59  <-  n100.r04.s033.Main.out_file 38bba01c ok     exec 5m0s 35.7MiB
2021/07/08 16:56:59 n100.r04.s033.Main.out_file 38bba01c n100/r04/n100.r04.s033.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9cbd41d5892a0a4f83b39c7941cf9575925b6edd13ecde7be43edca3203831b5
	sha256:38bba01c33bdedaa63a01b1e3fcf8cd00d5a364d10bd98de32432bc8c37e18c0
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a9de6e84278a6b9cb2014991199b4ff782fd03e4086a6d51d62eae0702e9e5e8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s033_output"
	    wget -O "n100.r04.s033_output/n100.r04.s033.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s033_output/n100.r04.s033.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s033_output/n100.r04.s033.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s033_output/n100.r04.s033.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s033_output/n100.r04.s033.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s033_output/n100.r04.s033.reference.fas" "n100.r04.s033_output/n100.r04.s033.fq1.fastq" "n100.r04.s033_output/n100.r04.s033.fq2.fastq" | samtools view -bS - > "n100.r04.s033_output/n100.r04.s033.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s033_output/n100.r04.s033.untrimmed.sorted.bam" "n100.r04.s033_output/n100.r04.s033.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s033_output/n100.r04.s033.untrimmed.sorted.bam" -b "n100.r04.s033_output/n100.r04.s033.primers.bed" -p "n100.r04.s033_output/n100.r04.s033.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s033_output/n100.r04.s033.trimmed.sorted.bam" "n100.r04.s033_output/n100.r04.s033.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s033_output/n100.r04.s033.reference.fas" "n100.r04.s033_output/n100.r04.s033.trimmed.sorted.bam" > "n100.r04.s033_output/n100.r04.s033.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s033_output/n100.r04.s033.reference.fas" --call-indels "n100.r04.s033_output/n100.r04.s033.trimmed.sorted.bam" > "n100.r04.s033_output/n100.r04.s033.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s033_output/n100.r04.s033.trimmed.sorted.bam" > "n100.r04.s033_output/n100.r04.s033.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s033_output/n100.r04.s033.depth.txt" "n100.r04.s033_output/n100.r04.s033.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s033_output/n100.r04.s033.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s033_output/n100.r04.s033.reference.fas" | bcftools consensus -m "n100.r04.s033_output/n100.r04.s033.low_depth.tsv" tmp.vcf.gz > "n100.r04.s033_output/n100.r04.s033.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s033_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:449f0d15715cf5058c28b1454cf098211289a5202b3d167cb5cabd14b3c96c5c 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.6MiB max=126.8MiB
	    disk mean=10.6MiB max=35.7MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 16:56:59 scheduler task 81deb3da (flow f90209e8): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s033.tar.gz resources {}
2021/07/08 16:56:59  ->  n100.r04.s033.Main.cp_out_file f90209e8 exec extern s3://niema-test/n100/r04/n100.r04.s033.tar.gz 35.7MiB
2021/07/08 16:56:59 scheduler task 21b28a12 (flow 4acb0cf5): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:6ea3482b3f1308ee8622dea4922685f305a131386563bb088364324ecc861166 -> s3://niema-test/n100/r04/n100.r04.s099.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:56:59  <-  n100.r04.s099.Main.cp_out_file 4acb0cf5 ok   extern 0s 35.7MiB
2021/07/08 16:56:59 scheduler task 7ed73c0a (flow 610b915e): transferring output (try 0): successful, next state: unloading
2021/07/08 16:56:59 scheduler task 7ed73c0a (flow 610b915e): unloading (try 0): started
2021/07/08 16:56:59 scheduler task 7ed73c0a (flow 610b915e): unloading list<val<.=7f758687 35.8MiB> 35.8MiB>
2021/07/08 16:56:59 scheduler task 7ed73c0a (flow 610b915e): unloading val<.=d42ae2ba 35.4MiB>
2021/07/08 16:56:59 scheduler task 7ed73c0a (flow 610b915e): unloading val<.=d876c87b 35.4MiB>
2021/07/08 16:56:59 scheduler task 7ed73c0a (flow 610b915e): unloaded val<.=d42ae2ba 35.4MiB>
2021/07/08 16:56:59 scheduler task 7ed73c0a (flow 610b915e): unloaded list<val<.=7f758687 35.8MiB> 35.8MiB>
2021/07/08 16:56:59 scheduler task 7ed73c0a (flow 610b915e): unloaded val<.=d876c87b 35.4MiB>
2021/07/08 16:56:59 scheduler task 7ed73c0a (flow 610b915e): unloading (try 0): successful, next state: complete
2021/07/08 16:56:59  <-  n100.r04.s077.Main.out_file 610b915e ok     exec 5m0s 35.8MiB
2021/07/08 16:56:59 n100.r04.s077.Main.out_file 610b915e n100/r04/n100.r04.s077.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1a0ce68fa92dbe72bfddcd018b9932d73286260b42070d1a351f8c7d831538d2
	sha256:610b915eb3f835c58029bc21c132ed6b3b0af1c79583f70c4883c8df980a3c64
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7ed73c0a5595336e26a637376e19e70ae8dbc174cf7170a36fb32bcc8c804d2a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s077_output"
	    wget -O "n100.r04.s077_output/n100.r04.s077.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s077_output/n100.r04.s077.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s077_output/n100.r04.s077.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s077_output/n100.r04.s077.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s077_output/n100.r04.s077.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s077_output/n100.r04.s077.reference.fas" "n100.r04.s077_output/n100.r04.s077.fq1.fastq" "n100.r04.s077_output/n100.r04.s077.fq2.fastq" | samtools view -bS - > "n100.r04.s077_output/n100.r04.s077.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s077_output/n100.r04.s077.untrimmed.sorted.bam" "n100.r04.s077_output/n100.r04.s077.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s077_output/n100.r04.s077.untrimmed.sorted.bam" -b "n100.r04.s077_output/n100.r04.s077.primers.bed" -p "n100.r04.s077_output/n100.r04.s077.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s077_output/n100.r04.s077.trimmed.sorted.bam" "n100.r04.s077_output/n100.r04.s077.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s077_output/n100.r04.s077.reference.fas" "n100.r04.s077_output/n100.r04.s077.trimmed.sorted.bam" > "n100.r04.s077_output/n100.r04.s077.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s077_output/n100.r04.s077.reference.fas" --call-indels "n100.r04.s077_output/n100.r04.s077.trimmed.sorted.bam" > "n100.r04.s077_output/n100.r04.s077.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s077_output/n100.r04.s077.trimmed.sorted.bam" > "n100.r04.s077_output/n100.r04.s077.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s077_output/n100.r04.s077.depth.txt" "n100.r04.s077_output/n100.r04.s077.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s077_output/n100.r04.s077.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s077_output/n100.r04.s077.reference.fas" | bcftools consensus -m "n100.r04.s077_output/n100.r04.s077.low_depth.tsv" tmp.vcf.gz > "n100.r04.s077_output/n100.r04.s077.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s077_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:7f7586876684ae81fe584038be550bd680963d18c9aafc559f3325dc58b44a97 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.3MiB max=125.4MiB
	    disk mean=11.1MiB max=35.8MiB
	    tmp mean=522B max=2.1KiB
2021/07/08 16:56:59 scheduler task 7b519c8e (flow de9dcd46): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s077.tar.gz resources {}
2021/07/08 16:56:59  ->  n100.r04.s077.Main.cp_out_file de9dcd46 exec extern s3://niema-test/n100/r04/n100.r04.s077.tar.gz 35.8MiB
2021/07/08 16:56:59 scheduler task 5bbe9c3d (flow 5f50c423): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:56:59 scheduler task 5bbe9c3d (flow 5f50c423): promoting objects (try 0): started
2021/07/08 16:56:59 scheduler task ecbdae4e (flow ea7c1d46): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:56:59 scheduler task ecbdae4e (flow ea7c1d46): promoting objects (try 0): started
2021/07/08 16:56:59 scheduler task 5bbe9c3d (flow 5f50c423): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:56:59 scheduler task 5bbe9c3d (flow 5f50c423): retrieving diagnostic output (try 0): started
2021/07/08 16:57:00 scheduler task 44129759 (flow 5eef48c8): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:00 scheduler task 44129759 (flow 5eef48c8): promoting objects (try 0): started
2021/07/08 16:57:00 scheduler task ecbdae4e (flow ea7c1d46): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:00 scheduler task ecbdae4e (flow ea7c1d46): retrieving diagnostic output (try 0): started
2021/07/08 16:57:00 scheduler task 5bbe9c3d (flow 5f50c423): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:00 scheduler task 5bbe9c3d (flow 5f50c423): retrieving result (try 0): started
2021/07/08 16:57:00 scheduler task 44129759 (flow 5eef48c8): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:00 scheduler task 44129759 (flow 5eef48c8): retrieving diagnostic output (try 0): started
2021/07/08 16:57:00 scheduler task ecbdae4e (flow ea7c1d46): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:00 scheduler task ecbdae4e (flow ea7c1d46): retrieving result (try 0): started
2021/07/08 16:57:00 scheduler task 5bbe9c3d (flow 5f50c423): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:00 scheduler task 5bbe9c3d (flow 5f50c423): transferring output (try 0): started
2021/07/08 16:57:00 scheduler task 44129759 (flow 5eef48c8): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:00 scheduler task ecbdae4e (flow ea7c1d46): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:00 scheduler task 44129759 (flow 5eef48c8): retrieving result (try 0): started
2021/07/08 16:57:00 scheduler task ecbdae4e (flow ea7c1d46): transferring output (try 0): started
2021/07/08 16:57:00 scheduler task 81deb3da (flow f90209e8): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:449f0d15715cf5058c28b1454cf098211289a5202b3d167cb5cabd14b3c96c5c -> s3://niema-test/n100/r04/n100.r04.s033.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:00  <-  n100.r04.s033.Main.cp_out_file f90209e8 ok   extern 0s 35.7MiB
2021/07/08 16:57:00 scheduler task 44129759 (flow 5eef48c8): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:00 scheduler task 44129759 (flow 5eef48c8): transferring output (try 0): started
2021/07/08 16:57:00 scheduler task 7b519c8e (flow de9dcd46): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:7f7586876684ae81fe584038be550bd680963d18c9aafc559f3325dc58b44a97 -> s3://niema-test/n100/r04/n100.r04.s077.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:57:00  <-  n100.r04.s077.Main.cp_out_file de9dcd46 ok   extern 0s 35.8MiB
2021/07/08 16:57:00 scheduler task 81360b45 (flow 5c0f0936): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:00 scheduler task 81360b45 (flow 5c0f0936): promoting objects (try 0): started
2021/07/08 16:57:00 scheduler task 5bbe9c3d (flow 5f50c423): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:00 scheduler task ecbdae4e (flow ea7c1d46): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:00 scheduler task 5bbe9c3d (flow 5f50c423): unloading (try 0): started
2021/07/08 16:57:00 scheduler task 5bbe9c3d (flow 5f50c423): unloading list<val<.=86c55e11 35.8MiB> 35.8MiB>
2021/07/08 16:57:00 scheduler task 5bbe9c3d (flow 5f50c423): unloading val<.=5429d183 35.4MiB>
2021/07/08 16:57:00 scheduler task 5bbe9c3d (flow 5f50c423): unloading val<.=8acda05e 35.4MiB>
2021/07/08 16:57:00 scheduler task ecbdae4e (flow ea7c1d46): unloading (try 0): started
2021/07/08 16:57:00 scheduler task ecbdae4e (flow ea7c1d46): unloading list<val<.=3bede727 35.8MiB> 35.8MiB>
2021/07/08 16:57:00 scheduler task ecbdae4e (flow ea7c1d46): unloading val<.=5fc59d8f 35.4MiB>
2021/07/08 16:57:00 scheduler task ecbdae4e (flow ea7c1d46): unloading val<.=dd8ea4fe 35.4MiB>
2021/07/08 16:57:00 scheduler task 81360b45 (flow 5c0f0936): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:00 scheduler task 81360b45 (flow 5c0f0936): retrieving diagnostic output (try 0): started
2021/07/08 16:57:00 scheduler task 44129759 (flow 5eef48c8): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:00 scheduler task 5bbe9c3d (flow 5f50c423): unloaded val<.=5429d183 35.4MiB>
2021/07/08 16:57:00 scheduler task ecbdae4e (flow ea7c1d46): unloaded val<.=5fc59d8f 35.4MiB>
2021/07/08 16:57:00 scheduler task 5bbe9c3d (flow 5f50c423): unloaded val<.=8acda05e 35.4MiB>
2021/07/08 16:57:00 scheduler task ecbdae4e (flow ea7c1d46): unloaded list<val<.=3bede727 35.8MiB> 35.8MiB>
2021/07/08 16:57:00 scheduler task ecbdae4e (flow ea7c1d46): unloaded val<.=dd8ea4fe 35.4MiB>
2021/07/08 16:57:00 scheduler task ecbdae4e (flow ea7c1d46): unloading (try 0): successful, next state: complete
2021/07/08 16:57:00 scheduler task 5bbe9c3d (flow 5f50c423): unloaded list<val<.=86c55e11 35.8MiB> 35.8MiB>
2021/07/08 16:57:00 scheduler task 5bbe9c3d (flow 5f50c423): unloading (try 0): successful, next state: complete
2021/07/08 16:57:00 scheduler task 44129759 (flow 5eef48c8): unloading (try 0): started
2021/07/08 16:57:00 scheduler task 44129759 (flow 5eef48c8): unloading list<val<.=47553d86 35.7MiB> 35.7MiB>
2021/07/08 16:57:00 scheduler task 44129759 (flow 5eef48c8): unloading val<.=a06a2437 35.4MiB>
2021/07/08 16:57:00 scheduler task 44129759 (flow 5eef48c8): unloading val<.=7a55ec69 35.4MiB>
2021/07/08 16:57:00  <-  n100.r04.s058.Main.out_file ea7c1d46 ok     exec 5m2s 35.8MiB
2021/07/08 16:57:00 n100.r04.s058.Main.out_file ea7c1d46 n100/r04/n100.r04.s058.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:37847556501cbbbaa63f3c845abaeb5ce209a0c85cbd249d78c71141432664d6
	sha256:ea7c1d46087a654fc7da7a68ec66db59ff83131367779a3bf4c2c3b29d4070a2
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ecbdae4edb77881d4469dbe07626d2ab20022e50435bfa60f142a2cf533a2d5d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s058_output"
	    wget -O "n100.r04.s058_output/n100.r04.s058.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s058_output/n100.r04.s058.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s058_output/n100.r04.s058.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s058_output/n100.r04.s058.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s058_output/n100.r04.s058.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s058_output/n100.r04.s058.reference.fas" "n100.r04.s058_output/n100.r04.s058.fq1.fastq" "n100.r04.s058_output/n100.r04.s058.fq2.fastq" | samtools view -bS - > "n100.r04.s058_output/n100.r04.s058.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s058_output/n100.r04.s058.untrimmed.sorted.bam" "n100.r04.s058_output/n100.r04.s058.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s058_output/n100.r04.s058.untrimmed.sorted.bam" -b "n100.r04.s058_output/n100.r04.s058.primers.bed" -p "n100.r04.s058_output/n100.r04.s058.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s058_output/n100.r04.s058.trimmed.sorted.bam" "n100.r04.s058_output/n100.r04.s058.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s058_output/n100.r04.s058.reference.fas" "n100.r04.s058_output/n100.r04.s058.trimmed.sorted.bam" > "n100.r04.s058_output/n100.r04.s058.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s058_output/n100.r04.s058.reference.fas" --call-indels "n100.r04.s058_output/n100.r04.s058.trimmed.sorted.bam" > "n100.r04.s058_output/n100.r04.s058.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s058_output/n100.r04.s058.trimmed.sorted.bam" > "n100.r04.s058_output/n100.r04.s058.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s058_output/n100.r04.s058.depth.txt" "n100.r04.s058_output/n100.r04.s058.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s058_output/n100.r04.s058.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s058_output/n100.r04.s058.reference.fas" | bcftools consensus -m "n100.r04.s058_output/n100.r04.s058.low_depth.tsv" tmp.vcf.gz > "n100.r04.s058_output/n100.r04.s058.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s058_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:3bede727aa6d81266a1219838668747418b07679d59b44ace5b33e1ff0eba4b9 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.5MiB max=128.8MiB
	    disk mean=6.5MiB max=35.8MiB
	    tmp mean=520B max=2.0KiB
2021/07/08 16:57:00 scheduler task 60ab1eb5 (flow 21793ceb): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s058.tar.gz resources {}
2021/07/08 16:57:00  ->  n100.r04.s058.Main.cp_out_file 21793ceb exec extern s3://niema-test/n100/r04/n100.r04.s058.tar.gz 35.8MiB
2021/07/08 16:57:00  <-  n100.r04.s060.Main.out_file 5f50c423 ok     exec 5m2s 35.8MiB
2021/07/08 16:57:00 n100.r04.s060.Main.out_file 5f50c423 n100/r04/n100.r04.s060.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7d9e1e34f8d1a552e369ff2d70febe4e407fafae26089f982141007e29ea4f2a
	sha256:5f50c423de64b276b724520eaa5a8f38061df841b6fb87eb0f1cdd0c26108176
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5bbe9c3dcf832276d78d7fda637be0a3c9d6a0b53c874bddeb9ec2a99b07885a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s060_output"
	    wget -O "n100.r04.s060_output/n100.r04.s060.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s060_output/n100.r04.s060.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s060_output/n100.r04.s060.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s060_output/n100.r04.s060.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s060_output/n100.r04.s060.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s060_output/n100.r04.s060.reference.fas" "n100.r04.s060_output/n100.r04.s060.fq1.fastq" "n100.r04.s060_output/n100.r04.s060.fq2.fastq" | samtools view -bS - > "n100.r04.s060_output/n100.r04.s060.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s060_output/n100.r04.s060.untrimmed.sorted.bam" "n100.r04.s060_output/n100.r04.s060.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s060_output/n100.r04.s060.untrimmed.sorted.bam" -b "n100.r04.s060_output/n100.r04.s060.primers.bed" -p "n100.r04.s060_output/n100.r04.s060.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s060_output/n100.r04.s060.trimmed.sorted.bam" "n100.r04.s060_output/n100.r04.s060.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s060_output/n100.r04.s060.reference.fas" "n100.r04.s060_output/n100.r04.s060.trimmed.sorted.bam" > "n100.r04.s060_output/n100.r04.s060.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s060_output/n100.r04.s060.reference.fas" --call-indels "n100.r04.s060_output/n100.r04.s060.trimmed.sorted.bam" > "n100.r04.s060_output/n100.r04.s060.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s060_output/n100.r04.s060.trimmed.sorted.bam" > "n100.r04.s060_output/n100.r04.s060.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s060_output/n100.r04.s060.depth.txt" "n100.r04.s060_output/n100.r04.s060.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s060_output/n100.r04.s060.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s060_output/n100.r04.s060.reference.fas" | bcftools consensus -m "n100.r04.s060_output/n100.r04.s060.low_depth.tsv" tmp.vcf.gz > "n100.r04.s060_output/n100.r04.s060.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s060_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:86c55e11a756c5f97251af7bf9f53c4f5702e1030aa6f718505702824569f679 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.3MiB max=127.6MiB
	    disk mean=6.4MiB max=35.8MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 16:57:00 scheduler task 229f8eac (flow 9a030250): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s060.tar.gz resources {}
2021/07/08 16:57:00  ->  n100.r04.s060.Main.cp_out_file 9a030250 exec extern s3://niema-test/n100/r04/n100.r04.s060.tar.gz 35.8MiB
2021/07/08 16:57:00 scheduler task 81360b45 (flow 5c0f0936): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:00 scheduler task 81360b45 (flow 5c0f0936): retrieving result (try 0): started
2021/07/08 16:57:00 scheduler task 44129759 (flow 5eef48c8): unloaded list<val<.=47553d86 35.7MiB> 35.7MiB>
2021/07/08 16:57:00 scheduler task 44129759 (flow 5eef48c8): unloaded val<.=a06a2437 35.4MiB>
2021/07/08 16:57:00 scheduler task 44129759 (flow 5eef48c8): unloaded val<.=7a55ec69 35.4MiB>
2021/07/08 16:57:00 scheduler task 44129759 (flow 5eef48c8): unloading (try 0): successful, next state: complete
2021/07/08 16:57:00  <-  n100.r04.s035.Main.out_file 5eef48c8 ok     exec 5m1s 35.7MiB
2021/07/08 16:57:00 n100.r04.s035.Main.out_file 5eef48c8 n100/r04/n100.r04.s035.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2b74bca4a40b49ce87aa172fe9664eb6aefb78a1dd26660023ebd287234967a7
	sha256:5eef48c862f416c3f6ab426f2d5fbec5eb8b1c1ca392e934612bc717f5db532f
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4412975927e546d3746d9dbf0d9ede233a4358dd53a06c2dc07bd1777bbe34ae
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s035_output"
	    wget -O "n100.r04.s035_output/n100.r04.s035.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s035_output/n100.r04.s035.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s035_output/n100.r04.s035.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s035_output/n100.r04.s035.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s035_output/n100.r04.s035.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s035_output/n100.r04.s035.reference.fas" "n100.r04.s035_output/n100.r04.s035.fq1.fastq" "n100.r04.s035_output/n100.r04.s035.fq2.fastq" | samtools view -bS - > "n100.r04.s035_output/n100.r04.s035.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s035_output/n100.r04.s035.untrimmed.sorted.bam" "n100.r04.s035_output/n100.r04.s035.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s035_output/n100.r04.s035.untrimmed.sorted.bam" -b "n100.r04.s035_output/n100.r04.s035.primers.bed" -p "n100.r04.s035_output/n100.r04.s035.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s035_output/n100.r04.s035.trimmed.sorted.bam" "n100.r04.s035_output/n100.r04.s035.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s035_output/n100.r04.s035.reference.fas" "n100.r04.s035_output/n100.r04.s035.trimmed.sorted.bam" > "n100.r04.s035_output/n100.r04.s035.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s035_output/n100.r04.s035.reference.fas" --call-indels "n100.r04.s035_output/n100.r04.s035.trimmed.sorted.bam" > "n100.r04.s035_output/n100.r04.s035.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s035_output/n100.r04.s035.trimmed.sorted.bam" > "n100.r04.s035_output/n100.r04.s035.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s035_output/n100.r04.s035.depth.txt" "n100.r04.s035_output/n100.r04.s035.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s035_output/n100.r04.s035.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s035_output/n100.r04.s035.reference.fas" | bcftools consensus -m "n100.r04.s035_output/n100.r04.s035.low_depth.tsv" tmp.vcf.gz > "n100.r04.s035_output/n100.r04.s035.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s035_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:47553d869182a5325a9ceae96e487642ed2be505fd1d7f4ec012e53b110a5980 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.3MiB max=124.8MiB
	    disk mean=6.7MiB max=35.7MiB
	    tmp mean=523B max=2.1KiB
2021/07/08 16:57:00 scheduler task ef237b8a (flow 17050dad): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s035.tar.gz resources {}
2021/07/08 16:57:00  ->  n100.r04.s035.Main.cp_out_file 17050dad exec extern s3://niema-test/n100/r04/n100.r04.s035.tar.gz 35.7MiB
2021/07/08 16:57:00 scheduler task 81360b45 (flow 5c0f0936): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:00 scheduler task 81360b45 (flow 5c0f0936): transferring output (try 0): started
2021/07/08 16:57:01 scheduler task 81360b45 (flow 5c0f0936): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:01 scheduler task 81360b45 (flow 5c0f0936): unloading (try 0): started
2021/07/08 16:57:01 scheduler task 81360b45 (flow 5c0f0936): unloading list<val<.=bc5edc6c 35.7MiB> 35.7MiB>
2021/07/08 16:57:01 scheduler task 81360b45 (flow 5c0f0936): unloading val<.=9459f1dd 35.4MiB>
2021/07/08 16:57:01 scheduler task 81360b45 (flow 5c0f0936): unloading val<.=cd3c1b8f 35.4MiB>
2021/07/08 16:57:01 scheduler task 60ab1eb5 (flow 21793ceb): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:3bede727aa6d81266a1219838668747418b07679d59b44ace5b33e1ff0eba4b9 -> s3://niema-test/n100/r04/n100.r04.s058.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:57:01  <-  n100.r04.s058.Main.cp_out_file 21793ceb ok   extern 0s 35.8MiB
2021/07/08 16:57:01 scheduler task 81360b45 (flow 5c0f0936): unloaded list<val<.=bc5edc6c 35.7MiB> 35.7MiB>
2021/07/08 16:57:01 scheduler task 81360b45 (flow 5c0f0936): unloaded val<.=9459f1dd 35.4MiB>
2021/07/08 16:57:01 scheduler task 81360b45 (flow 5c0f0936): unloaded val<.=cd3c1b8f 35.4MiB>
2021/07/08 16:57:01 scheduler task 81360b45 (flow 5c0f0936): unloading (try 0): successful, next state: complete
2021/07/08 16:57:01  <-  n100.r04.s031.Main.out_file 5c0f0936 ok     exec 5m2s 35.7MiB
2021/07/08 16:57:01 n100.r04.s031.Main.out_file 5c0f0936 n100/r04/n100.r04.s031.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e70d2ce6db3bf59bd446cb25a29ecb1e92c16c5f5a5944639ab642fc40679904
	sha256:5c0f0936f1299d4bd517e29fa0a000277e4f0999f392de7847f605e2760e93aa
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/81360b45ceba92ae43507c7da19947eb43bad0016f64bc2d30671425f7df8338
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s031_output"
	    wget -O "n100.r04.s031_output/n100.r04.s031.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s031_output/n100.r04.s031.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s031_output/n100.r04.s031.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s031_output/n100.r04.s031.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s031_output/n100.r04.s031.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s031_output/n100.r04.s031.reference.fas" "n100.r04.s031_output/n100.r04.s031.fq1.fastq" "n100.r04.s031_output/n100.r04.s031.fq2.fastq" | samtools view -bS - > "n100.r04.s031_output/n100.r04.s031.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s031_output/n100.r04.s031.untrimmed.sorted.bam" "n100.r04.s031_output/n100.r04.s031.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s031_output/n100.r04.s031.untrimmed.sorted.bam" -b "n100.r04.s031_output/n100.r04.s031.primers.bed" -p "n100.r04.s031_output/n100.r04.s031.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s031_output/n100.r04.s031.trimmed.sorted.bam" "n100.r04.s031_output/n100.r04.s031.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s031_output/n100.r04.s031.reference.fas" "n100.r04.s031_output/n100.r04.s031.trimmed.sorted.bam" > "n100.r04.s031_output/n100.r04.s031.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s031_output/n100.r04.s031.reference.fas" --call-indels "n100.r04.s031_output/n100.r04.s031.trimmed.sorted.bam" > "n100.r04.s031_output/n100.r04.s031.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s031_output/n100.r04.s031.trimmed.sorted.bam" > "n100.r04.s031_output/n100.r04.s031.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s031_output/n100.r04.s031.depth.txt" "n100.r04.s031_output/n100.r04.s031.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s031_output/n100.r04.s031.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s031_output/n100.r04.s031.reference.fas" | bcftools consensus -m "n100.r04.s031_output/n100.r04.s031.low_depth.tsv" tmp.vcf.gz > "n100.r04.s031_output/n100.r04.s031.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s031_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:bc5edc6cd009033819ed5f0c986d37748a9b20552111292c2086dad5c0dbf3cc 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.6MiB max=124.2MiB
	    disk mean=6.1MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 16:57:01 scheduler task 3bd27f75 (flow 457e547f): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s031.tar.gz resources {}
2021/07/08 16:57:01  ->  n100.r04.s031.Main.cp_out_file 457e547f exec extern s3://niema-test/n100/r04/n100.r04.s031.tar.gz 35.7MiB
2021/07/08 16:57:01 scheduler task 229f8eac (flow 9a030250): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:86c55e11a756c5f97251af7bf9f53c4f5702e1030aa6f718505702824569f679 -> s3://niema-test/n100/r04/n100.r04.s060.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:57:01  <-  n100.r04.s060.Main.cp_out_file 9a030250 ok   extern 0s 35.8MiB
2021/07/08 16:57:01 scheduler task 36d6e3bf (flow a4dcd123): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:01 scheduler task 36d6e3bf (flow a4dcd123): promoting objects (try 0): started
2021/07/08 16:57:01 scheduler task 36d6e3bf (flow a4dcd123): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:01 scheduler task 36d6e3bf (flow a4dcd123): retrieving diagnostic output (try 0): started
2021/07/08 16:57:01 scheduler task f0cd2c6c (flow 499d9909): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:01 scheduler task f0cd2c6c (flow 499d9909): promoting objects (try 0): started
2021/07/08 16:57:01 scheduler task 36d6e3bf (flow a4dcd123): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:01 scheduler task 36d6e3bf (flow a4dcd123): retrieving result (try 0): started
2021/07/08 16:57:01 scheduler task f0cd2c6c (flow 499d9909): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:01 scheduler task f0cd2c6c (flow 499d9909): retrieving diagnostic output (try 0): started
2021/07/08 16:57:01 scheduler task 36d6e3bf (flow a4dcd123): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:01 scheduler task 36d6e3bf (flow a4dcd123): transferring output (try 0): started
2021/07/08 16:57:01 scheduler task ef237b8a (flow 17050dad): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:47553d869182a5325a9ceae96e487642ed2be505fd1d7f4ec012e53b110a5980 -> s3://niema-test/n100/r04/n100.r04.s035.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:01  <-  n100.r04.s035.Main.cp_out_file 17050dad ok   extern 0s 35.7MiB
2021/07/08 16:57:01 scheduler task f0cd2c6c (flow 499d9909): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:02 scheduler task f0cd2c6c (flow 499d9909): retrieving result (try 0): started
2021/07/08 16:57:02 scheduler task c9e9d6bb (flow 763a3244): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:02 scheduler task c9e9d6bb (flow 763a3244): promoting objects (try 0): started
2021/07/08 16:57:02 scheduler task f0cd2c6c (flow 499d9909): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:02 scheduler task f0cd2c6c (flow 499d9909): transferring output (try 0): started
2021/07/08 16:57:02 scheduler task c9e9d6bb (flow 763a3244): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:02 scheduler task c9e9d6bb (flow 763a3244): retrieving diagnostic output (try 0): started
2021/07/08 16:57:02 scheduler task c9e9d6bb (flow 763a3244): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:02 scheduler task c9e9d6bb (flow 763a3244): retrieving result (try 0): started
2021/07/08 16:57:02 scheduler task 3bd27f75 (flow 457e547f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:bc5edc6cd009033819ed5f0c986d37748a9b20552111292c2086dad5c0dbf3cc -> s3://niema-test/n100/r04/n100.r04.s031.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:02  <-  n100.r04.s031.Main.cp_out_file 457e547f ok   extern 0s 35.7MiB
2021/07/08 16:57:02 scheduler task c9e9d6bb (flow 763a3244): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:02 scheduler task c9e9d6bb (flow 763a3244): transferring output (try 0): started
2021/07/08 16:57:02 scheduler task 36d6e3bf (flow a4dcd123): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:02 scheduler task 36d6e3bf (flow a4dcd123): unloading (try 0): started
2021/07/08 16:57:02 scheduler task 36d6e3bf (flow a4dcd123): unloading list<val<.=6c2b7c27 35.7MiB> 35.7MiB>
2021/07/08 16:57:02 scheduler task 36d6e3bf (flow a4dcd123): unloading val<.=61b94c48 35.4MiB>
2021/07/08 16:57:02 scheduler task 36d6e3bf (flow a4dcd123): unloading val<.=fe10adeb 35.4MiB>
2021/07/08 16:57:02 scheduler task f0cd2c6c (flow 499d9909): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:02 scheduler task 36d6e3bf (flow a4dcd123): unloaded val<.=61b94c48 35.4MiB>
2021/07/08 16:57:02 scheduler task 36d6e3bf (flow a4dcd123): unloaded list<val<.=6c2b7c27 35.7MiB> 35.7MiB>
2021/07/08 16:57:02 scheduler task 36d6e3bf (flow a4dcd123): unloaded val<.=fe10adeb 35.4MiB>
2021/07/08 16:57:02 scheduler task 36d6e3bf (flow a4dcd123): unloading (try 0): successful, next state: complete
2021/07/08 16:57:02 scheduler task f0cd2c6c (flow 499d9909): unloading (try 0): started
2021/07/08 16:57:02 scheduler task f0cd2c6c (flow 499d9909): unloading list<val<.=68dbfbeb 35.7MiB> 35.7MiB>
2021/07/08 16:57:02 scheduler task f0cd2c6c (flow 499d9909): unloading val<.=124d56f5 35.4MiB>
2021/07/08 16:57:02 scheduler task f0cd2c6c (flow 499d9909): unloading val<.=09ee4690 35.4MiB>
2021/07/08 16:57:02  <-  n100.r04.s026.Main.out_file a4dcd123 ok     exec 5m3s 35.7MiB
2021/07/08 16:57:02 n100.r04.s026.Main.out_file a4dcd123 n100/r04/n100.r04.s026.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c33c48ba9aae8a94fe7d0c1e14560554e06638b9d3b44800ba443cbefa06fe0b
	sha256:a4dcd123083fd82ffd2cd9ece02b32234db6dcf9c231d3b244cfa0a1b5b02001
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/36d6e3bfc1c4f2e42c4373dfa06117f6791fa1a0345fff4f553ab9149046c2d2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s026_output"
	    wget -O "n100.r04.s026_output/n100.r04.s026.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s026_output/n100.r04.s026.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s026_output/n100.r04.s026.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s026_output/n100.r04.s026.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s026_output/n100.r04.s026.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s026_output/n100.r04.s026.reference.fas" "n100.r04.s026_output/n100.r04.s026.fq1.fastq" "n100.r04.s026_output/n100.r04.s026.fq2.fastq" | samtools view -bS - > "n100.r04.s026_output/n100.r04.s026.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s026_output/n100.r04.s026.untrimmed.sorted.bam" "n100.r04.s026_output/n100.r04.s026.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s026_output/n100.r04.s026.untrimmed.sorted.bam" -b "n100.r04.s026_output/n100.r04.s026.primers.bed" -p "n100.r04.s026_output/n100.r04.s026.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s026_output/n100.r04.s026.trimmed.sorted.bam" "n100.r04.s026_output/n100.r04.s026.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s026_output/n100.r04.s026.reference.fas" "n100.r04.s026_output/n100.r04.s026.trimmed.sorted.bam" > "n100.r04.s026_output/n100.r04.s026.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s026_output/n100.r04.s026.reference.fas" --call-indels "n100.r04.s026_output/n100.r04.s026.trimmed.sorted.bam" > "n100.r04.s026_output/n100.r04.s026.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s026_output/n100.r04.s026.trimmed.sorted.bam" > "n100.r04.s026_output/n100.r04.s026.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s026_output/n100.r04.s026.depth.txt" "n100.r04.s026_output/n100.r04.s026.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s026_output/n100.r04.s026.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s026_output/n100.r04.s026.reference.fas" | bcftools consensus -m "n100.r04.s026_output/n100.r04.s026.low_depth.tsv" tmp.vcf.gz > "n100.r04.s026_output/n100.r04.s026.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s026_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:6c2b7c27e79030156fff50e05554294728f589cd745361f93a66da3684ab7e25 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=18.8MiB max=125.4MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.0KiB
2021/07/08 16:57:02 scheduler task 678b8187 (flow 848ea798): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s026.tar.gz resources {}
2021/07/08 16:57:02  ->  n100.r04.s026.Main.cp_out_file 848ea798 exec extern s3://niema-test/n100/r04/n100.r04.s026.tar.gz 35.7MiB
2021/07/08 16:57:02 scheduler task f0cd2c6c (flow 499d9909): unloaded list<val<.=68dbfbeb 35.7MiB> 35.7MiB>
2021/07/08 16:57:02 scheduler task f0cd2c6c (flow 499d9909): unloaded val<.=09ee4690 35.4MiB>
2021/07/08 16:57:02 scheduler task f0cd2c6c (flow 499d9909): unloaded val<.=124d56f5 35.4MiB>
2021/07/08 16:57:02 scheduler task f0cd2c6c (flow 499d9909): unloading (try 0): successful, next state: complete
2021/07/08 16:57:02  <-  n100.r04.s043.Main.out_file 499d9909 ok     exec 5m3s 35.7MiB
2021/07/08 16:57:02 n100.r04.s043.Main.out_file 499d9909 n100/r04/n100.r04.s043.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:811d5da9a7a14a731c86a49f2e78737c926dc2081c333b142ea8a136b9683cb9
	sha256:499d99093c505198e3b2e37ca88eb50999a04d74a88bcc3f741a1cc49d63bc69
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f0cd2c6cf60c2009990bbbaea20e0bba38ab2e51f425a69f521a140d7e27c9af
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s043_output"
	    wget -O "n100.r04.s043_output/n100.r04.s043.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s043_output/n100.r04.s043.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s043_output/n100.r04.s043.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s043_output/n100.r04.s043.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s043_output/n100.r04.s043.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s043_output/n100.r04.s043.reference.fas" "n100.r04.s043_output/n100.r04.s043.fq1.fastq" "n100.r04.s043_output/n100.r04.s043.fq2.fastq" | samtools view -bS - > "n100.r04.s043_output/n100.r04.s043.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s043_output/n100.r04.s043.untrimmed.sorted.bam" "n100.r04.s043_output/n100.r04.s043.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s043_output/n100.r04.s043.untrimmed.sorted.bam" -b "n100.r04.s043_output/n100.r04.s043.primers.bed" -p "n100.r04.s043_output/n100.r04.s043.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s043_output/n100.r04.s043.trimmed.sorted.bam" "n100.r04.s043_output/n100.r04.s043.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s043_output/n100.r04.s043.reference.fas" "n100.r04.s043_output/n100.r04.s043.trimmed.sorted.bam" > "n100.r04.s043_output/n100.r04.s043.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s043_output/n100.r04.s043.reference.fas" --call-indels "n100.r04.s043_output/n100.r04.s043.trimmed.sorted.bam" > "n100.r04.s043_output/n100.r04.s043.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s043_output/n100.r04.s043.trimmed.sorted.bam" > "n100.r04.s043_output/n100.r04.s043.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s043_output/n100.r04.s043.depth.txt" "n100.r04.s043_output/n100.r04.s043.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s043_output/n100.r04.s043.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s043_output/n100.r04.s043.reference.fas" | bcftools consensus -m "n100.r04.s043_output/n100.r04.s043.low_depth.tsv" tmp.vcf.gz > "n100.r04.s043_output/n100.r04.s043.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s043_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:68dbfbeb94c97c63bed1410715f5af036e662e9c48ee1a963de48bb7da2857fb 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=19.6MiB max=125.5MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.0KiB
2021/07/08 16:57:02 scheduler task bb350b10 (flow 6744c9cf): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s043.tar.gz resources {}
2021/07/08 16:57:02  ->  n100.r04.s043.Main.cp_out_file 6744c9cf exec extern s3://niema-test/n100/r04/n100.r04.s043.tar.gz 35.7MiB
2021/07/08 16:57:02 scheduler task c9e9d6bb (flow 763a3244): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:02 scheduler task c9e9d6bb (flow 763a3244): unloading (try 0): started
2021/07/08 16:57:02 scheduler task c9e9d6bb (flow 763a3244): unloading list<val<.=f8c2d552 35.7MiB> 35.7MiB>
2021/07/08 16:57:02 scheduler task c9e9d6bb (flow 763a3244): unloading val<.=cb428c8d 35.4MiB>
2021/07/08 16:57:02 scheduler task c9e9d6bb (flow 763a3244): unloading val<.=54cdf305 35.4MiB>
2021/07/08 16:57:02 scheduler task c9e9d6bb (flow 763a3244): unloaded val<.=cb428c8d 35.4MiB>
2021/07/08 16:57:02 scheduler task c9e9d6bb (flow 763a3244): unloaded list<val<.=f8c2d552 35.7MiB> 35.7MiB>
2021/07/08 16:57:02 scheduler task c9e9d6bb (flow 763a3244): unloaded val<.=54cdf305 35.4MiB>
2021/07/08 16:57:02 scheduler task c9e9d6bb (flow 763a3244): unloading (try 0): successful, next state: complete
2021/07/08 16:57:02  <-  n100.r04.s068.Main.out_file 763a3244 ok     exec 5m4s 35.7MiB
2021/07/08 16:57:02 n100.r04.s068.Main.out_file 763a3244 n100/r04/n100.r04.s068.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ef0ff54ad63fb5f2faf80612d10ba0ab14415896ffc5c57bc1e2d349c0c5695b
	sha256:763a32448f97c378bbca3deea2ac637e0da8b15874ad538b5f0df42c59ed5870
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c9e9d6bb5b41383066d8872af612f707922371c3da08032da83991e8b6dad9f5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s068_output"
	    wget -O "n100.r04.s068_output/n100.r04.s068.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s068_output/n100.r04.s068.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s068_output/n100.r04.s068.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s068_output/n100.r04.s068.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s068_output/n100.r04.s068.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s068_output/n100.r04.s068.reference.fas" "n100.r04.s068_output/n100.r04.s068.fq1.fastq" "n100.r04.s068_output/n100.r04.s068.fq2.fastq" | samtools view -bS - > "n100.r04.s068_output/n100.r04.s068.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s068_output/n100.r04.s068.untrimmed.sorted.bam" "n100.r04.s068_output/n100.r04.s068.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s068_output/n100.r04.s068.untrimmed.sorted.bam" -b "n100.r04.s068_output/n100.r04.s068.primers.bed" -p "n100.r04.s068_output/n100.r04.s068.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s068_output/n100.r04.s068.trimmed.sorted.bam" "n100.r04.s068_output/n100.r04.s068.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s068_output/n100.r04.s068.reference.fas" "n100.r04.s068_output/n100.r04.s068.trimmed.sorted.bam" > "n100.r04.s068_output/n100.r04.s068.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s068_output/n100.r04.s068.reference.fas" --call-indels "n100.r04.s068_output/n100.r04.s068.trimmed.sorted.bam" > "n100.r04.s068_output/n100.r04.s068.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s068_output/n100.r04.s068.trimmed.sorted.bam" > "n100.r04.s068_output/n100.r04.s068.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s068_output/n100.r04.s068.depth.txt" "n100.r04.s068_output/n100.r04.s068.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s068_output/n100.r04.s068.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s068_output/n100.r04.s068.reference.fas" | bcftools consensus -m "n100.r04.s068_output/n100.r04.s068.low_depth.tsv" tmp.vcf.gz > "n100.r04.s068_output/n100.r04.s068.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s068_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f8c2d552330e234a7a8b657a6d6d3f462f516a11800eb37350d5ac14f4fba5c4 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.9MiB max=125.8MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 16:57:02 scheduler task d1dad13f (flow 18c2c944): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s068.tar.gz resources {}
2021/07/08 16:57:02  ->  n100.r04.s068.Main.cp_out_file 18c2c944 exec extern s3://niema-test/n100/r04/n100.r04.s068.tar.gz 35.7MiB
2021/07/08 16:57:03 scheduler task f7f2648e (flow 062361bd): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:03 scheduler task f7f2648e (flow 062361bd): promoting objects (try 0): started
2021/07/08 16:57:03 scheduler task 678b8187 (flow 848ea798): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:6c2b7c27e79030156fff50e05554294728f589cd745361f93a66da3684ab7e25 -> s3://niema-test/n100/r04/n100.r04.s026.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:03  <-  n100.r04.s026.Main.cp_out_file 848ea798 ok   extern 0s 35.7MiB
2021/07/08 16:57:03 scheduler task bb350b10 (flow 6744c9cf): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:68dbfbeb94c97c63bed1410715f5af036e662e9c48ee1a963de48bb7da2857fb -> s3://niema-test/n100/r04/n100.r04.s043.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:03  <-  n100.r04.s043.Main.cp_out_file 6744c9cf ok   extern 0s 35.7MiB
2021/07/08 16:57:03 scheduler task f7f2648e (flow 062361bd): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:03 scheduler task f7f2648e (flow 062361bd): retrieving diagnostic output (try 0): started
2021/07/08 16:57:03 scheduler task f7f2648e (flow 062361bd): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:03 scheduler task f7f2648e (flow 062361bd): retrieving result (try 0): started
2021/07/08 16:57:03 scheduler task f7f2648e (flow 062361bd): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:03 scheduler task f7f2648e (flow 062361bd): transferring output (try 0): started
2021/07/08 16:57:03 scheduler task d1dad13f (flow 18c2c944): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f8c2d552330e234a7a8b657a6d6d3f462f516a11800eb37350d5ac14f4fba5c4 -> s3://niema-test/n100/r04/n100.r04.s068.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:03  <-  n100.r04.s068.Main.cp_out_file 18c2c944 ok   extern 0s 35.7MiB
2021/07/08 16:57:04 scheduler task f7f2648e (flow 062361bd): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:04 scheduler task f7f2648e (flow 062361bd): unloading (try 0): started
2021/07/08 16:57:04 scheduler task f7f2648e (flow 062361bd): unloading list<val<.=b47153be 35.7MiB> 35.7MiB>
2021/07/08 16:57:04 scheduler task f7f2648e (flow 062361bd): unloading val<.=c9fe7ec9 35.4MiB>
2021/07/08 16:57:04 scheduler task f7f2648e (flow 062361bd): unloading val<.=591451be 35.4MiB>
2021/07/08 16:57:04 scheduler task f7f2648e (flow 062361bd): unloaded val<.=c9fe7ec9 35.4MiB>
2021/07/08 16:57:04 scheduler task f7f2648e (flow 062361bd): unloaded list<val<.=b47153be 35.7MiB> 35.7MiB>
2021/07/08 16:57:04 scheduler task f7f2648e (flow 062361bd): unloaded val<.=591451be 35.4MiB>
2021/07/08 16:57:04 scheduler task f7f2648e (flow 062361bd): unloading (try 0): successful, next state: complete
2021/07/08 16:57:04  <-  n100.r04.s071.Main.out_file 062361bd ok     exec 5m4s 35.7MiB
2021/07/08 16:57:04 n100.r04.s071.Main.out_file 062361bd n100/r04/n100.r04.s071.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:97410d63ea94ea1ec250a86f527995667ab79fc00fe9d569e17996b0fe8e3a21
	sha256:062361bd92d8ceba3da24cc1bebd240383f647b507a43a75e9060c0a8c6d962f
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f7f2648e20f9dc543c2036cbb761f236f4d6cc3f4fae0c5284ee9b1db85f9be4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s071_output"
	    wget -O "n100.r04.s071_output/n100.r04.s071.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s071_output/n100.r04.s071.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s071_output/n100.r04.s071.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s071_output/n100.r04.s071.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s071_output/n100.r04.s071.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s071_output/n100.r04.s071.reference.fas" "n100.r04.s071_output/n100.r04.s071.fq1.fastq" "n100.r04.s071_output/n100.r04.s071.fq2.fastq" | samtools view -bS - > "n100.r04.s071_output/n100.r04.s071.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s071_output/n100.r04.s071.untrimmed.sorted.bam" "n100.r04.s071_output/n100.r04.s071.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s071_output/n100.r04.s071.untrimmed.sorted.bam" -b "n100.r04.s071_output/n100.r04.s071.primers.bed" -p "n100.r04.s071_output/n100.r04.s071.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s071_output/n100.r04.s071.trimmed.sorted.bam" "n100.r04.s071_output/n100.r04.s071.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s071_output/n100.r04.s071.reference.fas" "n100.r04.s071_output/n100.r04.s071.trimmed.sorted.bam" > "n100.r04.s071_output/n100.r04.s071.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s071_output/n100.r04.s071.reference.fas" --call-indels "n100.r04.s071_output/n100.r04.s071.trimmed.sorted.bam" > "n100.r04.s071_output/n100.r04.s071.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s071_output/n100.r04.s071.trimmed.sorted.bam" > "n100.r04.s071_output/n100.r04.s071.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s071_output/n100.r04.s071.depth.txt" "n100.r04.s071_output/n100.r04.s071.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s071_output/n100.r04.s071.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s071_output/n100.r04.s071.reference.fas" | bcftools consensus -m "n100.r04.s071_output/n100.r04.s071.low_depth.tsv" tmp.vcf.gz > "n100.r04.s071_output/n100.r04.s071.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s071_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:b47153be894ce39846f448d4e44c3598700d425b148002405becb5f60339a760 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.7MiB max=129.8MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=872B max=2.1KiB
2021/07/08 16:57:04 scheduler task 9e98eeaa (flow cd62939d): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s071.tar.gz resources {}
2021/07/08 16:57:04  ->  n100.r04.s071.Main.cp_out_file cd62939d exec extern s3://niema-test/n100/r04/n100.r04.s071.tar.gz 35.7MiB
2021/07/08 16:57:04 scheduler task 9e98eeaa (flow cd62939d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:b47153be894ce39846f448d4e44c3598700d425b148002405becb5f60339a760 -> s3://niema-test/n100/r04/n100.r04.s071.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:04  <-  n100.r04.s071.Main.cp_out_file cd62939d ok   extern 0s 35.7MiB
2021/07/08 16:57:07 scheduler task 3cad6a0b (flow f32e0466): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:07 scheduler task 3cad6a0b (flow f32e0466): promoting objects (try 0): started
2021/07/08 16:57:07 scheduler task 3cad6a0b (flow f32e0466): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:07 scheduler task 3cad6a0b (flow f32e0466): retrieving diagnostic output (try 0): started
2021/07/08 16:57:07 scheduler task 3cad6a0b (flow f32e0466): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:07 scheduler task 3cad6a0b (flow f32e0466): retrieving result (try 0): started
2021/07/08 16:57:07 scheduler task 3cad6a0b (flow f32e0466): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:07 scheduler task 3cad6a0b (flow f32e0466): transferring output (try 0): started
2021/07/08 16:57:08 scheduler task 15151169 (flow a6da6753): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:08 scheduler task 15151169 (flow a6da6753): promoting objects (try 0): started
2021/07/08 16:57:08 scheduler task 15151169 (flow a6da6753): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:08 scheduler task 3cad6a0b (flow f32e0466): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:08 scheduler task 15151169 (flow a6da6753): retrieving diagnostic output (try 0): started
2021/07/08 16:57:08 scheduler task 3cad6a0b (flow f32e0466): unloading (try 0): started
2021/07/08 16:57:08 scheduler task 3cad6a0b (flow f32e0466): unloading list<val<.=4ae15396 35.7MiB> 35.7MiB>
2021/07/08 16:57:08 scheduler task 3cad6a0b (flow f32e0466): unloading val<.=508f502f 35.4MiB>
2021/07/08 16:57:08 scheduler task 3cad6a0b (flow f32e0466): unloading val<.=b5fa662c 35.4MiB>
2021/07/08 16:57:08 scheduler task 3cad6a0b (flow f32e0466): unloaded val<.=508f502f 35.4MiB>
2021/07/08 16:57:08 scheduler task 3cad6a0b (flow f32e0466): unloaded list<val<.=4ae15396 35.7MiB> 35.7MiB>
2021/07/08 16:57:08 scheduler task 3cad6a0b (flow f32e0466): unloaded val<.=b5fa662c 35.4MiB>
2021/07/08 16:57:08 scheduler task 3cad6a0b (flow f32e0466): unloading (try 0): successful, next state: complete
2021/07/08 16:57:08 scheduler task 15151169 (flow a6da6753): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:08  <-  n100.r04.s005.Main.out_file f32e0466 ok     exec 5m0s 35.7MiB
2021/07/08 16:57:08 n100.r04.s005.Main.out_file f32e0466 n100/r04/n100.r04.s005.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:79c47e1d4dd6bec6212c6c9fa61b36246f8a2ca3ed765e44d2098533225bb8a4
	sha256:f32e04669dc85d91e4b10e2cd7c8fe03425a040282f70fbbd956a419d552f6d6
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3cad6a0b5209288439a9ab8b91b4f1915b7a58cb8b8e855b348e37199fc46bb6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s005_output"
	    wget -O "n100.r04.s005_output/n100.r04.s005.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s005_output/n100.r04.s005.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s005_output/n100.r04.s005.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s005_output/n100.r04.s005.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s005_output/n100.r04.s005.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s005_output/n100.r04.s005.reference.fas" "n100.r04.s005_output/n100.r04.s005.fq1.fastq" "n100.r04.s005_output/n100.r04.s005.fq2.fastq" | samtools view -bS - > "n100.r04.s005_output/n100.r04.s005.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s005_output/n100.r04.s005.untrimmed.sorted.bam" "n100.r04.s005_output/n100.r04.s005.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s005_output/n100.r04.s005.untrimmed.sorted.bam" -b "n100.r04.s005_output/n100.r04.s005.primers.bed" -p "n100.r04.s005_output/n100.r04.s005.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s005_output/n100.r04.s005.trimmed.sorted.bam" "n100.r04.s005_output/n100.r04.s005.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s005_output/n100.r04.s005.reference.fas" "n100.r04.s005_output/n100.r04.s005.trimmed.sorted.bam" > "n100.r04.s005_output/n100.r04.s005.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s005_output/n100.r04.s005.reference.fas" --call-indels "n100.r04.s005_output/n100.r04.s005.trimmed.sorted.bam" > "n100.r04.s005_output/n100.r04.s005.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s005_output/n100.r04.s005.trimmed.sorted.bam" > "n100.r04.s005_output/n100.r04.s005.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s005_output/n100.r04.s005.depth.txt" "n100.r04.s005_output/n100.r04.s005.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s005_output/n100.r04.s005.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s005_output/n100.r04.s005.reference.fas" | bcftools consensus -m "n100.r04.s005_output/n100.r04.s005.low_depth.tsv" tmp.vcf.gz > "n100.r04.s005_output/n100.r04.s005.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s005_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:4ae153963226ee704d570e9f4f70acb3d6810895f0d7860b820296a85c94524e 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.1MiB max=131.5MiB
	    disk mean=11.7MiB max=35.7MiB
	    tmp mean=522B max=2.1KiB
2021/07/08 16:57:08 scheduler task f588ef7f (flow e35fb762): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s005.tar.gz resources {}
2021/07/08 16:57:08  ->  n100.r04.s005.Main.cp_out_file e35fb762 exec extern s3://niema-test/n100/r04/n100.r04.s005.tar.gz 35.7MiB
2021/07/08 16:57:08 scheduler task 15151169 (flow a6da6753): retrieving result (try 0): started
2021/07/08 16:57:08 scheduler task 15151169 (flow a6da6753): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:08 scheduler task 15151169 (flow a6da6753): transferring output (try 0): started
2021/07/08 16:57:08 scheduler task 8a9bceb1 (flow 27523267): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:08 scheduler task 8a9bceb1 (flow 27523267): promoting objects (try 0): started
2021/07/08 16:57:08 scheduler task 8a9bceb1 (flow 27523267): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:08 scheduler task 8a9bceb1 (flow 27523267): retrieving diagnostic output (try 0): started
2021/07/08 16:57:08 scheduler task 8a9bceb1 (flow 27523267): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:08 scheduler task 8a9bceb1 (flow 27523267): retrieving result (try 0): started
2021/07/08 16:57:08 scheduler task 8a9bceb1 (flow 27523267): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:08 scheduler task 8a9bceb1 (flow 27523267): transferring output (try 0): started
2021/07/08 16:57:09 scheduler task 15151169 (flow a6da6753): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:09 scheduler task 15151169 (flow a6da6753): unloading (try 0): started
2021/07/08 16:57:09 scheduler task 15151169 (flow a6da6753): unloading list<val<.=05c608f2 35.7MiB> 35.7MiB>
2021/07/08 16:57:09 scheduler task 15151169 (flow a6da6753): unloading val<.=0d838b62 35.4MiB>
2021/07/08 16:57:09 scheduler task 15151169 (flow a6da6753): unloading val<.=24b5fa3c 35.4MiB>
2021/07/08 16:57:09 scheduler task 15151169 (flow a6da6753): unloaded val<.=0d838b62 35.4MiB>
2021/07/08 16:57:09 scheduler task 15151169 (flow a6da6753): unloaded list<val<.=05c608f2 35.7MiB> 35.7MiB>
2021/07/08 16:57:09 scheduler task 15151169 (flow a6da6753): unloaded val<.=24b5fa3c 35.4MiB>
2021/07/08 16:57:09 scheduler task 15151169 (flow a6da6753): unloading (try 0): successful, next state: complete
2021/07/08 16:57:09  <-  n100.r04.s079.Main.out_file a6da6753 ok     exec 5m1s 35.7MiB
2021/07/08 16:57:09 n100.r04.s079.Main.out_file a6da6753 n100/r04/n100.r04.s079.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f9c2cb3405855417a5dac9b75760131b8e301224d499615094a3a3561cd4c62d
	sha256:a6da6753637412ea4243db826e53ee9da191f648aa0e4acb03e5a5b780901172
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/151511690cc0ffad033a992b0c116cda47e204590ff0b00394238fce9a61c90d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s079_output"
	    wget -O "n100.r04.s079_output/n100.r04.s079.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s079_output/n100.r04.s079.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s079_output/n100.r04.s079.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s079_output/n100.r04.s079.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s079_output/n100.r04.s079.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s079_output/n100.r04.s079.reference.fas" "n100.r04.s079_output/n100.r04.s079.fq1.fastq" "n100.r04.s079_output/n100.r04.s079.fq2.fastq" | samtools view -bS - > "n100.r04.s079_output/n100.r04.s079.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s079_output/n100.r04.s079.untrimmed.sorted.bam" "n100.r04.s079_output/n100.r04.s079.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s079_output/n100.r04.s079.untrimmed.sorted.bam" -b "n100.r04.s079_output/n100.r04.s079.primers.bed" -p "n100.r04.s079_output/n100.r04.s079.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s079_output/n100.r04.s079.trimmed.sorted.bam" "n100.r04.s079_output/n100.r04.s079.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s079_output/n100.r04.s079.reference.fas" "n100.r04.s079_output/n100.r04.s079.trimmed.sorted.bam" > "n100.r04.s079_output/n100.r04.s079.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s079_output/n100.r04.s079.reference.fas" --call-indels "n100.r04.s079_output/n100.r04.s079.trimmed.sorted.bam" > "n100.r04.s079_output/n100.r04.s079.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s079_output/n100.r04.s079.trimmed.sorted.bam" > "n100.r04.s079_output/n100.r04.s079.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s079_output/n100.r04.s079.depth.txt" "n100.r04.s079_output/n100.r04.s079.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s079_output/n100.r04.s079.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s079_output/n100.r04.s079.reference.fas" | bcftools consensus -m "n100.r04.s079_output/n100.r04.s079.low_depth.tsv" tmp.vcf.gz > "n100.r04.s079_output/n100.r04.s079.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s079_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:05c608f282815de569c58d40f2fdb8f5217706800203cf18f700da16d4b79235 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.7MiB max=125.0MiB
	    disk mean=8.7MiB max=35.7MiB
	    tmp mean=525B max=2.1KiB
2021/07/08 16:57:09 scheduler task d55ad65b (flow b8680145): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s079.tar.gz resources {}
2021/07/08 16:57:09  ->  n100.r04.s079.Main.cp_out_file b8680145 exec extern s3://niema-test/n100/r04/n100.r04.s079.tar.gz 35.7MiB
2021/07/08 16:57:09 scheduler task f588ef7f (flow e35fb762): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:4ae153963226ee704d570e9f4f70acb3d6810895f0d7860b820296a85c94524e -> s3://niema-test/n100/r04/n100.r04.s005.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:09  <-  n100.r04.s005.Main.cp_out_file e35fb762 ok   extern 0s 35.7MiB
2021/07/08 16:57:09 scheduler task 1e419403 (flow 9b73f7e9): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:09 scheduler task 1e419403 (flow 9b73f7e9): promoting objects (try 0): started
2021/07/08 16:57:09 scheduler task 8a9bceb1 (flow 27523267): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:09 scheduler task 8a9bceb1 (flow 27523267): unloading (try 0): started
2021/07/08 16:57:09 scheduler task 8a9bceb1 (flow 27523267): unloading list<val<.=9f84f9a7 35.7MiB> 35.7MiB>
2021/07/08 16:57:09 scheduler task 8a9bceb1 (flow 27523267): unloading val<.=7afa7349 35.4MiB>
2021/07/08 16:57:09 scheduler task 8a9bceb1 (flow 27523267): unloading val<.=8f3a49e4 35.4MiB>
2021/07/08 16:57:09 scheduler task 9181ecd7 (flow cfd8c852): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:09 scheduler task 9181ecd7 (flow cfd8c852): promoting objects (try 0): started
2021/07/08 16:57:09 scheduler task 1e419403 (flow 9b73f7e9): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:09 scheduler task 1e419403 (flow 9b73f7e9): retrieving diagnostic output (try 0): started
2021/07/08 16:57:09 scheduler task 8a9bceb1 (flow 27523267): unloaded list<val<.=9f84f9a7 35.7MiB> 35.7MiB>
2021/07/08 16:57:09 scheduler task 8a9bceb1 (flow 27523267): unloaded val<.=8f3a49e4 35.4MiB>
2021/07/08 16:57:09 scheduler task 8a9bceb1 (flow 27523267): unloaded val<.=7afa7349 35.4MiB>
2021/07/08 16:57:09 scheduler task 8a9bceb1 (flow 27523267): unloading (try 0): successful, next state: complete
2021/07/08 16:57:09  <-  n100.r04.s012.Main.out_file 27523267 ok     exec 5m2s 35.7MiB
2021/07/08 16:57:09 n100.r04.s012.Main.out_file 27523267 n100/r04/n100.r04.s012.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d63b130b3147a56d38f41d3e35b4e1ebb5619331056c0f65987215370ee76507
	sha256:275232671b08b27b6d1abfd20d245807ca0950871620b05f9a54c78139808fd1
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8a9bceb1be253f3aa37c9b181b822daa93bb897b992c93085da6d821a8fdf073
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s012_output"
	    wget -O "n100.r04.s012_output/n100.r04.s012.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s012_output/n100.r04.s012.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s012_output/n100.r04.s012.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s012_output/n100.r04.s012.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s012_output/n100.r04.s012.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s012_output/n100.r04.s012.reference.fas" "n100.r04.s012_output/n100.r04.s012.fq1.fastq" "n100.r04.s012_output/n100.r04.s012.fq2.fastq" | samtools view -bS - > "n100.r04.s012_output/n100.r04.s012.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s012_output/n100.r04.s012.untrimmed.sorted.bam" "n100.r04.s012_output/n100.r04.s012.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s012_output/n100.r04.s012.untrimmed.sorted.bam" -b "n100.r04.s012_output/n100.r04.s012.primers.bed" -p "n100.r04.s012_output/n100.r04.s012.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s012_output/n100.r04.s012.trimmed.sorted.bam" "n100.r04.s012_output/n100.r04.s012.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s012_output/n100.r04.s012.reference.fas" "n100.r04.s012_output/n100.r04.s012.trimmed.sorted.bam" > "n100.r04.s012_output/n100.r04.s012.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s012_output/n100.r04.s012.reference.fas" --call-indels "n100.r04.s012_output/n100.r04.s012.trimmed.sorted.bam" > "n100.r04.s012_output/n100.r04.s012.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s012_output/n100.r04.s012.trimmed.sorted.bam" > "n100.r04.s012_output/n100.r04.s012.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s012_output/n100.r04.s012.depth.txt" "n100.r04.s012_output/n100.r04.s012.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s012_output/n100.r04.s012.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s012_output/n100.r04.s012.reference.fas" | bcftools consensus -m "n100.r04.s012_output/n100.r04.s012.low_depth.tsv" tmp.vcf.gz > "n100.r04.s012_output/n100.r04.s012.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s012_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9f84f9a7c59f1b2bb083d5534b1cae6d5f8807fe4ae9778457655877e4118b1e 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.7MiB max=127.3MiB
	    disk mean=6.1MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 16:57:09 scheduler task a48c6b67 (flow 31bb9923): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s012.tar.gz resources {}
2021/07/08 16:57:09  ->  n100.r04.s012.Main.cp_out_file 31bb9923 exec extern s3://niema-test/n100/r04/n100.r04.s012.tar.gz 35.7MiB
2021/07/08 16:57:09 scheduler task 9181ecd7 (flow cfd8c852): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:09 scheduler task 9181ecd7 (flow cfd8c852): retrieving diagnostic output (try 0): started
2021/07/08 16:57:09 scheduler task 1e419403 (flow 9b73f7e9): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:09 scheduler task 1e419403 (flow 9b73f7e9): retrieving result (try 0): started
2021/07/08 16:57:09 scheduler task 9181ecd7 (flow cfd8c852): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:09 scheduler task 9181ecd7 (flow cfd8c852): retrieving result (try 0): started
2021/07/08 16:57:09 scheduler task d55ad65b (flow b8680145): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:05c608f282815de569c58d40f2fdb8f5217706800203cf18f700da16d4b79235 -> s3://niema-test/n100/r04/n100.r04.s079.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:09  <-  n100.r04.s079.Main.cp_out_file b8680145 ok   extern 0s 35.7MiB
2021/07/08 16:57:09 scheduler task 1e419403 (flow 9b73f7e9): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:09 scheduler task 9181ecd7 (flow cfd8c852): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:09 scheduler task 1e419403 (flow 9b73f7e9): transferring output (try 0): started
2021/07/08 16:57:09 scheduler task 9181ecd7 (flow cfd8c852): transferring output (try 0): started
2021/07/08 16:57:10 scheduler task 64524c69 (flow fac60c68): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:10 scheduler task 64524c69 (flow fac60c68): promoting objects (try 0): started
2021/07/08 16:57:10 scheduler task 64524c69 (flow fac60c68): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:10 scheduler task 64524c69 (flow fac60c68): retrieving diagnostic output (try 0): started
2021/07/08 16:57:10 scheduler task a48c6b67 (flow 31bb9923): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9f84f9a7c59f1b2bb083d5534b1cae6d5f8807fe4ae9778457655877e4118b1e -> s3://niema-test/n100/r04/n100.r04.s012.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:10  <-  n100.r04.s012.Main.cp_out_file 31bb9923 ok   extern 0s 35.7MiB
2021/07/08 16:57:10 scheduler task 64524c69 (flow fac60c68): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:10 scheduler task 64524c69 (flow fac60c68): retrieving result (try 0): started
2021/07/08 16:57:10 scheduler task 1e419403 (flow 9b73f7e9): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:10 scheduler task 9181ecd7 (flow cfd8c852): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:10 scheduler task 1e419403 (flow 9b73f7e9): unloading (try 0): started
2021/07/08 16:57:10 scheduler task 1e419403 (flow 9b73f7e9): unloading list<val<.=a0ffe08a 35.7MiB> 35.7MiB>
2021/07/08 16:57:10 scheduler task 1e419403 (flow 9b73f7e9): unloading val<.=d576e4d0 35.4MiB>
2021/07/08 16:57:10 scheduler task 1e419403 (flow 9b73f7e9): unloading val<.=5f300363 35.4MiB>
2021/07/08 16:57:10 scheduler task 9181ecd7 (flow cfd8c852): unloading (try 0): started
2021/07/08 16:57:10 scheduler task 9181ecd7 (flow cfd8c852): unloading list<val<.=73665cd0 35.8MiB> 35.8MiB>
2021/07/08 16:57:10 scheduler task 9181ecd7 (flow cfd8c852): unloading val<.=052577c4 35.4MiB>
2021/07/08 16:57:10 scheduler task 9181ecd7 (flow cfd8c852): unloading val<.=afd5687c 35.4MiB>
2021/07/08 16:57:10 scheduler task 64524c69 (flow fac60c68): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:10 scheduler task 64524c69 (flow fac60c68): transferring output (try 0): started
2021/07/08 16:57:10 scheduler task 1e419403 (flow 9b73f7e9): unloaded list<val<.=a0ffe08a 35.7MiB> 35.7MiB>
2021/07/08 16:57:10 scheduler task 1e419403 (flow 9b73f7e9): unloaded val<.=5f300363 35.4MiB>
2021/07/08 16:57:10 scheduler task 1e419403 (flow 9b73f7e9): unloaded val<.=d576e4d0 35.4MiB>
2021/07/08 16:57:10 scheduler task 1e419403 (flow 9b73f7e9): unloading (try 0): successful, next state: complete
2021/07/08 16:57:10  <-  n100.r04.s088.Main.out_file 9b73f7e9 ok     exec 5m2s 35.7MiB
2021/07/08 16:57:10 n100.r04.s088.Main.out_file 9b73f7e9 n100/r04/n100.r04.s088.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8016adea81fc0677dc454b02834761155550bf37f72d34df8ce6ef19bc921ee1
	sha256:9b73f7e97183ce4f65355d0c7aff03bc05245b6842c05773b5d2df9177dcdcb8
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1e4194033ea169e3d0aa9796ece5bc58183df265f0a7f29310c4206196e9d032
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s088_output"
	    wget -O "n100.r04.s088_output/n100.r04.s088.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s088_output/n100.r04.s088.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s088_output/n100.r04.s088.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s088_output/n100.r04.s088.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s088_output/n100.r04.s088.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s088_output/n100.r04.s088.reference.fas" "n100.r04.s088_output/n100.r04.s088.fq1.fastq" "n100.r04.s088_output/n100.r04.s088.fq2.fastq" | samtools view -bS - > "n100.r04.s088_output/n100.r04.s088.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s088_output/n100.r04.s088.untrimmed.sorted.bam" "n100.r04.s088_output/n100.r04.s088.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s088_output/n100.r04.s088.untrimmed.sorted.bam" -b "n100.r04.s088_output/n100.r04.s088.primers.bed" -p "n100.r04.s088_output/n100.r04.s088.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s088_output/n100.r04.s088.trimmed.sorted.bam" "n100.r04.s088_output/n100.r04.s088.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s088_output/n100.r04.s088.reference.fas" "n100.r04.s088_output/n100.r04.s088.trimmed.sorted.bam" > "n100.r04.s088_output/n100.r04.s088.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s088_output/n100.r04.s088.reference.fas" --call-indels "n100.r04.s088_output/n100.r04.s088.trimmed.sorted.bam" > "n100.r04.s088_output/n100.r04.s088.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s088_output/n100.r04.s088.trimmed.sorted.bam" > "n100.r04.s088_output/n100.r04.s088.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s088_output/n100.r04.s088.depth.txt" "n100.r04.s088_output/n100.r04.s088.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s088_output/n100.r04.s088.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s088_output/n100.r04.s088.reference.fas" | bcftools consensus -m "n100.r04.s088_output/n100.r04.s088.low_depth.tsv" tmp.vcf.gz > "n100.r04.s088_output/n100.r04.s088.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s088_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a0ffe08adc741570d70f27fa93ac18c8a5dbc641380d8f071b3345d2ed6d5a60 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.1MiB max=129.9MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.0KiB
2021/07/08 16:57:10 scheduler task e96b6c73 (flow df2e94a6): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s088.tar.gz resources {}
2021/07/08 16:57:10  ->  n100.r04.s088.Main.cp_out_file df2e94a6 exec extern s3://niema-test/n100/r04/n100.r04.s088.tar.gz 35.7MiB
2021/07/08 16:57:10 scheduler task 9181ecd7 (flow cfd8c852): unloaded list<val<.=73665cd0 35.8MiB> 35.8MiB>
2021/07/08 16:57:10 scheduler task 9181ecd7 (flow cfd8c852): unloaded val<.=afd5687c 35.4MiB>
2021/07/08 16:57:10 scheduler task 9181ecd7 (flow cfd8c852): unloaded val<.=052577c4 35.4MiB>
2021/07/08 16:57:10 scheduler task 9181ecd7 (flow cfd8c852): unloading (try 0): successful, next state: complete
2021/07/08 16:57:10  <-  n100.r04.s086.Main.out_file cfd8c852 ok     exec 5m3s 35.8MiB
2021/07/08 16:57:10 n100.r04.s086.Main.out_file cfd8c852 n100/r04/n100.r04.s086.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4591546377869f9c3add3c8da387d8232cefea586b3c8d9f2a048b02732e75a1
	sha256:cfd8c8527a2e15e4db024f904801feb43999525a517d9b79a7e2b417ea88af20
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9181ecd7cf99c924576a87f1821e42f2a55d20d6434ab566be9a2ed76b7cd7d8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s086_output"
	    wget -O "n100.r04.s086_output/n100.r04.s086.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s086_output/n100.r04.s086.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s086_output/n100.r04.s086.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s086_output/n100.r04.s086.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s086_output/n100.r04.s086.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s086_output/n100.r04.s086.reference.fas" "n100.r04.s086_output/n100.r04.s086.fq1.fastq" "n100.r04.s086_output/n100.r04.s086.fq2.fastq" | samtools view -bS - > "n100.r04.s086_output/n100.r04.s086.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s086_output/n100.r04.s086.untrimmed.sorted.bam" "n100.r04.s086_output/n100.r04.s086.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s086_output/n100.r04.s086.untrimmed.sorted.bam" -b "n100.r04.s086_output/n100.r04.s086.primers.bed" -p "n100.r04.s086_output/n100.r04.s086.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s086_output/n100.r04.s086.trimmed.sorted.bam" "n100.r04.s086_output/n100.r04.s086.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s086_output/n100.r04.s086.reference.fas" "n100.r04.s086_output/n100.r04.s086.trimmed.sorted.bam" > "n100.r04.s086_output/n100.r04.s086.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s086_output/n100.r04.s086.reference.fas" --call-indels "n100.r04.s086_output/n100.r04.s086.trimmed.sorted.bam" > "n100.r04.s086_output/n100.r04.s086.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s086_output/n100.r04.s086.trimmed.sorted.bam" > "n100.r04.s086_output/n100.r04.s086.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s086_output/n100.r04.s086.depth.txt" "n100.r04.s086_output/n100.r04.s086.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s086_output/n100.r04.s086.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s086_output/n100.r04.s086.reference.fas" | bcftools consensus -m "n100.r04.s086_output/n100.r04.s086.low_depth.tsv" tmp.vcf.gz > "n100.r04.s086_output/n100.r04.s086.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s086_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:73665cd05485c813b3936c27b7fbda126c8b488de4b786347b8b390426fe07bf 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.8MiB max=123.7MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 16:57:10 scheduler task cce356e2 (flow 76fcd664): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s086.tar.gz resources {}
2021/07/08 16:57:10  ->  n100.r04.s086.Main.cp_out_file 76fcd664 exec extern s3://niema-test/n100/r04/n100.r04.s086.tar.gz 35.8MiB
2021/07/08 16:57:11 scheduler task 64524c69 (flow fac60c68): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:11 scheduler task 64524c69 (flow fac60c68): unloading (try 0): started
2021/07/08 16:57:11 scheduler task 64524c69 (flow fac60c68): unloading list<val<.=005b7167 35.8MiB> 35.8MiB>
2021/07/08 16:57:11 scheduler task 64524c69 (flow fac60c68): unloading val<.=2fd0f796 35.4MiB>
2021/07/08 16:57:11 scheduler task 64524c69 (flow fac60c68): unloading val<.=c1e1a056 35.4MiB>
2021/07/08 16:57:11 scheduler task 64524c69 (flow fac60c68): unloaded list<val<.=005b7167 35.8MiB> 35.8MiB>
2021/07/08 16:57:11 scheduler task 64524c69 (flow fac60c68): unloaded val<.=2fd0f796 35.4MiB>
2021/07/08 16:57:11 scheduler task 64524c69 (flow fac60c68): unloaded val<.=c1e1a056 35.4MiB>
2021/07/08 16:57:11 scheduler task 64524c69 (flow fac60c68): unloading (try 0): successful, next state: complete
2021/07/08 16:57:11  <-  n100.r04.s042.Main.out_file fac60c68 ok     exec 5m3s 35.8MiB
2021/07/08 16:57:11 n100.r04.s042.Main.out_file fac60c68 n100/r04/n100.r04.s042.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:70db775543c8e181a7ba46f0a5c3dade7b0042f87bf9a68d53f3cd1b9b87394d
	sha256:fac60c68b2b4435f61d3ee71c267889b004bb7ff783227c466b48c662e439126
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/64524c693bdfa3f1503c6dd6d9944d903c9315d8444b48b4ccd203265f6867c3
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s042_output"
	    wget -O "n100.r04.s042_output/n100.r04.s042.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s042_output/n100.r04.s042.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s042_output/n100.r04.s042.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s042_output/n100.r04.s042.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s042_output/n100.r04.s042.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s042_output/n100.r04.s042.reference.fas" "n100.r04.s042_output/n100.r04.s042.fq1.fastq" "n100.r04.s042_output/n100.r04.s042.fq2.fastq" | samtools view -bS - > "n100.r04.s042_output/n100.r04.s042.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s042_output/n100.r04.s042.untrimmed.sorted.bam" "n100.r04.s042_output/n100.r04.s042.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s042_output/n100.r04.s042.untrimmed.sorted.bam" -b "n100.r04.s042_output/n100.r04.s042.primers.bed" -p "n100.r04.s042_output/n100.r04.s042.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s042_output/n100.r04.s042.trimmed.sorted.bam" "n100.r04.s042_output/n100.r04.s042.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s042_output/n100.r04.s042.reference.fas" "n100.r04.s042_output/n100.r04.s042.trimmed.sorted.bam" > "n100.r04.s042_output/n100.r04.s042.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s042_output/n100.r04.s042.reference.fas" --call-indels "n100.r04.s042_output/n100.r04.s042.trimmed.sorted.bam" > "n100.r04.s042_output/n100.r04.s042.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s042_output/n100.r04.s042.trimmed.sorted.bam" > "n100.r04.s042_output/n100.r04.s042.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s042_output/n100.r04.s042.depth.txt" "n100.r04.s042_output/n100.r04.s042.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s042_output/n100.r04.s042.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s042_output/n100.r04.s042.reference.fas" | bcftools consensus -m "n100.r04.s042_output/n100.r04.s042.low_depth.tsv" tmp.vcf.gz > "n100.r04.s042_output/n100.r04.s042.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s042_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:005b71675c40a8e594ff7da4304f5ab4647cfa054164678fc21e36f95a6edc49 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.0MiB max=131.7MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=703B max=2.1KiB
2021/07/08 16:57:11 scheduler task c16ac0a9 (flow c13a2a3d): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s042.tar.gz resources {}
2021/07/08 16:57:11  ->  n100.r04.s042.Main.cp_out_file c13a2a3d exec extern s3://niema-test/n100/r04/n100.r04.s042.tar.gz 35.8MiB
2021/07/08 16:57:11 scheduler task e96b6c73 (flow df2e94a6): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a0ffe08adc741570d70f27fa93ac18c8a5dbc641380d8f071b3345d2ed6d5a60 -> s3://niema-test/n100/r04/n100.r04.s088.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:11  <-  n100.r04.s088.Main.cp_out_file df2e94a6 ok   extern 0s 35.7MiB
2021/07/08 16:57:11 scheduler task cce356e2 (flow 76fcd664): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:73665cd05485c813b3936c27b7fbda126c8b488de4b786347b8b390426fe07bf -> s3://niema-test/n100/r04/n100.r04.s086.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:57:11  <-  n100.r04.s086.Main.cp_out_file 76fcd664 ok   extern 0s 35.8MiB
2021/07/08 16:57:11 scheduler task b207b735 (flow 5957e4e6): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:11 scheduler task b207b735 (flow 5957e4e6): promoting objects (try 0): started
2021/07/08 16:57:11 scheduler task b207b735 (flow 5957e4e6): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:11 scheduler task b207b735 (flow 5957e4e6): retrieving diagnostic output (try 0): started
2021/07/08 16:57:11 scheduler task 98623b95 (flow 78adf534): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:11 scheduler task 98623b95 (flow 78adf534): promoting objects (try 0): started
2021/07/08 16:57:11 scheduler task b207b735 (flow 5957e4e6): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:11 scheduler task 98623b95 (flow 78adf534): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:11 scheduler task b207b735 (flow 5957e4e6): retrieving result (try 0): started
2021/07/08 16:57:11 scheduler task 98623b95 (flow 78adf534): retrieving diagnostic output (try 0): started
2021/07/08 16:57:11 scheduler task b207b735 (flow 5957e4e6): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:11 scheduler task b207b735 (flow 5957e4e6): transferring output (try 0): started
2021/07/08 16:57:11 scheduler task 98623b95 (flow 78adf534): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:11 scheduler task 98623b95 (flow 78adf534): retrieving result (try 0): started
2021/07/08 16:57:11 scheduler task 98623b95 (flow 78adf534): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:11 scheduler task 98623b95 (flow 78adf534): transferring output (try 0): started
2021/07/08 16:57:11 scheduler task c16ac0a9 (flow c13a2a3d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:005b71675c40a8e594ff7da4304f5ab4647cfa054164678fc21e36f95a6edc49 -> s3://niema-test/n100/r04/n100.r04.s042.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:57:11  <-  n100.r04.s042.Main.cp_out_file c13a2a3d ok   extern 0s 35.8MiB
2021/07/08 16:57:12 scheduler task 3e5b10bd (flow 6f981d52): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:12 scheduler task 3e5b10bd (flow 6f981d52): promoting objects (try 0): started
2021/07/08 16:57:12 scheduler task 4f52560f (flow c39d6831): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:12 scheduler task 4f52560f (flow c39d6831): promoting objects (try 0): started
2021/07/08 16:57:12 scheduler task 3e5b10bd (flow 6f981d52): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:12 scheduler task 3e5b10bd (flow 6f981d52): retrieving diagnostic output (try 0): started
2021/07/08 16:57:12 scheduler task 4f52560f (flow c39d6831): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:12 scheduler task 4f52560f (flow c39d6831): retrieving diagnostic output (try 0): started
2021/07/08 16:57:12 scheduler task b207b735 (flow 5957e4e6): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:12 scheduler task b207b735 (flow 5957e4e6): unloading (try 0): started
2021/07/08 16:57:12 scheduler task b207b735 (flow 5957e4e6): unloading list<val<.=730c1593 35.7MiB> 35.7MiB>
2021/07/08 16:57:12 scheduler task b207b735 (flow 5957e4e6): unloading val<.=78feb7bf 35.4MiB>
2021/07/08 16:57:12 scheduler task b207b735 (flow 5957e4e6): unloading val<.=9da0fa6d 35.4MiB>
2021/07/08 16:57:12 scheduler task 98623b95 (flow 78adf534): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:12 scheduler task b207b735 (flow 5957e4e6): unloaded val<.=78feb7bf 35.4MiB>
2021/07/08 16:57:12 scheduler task b207b735 (flow 5957e4e6): unloaded list<val<.=730c1593 35.7MiB> 35.7MiB>
2021/07/08 16:57:12 scheduler task 3e5b10bd (flow 6f981d52): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:12 scheduler task b207b735 (flow 5957e4e6): unloaded val<.=9da0fa6d 35.4MiB>
2021/07/08 16:57:12 scheduler task b207b735 (flow 5957e4e6): unloading (try 0): successful, next state: complete
2021/07/08 16:57:12 scheduler task 4f52560f (flow c39d6831): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:12 scheduler task 98623b95 (flow 78adf534): unloading (try 0): started
2021/07/08 16:57:12 scheduler task 98623b95 (flow 78adf534): unloading list<val<.=8a1fd1e7 35.7MiB> 35.7MiB>
2021/07/08 16:57:12 scheduler task 98623b95 (flow 78adf534): unloading val<.=075d7503 35.4MiB>
2021/07/08 16:57:12 scheduler task 98623b95 (flow 78adf534): unloading val<.=c8c61628 35.4MiB>
2021/07/08 16:57:12 scheduler task 3e5b10bd (flow 6f981d52): retrieving result (try 0): started
2021/07/08 16:57:12  <-  n100.r04.s028.Main.out_file 5957e4e6 ok     exec 5m4s 35.7MiB
2021/07/08 16:57:12 n100.r04.s028.Main.out_file 5957e4e6 n100/r04/n100.r04.s028.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:808814aa14db38647eb7cad417a996037dea9fd7b643594ee9c0ba19147f02a7
	sha256:5957e4e6d4310bc5238d539bb69090592e3da62a57e033b4a397c6722f518af1
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b207b735e9fc90b2c8cb7d43a3f300fb35db85bbdf258872957ce5db6b475890
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s028_output"
	    wget -O "n100.r04.s028_output/n100.r04.s028.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s028_output/n100.r04.s028.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s028_output/n100.r04.s028.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s028_output/n100.r04.s028.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s028_output/n100.r04.s028.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s028_output/n100.r04.s028.reference.fas" "n100.r04.s028_output/n100.r04.s028.fq1.fastq" "n100.r04.s028_output/n100.r04.s028.fq2.fastq" | samtools view -bS - > "n100.r04.s028_output/n100.r04.s028.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s028_output/n100.r04.s028.untrimmed.sorted.bam" "n100.r04.s028_output/n100.r04.s028.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s028_output/n100.r04.s028.untrimmed.sorted.bam" -b "n100.r04.s028_output/n100.r04.s028.primers.bed" -p "n100.r04.s028_output/n100.r04.s028.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s028_output/n100.r04.s028.trimmed.sorted.bam" "n100.r04.s028_output/n100.r04.s028.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s028_output/n100.r04.s028.reference.fas" "n100.r04.s028_output/n100.r04.s028.trimmed.sorted.bam" > "n100.r04.s028_output/n100.r04.s028.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s028_output/n100.r04.s028.reference.fas" --call-indels "n100.r04.s028_output/n100.r04.s028.trimmed.sorted.bam" > "n100.r04.s028_output/n100.r04.s028.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s028_output/n100.r04.s028.trimmed.sorted.bam" > "n100.r04.s028_output/n100.r04.s028.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s028_output/n100.r04.s028.depth.txt" "n100.r04.s028_output/n100.r04.s028.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s028_output/n100.r04.s028.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s028_output/n100.r04.s028.reference.fas" | bcftools consensus -m "n100.r04.s028_output/n100.r04.s028.low_depth.tsv" tmp.vcf.gz > "n100.r04.s028_output/n100.r04.s028.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s028_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:730c159301995319272fef9d3056467b1b00bfc37e0fdba98596978448ba84b0 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.0MiB max=126.2MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 16:57:12 scheduler task 3034bbd3 (flow 3c0d0ba7): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s028.tar.gz resources {}
2021/07/08 16:57:12  ->  n100.r04.s028.Main.cp_out_file 3c0d0ba7 exec extern s3://niema-test/n100/r04/n100.r04.s028.tar.gz 35.7MiB
2021/07/08 16:57:12 scheduler task 4f52560f (flow c39d6831): retrieving result (try 0): started
2021/07/08 16:57:12 scheduler task 98623b95 (flow 78adf534): unloaded val<.=c8c61628 35.4MiB>
2021/07/08 16:57:12 scheduler task 98623b95 (flow 78adf534): unloaded val<.=075d7503 35.4MiB>
2021/07/08 16:57:12 scheduler task 98623b95 (flow 78adf534): unloaded list<val<.=8a1fd1e7 35.7MiB> 35.7MiB>
2021/07/08 16:57:12 scheduler task 98623b95 (flow 78adf534): unloading (try 0): successful, next state: complete
2021/07/08 16:57:12 scheduler task 3e5b10bd (flow 6f981d52): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:12  <-  n100.r04.s041.Main.out_file 78adf534 ok     exec 5m5s 35.7MiB
2021/07/08 16:57:12 n100.r04.s041.Main.out_file 78adf534 n100/r04/n100.r04.s041.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f5d58879e1cce68cacf38bb2828b47dc223cf7d12d723a0fbf36a366733ba3d0
	sha256:78adf534f8fecc8ae47dc7ab13dc91743a9e87dc0ffe46b04279ca9b55f81564
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/98623b9510952749ac1502c0262b2b3065e2029ec106e54d77b5ebb22ef975be
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s041_output"
	    wget -O "n100.r04.s041_output/n100.r04.s041.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s041_output/n100.r04.s041.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s041_output/n100.r04.s041.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s041_output/n100.r04.s041.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s041_output/n100.r04.s041.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s041_output/n100.r04.s041.reference.fas" "n100.r04.s041_output/n100.r04.s041.fq1.fastq" "n100.r04.s041_output/n100.r04.s041.fq2.fastq" | samtools view -bS - > "n100.r04.s041_output/n100.r04.s041.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s041_output/n100.r04.s041.untrimmed.sorted.bam" "n100.r04.s041_output/n100.r04.s041.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s041_output/n100.r04.s041.untrimmed.sorted.bam" -b "n100.r04.s041_output/n100.r04.s041.primers.bed" -p "n100.r04.s041_output/n100.r04.s041.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s041_output/n100.r04.s041.trimmed.sorted.bam" "n100.r04.s041_output/n100.r04.s041.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s041_output/n100.r04.s041.reference.fas" "n100.r04.s041_output/n100.r04.s041.trimmed.sorted.bam" > "n100.r04.s041_output/n100.r04.s041.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s041_output/n100.r04.s041.reference.fas" --call-indels "n100.r04.s041_output/n100.r04.s041.trimmed.sorted.bam" > "n100.r04.s041_output/n100.r04.s041.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s041_output/n100.r04.s041.trimmed.sorted.bam" > "n100.r04.s041_output/n100.r04.s041.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s041_output/n100.r04.s041.depth.txt" "n100.r04.s041_output/n100.r04.s041.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s041_output/n100.r04.s041.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s041_output/n100.r04.s041.reference.fas" | bcftools consensus -m "n100.r04.s041_output/n100.r04.s041.low_depth.tsv" tmp.vcf.gz > "n100.r04.s041_output/n100.r04.s041.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s041_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:8a1fd1e79db6c9d35df1fd0231aeda04f5177febc5d4185ed8293fb9b8fd402c 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.2MiB max=124.5MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=527B max=2.1KiB
2021/07/08 16:57:12 scheduler task 1f0ecb90 (flow a71f2bf1): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s041.tar.gz resources {}
2021/07/08 16:57:12  ->  n100.r04.s041.Main.cp_out_file a71f2bf1 exec extern s3://niema-test/n100/r04/n100.r04.s041.tar.gz 35.7MiB
2021/07/08 16:57:12 scheduler task 3e5b10bd (flow 6f981d52): transferring output (try 0): started
2021/07/08 16:57:12 scheduler task 4f52560f (flow c39d6831): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:12 scheduler task 4f52560f (flow c39d6831): transferring output (try 0): started
2021/07/08 16:57:12 scheduler task 3e5b10bd (flow 6f981d52): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:12 scheduler task 3e5b10bd (flow 6f981d52): unloading (try 0): started
2021/07/08 16:57:12 scheduler task 3e5b10bd (flow 6f981d52): unloading list<val<.=7dc76cc5 35.8MiB> 35.8MiB>
2021/07/08 16:57:12 scheduler task 3e5b10bd (flow 6f981d52): unloading val<.=3a12190c 35.4MiB>
2021/07/08 16:57:12 scheduler task 3e5b10bd (flow 6f981d52): unloading val<.=ae68fe81 35.4MiB>
2021/07/08 16:57:12 scheduler task 3e5b10bd (flow 6f981d52): unloaded list<val<.=7dc76cc5 35.8MiB> 35.8MiB>
2021/07/08 16:57:12 scheduler task 4f52560f (flow c39d6831): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:13 scheduler task 4f52560f (flow c39d6831): unloading (try 0): started
2021/07/08 16:57:13 scheduler task 4f52560f (flow c39d6831): unloading list<val<.=2a27b092 35.7MiB> 35.7MiB>
2021/07/08 16:57:13 scheduler task 4f52560f (flow c39d6831): unloading val<.=4bf200cc 35.4MiB>
2021/07/08 16:57:13 scheduler task 4f52560f (flow c39d6831): unloading val<.=ebce4dc4 35.4MiB>
2021/07/08 16:57:13 scheduler task 3e5b10bd (flow 6f981d52): unloaded val<.=3a12190c 35.4MiB>
2021/07/08 16:57:13 scheduler task 3e5b10bd (flow 6f981d52): unloaded val<.=ae68fe81 35.4MiB>
2021/07/08 16:57:13 scheduler task 3e5b10bd (flow 6f981d52): unloading (try 0): successful, next state: complete
2021/07/08 16:57:13  <-  n100.r04.s087.Main.out_file 6f981d52 ok     exec 5m5s 35.8MiB
2021/07/08 16:57:13 n100.r04.s087.Main.out_file 6f981d52 n100/r04/n100.r04.s087.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5a38c689051a5a8d5379bc8cbe759c22d008342ae71aabb6a90dbefc3804a38d
	sha256:6f981d52cafab1ece1d97ce3e5300fb5fa59e3d40cb50e76540e4b47968aecc2
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3e5b10bd629d291f2008aab06aef791b43e7f471e0b4717f50ff96a21c3ab94a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s087_output"
	    wget -O "n100.r04.s087_output/n100.r04.s087.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s087_output/n100.r04.s087.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s087_output/n100.r04.s087.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s087_output/n100.r04.s087.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s087_output/n100.r04.s087.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s087_output/n100.r04.s087.reference.fas" "n100.r04.s087_output/n100.r04.s087.fq1.fastq" "n100.r04.s087_output/n100.r04.s087.fq2.fastq" | samtools view -bS - > "n100.r04.s087_output/n100.r04.s087.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s087_output/n100.r04.s087.untrimmed.sorted.bam" "n100.r04.s087_output/n100.r04.s087.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s087_output/n100.r04.s087.untrimmed.sorted.bam" -b "n100.r04.s087_output/n100.r04.s087.primers.bed" -p "n100.r04.s087_output/n100.r04.s087.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s087_output/n100.r04.s087.trimmed.sorted.bam" "n100.r04.s087_output/n100.r04.s087.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s087_output/n100.r04.s087.reference.fas" "n100.r04.s087_output/n100.r04.s087.trimmed.sorted.bam" > "n100.r04.s087_output/n100.r04.s087.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s087_output/n100.r04.s087.reference.fas" --call-indels "n100.r04.s087_output/n100.r04.s087.trimmed.sorted.bam" > "n100.r04.s087_output/n100.r04.s087.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s087_output/n100.r04.s087.trimmed.sorted.bam" > "n100.r04.s087_output/n100.r04.s087.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s087_output/n100.r04.s087.depth.txt" "n100.r04.s087_output/n100.r04.s087.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s087_output/n100.r04.s087.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s087_output/n100.r04.s087.reference.fas" | bcftools consensus -m "n100.r04.s087_output/n100.r04.s087.low_depth.tsv" tmp.vcf.gz > "n100.r04.s087_output/n100.r04.s087.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s087_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:7dc76cc5d4ac8cb680fdb5e0b724b4e35fc439122417e225921260f1924b11c2 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.6MiB max=129.4MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 16:57:13 scheduler task 452be884 (flow acef4f3b): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s087.tar.gz resources {}
2021/07/08 16:57:13  ->  n100.r04.s087.Main.cp_out_file acef4f3b exec extern s3://niema-test/n100/r04/n100.r04.s087.tar.gz 35.8MiB
2021/07/08 16:57:13 scheduler task 4f52560f (flow c39d6831): unloaded val<.=ebce4dc4 35.4MiB>
2021/07/08 16:57:13 scheduler task 4f52560f (flow c39d6831): unloaded val<.=4bf200cc 35.4MiB>
2021/07/08 16:57:13 scheduler task 4f52560f (flow c39d6831): unloaded list<val<.=2a27b092 35.7MiB> 35.7MiB>
2021/07/08 16:57:13 scheduler task 4f52560f (flow c39d6831): unloading (try 0): successful, next state: complete
2021/07/08 16:57:13  <-  n100.r04.s076.Main.out_file c39d6831 ok     exec 5m0s 35.7MiB
2021/07/08 16:57:13 n100.r04.s076.Main.out_file c39d6831 n100/r04/n100.r04.s076.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9510e5c211cd3b4b78eb1ae5e93832af5f46ee5147afcf836b4bd7348f2cd8e7
	sha256:c39d68316e3b892932836bf225232cdb8efd82c22ba742406819280ffbdd4c48
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4f52560f082e5a3c974177dc9a6550814e8e29a78aab756fb0e562dcda81e6aa
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s076_output"
	    wget -O "n100.r04.s076_output/n100.r04.s076.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s076_output/n100.r04.s076.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s076_output/n100.r04.s076.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s076_output/n100.r04.s076.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s076_output/n100.r04.s076.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s076_output/n100.r04.s076.reference.fas" "n100.r04.s076_output/n100.r04.s076.fq1.fastq" "n100.r04.s076_output/n100.r04.s076.fq2.fastq" | samtools view -bS - > "n100.r04.s076_output/n100.r04.s076.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s076_output/n100.r04.s076.untrimmed.sorted.bam" "n100.r04.s076_output/n100.r04.s076.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s076_output/n100.r04.s076.untrimmed.sorted.bam" -b "n100.r04.s076_output/n100.r04.s076.primers.bed" -p "n100.r04.s076_output/n100.r04.s076.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s076_output/n100.r04.s076.trimmed.sorted.bam" "n100.r04.s076_output/n100.r04.s076.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s076_output/n100.r04.s076.reference.fas" "n100.r04.s076_output/n100.r04.s076.trimmed.sorted.bam" > "n100.r04.s076_output/n100.r04.s076.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s076_output/n100.r04.s076.reference.fas" --call-indels "n100.r04.s076_output/n100.r04.s076.trimmed.sorted.bam" > "n100.r04.s076_output/n100.r04.s076.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s076_output/n100.r04.s076.trimmed.sorted.bam" > "n100.r04.s076_output/n100.r04.s076.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s076_output/n100.r04.s076.depth.txt" "n100.r04.s076_output/n100.r04.s076.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s076_output/n100.r04.s076.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s076_output/n100.r04.s076.reference.fas" | bcftools consensus -m "n100.r04.s076_output/n100.r04.s076.low_depth.tsv" tmp.vcf.gz > "n100.r04.s076_output/n100.r04.s076.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s076_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:2a27b0922203320116c8ced98158e2ea0faafee3ba365b69bea4db824d08f782 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.0MiB max=127.3MiB
	    disk mean=10.7MiB max=35.7MiB
	    tmp mean=351B max=2.1KiB
2021/07/08 16:57:13 scheduler task e4747f52 (flow f6494473): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s076.tar.gz resources {}
2021/07/08 16:57:13  ->  n100.r04.s076.Main.cp_out_file f6494473 exec extern s3://niema-test/n100/r04/n100.r04.s076.tar.gz 35.7MiB
2021/07/08 16:57:13 scheduler task 1f0ecb90 (flow a71f2bf1): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:8a1fd1e79db6c9d35df1fd0231aeda04f5177febc5d4185ed8293fb9b8fd402c -> s3://niema-test/n100/r04/n100.r04.s041.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:13  <-  n100.r04.s041.Main.cp_out_file a71f2bf1 ok   extern 0s 35.7MiB
2021/07/08 16:57:13 scheduler task 3034bbd3 (flow 3c0d0ba7): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:730c159301995319272fef9d3056467b1b00bfc37e0fdba98596978448ba84b0 -> s3://niema-test/n100/r04/n100.r04.s028.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:13  <-  n100.r04.s028.Main.cp_out_file 3c0d0ba7 ok   extern 0s 35.7MiB
2021/07/08 16:57:13 scheduler task b4a5ccae (flow 6bc2ef0b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:13 scheduler task b4a5ccae (flow 6bc2ef0b): promoting objects (try 0): started
2021/07/08 16:57:13 scheduler task b4a5ccae (flow 6bc2ef0b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:13 scheduler task b4a5ccae (flow 6bc2ef0b): retrieving diagnostic output (try 0): started
2021/07/08 16:57:13 scheduler task b4a5ccae (flow 6bc2ef0b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:13 scheduler task b4a5ccae (flow 6bc2ef0b): retrieving result (try 0): started
2021/07/08 16:57:13 scheduler task 452be884 (flow acef4f3b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:7dc76cc5d4ac8cb680fdb5e0b724b4e35fc439122417e225921260f1924b11c2 -> s3://niema-test/n100/r04/n100.r04.s087.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:57:13  <-  n100.r04.s087.Main.cp_out_file acef4f3b ok   extern 0s 35.8MiB
2021/07/08 16:57:13 scheduler task b4a5ccae (flow 6bc2ef0b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:13 scheduler task b4a5ccae (flow 6bc2ef0b): transferring output (try 0): started
2021/07/08 16:57:13 scheduler task e4747f52 (flow f6494473): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:2a27b0922203320116c8ced98158e2ea0faafee3ba365b69bea4db824d08f782 -> s3://niema-test/n100/r04/n100.r04.s076.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:13  <-  n100.r04.s076.Main.cp_out_file f6494473 ok   extern 0s 35.7MiB
2021/07/08 16:57:14 scheduler task 331a85cb (flow e0813834): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:14 scheduler task 331a85cb (flow e0813834): promoting objects (try 0): started
2021/07/08 16:57:14 scheduler task 331a85cb (flow e0813834): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:14 scheduler task 331a85cb (flow e0813834): retrieving diagnostic output (try 0): started
2021/07/08 16:57:14 scheduler task 04101a49 (flow 2d151cd2): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:14 scheduler task 04101a49 (flow 2d151cd2): promoting objects (try 0): started
2021/07/08 16:57:14 scheduler task 04101a49 (flow 2d151cd2): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:14 scheduler task 331a85cb (flow e0813834): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:14 scheduler task 04101a49 (flow 2d151cd2): retrieving diagnostic output (try 0): started
2021/07/08 16:57:14 scheduler task 331a85cb (flow e0813834): retrieving result (try 0): started
2021/07/08 16:57:14 scheduler task 44230ac9 (flow 1e40e5b1): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:14 scheduler task 44230ac9 (flow 1e40e5b1): promoting objects (try 0): started
2021/07/08 16:57:14 scheduler task b4a5ccae (flow 6bc2ef0b): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:14 scheduler task b4a5ccae (flow 6bc2ef0b): unloading (try 0): started
2021/07/08 16:57:14 scheduler task b4a5ccae (flow 6bc2ef0b): unloading list<val<.=36ea8e8c 35.7MiB> 35.7MiB>
2021/07/08 16:57:14 scheduler task b4a5ccae (flow 6bc2ef0b): unloading val<.=4557474e 35.4MiB>
2021/07/08 16:57:14 scheduler task b4a5ccae (flow 6bc2ef0b): unloading val<.=05cf8d6f 35.4MiB>
2021/07/08 16:57:14 scheduler task 44230ac9 (flow 1e40e5b1): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:14 scheduler task 331a85cb (flow e0813834): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:14 scheduler task 04101a49 (flow 2d151cd2): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:14 scheduler task 44230ac9 (flow 1e40e5b1): retrieving diagnostic output (try 0): started
2021/07/08 16:57:14 scheduler task 331a85cb (flow e0813834): transferring output (try 0): started
2021/07/08 16:57:14 scheduler task 04101a49 (flow 2d151cd2): retrieving result (try 0): started
2021/07/08 16:57:14 scheduler task b4a5ccae (flow 6bc2ef0b): unloaded list<val<.=36ea8e8c 35.7MiB> 35.7MiB>
2021/07/08 16:57:14 scheduler task b4a5ccae (flow 6bc2ef0b): unloaded val<.=05cf8d6f 35.4MiB>
2021/07/08 16:57:14 scheduler task b4a5ccae (flow 6bc2ef0b): unloaded val<.=4557474e 35.4MiB>
2021/07/08 16:57:14 scheduler task b4a5ccae (flow 6bc2ef0b): unloading (try 0): successful, next state: complete
2021/07/08 16:57:14 scheduler task 82963780 (flow 5fa19d0c): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:14  <-  n100.r04.s072.Main.out_file 6bc2ef0b ok     exec 5m6s 35.7MiB
2021/07/08 16:57:14 n100.r04.s072.Main.out_file 6bc2ef0b n100/r04/n100.r04.s072.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5686d7fff0d49f1cd3d31990a3b806075fd050357bdadefbf1c9afef0f37aa81
	sha256:6bc2ef0bcdfeb4cc847d06e19964691ae2eab9d82832f403fc0edd40e6ace48b
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b4a5ccaefcf4d3b35c31ee5490ce66052ac39de3f9c9feb3dd46747a73040b48
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s072_output"
	    wget -O "n100.r04.s072_output/n100.r04.s072.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s072_output/n100.r04.s072.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s072_output/n100.r04.s072.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s072_output/n100.r04.s072.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s072_output/n100.r04.s072.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s072_output/n100.r04.s072.reference.fas" "n100.r04.s072_output/n100.r04.s072.fq1.fastq" "n100.r04.s072_output/n100.r04.s072.fq2.fastq" | samtools view -bS - > "n100.r04.s072_output/n100.r04.s072.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s072_output/n100.r04.s072.untrimmed.sorted.bam" "n100.r04.s072_output/n100.r04.s072.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s072_output/n100.r04.s072.untrimmed.sorted.bam" -b "n100.r04.s072_output/n100.r04.s072.primers.bed" -p "n100.r04.s072_output/n100.r04.s072.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s072_output/n100.r04.s072.trimmed.sorted.bam" "n100.r04.s072_output/n100.r04.s072.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s072_output/n100.r04.s072.reference.fas" "n100.r04.s072_output/n100.r04.s072.trimmed.sorted.bam" > "n100.r04.s072_output/n100.r04.s072.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s072_output/n100.r04.s072.reference.fas" --call-indels "n100.r04.s072_output/n100.r04.s072.trimmed.sorted.bam" > "n100.r04.s072_output/n100.r04.s072.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s072_output/n100.r04.s072.trimmed.sorted.bam" > "n100.r04.s072_output/n100.r04.s072.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s072_output/n100.r04.s072.depth.txt" "n100.r04.s072_output/n100.r04.s072.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s072_output/n100.r04.s072.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s072_output/n100.r04.s072.reference.fas" | bcftools consensus -m "n100.r04.s072_output/n100.r04.s072.low_depth.tsv" tmp.vcf.gz > "n100.r04.s072_output/n100.r04.s072.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s072_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:36ea8e8c55e66ef018f3e83a99f40189aba96807ae9c87ffba2c55347237e32e 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.8MiB max=127.2MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 16:57:14 scheduler task f532b2d7 (flow f2833aa1): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s072.tar.gz resources {}
2021/07/08 16:57:14  ->  n100.r04.s072.Main.cp_out_file f2833aa1 exec extern s3://niema-test/n100/r04/n100.r04.s072.tar.gz 35.7MiB
2021/07/08 16:57:14 scheduler task 82963780 (flow 5fa19d0c): promoting objects (try 0): started
2021/07/08 16:57:14 scheduler task 44230ac9 (flow 1e40e5b1): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:14 scheduler task 04101a49 (flow 2d151cd2): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:14 scheduler task 44230ac9 (flow 1e40e5b1): retrieving result (try 0): started
2021/07/08 16:57:14 scheduler task 04101a49 (flow 2d151cd2): transferring output (try 0): started
2021/07/08 16:57:14 scheduler task 82963780 (flow 5fa19d0c): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:14 scheduler task 82963780 (flow 5fa19d0c): retrieving diagnostic output (try 0): started
2021/07/08 16:57:14 scheduler task 44230ac9 (flow 1e40e5b1): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:14 scheduler task 44230ac9 (flow 1e40e5b1): transferring output (try 0): started
2021/07/08 16:57:14 scheduler task 82963780 (flow 5fa19d0c): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:14 scheduler task 82963780 (flow 5fa19d0c): retrieving result (try 0): started
2021/07/08 16:57:14 scheduler task 82963780 (flow 5fa19d0c): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:14 scheduler task 82963780 (flow 5fa19d0c): transferring output (try 0): started
2021/07/08 16:57:14 scheduler task fc3e1467 (flow 1d35c114): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:14 scheduler task fc3e1467 (flow 1d35c114): promoting objects (try 0): started
2021/07/08 16:57:14 scheduler task 331a85cb (flow e0813834): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:14 scheduler task 331a85cb (flow e0813834): unloading (try 0): started
2021/07/08 16:57:14 scheduler task 331a85cb (flow e0813834): unloading list<val<.=d3748c35 35.8MiB> 35.8MiB>
2021/07/08 16:57:14 scheduler task 331a85cb (flow e0813834): unloading val<.=5db17739 35.4MiB>
2021/07/08 16:57:14 scheduler task 331a85cb (flow e0813834): unloading val<.=65d7deff 35.4MiB>
2021/07/08 16:57:14 scheduler task fc3e1467 (flow 1d35c114): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:14 scheduler task fc3e1467 (flow 1d35c114): retrieving diagnostic output (try 0): started
2021/07/08 16:57:14 scheduler task 331a85cb (flow e0813834): unloaded val<.=65d7deff 35.4MiB>
2021/07/08 16:57:14 scheduler task 331a85cb (flow e0813834): unloaded list<val<.=d3748c35 35.8MiB> 35.8MiB>
2021/07/08 16:57:14 scheduler task 331a85cb (flow e0813834): unloaded val<.=5db17739 35.4MiB>
2021/07/08 16:57:14 scheduler task 331a85cb (flow e0813834): unloading (try 0): successful, next state: complete
2021/07/08 16:57:14  <-  n100.r04.s067.Main.out_file e0813834 ok     exec 5m2s 35.8MiB
2021/07/08 16:57:14 n100.r04.s067.Main.out_file e0813834 n100/r04/n100.r04.s067.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:205661b87c303501564b44c07406a570876c2cc9bde115aa7232812874b2132b
	sha256:e0813834eb53dfc8b5682749777ac668feab743e718f8024e314a29c7a974b43
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/331a85cbe2239520cd5279c279542ed838aef952d224354dcc960d23410b2298
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s067_output"
	    wget -O "n100.r04.s067_output/n100.r04.s067.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s067_output/n100.r04.s067.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s067_output/n100.r04.s067.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s067_output/n100.r04.s067.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s067_output/n100.r04.s067.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s067_output/n100.r04.s067.reference.fas" "n100.r04.s067_output/n100.r04.s067.fq1.fastq" "n100.r04.s067_output/n100.r04.s067.fq2.fastq" | samtools view -bS - > "n100.r04.s067_output/n100.r04.s067.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s067_output/n100.r04.s067.untrimmed.sorted.bam" "n100.r04.s067_output/n100.r04.s067.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s067_output/n100.r04.s067.untrimmed.sorted.bam" -b "n100.r04.s067_output/n100.r04.s067.primers.bed" -p "n100.r04.s067_output/n100.r04.s067.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s067_output/n100.r04.s067.trimmed.sorted.bam" "n100.r04.s067_output/n100.r04.s067.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s067_output/n100.r04.s067.reference.fas" "n100.r04.s067_output/n100.r04.s067.trimmed.sorted.bam" > "n100.r04.s067_output/n100.r04.s067.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s067_output/n100.r04.s067.reference.fas" --call-indels "n100.r04.s067_output/n100.r04.s067.trimmed.sorted.bam" > "n100.r04.s067_output/n100.r04.s067.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s067_output/n100.r04.s067.trimmed.sorted.bam" > "n100.r04.s067_output/n100.r04.s067.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s067_output/n100.r04.s067.depth.txt" "n100.r04.s067_output/n100.r04.s067.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s067_output/n100.r04.s067.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s067_output/n100.r04.s067.reference.fas" | bcftools consensus -m "n100.r04.s067_output/n100.r04.s067.low_depth.tsv" tmp.vcf.gz > "n100.r04.s067_output/n100.r04.s067.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s067_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d3748c35077eff1cdb9ee6d113e969746d111b277f854395c7e8cbf2a994eb9e 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.6MiB max=130.1MiB
	    disk mean=6.6MiB max=35.8MiB
	    tmp mean=174B max=1.0KiB
2021/07/08 16:57:14 scheduler task bd7cd9a5 (flow 453de24f): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s067.tar.gz resources {}
2021/07/08 16:57:14  ->  n100.r04.s067.Main.cp_out_file 453de24f exec extern s3://niema-test/n100/r04/n100.r04.s067.tar.gz 35.8MiB
2021/07/08 16:57:14 scheduler task 4b88dfbe (flow 5d1a913d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:14 scheduler task 4b88dfbe (flow 5d1a913d): promoting objects (try 0): started
2021/07/08 16:57:14 scheduler task fc3e1467 (flow 1d35c114): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:14 scheduler task fc3e1467 (flow 1d35c114): retrieving result (try 0): started
2021/07/08 16:57:14 scheduler task 5cd20acf (flow 77d99fec): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:14 scheduler task 5cd20acf (flow 77d99fec): promoting objects (try 0): started
2021/07/08 16:57:15 scheduler task 44230ac9 (flow 1e40e5b1): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:15 scheduler task 4b88dfbe (flow 5d1a913d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:15 scheduler task 04101a49 (flow 2d151cd2): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:15 scheduler task 44230ac9 (flow 1e40e5b1): unloading (try 0): started
2021/07/08 16:57:15 scheduler task 44230ac9 (flow 1e40e5b1): unloading list<val<.=f57230de 35.7MiB> 35.7MiB>
2021/07/08 16:57:15 scheduler task 44230ac9 (flow 1e40e5b1): unloading val<.=f06c42fc 35.4MiB>
2021/07/08 16:57:15 scheduler task 44230ac9 (flow 1e40e5b1): unloading val<.=6f989b74 35.4MiB>
2021/07/08 16:57:15 scheduler task 4b88dfbe (flow 5d1a913d): retrieving diagnostic output (try 0): started
2021/07/08 16:57:15 scheduler task 04101a49 (flow 2d151cd2): unloading (try 0): started
2021/07/08 16:57:15 scheduler task 04101a49 (flow 2d151cd2): unloading val<.=90f5cb5d 35.4MiB>
2021/07/08 16:57:15 scheduler task 04101a49 (flow 2d151cd2): unloading val<.=341839f8 35.4MiB>
2021/07/08 16:57:15 scheduler task 04101a49 (flow 2d151cd2): unloading list<val<.=f65a37f9 35.7MiB> 35.7MiB>
2021/07/08 16:57:15 scheduler task fc3e1467 (flow 1d35c114): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:15 scheduler task fc3e1467 (flow 1d35c114): transferring output (try 0): started
2021/07/08 16:57:15 scheduler task 5cd20acf (flow 77d99fec): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:15 scheduler task 5cd20acf (flow 77d99fec): retrieving diagnostic output (try 0): started
2021/07/08 16:57:15 scheduler task 44230ac9 (flow 1e40e5b1): unloaded val<.=6f989b74 35.4MiB>
2021/07/08 16:57:15 scheduler task 44230ac9 (flow 1e40e5b1): unloaded val<.=f06c42fc 35.4MiB>
2021/07/08 16:57:15 scheduler task 44230ac9 (flow 1e40e5b1): unloaded list<val<.=f57230de 35.7MiB> 35.7MiB>
2021/07/08 16:57:15 scheduler task 44230ac9 (flow 1e40e5b1): unloading (try 0): successful, next state: complete
2021/07/08 16:57:15  <-  n100.r04.s045.Main.out_file 1e40e5b1 ok     exec 5m2s 35.7MiB
2021/07/08 16:57:15 n100.r04.s045.Main.out_file 1e40e5b1 n100/r04/n100.r04.s045.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2e646abec853992a6c3c24571b40fe0db82410f367f609915423f5f1248dec77
	sha256:1e40e5b1873497bbbac46fe6e1bd031671cd99045becce198b310a96c4e4f1a0
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/44230ac96ac673a69e1899e7fdb6c7f5dd04e66c558540403e3074ba91d521e6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s045_output"
	    wget -O "n100.r04.s045_output/n100.r04.s045.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s045_output/n100.r04.s045.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s045_output/n100.r04.s045.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s045_output/n100.r04.s045.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s045_output/n100.r04.s045.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s045_output/n100.r04.s045.reference.fas" "n100.r04.s045_output/n100.r04.s045.fq1.fastq" "n100.r04.s045_output/n100.r04.s045.fq2.fastq" | samtools view -bS - > "n100.r04.s045_output/n100.r04.s045.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s045_output/n100.r04.s045.untrimmed.sorted.bam" "n100.r04.s045_output/n100.r04.s045.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s045_output/n100.r04.s045.untrimmed.sorted.bam" -b "n100.r04.s045_output/n100.r04.s045.primers.bed" -p "n100.r04.s045_output/n100.r04.s045.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s045_output/n100.r04.s045.trimmed.sorted.bam" "n100.r04.s045_output/n100.r04.s045.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s045_output/n100.r04.s045.reference.fas" "n100.r04.s045_output/n100.r04.s045.trimmed.sorted.bam" > "n100.r04.s045_output/n100.r04.s045.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s045_output/n100.r04.s045.reference.fas" --call-indels "n100.r04.s045_output/n100.r04.s045.trimmed.sorted.bam" > "n100.r04.s045_output/n100.r04.s045.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s045_output/n100.r04.s045.trimmed.sorted.bam" > "n100.r04.s045_output/n100.r04.s045.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s045_output/n100.r04.s045.depth.txt" "n100.r04.s045_output/n100.r04.s045.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s045_output/n100.r04.s045.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s045_output/n100.r04.s045.reference.fas" | bcftools consensus -m "n100.r04.s045_output/n100.r04.s045.low_depth.tsv" tmp.vcf.gz > "n100.r04.s045_output/n100.r04.s045.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s045_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f57230de919d5555330337f8ddb2c5846c8a6e38fe9be0364c9b7bc8c697081b 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.8MiB max=130.6MiB
	    disk mean=6.2MiB max=35.7MiB
	    tmp mean=345B max=1.0KiB
2021/07/08 16:57:15 scheduler task 9ef8e19c (flow fdf5e90b): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s045.tar.gz resources {}
2021/07/08 16:57:15  ->  n100.r04.s045.Main.cp_out_file fdf5e90b exec extern s3://niema-test/n100/r04/n100.r04.s045.tar.gz 35.7MiB
2021/07/08 16:57:15 scheduler task 4b88dfbe (flow 5d1a913d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:15 scheduler task 4b88dfbe (flow 5d1a913d): retrieving result (try 0): started
2021/07/08 16:57:15 scheduler task f532b2d7 (flow f2833aa1): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:36ea8e8c55e66ef018f3e83a99f40189aba96807ae9c87ffba2c55347237e32e -> s3://niema-test/n100/r04/n100.r04.s072.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:15  <-  n100.r04.s072.Main.cp_out_file f2833aa1 ok   extern 0s 35.7MiB
2021/07/08 16:57:15 scheduler task 04101a49 (flow 2d151cd2): unloaded list<val<.=f65a37f9 35.7MiB> 35.7MiB>
2021/07/08 16:57:15 scheduler task 04101a49 (flow 2d151cd2): unloaded val<.=341839f8 35.4MiB>
2021/07/08 16:57:15 scheduler task 04101a49 (flow 2d151cd2): unloaded val<.=90f5cb5d 35.4MiB>
2021/07/08 16:57:15 scheduler task 04101a49 (flow 2d151cd2): unloading (try 0): successful, next state: complete
2021/07/08 16:57:15  <-  n100.r04.s013.Main.out_file 2d151cd2 ok     exec 5m7s 35.7MiB
2021/07/08 16:57:15 n100.r04.s013.Main.out_file 2d151cd2 n100/r04/n100.r04.s013.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7c6c258425b575711d762ef78331f7ffd3950fe1dcca69e89deac56d37110239
	sha256:2d151cd22e274202b22e919714d520346ce4b8c76f7ded7c60b2e1c9bbd166f9
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/04101a492f9b4dc6a98f348100a3378fd22c1b5a4fe254e518b93090dec3332a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s013_output"
	    wget -O "n100.r04.s013_output/n100.r04.s013.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s013_output/n100.r04.s013.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s013_output/n100.r04.s013.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s013_output/n100.r04.s013.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s013_output/n100.r04.s013.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s013_output/n100.r04.s013.reference.fas" "n100.r04.s013_output/n100.r04.s013.fq1.fastq" "n100.r04.s013_output/n100.r04.s013.fq2.fastq" | samtools view -bS - > "n100.r04.s013_output/n100.r04.s013.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s013_output/n100.r04.s013.untrimmed.sorted.bam" "n100.r04.s013_output/n100.r04.s013.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s013_output/n100.r04.s013.untrimmed.sorted.bam" -b "n100.r04.s013_output/n100.r04.s013.primers.bed" -p "n100.r04.s013_output/n100.r04.s013.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s013_output/n100.r04.s013.trimmed.sorted.bam" "n100.r04.s013_output/n100.r04.s013.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s013_output/n100.r04.s013.reference.fas" "n100.r04.s013_output/n100.r04.s013.trimmed.sorted.bam" > "n100.r04.s013_output/n100.r04.s013.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s013_output/n100.r04.s013.reference.fas" --call-indels "n100.r04.s013_output/n100.r04.s013.trimmed.sorted.bam" > "n100.r04.s013_output/n100.r04.s013.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s013_output/n100.r04.s013.trimmed.sorted.bam" > "n100.r04.s013_output/n100.r04.s013.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s013_output/n100.r04.s013.depth.txt" "n100.r04.s013_output/n100.r04.s013.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s013_output/n100.r04.s013.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s013_output/n100.r04.s013.reference.fas" | bcftools consensus -m "n100.r04.s013_output/n100.r04.s013.low_depth.tsv" tmp.vcf.gz > "n100.r04.s013_output/n100.r04.s013.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s013_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f65a37f9208355b3254fc5e16a7fb38460c6c5774e19b77082d740b927101b4a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.9MiB max=128.8MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 16:57:15 scheduler task 3a5f8db2 (flow fd4bdb18): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s013.tar.gz resources {}
2021/07/08 16:57:15  ->  n100.r04.s013.Main.cp_out_file fd4bdb18 exec extern s3://niema-test/n100/r04/n100.r04.s013.tar.gz 35.7MiB
2021/07/08 16:57:15 scheduler task 5cd20acf (flow 77d99fec): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:15 scheduler task 5cd20acf (flow 77d99fec): retrieving result (try 0): started
2021/07/08 16:57:15 scheduler task 82963780 (flow 5fa19d0c): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:15 scheduler task 82963780 (flow 5fa19d0c): unloading (try 0): started
2021/07/08 16:57:15 scheduler task 82963780 (flow 5fa19d0c): unloading list<val<.=1d14ecf1 35.7MiB> 35.7MiB>
2021/07/08 16:57:15 scheduler task 82963780 (flow 5fa19d0c): unloading val<.=e03117ba 35.4MiB>
2021/07/08 16:57:15 scheduler task 82963780 (flow 5fa19d0c): unloading val<.=e7f5a4c4 35.4MiB>
2021/07/08 16:57:15 scheduler task 4b88dfbe (flow 5d1a913d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:15 scheduler task 4b88dfbe (flow 5d1a913d): transferring output (try 0): started
2021/07/08 16:57:15 scheduler task 4bae0b4d (flow 98c409bc): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:15 scheduler task 5cd20acf (flow 77d99fec): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:15 scheduler task 4bae0b4d (flow 98c409bc): promoting objects (try 0): started
2021/07/08 16:57:15 scheduler task 5cd20acf (flow 77d99fec): transferring output (try 0): started
2021/07/08 16:57:15 scheduler task 82963780 (flow 5fa19d0c): unloaded list<val<.=1d14ecf1 35.7MiB> 35.7MiB>
2021/07/08 16:57:15 scheduler task 82963780 (flow 5fa19d0c): unloaded val<.=e7f5a4c4 35.4MiB>
2021/07/08 16:57:15 scheduler task 82963780 (flow 5fa19d0c): unloaded val<.=e03117ba 35.4MiB>
2021/07/08 16:57:15 scheduler task 82963780 (flow 5fa19d0c): unloading (try 0): successful, next state: complete
2021/07/08 16:57:15  <-  n100.r04.s098.Main.out_file 5fa19d0c ok     exec 5m2s 35.7MiB
2021/07/08 16:57:15 n100.r04.s098.Main.out_file 5fa19d0c n100/r04/n100.r04.s098.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c0a2f31623ce6770915a9276acb75e67784deb49ed200389e465e0d1d2ba5075
	sha256:5fa19d0c2984e42c6b10673f44f6c83e2911257d654c8e867e7af87c0a9e46ef
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/829637807022f12a3077730b2a58fb7efbb2e45ebbf8818ee656dd37cbd2d0cf
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s098_output"
	    wget -O "n100.r04.s098_output/n100.r04.s098.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s098_output/n100.r04.s098.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s098_output/n100.r04.s098.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s098_output/n100.r04.s098.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s098_output/n100.r04.s098.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s098_output/n100.r04.s098.reference.fas" "n100.r04.s098_output/n100.r04.s098.fq1.fastq" "n100.r04.s098_output/n100.r04.s098.fq2.fastq" | samtools view -bS - > "n100.r04.s098_output/n100.r04.s098.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s098_output/n100.r04.s098.untrimmed.sorted.bam" "n100.r04.s098_output/n100.r04.s098.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s098_output/n100.r04.s098.untrimmed.sorted.bam" -b "n100.r04.s098_output/n100.r04.s098.primers.bed" -p "n100.r04.s098_output/n100.r04.s098.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s098_output/n100.r04.s098.trimmed.sorted.bam" "n100.r04.s098_output/n100.r04.s098.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s098_output/n100.r04.s098.reference.fas" "n100.r04.s098_output/n100.r04.s098.trimmed.sorted.bam" > "n100.r04.s098_output/n100.r04.s098.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s098_output/n100.r04.s098.reference.fas" --call-indels "n100.r04.s098_output/n100.r04.s098.trimmed.sorted.bam" > "n100.r04.s098_output/n100.r04.s098.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s098_output/n100.r04.s098.trimmed.sorted.bam" > "n100.r04.s098_output/n100.r04.s098.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s098_output/n100.r04.s098.depth.txt" "n100.r04.s098_output/n100.r04.s098.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s098_output/n100.r04.s098.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s098_output/n100.r04.s098.reference.fas" | bcftools consensus -m "n100.r04.s098_output/n100.r04.s098.low_depth.tsv" tmp.vcf.gz > "n100.r04.s098_output/n100.r04.s098.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s098_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:1d14ecf1a95143f1cb88918f62d3a91ad406f4b313831752ea48ef57eb1708c2 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.7MiB max=124.4MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=174B max=1.0KiB
2021/07/08 16:57:15 scheduler task e13275a5 (flow 8cb9b838): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s098.tar.gz resources {}
2021/07/08 16:57:15  ->  n100.r04.s098.Main.cp_out_file 8cb9b838 exec extern s3://niema-test/n100/r04/n100.r04.s098.tar.gz 35.7MiB
2021/07/08 16:57:15 scheduler task 4bae0b4d (flow 98c409bc): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:15 scheduler task 4bae0b4d (flow 98c409bc): retrieving diagnostic output (try 0): started
2021/07/08 16:57:15 scheduler task 4bae0b4d (flow 98c409bc): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:15 scheduler task 4bae0b4d (flow 98c409bc): retrieving result (try 0): started
2021/07/08 16:57:15 scheduler task fc3e1467 (flow 1d35c114): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:15 scheduler task 4bae0b4d (flow 98c409bc): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:15 scheduler task fc3e1467 (flow 1d35c114): unloading (try 0): started
2021/07/08 16:57:15 scheduler task fc3e1467 (flow 1d35c114): unloading list<val<.=7dc94825 35.8MiB> 35.8MiB>
2021/07/08 16:57:15 scheduler task fc3e1467 (flow 1d35c114): unloading val<.=fc02fa41 35.4MiB>
2021/07/08 16:57:15 scheduler task fc3e1467 (flow 1d35c114): unloading val<.=e9142c4c 35.4MiB>
2021/07/08 16:57:15 scheduler task 4bae0b4d (flow 98c409bc): transferring output (try 0): started
2021/07/08 16:57:15 scheduler task bd7cd9a5 (flow 453de24f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d3748c35077eff1cdb9ee6d113e969746d111b277f854395c7e8cbf2a994eb9e -> s3://niema-test/n100/r04/n100.r04.s067.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:57:15  <-  n100.r04.s067.Main.cp_out_file 453de24f ok   extern 0s 35.8MiB
2021/07/08 16:57:15 scheduler task fc3e1467 (flow 1d35c114): unloaded val<.=fc02fa41 35.4MiB>
2021/07/08 16:57:15 scheduler task fc3e1467 (flow 1d35c114): unloaded val<.=e9142c4c 35.4MiB>
2021/07/08 16:57:15 scheduler task fc3e1467 (flow 1d35c114): unloaded list<val<.=7dc94825 35.8MiB> 35.8MiB>
2021/07/08 16:57:15 scheduler task fc3e1467 (flow 1d35c114): unloading (try 0): successful, next state: complete
2021/07/08 16:57:15  <-  n100.r04.s057.Main.out_file 1d35c114 ok     exec 5m7s 35.8MiB
2021/07/08 16:57:15 n100.r04.s057.Main.out_file 1d35c114 n100/r04/n100.r04.s057.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:61651064d8ad0d48bfbde48d07caeb432571122d5dd78d66c514235781ada270
	sha256:1d35c1146eebddfeec9ca4f1d0ea3435ce2da6cda89218f559188284f73730bd
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fc3e1467dba5ed111df92a917a941e4fbd0f4f44e691ac2ba5131e13384d1ae3
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s057_output"
	    wget -O "n100.r04.s057_output/n100.r04.s057.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s057_output/n100.r04.s057.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s057_output/n100.r04.s057.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s057_output/n100.r04.s057.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s057_output/n100.r04.s057.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s057_output/n100.r04.s057.reference.fas" "n100.r04.s057_output/n100.r04.s057.fq1.fastq" "n100.r04.s057_output/n100.r04.s057.fq2.fastq" | samtools view -bS - > "n100.r04.s057_output/n100.r04.s057.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s057_output/n100.r04.s057.untrimmed.sorted.bam" "n100.r04.s057_output/n100.r04.s057.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s057_output/n100.r04.s057.untrimmed.sorted.bam" -b "n100.r04.s057_output/n100.r04.s057.primers.bed" -p "n100.r04.s057_output/n100.r04.s057.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s057_output/n100.r04.s057.trimmed.sorted.bam" "n100.r04.s057_output/n100.r04.s057.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s057_output/n100.r04.s057.reference.fas" "n100.r04.s057_output/n100.r04.s057.trimmed.sorted.bam" > "n100.r04.s057_output/n100.r04.s057.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s057_output/n100.r04.s057.reference.fas" --call-indels "n100.r04.s057_output/n100.r04.s057.trimmed.sorted.bam" > "n100.r04.s057_output/n100.r04.s057.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s057_output/n100.r04.s057.trimmed.sorted.bam" > "n100.r04.s057_output/n100.r04.s057.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s057_output/n100.r04.s057.depth.txt" "n100.r04.s057_output/n100.r04.s057.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s057_output/n100.r04.s057.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s057_output/n100.r04.s057.reference.fas" | bcftools consensus -m "n100.r04.s057_output/n100.r04.s057.low_depth.tsv" tmp.vcf.gz > "n100.r04.s057_output/n100.r04.s057.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s057_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:7dc948256a34c27c5a36c67c1ea9809b832338ef9277efb0b6318387748c6f51 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.2MiB max=126.9MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=863B max=3.0KiB
2021/07/08 16:57:15 scheduler task 658021a5 (flow af50757e): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s057.tar.gz resources {}
2021/07/08 16:57:15  ->  n100.r04.s057.Main.cp_out_file af50757e exec extern s3://niema-test/n100/r04/n100.r04.s057.tar.gz 35.8MiB
2021/07/08 16:57:15 scheduler task 50845845 (flow cc504ab7): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:15 scheduler task 50845845 (flow cc504ab7): promoting objects (try 0): started
2021/07/08 16:57:15 scheduler task 50845845 (flow cc504ab7): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:15 scheduler task 50845845 (flow cc504ab7): retrieving diagnostic output (try 0): started
2021/07/08 16:57:15 scheduler task 9ef8e19c (flow fdf5e90b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f57230de919d5555330337f8ddb2c5846c8a6e38fe9be0364c9b7bc8c697081b -> s3://niema-test/n100/r04/n100.r04.s045.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:15  <-  n100.r04.s045.Main.cp_out_file fdf5e90b ok   extern 0s 35.7MiB
2021/07/08 16:57:15 scheduler task 4b88dfbe (flow 5d1a913d): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:15 scheduler task 4b88dfbe (flow 5d1a913d): unloading (try 0): started
2021/07/08 16:57:15 scheduler task 4b88dfbe (flow 5d1a913d): unloading list<val<.=3fa723a7 35.8MiB> 35.8MiB>
2021/07/08 16:57:15 scheduler task 4b88dfbe (flow 5d1a913d): unloading val<.=ad9e1a14 35.4MiB>
2021/07/08 16:57:15 scheduler task 4b88dfbe (flow 5d1a913d): unloading val<.=52e365b2 35.4MiB>
2021/07/08 16:57:15 scheduler task 50845845 (flow cc504ab7): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:15 scheduler task 50845845 (flow cc504ab7): retrieving result (try 0): started
2021/07/08 16:57:15 scheduler task 5cd20acf (flow 77d99fec): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:15 scheduler task 5cd20acf (flow 77d99fec): unloading (try 0): started
2021/07/08 16:57:15 scheduler task 5cd20acf (flow 77d99fec): unloading list<val<.=90389daa 35.8MiB> 35.8MiB>
2021/07/08 16:57:15 scheduler task 5cd20acf (flow 77d99fec): unloading val<.=d2607697 35.4MiB>
2021/07/08 16:57:15 scheduler task 5cd20acf (flow 77d99fec): unloading val<.=ca1d610a 35.4MiB>
2021/07/08 16:57:15 scheduler task 4b88dfbe (flow 5d1a913d): unloaded val<.=ad9e1a14 35.4MiB>
2021/07/08 16:57:15 scheduler task 4b88dfbe (flow 5d1a913d): unloaded val<.=52e365b2 35.4MiB>
2021/07/08 16:57:15 scheduler task 4b88dfbe (flow 5d1a913d): unloaded list<val<.=3fa723a7 35.8MiB> 35.8MiB>
2021/07/08 16:57:15 scheduler task 4b88dfbe (flow 5d1a913d): unloading (try 0): successful, next state: complete
2021/07/08 16:57:15  <-  n100.r04.s022.Main.out_file 5d1a913d ok     exec 5m3s 35.8MiB
2021/07/08 16:57:15 n100.r04.s022.Main.out_file 5d1a913d n100/r04/n100.r04.s022.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3416efbafcec434b2355f50e566b0d3adfe3a296bd3d8dd3f1b4ce037550b092
	sha256:5d1a913d91cd9a09df1969bfa73535a7dc4e61bc8eb9423e4cfa28eba545d2e5
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4b88dfbec3e64d6bd896504558602c2c45009d40ae2af0b1129ca19d52eb4ca1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s022_output"
	    wget -O "n100.r04.s022_output/n100.r04.s022.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s022_output/n100.r04.s022.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s022_output/n100.r04.s022.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s022_output/n100.r04.s022.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s022_output/n100.r04.s022.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s022_output/n100.r04.s022.reference.fas" "n100.r04.s022_output/n100.r04.s022.fq1.fastq" "n100.r04.s022_output/n100.r04.s022.fq2.fastq" | samtools view -bS - > "n100.r04.s022_output/n100.r04.s022.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s022_output/n100.r04.s022.untrimmed.sorted.bam" "n100.r04.s022_output/n100.r04.s022.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s022_output/n100.r04.s022.untrimmed.sorted.bam" -b "n100.r04.s022_output/n100.r04.s022.primers.bed" -p "n100.r04.s022_output/n100.r04.s022.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s022_output/n100.r04.s022.trimmed.sorted.bam" "n100.r04.s022_output/n100.r04.s022.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s022_output/n100.r04.s022.reference.fas" "n100.r04.s022_output/n100.r04.s022.trimmed.sorted.bam" > "n100.r04.s022_output/n100.r04.s022.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s022_output/n100.r04.s022.reference.fas" --call-indels "n100.r04.s022_output/n100.r04.s022.trimmed.sorted.bam" > "n100.r04.s022_output/n100.r04.s022.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s022_output/n100.r04.s022.trimmed.sorted.bam" > "n100.r04.s022_output/n100.r04.s022.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s022_output/n100.r04.s022.depth.txt" "n100.r04.s022_output/n100.r04.s022.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s022_output/n100.r04.s022.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s022_output/n100.r04.s022.reference.fas" | bcftools consensus -m "n100.r04.s022_output/n100.r04.s022.low_depth.tsv" tmp.vcf.gz > "n100.r04.s022_output/n100.r04.s022.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s022_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:3fa723a7d54ddc35294e5c6e56db9a0fe235d10da5083a66056ff6c8ebace286 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.8MiB max=129.3MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=174B max=1.0KiB
2021/07/08 16:57:15 scheduler task 79c16a1a (flow e8fa5897): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s022.tar.gz resources {}
2021/07/08 16:57:15  ->  n100.r04.s022.Main.cp_out_file e8fa5897 exec extern s3://niema-test/n100/r04/n100.r04.s022.tar.gz 35.8MiB
2021/07/08 16:57:15 scheduler task 50845845 (flow cc504ab7): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:15 scheduler task 54f6f6fd (flow c54bfbbc): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:15 scheduler task 50845845 (flow cc504ab7): transferring output (try 0): started
2021/07/08 16:57:15 scheduler task 54f6f6fd (flow c54bfbbc): promoting objects (try 0): started
2021/07/08 16:57:15 scheduler task 5cd20acf (flow 77d99fec): unloaded val<.=ca1d610a 35.4MiB>
2021/07/08 16:57:15 scheduler task 5cd20acf (flow 77d99fec): unloaded val<.=d2607697 35.4MiB>
2021/07/08 16:57:15 scheduler task 5cd20acf (flow 77d99fec): unloaded list<val<.=90389daa 35.8MiB> 35.8MiB>
2021/07/08 16:57:15 scheduler task 5cd20acf (flow 77d99fec): unloading (try 0): successful, next state: complete
2021/07/08 16:57:15  <-  n100.r04.s010.Main.out_file 77d99fec ok     exec 5m3s 35.8MiB
2021/07/08 16:57:15 n100.r04.s010.Main.out_file 77d99fec n100/r04/n100.r04.s010.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2670e12922915f44491697aff42b80a2f0cff04498cc58282f25bf2b2ec264ec
	sha256:77d99fecb641d50d33fe6c6375ee70b28fd3ee0a18228ad3e275ed9a5a953b66
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5cd20acf5340d3c265ff5c17656000f7054619873c1ce4d0c44b376597ae6007
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s010_output"
	    wget -O "n100.r04.s010_output/n100.r04.s010.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s010_output/n100.r04.s010.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s010_output/n100.r04.s010.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s010_output/n100.r04.s010.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s010_output/n100.r04.s010.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s010_output/n100.r04.s010.reference.fas" "n100.r04.s010_output/n100.r04.s010.fq1.fastq" "n100.r04.s010_output/n100.r04.s010.fq2.fastq" | samtools view -bS - > "n100.r04.s010_output/n100.r04.s010.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s010_output/n100.r04.s010.untrimmed.sorted.bam" "n100.r04.s010_output/n100.r04.s010.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s010_output/n100.r04.s010.untrimmed.sorted.bam" -b "n100.r04.s010_output/n100.r04.s010.primers.bed" -p "n100.r04.s010_output/n100.r04.s010.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s010_output/n100.r04.s010.trimmed.sorted.bam" "n100.r04.s010_output/n100.r04.s010.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s010_output/n100.r04.s010.reference.fas" "n100.r04.s010_output/n100.r04.s010.trimmed.sorted.bam" > "n100.r04.s010_output/n100.r04.s010.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s010_output/n100.r04.s010.reference.fas" --call-indels "n100.r04.s010_output/n100.r04.s010.trimmed.sorted.bam" > "n100.r04.s010_output/n100.r04.s010.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s010_output/n100.r04.s010.trimmed.sorted.bam" > "n100.r04.s010_output/n100.r04.s010.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s010_output/n100.r04.s010.depth.txt" "n100.r04.s010_output/n100.r04.s010.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s010_output/n100.r04.s010.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s010_output/n100.r04.s010.reference.fas" | bcftools consensus -m "n100.r04.s010_output/n100.r04.s010.low_depth.tsv" tmp.vcf.gz > "n100.r04.s010_output/n100.r04.s010.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s010_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:90389daaa0695c791adc937157eb8c070459a749921e1fcb48573987621dd65f 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.5MiB max=128.9MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=862B max=3.0KiB
2021/07/08 16:57:15 scheduler task 63feea9a (flow e5c8e58c): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s010.tar.gz resources {}
2021/07/08 16:57:15  ->  n100.r04.s010.Main.cp_out_file e5c8e58c exec extern s3://niema-test/n100/r04/n100.r04.s010.tar.gz 35.8MiB
2021/07/08 16:57:16 scheduler task ed42d1d8 (flow ec834335): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:16 scheduler task ed42d1d8 (flow ec834335): promoting objects (try 0): started
2021/07/08 16:57:16 scheduler task 54f6f6fd (flow c54bfbbc): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:16 scheduler task 54f6f6fd (flow c54bfbbc): retrieving diagnostic output (try 0): started
2021/07/08 16:57:16 scheduler task 4bae0b4d (flow 98c409bc): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:16 scheduler task 4bae0b4d (flow 98c409bc): unloading (try 0): started
2021/07/08 16:57:16 scheduler task 4bae0b4d (flow 98c409bc): unloading list<val<.=0fc7a6ae 35.7MiB> 35.7MiB>
2021/07/08 16:57:16 scheduler task 4bae0b4d (flow 98c409bc): unloading val<.=40480dbf 35.4MiB>
2021/07/08 16:57:16 scheduler task 4bae0b4d (flow 98c409bc): unloading val<.=515c3a99 35.4MiB>
2021/07/08 16:57:16 scheduler task ed42d1d8 (flow ec834335): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:16 scheduler task ed42d1d8 (flow ec834335): retrieving diagnostic output (try 0): started
2021/07/08 16:57:16 scheduler task 54f6f6fd (flow c54bfbbc): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:16 scheduler task 54f6f6fd (flow c54bfbbc): retrieving result (try 0): started
2021/07/08 16:57:16 scheduler task 4bae0b4d (flow 98c409bc): unloaded val<.=515c3a99 35.4MiB>
2021/07/08 16:57:16 scheduler task 4bae0b4d (flow 98c409bc): unloaded list<val<.=0fc7a6ae 35.7MiB> 35.7MiB>
2021/07/08 16:57:16 scheduler task 8746c175 (flow e75028fb): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:16 scheduler task 4bae0b4d (flow 98c409bc): unloaded val<.=40480dbf 35.4MiB>
2021/07/08 16:57:16 scheduler task 4bae0b4d (flow 98c409bc): unloading (try 0): successful, next state: complete
2021/07/08 16:57:16 scheduler task 8746c175 (flow e75028fb): promoting objects (try 0): started
2021/07/08 16:57:16 scheduler task e13275a5 (flow 8cb9b838): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:1d14ecf1a95143f1cb88918f62d3a91ad406f4b313831752ea48ef57eb1708c2 -> s3://niema-test/n100/r04/n100.r04.s098.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:16  <-  n100.r04.s098.Main.cp_out_file 8cb9b838 ok   extern 0s 35.7MiB
2021/07/08 16:57:16  <-  n100.r04.s090.Main.out_file 98c409bc ok     exec 5m3s 35.7MiB
2021/07/08 16:57:16 n100.r04.s090.Main.out_file 98c409bc n100/r04/n100.r04.s090.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1701a81bbbbec0ec7a5da28f3c3dcab0fee5c7826e718124bed7a3ec68b99c18
	sha256:98c409bc88d8c83d9cf4b280fd2648f3239099506b1bf680df85e3aa3f233c56
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4bae0b4d2675dd3d3871242a06bdc28e664f5cfb64d6b2c7b9ce7a8e277e495c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s090_output"
	    wget -O "n100.r04.s090_output/n100.r04.s090.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s090_output/n100.r04.s090.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s090_output/n100.r04.s090.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s090_output/n100.r04.s090.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s090_output/n100.r04.s090.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s090_output/n100.r04.s090.reference.fas" "n100.r04.s090_output/n100.r04.s090.fq1.fastq" "n100.r04.s090_output/n100.r04.s090.fq2.fastq" | samtools view -bS - > "n100.r04.s090_output/n100.r04.s090.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s090_output/n100.r04.s090.untrimmed.sorted.bam" "n100.r04.s090_output/n100.r04.s090.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s090_output/n100.r04.s090.untrimmed.sorted.bam" -b "n100.r04.s090_output/n100.r04.s090.primers.bed" -p "n100.r04.s090_output/n100.r04.s090.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s090_output/n100.r04.s090.trimmed.sorted.bam" "n100.r04.s090_output/n100.r04.s090.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s090_output/n100.r04.s090.reference.fas" "n100.r04.s090_output/n100.r04.s090.trimmed.sorted.bam" > "n100.r04.s090_output/n100.r04.s090.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s090_output/n100.r04.s090.reference.fas" --call-indels "n100.r04.s090_output/n100.r04.s090.trimmed.sorted.bam" > "n100.r04.s090_output/n100.r04.s090.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s090_output/n100.r04.s090.trimmed.sorted.bam" > "n100.r04.s090_output/n100.r04.s090.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s090_output/n100.r04.s090.depth.txt" "n100.r04.s090_output/n100.r04.s090.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s090_output/n100.r04.s090.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s090_output/n100.r04.s090.reference.fas" | bcftools consensus -m "n100.r04.s090_output/n100.r04.s090.low_depth.tsv" tmp.vcf.gz > "n100.r04.s090_output/n100.r04.s090.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s090_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:0fc7a6ae8eb4d0a9c4849160e042afefdcc5bbb7057cfc7cc889e51e0950c43e 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.2MiB max=127.5MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 16:57:16 scheduler task 7748b342 (flow 80ed5772): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s090.tar.gz resources {}
2021/07/08 16:57:16  ->  n100.r04.s090.Main.cp_out_file 80ed5772 exec extern s3://niema-test/n100/r04/n100.r04.s090.tar.gz 35.7MiB
2021/07/08 16:57:16 scheduler task 3a5f8db2 (flow fd4bdb18): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f65a37f9208355b3254fc5e16a7fb38460c6c5774e19b77082d740b927101b4a -> s3://niema-test/n100/r04/n100.r04.s013.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:16  <-  n100.r04.s013.Main.cp_out_file fd4bdb18 ok   extern 0s 35.7MiB
2021/07/08 16:57:16 scheduler task ed42d1d8 (flow ec834335): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:16 scheduler task 54f6f6fd (flow c54bfbbc): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:16 scheduler task ed42d1d8 (flow ec834335): retrieving result (try 0): started
2021/07/08 16:57:16 scheduler task 54f6f6fd (flow c54bfbbc): transferring output (try 0): started
2021/07/08 16:57:16 scheduler task 8746c175 (flow e75028fb): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:16 scheduler task 8746c175 (flow e75028fb): retrieving diagnostic output (try 0): started
2021/07/08 16:57:16 scheduler task ed42d1d8 (flow ec834335): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:16 scheduler task ed42d1d8 (flow ec834335): transferring output (try 0): started
2021/07/08 16:57:16 scheduler task 658021a5 (flow af50757e): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:7dc948256a34c27c5a36c67c1ea9809b832338ef9277efb0b6318387748c6f51 -> s3://niema-test/n100/r04/n100.r04.s057.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:57:16  <-  n100.r04.s057.Main.cp_out_file af50757e ok   extern 0s 35.8MiB
2021/07/08 16:57:16 scheduler task 8746c175 (flow e75028fb): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:16 scheduler task 8746c175 (flow e75028fb): retrieving result (try 0): started
2021/07/08 16:57:16 scheduler task 8746c175 (flow e75028fb): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:16 scheduler task 8746c175 (flow e75028fb): transferring output (try 0): started
2021/07/08 16:57:16 scheduler task 50845845 (flow cc504ab7): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:16 scheduler task 50845845 (flow cc504ab7): unloading (try 0): started
2021/07/08 16:57:16 scheduler task 50845845 (flow cc504ab7): unloading list<val<.=4bee0598 35.7MiB> 35.7MiB>
2021/07/08 16:57:16 scheduler task 50845845 (flow cc504ab7): unloading val<.=7938656b 35.4MiB>
2021/07/08 16:57:16 scheduler task 50845845 (flow cc504ab7): unloading val<.=cc7e7ccc 35.4MiB>
2021/07/08 16:57:16 scheduler task f1849b51 (flow ff5069df): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:16 scheduler task f1849b51 (flow ff5069df): promoting objects (try 0): started
2021/07/08 16:57:16 scheduler task 50845845 (flow cc504ab7): unloaded val<.=7938656b 35.4MiB>
2021/07/08 16:57:16 scheduler task 50845845 (flow cc504ab7): unloaded list<val<.=4bee0598 35.7MiB> 35.7MiB>
2021/07/08 16:57:16 scheduler task 50845845 (flow cc504ab7): unloaded val<.=cc7e7ccc 35.4MiB>
2021/07/08 16:57:16 scheduler task 50845845 (flow cc504ab7): unloading (try 0): successful, next state: complete
2021/07/08 16:57:16  <-  n100.r04.s062.Main.out_file cc504ab7 ok     exec 5m4s 35.7MiB
2021/07/08 16:57:16 n100.r04.s062.Main.out_file cc504ab7 n100/r04/n100.r04.s062.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0ead5a86922efa8ffead4dce50c5334f61c107b912746b1df11b83c47dfa07b7
	sha256:cc504ab797685c6a9afb0cfd0d32fbe2c8bfef855a86cf2cf49324113cefb97b
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/50845845af8beac10dabe1a277d6293be03f3572c227050e91a70ec619d8dbf8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s062_output"
	    wget -O "n100.r04.s062_output/n100.r04.s062.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s062_output/n100.r04.s062.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s062_output/n100.r04.s062.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s062_output/n100.r04.s062.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s062_output/n100.r04.s062.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s062_output/n100.r04.s062.reference.fas" "n100.r04.s062_output/n100.r04.s062.fq1.fastq" "n100.r04.s062_output/n100.r04.s062.fq2.fastq" | samtools view -bS - > "n100.r04.s062_output/n100.r04.s062.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s062_output/n100.r04.s062.untrimmed.sorted.bam" "n100.r04.s062_output/n100.r04.s062.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s062_output/n100.r04.s062.untrimmed.sorted.bam" -b "n100.r04.s062_output/n100.r04.s062.primers.bed" -p "n100.r04.s062_output/n100.r04.s062.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s062_output/n100.r04.s062.trimmed.sorted.bam" "n100.r04.s062_output/n100.r04.s062.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s062_output/n100.r04.s062.reference.fas" "n100.r04.s062_output/n100.r04.s062.trimmed.sorted.bam" > "n100.r04.s062_output/n100.r04.s062.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s062_output/n100.r04.s062.reference.fas" --call-indels "n100.r04.s062_output/n100.r04.s062.trimmed.sorted.bam" > "n100.r04.s062_output/n100.r04.s062.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s062_output/n100.r04.s062.trimmed.sorted.bam" > "n100.r04.s062_output/n100.r04.s062.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s062_output/n100.r04.s062.depth.txt" "n100.r04.s062_output/n100.r04.s062.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s062_output/n100.r04.s062.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s062_output/n100.r04.s062.reference.fas" | bcftools consensus -m "n100.r04.s062_output/n100.r04.s062.low_depth.tsv" tmp.vcf.gz > "n100.r04.s062_output/n100.r04.s062.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s062_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:4bee0598b2f840f5eec4ea2c98497995aff5aa657d958308b6faa8d9ab68b7c0 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=19.6MiB max=126.7MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.0KiB
2021/07/08 16:57:16 scheduler task 792c80bd (flow b34118bb): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s062.tar.gz resources {}
2021/07/08 16:57:16  ->  n100.r04.s062.Main.cp_out_file b34118bb exec extern s3://niema-test/n100/r04/n100.r04.s062.tar.gz 35.7MiB
2021/07/08 16:57:16 scheduler task f1849b51 (flow ff5069df): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:16 scheduler task f1849b51 (flow ff5069df): retrieving diagnostic output (try 0): started
2021/07/08 16:57:16 scheduler task 63feea9a (flow e5c8e58c): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:90389daaa0695c791adc937157eb8c070459a749921e1fcb48573987621dd65f -> s3://niema-test/n100/r04/n100.r04.s010.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:57:16  <-  n100.r04.s010.Main.cp_out_file e5c8e58c ok   extern 0s 35.8MiB
2021/07/08 16:57:16 scheduler task f1849b51 (flow ff5069df): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:16 scheduler task 54f6f6fd (flow c54bfbbc): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:16 scheduler task f1849b51 (flow ff5069df): retrieving result (try 0): started
2021/07/08 16:57:16 scheduler task 54f6f6fd (flow c54bfbbc): unloading (try 0): started
2021/07/08 16:57:16 scheduler task 54f6f6fd (flow c54bfbbc): unloading list<val<.=fbe4335b 35.8MiB> 35.8MiB>
2021/07/08 16:57:16 scheduler task 54f6f6fd (flow c54bfbbc): unloading val<.=a4f36ae9 35.4MiB>
2021/07/08 16:57:16 scheduler task 54f6f6fd (flow c54bfbbc): unloading val<.=360a9034 35.4MiB>
2021/07/08 16:57:16 scheduler task 79c16a1a (flow e8fa5897): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:3fa723a7d54ddc35294e5c6e56db9a0fe235d10da5083a66056ff6c8ebace286 -> s3://niema-test/n100/r04/n100.r04.s022.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:57:16  <-  n100.r04.s022.Main.cp_out_file e8fa5897 ok   extern 0s 35.8MiB
2021/07/08 16:57:16 scheduler task ed42d1d8 (flow ec834335): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:16 scheduler task ed42d1d8 (flow ec834335): unloading (try 0): started
2021/07/08 16:57:16 scheduler task ed42d1d8 (flow ec834335): unloading list<val<.=c0340c70 35.8MiB> 35.8MiB>
2021/07/08 16:57:16 scheduler task ed42d1d8 (flow ec834335): unloading val<.=cc22b76b 35.4MiB>
2021/07/08 16:57:16 scheduler task ed42d1d8 (flow ec834335): unloading val<.=8fa7a808 35.4MiB>
2021/07/08 16:57:16 scheduler task 54f6f6fd (flow c54bfbbc): unloaded list<val<.=fbe4335b 35.8MiB> 35.8MiB>
2021/07/08 16:57:16 scheduler task 54f6f6fd (flow c54bfbbc): unloaded val<.=360a9034 35.4MiB>
2021/07/08 16:57:16 scheduler task 54f6f6fd (flow c54bfbbc): unloaded val<.=a4f36ae9 35.4MiB>
2021/07/08 16:57:16 scheduler task 54f6f6fd (flow c54bfbbc): unloading (try 0): successful, next state: complete
2021/07/08 16:57:16 scheduler task f1849b51 (flow ff5069df): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:16  <-  n100.r04.s092.Main.out_file c54bfbbc ok     exec 5m4s 35.8MiB
2021/07/08 16:57:16 n100.r04.s092.Main.out_file c54bfbbc n100/r04/n100.r04.s092.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8a068151b9e6d52824feffad73de9463a638bfd5e6108ea76c2800a1c1d07364
	sha256:c54bfbbc0627fe110b47b40398765ccb940818e40e3b30c134de655a17f186e4
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/54f6f6fd181b7824ef9e2179e137dea55094264d98af4ffca9439cbdaf6054ed
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s092_output"
	    wget -O "n100.r04.s092_output/n100.r04.s092.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s092_output/n100.r04.s092.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s092_output/n100.r04.s092.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s092_output/n100.r04.s092.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s092_output/n100.r04.s092.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s092_output/n100.r04.s092.reference.fas" "n100.r04.s092_output/n100.r04.s092.fq1.fastq" "n100.r04.s092_output/n100.r04.s092.fq2.fastq" | samtools view -bS - > "n100.r04.s092_output/n100.r04.s092.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s092_output/n100.r04.s092.untrimmed.sorted.bam" "n100.r04.s092_output/n100.r04.s092.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s092_output/n100.r04.s092.untrimmed.sorted.bam" -b "n100.r04.s092_output/n100.r04.s092.primers.bed" -p "n100.r04.s092_output/n100.r04.s092.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s092_output/n100.r04.s092.trimmed.sorted.bam" "n100.r04.s092_output/n100.r04.s092.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s092_output/n100.r04.s092.reference.fas" "n100.r04.s092_output/n100.r04.s092.trimmed.sorted.bam" > "n100.r04.s092_output/n100.r04.s092.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s092_output/n100.r04.s092.reference.fas" --call-indels "n100.r04.s092_output/n100.r04.s092.trimmed.sorted.bam" > "n100.r04.s092_output/n100.r04.s092.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s092_output/n100.r04.s092.trimmed.sorted.bam" > "n100.r04.s092_output/n100.r04.s092.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s092_output/n100.r04.s092.depth.txt" "n100.r04.s092_output/n100.r04.s092.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s092_output/n100.r04.s092.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s092_output/n100.r04.s092.reference.fas" | bcftools consensus -m "n100.r04.s092_output/n100.r04.s092.low_depth.tsv" tmp.vcf.gz > "n100.r04.s092_output/n100.r04.s092.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s092_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:fbe4335bdccbd40f82c18145dc621b048a6689239d02846ccb16922396b4b1ce 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.7MiB max=125.0MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 16:57:16 scheduler task e8912bb0 (flow ca74432e): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s092.tar.gz resources {}
2021/07/08 16:57:16  ->  n100.r04.s092.Main.cp_out_file ca74432e exec extern s3://niema-test/n100/r04/n100.r04.s092.tar.gz 35.8MiB
2021/07/08 16:57:16 scheduler task f1849b51 (flow ff5069df): transferring output (try 0): started
2021/07/08 16:57:16 scheduler task 29c9d867 (flow 0f009068): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:16 scheduler task 29c9d867 (flow 0f009068): promoting objects (try 0): started
2021/07/08 16:57:16 scheduler task ed42d1d8 (flow ec834335): unloaded list<val<.=c0340c70 35.8MiB> 35.8MiB>
2021/07/08 16:57:16 scheduler task ed42d1d8 (flow ec834335): unloaded val<.=cc22b76b 35.4MiB>
2021/07/08 16:57:16 scheduler task d21168f4 (flow fb8de0c9): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:16 scheduler task ed42d1d8 (flow ec834335): unloaded val<.=8fa7a808 35.4MiB>
2021/07/08 16:57:16 scheduler task ed42d1d8 (flow ec834335): unloading (try 0): successful, next state: complete
2021/07/08 16:57:16 scheduler task 7748b342 (flow 80ed5772): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:0fc7a6ae8eb4d0a9c4849160e042afefdcc5bbb7057cfc7cc889e51e0950c43e -> s3://niema-test/n100/r04/n100.r04.s090.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:16  <-  n100.r04.s090.Main.cp_out_file 80ed5772 ok   extern 0s 35.7MiB
2021/07/08 16:57:16 scheduler task d21168f4 (flow fb8de0c9): promoting objects (try 0): started
2021/07/08 16:57:16  <-  n100.r04.s025.Main.out_file ec834335 ok     exec 5m4s 35.8MiB
2021/07/08 16:57:16 n100.r04.s025.Main.out_file ec834335 n100/r04/n100.r04.s025.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0da2de30ec60a6aff0cdf14264738c146242031c0e50e0b4d18325816fc0ec61
	sha256:ec834335aed6798f6e35205b1544fe290d112b5510a1df4af4f1562035b15d2a
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ed42d1d8559b977cb9bd57ccd5d2227929fe9d40b87db2876c990ca8cda4b5a6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s025_output"
	    wget -O "n100.r04.s025_output/n100.r04.s025.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s025_output/n100.r04.s025.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s025_output/n100.r04.s025.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s025_output/n100.r04.s025.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s025_output/n100.r04.s025.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s025_output/n100.r04.s025.reference.fas" "n100.r04.s025_output/n100.r04.s025.fq1.fastq" "n100.r04.s025_output/n100.r04.s025.fq2.fastq" | samtools view -bS - > "n100.r04.s025_output/n100.r04.s025.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s025_output/n100.r04.s025.untrimmed.sorted.bam" "n100.r04.s025_output/n100.r04.s025.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s025_output/n100.r04.s025.untrimmed.sorted.bam" -b "n100.r04.s025_output/n100.r04.s025.primers.bed" -p "n100.r04.s025_output/n100.r04.s025.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s025_output/n100.r04.s025.trimmed.sorted.bam" "n100.r04.s025_output/n100.r04.s025.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s025_output/n100.r04.s025.reference.fas" "n100.r04.s025_output/n100.r04.s025.trimmed.sorted.bam" > "n100.r04.s025_output/n100.r04.s025.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s025_output/n100.r04.s025.reference.fas" --call-indels "n100.r04.s025_output/n100.r04.s025.trimmed.sorted.bam" > "n100.r04.s025_output/n100.r04.s025.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s025_output/n100.r04.s025.trimmed.sorted.bam" > "n100.r04.s025_output/n100.r04.s025.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s025_output/n100.r04.s025.depth.txt" "n100.r04.s025_output/n100.r04.s025.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s025_output/n100.r04.s025.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s025_output/n100.r04.s025.reference.fas" | bcftools consensus -m "n100.r04.s025_output/n100.r04.s025.low_depth.tsv" tmp.vcf.gz > "n100.r04.s025_output/n100.r04.s025.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s025_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:c0340c70516bce6100675d6e790377d837d0bae7e244e4fd04ea8a4a7b4603f5 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.5MiB max=128.2MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=1.0KiB max=3.0KiB
2021/07/08 16:57:16 scheduler task 8215edeb (flow e2fef7b3): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s025.tar.gz resources {}
2021/07/08 16:57:16  ->  n100.r04.s025.Main.cp_out_file e2fef7b3 exec extern s3://niema-test/n100/r04/n100.r04.s025.tar.gz 35.8MiB
2021/07/08 16:57:16 scheduler task 29c9d867 (flow 0f009068): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:16 scheduler task 29c9d867 (flow 0f009068): retrieving diagnostic output (try 0): started
2021/07/08 16:57:16 scheduler task 8746c175 (flow e75028fb): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:16 scheduler task 8746c175 (flow e75028fb): unloading (try 0): started
2021/07/08 16:57:16 scheduler task 8746c175 (flow e75028fb): unloading list<val<.=c37a7d9d 35.8MiB> 35.8MiB>
2021/07/08 16:57:16 scheduler task 8746c175 (flow e75028fb): unloading val<.=eb66ee9b 35.4MiB>
2021/07/08 16:57:16 scheduler task 8746c175 (flow e75028fb): unloading val<.=fe23f0a9 35.4MiB>
2021/07/08 16:57:16 scheduler task d21168f4 (flow fb8de0c9): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:16 scheduler task d21168f4 (flow fb8de0c9): retrieving diagnostic output (try 0): started
2021/07/08 16:57:17 scheduler task 29c9d867 (flow 0f009068): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:17 scheduler task 8746c175 (flow e75028fb): unloaded list<val<.=c37a7d9d 35.8MiB> 35.8MiB>
2021/07/08 16:57:17 scheduler task 8746c175 (flow e75028fb): unloaded val<.=fe23f0a9 35.4MiB>
2021/07/08 16:57:17 scheduler task 8746c175 (flow e75028fb): unloaded val<.=eb66ee9b 35.4MiB>
2021/07/08 16:57:17 scheduler task 8746c175 (flow e75028fb): unloading (try 0): successful, next state: complete
2021/07/08 16:57:17 scheduler task 29c9d867 (flow 0f009068): retrieving result (try 0): started
2021/07/08 16:57:17  <-  n100.r04.s001.Main.out_file e75028fb ok     exec 4m57s 35.8MiB
2021/07/08 16:57:17 n100.r04.s001.Main.out_file e75028fb n100/r04/n100.r04.s001.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2fd09c1378db9749f2cc835dd4c1b6ff2e4df22e0ea24437ce8c2f80fbb628ee
	sha256:e75028fb4c6368a6d918c59421ea962065239726f48cb09d394cf06180c8504c
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8746c175962d0629ca342db064c86977fa3b857dcd6f24e69b1da5a2ef021d7c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s001_output"
	    wget -O "n100.r04.s001_output/n100.r04.s001.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s001_output/n100.r04.s001.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s001_output/n100.r04.s001.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s001_output/n100.r04.s001.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s001_output/n100.r04.s001.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s001_output/n100.r04.s001.reference.fas" "n100.r04.s001_output/n100.r04.s001.fq1.fastq" "n100.r04.s001_output/n100.r04.s001.fq2.fastq" | samtools view -bS - > "n100.r04.s001_output/n100.r04.s001.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s001_output/n100.r04.s001.untrimmed.sorted.bam" "n100.r04.s001_output/n100.r04.s001.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s001_output/n100.r04.s001.untrimmed.sorted.bam" -b "n100.r04.s001_output/n100.r04.s001.primers.bed" -p "n100.r04.s001_output/n100.r04.s001.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s001_output/n100.r04.s001.trimmed.sorted.bam" "n100.r04.s001_output/n100.r04.s001.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s001_output/n100.r04.s001.reference.fas" "n100.r04.s001_output/n100.r04.s001.trimmed.sorted.bam" > "n100.r04.s001_output/n100.r04.s001.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s001_output/n100.r04.s001.reference.fas" --call-indels "n100.r04.s001_output/n100.r04.s001.trimmed.sorted.bam" > "n100.r04.s001_output/n100.r04.s001.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s001_output/n100.r04.s001.trimmed.sorted.bam" > "n100.r04.s001_output/n100.r04.s001.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s001_output/n100.r04.s001.depth.txt" "n100.r04.s001_output/n100.r04.s001.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s001_output/n100.r04.s001.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s001_output/n100.r04.s001.reference.fas" | bcftools consensus -m "n100.r04.s001_output/n100.r04.s001.low_depth.tsv" tmp.vcf.gz > "n100.r04.s001_output/n100.r04.s001.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s001_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:c37a7d9d37e1fb1b245dd7363e820b2de40a37aae3bc38bf04e7c3aa9d2f6a5c 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.9MiB max=128.8MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=418B max=2.0KiB
2021/07/08 16:57:17 scheduler task 1f4281a5 (flow 63377813): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s001.tar.gz resources {}
2021/07/08 16:57:17  ->  n100.r04.s001.Main.cp_out_file 63377813 exec extern s3://niema-test/n100/r04/n100.r04.s001.tar.gz 35.8MiB
2021/07/08 16:57:17 scheduler task d21168f4 (flow fb8de0c9): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:17 scheduler task 29c9d867 (flow 0f009068): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:17 scheduler task d21168f4 (flow fb8de0c9): retrieving result (try 0): started
2021/07/08 16:57:17 scheduler task 29c9d867 (flow 0f009068): transferring output (try 0): started
2021/07/08 16:57:17 scheduler task d21168f4 (flow fb8de0c9): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:17 scheduler task d21168f4 (flow fb8de0c9): transferring output (try 0): started
2021/07/08 16:57:17 scheduler task 792c80bd (flow b34118bb): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:4bee0598b2f840f5eec4ea2c98497995aff5aa657d958308b6faa8d9ab68b7c0 -> s3://niema-test/n100/r04/n100.r04.s062.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:17  <-  n100.r04.s062.Main.cp_out_file b34118bb ok   extern 0s 35.7MiB
2021/07/08 16:57:17 scheduler task d4a3dec7 (flow 86ee751d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:17 scheduler task d4a3dec7 (flow 86ee751d): promoting objects (try 0): started
2021/07/08 16:57:17 scheduler task f1849b51 (flow ff5069df): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:17 scheduler task f1849b51 (flow ff5069df): unloading (try 0): started
2021/07/08 16:57:17 scheduler task f1849b51 (flow ff5069df): unloading list<val<.=b0a2b42c 35.7MiB> 35.7MiB>
2021/07/08 16:57:17 scheduler task f1849b51 (flow ff5069df): unloading val<.=d9c90b82 35.4MiB>
2021/07/08 16:57:17 scheduler task f1849b51 (flow ff5069df): unloading val<.=5c10c6ab 35.4MiB>
2021/07/08 16:57:17 scheduler task d4a3dec7 (flow 86ee751d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:17 scheduler task d4a3dec7 (flow 86ee751d): retrieving diagnostic output (try 0): started
2021/07/08 16:57:17 scheduler task f1849b51 (flow ff5069df): unloaded list<val<.=b0a2b42c 35.7MiB> 35.7MiB>
2021/07/08 16:57:17 scheduler task f1849b51 (flow ff5069df): unloaded val<.=d9c90b82 35.4MiB>
2021/07/08 16:57:17 scheduler task f1849b51 (flow ff5069df): unloaded val<.=5c10c6ab 35.4MiB>
2021/07/08 16:57:17 scheduler task f1849b51 (flow ff5069df): unloading (try 0): successful, next state: complete
2021/07/08 16:57:17  <-  n100.r04.s070.Main.out_file ff5069df ok     exec 4m58s 35.7MiB
2021/07/08 16:57:17 n100.r04.s070.Main.out_file ff5069df n100/r04/n100.r04.s070.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4b6370b530509b937596c575509d3ea7fe09fcb5faa8b0ce52040c276951e25f
	sha256:ff5069df20fc72da3aa9ff44bacfb197e910fe1eb66ddb5ab73576ae70bce98c
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f1849b514f9d46a872ea0537d38b2f8713222a297d953fed4470a2c3a16958b3
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s070_output"
	    wget -O "n100.r04.s070_output/n100.r04.s070.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s070_output/n100.r04.s070.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s070_output/n100.r04.s070.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s070_output/n100.r04.s070.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s070_output/n100.r04.s070.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s070_output/n100.r04.s070.reference.fas" "n100.r04.s070_output/n100.r04.s070.fq1.fastq" "n100.r04.s070_output/n100.r04.s070.fq2.fastq" | samtools view -bS - > "n100.r04.s070_output/n100.r04.s070.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s070_output/n100.r04.s070.untrimmed.sorted.bam" "n100.r04.s070_output/n100.r04.s070.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s070_output/n100.r04.s070.untrimmed.sorted.bam" -b "n100.r04.s070_output/n100.r04.s070.primers.bed" -p "n100.r04.s070_output/n100.r04.s070.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s070_output/n100.r04.s070.trimmed.sorted.bam" "n100.r04.s070_output/n100.r04.s070.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s070_output/n100.r04.s070.reference.fas" "n100.r04.s070_output/n100.r04.s070.trimmed.sorted.bam" > "n100.r04.s070_output/n100.r04.s070.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s070_output/n100.r04.s070.reference.fas" --call-indels "n100.r04.s070_output/n100.r04.s070.trimmed.sorted.bam" > "n100.r04.s070_output/n100.r04.s070.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s070_output/n100.r04.s070.trimmed.sorted.bam" > "n100.r04.s070_output/n100.r04.s070.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s070_output/n100.r04.s070.depth.txt" "n100.r04.s070_output/n100.r04.s070.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s070_output/n100.r04.s070.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s070_output/n100.r04.s070.reference.fas" | bcftools consensus -m "n100.r04.s070_output/n100.r04.s070.low_depth.tsv" tmp.vcf.gz > "n100.r04.s070_output/n100.r04.s070.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s070_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:b0a2b42c8187e359c6aa8706fbeb7aca7b44c30139a12b2a343d843e616bf2d9 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.6MiB max=125.4MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=630B max=2.1KiB
2021/07/08 16:57:17 scheduler task b248061b (flow 3cfaa8eb): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s070.tar.gz resources {}
2021/07/08 16:57:17  ->  n100.r04.s070.Main.cp_out_file 3cfaa8eb exec extern s3://niema-test/n100/r04/n100.r04.s070.tar.gz 35.7MiB
2021/07/08 16:57:17 scheduler task d4a3dec7 (flow 86ee751d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:17 scheduler task d4a3dec7 (flow 86ee751d): retrieving result (try 0): started
2021/07/08 16:57:17 scheduler task e8912bb0 (flow ca74432e): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:fbe4335bdccbd40f82c18145dc621b048a6689239d02846ccb16922396b4b1ce -> s3://niema-test/n100/r04/n100.r04.s092.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:57:17  <-  n100.r04.s092.Main.cp_out_file ca74432e ok   extern 0s 35.8MiB
2021/07/08 16:57:17 scheduler task d4a3dec7 (flow 86ee751d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:17 scheduler task 29c9d867 (flow 0f009068): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:17 scheduler task d4a3dec7 (flow 86ee751d): transferring output (try 0): started
2021/07/08 16:57:17 scheduler task 29c9d867 (flow 0f009068): unloading (try 0): started
2021/07/08 16:57:17 scheduler task 29c9d867 (flow 0f009068): unloading list<val<.=6fc80ba7 35.8MiB> 35.8MiB>
2021/07/08 16:57:17 scheduler task 29c9d867 (flow 0f009068): unloading val<.=1d16d152 35.4MiB>
2021/07/08 16:57:17 scheduler task 29c9d867 (flow 0f009068): unloading val<.=ab36b104 35.4MiB>
2021/07/08 16:57:17 scheduler task 21d2711e (flow a8490785): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:17 scheduler task 21d2711e (flow a8490785): promoting objects (try 0): started
2021/07/08 16:57:17 scheduler task 8215edeb (flow e2fef7b3): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:c0340c70516bce6100675d6e790377d837d0bae7e244e4fd04ea8a4a7b4603f5 -> s3://niema-test/n100/r04/n100.r04.s025.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:57:17  <-  n100.r04.s025.Main.cp_out_file e2fef7b3 ok   extern 0s 35.8MiB
2021/07/08 16:57:17 scheduler task 29c9d867 (flow 0f009068): unloaded list<val<.=6fc80ba7 35.8MiB> 35.8MiB>
2021/07/08 16:57:17 scheduler task 29c9d867 (flow 0f009068): unloaded val<.=1d16d152 35.4MiB>
2021/07/08 16:57:17 scheduler task 29c9d867 (flow 0f009068): unloaded val<.=ab36b104 35.4MiB>
2021/07/08 16:57:17 scheduler task 29c9d867 (flow 0f009068): unloading (try 0): successful, next state: complete
2021/07/08 16:57:17 scheduler task 21d2711e (flow a8490785): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:17  <-  n100.r04.s081.Main.out_file 0f009068 ok     exec 5m5s 35.8MiB
2021/07/08 16:57:17 n100.r04.s081.Main.out_file 0f009068 n100/r04/n100.r04.s081.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e25ba702e7412c732d100cbb7a115b368cfee94aa642f203f726f370f5e703b4
	sha256:0f009068373d3b4f16db5c091339f0ebbd9efe226e345bfbf22ef4b7c991a49a
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/29c9d867a23ae7cc0241d35ac22adb198e75ed22420c5a9bbdb2faa0fdacc7f0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s081_output"
	    wget -O "n100.r04.s081_output/n100.r04.s081.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s081_output/n100.r04.s081.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s081_output/n100.r04.s081.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s081_output/n100.r04.s081.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s081_output/n100.r04.s081.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s081_output/n100.r04.s081.reference.fas" "n100.r04.s081_output/n100.r04.s081.fq1.fastq" "n100.r04.s081_output/n100.r04.s081.fq2.fastq" | samtools view -bS - > "n100.r04.s081_output/n100.r04.s081.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s081_output/n100.r04.s081.untrimmed.sorted.bam" "n100.r04.s081_output/n100.r04.s081.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s081_output/n100.r04.s081.untrimmed.sorted.bam" -b "n100.r04.s081_output/n100.r04.s081.primers.bed" -p "n100.r04.s081_output/n100.r04.s081.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s081_output/n100.r04.s081.trimmed.sorted.bam" "n100.r04.s081_output/n100.r04.s081.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s081_output/n100.r04.s081.reference.fas" "n100.r04.s081_output/n100.r04.s081.trimmed.sorted.bam" > "n100.r04.s081_output/n100.r04.s081.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s081_output/n100.r04.s081.reference.fas" --call-indels "n100.r04.s081_output/n100.r04.s081.trimmed.sorted.bam" > "n100.r04.s081_output/n100.r04.s081.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s081_output/n100.r04.s081.trimmed.sorted.bam" > "n100.r04.s081_output/n100.r04.s081.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s081_output/n100.r04.s081.depth.txt" "n100.r04.s081_output/n100.r04.s081.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s081_output/n100.r04.s081.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s081_output/n100.r04.s081.reference.fas" | bcftools consensus -m "n100.r04.s081_output/n100.r04.s081.low_depth.tsv" tmp.vcf.gz > "n100.r04.s081_output/n100.r04.s081.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s081_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:6fc80ba7df00acdaf68dcc29584b552b0e394a6d5d7f5a3b33b487a6dcda41d4 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=22.1MiB max=128.6MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=1.0KiB max=3.0KiB
2021/07/08 16:57:17 scheduler task 43858518 (flow 779d9955): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s081.tar.gz resources {}
2021/07/08 16:57:17  ->  n100.r04.s081.Main.cp_out_file 779d9955 exec extern s3://niema-test/n100/r04/n100.r04.s081.tar.gz 35.8MiB
2021/07/08 16:57:17 scheduler task 21d2711e (flow a8490785): retrieving diagnostic output (try 0): started
2021/07/08 16:57:17 scheduler task d21168f4 (flow fb8de0c9): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:17 scheduler task d21168f4 (flow fb8de0c9): unloading (try 0): started
2021/07/08 16:57:17 scheduler task d21168f4 (flow fb8de0c9): unloading list<val<.=14b41e70 35.7MiB> 35.7MiB>
2021/07/08 16:57:17 scheduler task d21168f4 (flow fb8de0c9): unloading val<.=b2995b18 35.4MiB>
2021/07/08 16:57:17 scheduler task d21168f4 (flow fb8de0c9): unloading val<.=267d1180 35.4MiB>
2021/07/08 16:57:17 scheduler task 21d2711e (flow a8490785): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:17 scheduler task 21d2711e (flow a8490785): retrieving result (try 0): started
2021/07/08 16:57:17 scheduler task d21168f4 (flow fb8de0c9): unloaded val<.=b2995b18 35.4MiB>
2021/07/08 16:57:17 scheduler task d21168f4 (flow fb8de0c9): unloaded list<val<.=14b41e70 35.7MiB> 35.7MiB>
2021/07/08 16:57:17 scheduler task d21168f4 (flow fb8de0c9): unloaded val<.=267d1180 35.4MiB>
2021/07/08 16:57:17 scheduler task d21168f4 (flow fb8de0c9): unloading (try 0): successful, next state: complete
2021/07/08 16:57:17  <-  n100.r04.s051.Main.out_file fb8de0c9 ok     exec 5m5s 35.7MiB
2021/07/08 16:57:17 n100.r04.s051.Main.out_file fb8de0c9 n100/r04/n100.r04.s051.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6d59e7ac54e53e7ebdeb89fdcf030887a8af627d19b78d30041cb9f80fe73378
	sha256:fb8de0c9cb3b99d7ba135133ac5d52b49d1b86efeb6f76b5a5a781a96c97252b
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d21168f424c1b3f9445e1bd9f0f3a8c75f3d63d5051f1d17eb1395331f84eddf
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s051_output"
	    wget -O "n100.r04.s051_output/n100.r04.s051.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s051_output/n100.r04.s051.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s051_output/n100.r04.s051.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s051_output/n100.r04.s051.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s051_output/n100.r04.s051.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s051_output/n100.r04.s051.reference.fas" "n100.r04.s051_output/n100.r04.s051.fq1.fastq" "n100.r04.s051_output/n100.r04.s051.fq2.fastq" | samtools view -bS - > "n100.r04.s051_output/n100.r04.s051.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s051_output/n100.r04.s051.untrimmed.sorted.bam" "n100.r04.s051_output/n100.r04.s051.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s051_output/n100.r04.s051.untrimmed.sorted.bam" -b "n100.r04.s051_output/n100.r04.s051.primers.bed" -p "n100.r04.s051_output/n100.r04.s051.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s051_output/n100.r04.s051.trimmed.sorted.bam" "n100.r04.s051_output/n100.r04.s051.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s051_output/n100.r04.s051.reference.fas" "n100.r04.s051_output/n100.r04.s051.trimmed.sorted.bam" > "n100.r04.s051_output/n100.r04.s051.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s051_output/n100.r04.s051.reference.fas" --call-indels "n100.r04.s051_output/n100.r04.s051.trimmed.sorted.bam" > "n100.r04.s051_output/n100.r04.s051.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s051_output/n100.r04.s051.trimmed.sorted.bam" > "n100.r04.s051_output/n100.r04.s051.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s051_output/n100.r04.s051.depth.txt" "n100.r04.s051_output/n100.r04.s051.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s051_output/n100.r04.s051.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s051_output/n100.r04.s051.reference.fas" | bcftools consensus -m "n100.r04.s051_output/n100.r04.s051.low_depth.tsv" tmp.vcf.gz > "n100.r04.s051_output/n100.r04.s051.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s051_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:14b41e70ce03c19406b919b5bd3992eb1947ffc9744105c4614e83d0de746e01 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.0MiB max=130.0MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 16:57:17 scheduler task 5b2155a8 (flow 90dabe15): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s051.tar.gz resources {}
2021/07/08 16:57:17  ->  n100.r04.s051.Main.cp_out_file 90dabe15 exec extern s3://niema-test/n100/r04/n100.r04.s051.tar.gz 35.7MiB
2021/07/08 16:57:17 scheduler task 1f4281a5 (flow 63377813): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:c37a7d9d37e1fb1b245dd7363e820b2de40a37aae3bc38bf04e7c3aa9d2f6a5c -> s3://niema-test/n100/r04/n100.r04.s001.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:57:17  <-  n100.r04.s001.Main.cp_out_file 63377813 ok   extern 0s 35.8MiB
2021/07/08 16:57:17 scheduler task 21d2711e (flow a8490785): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:17 scheduler task 21d2711e (flow a8490785): transferring output (try 0): started
2021/07/08 16:57:18 scheduler task d4a3dec7 (flow 86ee751d): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:18 scheduler task d4a3dec7 (flow 86ee751d): unloading (try 0): started
2021/07/08 16:57:18 scheduler task d4a3dec7 (flow 86ee751d): unloading list<val<.=e4775cb9 35.7MiB> 35.7MiB>
2021/07/08 16:57:18 scheduler task d4a3dec7 (flow 86ee751d): unloading val<.=c1166807 35.4MiB>
2021/07/08 16:57:18 scheduler task d4a3dec7 (flow 86ee751d): unloading val<.=e4676680 35.4MiB>
2021/07/08 16:57:18 scheduler task f8b9105e (flow 99c56457): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:18 scheduler task f8b9105e (flow 99c56457): promoting objects (try 0): started
2021/07/08 16:57:18 scheduler task b248061b (flow 3cfaa8eb): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:b0a2b42c8187e359c6aa8706fbeb7aca7b44c30139a12b2a343d843e616bf2d9 -> s3://niema-test/n100/r04/n100.r04.s070.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:18  <-  n100.r04.s070.Main.cp_out_file 3cfaa8eb ok   extern 0s 35.7MiB
2021/07/08 16:57:18 scheduler task d4a3dec7 (flow 86ee751d): unloaded val<.=c1166807 35.4MiB>
2021/07/08 16:57:18 scheduler task d4a3dec7 (flow 86ee751d): unloaded list<val<.=e4775cb9 35.7MiB> 35.7MiB>
2021/07/08 16:57:18 scheduler task d4a3dec7 (flow 86ee751d): unloaded val<.=e4676680 35.4MiB>
2021/07/08 16:57:18 scheduler task d4a3dec7 (flow 86ee751d): unloading (try 0): successful, next state: complete
2021/07/08 16:57:18 scheduler task f8b9105e (flow 99c56457): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:18  <-  n100.r04.s044.Main.out_file 86ee751d ok     exec 5m5s 35.7MiB
2021/07/08 16:57:18 n100.r04.s044.Main.out_file 86ee751d n100/r04/n100.r04.s044.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b5871b03706569d3a2bccfe79db79f4b096f4632ea3456eee1176b06a9cc94ae
	sha256:86ee751d9d90a7d75c6952a61ed9af114ce920a4d683a6aeb5fdd73c8a078c48
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d4a3dec7b2f25e7b596f1c6aeb5e7e232528868d7baa646fe2f8bd4a78fcdf3b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s044_output"
	    wget -O "n100.r04.s044_output/n100.r04.s044.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s044_output/n100.r04.s044.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s044_output/n100.r04.s044.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s044_output/n100.r04.s044.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s044_output/n100.r04.s044.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s044_output/n100.r04.s044.reference.fas" "n100.r04.s044_output/n100.r04.s044.fq1.fastq" "n100.r04.s044_output/n100.r04.s044.fq2.fastq" | samtools view -bS - > "n100.r04.s044_output/n100.r04.s044.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s044_output/n100.r04.s044.untrimmed.sorted.bam" "n100.r04.s044_output/n100.r04.s044.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s044_output/n100.r04.s044.untrimmed.sorted.bam" -b "n100.r04.s044_output/n100.r04.s044.primers.bed" -p "n100.r04.s044_output/n100.r04.s044.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s044_output/n100.r04.s044.trimmed.sorted.bam" "n100.r04.s044_output/n100.r04.s044.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s044_output/n100.r04.s044.reference.fas" "n100.r04.s044_output/n100.r04.s044.trimmed.sorted.bam" > "n100.r04.s044_output/n100.r04.s044.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s044_output/n100.r04.s044.reference.fas" --call-indels "n100.r04.s044_output/n100.r04.s044.trimmed.sorted.bam" > "n100.r04.s044_output/n100.r04.s044.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s044_output/n100.r04.s044.trimmed.sorted.bam" > "n100.r04.s044_output/n100.r04.s044.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s044_output/n100.r04.s044.depth.txt" "n100.r04.s044_output/n100.r04.s044.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s044_output/n100.r04.s044.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s044_output/n100.r04.s044.reference.fas" | bcftools consensus -m "n100.r04.s044_output/n100.r04.s044.low_depth.tsv" tmp.vcf.gz > "n100.r04.s044_output/n100.r04.s044.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s044_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:e4775cb9565ed556020a5df680e876cb470bcc449980ced4be16da76561049c7 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.9MiB max=128.5MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.0KiB
2021/07/08 16:57:18 scheduler task 4420fdd9 (flow 5424fedf): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s044.tar.gz resources {}
2021/07/08 16:57:18  ->  n100.r04.s044.Main.cp_out_file 5424fedf exec extern s3://niema-test/n100/r04/n100.r04.s044.tar.gz 35.7MiB
2021/07/08 16:57:18 scheduler task f8b9105e (flow 99c56457): retrieving diagnostic output (try 0): started
2021/07/08 16:57:18 scheduler task 9a663e4e (flow 2d3488e5): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:18 scheduler task 9a663e4e (flow 2d3488e5): promoting objects (try 0): started
2021/07/08 16:57:18 scheduler task f8b9105e (flow 99c56457): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:18 scheduler task f8b9105e (flow 99c56457): retrieving result (try 0): started
2021/07/08 16:57:18 scheduler task 9a663e4e (flow 2d3488e5): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:18 scheduler task 9a663e4e (flow 2d3488e5): retrieving diagnostic output (try 0): started
2021/07/08 16:57:18 scheduler task f8b9105e (flow 99c56457): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:18 scheduler task f8b9105e (flow 99c56457): transferring output (try 0): started
2021/07/08 16:57:18 scheduler task 7ab39a0f (flow 017350a1): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:18 scheduler task 7ab39a0f (flow 017350a1): promoting objects (try 0): started
2021/07/08 16:57:18 scheduler task 9a663e4e (flow 2d3488e5): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:18 scheduler task 9a663e4e (flow 2d3488e5): retrieving result (try 0): started
2021/07/08 16:57:18 scheduler task 21d2711e (flow a8490785): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:18 scheduler task 21d2711e (flow a8490785): unloading (try 0): started
2021/07/08 16:57:18 scheduler task 21d2711e (flow a8490785): unloading list<val<.=328b4a48 35.7MiB> 35.7MiB>
2021/07/08 16:57:18 scheduler task 21d2711e (flow a8490785): unloading val<.=78af9b7f 35.4MiB>
2021/07/08 16:57:18 scheduler task 21d2711e (flow a8490785): unloading val<.=398ba09e 35.4MiB>
2021/07/08 16:57:18 scheduler task 43858518 (flow 779d9955): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:6fc80ba7df00acdaf68dcc29584b552b0e394a6d5d7f5a3b33b487a6dcda41d4 -> s3://niema-test/n100/r04/n100.r04.s081.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:57:18  <-  n100.r04.s081.Main.cp_out_file 779d9955 ok   extern 0s 35.8MiB
2021/07/08 16:57:18 scheduler task 21d2711e (flow a8490785): unloaded list<val<.=328b4a48 35.7MiB> 35.7MiB>
2021/07/08 16:57:18 scheduler task 7ab39a0f (flow 017350a1): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:18 scheduler task 21d2711e (flow a8490785): unloaded val<.=78af9b7f 35.4MiB>
2021/07/08 16:57:18 scheduler task 21d2711e (flow a8490785): unloaded val<.=398ba09e 35.4MiB>
2021/07/08 16:57:18 scheduler task 21d2711e (flow a8490785): unloading (try 0): successful, next state: complete
2021/07/08 16:57:18 scheduler task 9a663e4e (flow 2d3488e5): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:18 scheduler task 7ab39a0f (flow 017350a1): retrieving diagnostic output (try 0): started
2021/07/08 16:57:18  <-  n100.r04.s094.Main.out_file a8490785 ok     exec 5m6s 35.7MiB
2021/07/08 16:57:18 n100.r04.s094.Main.out_file a8490785 n100/r04/n100.r04.s094.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9aa406ea749e62b0dbf8728e781c221941cb959241dc663a4d2f962c7a32e7ce
	sha256:a8490785be5812918098b63ccb195a91029729d077bc3d224aa07a2a07b360ad
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/21d2711e485d99da13105d8460d89b4235de1a1e997f481fdf27210c8ab17e2f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s094_output"
	    wget -O "n100.r04.s094_output/n100.r04.s094.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s094_output/n100.r04.s094.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s094_output/n100.r04.s094.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s094_output/n100.r04.s094.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s094_output/n100.r04.s094.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s094_output/n100.r04.s094.reference.fas" "n100.r04.s094_output/n100.r04.s094.fq1.fastq" "n100.r04.s094_output/n100.r04.s094.fq2.fastq" | samtools view -bS - > "n100.r04.s094_output/n100.r04.s094.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s094_output/n100.r04.s094.untrimmed.sorted.bam" "n100.r04.s094_output/n100.r04.s094.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s094_output/n100.r04.s094.untrimmed.sorted.bam" -b "n100.r04.s094_output/n100.r04.s094.primers.bed" -p "n100.r04.s094_output/n100.r04.s094.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s094_output/n100.r04.s094.trimmed.sorted.bam" "n100.r04.s094_output/n100.r04.s094.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s094_output/n100.r04.s094.reference.fas" "n100.r04.s094_output/n100.r04.s094.trimmed.sorted.bam" > "n100.r04.s094_output/n100.r04.s094.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s094_output/n100.r04.s094.reference.fas" --call-indels "n100.r04.s094_output/n100.r04.s094.trimmed.sorted.bam" > "n100.r04.s094_output/n100.r04.s094.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s094_output/n100.r04.s094.trimmed.sorted.bam" > "n100.r04.s094_output/n100.r04.s094.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s094_output/n100.r04.s094.depth.txt" "n100.r04.s094_output/n100.r04.s094.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s094_output/n100.r04.s094.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s094_output/n100.r04.s094.reference.fas" | bcftools consensus -m "n100.r04.s094_output/n100.r04.s094.low_depth.tsv" tmp.vcf.gz > "n100.r04.s094_output/n100.r04.s094.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s094_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:328b4a48eaee5989a3da6d9ea94d762d1f8e81f009e313c07715e173051ee0f9 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.1MiB max=126.6MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.0KiB
2021/07/08 16:57:18 scheduler task 557c43a3 (flow 1b1cecb5): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s094.tar.gz resources {}
2021/07/08 16:57:18  ->  n100.r04.s094.Main.cp_out_file 1b1cecb5 exec extern s3://niema-test/n100/r04/n100.r04.s094.tar.gz 35.7MiB
2021/07/08 16:57:18 scheduler task 9a663e4e (flow 2d3488e5): transferring output (try 0): started
2021/07/08 16:57:18 scheduler task 5b2155a8 (flow 90dabe15): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:14b41e70ce03c19406b919b5bd3992eb1947ffc9744105c4614e83d0de746e01 -> s3://niema-test/n100/r04/n100.r04.s051.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:18  <-  n100.r04.s051.Main.cp_out_file 90dabe15 ok   extern 0s 35.7MiB
2021/07/08 16:57:18 scheduler task 7ab39a0f (flow 017350a1): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:18 scheduler task 7ab39a0f (flow 017350a1): retrieving result (try 0): started
2021/07/08 16:57:18 scheduler task 7ab39a0f (flow 017350a1): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:18 scheduler task 7ab39a0f (flow 017350a1): transferring output (try 0): started
2021/07/08 16:57:18 scheduler task 84a55080 (flow d93a17b8): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:18 scheduler task 84a55080 (flow d93a17b8): promoting objects (try 0): started
2021/07/08 16:57:18 scheduler task 84a55080 (flow d93a17b8): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:18 scheduler task 84a55080 (flow d93a17b8): retrieving diagnostic output (try 0): started
2021/07/08 16:57:18 scheduler task 84a55080 (flow d93a17b8): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:19 scheduler task 84a55080 (flow d93a17b8): retrieving result (try 0): started
2021/07/08 16:57:19 scheduler task f8b9105e (flow 99c56457): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:19 scheduler task f8b9105e (flow 99c56457): unloading (try 0): started
2021/07/08 16:57:19 scheduler task f8b9105e (flow 99c56457): unloading list<val<.=5dd05912 35.7MiB> 35.7MiB>
2021/07/08 16:57:19 scheduler task f8b9105e (flow 99c56457): unloading val<.=9afabcd5 35.4MiB>
2021/07/08 16:57:19 scheduler task f8b9105e (flow 99c56457): unloading val<.=ed82aa98 35.4MiB>
2021/07/08 16:57:19 scheduler task 84a55080 (flow d93a17b8): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:19 scheduler task 84a55080 (flow d93a17b8): transferring output (try 0): started
2021/07/08 16:57:19 scheduler task 4420fdd9 (flow 5424fedf): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:e4775cb9565ed556020a5df680e876cb470bcc449980ced4be16da76561049c7 -> s3://niema-test/n100/r04/n100.r04.s044.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:19  <-  n100.r04.s044.Main.cp_out_file 5424fedf ok   extern 0s 35.7MiB
2021/07/08 16:57:19 scheduler task f8b9105e (flow 99c56457): unloaded val<.=ed82aa98 35.4MiB>
2021/07/08 16:57:19 scheduler task f8b9105e (flow 99c56457): unloaded val<.=9afabcd5 35.4MiB>
2021/07/08 16:57:19 scheduler task f8b9105e (flow 99c56457): unloaded list<val<.=5dd05912 35.7MiB> 35.7MiB>
2021/07/08 16:57:19 scheduler task f8b9105e (flow 99c56457): unloading (try 0): successful, next state: complete
2021/07/08 16:57:19  <-  n100.r04.s048.Main.out_file 99c56457 ok     exec 5m6s 35.7MiB
2021/07/08 16:57:19 n100.r04.s048.Main.out_file 99c56457 n100/r04/n100.r04.s048.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b2a0085ff4330aae64a9efcdb2c5d15dff522e66b9c628477f13953d4fd0e88e
	sha256:99c564578776f8f9727ab1ac45790576048fdfb821dbd9f2b584bd2c91cedc7a
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f8b9105e9e95c7d3867f83d3fbca53e6f9cfadcc455ecaa970a6f85786ed034f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s048_output"
	    wget -O "n100.r04.s048_output/n100.r04.s048.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s048_output/n100.r04.s048.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s048_output/n100.r04.s048.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s048_output/n100.r04.s048.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s048_output/n100.r04.s048.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s048_output/n100.r04.s048.reference.fas" "n100.r04.s048_output/n100.r04.s048.fq1.fastq" "n100.r04.s048_output/n100.r04.s048.fq2.fastq" | samtools view -bS - > "n100.r04.s048_output/n100.r04.s048.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s048_output/n100.r04.s048.untrimmed.sorted.bam" "n100.r04.s048_output/n100.r04.s048.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s048_output/n100.r04.s048.untrimmed.sorted.bam" -b "n100.r04.s048_output/n100.r04.s048.primers.bed" -p "n100.r04.s048_output/n100.r04.s048.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s048_output/n100.r04.s048.trimmed.sorted.bam" "n100.r04.s048_output/n100.r04.s048.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s048_output/n100.r04.s048.reference.fas" "n100.r04.s048_output/n100.r04.s048.trimmed.sorted.bam" > "n100.r04.s048_output/n100.r04.s048.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s048_output/n100.r04.s048.reference.fas" --call-indels "n100.r04.s048_output/n100.r04.s048.trimmed.sorted.bam" > "n100.r04.s048_output/n100.r04.s048.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s048_output/n100.r04.s048.trimmed.sorted.bam" > "n100.r04.s048_output/n100.r04.s048.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s048_output/n100.r04.s048.depth.txt" "n100.r04.s048_output/n100.r04.s048.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s048_output/n100.r04.s048.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s048_output/n100.r04.s048.reference.fas" | bcftools consensus -m "n100.r04.s048_output/n100.r04.s048.low_depth.tsv" tmp.vcf.gz > "n100.r04.s048_output/n100.r04.s048.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s048_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:5dd0591208e36d186f5d859cb7415d846d423ae64a9a9ee49b80e401d4f4b0fd 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=19.3MiB max=128.0MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.0KiB
2021/07/08 16:57:19 scheduler task 70865375 (flow 8427e955): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s048.tar.gz resources {}
2021/07/08 16:57:19  ->  n100.r04.s048.Main.cp_out_file 8427e955 exec extern s3://niema-test/n100/r04/n100.r04.s048.tar.gz 35.7MiB
2021/07/08 16:57:19 scheduler task 9a663e4e (flow 2d3488e5): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:19 scheduler task 9a663e4e (flow 2d3488e5): unloading (try 0): started
2021/07/08 16:57:19 scheduler task 9a663e4e (flow 2d3488e5): unloading list<val<.=755011b9 35.8MiB> 35.8MiB>
2021/07/08 16:57:19 scheduler task 9a663e4e (flow 2d3488e5): unloading val<.=855be41b 35.4MiB>
2021/07/08 16:57:19 scheduler task 9a663e4e (flow 2d3488e5): unloading val<.=b3389d0f 35.4MiB>
2021/07/08 16:57:19 scheduler task 9a663e4e (flow 2d3488e5): unloaded val<.=855be41b 35.4MiB>
2021/07/08 16:57:19 scheduler task 9a663e4e (flow 2d3488e5): unloaded val<.=b3389d0f 35.4MiB>
2021/07/08 16:57:19 scheduler task 9a663e4e (flow 2d3488e5): unloaded list<val<.=755011b9 35.8MiB> 35.8MiB>
2021/07/08 16:57:19 scheduler task 9a663e4e (flow 2d3488e5): unloading (try 0): successful, next state: complete
2021/07/08 16:57:19  <-  n100.r04.s053.Main.out_file 2d3488e5 ok     exec 4m59s 35.8MiB
2021/07/08 16:57:19 n100.r04.s053.Main.out_file 2d3488e5 n100/r04/n100.r04.s053.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:cca31dbd6019022de6e334e5e7198aaa0bfb4d566f08ebe23241b2e9bb24016d
	sha256:2d3488e5ae911acea03b084058e152fdac1bf40aa1d5bdace96895371d4cc308
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9a663e4e7675983783caf8da2b934c6f077246d9b0e2707722378e9d46360e18
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s053_output"
	    wget -O "n100.r04.s053_output/n100.r04.s053.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s053_output/n100.r04.s053.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s053_output/n100.r04.s053.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s053_output/n100.r04.s053.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s053_output/n100.r04.s053.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s053_output/n100.r04.s053.reference.fas" "n100.r04.s053_output/n100.r04.s053.fq1.fastq" "n100.r04.s053_output/n100.r04.s053.fq2.fastq" | samtools view -bS - > "n100.r04.s053_output/n100.r04.s053.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s053_output/n100.r04.s053.untrimmed.sorted.bam" "n100.r04.s053_output/n100.r04.s053.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s053_output/n100.r04.s053.untrimmed.sorted.bam" -b "n100.r04.s053_output/n100.r04.s053.primers.bed" -p "n100.r04.s053_output/n100.r04.s053.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s053_output/n100.r04.s053.trimmed.sorted.bam" "n100.r04.s053_output/n100.r04.s053.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s053_output/n100.r04.s053.reference.fas" "n100.r04.s053_output/n100.r04.s053.trimmed.sorted.bam" > "n100.r04.s053_output/n100.r04.s053.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s053_output/n100.r04.s053.reference.fas" --call-indels "n100.r04.s053_output/n100.r04.s053.trimmed.sorted.bam" > "n100.r04.s053_output/n100.r04.s053.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s053_output/n100.r04.s053.trimmed.sorted.bam" > "n100.r04.s053_output/n100.r04.s053.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s053_output/n100.r04.s053.depth.txt" "n100.r04.s053_output/n100.r04.s053.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s053_output/n100.r04.s053.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s053_output/n100.r04.s053.reference.fas" | bcftools consensus -m "n100.r04.s053_output/n100.r04.s053.low_depth.tsv" tmp.vcf.gz > "n100.r04.s053_output/n100.r04.s053.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s053_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:755011b9bb3dac6720e0169d6c5bc77e09f5f7a397680a2d5dc75f808dbb495a 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=22.5MiB max=128.3MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=210B max=1.0KiB
2021/07/08 16:57:19 scheduler task c42f4b75 (flow 7c224cc2): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s053.tar.gz resources {}
2021/07/08 16:57:19  ->  n100.r04.s053.Main.cp_out_file 7c224cc2 exec extern s3://niema-test/n100/r04/n100.r04.s053.tar.gz 35.8MiB
2021/07/08 16:57:19 scheduler task 7ab39a0f (flow 017350a1): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:19 scheduler task 7ab39a0f (flow 017350a1): unloading (try 0): started
2021/07/08 16:57:19 scheduler task 7ab39a0f (flow 017350a1): unloading list<val<.=3aeabb66 35.7MiB> 35.7MiB>
2021/07/08 16:57:19 scheduler task 7ab39a0f (flow 017350a1): unloading val<.=86e572cb 35.4MiB>
2021/07/08 16:57:19 scheduler task 7ab39a0f (flow 017350a1): unloading val<.=5b05f781 35.4MiB>
2021/07/08 16:57:19 scheduler task 557c43a3 (flow 1b1cecb5): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:328b4a48eaee5989a3da6d9ea94d762d1f8e81f009e313c07715e173051ee0f9 -> s3://niema-test/n100/r04/n100.r04.s094.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:19  <-  n100.r04.s094.Main.cp_out_file 1b1cecb5 ok   extern 0s 35.7MiB
2021/07/08 16:57:19 scheduler task 7ab39a0f (flow 017350a1): unloaded list<val<.=3aeabb66 35.7MiB> 35.7MiB>
2021/07/08 16:57:19 scheduler task 7ab39a0f (flow 017350a1): unloaded val<.=5b05f781 35.4MiB>
2021/07/08 16:57:19 scheduler task 7ab39a0f (flow 017350a1): unloaded val<.=86e572cb 35.4MiB>
2021/07/08 16:57:19 scheduler task 7ab39a0f (flow 017350a1): unloading (try 0): successful, next state: complete
2021/07/08 16:57:19  <-  n100.r04.s027.Main.out_file 017350a1 ok     exec 5m0s 35.7MiB
2021/07/08 16:57:19 n100.r04.s027.Main.out_file 017350a1 n100/r04/n100.r04.s027.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:60cebab65f6dccc86591012771ae311eaa426959b1e8e811805ef98dacb33b67
	sha256:017350a177325e94ee23436129d21a7cff487bdb020c75453442cdc4816479c6
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7ab39a0f72c6cb1aaec49a494510819ba03de2ee0054932143eff4158b87902c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s027_output"
	    wget -O "n100.r04.s027_output/n100.r04.s027.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s027_output/n100.r04.s027.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s027_output/n100.r04.s027.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s027_output/n100.r04.s027.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s027_output/n100.r04.s027.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s027_output/n100.r04.s027.reference.fas" "n100.r04.s027_output/n100.r04.s027.fq1.fastq" "n100.r04.s027_output/n100.r04.s027.fq2.fastq" | samtools view -bS - > "n100.r04.s027_output/n100.r04.s027.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s027_output/n100.r04.s027.untrimmed.sorted.bam" "n100.r04.s027_output/n100.r04.s027.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s027_output/n100.r04.s027.untrimmed.sorted.bam" -b "n100.r04.s027_output/n100.r04.s027.primers.bed" -p "n100.r04.s027_output/n100.r04.s027.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s027_output/n100.r04.s027.trimmed.sorted.bam" "n100.r04.s027_output/n100.r04.s027.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s027_output/n100.r04.s027.reference.fas" "n100.r04.s027_output/n100.r04.s027.trimmed.sorted.bam" > "n100.r04.s027_output/n100.r04.s027.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s027_output/n100.r04.s027.reference.fas" --call-indels "n100.r04.s027_output/n100.r04.s027.trimmed.sorted.bam" > "n100.r04.s027_output/n100.r04.s027.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s027_output/n100.r04.s027.trimmed.sorted.bam" > "n100.r04.s027_output/n100.r04.s027.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s027_output/n100.r04.s027.depth.txt" "n100.r04.s027_output/n100.r04.s027.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s027_output/n100.r04.s027.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s027_output/n100.r04.s027.reference.fas" | bcftools consensus -m "n100.r04.s027_output/n100.r04.s027.low_depth.tsv" tmp.vcf.gz > "n100.r04.s027_output/n100.r04.s027.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s027_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:3aeabb66a03e5f385ec2036949d4cfac962d4fb8e3ac20ea7ad7e7f76604c99d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=22.4MiB max=128.8MiB
	    disk mean=11.9MiB max=35.7MiB
	    tmp mean=350B max=2.1KiB
2021/07/08 16:57:19 scheduler task ab9d28e2 (flow ca047889): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s027.tar.gz resources {}
2021/07/08 16:57:19  ->  n100.r04.s027.Main.cp_out_file ca047889 exec extern s3://niema-test/n100/r04/n100.r04.s027.tar.gz 35.7MiB
2021/07/08 16:57:19 scheduler task 84a55080 (flow d93a17b8): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:19 scheduler task 84a55080 (flow d93a17b8): unloading (try 0): started
2021/07/08 16:57:19 scheduler task 84a55080 (flow d93a17b8): unloading list<val<.=c7ef0900 35.8MiB> 35.8MiB>
2021/07/08 16:57:19 scheduler task 84a55080 (flow d93a17b8): unloading val<.=1496a42b 35.4MiB>
2021/07/08 16:57:19 scheduler task 84a55080 (flow d93a17b8): unloading val<.=a6a11c17 35.4MiB>
2021/07/08 16:57:19 scheduler task 84a55080 (flow d93a17b8): unloaded list<val<.=c7ef0900 35.8MiB> 35.8MiB>
2021/07/08 16:57:19 scheduler task 84a55080 (flow d93a17b8): unloaded val<.=1496a42b 35.4MiB>
2021/07/08 16:57:19 scheduler task 84a55080 (flow d93a17b8): unloaded val<.=a6a11c17 35.4MiB>
2021/07/08 16:57:19 scheduler task 84a55080 (flow d93a17b8): unloading (try 0): successful, next state: complete
2021/07/08 16:57:19  <-  n100.r04.s049.Main.out_file d93a17b8 ok     exec 5m5s 35.8MiB
2021/07/08 16:57:19 n100.r04.s049.Main.out_file d93a17b8 n100/r04/n100.r04.s049.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:85aa3478242a8a1f6b848eea95cee62370c3b873365f4ed5dd173994e3264a55
	sha256:d93a17b8bed252b1d062c15e284565351d26fe56e5845495f2b49e72da85ae0d
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/84a55080980fd5568a59d99c0b62776090171711e949b0a66a7805ae04e4df32
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s049_output"
	    wget -O "n100.r04.s049_output/n100.r04.s049.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s049_output/n100.r04.s049.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s049_output/n100.r04.s049.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s049_output/n100.r04.s049.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s049_output/n100.r04.s049.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s049_output/n100.r04.s049.reference.fas" "n100.r04.s049_output/n100.r04.s049.fq1.fastq" "n100.r04.s049_output/n100.r04.s049.fq2.fastq" | samtools view -bS - > "n100.r04.s049_output/n100.r04.s049.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s049_output/n100.r04.s049.untrimmed.sorted.bam" "n100.r04.s049_output/n100.r04.s049.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s049_output/n100.r04.s049.untrimmed.sorted.bam" -b "n100.r04.s049_output/n100.r04.s049.primers.bed" -p "n100.r04.s049_output/n100.r04.s049.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s049_output/n100.r04.s049.trimmed.sorted.bam" "n100.r04.s049_output/n100.r04.s049.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s049_output/n100.r04.s049.reference.fas" "n100.r04.s049_output/n100.r04.s049.trimmed.sorted.bam" > "n100.r04.s049_output/n100.r04.s049.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s049_output/n100.r04.s049.reference.fas" --call-indels "n100.r04.s049_output/n100.r04.s049.trimmed.sorted.bam" > "n100.r04.s049_output/n100.r04.s049.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s049_output/n100.r04.s049.trimmed.sorted.bam" > "n100.r04.s049_output/n100.r04.s049.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s049_output/n100.r04.s049.depth.txt" "n100.r04.s049_output/n100.r04.s049.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s049_output/n100.r04.s049.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s049_output/n100.r04.s049.reference.fas" | bcftools consensus -m "n100.r04.s049_output/n100.r04.s049.low_depth.tsv" tmp.vcf.gz > "n100.r04.s049_output/n100.r04.s049.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s049_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:c7ef09000a402474d6502b2f4197679fe7e895a0b947476bf7ada220a15d3670 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=19.8MiB max=126.4MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 16:57:19 scheduler task 7f5216df (flow eeadd559): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s049.tar.gz resources {}
2021/07/08 16:57:19  ->  n100.r04.s049.Main.cp_out_file eeadd559 exec extern s3://niema-test/n100/r04/n100.r04.s049.tar.gz 35.8MiB
2021/07/08 16:57:19 scheduler task c3b5748c (flow c441a068): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:19 scheduler task c3b5748c (flow c441a068): promoting objects (try 0): started
2021/07/08 16:57:19 scheduler task ad833c50 (flow e08e8afe): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:19 scheduler task ad833c50 (flow e08e8afe): promoting objects (try 0): started
2021/07/08 16:57:19 scheduler task c3b5748c (flow c441a068): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:19 scheduler task 70865375 (flow 8427e955): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:5dd0591208e36d186f5d859cb7415d846d423ae64a9a9ee49b80e401d4f4b0fd -> s3://niema-test/n100/r04/n100.r04.s048.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:19  <-  n100.r04.s048.Main.cp_out_file 8427e955 ok   extern 0s 35.7MiB
2021/07/08 16:57:19 scheduler task c3b5748c (flow c441a068): retrieving diagnostic output (try 0): started
2021/07/08 16:57:19 scheduler task ad833c50 (flow e08e8afe): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:19 scheduler task ad833c50 (flow e08e8afe): retrieving diagnostic output (try 0): started
2021/07/08 16:57:19 scheduler task c3b5748c (flow c441a068): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:19 scheduler task c3b5748c (flow c441a068): retrieving result (try 0): started
2021/07/08 16:57:19 scheduler task ad833c50 (flow e08e8afe): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:19 scheduler task ad833c50 (flow e08e8afe): retrieving result (try 0): started
2021/07/08 16:57:20 scheduler task c42f4b75 (flow 7c224cc2): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:755011b9bb3dac6720e0169d6c5bc77e09f5f7a397680a2d5dc75f808dbb495a -> s3://niema-test/n100/r04/n100.r04.s053.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:57:20  <-  n100.r04.s053.Main.cp_out_file 7c224cc2 ok   extern 0s 35.8MiB
2021/07/08 16:57:20 scheduler task c3b5748c (flow c441a068): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:20 scheduler task c3b5748c (flow c441a068): transferring output (try 0): started
2021/07/08 16:57:20 scheduler task ad833c50 (flow e08e8afe): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:20 scheduler task ad833c50 (flow e08e8afe): transferring output (try 0): started
2021/07/08 16:57:20 scheduler task ab9d28e2 (flow ca047889): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:3aeabb66a03e5f385ec2036949d4cfac962d4fb8e3ac20ea7ad7e7f76604c99d -> s3://niema-test/n100/r04/n100.r04.s027.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:20  <-  n100.r04.s027.Main.cp_out_file ca047889 ok   extern 0s 35.7MiB
2021/07/08 16:57:20 scheduler task cbcd17ff (flow 42a8a7f6): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:20 scheduler task cbcd17ff (flow 42a8a7f6): promoting objects (try 0): started
2021/07/08 16:57:20 scheduler task fd10e005 (flow dd86c476): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:20 scheduler task fd10e005 (flow dd86c476): promoting objects (try 0): started
2021/07/08 16:57:20 scheduler task cbcd17ff (flow 42a8a7f6): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:20 scheduler task cbcd17ff (flow 42a8a7f6): retrieving diagnostic output (try 0): started
2021/07/08 16:57:20 scheduler task 7f5216df (flow eeadd559): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:c7ef09000a402474d6502b2f4197679fe7e895a0b947476bf7ada220a15d3670 -> s3://niema-test/n100/r04/n100.r04.s049.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:57:20  <-  n100.r04.s049.Main.cp_out_file eeadd559 ok   extern 0s 35.8MiB
2021/07/08 16:57:20 scheduler task fd10e005 (flow dd86c476): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:20 scheduler task fd10e005 (flow dd86c476): retrieving diagnostic output (try 0): started
2021/07/08 16:57:20 scheduler task cbcd17ff (flow 42a8a7f6): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:20 scheduler task cbcd17ff (flow 42a8a7f6): retrieving result (try 0): started
2021/07/08 16:57:20 scheduler task fd10e005 (flow dd86c476): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:20 scheduler task fd10e005 (flow dd86c476): retrieving result (try 0): started
2021/07/08 16:57:20 scheduler task cbcd17ff (flow 42a8a7f6): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:20 scheduler task cbcd17ff (flow 42a8a7f6): transferring output (try 0): started
2021/07/08 16:57:20 scheduler task fd10e005 (flow dd86c476): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:20 scheduler task fd10e005 (flow dd86c476): transferring output (try 0): started
2021/07/08 16:57:20 scheduler task 5947e81d (flow 57e39d90): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:20 scheduler task 5947e81d (flow 57e39d90): promoting objects (try 0): started
2021/07/08 16:57:20 scheduler task ad833c50 (flow e08e8afe): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:20 scheduler task ad833c50 (flow e08e8afe): unloading (try 0): started
2021/07/08 16:57:20 scheduler task ad833c50 (flow e08e8afe): unloading list<val<.=8d0deee1 35.8MiB> 35.8MiB>
2021/07/08 16:57:20 scheduler task ad833c50 (flow e08e8afe): unloading val<.=3b5be503 35.4MiB>
2021/07/08 16:57:20 scheduler task ad833c50 (flow e08e8afe): unloading val<.=34aa8351 35.4MiB>
2021/07/08 16:57:20 scheduler task c3b5748c (flow c441a068): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:20 scheduler task c3b5748c (flow c441a068): unloading (try 0): started
2021/07/08 16:57:20 scheduler task c3b5748c (flow c441a068): unloading list<val<.=12232de6 35.7MiB> 35.7MiB>
2021/07/08 16:57:20 scheduler task c3b5748c (flow c441a068): unloading val<.=c9346777 35.4MiB>
2021/07/08 16:57:20 scheduler task c3b5748c (flow c441a068): unloading val<.=916d514e 35.4MiB>
2021/07/08 16:57:20 scheduler task 5947e81d (flow 57e39d90): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:20 scheduler task 5947e81d (flow 57e39d90): retrieving diagnostic output (try 0): started
2021/07/08 16:57:20 scheduler task a818b8e8 (flow 1ca35c84): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:20 scheduler task a818b8e8 (flow 1ca35c84): promoting objects (try 0): started
2021/07/08 16:57:20 scheduler task faa7be58 (flow 5f9e75c1): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:20 scheduler task ad833c50 (flow e08e8afe): unloaded list<val<.=8d0deee1 35.8MiB> 35.8MiB>
2021/07/08 16:57:20 scheduler task faa7be58 (flow 5f9e75c1): promoting objects (try 0): started
2021/07/08 16:57:20 scheduler task ad833c50 (flow e08e8afe): unloaded val<.=3b5be503 35.4MiB>
2021/07/08 16:57:20 scheduler task ad833c50 (flow e08e8afe): unloaded val<.=34aa8351 35.4MiB>
2021/07/08 16:57:20 scheduler task ad833c50 (flow e08e8afe): unloading (try 0): successful, next state: complete
2021/07/08 16:57:20  <-  n100.r04.s015.Main.out_file e08e8afe ok     exec 5m1s 35.8MiB
2021/07/08 16:57:20 n100.r04.s015.Main.out_file e08e8afe n100/r04/n100.r04.s015.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fcefa8221ff09629d38d4fd9643698193b5485aee380cc69f83cc24a0eb8f791
	sha256:e08e8afe073be31ebcba648be0e686eaac9a876bd87f271defe5f9d00bbb3b94
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ad833c50530cebccde27bed54778aed8eb0908c03e97e4d6449a9a961c62ac25
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s015_output"
	    wget -O "n100.r04.s015_output/n100.r04.s015.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s015_output/n100.r04.s015.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s015_output/n100.r04.s015.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s015_output/n100.r04.s015.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s015_output/n100.r04.s015.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s015_output/n100.r04.s015.reference.fas" "n100.r04.s015_output/n100.r04.s015.fq1.fastq" "n100.r04.s015_output/n100.r04.s015.fq2.fastq" | samtools view -bS - > "n100.r04.s015_output/n100.r04.s015.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s015_output/n100.r04.s015.untrimmed.sorted.bam" "n100.r04.s015_output/n100.r04.s015.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s015_output/n100.r04.s015.untrimmed.sorted.bam" -b "n100.r04.s015_output/n100.r04.s015.primers.bed" -p "n100.r04.s015_output/n100.r04.s015.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s015_output/n100.r04.s015.trimmed.sorted.bam" "n100.r04.s015_output/n100.r04.s015.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s015_output/n100.r04.s015.reference.fas" "n100.r04.s015_output/n100.r04.s015.trimmed.sorted.bam" > "n100.r04.s015_output/n100.r04.s015.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s015_output/n100.r04.s015.reference.fas" --call-indels "n100.r04.s015_output/n100.r04.s015.trimmed.sorted.bam" > "n100.r04.s015_output/n100.r04.s015.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s015_output/n100.r04.s015.trimmed.sorted.bam" > "n100.r04.s015_output/n100.r04.s015.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s015_output/n100.r04.s015.depth.txt" "n100.r04.s015_output/n100.r04.s015.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s015_output/n100.r04.s015.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s015_output/n100.r04.s015.reference.fas" | bcftools consensus -m "n100.r04.s015_output/n100.r04.s015.low_depth.tsv" tmp.vcf.gz > "n100.r04.s015_output/n100.r04.s015.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s015_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:8d0deee12792b153f84242ccff11b79f5bf6c2f5391025133b9e5510f4b67379 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.8MiB max=129.1MiB
	    disk mean=7.1MiB max=35.8MiB
	    tmp mean=348B max=2.0KiB
2021/07/08 16:57:20 scheduler task b662ddae (flow a851f550): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s015.tar.gz resources {}
2021/07/08 16:57:20  ->  n100.r04.s015.Main.cp_out_file a851f550 exec extern s3://niema-test/n100/r04/n100.r04.s015.tar.gz 35.8MiB
2021/07/08 16:57:20 scheduler task c3b5748c (flow c441a068): unloaded list<val<.=12232de6 35.7MiB> 35.7MiB>
2021/07/08 16:57:20 scheduler task c3b5748c (flow c441a068): unloaded val<.=c9346777 35.4MiB>
2021/07/08 16:57:20 scheduler task c3b5748c (flow c441a068): unloaded val<.=916d514e 35.4MiB>
2021/07/08 16:57:20 scheduler task c3b5748c (flow c441a068): unloading (try 0): successful, next state: complete
2021/07/08 16:57:20  <-  n100.r04.s009.Main.out_file c441a068 ok     exec 5m0s 35.7MiB
2021/07/08 16:57:20 n100.r04.s009.Main.out_file c441a068 n100/r04/n100.r04.s009.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:cea5a4cc8df76435e88092f3ef8a3aae5d56074643d94f0804650790202f6e1c
	sha256:c441a068c58f087638889f775e5ea959cfd8e643d098a936721056100951f6b9
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c3b5748c556167e0447385317710a58abf4fff99c5b4d2ccfaf5043557975604
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s009_output"
	    wget -O "n100.r04.s009_output/n100.r04.s009.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s009_output/n100.r04.s009.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s009_output/n100.r04.s009.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s009_output/n100.r04.s009.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s009_output/n100.r04.s009.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s009_output/n100.r04.s009.reference.fas" "n100.r04.s009_output/n100.r04.s009.fq1.fastq" "n100.r04.s009_output/n100.r04.s009.fq2.fastq" | samtools view -bS - > "n100.r04.s009_output/n100.r04.s009.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s009_output/n100.r04.s009.untrimmed.sorted.bam" "n100.r04.s009_output/n100.r04.s009.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s009_output/n100.r04.s009.untrimmed.sorted.bam" -b "n100.r04.s009_output/n100.r04.s009.primers.bed" -p "n100.r04.s009_output/n100.r04.s009.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s009_output/n100.r04.s009.trimmed.sorted.bam" "n100.r04.s009_output/n100.r04.s009.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s009_output/n100.r04.s009.reference.fas" "n100.r04.s009_output/n100.r04.s009.trimmed.sorted.bam" > "n100.r04.s009_output/n100.r04.s009.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s009_output/n100.r04.s009.reference.fas" --call-indels "n100.r04.s009_output/n100.r04.s009.trimmed.sorted.bam" > "n100.r04.s009_output/n100.r04.s009.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s009_output/n100.r04.s009.trimmed.sorted.bam" > "n100.r04.s009_output/n100.r04.s009.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s009_output/n100.r04.s009.depth.txt" "n100.r04.s009_output/n100.r04.s009.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s009_output/n100.r04.s009.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s009_output/n100.r04.s009.reference.fas" | bcftools consensus -m "n100.r04.s009_output/n100.r04.s009.low_depth.tsv" tmp.vcf.gz > "n100.r04.s009_output/n100.r04.s009.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s009_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:12232de6b2ac7ad16a6ef1b1e36109a19289d168726c1553fc3af44aa1905445 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=23.0MiB max=127.3MiB
	    disk mean=10.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 16:57:20 scheduler task 7d2b5bad (flow 2e94c18d): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s009.tar.gz resources {}
2021/07/08 16:57:20  ->  n100.r04.s009.Main.cp_out_file 2e94c18d exec extern s3://niema-test/n100/r04/n100.r04.s009.tar.gz 35.7MiB
2021/07/08 16:57:20 scheduler task 5947e81d (flow 57e39d90): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:20 scheduler task 5947e81d (flow 57e39d90): retrieving result (try 0): started
2021/07/08 16:57:20 scheduler task a818b8e8 (flow 1ca35c84): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:20 scheduler task a818b8e8 (flow 1ca35c84): retrieving diagnostic output (try 0): started
2021/07/08 16:57:20 scheduler task faa7be58 (flow 5f9e75c1): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:20 scheduler task faa7be58 (flow 5f9e75c1): retrieving diagnostic output (try 0): started
2021/07/08 16:57:20 scheduler task 5947e81d (flow 57e39d90): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:20 scheduler task 5947e81d (flow 57e39d90): transferring output (try 0): started
2021/07/08 16:57:20 scheduler task a818b8e8 (flow 1ca35c84): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:20 scheduler task a818b8e8 (flow 1ca35c84): retrieving result (try 0): started
2021/07/08 16:57:20 scheduler task faa7be58 (flow 5f9e75c1): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:20 scheduler task faa7be58 (flow 5f9e75c1): retrieving result (try 0): started
2021/07/08 16:57:20 scheduler task 3447498f (flow 193dd149): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:20 scheduler task a818b8e8 (flow 1ca35c84): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:20 scheduler task faa7be58 (flow 5f9e75c1): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:20 scheduler task 3447498f (flow 193dd149): promoting objects (try 0): started
2021/07/08 16:57:21 scheduler task a818b8e8 (flow 1ca35c84): transferring output (try 0): started
2021/07/08 16:57:21 scheduler task faa7be58 (flow 5f9e75c1): transferring output (try 0): started
2021/07/08 16:57:21 scheduler task fd10e005 (flow dd86c476): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:21 scheduler task fd10e005 (flow dd86c476): unloading (try 0): started
2021/07/08 16:57:21 scheduler task fd10e005 (flow dd86c476): unloading list<val<.=38c0648f 35.7MiB> 35.7MiB>
2021/07/08 16:57:21 scheduler task fd10e005 (flow dd86c476): unloading val<.=e8265380 35.4MiB>
2021/07/08 16:57:21 scheduler task fd10e005 (flow dd86c476): unloading val<.=c7d6d1df 35.4MiB>
2021/07/08 16:57:21 scheduler task 3447498f (flow 193dd149): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:21 scheduler task 3447498f (flow 193dd149): retrieving diagnostic output (try 0): started
2021/07/08 16:57:21 scheduler task cbcd17ff (flow 42a8a7f6): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:21 scheduler task cbcd17ff (flow 42a8a7f6): unloading (try 0): started
2021/07/08 16:57:21 scheduler task cbcd17ff (flow 42a8a7f6): unloading list<val<.=81c265a6 35.7MiB> 35.7MiB>
2021/07/08 16:57:21 scheduler task cbcd17ff (flow 42a8a7f6): unloading val<.=7336dadd 35.4MiB>
2021/07/08 16:57:21 scheduler task cbcd17ff (flow 42a8a7f6): unloading val<.=e32e4614 35.4MiB>
2021/07/08 16:57:21 scheduler task fd10e005 (flow dd86c476): unloaded list<val<.=38c0648f 35.7MiB> 35.7MiB>
2021/07/08 16:57:21 scheduler task fd10e005 (flow dd86c476): unloaded val<.=c7d6d1df 35.4MiB>
2021/07/08 16:57:21 scheduler task fd10e005 (flow dd86c476): unloaded val<.=e8265380 35.4MiB>
2021/07/08 16:57:21 scheduler task fd10e005 (flow dd86c476): unloading (try 0): successful, next state: complete
2021/07/08 16:57:21  <-  n100.r04.s021.Main.out_file dd86c476 ok     exec 5m1s 35.7MiB
2021/07/08 16:57:21 n100.r04.s021.Main.out_file dd86c476 n100/r04/n100.r04.s021.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f216647aa2daaf615e5dd6c188914271b162e890231d023c0ae2cc130c231f9b
	sha256:dd86c47663d817230819484e2649a22c0425e0ee65ea6454b94bb9d11dcbebc5
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fd10e005851bbb3054ff7fcb6df7d9590acbb81b8a1f7446fa5b953d6a266e68
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s021_output"
	    wget -O "n100.r04.s021_output/n100.r04.s021.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s021_output/n100.r04.s021.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s021_output/n100.r04.s021.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s021_output/n100.r04.s021.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s021_output/n100.r04.s021.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s021_output/n100.r04.s021.reference.fas" "n100.r04.s021_output/n100.r04.s021.fq1.fastq" "n100.r04.s021_output/n100.r04.s021.fq2.fastq" | samtools view -bS - > "n100.r04.s021_output/n100.r04.s021.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s021_output/n100.r04.s021.untrimmed.sorted.bam" "n100.r04.s021_output/n100.r04.s021.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s021_output/n100.r04.s021.untrimmed.sorted.bam" -b "n100.r04.s021_output/n100.r04.s021.primers.bed" -p "n100.r04.s021_output/n100.r04.s021.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s021_output/n100.r04.s021.trimmed.sorted.bam" "n100.r04.s021_output/n100.r04.s021.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s021_output/n100.r04.s021.reference.fas" "n100.r04.s021_output/n100.r04.s021.trimmed.sorted.bam" > "n100.r04.s021_output/n100.r04.s021.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s021_output/n100.r04.s021.reference.fas" --call-indels "n100.r04.s021_output/n100.r04.s021.trimmed.sorted.bam" > "n100.r04.s021_output/n100.r04.s021.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s021_output/n100.r04.s021.trimmed.sorted.bam" > "n100.r04.s021_output/n100.r04.s021.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s021_output/n100.r04.s021.depth.txt" "n100.r04.s021_output/n100.r04.s021.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s021_output/n100.r04.s021.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s021_output/n100.r04.s021.reference.fas" | bcftools consensus -m "n100.r04.s021_output/n100.r04.s021.low_depth.tsv" tmp.vcf.gz > "n100.r04.s021_output/n100.r04.s021.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s021_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:38c0648f0b00b3dd2315156a1a9daf4842e49f2e723ac4fc1bee0c8e608e8d9f 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=23.7MiB max=126.2MiB
	    disk mean=7.4MiB max=35.7MiB
	    tmp mean=349B max=2.0KiB
2021/07/08 16:57:21 scheduler task 0af36dbf (flow ea50169c): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s021.tar.gz resources {}
2021/07/08 16:57:21  ->  n100.r04.s021.Main.cp_out_file ea50169c exec extern s3://niema-test/n100/r04/n100.r04.s021.tar.gz 35.7MiB
2021/07/08 16:57:21 scheduler task 8ef79677 (flow e14892e7): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:21 scheduler task 8ef79677 (flow e14892e7): promoting objects (try 0): started
2021/07/08 16:57:21 scheduler task 3447498f (flow 193dd149): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:21 scheduler task 3447498f (flow 193dd149): retrieving result (try 0): started
2021/07/08 16:57:21 scheduler task cbcd17ff (flow 42a8a7f6): unloaded list<val<.=81c265a6 35.7MiB> 35.7MiB>
2021/07/08 16:57:21 scheduler task cbcd17ff (flow 42a8a7f6): unloaded val<.=e32e4614 35.4MiB>
2021/07/08 16:57:21 scheduler task cbcd17ff (flow 42a8a7f6): unloaded val<.=7336dadd 35.4MiB>
2021/07/08 16:57:21 scheduler task cbcd17ff (flow 42a8a7f6): unloading (try 0): successful, next state: complete
2021/07/08 16:57:21  <-  n100.r04.s093.Main.out_file 42a8a7f6 ok     exec 5m1s 35.7MiB
2021/07/08 16:57:21 n100.r04.s093.Main.out_file 42a8a7f6 n100/r04/n100.r04.s093.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a4b467d48e671d442c4f29f78c7c451477d878ffb70a31c53a99f82c607d8e95
	sha256:42a8a7f6b0cceee6744fb899629c3f2a9255bfc51bd3de349045fd47e8d30321
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cbcd17ff44c094cd250d3d7560e8d8dd2663c3f9a73d264c67233b7bfbb11f6d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s093_output"
	    wget -O "n100.r04.s093_output/n100.r04.s093.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s093_output/n100.r04.s093.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s093_output/n100.r04.s093.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s093_output/n100.r04.s093.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s093_output/n100.r04.s093.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s093_output/n100.r04.s093.reference.fas" "n100.r04.s093_output/n100.r04.s093.fq1.fastq" "n100.r04.s093_output/n100.r04.s093.fq2.fastq" | samtools view -bS - > "n100.r04.s093_output/n100.r04.s093.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s093_output/n100.r04.s093.untrimmed.sorted.bam" "n100.r04.s093_output/n100.r04.s093.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s093_output/n100.r04.s093.untrimmed.sorted.bam" -b "n100.r04.s093_output/n100.r04.s093.primers.bed" -p "n100.r04.s093_output/n100.r04.s093.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s093_output/n100.r04.s093.trimmed.sorted.bam" "n100.r04.s093_output/n100.r04.s093.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s093_output/n100.r04.s093.reference.fas" "n100.r04.s093_output/n100.r04.s093.trimmed.sorted.bam" > "n100.r04.s093_output/n100.r04.s093.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s093_output/n100.r04.s093.reference.fas" --call-indels "n100.r04.s093_output/n100.r04.s093.trimmed.sorted.bam" > "n100.r04.s093_output/n100.r04.s093.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s093_output/n100.r04.s093.trimmed.sorted.bam" > "n100.r04.s093_output/n100.r04.s093.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s093_output/n100.r04.s093.depth.txt" "n100.r04.s093_output/n100.r04.s093.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s093_output/n100.r04.s093.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s093_output/n100.r04.s093.reference.fas" | bcftools consensus -m "n100.r04.s093_output/n100.r04.s093.low_depth.tsv" tmp.vcf.gz > "n100.r04.s093_output/n100.r04.s093.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s093_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:81c265a64ba9d06cde60eeba78f4903e52fb41c9b18030f66b5b53b69a78dd4a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=22.9MiB max=128.6MiB
	    disk mean=7.6MiB max=35.7MiB
	    tmp mean=172B max=1.0KiB
2021/07/08 16:57:21 scheduler task 7b1879b9 (flow 52e2bc4a): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s093.tar.gz resources {}
2021/07/08 16:57:21  ->  n100.r04.s093.Main.cp_out_file 52e2bc4a exec extern s3://niema-test/n100/r04/n100.r04.s093.tar.gz 35.7MiB
2021/07/08 16:57:21 scheduler task 8ef79677 (flow e14892e7): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:21 scheduler task 8ef79677 (flow e14892e7): retrieving diagnostic output (try 0): started
2021/07/08 16:57:21 scheduler task 3447498f (flow 193dd149): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:21 scheduler task 3447498f (flow 193dd149): transferring output (try 0): started
2021/07/08 16:57:21 scheduler task d243ea7f (flow f880a376): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:21 scheduler task d243ea7f (flow f880a376): promoting objects (try 0): started
2021/07/08 16:57:21 scheduler task 8ef79677 (flow e14892e7): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:21 scheduler task 8ef79677 (flow e14892e7): retrieving result (try 0): started
2021/07/08 16:57:21 scheduler task d243ea7f (flow f880a376): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:21 scheduler task d243ea7f (flow f880a376): retrieving diagnostic output (try 0): started
2021/07/08 16:57:21 scheduler task 8ef79677 (flow e14892e7): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:21 scheduler task b662ddae (flow a851f550): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:8d0deee12792b153f84242ccff11b79f5bf6c2f5391025133b9e5510f4b67379 -> s3://niema-test/n100/r04/n100.r04.s015.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:57:21  <-  n100.r04.s015.Main.cp_out_file a851f550 ok   extern 0s 35.8MiB
2021/07/08 16:57:21 scheduler task 8ef79677 (flow e14892e7): transferring output (try 0): started
2021/07/08 16:57:21 scheduler task b8eef7a3 (flow 7fe68b7b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:21 scheduler task b8eef7a3 (flow 7fe68b7b): promoting objects (try 0): started
2021/07/08 16:57:21 scheduler task 5947e81d (flow 57e39d90): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:21 scheduler task 5947e81d (flow 57e39d90): unloading (try 0): started
2021/07/08 16:57:21 scheduler task 5947e81d (flow 57e39d90): unloading list<val<.=e729ffe6 35.8MiB> 35.8MiB>
2021/07/08 16:57:21 scheduler task 5947e81d (flow 57e39d90): unloading val<.=e67ee383 35.4MiB>
2021/07/08 16:57:21 scheduler task 5947e81d (flow 57e39d90): unloading val<.=923ea57a 35.4MiB>
2021/07/08 16:57:21 scheduler task faa7be58 (flow 5f9e75c1): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:21 scheduler task faa7be58 (flow 5f9e75c1): unloading (try 0): started
2021/07/08 16:57:21 scheduler task faa7be58 (flow 5f9e75c1): unloading list<val<.=515a3357 35.7MiB> 35.7MiB>
2021/07/08 16:57:21 scheduler task faa7be58 (flow 5f9e75c1): unloading val<.=101fe79c 35.4MiB>
2021/07/08 16:57:21 scheduler task faa7be58 (flow 5f9e75c1): unloading val<.=cae3bc21 35.4MiB>
2021/07/08 16:57:21 scheduler task d243ea7f (flow f880a376): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:21 scheduler task d243ea7f (flow f880a376): retrieving result (try 0): started
2021/07/08 16:57:21 scheduler task 7d2b5bad (flow 2e94c18d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:12232de6b2ac7ad16a6ef1b1e36109a19289d168726c1553fc3af44aa1905445 -> s3://niema-test/n100/r04/n100.r04.s009.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:21  <-  n100.r04.s009.Main.cp_out_file 2e94c18d ok   extern 0s 35.7MiB
2021/07/08 16:57:21 scheduler task a818b8e8 (flow 1ca35c84): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:21 scheduler task b8eef7a3 (flow 7fe68b7b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:21 scheduler task a818b8e8 (flow 1ca35c84): unloading (try 0): started
2021/07/08 16:57:21 scheduler task a818b8e8 (flow 1ca35c84): unloading list<val<.=2edb4a4f 35.8MiB> 35.8MiB>
2021/07/08 16:57:21 scheduler task a818b8e8 (flow 1ca35c84): unloading val<.=5f38c2e2 35.4MiB>
2021/07/08 16:57:21 scheduler task a818b8e8 (flow 1ca35c84): unloading val<.=035fd7b3 35.4MiB>
2021/07/08 16:57:21 scheduler task b8eef7a3 (flow 7fe68b7b): retrieving diagnostic output (try 0): started
2021/07/08 16:57:21 scheduler task 5947e81d (flow 57e39d90): unloaded list<val<.=e729ffe6 35.8MiB> 35.8MiB>
2021/07/08 16:57:21 scheduler task 5947e81d (flow 57e39d90): unloaded val<.=923ea57a 35.4MiB>
2021/07/08 16:57:21 scheduler task 5947e81d (flow 57e39d90): unloaded val<.=e67ee383 35.4MiB>
2021/07/08 16:57:21 scheduler task 5947e81d (flow 57e39d90): unloading (try 0): successful, next state: complete
2021/07/08 16:57:21  <-  n100.r04.s083.Main.out_file 57e39d90 ok     exec 5m1s 35.8MiB
2021/07/08 16:57:21 n100.r04.s083.Main.out_file 57e39d90 n100/r04/n100.r04.s083.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e1596037674dc3a005709bf3a9e035e73773523bb12f755bb0bc022a7b161d9a
	sha256:57e39d90208fc2d8e37ce6ec0e4a9eb4362b687a97c9d775fcf666d7c2f0d8d5
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5947e81d6d38bb06741ddf2fb15effd37f221c459ed37a8493bfe9e8828f1d11
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s083_output"
	    wget -O "n100.r04.s083_output/n100.r04.s083.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s083_output/n100.r04.s083.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s083_output/n100.r04.s083.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s083_output/n100.r04.s083.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s083_output/n100.r04.s083.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s083_output/n100.r04.s083.reference.fas" "n100.r04.s083_output/n100.r04.s083.fq1.fastq" "n100.r04.s083_output/n100.r04.s083.fq2.fastq" | samtools view -bS - > "n100.r04.s083_output/n100.r04.s083.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s083_output/n100.r04.s083.untrimmed.sorted.bam" "n100.r04.s083_output/n100.r04.s083.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s083_output/n100.r04.s083.untrimmed.sorted.bam" -b "n100.r04.s083_output/n100.r04.s083.primers.bed" -p "n100.r04.s083_output/n100.r04.s083.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s083_output/n100.r04.s083.trimmed.sorted.bam" "n100.r04.s083_output/n100.r04.s083.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s083_output/n100.r04.s083.reference.fas" "n100.r04.s083_output/n100.r04.s083.trimmed.sorted.bam" > "n100.r04.s083_output/n100.r04.s083.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s083_output/n100.r04.s083.reference.fas" --call-indels "n100.r04.s083_output/n100.r04.s083.trimmed.sorted.bam" > "n100.r04.s083_output/n100.r04.s083.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s083_output/n100.r04.s083.trimmed.sorted.bam" > "n100.r04.s083_output/n100.r04.s083.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s083_output/n100.r04.s083.depth.txt" "n100.r04.s083_output/n100.r04.s083.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s083_output/n100.r04.s083.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s083_output/n100.r04.s083.reference.fas" | bcftools consensus -m "n100.r04.s083_output/n100.r04.s083.low_depth.tsv" tmp.vcf.gz > "n100.r04.s083_output/n100.r04.s083.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s083_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:e729ffe6b242ef55f465565739a0ec96f84605c20ff5d9c1676f1432a2a0a401 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=22.8MiB max=131.5MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=349B max=2.0KiB
2021/07/08 16:57:21 scheduler task 6d75a1f0 (flow a49cea84): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s083.tar.gz resources {}
2021/07/08 16:57:21  ->  n100.r04.s083.Main.cp_out_file a49cea84 exec extern s3://niema-test/n100/r04/n100.r04.s083.tar.gz 35.8MiB
2021/07/08 16:57:21 scheduler task faa7be58 (flow 5f9e75c1): unloaded val<.=101fe79c 35.4MiB>
2021/07/08 16:57:21 scheduler task faa7be58 (flow 5f9e75c1): unloaded list<val<.=515a3357 35.7MiB> 35.7MiB>
2021/07/08 16:57:21 scheduler task faa7be58 (flow 5f9e75c1): unloaded val<.=cae3bc21 35.4MiB>
2021/07/08 16:57:21 scheduler task faa7be58 (flow 5f9e75c1): unloading (try 0): successful, next state: complete
2021/07/08 16:57:21  <-  n100.r04.s100.Main.out_file 5f9e75c1 ok     exec 4m54s 35.7MiB
2021/07/08 16:57:21 n100.r04.s100.Main.out_file 5f9e75c1 n100/r04/n100.r04.s100.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:38e61602db3cc7028cc6d0b83198ad5d4e808d1f6f6ed9df0bc0f38a5faa310c
	sha256:5f9e75c1ccf5b0efde88a45dc91e806c95477105e2fbdba4bc11672bed36ab04
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/faa7be58e2c19e17e423a6f0f1494fb34446759522cc6439da974febcd0e9a15
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s100_output"
	    wget -O "n100.r04.s100_output/n100.r04.s100.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s100_output/n100.r04.s100.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s100_output/n100.r04.s100.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s100_output/n100.r04.s100.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s100_output/n100.r04.s100.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s100_output/n100.r04.s100.reference.fas" "n100.r04.s100_output/n100.r04.s100.fq1.fastq" "n100.r04.s100_output/n100.r04.s100.fq2.fastq" | samtools view -bS - > "n100.r04.s100_output/n100.r04.s100.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s100_output/n100.r04.s100.untrimmed.sorted.bam" "n100.r04.s100_output/n100.r04.s100.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s100_output/n100.r04.s100.untrimmed.sorted.bam" -b "n100.r04.s100_output/n100.r04.s100.primers.bed" -p "n100.r04.s100_output/n100.r04.s100.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s100_output/n100.r04.s100.trimmed.sorted.bam" "n100.r04.s100_output/n100.r04.s100.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s100_output/n100.r04.s100.reference.fas" "n100.r04.s100_output/n100.r04.s100.trimmed.sorted.bam" > "n100.r04.s100_output/n100.r04.s100.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s100_output/n100.r04.s100.reference.fas" --call-indels "n100.r04.s100_output/n100.r04.s100.trimmed.sorted.bam" > "n100.r04.s100_output/n100.r04.s100.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s100_output/n100.r04.s100.trimmed.sorted.bam" > "n100.r04.s100_output/n100.r04.s100.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s100_output/n100.r04.s100.depth.txt" "n100.r04.s100_output/n100.r04.s100.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s100_output/n100.r04.s100.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s100_output/n100.r04.s100.reference.fas" | bcftools consensus -m "n100.r04.s100_output/n100.r04.s100.low_depth.tsv" tmp.vcf.gz > "n100.r04.s100_output/n100.r04.s100.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s100_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:515a335780e1a6f0840a7ce586df0afc5636e320c9c4ddb9684c09804addef05 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.3MiB max=128.3MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 16:57:21 scheduler task dc08bff2 (flow 8d32aab6): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s100.tar.gz resources {}
2021/07/08 16:57:21  ->  n100.r04.s100.Main.cp_out_file 8d32aab6 exec extern s3://niema-test/n100/r04/n100.r04.s100.tar.gz 35.7MiB
2021/07/08 16:57:21 scheduler task d243ea7f (flow f880a376): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:21 scheduler task d243ea7f (flow f880a376): transferring output (try 0): started
2021/07/08 16:57:21 scheduler task a818b8e8 (flow 1ca35c84): unloaded list<val<.=2edb4a4f 35.8MiB> 35.8MiB>
2021/07/08 16:57:21 scheduler task a818b8e8 (flow 1ca35c84): unloaded val<.=5f38c2e2 35.4MiB>
2021/07/08 16:57:21 scheduler task a818b8e8 (flow 1ca35c84): unloaded val<.=035fd7b3 35.4MiB>
2021/07/08 16:57:21 scheduler task a818b8e8 (flow 1ca35c84): unloading (try 0): successful, next state: complete
2021/07/08 16:57:21  <-  n100.r04.s011.Main.out_file 1ca35c84 ok     exec 5m9s 35.8MiB
2021/07/08 16:57:21 n100.r04.s011.Main.out_file 1ca35c84 n100/r04/n100.r04.s011.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c4d79bd253342f342a6829d8590455d603057b606392193fd285391f715f6941
	sha256:1ca35c845f8e64255c22803f7204fa3276c817683c8d87fb1d44fdbeb3296e60
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a818b8e89d79608f973192973a743ee13d0f7d74fba6358f5343021cc214ac57
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s011_output"
	    wget -O "n100.r04.s011_output/n100.r04.s011.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s011_output/n100.r04.s011.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s011_output/n100.r04.s011.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s011_output/n100.r04.s011.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s011_output/n100.r04.s011.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s011_output/n100.r04.s011.reference.fas" "n100.r04.s011_output/n100.r04.s011.fq1.fastq" "n100.r04.s011_output/n100.r04.s011.fq2.fastq" | samtools view -bS - > "n100.r04.s011_output/n100.r04.s011.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s011_output/n100.r04.s011.untrimmed.sorted.bam" "n100.r04.s011_output/n100.r04.s011.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s011_output/n100.r04.s011.untrimmed.sorted.bam" -b "n100.r04.s011_output/n100.r04.s011.primers.bed" -p "n100.r04.s011_output/n100.r04.s011.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s011_output/n100.r04.s011.trimmed.sorted.bam" "n100.r04.s011_output/n100.r04.s011.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s011_output/n100.r04.s011.reference.fas" "n100.r04.s011_output/n100.r04.s011.trimmed.sorted.bam" > "n100.r04.s011_output/n100.r04.s011.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s011_output/n100.r04.s011.reference.fas" --call-indels "n100.r04.s011_output/n100.r04.s011.trimmed.sorted.bam" > "n100.r04.s011_output/n100.r04.s011.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s011_output/n100.r04.s011.trimmed.sorted.bam" > "n100.r04.s011_output/n100.r04.s011.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s011_output/n100.r04.s011.depth.txt" "n100.r04.s011_output/n100.r04.s011.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s011_output/n100.r04.s011.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s011_output/n100.r04.s011.reference.fas" | bcftools consensus -m "n100.r04.s011_output/n100.r04.s011.low_depth.tsv" tmp.vcf.gz > "n100.r04.s011_output/n100.r04.s011.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s011_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:2edb4a4fcf73f3dbbdc9006276f65bba40e8a8d282753560ee351ac62c83962b 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.5MiB max=125.9MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=522B max=2.1KiB
2021/07/08 16:57:21 scheduler task d26d6c41 (flow 3a72e344): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s011.tar.gz resources {}
2021/07/08 16:57:21  ->  n100.r04.s011.Main.cp_out_file 3a72e344 exec extern s3://niema-test/n100/r04/n100.r04.s011.tar.gz 35.8MiB
2021/07/08 16:57:21 scheduler task de374a3f (flow c4d8efb1): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:21 scheduler task b8eef7a3 (flow 7fe68b7b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:21 scheduler task de374a3f (flow c4d8efb1): promoting objects (try 0): started
2021/07/08 16:57:21 scheduler task b8eef7a3 (flow 7fe68b7b): retrieving result (try 0): started
2021/07/08 16:57:21 scheduler task b8eef7a3 (flow 7fe68b7b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:21 scheduler task de374a3f (flow c4d8efb1): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:21 scheduler task b8eef7a3 (flow 7fe68b7b): transferring output (try 0): started
2021/07/08 16:57:21 scheduler task de374a3f (flow c4d8efb1): retrieving diagnostic output (try 0): started
2021/07/08 16:57:21 scheduler task 3447498f (flow 193dd149): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:21 scheduler task 3447498f (flow 193dd149): unloading (try 0): started
2021/07/08 16:57:21 scheduler task 3447498f (flow 193dd149): unloading list<val<.=86dc4ee4 35.8MiB> 35.8MiB>
2021/07/08 16:57:21 scheduler task 3447498f (flow 193dd149): unloading val<.=cae29817 35.4MiB>
2021/07/08 16:57:21 scheduler task 3447498f (flow 193dd149): unloading val<.=b8a63c81 35.4MiB>
2021/07/08 16:57:21 scheduler task de374a3f (flow c4d8efb1): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:21 scheduler task de374a3f (flow c4d8efb1): retrieving result (try 0): started
2021/07/08 16:57:21 scheduler task 3447498f (flow 193dd149): unloaded val<.=cae29817 35.4MiB>
2021/07/08 16:57:21 scheduler task 3447498f (flow 193dd149): unloaded list<val<.=86dc4ee4 35.8MiB> 35.8MiB>
2021/07/08 16:57:21 scheduler task 3447498f (flow 193dd149): unloaded val<.=b8a63c81 35.4MiB>
2021/07/08 16:57:21 scheduler task 3447498f (flow 193dd149): unloading (try 0): successful, next state: complete
2021/07/08 16:57:21  <-  n100.r04.s023.Main.out_file 193dd149 ok     exec 5m2s 35.8MiB
2021/07/08 16:57:21 n100.r04.s023.Main.out_file 193dd149 n100/r04/n100.r04.s023.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c5ba58a189445f10429b9b12f6de75d58e5f2800ea93b4870688cba2639410b5
	sha256:193dd149854e7f60a30f9729beeb7201cf17d75cbc4e830230366db5292359c7
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3447498f6486237221a417fe6c41b56300653f1ba31f2bce02134321f0c0ff01
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s023_output"
	    wget -O "n100.r04.s023_output/n100.r04.s023.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s023_output/n100.r04.s023.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s023_output/n100.r04.s023.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s023_output/n100.r04.s023.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s023_output/n100.r04.s023.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s023_output/n100.r04.s023.reference.fas" "n100.r04.s023_output/n100.r04.s023.fq1.fastq" "n100.r04.s023_output/n100.r04.s023.fq2.fastq" | samtools view -bS - > "n100.r04.s023_output/n100.r04.s023.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s023_output/n100.r04.s023.untrimmed.sorted.bam" "n100.r04.s023_output/n100.r04.s023.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s023_output/n100.r04.s023.untrimmed.sorted.bam" -b "n100.r04.s023_output/n100.r04.s023.primers.bed" -p "n100.r04.s023_output/n100.r04.s023.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s023_output/n100.r04.s023.trimmed.sorted.bam" "n100.r04.s023_output/n100.r04.s023.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s023_output/n100.r04.s023.reference.fas" "n100.r04.s023_output/n100.r04.s023.trimmed.sorted.bam" > "n100.r04.s023_output/n100.r04.s023.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s023_output/n100.r04.s023.reference.fas" --call-indels "n100.r04.s023_output/n100.r04.s023.trimmed.sorted.bam" > "n100.r04.s023_output/n100.r04.s023.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s023_output/n100.r04.s023.trimmed.sorted.bam" > "n100.r04.s023_output/n100.r04.s023.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s023_output/n100.r04.s023.depth.txt" "n100.r04.s023_output/n100.r04.s023.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s023_output/n100.r04.s023.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s023_output/n100.r04.s023.reference.fas" | bcftools consensus -m "n100.r04.s023_output/n100.r04.s023.low_depth.tsv" tmp.vcf.gz > "n100.r04.s023_output/n100.r04.s023.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s023_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:86dc4ee4940d62503148a781765a5e45befe790cf56ba4548b6d9b602a479b31 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=22.2MiB max=128.7MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=874B max=3.1KiB
2021/07/08 16:57:21 scheduler task f2863103 (flow 252dc073): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s023.tar.gz resources {}
2021/07/08 16:57:21  ->  n100.r04.s023.Main.cp_out_file 252dc073 exec extern s3://niema-test/n100/r04/n100.r04.s023.tar.gz 35.8MiB
2021/07/08 16:57:21 scheduler task de374a3f (flow c4d8efb1): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:21 scheduler task de374a3f (flow c4d8efb1): transferring output (try 0): started
2021/07/08 16:57:21 scheduler task 0af36dbf (flow ea50169c): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:38c0648f0b00b3dd2315156a1a9daf4842e49f2e723ac4fc1bee0c8e608e8d9f -> s3://niema-test/n100/r04/n100.r04.s021.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:21  <-  n100.r04.s021.Main.cp_out_file ea50169c ok   extern 0s 35.7MiB
2021/07/08 16:57:21 scheduler task 8ef79677 (flow e14892e7): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:21 scheduler task 8ef79677 (flow e14892e7): unloading (try 0): started
2021/07/08 16:57:21 scheduler task 8ef79677 (flow e14892e7): unloading list<val<.=a29f09e2 35.8MiB> 35.8MiB>
2021/07/08 16:57:21 scheduler task 8ef79677 (flow e14892e7): unloading val<.=11e2b815 35.4MiB>
2021/07/08 16:57:21 scheduler task 8ef79677 (flow e14892e7): unloading val<.=03ae56aa 35.4MiB>
2021/07/08 16:57:22 scheduler task 8ef79677 (flow e14892e7): unloaded val<.=11e2b815 35.4MiB>
2021/07/08 16:57:22 scheduler task 8ef79677 (flow e14892e7): unloaded list<val<.=a29f09e2 35.8MiB> 35.8MiB>
2021/07/08 16:57:22 scheduler task 7b1879b9 (flow 52e2bc4a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:81c265a64ba9d06cde60eeba78f4903e52fb41c9b18030f66b5b53b69a78dd4a -> s3://niema-test/n100/r04/n100.r04.s093.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:22  <-  n100.r04.s093.Main.cp_out_file 52e2bc4a ok   extern 0s 35.7MiB
2021/07/08 16:57:22 scheduler task 8ef79677 (flow e14892e7): unloaded val<.=03ae56aa 35.4MiB>
2021/07/08 16:57:22 scheduler task 8ef79677 (flow e14892e7): unloading (try 0): successful, next state: complete
2021/07/08 16:57:22  <-  n100.r04.s078.Main.out_file e14892e7 ok     exec 5m1s 35.8MiB
2021/07/08 16:57:22 n100.r04.s078.Main.out_file e14892e7 n100/r04/n100.r04.s078.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ddd1afc4018442ce8cea58ec07b0ca5b4bd65c7744c54b4b8de9c59e502764d4
	sha256:e14892e7b60d7a66cd65de930019b43ff4e26b8c110378ba0f31f2ffadcc8280
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8ef796778e800e17f561cb353e7b5861c65056c0f7f6fed1f22cdd8f851351c2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s078_output"
	    wget -O "n100.r04.s078_output/n100.r04.s078.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s078_output/n100.r04.s078.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s078_output/n100.r04.s078.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s078_output/n100.r04.s078.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s078_output/n100.r04.s078.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s078_output/n100.r04.s078.reference.fas" "n100.r04.s078_output/n100.r04.s078.fq1.fastq" "n100.r04.s078_output/n100.r04.s078.fq2.fastq" | samtools view -bS - > "n100.r04.s078_output/n100.r04.s078.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s078_output/n100.r04.s078.untrimmed.sorted.bam" "n100.r04.s078_output/n100.r04.s078.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s078_output/n100.r04.s078.untrimmed.sorted.bam" -b "n100.r04.s078_output/n100.r04.s078.primers.bed" -p "n100.r04.s078_output/n100.r04.s078.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s078_output/n100.r04.s078.trimmed.sorted.bam" "n100.r04.s078_output/n100.r04.s078.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s078_output/n100.r04.s078.reference.fas" "n100.r04.s078_output/n100.r04.s078.trimmed.sorted.bam" > "n100.r04.s078_output/n100.r04.s078.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s078_output/n100.r04.s078.reference.fas" --call-indels "n100.r04.s078_output/n100.r04.s078.trimmed.sorted.bam" > "n100.r04.s078_output/n100.r04.s078.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s078_output/n100.r04.s078.trimmed.sorted.bam" > "n100.r04.s078_output/n100.r04.s078.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s078_output/n100.r04.s078.depth.txt" "n100.r04.s078_output/n100.r04.s078.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s078_output/n100.r04.s078.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s078_output/n100.r04.s078.reference.fas" | bcftools consensus -m "n100.r04.s078_output/n100.r04.s078.low_depth.tsv" tmp.vcf.gz > "n100.r04.s078_output/n100.r04.s078.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s078_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a29f09e2736add4444a52d0499f53887cdc09bacec66ce1c342c2722a28a29cc 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.2MiB max=130.8MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=174B max=1.0KiB
2021/07/08 16:57:22 scheduler task 1e7e49fe (flow eceaa11b): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s078.tar.gz resources {}
2021/07/08 16:57:22  ->  n100.r04.s078.Main.cp_out_file eceaa11b exec extern s3://niema-test/n100/r04/n100.r04.s078.tar.gz 35.8MiB
2021/07/08 16:57:22 scheduler task 5aa4bfc6 (flow e7565ce6): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:22 scheduler task 5aa4bfc6 (flow e7565ce6): promoting objects (try 0): started
2021/07/08 16:57:22 scheduler task 0956178b (flow 5468f4a3): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:22 scheduler task 0956178b (flow 5468f4a3): promoting objects (try 0): started
2021/07/08 16:57:22 scheduler task d243ea7f (flow f880a376): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:22 scheduler task d243ea7f (flow f880a376): unloading (try 0): started
2021/07/08 16:57:22 scheduler task d243ea7f (flow f880a376): unloading list<val<.=387dd1ce 35.8MiB> 35.8MiB>
2021/07/08 16:57:22 scheduler task d243ea7f (flow f880a376): unloading val<.=86418d8f 35.4MiB>
2021/07/08 16:57:22 scheduler task d243ea7f (flow f880a376): unloading val<.=f64b1764 35.4MiB>
2021/07/08 16:57:22 scheduler task 5aa4bfc6 (flow e7565ce6): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:22 scheduler task 5aa4bfc6 (flow e7565ce6): retrieving diagnostic output (try 0): started
2021/07/08 16:57:22 scheduler task 0956178b (flow 5468f4a3): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:22 scheduler task 0956178b (flow 5468f4a3): retrieving diagnostic output (try 0): started
2021/07/08 16:57:22 scheduler task d243ea7f (flow f880a376): unloaded val<.=f64b1764 35.4MiB>
2021/07/08 16:57:22 scheduler task d243ea7f (flow f880a376): unloaded val<.=86418d8f 35.4MiB>
2021/07/08 16:57:22 scheduler task d243ea7f (flow f880a376): unloaded list<val<.=387dd1ce 35.8MiB> 35.8MiB>
2021/07/08 16:57:22 scheduler task d243ea7f (flow f880a376): unloading (try 0): successful, next state: complete
2021/07/08 16:57:22  <-  n100.r04.s056.Main.out_file f880a376 ok     exec 4m56s 35.8MiB
2021/07/08 16:57:22 n100.r04.s056.Main.out_file f880a376 n100/r04/n100.r04.s056.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:cb43bbbb38509eb954597e5910167f5eb123ccb0862a63b25e4e941dfe68a52a
	sha256:f880a376db1705ae3c2bc487dab0e104f0bcfcc5706311c22ec6310acf05a2b8
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d243ea7fe3a5ef22b3933ac4c1a79c39de8541bd7e13afd7fb92a38cbf13dc9e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s056_output"
	    wget -O "n100.r04.s056_output/n100.r04.s056.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s056_output/n100.r04.s056.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s056_output/n100.r04.s056.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s056_output/n100.r04.s056.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s056_output/n100.r04.s056.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s056_output/n100.r04.s056.reference.fas" "n100.r04.s056_output/n100.r04.s056.fq1.fastq" "n100.r04.s056_output/n100.r04.s056.fq2.fastq" | samtools view -bS - > "n100.r04.s056_output/n100.r04.s056.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s056_output/n100.r04.s056.untrimmed.sorted.bam" "n100.r04.s056_output/n100.r04.s056.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s056_output/n100.r04.s056.untrimmed.sorted.bam" -b "n100.r04.s056_output/n100.r04.s056.primers.bed" -p "n100.r04.s056_output/n100.r04.s056.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s056_output/n100.r04.s056.trimmed.sorted.bam" "n100.r04.s056_output/n100.r04.s056.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s056_output/n100.r04.s056.reference.fas" "n100.r04.s056_output/n100.r04.s056.trimmed.sorted.bam" > "n100.r04.s056_output/n100.r04.s056.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s056_output/n100.r04.s056.reference.fas" --call-indels "n100.r04.s056_output/n100.r04.s056.trimmed.sorted.bam" > "n100.r04.s056_output/n100.r04.s056.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s056_output/n100.r04.s056.trimmed.sorted.bam" > "n100.r04.s056_output/n100.r04.s056.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s056_output/n100.r04.s056.depth.txt" "n100.r04.s056_output/n100.r04.s056.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s056_output/n100.r04.s056.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s056_output/n100.r04.s056.reference.fas" | bcftools consensus -m "n100.r04.s056_output/n100.r04.s056.low_depth.tsv" tmp.vcf.gz > "n100.r04.s056_output/n100.r04.s056.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s056_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:387dd1ce43460a141ffe31667ddcc5551b156f749175a46f2c11c52504b840d6 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=23.1MiB max=131.8MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 16:57:22 scheduler task c48f8872 (flow 6b416d1f): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s056.tar.gz resources {}
2021/07/08 16:57:22  ->  n100.r04.s056.Main.cp_out_file 6b416d1f exec extern s3://niema-test/n100/r04/n100.r04.s056.tar.gz 35.8MiB
2021/07/08 16:57:22 scheduler task dc08bff2 (flow 8d32aab6): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:515a335780e1a6f0840a7ce586df0afc5636e320c9c4ddb9684c09804addef05 -> s3://niema-test/n100/r04/n100.r04.s100.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:22  <-  n100.r04.s100.Main.cp_out_file 8d32aab6 ok   extern 0s 35.7MiB
2021/07/08 16:57:22 scheduler task 5aa4bfc6 (flow e7565ce6): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:22 scheduler task 5aa4bfc6 (flow e7565ce6): retrieving result (try 0): started
2021/07/08 16:57:22 scheduler task 0956178b (flow 5468f4a3): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:22 scheduler task 0956178b (flow 5468f4a3): retrieving result (try 0): started
2021/07/08 16:57:22 scheduler task e7c3fad1 (flow 73faee38): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:22 scheduler task 5aa4bfc6 (flow e7565ce6): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:22 scheduler task e7c3fad1 (flow 73faee38): promoting objects (try 0): started
2021/07/08 16:57:22 scheduler task 5aa4bfc6 (flow e7565ce6): transferring output (try 0): started
2021/07/08 16:57:22 scheduler task 0956178b (flow 5468f4a3): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:22 scheduler task 0956178b (flow 5468f4a3): transferring output (try 0): started
2021/07/08 16:57:22 scheduler task b8eef7a3 (flow 7fe68b7b): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:22 scheduler task b8eef7a3 (flow 7fe68b7b): unloading (try 0): started
2021/07/08 16:57:22 scheduler task b8eef7a3 (flow 7fe68b7b): unloading list<val<.=bdedeb8f 35.7MiB> 35.7MiB>
2021/07/08 16:57:22 scheduler task b8eef7a3 (flow 7fe68b7b): unloading val<.=5c2eb3a8 35.4MiB>
2021/07/08 16:57:22 scheduler task b8eef7a3 (flow 7fe68b7b): unloading val<.=6d54512b 35.4MiB>
2021/07/08 16:57:22 scheduler task 737c1b6c (flow 39f0abce): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:22 scheduler task 737c1b6c (flow 39f0abce): promoting objects (try 0): started
2021/07/08 16:57:22 scheduler task de374a3f (flow c4d8efb1): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:22 scheduler task de374a3f (flow c4d8efb1): unloading (try 0): started
2021/07/08 16:57:22 scheduler task de374a3f (flow c4d8efb1): unloading list<val<.=d921ecd7 35.7MiB> 35.7MiB>
2021/07/08 16:57:22 scheduler task de374a3f (flow c4d8efb1): unloading val<.=fde6d67e 35.4MiB>
2021/07/08 16:57:22 scheduler task de374a3f (flow c4d8efb1): unloading val<.=8c8934ee 35.4MiB>
2021/07/08 16:57:22 scheduler task e7c3fad1 (flow 73faee38): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:22 scheduler task d26d6c41 (flow 3a72e344): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:2edb4a4fcf73f3dbbdc9006276f65bba40e8a8d282753560ee351ac62c83962b -> s3://niema-test/n100/r04/n100.r04.s011.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:57:22  <-  n100.r04.s011.Main.cp_out_file 3a72e344 ok   extern 0s 35.8MiB
2021/07/08 16:57:22 scheduler task e7c3fad1 (flow 73faee38): retrieving diagnostic output (try 0): started
2021/07/08 16:57:22 scheduler task b8eef7a3 (flow 7fe68b7b): unloaded list<val<.=bdedeb8f 35.7MiB> 35.7MiB>
2021/07/08 16:57:22 scheduler task 6d75a1f0 (flow a49cea84): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:e729ffe6b242ef55f465565739a0ec96f84605c20ff5d9c1676f1432a2a0a401 -> s3://niema-test/n100/r04/n100.r04.s083.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:57:22  <-  n100.r04.s083.Main.cp_out_file a49cea84 ok   extern 0s 35.8MiB
2021/07/08 16:57:22 scheduler task b8eef7a3 (flow 7fe68b7b): unloaded val<.=5c2eb3a8 35.4MiB>
2021/07/08 16:57:22 scheduler task b8eef7a3 (flow 7fe68b7b): unloaded val<.=6d54512b 35.4MiB>
2021/07/08 16:57:22 scheduler task b8eef7a3 (flow 7fe68b7b): unloading (try 0): successful, next state: complete
2021/07/08 16:57:22  <-  n100.r04.s082.Main.out_file 7fe68b7b ok     exec 5m2s 35.7MiB
2021/07/08 16:57:22 n100.r04.s082.Main.out_file 7fe68b7b n100/r04/n100.r04.s082.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:931c5f3e06ace6f3463a8bbce4433916d0cbaa645cc63680af8ea8a69d825c86
	sha256:7fe68b7bebf2c5b7b4eee6918404b011cec6d4f520e30ee24111f828e22f12dd
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b8eef7a30a056506915d0e43ddbe4a504265c7ee5d48a57f7138b34f3584fc3a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s082_output"
	    wget -O "n100.r04.s082_output/n100.r04.s082.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s082_output/n100.r04.s082.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s082_output/n100.r04.s082.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s082_output/n100.r04.s082.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s082_output/n100.r04.s082.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s082_output/n100.r04.s082.reference.fas" "n100.r04.s082_output/n100.r04.s082.fq1.fastq" "n100.r04.s082_output/n100.r04.s082.fq2.fastq" | samtools view -bS - > "n100.r04.s082_output/n100.r04.s082.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s082_output/n100.r04.s082.untrimmed.sorted.bam" "n100.r04.s082_output/n100.r04.s082.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s082_output/n100.r04.s082.untrimmed.sorted.bam" -b "n100.r04.s082_output/n100.r04.s082.primers.bed" -p "n100.r04.s082_output/n100.r04.s082.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s082_output/n100.r04.s082.trimmed.sorted.bam" "n100.r04.s082_output/n100.r04.s082.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s082_output/n100.r04.s082.reference.fas" "n100.r04.s082_output/n100.r04.s082.trimmed.sorted.bam" > "n100.r04.s082_output/n100.r04.s082.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s082_output/n100.r04.s082.reference.fas" --call-indels "n100.r04.s082_output/n100.r04.s082.trimmed.sorted.bam" > "n100.r04.s082_output/n100.r04.s082.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s082_output/n100.r04.s082.trimmed.sorted.bam" > "n100.r04.s082_output/n100.r04.s082.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s082_output/n100.r04.s082.depth.txt" "n100.r04.s082_output/n100.r04.s082.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s082_output/n100.r04.s082.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s082_output/n100.r04.s082.reference.fas" | bcftools consensus -m "n100.r04.s082_output/n100.r04.s082.low_depth.tsv" tmp.vcf.gz > "n100.r04.s082_output/n100.r04.s082.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s082_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:bdedeb8fb08cd5f61cde2c64b04e6094e324b8591b6966fb4d8bc06a0dc2c9b0 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=22.8MiB max=127.3MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 16:57:22 scheduler task 921555f5 (flow c66506fa): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s082.tar.gz resources {}
2021/07/08 16:57:22  ->  n100.r04.s082.Main.cp_out_file c66506fa exec extern s3://niema-test/n100/r04/n100.r04.s082.tar.gz 35.7MiB
2021/07/08 16:57:22 scheduler task 737c1b6c (flow 39f0abce): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:22 scheduler task 737c1b6c (flow 39f0abce): retrieving diagnostic output (try 0): started
2021/07/08 16:57:22 scheduler task de374a3f (flow c4d8efb1): unloaded val<.=8c8934ee 35.4MiB>
2021/07/08 16:57:22 scheduler task de374a3f (flow c4d8efb1): unloaded list<val<.=d921ecd7 35.7MiB> 35.7MiB>
2021/07/08 16:57:22 scheduler task de374a3f (flow c4d8efb1): unloaded val<.=fde6d67e 35.4MiB>
2021/07/08 16:57:22 scheduler task de374a3f (flow c4d8efb1): unloading (try 0): successful, next state: complete
2021/07/08 16:57:22  <-  n100.r04.s059.Main.out_file c4d8efb1 ok     exec 4m56s 35.7MiB
2021/07/08 16:57:22 n100.r04.s059.Main.out_file c4d8efb1 n100/r04/n100.r04.s059.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:07bda1ab6afc4dbf23bfebf316a981957480c66a1201eeaa01d6e66eead34e32
	sha256:c4d8efb136b3a59e1ac97565d4baccd17705ea94c9d01512f30d7f82d9133349
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/de374a3f0c3acf586ba3574aebb1123cc442bc7c4bc38106cc1ebeb7e0fb58b0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s059_output"
	    wget -O "n100.r04.s059_output/n100.r04.s059.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s059_output/n100.r04.s059.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s059_output/n100.r04.s059.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s059_output/n100.r04.s059.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s059_output/n100.r04.s059.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s059_output/n100.r04.s059.reference.fas" "n100.r04.s059_output/n100.r04.s059.fq1.fastq" "n100.r04.s059_output/n100.r04.s059.fq2.fastq" | samtools view -bS - > "n100.r04.s059_output/n100.r04.s059.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s059_output/n100.r04.s059.untrimmed.sorted.bam" "n100.r04.s059_output/n100.r04.s059.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s059_output/n100.r04.s059.untrimmed.sorted.bam" -b "n100.r04.s059_output/n100.r04.s059.primers.bed" -p "n100.r04.s059_output/n100.r04.s059.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s059_output/n100.r04.s059.trimmed.sorted.bam" "n100.r04.s059_output/n100.r04.s059.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s059_output/n100.r04.s059.reference.fas" "n100.r04.s059_output/n100.r04.s059.trimmed.sorted.bam" > "n100.r04.s059_output/n100.r04.s059.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s059_output/n100.r04.s059.reference.fas" --call-indels "n100.r04.s059_output/n100.r04.s059.trimmed.sorted.bam" > "n100.r04.s059_output/n100.r04.s059.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s059_output/n100.r04.s059.trimmed.sorted.bam" > "n100.r04.s059_output/n100.r04.s059.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s059_output/n100.r04.s059.depth.txt" "n100.r04.s059_output/n100.r04.s059.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s059_output/n100.r04.s059.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s059_output/n100.r04.s059.reference.fas" | bcftools consensus -m "n100.r04.s059_output/n100.r04.s059.low_depth.tsv" tmp.vcf.gz > "n100.r04.s059_output/n100.r04.s059.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s059_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d921ecd71f466ee2913952b8fb69386ff10a04ad07173b1635141aa5065a3066 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.1MiB max=127.9MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 16:57:22 scheduler task a5745c82 (flow 45752c0d): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s059.tar.gz resources {}
2021/07/08 16:57:22  ->  n100.r04.s059.Main.cp_out_file 45752c0d exec extern s3://niema-test/n100/r04/n100.r04.s059.tar.gz 35.7MiB
2021/07/08 16:57:22 scheduler task f2863103 (flow 252dc073): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:86dc4ee4940d62503148a781765a5e45befe790cf56ba4548b6d9b602a479b31 -> s3://niema-test/n100/r04/n100.r04.s023.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:57:22  <-  n100.r04.s023.Main.cp_out_file 252dc073 ok   extern 0s 35.8MiB
2021/07/08 16:57:22 scheduler task e7c3fad1 (flow 73faee38): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:22 scheduler task e7c3fad1 (flow 73faee38): retrieving result (try 0): started
2021/07/08 16:57:22 scheduler task 737c1b6c (flow 39f0abce): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:22 scheduler task 737c1b6c (flow 39f0abce): retrieving result (try 0): started
2021/07/08 16:57:22 scheduler task 1e7e49fe (flow eceaa11b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a29f09e2736add4444a52d0499f53887cdc09bacec66ce1c342c2722a28a29cc -> s3://niema-test/n100/r04/n100.r04.s078.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:57:22  <-  n100.r04.s078.Main.cp_out_file eceaa11b ok   extern 0s 35.8MiB
2021/07/08 16:57:22 scheduler task e7c3fad1 (flow 73faee38): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:22 scheduler task e7c3fad1 (flow 73faee38): transferring output (try 0): started
2021/07/08 16:57:22 scheduler task 737c1b6c (flow 39f0abce): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:22 scheduler task 737c1b6c (flow 39f0abce): transferring output (try 0): started
2021/07/08 16:57:22 scheduler task 7a4dfaa4 (flow 47beba72): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:22 scheduler task 7a4dfaa4 (flow 47beba72): promoting objects (try 0): started
2021/07/08 16:57:22 scheduler task 7a4dfaa4 (flow 47beba72): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:22 scheduler task 7a4dfaa4 (flow 47beba72): retrieving diagnostic output (try 0): started
2021/07/08 16:57:22 scheduler task 5aa4bfc6 (flow e7565ce6): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:22 scheduler task 5aa4bfc6 (flow e7565ce6): unloading (try 0): started
2021/07/08 16:57:22 scheduler task 5aa4bfc6 (flow e7565ce6): unloading list<val<.=a601f0fd 35.7MiB> 35.7MiB>
2021/07/08 16:57:22 scheduler task 5aa4bfc6 (flow e7565ce6): unloading val<.=87cf2f86 35.4MiB>
2021/07/08 16:57:22 scheduler task 5aa4bfc6 (flow e7565ce6): unloading val<.=fe9fff2b 35.4MiB>
2021/07/08 16:57:22 scheduler task 7a4dfaa4 (flow 47beba72): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:22 scheduler task 7a4dfaa4 (flow 47beba72): retrieving result (try 0): started
2021/07/08 16:57:22 scheduler task 5aa4bfc6 (flow e7565ce6): unloaded list<val<.=a601f0fd 35.7MiB> 35.7MiB>
2021/07/08 16:57:22 scheduler task 5aa4bfc6 (flow e7565ce6): unloaded val<.=87cf2f86 35.4MiB>
2021/07/08 16:57:22 scheduler task 5aa4bfc6 (flow e7565ce6): unloaded val<.=fe9fff2b 35.4MiB>
2021/07/08 16:57:22 scheduler task 5aa4bfc6 (flow e7565ce6): unloading (try 0): successful, next state: complete
2021/07/08 16:57:22  <-  n100.r04.s054.Main.out_file e7565ce6 ok     exec 5m3s 35.7MiB
2021/07/08 16:57:22 n100.r04.s054.Main.out_file e7565ce6 n100/r04/n100.r04.s054.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:94a35da8385b2e7706d6272f31bb01e1703c81fc6545002715515e0ec36ec019
	sha256:e7565ce6830ca1f49051717e87cc57230e4f32e50f7f9fbba1102418732b9d72
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5aa4bfc6bedd86797b499b2ba57a602f046f5e13f8855021f382f05858813f11
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s054_output"
	    wget -O "n100.r04.s054_output/n100.r04.s054.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s054_output/n100.r04.s054.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s054_output/n100.r04.s054.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s054_output/n100.r04.s054.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s054_output/n100.r04.s054.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s054_output/n100.r04.s054.reference.fas" "n100.r04.s054_output/n100.r04.s054.fq1.fastq" "n100.r04.s054_output/n100.r04.s054.fq2.fastq" | samtools view -bS - > "n100.r04.s054_output/n100.r04.s054.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s054_output/n100.r04.s054.untrimmed.sorted.bam" "n100.r04.s054_output/n100.r04.s054.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s054_output/n100.r04.s054.untrimmed.sorted.bam" -b "n100.r04.s054_output/n100.r04.s054.primers.bed" -p "n100.r04.s054_output/n100.r04.s054.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s054_output/n100.r04.s054.trimmed.sorted.bam" "n100.r04.s054_output/n100.r04.s054.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s054_output/n100.r04.s054.reference.fas" "n100.r04.s054_output/n100.r04.s054.trimmed.sorted.bam" > "n100.r04.s054_output/n100.r04.s054.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s054_output/n100.r04.s054.reference.fas" --call-indels "n100.r04.s054_output/n100.r04.s054.trimmed.sorted.bam" > "n100.r04.s054_output/n100.r04.s054.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s054_output/n100.r04.s054.trimmed.sorted.bam" > "n100.r04.s054_output/n100.r04.s054.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s054_output/n100.r04.s054.depth.txt" "n100.r04.s054_output/n100.r04.s054.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s054_output/n100.r04.s054.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s054_output/n100.r04.s054.reference.fas" | bcftools consensus -m "n100.r04.s054_output/n100.r04.s054.low_depth.tsv" tmp.vcf.gz > "n100.r04.s054_output/n100.r04.s054.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s054_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a601f0fd48cb6985f9eb9b7a646c59d58210ee8166cc0deacb29c55b0aaef935 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.6MiB max=128.9MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=523B max=2.1KiB
2021/07/08 16:57:22 scheduler task ea1793ae (flow 166c00c6): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s054.tar.gz resources {}
2021/07/08 16:57:22  ->  n100.r04.s054.Main.cp_out_file 166c00c6 exec extern s3://niema-test/n100/r04/n100.r04.s054.tar.gz 35.7MiB
2021/07/08 16:57:22 scheduler task 0956178b (flow 5468f4a3): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:22 scheduler task 7a4dfaa4 (flow 47beba72): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:23 scheduler task 0956178b (flow 5468f4a3): unloading (try 0): started
2021/07/08 16:57:23 scheduler task 0956178b (flow 5468f4a3): unloading list<val<.=9e2a6ffe 35.7MiB> 35.7MiB>
2021/07/08 16:57:23 scheduler task 0956178b (flow 5468f4a3): unloading val<.=3f96a22f 35.4MiB>
2021/07/08 16:57:23 scheduler task 0956178b (flow 5468f4a3): unloading val<.=38cd5010 35.4MiB>
2021/07/08 16:57:23 scheduler task 7a4dfaa4 (flow 47beba72): transferring output (try 0): started
2021/07/08 16:57:23 scheduler task c48f8872 (flow 6b416d1f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:387dd1ce43460a141ffe31667ddcc5551b156f749175a46f2c11c52504b840d6 -> s3://niema-test/n100/r04/n100.r04.s056.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:57:23  <-  n100.r04.s056.Main.cp_out_file 6b416d1f ok   extern 0s 35.8MiB
2021/07/08 16:57:23 scheduler task 0956178b (flow 5468f4a3): unloaded list<val<.=9e2a6ffe 35.7MiB> 35.7MiB>
2021/07/08 16:57:23 scheduler task 0956178b (flow 5468f4a3): unloaded val<.=3f96a22f 35.4MiB>
2021/07/08 16:57:23 scheduler task 0956178b (flow 5468f4a3): unloaded val<.=38cd5010 35.4MiB>
2021/07/08 16:57:23 scheduler task 0956178b (flow 5468f4a3): unloading (try 0): successful, next state: complete
2021/07/08 16:57:23  <-  n100.r04.s014.Main.out_file 5468f4a3 ok     exec 4m56s 35.7MiB
2021/07/08 16:57:23 n100.r04.s014.Main.out_file 5468f4a3 n100/r04/n100.r04.s014.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0533f6e7b418cdbea9da6ce204d6e1ea6bad32cb4e74a2f898dcebe5d4ab5dc6
	sha256:5468f4a3d69006edc65ea2a45de557a7b8fe4525e245d6d75d79c1cacb2a29f8
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0956178b3f4c7e14023058878e5822b37cebc05f22415ebbcdd3afe2cd45ff66
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s014_output"
	    wget -O "n100.r04.s014_output/n100.r04.s014.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s014_output/n100.r04.s014.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s014_output/n100.r04.s014.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s014_output/n100.r04.s014.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s014_output/n100.r04.s014.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s014_output/n100.r04.s014.reference.fas" "n100.r04.s014_output/n100.r04.s014.fq1.fastq" "n100.r04.s014_output/n100.r04.s014.fq2.fastq" | samtools view -bS - > "n100.r04.s014_output/n100.r04.s014.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s014_output/n100.r04.s014.untrimmed.sorted.bam" "n100.r04.s014_output/n100.r04.s014.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s014_output/n100.r04.s014.untrimmed.sorted.bam" -b "n100.r04.s014_output/n100.r04.s014.primers.bed" -p "n100.r04.s014_output/n100.r04.s014.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s014_output/n100.r04.s014.trimmed.sorted.bam" "n100.r04.s014_output/n100.r04.s014.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s014_output/n100.r04.s014.reference.fas" "n100.r04.s014_output/n100.r04.s014.trimmed.sorted.bam" > "n100.r04.s014_output/n100.r04.s014.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s014_output/n100.r04.s014.reference.fas" --call-indels "n100.r04.s014_output/n100.r04.s014.trimmed.sorted.bam" > "n100.r04.s014_output/n100.r04.s014.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s014_output/n100.r04.s014.trimmed.sorted.bam" > "n100.r04.s014_output/n100.r04.s014.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s014_output/n100.r04.s014.depth.txt" "n100.r04.s014_output/n100.r04.s014.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s014_output/n100.r04.s014.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s014_output/n100.r04.s014.reference.fas" | bcftools consensus -m "n100.r04.s014_output/n100.r04.s014.low_depth.tsv" tmp.vcf.gz > "n100.r04.s014_output/n100.r04.s014.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s014_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9e2a6ffedcd6483a48f3590c174044f3e8ffbacbdd6267b8ab7c57c487928951 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.5MiB max=129.1MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 16:57:23 scheduler task abe615b1 (flow 8761504f): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s014.tar.gz resources {}
2021/07/08 16:57:23  ->  n100.r04.s014.Main.cp_out_file 8761504f exec extern s3://niema-test/n100/r04/n100.r04.s014.tar.gz 35.7MiB
2021/07/08 16:57:23 scheduler task 737c1b6c (flow 39f0abce): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:23 scheduler task 737c1b6c (flow 39f0abce): unloading (try 0): started
2021/07/08 16:57:23 scheduler task 737c1b6c (flow 39f0abce): unloading list<val<.=ec1f774f 35.8MiB> 35.8MiB>
2021/07/08 16:57:23 scheduler task 737c1b6c (flow 39f0abce): unloading val<.=33805fdd 35.4MiB>
2021/07/08 16:57:23 scheduler task 737c1b6c (flow 39f0abce): unloading val<.=f5ac4db5 35.4MiB>
2021/07/08 16:57:23 scheduler task e7c3fad1 (flow 73faee38): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:23 scheduler task e7c3fad1 (flow 73faee38): unloading (try 0): started
2021/07/08 16:57:23 scheduler task e7c3fad1 (flow 73faee38): unloading list<val<.=d8ba7639 35.7MiB> 35.7MiB>
2021/07/08 16:57:23 scheduler task e7c3fad1 (flow 73faee38): unloading val<.=5d31d1c6 35.4MiB>
2021/07/08 16:57:23 scheduler task e7c3fad1 (flow 73faee38): unloading val<.=dc48dd7f 35.4MiB>
2021/07/08 16:57:23 scheduler task 921555f5 (flow c66506fa): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:bdedeb8fb08cd5f61cde2c64b04e6094e324b8591b6966fb4d8bc06a0dc2c9b0 -> s3://niema-test/n100/r04/n100.r04.s082.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:23  <-  n100.r04.s082.Main.cp_out_file c66506fa ok   extern 0s 35.7MiB
2021/07/08 16:57:23 scheduler task 737c1b6c (flow 39f0abce): unloaded list<val<.=ec1f774f 35.8MiB> 35.8MiB>
2021/07/08 16:57:23 scheduler task a5745c82 (flow 45752c0d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d921ecd71f466ee2913952b8fb69386ff10a04ad07173b1635141aa5065a3066 -> s3://niema-test/n100/r04/n100.r04.s059.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:23  <-  n100.r04.s059.Main.cp_out_file 45752c0d ok   extern 0s 35.7MiB
2021/07/08 16:57:23 scheduler task 737c1b6c (flow 39f0abce): unloaded val<.=f5ac4db5 35.4MiB>
2021/07/08 16:57:23 scheduler task 737c1b6c (flow 39f0abce): unloaded val<.=33805fdd 35.4MiB>
2021/07/08 16:57:23 scheduler task 737c1b6c (flow 39f0abce): unloading (try 0): successful, next state: complete
2021/07/08 16:57:23  <-  n100.r04.s039.Main.out_file 39f0abce ok     exec 5m4s 35.8MiB
2021/07/08 16:57:23 n100.r04.s039.Main.out_file 39f0abce n100/r04/n100.r04.s039.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b16506bb115d3b30b72c5f35f23dac477746d190255ad5a8750eb54cedef44cd
	sha256:39f0abcebc92975f0c4d9d247c8eb7755cb6e67c7b12648ddf5a2428510e326e
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/737c1b6c766771783ea2989d100025f944435fe53bf0eb504c04357ab86a7b8b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s039_output"
	    wget -O "n100.r04.s039_output/n100.r04.s039.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s039_output/n100.r04.s039.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s039_output/n100.r04.s039.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s039_output/n100.r04.s039.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s039_output/n100.r04.s039.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s039_output/n100.r04.s039.reference.fas" "n100.r04.s039_output/n100.r04.s039.fq1.fastq" "n100.r04.s039_output/n100.r04.s039.fq2.fastq" | samtools view -bS - > "n100.r04.s039_output/n100.r04.s039.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s039_output/n100.r04.s039.untrimmed.sorted.bam" "n100.r04.s039_output/n100.r04.s039.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s039_output/n100.r04.s039.untrimmed.sorted.bam" -b "n100.r04.s039_output/n100.r04.s039.primers.bed" -p "n100.r04.s039_output/n100.r04.s039.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s039_output/n100.r04.s039.trimmed.sorted.bam" "n100.r04.s039_output/n100.r04.s039.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s039_output/n100.r04.s039.reference.fas" "n100.r04.s039_output/n100.r04.s039.trimmed.sorted.bam" > "n100.r04.s039_output/n100.r04.s039.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s039_output/n100.r04.s039.reference.fas" --call-indels "n100.r04.s039_output/n100.r04.s039.trimmed.sorted.bam" > "n100.r04.s039_output/n100.r04.s039.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s039_output/n100.r04.s039.trimmed.sorted.bam" > "n100.r04.s039_output/n100.r04.s039.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s039_output/n100.r04.s039.depth.txt" "n100.r04.s039_output/n100.r04.s039.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s039_output/n100.r04.s039.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s039_output/n100.r04.s039.reference.fas" | bcftools consensus -m "n100.r04.s039_output/n100.r04.s039.low_depth.tsv" tmp.vcf.gz > "n100.r04.s039_output/n100.r04.s039.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s039_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:ec1f774f0e14039f7b34726eb0593c60546460a425fae54cdcb8cfcc2f2f60fe 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=23.1MiB max=129.6MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=867B max=3.0KiB
2021/07/08 16:57:23 scheduler task 71ee2d83 (flow d8aca52b): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s039.tar.gz resources {}
2021/07/08 16:57:23  ->  n100.r04.s039.Main.cp_out_file d8aca52b exec extern s3://niema-test/n100/r04/n100.r04.s039.tar.gz 35.8MiB
2021/07/08 16:57:23 scheduler task e7c3fad1 (flow 73faee38): unloaded val<.=5d31d1c6 35.4MiB>
2021/07/08 16:57:23 scheduler task e7c3fad1 (flow 73faee38): unloaded list<val<.=d8ba7639 35.7MiB> 35.7MiB>
2021/07/08 16:57:23 scheduler task e7c3fad1 (flow 73faee38): unloaded val<.=dc48dd7f 35.4MiB>
2021/07/08 16:57:23 scheduler task e7c3fad1 (flow 73faee38): unloading (try 0): successful, next state: complete
2021/07/08 16:57:23  <-  n100.r04.s002.Main.out_file 73faee38 ok     exec 5m3s 35.7MiB
2021/07/08 16:57:23 n100.r04.s002.Main.out_file 73faee38 n100/r04/n100.r04.s002.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6e590e9c9363302faf55921754e518d894d69bb5bdfed9d9807178f56e085c4d
	sha256:73faee38e24e54449bec704141f964a575fad3b721733d5b0831eaa7d3b195bb
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e7c3fad1648d9c112ab346e7e4c6ef4986835ab705d02a1a712e0a0df4ec3d86
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s002_output"
	    wget -O "n100.r04.s002_output/n100.r04.s002.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s002_output/n100.r04.s002.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s002_output/n100.r04.s002.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s002_output/n100.r04.s002.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s002_output/n100.r04.s002.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s002_output/n100.r04.s002.reference.fas" "n100.r04.s002_output/n100.r04.s002.fq1.fastq" "n100.r04.s002_output/n100.r04.s002.fq2.fastq" | samtools view -bS - > "n100.r04.s002_output/n100.r04.s002.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s002_output/n100.r04.s002.untrimmed.sorted.bam" "n100.r04.s002_output/n100.r04.s002.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s002_output/n100.r04.s002.untrimmed.sorted.bam" -b "n100.r04.s002_output/n100.r04.s002.primers.bed" -p "n100.r04.s002_output/n100.r04.s002.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s002_output/n100.r04.s002.trimmed.sorted.bam" "n100.r04.s002_output/n100.r04.s002.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s002_output/n100.r04.s002.reference.fas" "n100.r04.s002_output/n100.r04.s002.trimmed.sorted.bam" > "n100.r04.s002_output/n100.r04.s002.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s002_output/n100.r04.s002.reference.fas" --call-indels "n100.r04.s002_output/n100.r04.s002.trimmed.sorted.bam" > "n100.r04.s002_output/n100.r04.s002.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s002_output/n100.r04.s002.trimmed.sorted.bam" > "n100.r04.s002_output/n100.r04.s002.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s002_output/n100.r04.s002.depth.txt" "n100.r04.s002_output/n100.r04.s002.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s002_output/n100.r04.s002.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s002_output/n100.r04.s002.reference.fas" | bcftools consensus -m "n100.r04.s002_output/n100.r04.s002.low_depth.tsv" tmp.vcf.gz > "n100.r04.s002_output/n100.r04.s002.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s002_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d8ba763974730a07b47401b6331780bd95f4030a7b16664b4bdcaecdb05a86cc 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.2MiB max=128.2MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=523B max=2.1KiB
2021/07/08 16:57:23 scheduler task 3de38f6e (flow 4f55e6ba): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s002.tar.gz resources {}
2021/07/08 16:57:23  ->  n100.r04.s002.Main.cp_out_file 4f55e6ba exec extern s3://niema-test/n100/r04/n100.r04.s002.tar.gz 35.7MiB
2021/07/08 16:57:23 scheduler task 176e8b91 (flow 0d7bf897): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:23 scheduler task 176e8b91 (flow 0d7bf897): promoting objects (try 0): started
2021/07/08 16:57:23 scheduler task 7a4dfaa4 (flow 47beba72): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:23 scheduler task 7a4dfaa4 (flow 47beba72): unloading (try 0): started
2021/07/08 16:57:23 scheduler task 7a4dfaa4 (flow 47beba72): unloading list<val<.=b6e81e49 35.8MiB> 35.8MiB>
2021/07/08 16:57:23 scheduler task 7a4dfaa4 (flow 47beba72): unloading val<.=463286ab 35.4MiB>
2021/07/08 16:57:23 scheduler task 7a4dfaa4 (flow 47beba72): unloading val<.=70764f28 35.4MiB>
2021/07/08 16:57:23 scheduler task 176e8b91 (flow 0d7bf897): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:23 scheduler task 176e8b91 (flow 0d7bf897): retrieving diagnostic output (try 0): started
2021/07/08 16:57:23 scheduler task 7a4dfaa4 (flow 47beba72): unloaded val<.=463286ab 35.4MiB>
2021/07/08 16:57:23 scheduler task 7a4dfaa4 (flow 47beba72): unloaded val<.=70764f28 35.4MiB>
2021/07/08 16:57:23 scheduler task 7a4dfaa4 (flow 47beba72): unloaded list<val<.=b6e81e49 35.8MiB> 35.8MiB>
2021/07/08 16:57:23 scheduler task 7a4dfaa4 (flow 47beba72): unloading (try 0): successful, next state: complete
2021/07/08 16:57:23  <-  n100.r04.s085.Main.out_file 47beba72 ok     exec 4m57s 35.8MiB
2021/07/08 16:57:23 n100.r04.s085.Main.out_file 47beba72 n100/r04/n100.r04.s085.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:82eb2e0e956543390b0c0d7dbde52e58e6177606417321dacb261551b4543f46
	sha256:47beba72eb2486bb84f876ffd5621d40368ed7811c278c68d81ebab49b97994b
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7a4dfaa455b7bc8f434f942ca10b7c3aea8ca237670bd746aa35291caf9f71ba
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s085_output"
	    wget -O "n100.r04.s085_output/n100.r04.s085.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s085_output/n100.r04.s085.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s085_output/n100.r04.s085.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s085_output/n100.r04.s085.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s085_output/n100.r04.s085.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s085_output/n100.r04.s085.reference.fas" "n100.r04.s085_output/n100.r04.s085.fq1.fastq" "n100.r04.s085_output/n100.r04.s085.fq2.fastq" | samtools view -bS - > "n100.r04.s085_output/n100.r04.s085.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s085_output/n100.r04.s085.untrimmed.sorted.bam" "n100.r04.s085_output/n100.r04.s085.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s085_output/n100.r04.s085.untrimmed.sorted.bam" -b "n100.r04.s085_output/n100.r04.s085.primers.bed" -p "n100.r04.s085_output/n100.r04.s085.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s085_output/n100.r04.s085.trimmed.sorted.bam" "n100.r04.s085_output/n100.r04.s085.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s085_output/n100.r04.s085.reference.fas" "n100.r04.s085_output/n100.r04.s085.trimmed.sorted.bam" > "n100.r04.s085_output/n100.r04.s085.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s085_output/n100.r04.s085.reference.fas" --call-indels "n100.r04.s085_output/n100.r04.s085.trimmed.sorted.bam" > "n100.r04.s085_output/n100.r04.s085.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s085_output/n100.r04.s085.trimmed.sorted.bam" > "n100.r04.s085_output/n100.r04.s085.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s085_output/n100.r04.s085.depth.txt" "n100.r04.s085_output/n100.r04.s085.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s085_output/n100.r04.s085.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s085_output/n100.r04.s085.reference.fas" | bcftools consensus -m "n100.r04.s085_output/n100.r04.s085.low_depth.tsv" tmp.vcf.gz > "n100.r04.s085_output/n100.r04.s085.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s085_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:b6e81e49330361662618ae8e8858c65d40358bbaa016022cd690c3018dc20cfd 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=23.3MiB max=131.5MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 16:57:23 scheduler task 17ad3d77 (flow 4e6d77eb): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s085.tar.gz resources {}
2021/07/08 16:57:23  ->  n100.r04.s085.Main.cp_out_file 4e6d77eb exec extern s3://niema-test/n100/r04/n100.r04.s085.tar.gz 35.8MiB
2021/07/08 16:57:23 scheduler task 176e8b91 (flow 0d7bf897): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:23 scheduler task 176e8b91 (flow 0d7bf897): retrieving result (try 0): started
2021/07/08 16:57:23 scheduler task ea1793ae (flow 166c00c6): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a601f0fd48cb6985f9eb9b7a646c59d58210ee8166cc0deacb29c55b0aaef935 -> s3://niema-test/n100/r04/n100.r04.s054.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:23  <-  n100.r04.s054.Main.cp_out_file 166c00c6 ok   extern 0s 35.7MiB
2021/07/08 16:57:23 scheduler task 7709a29e (flow 20e26740): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:23 scheduler task 176e8b91 (flow 0d7bf897): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:23 scheduler task 7709a29e (flow 20e26740): promoting objects (try 0): started
2021/07/08 16:57:23 scheduler task 176e8b91 (flow 0d7bf897): transferring output (try 0): started
2021/07/08 16:57:23 scheduler task abe615b1 (flow 8761504f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9e2a6ffedcd6483a48f3590c174044f3e8ffbacbdd6267b8ab7c57c487928951 -> s3://niema-test/n100/r04/n100.r04.s014.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:23  <-  n100.r04.s014.Main.cp_out_file 8761504f ok   extern 0s 35.7MiB
2021/07/08 16:57:23 scheduler task 7709a29e (flow 20e26740): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:23 scheduler task 7709a29e (flow 20e26740): retrieving diagnostic output (try 0): started
2021/07/08 16:57:23 scheduler task 7709a29e (flow 20e26740): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:23 scheduler task 7709a29e (flow 20e26740): retrieving result (try 0): started
2021/07/08 16:57:23 scheduler task 71ee2d83 (flow d8aca52b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:ec1f774f0e14039f7b34726eb0593c60546460a425fae54cdcb8cfcc2f2f60fe -> s3://niema-test/n100/r04/n100.r04.s039.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:57:23  <-  n100.r04.s039.Main.cp_out_file d8aca52b ok   extern 0s 35.8MiB
2021/07/08 16:57:23 scheduler task 7709a29e (flow 20e26740): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:24 scheduler task 7709a29e (flow 20e26740): transferring output (try 0): started
2021/07/08 16:57:24 scheduler task 5e492d41 (flow ac9e3373): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:24 scheduler task 5e492d41 (flow ac9e3373): promoting objects (try 0): started
2021/07/08 16:57:24 scheduler task 5e492d41 (flow ac9e3373): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:24 scheduler task 5e492d41 (flow ac9e3373): retrieving diagnostic output (try 0): started
2021/07/08 16:57:24 scheduler task 3de38f6e (flow 4f55e6ba): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d8ba763974730a07b47401b6331780bd95f4030a7b16664b4bdcaecdb05a86cc -> s3://niema-test/n100/r04/n100.r04.s002.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:24  <-  n100.r04.s002.Main.cp_out_file 4f55e6ba ok   extern 0s 35.7MiB
2021/07/08 16:57:24 scheduler task 176e8b91 (flow 0d7bf897): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:24 scheduler task 176e8b91 (flow 0d7bf897): unloading (try 0): started
2021/07/08 16:57:24 scheduler task 176e8b91 (flow 0d7bf897): unloading list<val<.=622f5d41 35.7MiB> 35.7MiB>
2021/07/08 16:57:24 scheduler task 176e8b91 (flow 0d7bf897): unloading val<.=d614a0a3 35.4MiB>
2021/07/08 16:57:24 scheduler task 176e8b91 (flow 0d7bf897): unloading val<.=e4ac636d 35.4MiB>
2021/07/08 16:57:24 scheduler task 5e492d41 (flow ac9e3373): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:24 scheduler task 5e492d41 (flow ac9e3373): retrieving result (try 0): started
2021/07/08 16:57:24 scheduler task 176e8b91 (flow 0d7bf897): unloaded val<.=e4ac636d 35.4MiB>
2021/07/08 16:57:24 scheduler task 176e8b91 (flow 0d7bf897): unloaded val<.=d614a0a3 35.4MiB>
2021/07/08 16:57:24 scheduler task 176e8b91 (flow 0d7bf897): unloaded list<val<.=622f5d41 35.7MiB> 35.7MiB>
2021/07/08 16:57:24 scheduler task 176e8b91 (flow 0d7bf897): unloading (try 0): successful, next state: complete
2021/07/08 16:57:24  <-  n100.r04.s018.Main.out_file 0d7bf897 ok     exec 4m57s 35.7MiB
2021/07/08 16:57:24 n100.r04.s018.Main.out_file 0d7bf897 n100/r04/n100.r04.s018.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8d07222f5eaa9d4fb69bc81f5afbeee858311652d0fc2b5f10cb3c14c236e218
	sha256:0d7bf897782c3cbea2c1fcc59d946411e6c39b66f6259dfedc9c152d549a273f
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/176e8b919a27f356b7b6eb6676ce7beb184e5343042d48bb52a9004839f8b38f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s018_output"
	    wget -O "n100.r04.s018_output/n100.r04.s018.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s018_output/n100.r04.s018.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s018_output/n100.r04.s018.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s018_output/n100.r04.s018.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s018_output/n100.r04.s018.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s018_output/n100.r04.s018.reference.fas" "n100.r04.s018_output/n100.r04.s018.fq1.fastq" "n100.r04.s018_output/n100.r04.s018.fq2.fastq" | samtools view -bS - > "n100.r04.s018_output/n100.r04.s018.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s018_output/n100.r04.s018.untrimmed.sorted.bam" "n100.r04.s018_output/n100.r04.s018.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s018_output/n100.r04.s018.untrimmed.sorted.bam" -b "n100.r04.s018_output/n100.r04.s018.primers.bed" -p "n100.r04.s018_output/n100.r04.s018.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s018_output/n100.r04.s018.trimmed.sorted.bam" "n100.r04.s018_output/n100.r04.s018.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s018_output/n100.r04.s018.reference.fas" "n100.r04.s018_output/n100.r04.s018.trimmed.sorted.bam" > "n100.r04.s018_output/n100.r04.s018.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s018_output/n100.r04.s018.reference.fas" --call-indels "n100.r04.s018_output/n100.r04.s018.trimmed.sorted.bam" > "n100.r04.s018_output/n100.r04.s018.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s018_output/n100.r04.s018.trimmed.sorted.bam" > "n100.r04.s018_output/n100.r04.s018.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s018_output/n100.r04.s018.depth.txt" "n100.r04.s018_output/n100.r04.s018.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s018_output/n100.r04.s018.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s018_output/n100.r04.s018.reference.fas" | bcftools consensus -m "n100.r04.s018_output/n100.r04.s018.low_depth.tsv" tmp.vcf.gz > "n100.r04.s018_output/n100.r04.s018.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s018_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:622f5d41d07120a0decdf503c256bb656bf4ef48350fc2ec4cec0b1e8e016f70 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.6MiB max=129.1MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 16:57:24 scheduler task 0cd55007 (flow 87d3c981): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s018.tar.gz resources {}
2021/07/08 16:57:24  ->  n100.r04.s018.Main.cp_out_file 87d3c981 exec extern s3://niema-test/n100/r04/n100.r04.s018.tar.gz 35.7MiB
2021/07/08 16:57:24 scheduler task 5e492d41 (flow ac9e3373): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:24 scheduler task 5e492d41 (flow ac9e3373): transferring output (try 0): started
2021/07/08 16:57:24 scheduler task 17ad3d77 (flow 4e6d77eb): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:b6e81e49330361662618ae8e8858c65d40358bbaa016022cd690c3018dc20cfd -> s3://niema-test/n100/r04/n100.r04.s085.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:57:24  <-  n100.r04.s085.Main.cp_out_file 4e6d77eb ok   extern 0s 35.8MiB
2021/07/08 16:57:24 scheduler task 5aa3253c (flow c8481164): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:24 scheduler task 5aa3253c (flow c8481164): promoting objects (try 0): started
2021/07/08 16:57:24 scheduler task 7709a29e (flow 20e26740): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:24 scheduler task 0d09bc33 (flow 8f555b2a): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:24 scheduler task 7709a29e (flow 20e26740): unloading (try 0): started
2021/07/08 16:57:24 scheduler task 7709a29e (flow 20e26740): unloading list<val<.=862d4782 35.7MiB> 35.7MiB>
2021/07/08 16:57:24 scheduler task 7709a29e (flow 20e26740): unloading val<.=a966d4a2 35.4MiB>
2021/07/08 16:57:24 scheduler task 7709a29e (flow 20e26740): unloading val<.=3265a143 35.4MiB>
2021/07/08 16:57:24 scheduler task 0d09bc33 (flow 8f555b2a): promoting objects (try 0): started
2021/07/08 16:57:24 scheduler task 731ed26b (flow 918bce40): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:24 scheduler task 731ed26b (flow 918bce40): promoting objects (try 0): started
2021/07/08 16:57:24 scheduler task 5aa3253c (flow c8481164): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:24 scheduler task 5aa3253c (flow c8481164): retrieving diagnostic output (try 0): started
2021/07/08 16:57:24 scheduler task 7709a29e (flow 20e26740): unloaded val<.=a966d4a2 35.4MiB>
2021/07/08 16:57:24 scheduler task 7709a29e (flow 20e26740): unloaded list<val<.=862d4782 35.7MiB> 35.7MiB>
2021/07/08 16:57:24 scheduler task 0d09bc33 (flow 8f555b2a): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:24 scheduler task 7709a29e (flow 20e26740): unloaded val<.=3265a143 35.4MiB>
2021/07/08 16:57:24 scheduler task 7709a29e (flow 20e26740): unloading (try 0): successful, next state: complete
2021/07/08 16:57:24 scheduler task 0d09bc33 (flow 8f555b2a): retrieving diagnostic output (try 0): started
2021/07/08 16:57:24  <-  n100.r04.s080.Main.out_file 20e26740 ok     exec 4m58s 35.7MiB
2021/07/08 16:57:24 n100.r04.s080.Main.out_file 20e26740 n100/r04/n100.r04.s080.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:bdd34af9287f791daffca9f477ab2a3fe237ba71100608c8ff29eaf4b7406b20
	sha256:20e26740c9df4d87f42e8d55fb83ba2efc3f1df13d1ccfb8e39d9078154d65c3
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7709a29ebccac3c9822f351ebba454b142d0d8d814db35b1a2ca1b728485024b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s080_output"
	    wget -O "n100.r04.s080_output/n100.r04.s080.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s080_output/n100.r04.s080.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s080_output/n100.r04.s080.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s080_output/n100.r04.s080.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s080_output/n100.r04.s080.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s080_output/n100.r04.s080.reference.fas" "n100.r04.s080_output/n100.r04.s080.fq1.fastq" "n100.r04.s080_output/n100.r04.s080.fq2.fastq" | samtools view -bS - > "n100.r04.s080_output/n100.r04.s080.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s080_output/n100.r04.s080.untrimmed.sorted.bam" "n100.r04.s080_output/n100.r04.s080.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s080_output/n100.r04.s080.untrimmed.sorted.bam" -b "n100.r04.s080_output/n100.r04.s080.primers.bed" -p "n100.r04.s080_output/n100.r04.s080.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s080_output/n100.r04.s080.trimmed.sorted.bam" "n100.r04.s080_output/n100.r04.s080.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s080_output/n100.r04.s080.reference.fas" "n100.r04.s080_output/n100.r04.s080.trimmed.sorted.bam" > "n100.r04.s080_output/n100.r04.s080.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s080_output/n100.r04.s080.reference.fas" --call-indels "n100.r04.s080_output/n100.r04.s080.trimmed.sorted.bam" > "n100.r04.s080_output/n100.r04.s080.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s080_output/n100.r04.s080.trimmed.sorted.bam" > "n100.r04.s080_output/n100.r04.s080.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s080_output/n100.r04.s080.depth.txt" "n100.r04.s080_output/n100.r04.s080.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s080_output/n100.r04.s080.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s080_output/n100.r04.s080.reference.fas" | bcftools consensus -m "n100.r04.s080_output/n100.r04.s080.low_depth.tsv" tmp.vcf.gz > "n100.r04.s080_output/n100.r04.s080.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s080_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:862d478218a40c1f1cc13ce7a4cfd53559db3fb6d7e45404fe6bb4ab28aca21d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.1MiB max=129.0MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 16:57:24 scheduler task bebb35dc (flow 6130a361): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s080.tar.gz resources {}
2021/07/08 16:57:24  ->  n100.r04.s080.Main.cp_out_file 6130a361 exec extern s3://niema-test/n100/r04/n100.r04.s080.tar.gz 35.7MiB
2021/07/08 16:57:24 scheduler task 731ed26b (flow 918bce40): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:24 scheduler task 731ed26b (flow 918bce40): retrieving diagnostic output (try 0): started
2021/07/08 16:57:24 scheduler task 5aa3253c (flow c8481164): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:24 scheduler task 5aa3253c (flow c8481164): retrieving result (try 0): started
2021/07/08 16:57:24 scheduler task 0d09bc33 (flow 8f555b2a): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:24 scheduler task 5da77f67 (flow 71f05c8c): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:24 scheduler task 0d09bc33 (flow 8f555b2a): retrieving result (try 0): started
2021/07/08 16:57:24 scheduler task 5da77f67 (flow 71f05c8c): promoting objects (try 0): started
2021/07/08 16:57:24 scheduler task 731ed26b (flow 918bce40): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:24 scheduler task 731ed26b (flow 918bce40): retrieving result (try 0): started
2021/07/08 16:57:24 scheduler task 5aa3253c (flow c8481164): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:24 scheduler task 5aa3253c (flow c8481164): transferring output (try 0): started
2021/07/08 16:57:24 scheduler task 0d09bc33 (flow 8f555b2a): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:24 scheduler task 0d09bc33 (flow 8f555b2a): transferring output (try 0): started
2021/07/08 16:57:24 scheduler task 5da77f67 (flow 71f05c8c): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:24 scheduler task 5da77f67 (flow 71f05c8c): retrieving diagnostic output (try 0): started
2021/07/08 16:57:24 scheduler task da5603da (flow f97f1e63): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:24 scheduler task 731ed26b (flow 918bce40): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:24 scheduler task da5603da (flow f97f1e63): promoting objects (try 0): started
2021/07/08 16:57:24 scheduler task 731ed26b (flow 918bce40): transferring output (try 0): started
2021/07/08 16:57:24 scheduler task 32101954 (flow f9878803): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:24 scheduler task 32101954 (flow f9878803): promoting objects (try 0): started
2021/07/08 16:57:24 scheduler task 5e492d41 (flow ac9e3373): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:24 scheduler task 5e492d41 (flow ac9e3373): unloading (try 0): started
2021/07/08 16:57:24 scheduler task 5e492d41 (flow ac9e3373): unloading list<val<.=7f3f5a46 35.7MiB> 35.7MiB>
2021/07/08 16:57:24 scheduler task 5e492d41 (flow ac9e3373): unloading val<.=4d4fb082 35.4MiB>
2021/07/08 16:57:24 scheduler task 5e492d41 (flow ac9e3373): unloading val<.=b151daa2 35.4MiB>
2021/07/08 16:57:24 scheduler task 5da77f67 (flow 71f05c8c): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:24 scheduler task 5da77f67 (flow 71f05c8c): retrieving result (try 0): started
2021/07/08 16:57:24 scheduler task da5603da (flow f97f1e63): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:24 scheduler task 32101954 (flow f9878803): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:24 scheduler task 26683aa0 (flow fc9dabef): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:24 scheduler task da5603da (flow f97f1e63): retrieving diagnostic output (try 0): started
2021/07/08 16:57:24 scheduler task 32101954 (flow f9878803): retrieving diagnostic output (try 0): started
2021/07/08 16:57:24 scheduler task 26683aa0 (flow fc9dabef): promoting objects (try 0): started
2021/07/08 16:57:24 scheduler task 5e492d41 (flow ac9e3373): unloaded list<val<.=7f3f5a46 35.7MiB> 35.7MiB>
2021/07/08 16:57:24 scheduler task 5e492d41 (flow ac9e3373): unloaded val<.=4d4fb082 35.4MiB>
2021/07/08 16:57:24 scheduler task 5e492d41 (flow ac9e3373): unloaded val<.=b151daa2 35.4MiB>
2021/07/08 16:57:24 scheduler task 5e492d41 (flow ac9e3373): unloading (try 0): successful, next state: complete
2021/07/08 16:57:24 scheduler task 5da77f67 (flow 71f05c8c): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:24  <-  n100.r04.s050.Main.out_file ac9e3373 ok     exec 4m58s 35.7MiB
2021/07/08 16:57:24 n100.r04.s050.Main.out_file ac9e3373 n100/r04/n100.r04.s050.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f1ca5de7b85f060e2daeceda31bc03ff7c348082da9d2660948b94e03d784399
	sha256:ac9e33730abf559f70f141e6263690272a88d798b82cb13df356ce18ec1952bc
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5e492d419a7a1ee3f20c34abce7d6f1a5810de40499037ce774055fcd002c6cb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s050_output"
	    wget -O "n100.r04.s050_output/n100.r04.s050.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s050_output/n100.r04.s050.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s050_output/n100.r04.s050.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s050_output/n100.r04.s050.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s050_output/n100.r04.s050.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s050_output/n100.r04.s050.reference.fas" "n100.r04.s050_output/n100.r04.s050.fq1.fastq" "n100.r04.s050_output/n100.r04.s050.fq2.fastq" | samtools view -bS - > "n100.r04.s050_output/n100.r04.s050.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s050_output/n100.r04.s050.untrimmed.sorted.bam" "n100.r04.s050_output/n100.r04.s050.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s050_output/n100.r04.s050.untrimmed.sorted.bam" -b "n100.r04.s050_output/n100.r04.s050.primers.bed" -p "n100.r04.s050_output/n100.r04.s050.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s050_output/n100.r04.s050.trimmed.sorted.bam" "n100.r04.s050_output/n100.r04.s050.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s050_output/n100.r04.s050.reference.fas" "n100.r04.s050_output/n100.r04.s050.trimmed.sorted.bam" > "n100.r04.s050_output/n100.r04.s050.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s050_output/n100.r04.s050.reference.fas" --call-indels "n100.r04.s050_output/n100.r04.s050.trimmed.sorted.bam" > "n100.r04.s050_output/n100.r04.s050.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s050_output/n100.r04.s050.trimmed.sorted.bam" > "n100.r04.s050_output/n100.r04.s050.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s050_output/n100.r04.s050.depth.txt" "n100.r04.s050_output/n100.r04.s050.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s050_output/n100.r04.s050.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s050_output/n100.r04.s050.reference.fas" | bcftools consensus -m "n100.r04.s050_output/n100.r04.s050.low_depth.tsv" tmp.vcf.gz > "n100.r04.s050_output/n100.r04.s050.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s050_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:7f3f5a46d9c8f12c90f201dba245952182272183f7d63308cc5c8500c241e46e 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=23.0MiB max=128.6MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 16:57:24 scheduler task 32f63588 (flow b3e0c92a): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s050.tar.gz resources {}
2021/07/08 16:57:24  ->  n100.r04.s050.Main.cp_out_file b3e0c92a exec extern s3://niema-test/n100/r04/n100.r04.s050.tar.gz 35.7MiB
2021/07/08 16:57:24 scheduler task 5da77f67 (flow 71f05c8c): transferring output (try 0): started
2021/07/08 16:57:24 scheduler task aee028ec (flow 0f5f6f8e): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:24 scheduler task aee028ec (flow 0f5f6f8e): promoting objects (try 0): started
2021/07/08 16:57:24 scheduler task da5603da (flow f97f1e63): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:24 scheduler task 32101954 (flow f9878803): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:24 scheduler task 26683aa0 (flow fc9dabef): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:25 scheduler task da5603da (flow f97f1e63): retrieving result (try 0): started
2021/07/08 16:57:25 scheduler task 32101954 (flow f9878803): retrieving result (try 0): started
2021/07/08 16:57:25 scheduler task 26683aa0 (flow fc9dabef): retrieving diagnostic output (try 0): started
2021/07/08 16:57:25 scheduler task aee028ec (flow 0f5f6f8e): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:25 scheduler task aee028ec (flow 0f5f6f8e): retrieving diagnostic output (try 0): started
2021/07/08 16:57:25 scheduler task da5603da (flow f97f1e63): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:25 scheduler task 32101954 (flow f9878803): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:25 scheduler task da5603da (flow f97f1e63): transferring output (try 0): started
2021/07/08 16:57:25 scheduler task 32101954 (flow f9878803): transferring output (try 0): started
2021/07/08 16:57:25 scheduler task 26683aa0 (flow fc9dabef): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:25 scheduler task 26683aa0 (flow fc9dabef): retrieving result (try 0): started
2021/07/08 16:57:25 scheduler task aee028ec (flow 0f5f6f8e): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:25 scheduler task 0cd55007 (flow 87d3c981): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:622f5d41d07120a0decdf503c256bb656bf4ef48350fc2ec4cec0b1e8e016f70 -> s3://niema-test/n100/r04/n100.r04.s018.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:25  <-  n100.r04.s018.Main.cp_out_file 87d3c981 ok   extern 0s 35.7MiB
2021/07/08 16:57:25 scheduler task aee028ec (flow 0f5f6f8e): retrieving result (try 0): started
2021/07/08 16:57:25 scheduler task 26683aa0 (flow fc9dabef): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:25 scheduler task 26683aa0 (flow fc9dabef): transferring output (try 0): started
2021/07/08 16:57:25 scheduler task 5aa3253c (flow c8481164): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:25 scheduler task 5aa3253c (flow c8481164): unloading (try 0): started
2021/07/08 16:57:25 scheduler task 5aa3253c (flow c8481164): unloading list<val<.=22443a47 35.7MiB> 35.7MiB>
2021/07/08 16:57:25 scheduler task 5aa3253c (flow c8481164): unloading val<.=2b7b9f4f 35.4MiB>
2021/07/08 16:57:25 scheduler task 5aa3253c (flow c8481164): unloading val<.=4019864a 35.4MiB>
2021/07/08 16:57:25 scheduler task aee028ec (flow 0f5f6f8e): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:25 scheduler task aee028ec (flow 0f5f6f8e): transferring output (try 0): started
2021/07/08 16:57:25 scheduler task 0d09bc33 (flow 8f555b2a): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:25 scheduler task 5aa3253c (flow c8481164): unloaded list<val<.=22443a47 35.7MiB> 35.7MiB>
2021/07/08 16:57:25 scheduler task 5aa3253c (flow c8481164): unloaded val<.=2b7b9f4f 35.4MiB>
2021/07/08 16:57:25 scheduler task 0d09bc33 (flow 8f555b2a): unloading (try 0): started
2021/07/08 16:57:25 scheduler task 0d09bc33 (flow 8f555b2a): unloading list<val<.=9ea2e142 35.8MiB> 35.8MiB>
2021/07/08 16:57:25 scheduler task 0d09bc33 (flow 8f555b2a): unloading val<.=1ea94a13 35.4MiB>
2021/07/08 16:57:25 scheduler task 0d09bc33 (flow 8f555b2a): unloading val<.=62352064 35.4MiB>
2021/07/08 16:57:25 scheduler task 5aa3253c (flow c8481164): unloaded val<.=4019864a 35.4MiB>
2021/07/08 16:57:25 scheduler task 5aa3253c (flow c8481164): unloading (try 0): successful, next state: complete
2021/07/08 16:57:25  <-  n100.r04.s096.Main.out_file c8481164 ok     exec 4m58s 35.7MiB
2021/07/08 16:57:25 n100.r04.s096.Main.out_file c8481164 n100/r04/n100.r04.s096.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b68b1e8c30719f4cd33df520b367f02723ed3312f76757c251ebc7000f25bb92
	sha256:c84811643b583654862b37c992d49d0d8f51f4e88c3440e4bd48cbb4eb4f0142
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5aa3253c34616e6a74112043764f017f61c40a020263f3e2d6210fe6089fc389
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s096_output"
	    wget -O "n100.r04.s096_output/n100.r04.s096.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s096_output/n100.r04.s096.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s096_output/n100.r04.s096.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s096_output/n100.r04.s096.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s096_output/n100.r04.s096.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s096_output/n100.r04.s096.reference.fas" "n100.r04.s096_output/n100.r04.s096.fq1.fastq" "n100.r04.s096_output/n100.r04.s096.fq2.fastq" | samtools view -bS - > "n100.r04.s096_output/n100.r04.s096.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s096_output/n100.r04.s096.untrimmed.sorted.bam" "n100.r04.s096_output/n100.r04.s096.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s096_output/n100.r04.s096.untrimmed.sorted.bam" -b "n100.r04.s096_output/n100.r04.s096.primers.bed" -p "n100.r04.s096_output/n100.r04.s096.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s096_output/n100.r04.s096.trimmed.sorted.bam" "n100.r04.s096_output/n100.r04.s096.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s096_output/n100.r04.s096.reference.fas" "n100.r04.s096_output/n100.r04.s096.trimmed.sorted.bam" > "n100.r04.s096_output/n100.r04.s096.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s096_output/n100.r04.s096.reference.fas" --call-indels "n100.r04.s096_output/n100.r04.s096.trimmed.sorted.bam" > "n100.r04.s096_output/n100.r04.s096.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s096_output/n100.r04.s096.trimmed.sorted.bam" > "n100.r04.s096_output/n100.r04.s096.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s096_output/n100.r04.s096.depth.txt" "n100.r04.s096_output/n100.r04.s096.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s096_output/n100.r04.s096.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s096_output/n100.r04.s096.reference.fas" | bcftools consensus -m "n100.r04.s096_output/n100.r04.s096.low_depth.tsv" tmp.vcf.gz > "n100.r04.s096_output/n100.r04.s096.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s096_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:22443a47eed6810091aa10a431ef63f979f80e17753834ef740ebe0d9b6f70d2 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.9MiB max=128.0MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 16:57:25 scheduler task 335e2d09 (flow 5b3a5959): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s096.tar.gz resources {}
2021/07/08 16:57:25  ->  n100.r04.s096.Main.cp_out_file 5b3a5959 exec extern s3://niema-test/n100/r04/n100.r04.s096.tar.gz 35.7MiB
2021/07/08 16:57:25 scheduler task ad27dd97 (flow 57f67a1d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:25 scheduler task ad27dd97 (flow 57f67a1d): promoting objects (try 0): started
2021/07/08 16:57:25 scheduler task 731ed26b (flow 918bce40): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:25 scheduler task 731ed26b (flow 918bce40): unloading (try 0): started
2021/07/08 16:57:25 scheduler task 731ed26b (flow 918bce40): unloading list<val<.=1a03f88e 35.7MiB> 35.7MiB>
2021/07/08 16:57:25 scheduler task 731ed26b (flow 918bce40): unloading val<.=57316d4a 35.4MiB>
2021/07/08 16:57:25 scheduler task 731ed26b (flow 918bce40): unloading val<.=bfb926d3 35.4MiB>
2021/07/08 16:57:25 scheduler task 0d09bc33 (flow 8f555b2a): unloaded list<val<.=9ea2e142 35.8MiB> 35.8MiB>
2021/07/08 16:57:25 scheduler task 0d09bc33 (flow 8f555b2a): unloaded val<.=1ea94a13 35.4MiB>
2021/07/08 16:57:25 scheduler task 0d09bc33 (flow 8f555b2a): unloaded val<.=62352064 35.4MiB>
2021/07/08 16:57:25 scheduler task 0d09bc33 (flow 8f555b2a): unloading (try 0): successful, next state: complete
2021/07/08 16:57:25  <-  n100.r04.s075.Main.out_file 8f555b2a ok     exec 4m58s 35.8MiB
2021/07/08 16:57:25 n100.r04.s075.Main.out_file 8f555b2a n100/r04/n100.r04.s075.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:75f2c0c9aa3fc4c77706384673ddf7788b6b46c51d2bb1e48d6cc84ffd8bb100
	sha256:8f555b2a47e5f00e045e6990059fda206f4d39c62b1dc1cf7e9a81324ad4d2c1
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0d09bc333975ecb7326fd7617f2ff492ad069dcfea465ac6faf8da0c78454d26
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s075_output"
	    wget -O "n100.r04.s075_output/n100.r04.s075.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s075_output/n100.r04.s075.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s075_output/n100.r04.s075.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s075_output/n100.r04.s075.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s075_output/n100.r04.s075.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s075_output/n100.r04.s075.reference.fas" "n100.r04.s075_output/n100.r04.s075.fq1.fastq" "n100.r04.s075_output/n100.r04.s075.fq2.fastq" | samtools view -bS - > "n100.r04.s075_output/n100.r04.s075.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s075_output/n100.r04.s075.untrimmed.sorted.bam" "n100.r04.s075_output/n100.r04.s075.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s075_output/n100.r04.s075.untrimmed.sorted.bam" -b "n100.r04.s075_output/n100.r04.s075.primers.bed" -p "n100.r04.s075_output/n100.r04.s075.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s075_output/n100.r04.s075.trimmed.sorted.bam" "n100.r04.s075_output/n100.r04.s075.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s075_output/n100.r04.s075.reference.fas" "n100.r04.s075_output/n100.r04.s075.trimmed.sorted.bam" > "n100.r04.s075_output/n100.r04.s075.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s075_output/n100.r04.s075.reference.fas" --call-indels "n100.r04.s075_output/n100.r04.s075.trimmed.sorted.bam" > "n100.r04.s075_output/n100.r04.s075.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s075_output/n100.r04.s075.trimmed.sorted.bam" > "n100.r04.s075_output/n100.r04.s075.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s075_output/n100.r04.s075.depth.txt" "n100.r04.s075_output/n100.r04.s075.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s075_output/n100.r04.s075.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s075_output/n100.r04.s075.reference.fas" | bcftools consensus -m "n100.r04.s075_output/n100.r04.s075.low_depth.tsv" tmp.vcf.gz > "n100.r04.s075_output/n100.r04.s075.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s075_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9ea2e142a3bc310be8fb3b0515fcd79583711cc65f54b8db73d331910108a50b 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=23.0MiB max=130.6MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 16:57:25 scheduler task f6ce6758 (flow 2e5bce9d): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s075.tar.gz resources {}
2021/07/08 16:57:25  ->  n100.r04.s075.Main.cp_out_file 2e5bce9d exec extern s3://niema-test/n100/r04/n100.r04.s075.tar.gz 35.8MiB
2021/07/08 16:57:25 scheduler task bebb35dc (flow 6130a361): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:862d478218a40c1f1cc13ce7a4cfd53559db3fb6d7e45404fe6bb4ab28aca21d -> s3://niema-test/n100/r04/n100.r04.s080.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:25  <-  n100.r04.s080.Main.cp_out_file 6130a361 ok   extern 0s 35.7MiB
2021/07/08 16:57:25 scheduler task 5bff4606 (flow 9474069c): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:25 scheduler task 5bff4606 (flow 9474069c): promoting objects (try 0): started
2021/07/08 16:57:25 scheduler task 5da77f67 (flow 71f05c8c): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:25 scheduler task 5da77f67 (flow 71f05c8c): unloading (try 0): started
2021/07/08 16:57:25 scheduler task 5da77f67 (flow 71f05c8c): unloading list<val<.=35aa3d61 35.7MiB> 35.7MiB>
2021/07/08 16:57:25 scheduler task 5da77f67 (flow 71f05c8c): unloading val<.=36f097f8 35.4MiB>
2021/07/08 16:57:25 scheduler task 5da77f67 (flow 71f05c8c): unloading val<.=7ac3a1ba 35.4MiB>
2021/07/08 16:57:25 scheduler task 731ed26b (flow 918bce40): unloaded val<.=57316d4a 35.4MiB>
2021/07/08 16:57:25 scheduler task ad27dd97 (flow 57f67a1d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:25 scheduler task 731ed26b (flow 918bce40): unloaded val<.=bfb926d3 35.4MiB>
2021/07/08 16:57:25 scheduler task 731ed26b (flow 918bce40): unloaded list<val<.=1a03f88e 35.7MiB> 35.7MiB>
2021/07/08 16:57:25 scheduler task 731ed26b (flow 918bce40): unloading (try 0): successful, next state: complete
2021/07/08 16:57:25 scheduler task ad27dd97 (flow 57f67a1d): retrieving diagnostic output (try 0): started
2021/07/08 16:57:25  <-  n100.r04.s055.Main.out_file 918bce40 ok     exec 4m58s 35.7MiB
2021/07/08 16:57:25 n100.r04.s055.Main.out_file 918bce40 n100/r04/n100.r04.s055.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:bef669d8be6f6e88d439cc7e29eba8a3da9584b39ffb1f52d4bff9b2f32f7e33
	sha256:918bce4086b73d45bc7b0343e9798073cb78c5f863e1b712e2cf63673f08216d
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/731ed26bffc0f0741ed3dc2602d7441627f461fc124decafaa9fa86c00accc19
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s055_output"
	    wget -O "n100.r04.s055_output/n100.r04.s055.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s055_output/n100.r04.s055.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s055_output/n100.r04.s055.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s055_output/n100.r04.s055.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s055_output/n100.r04.s055.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s055_output/n100.r04.s055.reference.fas" "n100.r04.s055_output/n100.r04.s055.fq1.fastq" "n100.r04.s055_output/n100.r04.s055.fq2.fastq" | samtools view -bS - > "n100.r04.s055_output/n100.r04.s055.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s055_output/n100.r04.s055.untrimmed.sorted.bam" "n100.r04.s055_output/n100.r04.s055.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s055_output/n100.r04.s055.untrimmed.sorted.bam" -b "n100.r04.s055_output/n100.r04.s055.primers.bed" -p "n100.r04.s055_output/n100.r04.s055.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s055_output/n100.r04.s055.trimmed.sorted.bam" "n100.r04.s055_output/n100.r04.s055.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s055_output/n100.r04.s055.reference.fas" "n100.r04.s055_output/n100.r04.s055.trimmed.sorted.bam" > "n100.r04.s055_output/n100.r04.s055.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s055_output/n100.r04.s055.reference.fas" --call-indels "n100.r04.s055_output/n100.r04.s055.trimmed.sorted.bam" > "n100.r04.s055_output/n100.r04.s055.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s055_output/n100.r04.s055.trimmed.sorted.bam" > "n100.r04.s055_output/n100.r04.s055.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s055_output/n100.r04.s055.depth.txt" "n100.r04.s055_output/n100.r04.s055.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s055_output/n100.r04.s055.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s055_output/n100.r04.s055.reference.fas" | bcftools consensus -m "n100.r04.s055_output/n100.r04.s055.low_depth.tsv" tmp.vcf.gz > "n100.r04.s055_output/n100.r04.s055.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s055_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:1a03f88e59de315235b4a7c9bde5944f700c0d372ab1c8079b603cfce0165f5c 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.6MiB max=128.6MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 16:57:25 scheduler task 489f5c68 (flow 76161c8a): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s055.tar.gz resources {}
2021/07/08 16:57:25  ->  n100.r04.s055.Main.cp_out_file 76161c8a exec extern s3://niema-test/n100/r04/n100.r04.s055.tar.gz 35.7MiB
2021/07/08 16:57:25 scheduler task 5bff4606 (flow 9474069c): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:25 scheduler task 5bff4606 (flow 9474069c): retrieving diagnostic output (try 0): started
2021/07/08 16:57:25 scheduler task 5da77f67 (flow 71f05c8c): unloaded val<.=36f097f8 35.4MiB>
2021/07/08 16:57:25 scheduler task 5da77f67 (flow 71f05c8c): unloaded list<val<.=35aa3d61 35.7MiB> 35.7MiB>
2021/07/08 16:57:25 scheduler task 5da77f67 (flow 71f05c8c): unloaded val<.=7ac3a1ba 35.4MiB>
2021/07/08 16:57:25 scheduler task 5da77f67 (flow 71f05c8c): unloading (try 0): successful, next state: complete
2021/07/08 16:57:25 scheduler task ad27dd97 (flow 57f67a1d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:25  <-  n100.r04.s063.Main.out_file 71f05c8c ok     exec 4m58s 35.7MiB
2021/07/08 16:57:25 n100.r04.s063.Main.out_file 71f05c8c n100/r04/n100.r04.s063.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f9b422416e328bc8b6025a7aeee32c1e68ec9a9803da17f3fba0dcd51f9c198f
	sha256:71f05c8c04b368510e882d363f121291b3d4785c10ba6870a09f4083ffcfe252
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5da77f677eed3de909ba4930d5861565af56a9c688d945463faed13faea22af9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s063_output"
	    wget -O "n100.r04.s063_output/n100.r04.s063.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s063_output/n100.r04.s063.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s063_output/n100.r04.s063.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s063_output/n100.r04.s063.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s063_output/n100.r04.s063.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s063_output/n100.r04.s063.reference.fas" "n100.r04.s063_output/n100.r04.s063.fq1.fastq" "n100.r04.s063_output/n100.r04.s063.fq2.fastq" | samtools view -bS - > "n100.r04.s063_output/n100.r04.s063.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s063_output/n100.r04.s063.untrimmed.sorted.bam" "n100.r04.s063_output/n100.r04.s063.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s063_output/n100.r04.s063.untrimmed.sorted.bam" -b "n100.r04.s063_output/n100.r04.s063.primers.bed" -p "n100.r04.s063_output/n100.r04.s063.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s063_output/n100.r04.s063.trimmed.sorted.bam" "n100.r04.s063_output/n100.r04.s063.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s063_output/n100.r04.s063.reference.fas" "n100.r04.s063_output/n100.r04.s063.trimmed.sorted.bam" > "n100.r04.s063_output/n100.r04.s063.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s063_output/n100.r04.s063.reference.fas" --call-indels "n100.r04.s063_output/n100.r04.s063.trimmed.sorted.bam" > "n100.r04.s063_output/n100.r04.s063.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s063_output/n100.r04.s063.trimmed.sorted.bam" > "n100.r04.s063_output/n100.r04.s063.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s063_output/n100.r04.s063.depth.txt" "n100.r04.s063_output/n100.r04.s063.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s063_output/n100.r04.s063.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s063_output/n100.r04.s063.reference.fas" | bcftools consensus -m "n100.r04.s063_output/n100.r04.s063.low_depth.tsv" tmp.vcf.gz > "n100.r04.s063_output/n100.r04.s063.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s063_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:35aa3d619f8cbc62ef07330bc5c5f59042ebd428e9236105a45c52977b9ebc80 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=23.9MiB max=127.8MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=419B max=2.0KiB
2021/07/08 16:57:25 scheduler task 64859aa6 (flow 4c470ed0): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s063.tar.gz resources {}
2021/07/08 16:57:25  ->  n100.r04.s063.Main.cp_out_file 4c470ed0 exec extern s3://niema-test/n100/r04/n100.r04.s063.tar.gz 35.7MiB
2021/07/08 16:57:25 scheduler task ad27dd97 (flow 57f67a1d): retrieving result (try 0): started
2021/07/08 16:57:25 scheduler task df28c1ac (flow b17ff5c7): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:25 scheduler task df28c1ac (flow b17ff5c7): promoting objects (try 0): started
2021/07/08 16:57:25 scheduler task da5603da (flow f97f1e63): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:25 scheduler task 5bff4606 (flow 9474069c): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:25 scheduler task da5603da (flow f97f1e63): unloading (try 0): started
2021/07/08 16:57:25 scheduler task da5603da (flow f97f1e63): unloading list<val<.=90caa718 35.7MiB> 35.7MiB>
2021/07/08 16:57:25 scheduler task da5603da (flow f97f1e63): unloading val<.=2eac6f27 35.4MiB>
2021/07/08 16:57:25 scheduler task da5603da (flow f97f1e63): unloading val<.=fe454f5c 35.4MiB>
2021/07/08 16:57:25 scheduler task 5bff4606 (flow 9474069c): retrieving result (try 0): started
2021/07/08 16:57:25 scheduler task ad27dd97 (flow 57f67a1d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:25 scheduler task ad27dd97 (flow 57f67a1d): transferring output (try 0): started
2021/07/08 16:57:25 scheduler task 32101954 (flow f9878803): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:25 scheduler task df28c1ac (flow b17ff5c7): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:25 scheduler task 32101954 (flow f9878803): unloading (try 0): started
2021/07/08 16:57:25 scheduler task 32101954 (flow f9878803): unloading list<val<.=ccf13d81 35.7MiB> 35.7MiB>
2021/07/08 16:57:25 scheduler task 32101954 (flow f9878803): unloading val<.=7baaa1f1 35.4MiB>
2021/07/08 16:57:25 scheduler task 32101954 (flow f9878803): unloading val<.=1aa18b44 35.4MiB>
2021/07/08 16:57:25 scheduler task df28c1ac (flow b17ff5c7): retrieving diagnostic output (try 0): started
2021/07/08 16:57:25 scheduler task da5603da (flow f97f1e63): unloaded val<.=2eac6f27 35.4MiB>
2021/07/08 16:57:25 scheduler task da5603da (flow f97f1e63): unloaded val<.=fe454f5c 35.4MiB>
2021/07/08 16:57:25 scheduler task da5603da (flow f97f1e63): unloaded list<val<.=90caa718 35.7MiB> 35.7MiB>
2021/07/08 16:57:25 scheduler task da5603da (flow f97f1e63): unloading (try 0): successful, next state: complete
2021/07/08 16:57:25  <-  n100.r04.s074.Main.out_file f97f1e63 ok     exec 4m58s 35.7MiB
2021/07/08 16:57:25 n100.r04.s074.Main.out_file f97f1e63 n100/r04/n100.r04.s074.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3749a160a35ea9e82a8fc807765c94dd03e35838541c1d98d85c3e43bf4c980e
	sha256:f97f1e6328ac24dcadca15898e01afcd55119ea8977251a81e9a79bd899fc640
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/da5603daccb76f18aa7750ada84ab66b32b7f383ec773d33a95b7b278a6812a6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s074_output"
	    wget -O "n100.r04.s074_output/n100.r04.s074.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s074_output/n100.r04.s074.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s074_output/n100.r04.s074.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s074_output/n100.r04.s074.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s074_output/n100.r04.s074.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s074_output/n100.r04.s074.reference.fas" "n100.r04.s074_output/n100.r04.s074.fq1.fastq" "n100.r04.s074_output/n100.r04.s074.fq2.fastq" | samtools view -bS - > "n100.r04.s074_output/n100.r04.s074.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s074_output/n100.r04.s074.untrimmed.sorted.bam" "n100.r04.s074_output/n100.r04.s074.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s074_output/n100.r04.s074.untrimmed.sorted.bam" -b "n100.r04.s074_output/n100.r04.s074.primers.bed" -p "n100.r04.s074_output/n100.r04.s074.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s074_output/n100.r04.s074.trimmed.sorted.bam" "n100.r04.s074_output/n100.r04.s074.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s074_output/n100.r04.s074.reference.fas" "n100.r04.s074_output/n100.r04.s074.trimmed.sorted.bam" > "n100.r04.s074_output/n100.r04.s074.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s074_output/n100.r04.s074.reference.fas" --call-indels "n100.r04.s074_output/n100.r04.s074.trimmed.sorted.bam" > "n100.r04.s074_output/n100.r04.s074.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s074_output/n100.r04.s074.trimmed.sorted.bam" > "n100.r04.s074_output/n100.r04.s074.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s074_output/n100.r04.s074.depth.txt" "n100.r04.s074_output/n100.r04.s074.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s074_output/n100.r04.s074.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s074_output/n100.r04.s074.reference.fas" | bcftools consensus -m "n100.r04.s074_output/n100.r04.s074.low_depth.tsv" tmp.vcf.gz > "n100.r04.s074_output/n100.r04.s074.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s074_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:90caa718813664b2a6e8a453824ae4f8867d9c88c504fe6b7aa58f671f87cc3d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=24.1MiB max=129.0MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=417B max=2.0KiB
2021/07/08 16:57:25 scheduler task 26683aa0 (flow fc9dabef): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:25 scheduler task 5bff4606 (flow 9474069c): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:25 scheduler task 863e722f (flow fa6b0352): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s074.tar.gz resources {}
2021/07/08 16:57:25  ->  n100.r04.s074.Main.cp_out_file fa6b0352 exec extern s3://niema-test/n100/r04/n100.r04.s074.tar.gz 35.7MiB
2021/07/08 16:57:25 scheduler task 26683aa0 (flow fc9dabef): unloading (try 0): started
2021/07/08 16:57:25 scheduler task 26683aa0 (flow fc9dabef): unloading list<val<.=3315d5d7 35.8MiB> 35.8MiB>
2021/07/08 16:57:25 scheduler task 26683aa0 (flow fc9dabef): unloading val<.=b591c56d 35.4MiB>
2021/07/08 16:57:25 scheduler task 26683aa0 (flow fc9dabef): unloading val<.=94ccc9b9 35.4MiB>
2021/07/08 16:57:25 scheduler task 5bff4606 (flow 9474069c): transferring output (try 0): started
2021/07/08 16:57:25 scheduler task 32f63588 (flow b3e0c92a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:7f3f5a46d9c8f12c90f201dba245952182272183f7d63308cc5c8500c241e46e -> s3://niema-test/n100/r04/n100.r04.s050.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:25  <-  n100.r04.s050.Main.cp_out_file b3e0c92a ok   extern 0s 35.7MiB
2021/07/08 16:57:25 scheduler task 32101954 (flow f9878803): unloaded val<.=7baaa1f1 35.4MiB>
2021/07/08 16:57:25 scheduler task 32101954 (flow f9878803): unloaded list<val<.=ccf13d81 35.7MiB> 35.7MiB>
2021/07/08 16:57:25 scheduler task 32101954 (flow f9878803): unloaded val<.=1aa18b44 35.4MiB>
2021/07/08 16:57:25 scheduler task 32101954 (flow f9878803): unloading (try 0): successful, next state: complete
2021/07/08 16:57:25  <-  n100.r04.s008.Main.out_file f9878803 ok     exec 4m59s 35.7MiB
2021/07/08 16:57:25 n100.r04.s008.Main.out_file f9878803 n100/r04/n100.r04.s008.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1f6263820641a4751fe1933ef2aad131f5a92bbff78c055443a3029577ff7a21
	sha256:f987880386106d6e50e015337ae3b88290b8c971ec3414fcc176488f67376586
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/321019541f4b7a35fbfe99460e9e0975086021ae777db8208cbe83c8a532439a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s008_output"
	    wget -O "n100.r04.s008_output/n100.r04.s008.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s008_output/n100.r04.s008.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s008_output/n100.r04.s008.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s008_output/n100.r04.s008.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s008_output/n100.r04.s008.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s008_output/n100.r04.s008.reference.fas" "n100.r04.s008_output/n100.r04.s008.fq1.fastq" "n100.r04.s008_output/n100.r04.s008.fq2.fastq" | samtools view -bS - > "n100.r04.s008_output/n100.r04.s008.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s008_output/n100.r04.s008.untrimmed.sorted.bam" "n100.r04.s008_output/n100.r04.s008.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s008_output/n100.r04.s008.untrimmed.sorted.bam" -b "n100.r04.s008_output/n100.r04.s008.primers.bed" -p "n100.r04.s008_output/n100.r04.s008.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s008_output/n100.r04.s008.trimmed.sorted.bam" "n100.r04.s008_output/n100.r04.s008.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s008_output/n100.r04.s008.reference.fas" "n100.r04.s008_output/n100.r04.s008.trimmed.sorted.bam" > "n100.r04.s008_output/n100.r04.s008.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s008_output/n100.r04.s008.reference.fas" --call-indels "n100.r04.s008_output/n100.r04.s008.trimmed.sorted.bam" > "n100.r04.s008_output/n100.r04.s008.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s008_output/n100.r04.s008.trimmed.sorted.bam" > "n100.r04.s008_output/n100.r04.s008.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s008_output/n100.r04.s008.depth.txt" "n100.r04.s008_output/n100.r04.s008.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s008_output/n100.r04.s008.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s008_output/n100.r04.s008.reference.fas" | bcftools consensus -m "n100.r04.s008_output/n100.r04.s008.low_depth.tsv" tmp.vcf.gz > "n100.r04.s008_output/n100.r04.s008.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s008_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:ccf13d81ec9b81c793b363ad633b1c8f87efc8983d01946f8363b58b367a9410 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.2MiB max=129.0MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=419B max=2.0KiB
2021/07/08 16:57:25 scheduler task 0e93805b (flow b3309142): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s008.tar.gz resources {}
2021/07/08 16:57:25  ->  n100.r04.s008.Main.cp_out_file b3309142 exec extern s3://niema-test/n100/r04/n100.r04.s008.tar.gz 35.7MiB
2021/07/08 16:57:25 scheduler task df28c1ac (flow b17ff5c7): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:25 scheduler task df28c1ac (flow b17ff5c7): retrieving result (try 0): started
2021/07/08 16:57:25 scheduler task 26683aa0 (flow fc9dabef): unloaded val<.=94ccc9b9 35.4MiB>
2021/07/08 16:57:25 scheduler task 26683aa0 (flow fc9dabef): unloaded list<val<.=3315d5d7 35.8MiB> 35.8MiB>
2021/07/08 16:57:25 scheduler task 26683aa0 (flow fc9dabef): unloaded val<.=b591c56d 35.4MiB>
2021/07/08 16:57:25 scheduler task 26683aa0 (flow fc9dabef): unloading (try 0): successful, next state: complete
2021/07/08 16:57:25 scheduler task aee028ec (flow 0f5f6f8e): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:25  <-  n100.r04.s004.Main.out_file fc9dabef ok     exec 4m50s 35.8MiB
2021/07/08 16:57:25 n100.r04.s004.Main.out_file fc9dabef n100/r04/n100.r04.s004.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1350fed93b714dbf6f9cdd152b609ab189c968b8a7bbaf4ba93e7d85475f4884
	sha256:fc9dabef6f96ab4c73145729f65d4ec894a33b442a975b2d224dc2d2acabfceb
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/26683aa02250227a81224d56a75a1e55dafd128fec28728cd28cb3e6c656248b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s004_output"
	    wget -O "n100.r04.s004_output/n100.r04.s004.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s004_output/n100.r04.s004.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s004_output/n100.r04.s004.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s004_output/n100.r04.s004.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s004_output/n100.r04.s004.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s004_output/n100.r04.s004.reference.fas" "n100.r04.s004_output/n100.r04.s004.fq1.fastq" "n100.r04.s004_output/n100.r04.s004.fq2.fastq" | samtools view -bS - > "n100.r04.s004_output/n100.r04.s004.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s004_output/n100.r04.s004.untrimmed.sorted.bam" "n100.r04.s004_output/n100.r04.s004.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s004_output/n100.r04.s004.untrimmed.sorted.bam" -b "n100.r04.s004_output/n100.r04.s004.primers.bed" -p "n100.r04.s004_output/n100.r04.s004.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s004_output/n100.r04.s004.trimmed.sorted.bam" "n100.r04.s004_output/n100.r04.s004.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s004_output/n100.r04.s004.reference.fas" "n100.r04.s004_output/n100.r04.s004.trimmed.sorted.bam" > "n100.r04.s004_output/n100.r04.s004.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s004_output/n100.r04.s004.reference.fas" --call-indels "n100.r04.s004_output/n100.r04.s004.trimmed.sorted.bam" > "n100.r04.s004_output/n100.r04.s004.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s004_output/n100.r04.s004.trimmed.sorted.bam" > "n100.r04.s004_output/n100.r04.s004.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s004_output/n100.r04.s004.depth.txt" "n100.r04.s004_output/n100.r04.s004.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s004_output/n100.r04.s004.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s004_output/n100.r04.s004.reference.fas" | bcftools consensus -m "n100.r04.s004_output/n100.r04.s004.low_depth.tsv" tmp.vcf.gz > "n100.r04.s004_output/n100.r04.s004.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s004_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:3315d5d74bab0be85bf7f301f65d20f1c28407615a20fb84795cb7a9e4fc6fe1 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.8MiB max=132.8MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 16:57:25 scheduler task c469d7d4 (flow 93aa5c3e): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s004.tar.gz resources {}
2021/07/08 16:57:25  ->  n100.r04.s004.Main.cp_out_file 93aa5c3e exec extern s3://niema-test/n100/r04/n100.r04.s004.tar.gz 35.8MiB
2021/07/08 16:57:25 scheduler task aee028ec (flow 0f5f6f8e): unloading (try 0): started
2021/07/08 16:57:25 scheduler task aee028ec (flow 0f5f6f8e): unloading list<val<.=102a69da 35.7MiB> 35.7MiB>
2021/07/08 16:57:25 scheduler task aee028ec (flow 0f5f6f8e): unloading val<.=02ba4866 35.4MiB>
2021/07/08 16:57:25 scheduler task aee028ec (flow 0f5f6f8e): unloading val<.=2b0f3679 35.4MiB>
2021/07/08 16:57:25 scheduler task 1630f0a4 (flow f5f175a1): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:25 scheduler task 1630f0a4 (flow f5f175a1): promoting objects (try 0): started
2021/07/08 16:57:25 scheduler task df28c1ac (flow b17ff5c7): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:25 scheduler task df28c1ac (flow b17ff5c7): transferring output (try 0): started
2021/07/08 16:57:25 scheduler task a322da77 (flow 70dfd3f3): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:25 scheduler task a322da77 (flow 70dfd3f3): promoting objects (try 0): started
2021/07/08 16:57:25 scheduler task aee028ec (flow 0f5f6f8e): unloaded list<val<.=102a69da 35.7MiB> 35.7MiB>
2021/07/08 16:57:25 scheduler task aee028ec (flow 0f5f6f8e): unloaded val<.=02ba4866 35.4MiB>
2021/07/08 16:57:25 scheduler task aee028ec (flow 0f5f6f8e): unloaded val<.=2b0f3679 35.4MiB>
2021/07/08 16:57:25 scheduler task aee028ec (flow 0f5f6f8e): unloading (try 0): successful, next state: complete
2021/07/08 16:57:25 scheduler task 1630f0a4 (flow f5f175a1): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:25  <-  n100.r04.s016.Main.out_file 0f5f6f8e ok     exec 4m59s 35.7MiB
2021/07/08 16:57:25 n100.r04.s016.Main.out_file 0f5f6f8e n100/r04/n100.r04.s016.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:23c8b78628af0a1f6fd07d8e22809f6fbe06cf052772cfca805784947bcec86a
	sha256:0f5f6f8eb16584c52873d072917e26d94e67f00484832360612e9a9c5d235a9c
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/aee028ecbef005860879fb67630b2a411f6f99da68990581f060828b0d57ff2c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s016_output"
	    wget -O "n100.r04.s016_output/n100.r04.s016.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s016_output/n100.r04.s016.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s016_output/n100.r04.s016.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s016_output/n100.r04.s016.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s016_output/n100.r04.s016.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s016_output/n100.r04.s016.reference.fas" "n100.r04.s016_output/n100.r04.s016.fq1.fastq" "n100.r04.s016_output/n100.r04.s016.fq2.fastq" | samtools view -bS - > "n100.r04.s016_output/n100.r04.s016.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s016_output/n100.r04.s016.untrimmed.sorted.bam" "n100.r04.s016_output/n100.r04.s016.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s016_output/n100.r04.s016.untrimmed.sorted.bam" -b "n100.r04.s016_output/n100.r04.s016.primers.bed" -p "n100.r04.s016_output/n100.r04.s016.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s016_output/n100.r04.s016.trimmed.sorted.bam" "n100.r04.s016_output/n100.r04.s016.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s016_output/n100.r04.s016.reference.fas" "n100.r04.s016_output/n100.r04.s016.trimmed.sorted.bam" > "n100.r04.s016_output/n100.r04.s016.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s016_output/n100.r04.s016.reference.fas" --call-indels "n100.r04.s016_output/n100.r04.s016.trimmed.sorted.bam" > "n100.r04.s016_output/n100.r04.s016.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s016_output/n100.r04.s016.trimmed.sorted.bam" > "n100.r04.s016_output/n100.r04.s016.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s016_output/n100.r04.s016.depth.txt" "n100.r04.s016_output/n100.r04.s016.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s016_output/n100.r04.s016.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s016_output/n100.r04.s016.reference.fas" | bcftools consensus -m "n100.r04.s016_output/n100.r04.s016.low_depth.tsv" tmp.vcf.gz > "n100.r04.s016_output/n100.r04.s016.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s016_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:102a69daaac840195545dfd3d08b61b887bfd8d616f4d4fe3fb4c8534dbed252 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.7MiB max=128.8MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 16:57:25 scheduler task dd6eb7c3 (flow ada8db9d): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s016.tar.gz resources {}
2021/07/08 16:57:25  ->  n100.r04.s016.Main.cp_out_file ada8db9d exec extern s3://niema-test/n100/r04/n100.r04.s016.tar.gz 35.7MiB
2021/07/08 16:57:25 scheduler task 1630f0a4 (flow f5f175a1): retrieving diagnostic output (try 0): started
2021/07/08 16:57:25 scheduler task a322da77 (flow 70dfd3f3): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:25 scheduler task a322da77 (flow 70dfd3f3): retrieving diagnostic output (try 0): started
2021/07/08 16:57:25 scheduler task 335e2d09 (flow 5b3a5959): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:22443a47eed6810091aa10a431ef63f979f80e17753834ef740ebe0d9b6f70d2 -> s3://niema-test/n100/r04/n100.r04.s096.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:25  <-  n100.r04.s096.Main.cp_out_file 5b3a5959 ok   extern 0s 35.7MiB
2021/07/08 16:57:25 scheduler task 1630f0a4 (flow f5f175a1): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:26 scheduler task 1630f0a4 (flow f5f175a1): retrieving result (try 0): started
2021/07/08 16:57:26 scheduler task b838e67f (flow f8ffa904): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:26 scheduler task b838e67f (flow f8ffa904): promoting objects (try 0): started
2021/07/08 16:57:26 scheduler task a322da77 (flow 70dfd3f3): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:26 scheduler task 1630f0a4 (flow f5f175a1): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:26 scheduler task a322da77 (flow 70dfd3f3): retrieving result (try 0): started
2021/07/08 16:57:26 scheduler task 1630f0a4 (flow f5f175a1): transferring output (try 0): started
2021/07/08 16:57:26 scheduler task b838e67f (flow f8ffa904): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:26 scheduler task b838e67f (flow f8ffa904): retrieving diagnostic output (try 0): started
2021/07/08 16:57:26 scheduler task ad27dd97 (flow 57f67a1d): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:26 scheduler task ad27dd97 (flow 57f67a1d): unloading (try 0): started
2021/07/08 16:57:26 scheduler task ad27dd97 (flow 57f67a1d): unloading list<val<.=48d82925 35.7MiB> 35.7MiB>
2021/07/08 16:57:26 scheduler task ad27dd97 (flow 57f67a1d): unloading val<.=a452f45d 35.4MiB>
2021/07/08 16:57:26 scheduler task ad27dd97 (flow 57f67a1d): unloading val<.=2a1065af 35.4MiB>
2021/07/08 16:57:26 scheduler task a322da77 (flow 70dfd3f3): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:26 scheduler task f6ce6758 (flow 2e5bce9d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9ea2e142a3bc310be8fb3b0515fcd79583711cc65f54b8db73d331910108a50b -> s3://niema-test/n100/r04/n100.r04.s075.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:57:26  <-  n100.r04.s075.Main.cp_out_file 2e5bce9d ok   extern 0s 35.8MiB
2021/07/08 16:57:26 scheduler task a322da77 (flow 70dfd3f3): transferring output (try 0): started
2021/07/08 16:57:26 scheduler task b838e67f (flow f8ffa904): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:26 scheduler task b838e67f (flow f8ffa904): retrieving result (try 0): started
2021/07/08 16:57:26 scheduler task 5bff4606 (flow 9474069c): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:26 scheduler task ad27dd97 (flow 57f67a1d): unloaded list<val<.=48d82925 35.7MiB> 35.7MiB>
2021/07/08 16:57:26 scheduler task ad27dd97 (flow 57f67a1d): unloaded val<.=a452f45d 35.4MiB>
2021/07/08 16:57:26 scheduler task ad27dd97 (flow 57f67a1d): unloaded val<.=2a1065af 35.4MiB>
2021/07/08 16:57:26 scheduler task ad27dd97 (flow 57f67a1d): unloading (try 0): successful, next state: complete
2021/07/08 16:57:26 scheduler task 5bff4606 (flow 9474069c): unloading (try 0): started
2021/07/08 16:57:26 scheduler task 5bff4606 (flow 9474069c): unloading list<val<.=17e199be 35.7MiB> 35.7MiB>
2021/07/08 16:57:26 scheduler task 5bff4606 (flow 9474069c): unloading val<.=a2677a63 35.4MiB>
2021/07/08 16:57:26 scheduler task 5bff4606 (flow 9474069c): unloading val<.=48df3672 35.4MiB>
2021/07/08 16:57:26  <-  n100.r04.s006.Main.out_file 57f67a1d ok     exec 4m59s 35.7MiB
2021/07/08 16:57:26 n100.r04.s006.Main.out_file 57f67a1d n100/r04/n100.r04.s006.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:85a5d3602dccf6178317ba3382b5da94fda31df7c5bcc80e8eb904ae5ed2848d
	sha256:57f67a1d0e680b0ef46984a935b5762049c83d72f0fc8e72f6e6d25c58833ddb
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ad27dd97be57d013f2fa12db9b431715299248d91996ffa6d0fce645cfa41987
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s006_output"
	    wget -O "n100.r04.s006_output/n100.r04.s006.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s006_output/n100.r04.s006.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s006_output/n100.r04.s006.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s006_output/n100.r04.s006.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s006_output/n100.r04.s006.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s006_output/n100.r04.s006.reference.fas" "n100.r04.s006_output/n100.r04.s006.fq1.fastq" "n100.r04.s006_output/n100.r04.s006.fq2.fastq" | samtools view -bS - > "n100.r04.s006_output/n100.r04.s006.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s006_output/n100.r04.s006.untrimmed.sorted.bam" "n100.r04.s006_output/n100.r04.s006.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s006_output/n100.r04.s006.untrimmed.sorted.bam" -b "n100.r04.s006_output/n100.r04.s006.primers.bed" -p "n100.r04.s006_output/n100.r04.s006.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s006_output/n100.r04.s006.trimmed.sorted.bam" "n100.r04.s006_output/n100.r04.s006.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s006_output/n100.r04.s006.reference.fas" "n100.r04.s006_output/n100.r04.s006.trimmed.sorted.bam" > "n100.r04.s006_output/n100.r04.s006.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s006_output/n100.r04.s006.reference.fas" --call-indels "n100.r04.s006_output/n100.r04.s006.trimmed.sorted.bam" > "n100.r04.s006_output/n100.r04.s006.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s006_output/n100.r04.s006.trimmed.sorted.bam" > "n100.r04.s006_output/n100.r04.s006.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s006_output/n100.r04.s006.depth.txt" "n100.r04.s006_output/n100.r04.s006.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s006_output/n100.r04.s006.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s006_output/n100.r04.s006.reference.fas" | bcftools consensus -m "n100.r04.s006_output/n100.r04.s006.low_depth.tsv" tmp.vcf.gz > "n100.r04.s006_output/n100.r04.s006.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s006_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:48d82925d0576530914740c6f7bd45cc40dd5779de4b1c7540723b0cfae24ea1 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=23.3MiB max=129.2MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 16:57:26 scheduler task 7925a9dc (flow 8be7a9bb): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s006.tar.gz resources {}
2021/07/08 16:57:26  ->  n100.r04.s006.Main.cp_out_file 8be7a9bb exec extern s3://niema-test/n100/r04/n100.r04.s006.tar.gz 35.7MiB
2021/07/08 16:57:26 scheduler task b838e67f (flow f8ffa904): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:26 scheduler task b838e67f (flow f8ffa904): transferring output (try 0): started
2021/07/08 16:57:26 scheduler task 489f5c68 (flow 76161c8a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:1a03f88e59de315235b4a7c9bde5944f700c0d372ab1c8079b603cfce0165f5c -> s3://niema-test/n100/r04/n100.r04.s055.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:26  <-  n100.r04.s055.Main.cp_out_file 76161c8a ok   extern 0s 35.7MiB
2021/07/08 16:57:26 scheduler task df28c1ac (flow b17ff5c7): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:26 scheduler task 64859aa6 (flow 4c470ed0): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:35aa3d619f8cbc62ef07330bc5c5f59042ebd428e9236105a45c52977b9ebc80 -> s3://niema-test/n100/r04/n100.r04.s063.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:26  <-  n100.r04.s063.Main.cp_out_file 4c470ed0 ok   extern 0s 35.7MiB
2021/07/08 16:57:26 scheduler task df28c1ac (flow b17ff5c7): unloading (try 0): started
2021/07/08 16:57:26 scheduler task df28c1ac (flow b17ff5c7): unloading list<val<.=82716149 35.7MiB> 35.7MiB>
2021/07/08 16:57:26 scheduler task df28c1ac (flow b17ff5c7): unloading val<.=ef464e1f 35.4MiB>
2021/07/08 16:57:26 scheduler task df28c1ac (flow b17ff5c7): unloading val<.=1be0aaa8 35.4MiB>
2021/07/08 16:57:26 scheduler task 5bff4606 (flow 9474069c): unloaded list<val<.=17e199be 35.7MiB> 35.7MiB>
2021/07/08 16:57:26 scheduler task 5bff4606 (flow 9474069c): unloaded val<.=a2677a63 35.4MiB>
2021/07/08 16:57:26 scheduler task 5bff4606 (flow 9474069c): unloaded val<.=48df3672 35.4MiB>
2021/07/08 16:57:26 scheduler task 5bff4606 (flow 9474069c): unloading (try 0): successful, next state: complete
2021/07/08 16:57:26  <-  n100.r04.s073.Main.out_file 9474069c ok     exec 4m59s 35.7MiB
2021/07/08 16:57:26 n100.r04.s073.Main.out_file 9474069c n100/r04/n100.r04.s073.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e9008b25a1d8f31508b2163a52eef02c1519b70c8308ad2bc980fab72e19b566
	sha256:9474069c1a2b69315ead1fcfef8078deabc9410bc95d239e7a4e4e1cd83e2ba6
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5bff4606601517499c33fbf4edb22a2f9011c04e663c4de6cb6bc98851bb567c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s073_output"
	    wget -O "n100.r04.s073_output/n100.r04.s073.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s073_output/n100.r04.s073.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s073_output/n100.r04.s073.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s073_output/n100.r04.s073.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s073_output/n100.r04.s073.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s073_output/n100.r04.s073.reference.fas" "n100.r04.s073_output/n100.r04.s073.fq1.fastq" "n100.r04.s073_output/n100.r04.s073.fq2.fastq" | samtools view -bS - > "n100.r04.s073_output/n100.r04.s073.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s073_output/n100.r04.s073.untrimmed.sorted.bam" "n100.r04.s073_output/n100.r04.s073.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s073_output/n100.r04.s073.untrimmed.sorted.bam" -b "n100.r04.s073_output/n100.r04.s073.primers.bed" -p "n100.r04.s073_output/n100.r04.s073.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s073_output/n100.r04.s073.trimmed.sorted.bam" "n100.r04.s073_output/n100.r04.s073.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s073_output/n100.r04.s073.reference.fas" "n100.r04.s073_output/n100.r04.s073.trimmed.sorted.bam" > "n100.r04.s073_output/n100.r04.s073.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s073_output/n100.r04.s073.reference.fas" --call-indels "n100.r04.s073_output/n100.r04.s073.trimmed.sorted.bam" > "n100.r04.s073_output/n100.r04.s073.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s073_output/n100.r04.s073.trimmed.sorted.bam" > "n100.r04.s073_output/n100.r04.s073.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s073_output/n100.r04.s073.depth.txt" "n100.r04.s073_output/n100.r04.s073.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s073_output/n100.r04.s073.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s073_output/n100.r04.s073.reference.fas" | bcftools consensus -m "n100.r04.s073_output/n100.r04.s073.low_depth.tsv" tmp.vcf.gz > "n100.r04.s073_output/n100.r04.s073.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s073_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:17e199be23aa1b623e3adf501c172a251bf8a48e5594f18a721afe3c95a06fe2 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=23.2MiB max=127.6MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 16:57:26 scheduler task 0fdfb08a (flow 4a5165ae): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s073.tar.gz resources {}
2021/07/08 16:57:26  ->  n100.r04.s073.Main.cp_out_file 4a5165ae exec extern s3://niema-test/n100/r04/n100.r04.s073.tar.gz 35.7MiB
2021/07/08 16:57:26 scheduler task df28c1ac (flow b17ff5c7): unloaded val<.=1be0aaa8 35.4MiB>
2021/07/08 16:57:26 scheduler task df28c1ac (flow b17ff5c7): unloaded list<val<.=82716149 35.7MiB> 35.7MiB>
2021/07/08 16:57:26 scheduler task df28c1ac (flow b17ff5c7): unloaded val<.=ef464e1f 35.4MiB>
2021/07/08 16:57:26 scheduler task df28c1ac (flow b17ff5c7): unloading (try 0): successful, next state: complete
2021/07/08 16:57:26  <-  n100.r04.s017.Main.out_file b17ff5c7 ok     exec 4m59s 35.7MiB
2021/07/08 16:57:26 n100.r04.s017.Main.out_file b17ff5c7 n100/r04/n100.r04.s017.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:96262eab27fbe164be98c7c3d8d68f931a0557d90c73da749386629af196aa60
	sha256:b17ff5c79edb8b2ef1938fc46dfd89fd54b67946da94ab9e48208b674274eb8a
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/df28c1ac2768e7fc1b46c0c49ad43e73f7dfcdab37a534faafc399183ef9d39b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s017_output"
	    wget -O "n100.r04.s017_output/n100.r04.s017.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s017_output/n100.r04.s017.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s017_output/n100.r04.s017.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s017_output/n100.r04.s017.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s017_output/n100.r04.s017.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s017_output/n100.r04.s017.reference.fas" "n100.r04.s017_output/n100.r04.s017.fq1.fastq" "n100.r04.s017_output/n100.r04.s017.fq2.fastq" | samtools view -bS - > "n100.r04.s017_output/n100.r04.s017.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s017_output/n100.r04.s017.untrimmed.sorted.bam" "n100.r04.s017_output/n100.r04.s017.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s017_output/n100.r04.s017.untrimmed.sorted.bam" -b "n100.r04.s017_output/n100.r04.s017.primers.bed" -p "n100.r04.s017_output/n100.r04.s017.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s017_output/n100.r04.s017.trimmed.sorted.bam" "n100.r04.s017_output/n100.r04.s017.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s017_output/n100.r04.s017.reference.fas" "n100.r04.s017_output/n100.r04.s017.trimmed.sorted.bam" > "n100.r04.s017_output/n100.r04.s017.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s017_output/n100.r04.s017.reference.fas" --call-indels "n100.r04.s017_output/n100.r04.s017.trimmed.sorted.bam" > "n100.r04.s017_output/n100.r04.s017.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s017_output/n100.r04.s017.trimmed.sorted.bam" > "n100.r04.s017_output/n100.r04.s017.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s017_output/n100.r04.s017.depth.txt" "n100.r04.s017_output/n100.r04.s017.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s017_output/n100.r04.s017.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s017_output/n100.r04.s017.reference.fas" | bcftools consensus -m "n100.r04.s017_output/n100.r04.s017.low_depth.tsv" tmp.vcf.gz > "n100.r04.s017_output/n100.r04.s017.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s017_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:82716149b64f0be4d3bb5aa7f2d9ac2e19b12bbc997b5347e875fb6792daf033 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=24.3MiB max=129.8MiB
	    disk mean=11.9MiB max=35.7MiB
	    tmp mean=172B max=1.0KiB
2021/07/08 16:57:26 scheduler task ccf26a1b (flow 5e046a9f): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s017.tar.gz resources {}
2021/07/08 16:57:26  ->  n100.r04.s017.Main.cp_out_file 5e046a9f exec extern s3://niema-test/n100/r04/n100.r04.s017.tar.gz 35.7MiB
2021/07/08 16:57:26 scheduler task 863e722f (flow fa6b0352): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:90caa718813664b2a6e8a453824ae4f8867d9c88c504fe6b7aa58f671f87cc3d -> s3://niema-test/n100/r04/n100.r04.s074.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:26  <-  n100.r04.s074.Main.cp_out_file fa6b0352 ok   extern 0s 35.7MiB
2021/07/08 16:57:26 scheduler task 0e93805b (flow b3309142): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:ccf13d81ec9b81c793b363ad633b1c8f87efc8983d01946f8363b58b367a9410 -> s3://niema-test/n100/r04/n100.r04.s008.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:26  <-  n100.r04.s008.Main.cp_out_file b3309142 ok   extern 0s 35.7MiB
2021/07/08 16:57:26 scheduler task 11856ee1 (flow 9941c680): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:26 scheduler task 11856ee1 (flow 9941c680): promoting objects (try 0): started
2021/07/08 16:57:26 scheduler task 1630f0a4 (flow f5f175a1): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:26 scheduler task 1630f0a4 (flow f5f175a1): unloading (try 0): started
2021/07/08 16:57:26 scheduler task 1630f0a4 (flow f5f175a1): unloading list<val<.=9e48d313 35.7MiB> 35.7MiB>
2021/07/08 16:57:26 scheduler task 1630f0a4 (flow f5f175a1): unloading val<.=70cf345c 35.4MiB>
2021/07/08 16:57:26 scheduler task 1630f0a4 (flow f5f175a1): unloading val<.=d2fe5b43 35.4MiB>
2021/07/08 16:57:26 scheduler task c469d7d4 (flow 93aa5c3e): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:3315d5d74bab0be85bf7f301f65d20f1c28407615a20fb84795cb7a9e4fc6fe1 -> s3://niema-test/n100/r04/n100.r04.s004.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:57:26  <-  n100.r04.s004.Main.cp_out_file 93aa5c3e ok   extern 0s 35.8MiB
2021/07/08 16:57:26 scheduler task 11856ee1 (flow 9941c680): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:26 scheduler task a322da77 (flow 70dfd3f3): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:26 scheduler task 11856ee1 (flow 9941c680): retrieving diagnostic output (try 0): started
2021/07/08 16:57:26 scheduler task 1630f0a4 (flow f5f175a1): unloaded list<val<.=9e48d313 35.7MiB> 35.7MiB>
2021/07/08 16:57:26 scheduler task a322da77 (flow 70dfd3f3): unloading (try 0): started
2021/07/08 16:57:26 scheduler task a322da77 (flow 70dfd3f3): unloading list<val<.=9c06c68c 35.8MiB> 35.8MiB>
2021/07/08 16:57:26 scheduler task a322da77 (flow 70dfd3f3): unloading val<.=e563189f 35.4MiB>
2021/07/08 16:57:26 scheduler task a322da77 (flow 70dfd3f3): unloading val<.=7337304d 35.4MiB>
2021/07/08 16:57:26 scheduler task 1630f0a4 (flow f5f175a1): unloaded val<.=70cf345c 35.4MiB>
2021/07/08 16:57:26 scheduler task 1630f0a4 (flow f5f175a1): unloaded val<.=d2fe5b43 35.4MiB>
2021/07/08 16:57:26 scheduler task 1630f0a4 (flow f5f175a1): unloading (try 0): successful, next state: complete
2021/07/08 16:57:26  <-  n100.r04.s047.Main.out_file f5f175a1 ok     exec 5m0s 35.7MiB
2021/07/08 16:57:26 n100.r04.s047.Main.out_file f5f175a1 n100/r04/n100.r04.s047.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4e711334de2f9b6c92ae5848f54c6f03755664280ea8c307f8168ab949f57341
	sha256:f5f175a19a3c0bfe746814953ea5ed6ee5a0e0c39273b28f805af850178b8efe
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1630f0a471b0502efdd3fb842b19b5100ce9868a0abead3f0e344565f0cb2649
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s047_output"
	    wget -O "n100.r04.s047_output/n100.r04.s047.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s047_output/n100.r04.s047.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s047_output/n100.r04.s047.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s047_output/n100.r04.s047.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s047_output/n100.r04.s047.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s047_output/n100.r04.s047.reference.fas" "n100.r04.s047_output/n100.r04.s047.fq1.fastq" "n100.r04.s047_output/n100.r04.s047.fq2.fastq" | samtools view -bS - > "n100.r04.s047_output/n100.r04.s047.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s047_output/n100.r04.s047.untrimmed.sorted.bam" "n100.r04.s047_output/n100.r04.s047.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s047_output/n100.r04.s047.untrimmed.sorted.bam" -b "n100.r04.s047_output/n100.r04.s047.primers.bed" -p "n100.r04.s047_output/n100.r04.s047.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s047_output/n100.r04.s047.trimmed.sorted.bam" "n100.r04.s047_output/n100.r04.s047.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s047_output/n100.r04.s047.reference.fas" "n100.r04.s047_output/n100.r04.s047.trimmed.sorted.bam" > "n100.r04.s047_output/n100.r04.s047.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s047_output/n100.r04.s047.reference.fas" --call-indels "n100.r04.s047_output/n100.r04.s047.trimmed.sorted.bam" > "n100.r04.s047_output/n100.r04.s047.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s047_output/n100.r04.s047.trimmed.sorted.bam" > "n100.r04.s047_output/n100.r04.s047.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s047_output/n100.r04.s047.depth.txt" "n100.r04.s047_output/n100.r04.s047.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s047_output/n100.r04.s047.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s047_output/n100.r04.s047.reference.fas" | bcftools consensus -m "n100.r04.s047_output/n100.r04.s047.low_depth.tsv" tmp.vcf.gz > "n100.r04.s047_output/n100.r04.s047.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s047_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9e48d313752a68b4f51fda8813aa2c78d5dc3228d371458bb8deeeaba65b0f30 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.1MiB max=131.8MiB
	    disk mean=11.9MiB max=35.7MiB
	    tmp mean=172B max=1.0KiB
2021/07/08 16:57:26 scheduler task 2e9b6704 (flow cbc87b45): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s047.tar.gz resources {}
2021/07/08 16:57:26  ->  n100.r04.s047.Main.cp_out_file cbc87b45 exec extern s3://niema-test/n100/r04/n100.r04.s047.tar.gz 35.7MiB
2021/07/08 16:57:26 scheduler task 11856ee1 (flow 9941c680): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:26 scheduler task a322da77 (flow 70dfd3f3): unloaded list<val<.=9c06c68c 35.8MiB> 35.8MiB>
2021/07/08 16:57:26 scheduler task a322da77 (flow 70dfd3f3): unloaded val<.=e563189f 35.4MiB>
2021/07/08 16:57:26 scheduler task 11856ee1 (flow 9941c680): retrieving result (try 0): started
2021/07/08 16:57:26 scheduler task a322da77 (flow 70dfd3f3): unloaded val<.=7337304d 35.4MiB>
2021/07/08 16:57:26 scheduler task a322da77 (flow 70dfd3f3): unloading (try 0): successful, next state: complete
2021/07/08 16:57:26  <-  n100.r04.s091.Main.out_file 70dfd3f3 ok     exec 5m0s 35.8MiB
2021/07/08 16:57:26 n100.r04.s091.Main.out_file 70dfd3f3 n100/r04/n100.r04.s091.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:37044fccfa69963923ad4d622aa74c15162f044224e277f3452da148a89f3c70
	sha256:70dfd3f3d58816542ac2543be7c2526edde850a6031c01beb55e6fef3166a778
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a322da77fa9baf0cbb47a3db670d252e95d17ff80c26712da44074951878589f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s091_output"
	    wget -O "n100.r04.s091_output/n100.r04.s091.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s091_output/n100.r04.s091.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s091_output/n100.r04.s091.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s091_output/n100.r04.s091.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s091_output/n100.r04.s091.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s091_output/n100.r04.s091.reference.fas" "n100.r04.s091_output/n100.r04.s091.fq1.fastq" "n100.r04.s091_output/n100.r04.s091.fq2.fastq" | samtools view -bS - > "n100.r04.s091_output/n100.r04.s091.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s091_output/n100.r04.s091.untrimmed.sorted.bam" "n100.r04.s091_output/n100.r04.s091.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s091_output/n100.r04.s091.untrimmed.sorted.bam" -b "n100.r04.s091_output/n100.r04.s091.primers.bed" -p "n100.r04.s091_output/n100.r04.s091.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s091_output/n100.r04.s091.trimmed.sorted.bam" "n100.r04.s091_output/n100.r04.s091.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s091_output/n100.r04.s091.reference.fas" "n100.r04.s091_output/n100.r04.s091.trimmed.sorted.bam" > "n100.r04.s091_output/n100.r04.s091.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s091_output/n100.r04.s091.reference.fas" --call-indels "n100.r04.s091_output/n100.r04.s091.trimmed.sorted.bam" > "n100.r04.s091_output/n100.r04.s091.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s091_output/n100.r04.s091.trimmed.sorted.bam" > "n100.r04.s091_output/n100.r04.s091.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s091_output/n100.r04.s091.depth.txt" "n100.r04.s091_output/n100.r04.s091.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s091_output/n100.r04.s091.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s091_output/n100.r04.s091.reference.fas" | bcftools consensus -m "n100.r04.s091_output/n100.r04.s091.low_depth.tsv" tmp.vcf.gz > "n100.r04.s091_output/n100.r04.s091.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s091_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9c06c68cdc38c87ad2a962793b452532b480ad3f852c3856745608b6a3fb5c49 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=23.6MiB max=130.7MiB
	    disk mean=10.3MiB max=35.8MiB
	    tmp mean=172B max=1.0KiB
2021/07/08 16:57:26 scheduler task d7d74fc1 (flow 3af7c36c): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s091.tar.gz resources {}
2021/07/08 16:57:26  ->  n100.r04.s091.Main.cp_out_file 3af7c36c exec extern s3://niema-test/n100/r04/n100.r04.s091.tar.gz 35.8MiB
2021/07/08 16:57:26 scheduler task dd6eb7c3 (flow ada8db9d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:102a69daaac840195545dfd3d08b61b887bfd8d616f4d4fe3fb4c8534dbed252 -> s3://niema-test/n100/r04/n100.r04.s016.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:26 scheduler task 11856ee1 (flow 9941c680): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:26  <-  n100.r04.s016.Main.cp_out_file ada8db9d ok   extern 0s 35.7MiB
2021/07/08 16:57:26 scheduler task 11856ee1 (flow 9941c680): transferring output (try 0): started
2021/07/08 16:57:26 scheduler task b838e67f (flow f8ffa904): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:26 scheduler task b838e67f (flow f8ffa904): unloading (try 0): started
2021/07/08 16:57:26 scheduler task b838e67f (flow f8ffa904): unloading list<val<.=c4191f3c 35.7MiB> 35.7MiB>
2021/07/08 16:57:26 scheduler task b838e67f (flow f8ffa904): unloading val<.=8b959680 35.4MiB>
2021/07/08 16:57:26 scheduler task b838e67f (flow f8ffa904): unloading val<.=1117b91f 35.4MiB>
2021/07/08 16:57:27 scheduler task b838e67f (flow f8ffa904): unloaded list<val<.=c4191f3c 35.7MiB> 35.7MiB>
2021/07/08 16:57:27 scheduler task b838e67f (flow f8ffa904): unloaded val<.=8b959680 35.4MiB>
2021/07/08 16:57:27 scheduler task b838e67f (flow f8ffa904): unloaded val<.=1117b91f 35.4MiB>
2021/07/08 16:57:27 scheduler task b838e67f (flow f8ffa904): unloading (try 0): successful, next state: complete
2021/07/08 16:57:27  <-  n100.r04.s065.Main.out_file f8ffa904 ok     exec 4m51s 35.7MiB
2021/07/08 16:57:27 n100.r04.s065.Main.out_file f8ffa904 n100/r04/n100.r04.s065.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:938839d0e25a76d85d02d0a2ec55138f9a7669f46d39d9a5425ef291ae6d86d6
	sha256:f8ffa90411d555ac3a55e50676a073daae7b1422cf3fb8d9aa912263f27a2a3a
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b838e67f3b3680a6f60f0cd5b469c7536dc06ef558ec9644c9c5ac01901fc23c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s065_output"
	    wget -O "n100.r04.s065_output/n100.r04.s065.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s065_output/n100.r04.s065.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s065_output/n100.r04.s065.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s065_output/n100.r04.s065.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s065_output/n100.r04.s065.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s065_output/n100.r04.s065.reference.fas" "n100.r04.s065_output/n100.r04.s065.fq1.fastq" "n100.r04.s065_output/n100.r04.s065.fq2.fastq" | samtools view -bS - > "n100.r04.s065_output/n100.r04.s065.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s065_output/n100.r04.s065.untrimmed.sorted.bam" "n100.r04.s065_output/n100.r04.s065.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s065_output/n100.r04.s065.untrimmed.sorted.bam" -b "n100.r04.s065_output/n100.r04.s065.primers.bed" -p "n100.r04.s065_output/n100.r04.s065.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s065_output/n100.r04.s065.trimmed.sorted.bam" "n100.r04.s065_output/n100.r04.s065.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s065_output/n100.r04.s065.reference.fas" "n100.r04.s065_output/n100.r04.s065.trimmed.sorted.bam" > "n100.r04.s065_output/n100.r04.s065.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s065_output/n100.r04.s065.reference.fas" --call-indels "n100.r04.s065_output/n100.r04.s065.trimmed.sorted.bam" > "n100.r04.s065_output/n100.r04.s065.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s065_output/n100.r04.s065.trimmed.sorted.bam" > "n100.r04.s065_output/n100.r04.s065.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s065_output/n100.r04.s065.depth.txt" "n100.r04.s065_output/n100.r04.s065.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s065_output/n100.r04.s065.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s065_output/n100.r04.s065.reference.fas" | bcftools consensus -m "n100.r04.s065_output/n100.r04.s065.low_depth.tsv" tmp.vcf.gz > "n100.r04.s065_output/n100.r04.s065.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s065_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:c4191f3c2f4261f89b8d913def599680fbd90845ac00dfbaef7623510dca4814 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.6MiB max=127.2MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 16:57:27 scheduler task 1389e4a2 (flow 04b1fdc5): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s065.tar.gz resources {}
2021/07/08 16:57:27  ->  n100.r04.s065.Main.cp_out_file 04b1fdc5 exec extern s3://niema-test/n100/r04/n100.r04.s065.tar.gz 35.7MiB
2021/07/08 16:57:27 scheduler task 0fdfb08a (flow 4a5165ae): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:17e199be23aa1b623e3adf501c172a251bf8a48e5594f18a721afe3c95a06fe2 -> s3://niema-test/n100/r04/n100.r04.s073.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:27  <-  n100.r04.s073.Main.cp_out_file 4a5165ae ok   extern 0s 35.7MiB
2021/07/08 16:57:27 scheduler task 7925a9dc (flow 8be7a9bb): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:48d82925d0576530914740c6f7bd45cc40dd5779de4b1c7540723b0cfae24ea1 -> s3://niema-test/n100/r04/n100.r04.s006.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:27  <-  n100.r04.s006.Main.cp_out_file 8be7a9bb ok   extern 0s 35.7MiB
2021/07/08 16:57:27 scheduler task ccf26a1b (flow 5e046a9f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:82716149b64f0be4d3bb5aa7f2d9ac2e19b12bbc997b5347e875fb6792daf033 -> s3://niema-test/n100/r04/n100.r04.s017.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:27  <-  n100.r04.s017.Main.cp_out_file 5e046a9f ok   extern 0s 35.7MiB
2021/07/08 16:57:27 scheduler task 11856ee1 (flow 9941c680): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:27 scheduler task 11856ee1 (flow 9941c680): unloading (try 0): started
2021/07/08 16:57:27 scheduler task 11856ee1 (flow 9941c680): unloading list<val<.=ac82e4ba 35.7MiB> 35.7MiB>
2021/07/08 16:57:27 scheduler task 11856ee1 (flow 9941c680): unloading val<.=bdea5292 35.4MiB>
2021/07/08 16:57:27 scheduler task 11856ee1 (flow 9941c680): unloading val<.=87721986 35.4MiB>
2021/07/08 16:57:27 scheduler task ce0306d2 (flow f3a54b9e): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:27 scheduler task 2e9b6704 (flow cbc87b45): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9e48d313752a68b4f51fda8813aa2c78d5dc3228d371458bb8deeeaba65b0f30 -> s3://niema-test/n100/r04/n100.r04.s047.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:27  <-  n100.r04.s047.Main.cp_out_file cbc87b45 ok   extern 0s 35.7MiB
2021/07/08 16:57:27 scheduler task ce0306d2 (flow f3a54b9e): promoting objects (try 0): started
2021/07/08 16:57:27 scheduler task d7d74fc1 (flow 3af7c36c): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9c06c68cdc38c87ad2a962793b452532b480ad3f852c3856745608b6a3fb5c49 -> s3://niema-test/n100/r04/n100.r04.s091.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:57:27  <-  n100.r04.s091.Main.cp_out_file 3af7c36c ok   extern 0s 35.8MiB
2021/07/08 16:57:27 scheduler task 11856ee1 (flow 9941c680): unloaded list<val<.=ac82e4ba 35.7MiB> 35.7MiB>
2021/07/08 16:57:27 scheduler task 11856ee1 (flow 9941c680): unloaded val<.=87721986 35.4MiB>
2021/07/08 16:57:27 scheduler task 11856ee1 (flow 9941c680): unloaded val<.=bdea5292 35.4MiB>
2021/07/08 16:57:27 scheduler task 11856ee1 (flow 9941c680): unloading (try 0): successful, next state: complete
2021/07/08 16:57:27  <-  n100.r04.s019.Main.out_file 9941c680 ok     exec 4m52s 35.7MiB
2021/07/08 16:57:27 n100.r04.s019.Main.out_file 9941c680 n100/r04/n100.r04.s019.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b16d2c0547a06009a4935c505752b42bf87abb20f11e73d8eaca9e90acb9685a
	sha256:9941c68016d45419edff76f26684926a59706a250e7e400815b618ba6f5e21d2
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/11856ee11970ce761c1633fcac14484df6c528e9a1d6ddf86b248260d75de15d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s019_output"
	    wget -O "n100.r04.s019_output/n100.r04.s019.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s019_output/n100.r04.s019.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s019_output/n100.r04.s019.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s019_output/n100.r04.s019.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s019_output/n100.r04.s019.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s019_output/n100.r04.s019.reference.fas" "n100.r04.s019_output/n100.r04.s019.fq1.fastq" "n100.r04.s019_output/n100.r04.s019.fq2.fastq" | samtools view -bS - > "n100.r04.s019_output/n100.r04.s019.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s019_output/n100.r04.s019.untrimmed.sorted.bam" "n100.r04.s019_output/n100.r04.s019.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s019_output/n100.r04.s019.untrimmed.sorted.bam" -b "n100.r04.s019_output/n100.r04.s019.primers.bed" -p "n100.r04.s019_output/n100.r04.s019.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s019_output/n100.r04.s019.trimmed.sorted.bam" "n100.r04.s019_output/n100.r04.s019.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s019_output/n100.r04.s019.reference.fas" "n100.r04.s019_output/n100.r04.s019.trimmed.sorted.bam" > "n100.r04.s019_output/n100.r04.s019.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s019_output/n100.r04.s019.reference.fas" --call-indels "n100.r04.s019_output/n100.r04.s019.trimmed.sorted.bam" > "n100.r04.s019_output/n100.r04.s019.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s019_output/n100.r04.s019.trimmed.sorted.bam" > "n100.r04.s019_output/n100.r04.s019.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s019_output/n100.r04.s019.depth.txt" "n100.r04.s019_output/n100.r04.s019.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s019_output/n100.r04.s019.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s019_output/n100.r04.s019.reference.fas" | bcftools consensus -m "n100.r04.s019_output/n100.r04.s019.low_depth.tsv" tmp.vcf.gz > "n100.r04.s019_output/n100.r04.s019.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s019_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:ac82e4bab5ec38873886c0d301120c9aa779d2ffdbecc3b18937633ba67e3341 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.8MiB max=130.9MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 16:57:27 scheduler task cbe3f766 (flow 0d21a634): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s019.tar.gz resources {}
2021/07/08 16:57:27  ->  n100.r04.s019.Main.cp_out_file 0d21a634 exec extern s3://niema-test/n100/r04/n100.r04.s019.tar.gz 35.7MiB
2021/07/08 16:57:27 scheduler task ce0306d2 (flow f3a54b9e): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:27 scheduler task ce0306d2 (flow f3a54b9e): retrieving diagnostic output (try 0): started
2021/07/08 16:57:27 scheduler task ce0306d2 (flow f3a54b9e): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:27 scheduler task ce0306d2 (flow f3a54b9e): retrieving result (try 0): started
2021/07/08 16:57:27 scheduler task 4416f8fe (flow ac3a0076): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:27 scheduler task 4416f8fe (flow ac3a0076): promoting objects (try 0): started
2021/07/08 16:57:27 scheduler task 1389e4a2 (flow 04b1fdc5): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:c4191f3c2f4261f89b8d913def599680fbd90845ac00dfbaef7623510dca4814 -> s3://niema-test/n100/r04/n100.r04.s065.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:27  <-  n100.r04.s065.Main.cp_out_file 04b1fdc5 ok   extern 0s 35.7MiB
2021/07/08 16:57:27 scheduler task ce0306d2 (flow f3a54b9e): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:27 scheduler task ce0306d2 (flow f3a54b9e): transferring output (try 0): started
2021/07/08 16:57:27 scheduler task 4416f8fe (flow ac3a0076): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:27 scheduler task 4416f8fe (flow ac3a0076): retrieving diagnostic output (try 0): started
2021/07/08 16:57:27 scheduler task 4416f8fe (flow ac3a0076): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:27 scheduler task 4416f8fe (flow ac3a0076): retrieving result (try 0): started
2021/07/08 16:57:28 scheduler task 4416f8fe (flow ac3a0076): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:28 scheduler task 4416f8fe (flow ac3a0076): transferring output (try 0): started
2021/07/08 16:57:28 scheduler task ce0306d2 (flow f3a54b9e): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:28 scheduler task ce0306d2 (flow f3a54b9e): unloading (try 0): started
2021/07/08 16:57:28 scheduler task ce0306d2 (flow f3a54b9e): unloading list<val<.=9a9390ee 35.8MiB> 35.8MiB>
2021/07/08 16:57:28 scheduler task ce0306d2 (flow f3a54b9e): unloading val<.=88768ac8 35.4MiB>
2021/07/08 16:57:28 scheduler task ce0306d2 (flow f3a54b9e): unloading val<.=2ca73d1c 35.4MiB>
2021/07/08 16:57:28 scheduler task cbe3f766 (flow 0d21a634): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:ac82e4bab5ec38873886c0d301120c9aa779d2ffdbecc3b18937633ba67e3341 -> s3://niema-test/n100/r04/n100.r04.s019.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:28  <-  n100.r04.s019.Main.cp_out_file 0d21a634 ok   extern 0s 35.7MiB
2021/07/08 16:57:28 scheduler task ce0306d2 (flow f3a54b9e): unloaded list<val<.=9a9390ee 35.8MiB> 35.8MiB>
2021/07/08 16:57:28 scheduler task ce0306d2 (flow f3a54b9e): unloaded val<.=88768ac8 35.4MiB>
2021/07/08 16:57:28 scheduler task ce0306d2 (flow f3a54b9e): unloaded val<.=2ca73d1c 35.4MiB>
2021/07/08 16:57:28 scheduler task ce0306d2 (flow f3a54b9e): unloading (try 0): successful, next state: complete
2021/07/08 16:57:28  <-  n100.r04.s084.Main.out_file f3a54b9e ok     exec 4m53s 35.8MiB
2021/07/08 16:57:28 n100.r04.s084.Main.out_file f3a54b9e n100/r04/n100.r04.s084.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3f5098497d1e85fd6ed1fd4954b1313a07a724dcdf07962251038fa118163fa8
	sha256:f3a54b9eb40f10c1e3265577011f6314becdf3a5ef98c66059ed82917a5ee39c
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ce0306d2a6b2f23fac0cf1c39b4b6f66c4eb7f292d0ec1bfc99c2c90fb994ee8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s084_output"
	    wget -O "n100.r04.s084_output/n100.r04.s084.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s084_output/n100.r04.s084.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s084_output/n100.r04.s084.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s084_output/n100.r04.s084.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s084_output/n100.r04.s084.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s084_output/n100.r04.s084.reference.fas" "n100.r04.s084_output/n100.r04.s084.fq1.fastq" "n100.r04.s084_output/n100.r04.s084.fq2.fastq" | samtools view -bS - > "n100.r04.s084_output/n100.r04.s084.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s084_output/n100.r04.s084.untrimmed.sorted.bam" "n100.r04.s084_output/n100.r04.s084.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s084_output/n100.r04.s084.untrimmed.sorted.bam" -b "n100.r04.s084_output/n100.r04.s084.primers.bed" -p "n100.r04.s084_output/n100.r04.s084.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s084_output/n100.r04.s084.trimmed.sorted.bam" "n100.r04.s084_output/n100.r04.s084.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s084_output/n100.r04.s084.reference.fas" "n100.r04.s084_output/n100.r04.s084.trimmed.sorted.bam" > "n100.r04.s084_output/n100.r04.s084.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s084_output/n100.r04.s084.reference.fas" --call-indels "n100.r04.s084_output/n100.r04.s084.trimmed.sorted.bam" > "n100.r04.s084_output/n100.r04.s084.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s084_output/n100.r04.s084.trimmed.sorted.bam" > "n100.r04.s084_output/n100.r04.s084.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s084_output/n100.r04.s084.depth.txt" "n100.r04.s084_output/n100.r04.s084.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s084_output/n100.r04.s084.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s084_output/n100.r04.s084.reference.fas" | bcftools consensus -m "n100.r04.s084_output/n100.r04.s084.low_depth.tsv" tmp.vcf.gz > "n100.r04.s084_output/n100.r04.s084.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s084_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9a9390ee997982cb9424466b5f37c0402c1347caea42f7b4151c0cc7dfce8af0 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.2MiB max=130.6MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 16:57:28 scheduler task 73905bcc (flow 756c332c): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s084.tar.gz resources {}
2021/07/08 16:57:28  ->  n100.r04.s084.Main.cp_out_file 756c332c exec extern s3://niema-test/n100/r04/n100.r04.s084.tar.gz 35.8MiB
2021/07/08 16:57:28 scheduler task eee3329a (flow 7d1757b7): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:28 scheduler task eee3329a (flow 7d1757b7): promoting objects (try 0): started
2021/07/08 16:57:28 scheduler task 4416f8fe (flow ac3a0076): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:28 scheduler task eee3329a (flow 7d1757b7): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:28 scheduler task 4416f8fe (flow ac3a0076): unloading (try 0): started
2021/07/08 16:57:28 scheduler task 4416f8fe (flow ac3a0076): unloading list<val<.=37a31a85 35.8MiB> 35.8MiB>
2021/07/08 16:57:28 scheduler task 4416f8fe (flow ac3a0076): unloading val<.=b1857df9 35.4MiB>
2021/07/08 16:57:28 scheduler task 4416f8fe (flow ac3a0076): unloading val<.=5ea3ae65 35.4MiB>
2021/07/08 16:57:28 scheduler task eee3329a (flow 7d1757b7): retrieving diagnostic output (try 0): started
2021/07/08 16:57:28 scheduler task 5337d60f (flow 1381d801): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:28 scheduler task 4416f8fe (flow ac3a0076): unloaded val<.=b1857df9 35.4MiB>
2021/07/08 16:57:28 scheduler task 4416f8fe (flow ac3a0076): unloaded list<val<.=37a31a85 35.8MiB> 35.8MiB>
2021/07/08 16:57:28 scheduler task 4416f8fe (flow ac3a0076): unloaded val<.=5ea3ae65 35.4MiB>
2021/07/08 16:57:28 scheduler task 4416f8fe (flow ac3a0076): unloading (try 0): successful, next state: complete
2021/07/08 16:57:28 scheduler task 5337d60f (flow 1381d801): promoting objects (try 0): started
2021/07/08 16:57:28  <-  n100.r04.s003.Main.out_file ac3a0076 ok     exec 4m53s 35.8MiB
2021/07/08 16:57:28 n100.r04.s003.Main.out_file ac3a0076 n100/r04/n100.r04.s003.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:193af9f07a70a664df9cdffa0147e0a17dd654c64094ef6ff3ad0cdcf57c6880
	sha256:ac3a0076bb5c4dfca9922d67a05dcd45e6ad916c0810531fe3e6aaccddc532e8
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4416f8fea58dab5fda44b2d4941574965b0aa3ab24d142b06baf653ab4ad7bae
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s003_output"
	    wget -O "n100.r04.s003_output/n100.r04.s003.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s003_output/n100.r04.s003.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s003_output/n100.r04.s003.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s003_output/n100.r04.s003.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s003_output/n100.r04.s003.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s003_output/n100.r04.s003.reference.fas" "n100.r04.s003_output/n100.r04.s003.fq1.fastq" "n100.r04.s003_output/n100.r04.s003.fq2.fastq" | samtools view -bS - > "n100.r04.s003_output/n100.r04.s003.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s003_output/n100.r04.s003.untrimmed.sorted.bam" "n100.r04.s003_output/n100.r04.s003.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s003_output/n100.r04.s003.untrimmed.sorted.bam" -b "n100.r04.s003_output/n100.r04.s003.primers.bed" -p "n100.r04.s003_output/n100.r04.s003.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s003_output/n100.r04.s003.trimmed.sorted.bam" "n100.r04.s003_output/n100.r04.s003.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s003_output/n100.r04.s003.reference.fas" "n100.r04.s003_output/n100.r04.s003.trimmed.sorted.bam" > "n100.r04.s003_output/n100.r04.s003.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s003_output/n100.r04.s003.reference.fas" --call-indels "n100.r04.s003_output/n100.r04.s003.trimmed.sorted.bam" > "n100.r04.s003_output/n100.r04.s003.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s003_output/n100.r04.s003.trimmed.sorted.bam" > "n100.r04.s003_output/n100.r04.s003.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s003_output/n100.r04.s003.depth.txt" "n100.r04.s003_output/n100.r04.s003.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s003_output/n100.r04.s003.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s003_output/n100.r04.s003.reference.fas" | bcftools consensus -m "n100.r04.s003_output/n100.r04.s003.low_depth.tsv" tmp.vcf.gz > "n100.r04.s003_output/n100.r04.s003.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s003_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:37a31a852e34e93741ced4b4ddada4262dbd0920aa01380e9dfacd980186a5f6 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.2MiB max=127.8MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=210B max=1.0KiB
2021/07/08 16:57:28 scheduler task 91d6aa55 (flow 7bec0a9b): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s003.tar.gz resources {}
2021/07/08 16:57:28  ->  n100.r04.s003.Main.cp_out_file 7bec0a9b exec extern s3://niema-test/n100/r04/n100.r04.s003.tar.gz 35.8MiB
2021/07/08 16:57:28 scheduler task eee3329a (flow 7d1757b7): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:28 scheduler task 5337d60f (flow 1381d801): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:29 scheduler task eee3329a (flow 7d1757b7): retrieving result (try 0): started
2021/07/08 16:57:29 scheduler task 5337d60f (flow 1381d801): retrieving diagnostic output (try 0): started
2021/07/08 16:57:29 scheduler task eee3329a (flow 7d1757b7): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:29 scheduler task eee3329a (flow 7d1757b7): transferring output (try 0): started
2021/07/08 16:57:29 scheduler task 5337d60f (flow 1381d801): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:29 scheduler task 5337d60f (flow 1381d801): retrieving result (try 0): started
2021/07/08 16:57:29 scheduler task 5337d60f (flow 1381d801): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:29 scheduler task 5337d60f (flow 1381d801): transferring output (try 0): started
2021/07/08 16:57:29 scheduler task 73905bcc (flow 756c332c): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9a9390ee997982cb9424466b5f37c0402c1347caea42f7b4151c0cc7dfce8af0 -> s3://niema-test/n100/r04/n100.r04.s084.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:57:29  <-  n100.r04.s084.Main.cp_out_file 756c332c ok   extern 0s 35.8MiB
2021/07/08 16:57:29 scheduler task eee3329a (flow 7d1757b7): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:29 scheduler task 91d6aa55 (flow 7bec0a9b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:37a31a852e34e93741ced4b4ddada4262dbd0920aa01380e9dfacd980186a5f6 -> s3://niema-test/n100/r04/n100.r04.s003.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:57:29  <-  n100.r04.s003.Main.cp_out_file 7bec0a9b ok   extern 0s 35.8MiB
2021/07/08 16:57:29 scheduler task eee3329a (flow 7d1757b7): unloading (try 0): started
2021/07/08 16:57:29 scheduler task eee3329a (flow 7d1757b7): unloading list<val<.=d4e46737 35.7MiB> 35.7MiB>
2021/07/08 16:57:29 scheduler task eee3329a (flow 7d1757b7): unloading val<.=b669f707 35.4MiB>
2021/07/08 16:57:29 scheduler task eee3329a (flow 7d1757b7): unloading val<.=c7ade82f 35.4MiB>
2021/07/08 16:57:29 scheduler task 5337d60f (flow 1381d801): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:29 scheduler task eee3329a (flow 7d1757b7): unloaded val<.=b669f707 35.4MiB>
2021/07/08 16:57:29 scheduler task eee3329a (flow 7d1757b7): unloaded list<val<.=d4e46737 35.7MiB> 35.7MiB>
2021/07/08 16:57:29 scheduler task eee3329a (flow 7d1757b7): unloaded val<.=c7ade82f 35.4MiB>
2021/07/08 16:57:29 scheduler task eee3329a (flow 7d1757b7): unloading (try 0): successful, next state: complete
2021/07/08 16:57:29 scheduler task 5337d60f (flow 1381d801): unloading (try 0): started
2021/07/08 16:57:29 scheduler task 5337d60f (flow 1381d801): unloading list<val<.=3e5b5c07 35.7MiB> 35.7MiB>
2021/07/08 16:57:29 scheduler task 5337d60f (flow 1381d801): unloading val<.=577070b4 35.4MiB>
2021/07/08 16:57:29 scheduler task 5337d60f (flow 1381d801): unloading val<.=3980889d 35.4MiB>
2021/07/08 16:57:29  <-  n100.r04.s069.Main.out_file 7d1757b7 ok     exec 4m54s 35.7MiB
2021/07/08 16:57:29 n100.r04.s069.Main.out_file 7d1757b7 n100/r04/n100.r04.s069.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6394d1af54f043120d271de5494270e0cfd82e1c370fda48f781314d0d255660
	sha256:7d1757b7afd103e7d6e45cdb46390e35af8d020db205e2c008586105a72acafd
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/eee3329a038f049facbb2a361a99eab25be0d9e00dd230dacd82a8e327b0e92d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s069_output"
	    wget -O "n100.r04.s069_output/n100.r04.s069.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s069_output/n100.r04.s069.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s069_output/n100.r04.s069.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s069_output/n100.r04.s069.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s069_output/n100.r04.s069.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s069_output/n100.r04.s069.reference.fas" "n100.r04.s069_output/n100.r04.s069.fq1.fastq" "n100.r04.s069_output/n100.r04.s069.fq2.fastq" | samtools view -bS - > "n100.r04.s069_output/n100.r04.s069.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s069_output/n100.r04.s069.untrimmed.sorted.bam" "n100.r04.s069_output/n100.r04.s069.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s069_output/n100.r04.s069.untrimmed.sorted.bam" -b "n100.r04.s069_output/n100.r04.s069.primers.bed" -p "n100.r04.s069_output/n100.r04.s069.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s069_output/n100.r04.s069.trimmed.sorted.bam" "n100.r04.s069_output/n100.r04.s069.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s069_output/n100.r04.s069.reference.fas" "n100.r04.s069_output/n100.r04.s069.trimmed.sorted.bam" > "n100.r04.s069_output/n100.r04.s069.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s069_output/n100.r04.s069.reference.fas" --call-indels "n100.r04.s069_output/n100.r04.s069.trimmed.sorted.bam" > "n100.r04.s069_output/n100.r04.s069.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s069_output/n100.r04.s069.trimmed.sorted.bam" > "n100.r04.s069_output/n100.r04.s069.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s069_output/n100.r04.s069.depth.txt" "n100.r04.s069_output/n100.r04.s069.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s069_output/n100.r04.s069.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s069_output/n100.r04.s069.reference.fas" | bcftools consensus -m "n100.r04.s069_output/n100.r04.s069.low_depth.tsv" tmp.vcf.gz > "n100.r04.s069_output/n100.r04.s069.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s069_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d4e4673752cfd451d3c499a000e3ba9c4698c88ea53de458e6747ace29fa2fa2 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.3MiB max=126.9MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 16:57:29 scheduler task a1269b6c (flow d734f5a3): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s069.tar.gz resources {}
2021/07/08 16:57:29  ->  n100.r04.s069.Main.cp_out_file d734f5a3 exec extern s3://niema-test/n100/r04/n100.r04.s069.tar.gz 35.7MiB
2021/07/08 16:57:29 scheduler task 5337d60f (flow 1381d801): unloaded list<val<.=3e5b5c07 35.7MiB> 35.7MiB>
2021/07/08 16:57:29 scheduler task 5337d60f (flow 1381d801): unloaded val<.=3980889d 35.4MiB>
2021/07/08 16:57:29 scheduler task 5337d60f (flow 1381d801): unloaded val<.=577070b4 35.4MiB>
2021/07/08 16:57:29 scheduler task 5337d60f (flow 1381d801): unloading (try 0): successful, next state: complete
2021/07/08 16:57:29  <-  n100.r04.s097.Main.out_file 1381d801 ok     exec 4m55s 35.7MiB
2021/07/08 16:57:29 n100.r04.s097.Main.out_file 1381d801 n100/r04/n100.r04.s097.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7073fa7aadb21607144d014140f2b513e5dab4f09985e62722db0f4995fc0977
	sha256:1381d80171a98941b226a30c3b976820b67168db767eea56bc4ef3b1e6472278
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5337d60ff9e5877af0faad6348f2fa80ba8f78782efc5e6b78af95e2515ce7c7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s097_output"
	    wget -O "n100.r04.s097_output/n100.r04.s097.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s097_output/n100.r04.s097.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s097_output/n100.r04.s097.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s097_output/n100.r04.s097.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s097_output/n100.r04.s097.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s097_output/n100.r04.s097.reference.fas" "n100.r04.s097_output/n100.r04.s097.fq1.fastq" "n100.r04.s097_output/n100.r04.s097.fq2.fastq" | samtools view -bS - > "n100.r04.s097_output/n100.r04.s097.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s097_output/n100.r04.s097.untrimmed.sorted.bam" "n100.r04.s097_output/n100.r04.s097.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s097_output/n100.r04.s097.untrimmed.sorted.bam" -b "n100.r04.s097_output/n100.r04.s097.primers.bed" -p "n100.r04.s097_output/n100.r04.s097.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s097_output/n100.r04.s097.trimmed.sorted.bam" "n100.r04.s097_output/n100.r04.s097.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s097_output/n100.r04.s097.reference.fas" "n100.r04.s097_output/n100.r04.s097.trimmed.sorted.bam" > "n100.r04.s097_output/n100.r04.s097.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s097_output/n100.r04.s097.reference.fas" --call-indels "n100.r04.s097_output/n100.r04.s097.trimmed.sorted.bam" > "n100.r04.s097_output/n100.r04.s097.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s097_output/n100.r04.s097.trimmed.sorted.bam" > "n100.r04.s097_output/n100.r04.s097.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s097_output/n100.r04.s097.depth.txt" "n100.r04.s097_output/n100.r04.s097.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s097_output/n100.r04.s097.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s097_output/n100.r04.s097.reference.fas" | bcftools consensus -m "n100.r04.s097_output/n100.r04.s097.low_depth.tsv" tmp.vcf.gz > "n100.r04.s097_output/n100.r04.s097.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s097_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:3e5b5c0765e25d40088681e6ec4c655d2723b1560880f9ec66f7edd1b0ac3167 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.0MiB max=131.7MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 16:57:29 scheduler task 46319074 (flow a8c6d0f7): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s097.tar.gz resources {}
2021/07/08 16:57:29  ->  n100.r04.s097.Main.cp_out_file a8c6d0f7 exec extern s3://niema-test/n100/r04/n100.r04.s097.tar.gz 35.7MiB
2021/07/08 16:57:30 scheduler task 46319074 (flow a8c6d0f7): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:3e5b5c0765e25d40088681e6ec4c655d2723b1560880f9ec66f7edd1b0ac3167 -> s3://niema-test/n100/r04/n100.r04.s097.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:30  <-  n100.r04.s097.Main.cp_out_file a8c6d0f7 ok   extern 0s 35.7MiB
2021/07/08 16:57:30 scheduler task a1269b6c (flow d734f5a3): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d4e4673752cfd451d3c499a000e3ba9c4698c88ea53de458e6747ace29fa2fa2 -> s3://niema-test/n100/r04/n100.r04.s069.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:30  <-  n100.r04.s069.Main.cp_out_file d734f5a3 ok   extern 0s 35.7MiB
2021/07/08 16:57:31 scheduler task f2ec5fa9 (flow 460aa300): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:57:31 scheduler task f2ec5fa9 (flow 460aa300): promoting objects (try 0): started
2021/07/08 16:57:31 scheduler task f2ec5fa9 (flow 460aa300): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:57:31 scheduler task f2ec5fa9 (flow 460aa300): retrieving diagnostic output (try 0): started
2021/07/08 16:57:31 scheduler task f2ec5fa9 (flow 460aa300): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:57:31 scheduler task f2ec5fa9 (flow 460aa300): retrieving result (try 0): started
2021/07/08 16:57:31 scheduler task f2ec5fa9 (flow 460aa300): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:57:31 scheduler task f2ec5fa9 (flow 460aa300): transferring output (try 0): started
2021/07/08 16:57:31 scheduler task f2ec5fa9 (flow 460aa300): transferring output (try 0): successful, next state: unloading
2021/07/08 16:57:31 scheduler task f2ec5fa9 (flow 460aa300): unloading (try 0): started
2021/07/08 16:57:31 scheduler task f2ec5fa9 (flow 460aa300): unloading list<val<.=99b5471b 35.7MiB> 35.7MiB>
2021/07/08 16:57:31 scheduler task f2ec5fa9 (flow 460aa300): unloading val<.=bae40d71 35.4MiB>
2021/07/08 16:57:31 scheduler task f2ec5fa9 (flow 460aa300): unloading val<.=e1098135 35.4MiB>
2021/07/08 16:57:32 scheduler task f2ec5fa9 (flow 460aa300): unloaded list<val<.=99b5471b 35.7MiB> 35.7MiB>
2021/07/08 16:57:32 scheduler task f2ec5fa9 (flow 460aa300): unloaded val<.=bae40d71 35.4MiB>
2021/07/08 16:57:32 scheduler task f2ec5fa9 (flow 460aa300): unloaded val<.=e1098135 35.4MiB>
2021/07/08 16:57:32 scheduler task f2ec5fa9 (flow 460aa300): unloading (try 0): successful, next state: complete
2021/07/08 16:57:32  <-  n100.r04.s052.Main.out_file 460aa300 ok     exec 4m57s 35.7MiB
2021/07/08 16:57:32 n100.r04.s052.Main.out_file 460aa300 n100/r04/n100.r04.s052.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:bbf969d5a1993f131b39c306e07462fbd4c3b5988e06f4cddb528de8867a8067
	sha256:460aa300b58ce965496ffa873219ac6d871250e89c8e476edb97c3167828e5ed
	ec2-18-118-7-109.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f2ec5fa918d226894467b0314b7821a68b827a19ca40312545bef77d74f5362c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r04.s052_output"
	    wget -O "n100.r04.s052_output/n100.r04.s052.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r04.s052_output/n100.r04.s052.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r04.s052_output/n100.r04.s052.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r04.s052_output/n100.r04.s052.fq1.fastq"
	    cp "{{fq2}}" "n100.r04.s052_output/n100.r04.s052.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r04.s052_output/n100.r04.s052.reference.fas" "n100.r04.s052_output/n100.r04.s052.fq1.fastq" "n100.r04.s052_output/n100.r04.s052.fq2.fastq" | samtools view -bS - > "n100.r04.s052_output/n100.r04.s052.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s052_output/n100.r04.s052.untrimmed.sorted.bam" "n100.r04.s052_output/n100.r04.s052.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r04.s052_output/n100.r04.s052.untrimmed.sorted.bam" -b "n100.r04.s052_output/n100.r04.s052.primers.bed" -p "n100.r04.s052_output/n100.r04.s052.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r04.s052_output/n100.r04.s052.trimmed.sorted.bam" "n100.r04.s052_output/n100.r04.s052.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r04.s052_output/n100.r04.s052.reference.fas" "n100.r04.s052_output/n100.r04.s052.trimmed.sorted.bam" > "n100.r04.s052_output/n100.r04.s052.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r04.s052_output/n100.r04.s052.reference.fas" --call-indels "n100.r04.s052_output/n100.r04.s052.trimmed.sorted.bam" > "n100.r04.s052_output/n100.r04.s052.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r04.s052_output/n100.r04.s052.trimmed.sorted.bam" > "n100.r04.s052_output/n100.r04.s052.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r04.s052_output/n100.r04.s052.depth.txt" "n100.r04.s052_output/n100.r04.s052.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r04.s052_output/n100.r04.s052.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r04.s052_output/n100.r04.s052.reference.fas" | bcftools consensus -m "n100.r04.s052_output/n100.r04.s052.low_depth.tsv" tmp.vcf.gz > "n100.r04.s052_output/n100.r04.s052.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r04.s052_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:99b5471b47eddbbc943954c1f1a3dc83fa4c0a9bb39b8e0665c6cc2ff535780c 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.3MiB max=132.3MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 16:57:32 scheduler task bed2a1ce (flow a70b53e4): submitted with execconfig extern url s3://niema-test/n100/r04/n100.r04.s052.tar.gz resources {}
2021/07/08 16:57:32  ->  n100.r04.s052.Main.cp_out_file a70b53e4 exec extern s3://niema-test/n100/r04/n100.r04.s052.tar.gz 35.7MiB
2021/07/08 16:57:32 scheduler task bed2a1ce (flow a70b53e4): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:99b5471b47eddbbc943954c1f1a3dc83fa4c0a9bb39b8e0665c6cc2ff535780c -> s3://niema-test/n100/r04/n100.r04.s052.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:57:32  <-  n100.r04.s052.Main.cp_out_file a70b53e4 ok   extern 0s 35.7MiB
2021/07/08 16:57:32 total n=400 time=6m37s
	ident                          n   ncache transfer runtime(m) cpu         mem(GiB)    disk(GiB)   tmp(GiB) requested
	n100.r04.s001.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s001.Main.fq1         1   0      0B                                                      
	n100.r04.s001.Main.fq2         1   0      0B                                                      
	n100.r04.s001.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s002.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s002.Main.fq1         1   0      0B                                                      
	n100.r04.s002.Main.fq2         1   0      0B                                                      
	n100.r04.s002.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s003.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s003.Main.fq1         1   0      0B                                                      
	n100.r04.s003.Main.fq2         1   0      0B                                                      
	n100.r04.s003.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s004.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s004.Main.fq1         1   0      0B                                                      
	n100.r04.s004.Main.fq2         1   0      0B                                                      
	n100.r04.s004.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s005.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s005.Main.fq1         1   0      0B                                                      
	n100.r04.s005.Main.fq2         1   0      0B                                                      
	n100.r04.s005.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s006.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s006.Main.fq1         1   0      0B                                                      
	n100.r04.s006.Main.fq2         1   0      0B                                                      
	n100.r04.s006.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s007.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s007.Main.fq1         1   0      0B                                                      
	n100.r04.s007.Main.fq2         1   0      0B                                                      
	n100.r04.s007.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s008.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s008.Main.fq1         1   0      0B                                                      
	n100.r04.s008.Main.fq2         1   0      0B                                                      
	n100.r04.s008.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s009.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s009.Main.fq1         1   0      0B                                                      
	n100.r04.s009.Main.fq2         1   0      0B                                                      
	n100.r04.s009.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s010.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s010.Main.fq1         1   0      0B                                                      
	n100.r04.s010.Main.fq2         1   0      0B                                                      
	n100.r04.s010.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s011.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s011.Main.fq1         1   0      0B                                                      
	n100.r04.s011.Main.fq2         1   0      0B                                                      
	n100.r04.s011.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s012.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s012.Main.fq1         1   0      0B                                                      
	n100.r04.s012.Main.fq2         1   0      0B                                                      
	n100.r04.s012.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s013.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s013.Main.fq1         1   0      0B                                                      
	n100.r04.s013.Main.fq2         1   0      0B                                                      
	n100.r04.s013.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s014.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s014.Main.fq1         1   0      0B                                                      
	n100.r04.s014.Main.fq2         1   0      0B                                                      
	n100.r04.s014.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s015.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s015.Main.fq1         1   0      0B                                                      
	n100.r04.s015.Main.fq2         1   0      0B                                                      
	n100.r04.s015.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s016.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s016.Main.fq1         1   0      0B                                                      
	n100.r04.s016.Main.fq2         1   0      0B                                                      
	n100.r04.s016.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s017.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s017.Main.fq1         1   0      0B                                                      
	n100.r04.s017.Main.fq2         1   0      0B                                                      
	n100.r04.s017.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s018.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s018.Main.fq1         1   0      0B                                                      
	n100.r04.s018.Main.fq2         1   0      0B                                                      
	n100.r04.s018.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s019.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s019.Main.fq1         1   0      0B                                                      
	n100.r04.s019.Main.fq2         1   0      0B                                                      
	n100.r04.s019.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s020.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s020.Main.fq1         1   0      0B                                                      
	n100.r04.s020.Main.fq2         1   0      0B                                                      
	n100.r04.s020.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s021.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s021.Main.fq1         1   0      0B                                                      
	n100.r04.s021.Main.fq2         1   0      0B                                                      
	n100.r04.s021.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s022.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s022.Main.fq1         1   0      0B                                                      
	n100.r04.s022.Main.fq2         1   0      0B                                                      
	n100.r04.s022.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s023.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s023.Main.fq1         1   0      0B                                                      
	n100.r04.s023.Main.fq2         1   0      0B                                                      
	n100.r04.s023.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s024.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s024.Main.fq1         1   0      0B                                                      
	n100.r04.s024.Main.fq2         1   0      0B                                                      
	n100.r04.s024.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s025.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s025.Main.fq1         1   0      0B                                                      
	n100.r04.s025.Main.fq2         1   0      0B                                                      
	n100.r04.s025.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s026.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s026.Main.fq1         1   0      0B                                                      
	n100.r04.s026.Main.fq2         1   0      0B                                                      
	n100.r04.s026.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s027.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s027.Main.fq1         1   0      0B                                                      
	n100.r04.s027.Main.fq2         1   0      0B                                                      
	n100.r04.s027.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s028.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s028.Main.fq1         1   0      0B                                                      
	n100.r04.s028.Main.fq2         1   0      0B                                                      
	n100.r04.s028.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s029.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s029.Main.fq1         1   0      0B                                                      
	n100.r04.s029.Main.fq2         1   0      0B                                                      
	n100.r04.s029.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s030.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s030.Main.fq1         1   0      0B                                                      
	n100.r04.s030.Main.fq2         1   0      0B                                                      
	n100.r04.s030.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s031.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s031.Main.fq1         1   0      0B                                                      
	n100.r04.s031.Main.fq2         1   0      0B                                                      
	n100.r04.s031.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s032.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s032.Main.fq1         1   0      0B                                                      
	n100.r04.s032.Main.fq2         1   0      0B                                                      
	n100.r04.s032.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s033.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s033.Main.fq1         1   0      0B                                                      
	n100.r04.s033.Main.fq2         1   0      0B                                                      
	n100.r04.s033.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s034.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s034.Main.fq1         1   0      0B                                                      
	n100.r04.s034.Main.fq2         1   0      0B                                                      
	n100.r04.s034.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s035.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s035.Main.fq1         1   0      0B                                                      
	n100.r04.s035.Main.fq2         1   0      0B                                                      
	n100.r04.s035.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s036.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s036.Main.fq1         1   0      0B                                                      
	n100.r04.s036.Main.fq2         1   0      0B                                                      
	n100.r04.s036.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s037.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s037.Main.fq1         1   0      0B                                                      
	n100.r04.s037.Main.fq2         1   0      0B                                                      
	n100.r04.s037.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s038.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s038.Main.fq1         1   0      0B                                                      
	n100.r04.s038.Main.fq2         1   0      0B                                                      
	n100.r04.s038.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s039.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s039.Main.fq1         1   0      0B                                                      
	n100.r04.s039.Main.fq2         1   0      0B                                                      
	n100.r04.s039.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s040.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s040.Main.fq1         1   0      0B                                                      
	n100.r04.s040.Main.fq2         1   0      0B                                                      
	n100.r04.s040.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s041.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s041.Main.fq1         1   0      0B                                                      
	n100.r04.s041.Main.fq2         1   0      0B                                                      
	n100.r04.s041.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s042.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s042.Main.fq1         1   0      0B                                                      
	n100.r04.s042.Main.fq2         1   0      0B                                                      
	n100.r04.s042.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s043.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s043.Main.fq1         1   0      0B                                                      
	n100.r04.s043.Main.fq2         1   0      0B                                                      
	n100.r04.s043.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s044.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s044.Main.fq1         1   0      0B                                                      
	n100.r04.s044.Main.fq2         1   0      0B                                                      
	n100.r04.s044.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s045.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s045.Main.fq1         1   0      0B                                                      
	n100.r04.s045.Main.fq2         1   0      0B                                                      
	n100.r04.s045.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s046.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s046.Main.fq1         1   0      0B                                                      
	n100.r04.s046.Main.fq2         1   0      0B                                                      
	n100.r04.s046.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s047.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s047.Main.fq1         1   0      0B                                                      
	n100.r04.s047.Main.fq2         1   0      0B                                                      
	n100.r04.s047.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s048.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s048.Main.fq1         1   0      0B                                                      
	n100.r04.s048.Main.fq2         1   0      0B                                                      
	n100.r04.s048.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s049.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s049.Main.fq1         1   0      0B                                                      
	n100.r04.s049.Main.fq2         1   0      0B                                                      
	n100.r04.s049.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s050.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s050.Main.fq1         1   0      0B                                                      
	n100.r04.s050.Main.fq2         1   0      0B                                                      
	n100.r04.s050.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s051.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s051.Main.fq1         1   0      0B                                                      
	n100.r04.s051.Main.fq2         1   0      0B                                                      
	n100.r04.s051.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s052.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s052.Main.fq1         1   0      0B                                                      
	n100.r04.s052.Main.fq2         1   0      0B                                                      
	n100.r04.s052.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s053.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s053.Main.fq1         1   0      0B                                                      
	n100.r04.s053.Main.fq2         1   0      0B                                                      
	n100.r04.s053.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s054.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s054.Main.fq1         1   0      0B                                                      
	n100.r04.s054.Main.fq2         1   0      0B                                                      
	n100.r04.s054.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s055.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s055.Main.fq1         1   0      0B                                                      
	n100.r04.s055.Main.fq2         1   0      0B                                                      
	n100.r04.s055.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s056.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s056.Main.fq1         1   0      0B                                                      
	n100.r04.s056.Main.fq2         1   0      0B                                                      
	n100.r04.s056.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s057.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s057.Main.fq1         1   0      0B                                                      
	n100.r04.s057.Main.fq2         1   0      0B                                                      
	n100.r04.s057.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s058.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s058.Main.fq1         1   0      0B                                                      
	n100.r04.s058.Main.fq2         1   0      0B                                                      
	n100.r04.s058.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s059.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s059.Main.fq1         1   0      0B                                                      
	n100.r04.s059.Main.fq2         1   0      0B                                                      
	n100.r04.s059.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s060.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s060.Main.fq1         1   0      0B                                                      
	n100.r04.s060.Main.fq2         1   0      0B                                                      
	n100.r04.s060.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s061.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s061.Main.fq1         1   0      0B                                                      
	n100.r04.s061.Main.fq2         1   0      0B                                                      
	n100.r04.s061.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s062.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s062.Main.fq1         1   0      0B                                                      
	n100.r04.s062.Main.fq2         1   0      0B                                                      
	n100.r04.s062.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s063.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s063.Main.fq1         1   0      0B                                                      
	n100.r04.s063.Main.fq2         1   0      0B                                                      
	n100.r04.s063.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s064.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s064.Main.fq1         1   0      0B                                                      
	n100.r04.s064.Main.fq2         1   0      0B                                                      
	n100.r04.s064.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s065.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s065.Main.fq1         1   0      0B                                                      
	n100.r04.s065.Main.fq2         1   0      0B                                                      
	n100.r04.s065.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s066.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s066.Main.fq1         1   0      0B                                                      
	n100.r04.s066.Main.fq2         1   0      0B                                                      
	n100.r04.s066.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s067.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s067.Main.fq1         1   0      0B                                                      
	n100.r04.s067.Main.fq2         1   0      0B                                                      
	n100.r04.s067.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s068.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s068.Main.fq1         1   0      0B                                                      
	n100.r04.s068.Main.fq2         1   0      0B                                                      
	n100.r04.s068.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s069.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s069.Main.fq1         1   0      0B                                                      
	n100.r04.s069.Main.fq2         1   0      0B                                                      
	n100.r04.s069.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s070.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s070.Main.fq1         1   0      0B                                                      
	n100.r04.s070.Main.fq2         1   0      0B                                                      
	n100.r04.s070.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s071.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s071.Main.fq1         1   0      0B                                                      
	n100.r04.s071.Main.fq2         1   0      0B                                                      
	n100.r04.s071.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s072.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s072.Main.fq1         1   0      0B                                                      
	n100.r04.s072.Main.fq2         1   0      0B                                                      
	n100.r04.s072.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s073.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s073.Main.fq1         1   0      0B                                                      
	n100.r04.s073.Main.fq2         1   0      0B                                                      
	n100.r04.s073.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s074.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s074.Main.fq1         1   0      0B                                                      
	n100.r04.s074.Main.fq2         1   0      0B                                                      
	n100.r04.s074.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s075.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s075.Main.fq1         1   0      0B                                                      
	n100.r04.s075.Main.fq2         1   0      0B                                                      
	n100.r04.s075.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s076.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s076.Main.fq1         1   0      0B                                                      
	n100.r04.s076.Main.fq2         1   0      0B                                                      
	n100.r04.s076.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s077.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s077.Main.fq1         1   0      0B                                                      
	n100.r04.s077.Main.fq2         1   0      0B                                                      
	n100.r04.s077.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s078.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s078.Main.fq1         1   0      0B                                                      
	n100.r04.s078.Main.fq2         1   0      0B                                                      
	n100.r04.s078.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s079.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s079.Main.fq1         1   0      0B                                                      
	n100.r04.s079.Main.fq2         1   0      0B                                                      
	n100.r04.s079.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s080.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s080.Main.fq1         1   0      0B                                                      
	n100.r04.s080.Main.fq2         1   0      0B                                                      
	n100.r04.s080.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s081.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s081.Main.fq1         1   0      0B                                                      
	n100.r04.s081.Main.fq2         1   0      0B                                                      
	n100.r04.s081.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s082.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s082.Main.fq1         1   0      0B                                                      
	n100.r04.s082.Main.fq2         1   0      0B                                                      
	n100.r04.s082.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s083.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s083.Main.fq1         1   0      0B                                                      
	n100.r04.s083.Main.fq2         1   0      0B                                                      
	n100.r04.s083.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s084.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s084.Main.fq1         1   0      0B                                                      
	n100.r04.s084.Main.fq2         1   0      0B                                                      
	n100.r04.s084.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s085.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s085.Main.fq1         1   0      0B                                                      
	n100.r04.s085.Main.fq2         1   0      0B                                                      
	n100.r04.s085.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s086.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s086.Main.fq1         1   0      0B                                                      
	n100.r04.s086.Main.fq2         1   0      0B                                                      
	n100.r04.s086.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s087.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s087.Main.fq1         1   0      0B                                                      
	n100.r04.s087.Main.fq2         1   0      0B                                                      
	n100.r04.s087.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s088.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s088.Main.fq1         1   0      0B                                                      
	n100.r04.s088.Main.fq2         1   0      0B                                                      
	n100.r04.s088.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s089.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s089.Main.fq1         1   0      0B                                                      
	n100.r04.s089.Main.fq2         1   0      0B                                                      
	n100.r04.s089.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s090.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s090.Main.fq1         1   0      0B                                                      
	n100.r04.s090.Main.fq2         1   0      0B                                                      
	n100.r04.s090.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s091.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s091.Main.fq1         1   0      0B                                                      
	n100.r04.s091.Main.fq2         1   0      0B                                                      
	n100.r04.s091.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s092.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s092.Main.fq1         1   0      0B                                                      
	n100.r04.s092.Main.fq2         1   0      0B                                                      
	n100.r04.s092.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s093.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s093.Main.fq1         1   0      0B                                                      
	n100.r04.s093.Main.fq2         1   0      0B                                                      
	n100.r04.s093.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s094.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s094.Main.fq1         1   0      0B                                                      
	n100.r04.s094.Main.fq2         1   0      0B                                                      
	n100.r04.s094.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s095.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s095.Main.fq1         1   0      0B                                                      
	n100.r04.s095.Main.fq2         1   0      0B                                                      
	n100.r04.s095.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s096.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s096.Main.fq1         1   0      0B                                                      
	n100.r04.s096.Main.fq2         1   0      0B                                                      
	n100.r04.s096.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s097.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s097.Main.fq1         1   0      0B                                                      
	n100.r04.s097.Main.fq2         1   0      0B                                                      
	n100.r04.s097.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s098.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s098.Main.fq1         1   0      0B                                                      
	n100.r04.s098.Main.fq2         1   0      0B                                                      
	n100.r04.s098.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s099.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s099.Main.fq1         1   0      0B                                                      
	n100.r04.s099.Main.fq2         1   0      0B                                                      
	n100.r04.s099.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r04.s100.Main.cp_out_file 1   0      0B                                                      
	n100.r04.s100.Main.fq1         1   0      0B                                                      
	n100.r04.s100.Main.fq2         1   0      0B                                                      
	n100.r04.s100.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	warning: reduce memory requirements for over-allocating execs: n100.r04.s001.Main.out_file, n100.r04.s002.Main.out_file, n100.r04.s003.Main.out_file, n100.r04.s004.Main.out_file, n100.r04.s005.Main.out_file, n100.r04.s006.Main.out_file, n100.r04.s007.Main.out_file, n100.r04.s008.Main.out_file, n100.r04.s009.Main.out_file, n100.r04.s010.Main.out_file, n100.r04.s011.Main.out_file, n100.r04.s012.Main.out_file, n100.r04.s013.Main.out_file, n100.r04.s014.Main.out_file, n100.r04.s015.Main.out_file, n100.r04.s016.Main.out_file, n100.r04.s017.Main.out_file, n100.r04.s018.Main.out_file, n100.r04.s019.Main.out_file, n100.r04.s020.Main.out_file, n100.r04.s021.Main.out_file, n100.r04.s022.Main.out_file, n100.r04.s023.Main.out_file, n100.r04.s024.Main.out_file, n100.r04.s025.Main.out_file, n100.r04.s026.Main.out_file, n100.r04.s027.Main.out_file, n100.r04.s028.Main.out_file, n100.r04.s029.Main.out_file, n100.r04.s030.Main.out_file, n100.r04.s031.Main.out_file, n100.r04.s032.Main.out_file, n100.r04.s033.Main.out_file, n100.r04.s034.Main.out_file, n100.r04.s035.Main.out_file, n100.r04.s036.Main.out_file, n100.r04.s037.Main.out_file, n100.r04.s038.Main.out_file, n100.r04.s039.Main.out_file, n100.r04.s040.Main.out_file, n100.r04.s041.Main.out_file, n100.r04.s042.Main.out_file, n100.r04.s043.Main.out_file, n100.r04.s044.Main.out_file, n100.r04.s045.Main.out_file, n100.r04.s046.Main.out_file, n100.r04.s047.Main.out_file, n100.r04.s048.Main.out_file, n100.r04.s049.Main.out_file, n100.r04.s050.Main.out_file, n100.r04.s051.Main.out_file, n100.r04.s052.Main.out_file, n100.r04.s053.Main.out_file, n100.r04.s054.Main.out_file, n100.r04.s055.Main.out_file, n100.r04.s056.Main.out_file, n100.r04.s057.Main.out_file, n100.r04.s058.Main.out_file, n100.r04.s059.Main.out_file, n100.r04.s060.Main.out_file, n100.r04.s061.Main.out_file, n100.r04.s062.Main.out_file, n100.r04.s063.Main.out_file, n100.r04.s064.Main.out_file, n100.r04.s065.Main.out_file, n100.r04.s066.Main.out_file, n100.r04.s067.Main.out_file, n100.r04.s068.Main.out_file, n100.r04.s069.Main.out_file, n100.r04.s070.Main.out_file, n100.r04.s071.Main.out_file, n100.r04.s072.Main.out_file, n100.r04.s073.Main.out_file, n100.r04.s074.Main.out_file, n100.r04.s075.Main.out_file, n100.r04.s076.Main.out_file, n100.r04.s077.Main.out_file, n100.r04.s078.Main.out_file, n100.r04.s079.Main.out_file, n100.r04.s080.Main.out_file, n100.r04.s081.Main.out_file, n100.r04.s082.Main.out_file, n100.r04.s083.Main.out_file, n100.r04.s084.Main.out_file, n100.r04.s085.Main.out_file, n100.r04.s086.Main.out_file, n100.r04.s087.Main.out_file, n100.r04.s088.Main.out_file, n100.r04.s089.Main.out_file, n100.r04.s090.Main.out_file, n100.r04.s091.Main.out_file, n100.r04.s092.Main.out_file, n100.r04.s093.Main.out_file, n100.r04.s094.Main.out_file, n100.r04.s095.Main.out_file, n100.r04.s096.Main.out_file, n100.r04.s097.Main.out_file, n100.r04.s098.Main.out_file, n100.r04.s099.Main.out_file, n100.r04.s100.Main.out_file
2021/07/08 16:57:32 result: [val<.=c37a7d9d 35.8MiB>, val<.=d8ba7639 35.7MiB>, val<.=37a31a85 35.8MiB>, val<.=3315d5d7 35.8MiB>, val<.=4ae15396 35.7MiB>, val<.=48d82925 35.7MiB>, val<.=f05251d7 35.7MiB>, val<.=ccf13d81 35.7MiB>, val<.=12232de6 35.7MiB>, val<.=90389daa 35.8MiB>, val<.=2edb4a4f 35.8MiB>, val<.=9f84f9a7 35.7MiB>, val<.=f65a37f9 35.7MiB>, val<.=9e2a6ffe 35.7MiB>, val<.=8d0deee1 35.8MiB>, val<.=102a69da 35.7MiB>, val<.=82716149 35.7MiB>, val<.=622f5d41 35.7MiB>, val<.=ac82e4ba 35.7MiB>, val<.=275a2e80 35.7MiB>, val<.=38c0648f 35.7MiB>, val<.=3fa723a7 35.8MiB>, val<.=86dc4ee4 35.8MiB>, val<.=5a505635 35.7MiB>, val<.=c0340c70 35.8MiB>, val<.=6c2b7c27 35.7MiB>, val<.=3aeabb66 35.7MiB>, val<.=730c1593 35.7MiB>, val<.=c4391b7a 35.8MiB>, val<.=a2ff31cf 35.7MiB>, val<.=bc5edc6c 35.7MiB>, val<.=f760f2c6 35.7MiB>, val<.=449f0d15 35.7MiB>, val<.=055777af 35.7MiB>, val<.=47553d86 35.7MiB>, val<.=0e485659 35.7MiB>, val<.=970918be 35.7MiB>, val<.=ab256619 35.7MiB>, val<.=ec1f774f 35.8MiB>, val<.=abe9b1ae 35.7MiB>, val<.=8a1fd1e7 35.7MiB>, val<.=005b7167 35.8MiB>, val<.=68dbfbeb 35.7MiB>, val<.=e4775cb9 35.7MiB>, val<.=f57230de 35.7MiB>, val<.=a238dd29 35.7MiB>, val<.=9e48d313 35.7MiB>, val<.=5dd05912 35.7MiB>, val<.=c7ef0900 35.8MiB>, val<.=7f3f5a46 35.7MiB>, val<.=14b41e70 35.7MiB>, val<.=99b5471b 35.7MiB>, val<.=755011b9 35.8MiB>, val<.=a601f0fd 35.7MiB>, val<.=1a03f88e 35.7MiB>, val<.=387dd1ce 35.8MiB>, val<.=7dc94825 35.8MiB>, val<.=3bede727 35.8MiB>, val<.=d921ecd7 35.7MiB>, val<.=86c55e11 35.8MiB>, val<.=5bcfe8df 35.8MiB>, val<.=4bee0598 35.7MiB>, val<.=35aa3d61 35.7MiB>, val<.=192b2c57 35.8MiB>, val<.=c4191f3c 35.7MiB>, val<.=ab2ceb40 35.7MiB>, val<.=d3748c35 35.8MiB>, val<.=f8c2d552 35.7MiB>, val<.=d4e46737 35.7MiB>, val<.=b0a2b42c 35.7MiB>, val<.=b47153be 35.7MiB>, val<.=36ea8e8c 35.7MiB>, val<.=17e199be 35.7MiB>, val<.=90caa718 35.7MiB>, val<.=9ea2e142 35.8MiB>, val<.=2a27b092 35.7MiB>, val<.=7f758687 35.8MiB>, val<.=a29f09e2 35.8MiB>, val<.=05c608f2 35.7MiB>, val<.=862d4782 35.7MiB>, val<.=6fc80ba7 35.8MiB>, val<.=bdedeb8f 35.7MiB>, val<.=e729ffe6 35.8MiB>, val<.=9a9390ee 35.8MiB>, val<.=b6e81e49 35.8MiB>, val<.=73665cd0 35.8MiB>, val<.=7dc76cc5 35.8MiB>, val<.=a0ffe08a 35.7MiB>, val<.=736f9698 35.7MiB>, val<.=0fc7a6ae 35.7MiB>, val<.=9c06c68c 35.8MiB>, val<.=fbe4335b 35.8MiB>, val<.=81c265a6 35.7MiB>, val<.=328b4a48 35.7MiB>, val<.=d5e21dac 35.7MiB>, val<.=22443a47 35.7MiB>, val<.=3e5b5c07 35.7MiB>, val<.=1d14ecf1 35.7MiB>, val<.=6ea3482b 35.7MiB>, val<.=515a3357 35.7MiB>]
2021/07/08 16:57:33 waiting for 1 background tasks to complete
