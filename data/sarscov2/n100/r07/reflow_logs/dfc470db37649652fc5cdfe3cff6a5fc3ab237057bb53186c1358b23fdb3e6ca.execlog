2021/07/08 17:13:02 reflow version: reflow1.6.0 (go1.13.15)
2021/07/08 17:13:02 run ID: dfc470db
2021/07/08 17:13:02 evaluating program /home/niema/ViReflow-Paper/data/sarscov2/n100/n100.r07.rf
	(no params)
	(no arguments)
2021/07/08 17:13:02 Trace: /home/niema/.reflow/runs/dfc470db37649652fc5cdfe3cff6a5fc3ab237057bb53186c1358b23fdb3e6ca.trace
2021/07/08 17:13:02 evaluating with configuration: scheduler *sched.Scheduler snapshotter blob.Mux transferer *repository.Manager repository *blobrepo.Repository,url=s3://niema-test-quickstart-cache/ assoc *dydbassoc.Assoc,TableName=niema-test-quickstart flags cacheextern,nocache,nogc,norecomputeempty,topdown flowconfig hashv2 cachelookuptimeout 20m0s imagemap map[] dotwriter(*os.File)
2021/07/08 17:13:03 scheduler task b79979ad (flow 627a1f3f): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s001_output\"\n        wget -O \"n100.r07.s001_output/n100.r07.s001.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s001_output/n100.r07.s001.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s001_output/n100.r07.s001.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s001_output/n100.r07.s001.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s001_output/n100.r07.s001.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s001_output/n100.r07.s001.reference.fas\" \"n100.r07.s001_output/n100.r07.s001.fq1.fastq\" \"n100.r07.s001_output/n100.r07.s001.fq2.fastq\" | samtools view -bS - > \"n100.r07.s001_output/n100.r07.s001.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s001_output/n100.r07.s001.untrimmed.sorted.bam\" \"n100.r07.s001_output/n100.r07.s001.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s001_output/n100.r07.s001.untrimmed.sorted.bam\" -b \"n100.r07.s001_output/n100.r07.s001.primers.bed\" -p \"n100.r07.s001_output/n100.r07.s001.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s001_output/n100.r07.s001.trimmed.sorted.bam\" \"n100.r07.s001_output/n100.r07.s001.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s001_output/n100.r07.s001.reference.fas\" \"n100.r07.s001_output/n100.r07.s001.trimmed.sorted.bam\" > \"n100.r07.s001_output/n100.r07.s001.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s001_output/n100.r07.s001.reference.fas\" --call-indels \"n100.r07.s001_output/n100.r07.s001.trimmed.sorted.bam\" > \"n100.r07.s001_output/n100.r07.s001.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s001_output/n100.r07.s001.trimmed.sorted.bam\" > \"n100.r07.s001_output/n100.r07.s001.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s001_output/n100.r07.s001.depth.txt\" \"n100.r07.s001_output/n100.r07.s001.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s001_output/n100.r07.s001.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s001_output/n100.r07.s001.reference.fas\" | bcftools consensus -m \"n100.r07.s001_output/n100.r07.s001.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s001_output/n100.r07.s001.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s001_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s001_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s001_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task e9888daf (flow ec27422b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s060_output\"\n        wget -O \"n100.r07.s060_output/n100.r07.s060.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s060_output/n100.r07.s060.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s060_output/n100.r07.s060.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s060_output/n100.r07.s060.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s060_output/n100.r07.s060.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s060_output/n100.r07.s060.reference.fas\" \"n100.r07.s060_output/n100.r07.s060.fq1.fastq\" \"n100.r07.s060_output/n100.r07.s060.fq2.fastq\" | samtools view -bS - > \"n100.r07.s060_output/n100.r07.s060.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s060_output/n100.r07.s060.untrimmed.sorted.bam\" \"n100.r07.s060_output/n100.r07.s060.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s060_output/n100.r07.s060.untrimmed.sorted.bam\" -b \"n100.r07.s060_output/n100.r07.s060.primers.bed\" -p \"n100.r07.s060_output/n100.r07.s060.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s060_output/n100.r07.s060.trimmed.sorted.bam\" \"n100.r07.s060_output/n100.r07.s060.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s060_output/n100.r07.s060.reference.fas\" \"n100.r07.s060_output/n100.r07.s060.trimmed.sorted.bam\" > \"n100.r07.s060_output/n100.r07.s060.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s060_output/n100.r07.s060.reference.fas\" --call-indels \"n100.r07.s060_output/n100.r07.s060.trimmed.sorted.bam\" > \"n100.r07.s060_output/n100.r07.s060.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s060_output/n100.r07.s060.trimmed.sorted.bam\" > \"n100.r07.s060_output/n100.r07.s060.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s060_output/n100.r07.s060.depth.txt\" \"n100.r07.s060_output/n100.r07.s060.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s060_output/n100.r07.s060.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s060_output/n100.r07.s060.reference.fas\" | bcftools consensus -m \"n100.r07.s060_output/n100.r07.s060.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s060_output/n100.r07.s060.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s060_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s060_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s060_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task d280101a (flow 2063d14e): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s080_output\"\n        wget -O \"n100.r07.s080_output/n100.r07.s080.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s080_output/n100.r07.s080.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s080_output/n100.r07.s080.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s080_output/n100.r07.s080.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s080_output/n100.r07.s080.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s080_output/n100.r07.s080.reference.fas\" \"n100.r07.s080_output/n100.r07.s080.fq1.fastq\" \"n100.r07.s080_output/n100.r07.s080.fq2.fastq\" | samtools view -bS - > \"n100.r07.s080_output/n100.r07.s080.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s080_output/n100.r07.s080.untrimmed.sorted.bam\" \"n100.r07.s080_output/n100.r07.s080.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s080_output/n100.r07.s080.untrimmed.sorted.bam\" -b \"n100.r07.s080_output/n100.r07.s080.primers.bed\" -p \"n100.r07.s080_output/n100.r07.s080.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s080_output/n100.r07.s080.trimmed.sorted.bam\" \"n100.r07.s080_output/n100.r07.s080.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s080_output/n100.r07.s080.reference.fas\" \"n100.r07.s080_output/n100.r07.s080.trimmed.sorted.bam\" > \"n100.r07.s080_output/n100.r07.s080.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s080_output/n100.r07.s080.reference.fas\" --call-indels \"n100.r07.s080_output/n100.r07.s080.trimmed.sorted.bam\" > \"n100.r07.s080_output/n100.r07.s080.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s080_output/n100.r07.s080.trimmed.sorted.bam\" > \"n100.r07.s080_output/n100.r07.s080.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s080_output/n100.r07.s080.depth.txt\" \"n100.r07.s080_output/n100.r07.s080.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s080_output/n100.r07.s080.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s080_output/n100.r07.s080.reference.fas\" | bcftools consensus -m \"n100.r07.s080_output/n100.r07.s080.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s080_output/n100.r07.s080.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s080_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s080_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s080_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 92cb3014 (flow e38f563a): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s043_output\"\n        wget -O \"n100.r07.s043_output/n100.r07.s043.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s043_output/n100.r07.s043.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s043_output/n100.r07.s043.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s043_output/n100.r07.s043.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s043_output/n100.r07.s043.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s043_output/n100.r07.s043.reference.fas\" \"n100.r07.s043_output/n100.r07.s043.fq1.fastq\" \"n100.r07.s043_output/n100.r07.s043.fq2.fastq\" | samtools view -bS - > \"n100.r07.s043_output/n100.r07.s043.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s043_output/n100.r07.s043.untrimmed.sorted.bam\" \"n100.r07.s043_output/n100.r07.s043.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s043_output/n100.r07.s043.untrimmed.sorted.bam\" -b \"n100.r07.s043_output/n100.r07.s043.primers.bed\" -p \"n100.r07.s043_output/n100.r07.s043.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s043_output/n100.r07.s043.trimmed.sorted.bam\" \"n100.r07.s043_output/n100.r07.s043.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s043_output/n100.r07.s043.reference.fas\" \"n100.r07.s043_output/n100.r07.s043.trimmed.sorted.bam\" > \"n100.r07.s043_output/n100.r07.s043.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s043_output/n100.r07.s043.reference.fas\" --call-indels \"n100.r07.s043_output/n100.r07.s043.trimmed.sorted.bam\" > \"n100.r07.s043_output/n100.r07.s043.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s043_output/n100.r07.s043.trimmed.sorted.bam\" > \"n100.r07.s043_output/n100.r07.s043.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s043_output/n100.r07.s043.depth.txt\" \"n100.r07.s043_output/n100.r07.s043.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s043_output/n100.r07.s043.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s043_output/n100.r07.s043.reference.fas\" | bcftools consensus -m \"n100.r07.s043_output/n100.r07.s043.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s043_output/n100.r07.s043.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s043_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s043_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s043_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 2cd48a42 (flow ab63e124): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s040_output\"\n        wget -O \"n100.r07.s040_output/n100.r07.s040.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s040_output/n100.r07.s040.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s040_output/n100.r07.s040.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s040_output/n100.r07.s040.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s040_output/n100.r07.s040.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s040_output/n100.r07.s040.reference.fas\" \"n100.r07.s040_output/n100.r07.s040.fq1.fastq\" \"n100.r07.s040_output/n100.r07.s040.fq2.fastq\" | samtools view -bS - > \"n100.r07.s040_output/n100.r07.s040.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s040_output/n100.r07.s040.untrimmed.sorted.bam\" \"n100.r07.s040_output/n100.r07.s040.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s040_output/n100.r07.s040.untrimmed.sorted.bam\" -b \"n100.r07.s040_output/n100.r07.s040.primers.bed\" -p \"n100.r07.s040_output/n100.r07.s040.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s040_output/n100.r07.s040.trimmed.sorted.bam\" \"n100.r07.s040_output/n100.r07.s040.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s040_output/n100.r07.s040.reference.fas\" \"n100.r07.s040_output/n100.r07.s040.trimmed.sorted.bam\" > \"n100.r07.s040_output/n100.r07.s040.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s040_output/n100.r07.s040.reference.fas\" --call-indels \"n100.r07.s040_output/n100.r07.s040.trimmed.sorted.bam\" > \"n100.r07.s040_output/n100.r07.s040.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s040_output/n100.r07.s040.trimmed.sorted.bam\" > \"n100.r07.s040_output/n100.r07.s040.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s040_output/n100.r07.s040.depth.txt\" \"n100.r07.s040_output/n100.r07.s040.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s040_output/n100.r07.s040.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s040_output/n100.r07.s040.reference.fas\" | bcftools consensus -m \"n100.r07.s040_output/n100.r07.s040.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s040_output/n100.r07.s040.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s040_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s040_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s040_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 57e27363 (flow cd67159a): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s031_output\"\n        wget -O \"n100.r07.s031_output/n100.r07.s031.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s031_output/n100.r07.s031.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s031_output/n100.r07.s031.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s031_output/n100.r07.s031.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s031_output/n100.r07.s031.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s031_output/n100.r07.s031.reference.fas\" \"n100.r07.s031_output/n100.r07.s031.fq1.fastq\" \"n100.r07.s031_output/n100.r07.s031.fq2.fastq\" | samtools view -bS - > \"n100.r07.s031_output/n100.r07.s031.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s031_output/n100.r07.s031.untrimmed.sorted.bam\" \"n100.r07.s031_output/n100.r07.s031.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s031_output/n100.r07.s031.untrimmed.sorted.bam\" -b \"n100.r07.s031_output/n100.r07.s031.primers.bed\" -p \"n100.r07.s031_output/n100.r07.s031.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s031_output/n100.r07.s031.trimmed.sorted.bam\" \"n100.r07.s031_output/n100.r07.s031.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s031_output/n100.r07.s031.reference.fas\" \"n100.r07.s031_output/n100.r07.s031.trimmed.sorted.bam\" > \"n100.r07.s031_output/n100.r07.s031.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s031_output/n100.r07.s031.reference.fas\" --call-indels \"n100.r07.s031_output/n100.r07.s031.trimmed.sorted.bam\" > \"n100.r07.s031_output/n100.r07.s031.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s031_output/n100.r07.s031.trimmed.sorted.bam\" > \"n100.r07.s031_output/n100.r07.s031.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s031_output/n100.r07.s031.depth.txt\" \"n100.r07.s031_output/n100.r07.s031.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s031_output/n100.r07.s031.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s031_output/n100.r07.s031.reference.fas\" | bcftools consensus -m \"n100.r07.s031_output/n100.r07.s031.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s031_output/n100.r07.s031.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s031_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s031_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s031_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 5a053160 (flow 556ae154): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s015_output\"\n        wget -O \"n100.r07.s015_output/n100.r07.s015.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s015_output/n100.r07.s015.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s015_output/n100.r07.s015.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s015_output/n100.r07.s015.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s015_output/n100.r07.s015.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s015_output/n100.r07.s015.reference.fas\" \"n100.r07.s015_output/n100.r07.s015.fq1.fastq\" \"n100.r07.s015_output/n100.r07.s015.fq2.fastq\" | samtools view -bS - > \"n100.r07.s015_output/n100.r07.s015.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s015_output/n100.r07.s015.untrimmed.sorted.bam\" \"n100.r07.s015_output/n100.r07.s015.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s015_output/n100.r07.s015.untrimmed.sorted.bam\" -b \"n100.r07.s015_output/n100.r07.s015.primers.bed\" -p \"n100.r07.s015_output/n100.r07.s015.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s015_output/n100.r07.s015.trimmed.sorted.bam\" \"n100.r07.s015_output/n100.r07.s015.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s015_output/n100.r07.s015.reference.fas\" \"n100.r07.s015_output/n100.r07.s015.trimmed.sorted.bam\" > \"n100.r07.s015_output/n100.r07.s015.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s015_output/n100.r07.s015.reference.fas\" --call-indels \"n100.r07.s015_output/n100.r07.s015.trimmed.sorted.bam\" > \"n100.r07.s015_output/n100.r07.s015.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s015_output/n100.r07.s015.trimmed.sorted.bam\" > \"n100.r07.s015_output/n100.r07.s015.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s015_output/n100.r07.s015.depth.txt\" \"n100.r07.s015_output/n100.r07.s015.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s015_output/n100.r07.s015.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s015_output/n100.r07.s015.reference.fas\" | bcftools consensus -m \"n100.r07.s015_output/n100.r07.s015.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s015_output/n100.r07.s015.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s015_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s015_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s015_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 450f7005 (flow 93a728de): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s024_output\"\n        wget -O \"n100.r07.s024_output/n100.r07.s024.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s024_output/n100.r07.s024.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s024_output/n100.r07.s024.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s024_output/n100.r07.s024.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s024_output/n100.r07.s024.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s024_output/n100.r07.s024.reference.fas\" \"n100.r07.s024_output/n100.r07.s024.fq1.fastq\" \"n100.r07.s024_output/n100.r07.s024.fq2.fastq\" | samtools view -bS - > \"n100.r07.s024_output/n100.r07.s024.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s024_output/n100.r07.s024.untrimmed.sorted.bam\" \"n100.r07.s024_output/n100.r07.s024.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s024_output/n100.r07.s024.untrimmed.sorted.bam\" -b \"n100.r07.s024_output/n100.r07.s024.primers.bed\" -p \"n100.r07.s024_output/n100.r07.s024.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s024_output/n100.r07.s024.trimmed.sorted.bam\" \"n100.r07.s024_output/n100.r07.s024.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s024_output/n100.r07.s024.reference.fas\" \"n100.r07.s024_output/n100.r07.s024.trimmed.sorted.bam\" > \"n100.r07.s024_output/n100.r07.s024.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s024_output/n100.r07.s024.reference.fas\" --call-indels \"n100.r07.s024_output/n100.r07.s024.trimmed.sorted.bam\" > \"n100.r07.s024_output/n100.r07.s024.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s024_output/n100.r07.s024.trimmed.sorted.bam\" > \"n100.r07.s024_output/n100.r07.s024.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s024_output/n100.r07.s024.depth.txt\" \"n100.r07.s024_output/n100.r07.s024.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s024_output/n100.r07.s024.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s024_output/n100.r07.s024.reference.fas\" | bcftools consensus -m \"n100.r07.s024_output/n100.r07.s024.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s024_output/n100.r07.s024.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s024_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s024_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s024_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task bb3aebb8 (flow 2ffcac3d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s088_output\"\n        wget -O \"n100.r07.s088_output/n100.r07.s088.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s088_output/n100.r07.s088.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s088_output/n100.r07.s088.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s088_output/n100.r07.s088.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s088_output/n100.r07.s088.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s088_output/n100.r07.s088.reference.fas\" \"n100.r07.s088_output/n100.r07.s088.fq1.fastq\" \"n100.r07.s088_output/n100.r07.s088.fq2.fastq\" | samtools view -bS - > \"n100.r07.s088_output/n100.r07.s088.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s088_output/n100.r07.s088.untrimmed.sorted.bam\" \"n100.r07.s088_output/n100.r07.s088.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s088_output/n100.r07.s088.untrimmed.sorted.bam\" -b \"n100.r07.s088_output/n100.r07.s088.primers.bed\" -p \"n100.r07.s088_output/n100.r07.s088.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s088_output/n100.r07.s088.trimmed.sorted.bam\" \"n100.r07.s088_output/n100.r07.s088.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s088_output/n100.r07.s088.reference.fas\" \"n100.r07.s088_output/n100.r07.s088.trimmed.sorted.bam\" > \"n100.r07.s088_output/n100.r07.s088.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s088_output/n100.r07.s088.reference.fas\" --call-indels \"n100.r07.s088_output/n100.r07.s088.trimmed.sorted.bam\" > \"n100.r07.s088_output/n100.r07.s088.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s088_output/n100.r07.s088.trimmed.sorted.bam\" > \"n100.r07.s088_output/n100.r07.s088.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s088_output/n100.r07.s088.depth.txt\" \"n100.r07.s088_output/n100.r07.s088.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s088_output/n100.r07.s088.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s088_output/n100.r07.s088.reference.fas\" | bcftools consensus -m \"n100.r07.s088_output/n100.r07.s088.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s088_output/n100.r07.s088.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s088_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s088_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s088_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 072a8e2d (flow edd91e32): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s045_output\"\n        wget -O \"n100.r07.s045_output/n100.r07.s045.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s045_output/n100.r07.s045.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s045_output/n100.r07.s045.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s045_output/n100.r07.s045.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s045_output/n100.r07.s045.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s045_output/n100.r07.s045.reference.fas\" \"n100.r07.s045_output/n100.r07.s045.fq1.fastq\" \"n100.r07.s045_output/n100.r07.s045.fq2.fastq\" | samtools view -bS - > \"n100.r07.s045_output/n100.r07.s045.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s045_output/n100.r07.s045.untrimmed.sorted.bam\" \"n100.r07.s045_output/n100.r07.s045.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s045_output/n100.r07.s045.untrimmed.sorted.bam\" -b \"n100.r07.s045_output/n100.r07.s045.primers.bed\" -p \"n100.r07.s045_output/n100.r07.s045.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s045_output/n100.r07.s045.trimmed.sorted.bam\" \"n100.r07.s045_output/n100.r07.s045.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s045_output/n100.r07.s045.reference.fas\" \"n100.r07.s045_output/n100.r07.s045.trimmed.sorted.bam\" > \"n100.r07.s045_output/n100.r07.s045.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s045_output/n100.r07.s045.reference.fas\" --call-indels \"n100.r07.s045_output/n100.r07.s045.trimmed.sorted.bam\" > \"n100.r07.s045_output/n100.r07.s045.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s045_output/n100.r07.s045.trimmed.sorted.bam\" > \"n100.r07.s045_output/n100.r07.s045.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s045_output/n100.r07.s045.depth.txt\" \"n100.r07.s045_output/n100.r07.s045.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s045_output/n100.r07.s045.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s045_output/n100.r07.s045.reference.fas\" | bcftools consensus -m \"n100.r07.s045_output/n100.r07.s045.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s045_output/n100.r07.s045.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s045_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s045_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s045_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task ac285b56 (flow d679cd61): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s042_output\"\n        wget -O \"n100.r07.s042_output/n100.r07.s042.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s042_output/n100.r07.s042.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s042_output/n100.r07.s042.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s042_output/n100.r07.s042.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s042_output/n100.r07.s042.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s042_output/n100.r07.s042.reference.fas\" \"n100.r07.s042_output/n100.r07.s042.fq1.fastq\" \"n100.r07.s042_output/n100.r07.s042.fq2.fastq\" | samtools view -bS - > \"n100.r07.s042_output/n100.r07.s042.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s042_output/n100.r07.s042.untrimmed.sorted.bam\" \"n100.r07.s042_output/n100.r07.s042.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s042_output/n100.r07.s042.untrimmed.sorted.bam\" -b \"n100.r07.s042_output/n100.r07.s042.primers.bed\" -p \"n100.r07.s042_output/n100.r07.s042.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s042_output/n100.r07.s042.trimmed.sorted.bam\" \"n100.r07.s042_output/n100.r07.s042.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s042_output/n100.r07.s042.reference.fas\" \"n100.r07.s042_output/n100.r07.s042.trimmed.sorted.bam\" > \"n100.r07.s042_output/n100.r07.s042.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s042_output/n100.r07.s042.reference.fas\" --call-indels \"n100.r07.s042_output/n100.r07.s042.trimmed.sorted.bam\" > \"n100.r07.s042_output/n100.r07.s042.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s042_output/n100.r07.s042.trimmed.sorted.bam\" > \"n100.r07.s042_output/n100.r07.s042.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s042_output/n100.r07.s042.depth.txt\" \"n100.r07.s042_output/n100.r07.s042.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s042_output/n100.r07.s042.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s042_output/n100.r07.s042.reference.fas\" | bcftools consensus -m \"n100.r07.s042_output/n100.r07.s042.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s042_output/n100.r07.s042.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s042_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s042_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s042_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 0b40294a (flow d3087af8): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s034_output\"\n        wget -O \"n100.r07.s034_output/n100.r07.s034.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s034_output/n100.r07.s034.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s034_output/n100.r07.s034.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s034_output/n100.r07.s034.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s034_output/n100.r07.s034.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s034_output/n100.r07.s034.reference.fas\" \"n100.r07.s034_output/n100.r07.s034.fq1.fastq\" \"n100.r07.s034_output/n100.r07.s034.fq2.fastq\" | samtools view -bS - > \"n100.r07.s034_output/n100.r07.s034.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s034_output/n100.r07.s034.untrimmed.sorted.bam\" \"n100.r07.s034_output/n100.r07.s034.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s034_output/n100.r07.s034.untrimmed.sorted.bam\" -b \"n100.r07.s034_output/n100.r07.s034.primers.bed\" -p \"n100.r07.s034_output/n100.r07.s034.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s034_output/n100.r07.s034.trimmed.sorted.bam\" \"n100.r07.s034_output/n100.r07.s034.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s034_output/n100.r07.s034.reference.fas\" \"n100.r07.s034_output/n100.r07.s034.trimmed.sorted.bam\" > \"n100.r07.s034_output/n100.r07.s034.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s034_output/n100.r07.s034.reference.fas\" --call-indels \"n100.r07.s034_output/n100.r07.s034.trimmed.sorted.bam\" > \"n100.r07.s034_output/n100.r07.s034.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s034_output/n100.r07.s034.trimmed.sorted.bam\" > \"n100.r07.s034_output/n100.r07.s034.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s034_output/n100.r07.s034.depth.txt\" \"n100.r07.s034_output/n100.r07.s034.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s034_output/n100.r07.s034.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s034_output/n100.r07.s034.reference.fas\" | bcftools consensus -m \"n100.r07.s034_output/n100.r07.s034.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s034_output/n100.r07.s034.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s034_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s034_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s034_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task d7452493 (flow a3bb669d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s011_output\"\n        wget -O \"n100.r07.s011_output/n100.r07.s011.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s011_output/n100.r07.s011.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s011_output/n100.r07.s011.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s011_output/n100.r07.s011.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s011_output/n100.r07.s011.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s011_output/n100.r07.s011.reference.fas\" \"n100.r07.s011_output/n100.r07.s011.fq1.fastq\" \"n100.r07.s011_output/n100.r07.s011.fq2.fastq\" | samtools view -bS - > \"n100.r07.s011_output/n100.r07.s011.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s011_output/n100.r07.s011.untrimmed.sorted.bam\" \"n100.r07.s011_output/n100.r07.s011.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s011_output/n100.r07.s011.untrimmed.sorted.bam\" -b \"n100.r07.s011_output/n100.r07.s011.primers.bed\" -p \"n100.r07.s011_output/n100.r07.s011.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s011_output/n100.r07.s011.trimmed.sorted.bam\" \"n100.r07.s011_output/n100.r07.s011.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s011_output/n100.r07.s011.reference.fas\" \"n100.r07.s011_output/n100.r07.s011.trimmed.sorted.bam\" > \"n100.r07.s011_output/n100.r07.s011.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s011_output/n100.r07.s011.reference.fas\" --call-indels \"n100.r07.s011_output/n100.r07.s011.trimmed.sorted.bam\" > \"n100.r07.s011_output/n100.r07.s011.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s011_output/n100.r07.s011.trimmed.sorted.bam\" > \"n100.r07.s011_output/n100.r07.s011.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s011_output/n100.r07.s011.depth.txt\" \"n100.r07.s011_output/n100.r07.s011.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s011_output/n100.r07.s011.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s011_output/n100.r07.s011.reference.fas\" | bcftools consensus -m \"n100.r07.s011_output/n100.r07.s011.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s011_output/n100.r07.s011.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s011_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s011_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s011_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 2cc05ef0 (flow 78f39472): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s048_output\"\n        wget -O \"n100.r07.s048_output/n100.r07.s048.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s048_output/n100.r07.s048.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s048_output/n100.r07.s048.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s048_output/n100.r07.s048.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s048_output/n100.r07.s048.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s048_output/n100.r07.s048.reference.fas\" \"n100.r07.s048_output/n100.r07.s048.fq1.fastq\" \"n100.r07.s048_output/n100.r07.s048.fq2.fastq\" | samtools view -bS - > \"n100.r07.s048_output/n100.r07.s048.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s048_output/n100.r07.s048.untrimmed.sorted.bam\" \"n100.r07.s048_output/n100.r07.s048.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s048_output/n100.r07.s048.untrimmed.sorted.bam\" -b \"n100.r07.s048_output/n100.r07.s048.primers.bed\" -p \"n100.r07.s048_output/n100.r07.s048.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s048_output/n100.r07.s048.trimmed.sorted.bam\" \"n100.r07.s048_output/n100.r07.s048.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s048_output/n100.r07.s048.reference.fas\" \"n100.r07.s048_output/n100.r07.s048.trimmed.sorted.bam\" > \"n100.r07.s048_output/n100.r07.s048.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s048_output/n100.r07.s048.reference.fas\" --call-indels \"n100.r07.s048_output/n100.r07.s048.trimmed.sorted.bam\" > \"n100.r07.s048_output/n100.r07.s048.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s048_output/n100.r07.s048.trimmed.sorted.bam\" > \"n100.r07.s048_output/n100.r07.s048.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s048_output/n100.r07.s048.depth.txt\" \"n100.r07.s048_output/n100.r07.s048.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s048_output/n100.r07.s048.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s048_output/n100.r07.s048.reference.fas\" | bcftools consensus -m \"n100.r07.s048_output/n100.r07.s048.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s048_output/n100.r07.s048.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s048_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s048_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s048_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 6c805c91 (flow 422def09): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s038_output\"\n        wget -O \"n100.r07.s038_output/n100.r07.s038.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s038_output/n100.r07.s038.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s038_output/n100.r07.s038.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s038_output/n100.r07.s038.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s038_output/n100.r07.s038.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s038_output/n100.r07.s038.reference.fas\" \"n100.r07.s038_output/n100.r07.s038.fq1.fastq\" \"n100.r07.s038_output/n100.r07.s038.fq2.fastq\" | samtools view -bS - > \"n100.r07.s038_output/n100.r07.s038.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s038_output/n100.r07.s038.untrimmed.sorted.bam\" \"n100.r07.s038_output/n100.r07.s038.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s038_output/n100.r07.s038.untrimmed.sorted.bam\" -b \"n100.r07.s038_output/n100.r07.s038.primers.bed\" -p \"n100.r07.s038_output/n100.r07.s038.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s038_output/n100.r07.s038.trimmed.sorted.bam\" \"n100.r07.s038_output/n100.r07.s038.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s038_output/n100.r07.s038.reference.fas\" \"n100.r07.s038_output/n100.r07.s038.trimmed.sorted.bam\" > \"n100.r07.s038_output/n100.r07.s038.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s038_output/n100.r07.s038.reference.fas\" --call-indels \"n100.r07.s038_output/n100.r07.s038.trimmed.sorted.bam\" > \"n100.r07.s038_output/n100.r07.s038.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s038_output/n100.r07.s038.trimmed.sorted.bam\" > \"n100.r07.s038_output/n100.r07.s038.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s038_output/n100.r07.s038.depth.txt\" \"n100.r07.s038_output/n100.r07.s038.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s038_output/n100.r07.s038.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s038_output/n100.r07.s038.reference.fas\" | bcftools consensus -m \"n100.r07.s038_output/n100.r07.s038.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s038_output/n100.r07.s038.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s038_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s038_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s038_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 31458704 (flow 40bc41f4): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s006_output\"\n        wget -O \"n100.r07.s006_output/n100.r07.s006.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s006_output/n100.r07.s006.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s006_output/n100.r07.s006.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s006_output/n100.r07.s006.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s006_output/n100.r07.s006.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s006_output/n100.r07.s006.reference.fas\" \"n100.r07.s006_output/n100.r07.s006.fq1.fastq\" \"n100.r07.s006_output/n100.r07.s006.fq2.fastq\" | samtools view -bS - > \"n100.r07.s006_output/n100.r07.s006.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s006_output/n100.r07.s006.untrimmed.sorted.bam\" \"n100.r07.s006_output/n100.r07.s006.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s006_output/n100.r07.s006.untrimmed.sorted.bam\" -b \"n100.r07.s006_output/n100.r07.s006.primers.bed\" -p \"n100.r07.s006_output/n100.r07.s006.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s006_output/n100.r07.s006.trimmed.sorted.bam\" \"n100.r07.s006_output/n100.r07.s006.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s006_output/n100.r07.s006.reference.fas\" \"n100.r07.s006_output/n100.r07.s006.trimmed.sorted.bam\" > \"n100.r07.s006_output/n100.r07.s006.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s006_output/n100.r07.s006.reference.fas\" --call-indels \"n100.r07.s006_output/n100.r07.s006.trimmed.sorted.bam\" > \"n100.r07.s006_output/n100.r07.s006.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s006_output/n100.r07.s006.trimmed.sorted.bam\" > \"n100.r07.s006_output/n100.r07.s006.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s006_output/n100.r07.s006.depth.txt\" \"n100.r07.s006_output/n100.r07.s006.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s006_output/n100.r07.s006.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s006_output/n100.r07.s006.reference.fas\" | bcftools consensus -m \"n100.r07.s006_output/n100.r07.s006.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s006_output/n100.r07.s006.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s006_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s006_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s006_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 34c0f138 (flow 806765de): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s028_output\"\n        wget -O \"n100.r07.s028_output/n100.r07.s028.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s028_output/n100.r07.s028.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s028_output/n100.r07.s028.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s028_output/n100.r07.s028.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s028_output/n100.r07.s028.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s028_output/n100.r07.s028.reference.fas\" \"n100.r07.s028_output/n100.r07.s028.fq1.fastq\" \"n100.r07.s028_output/n100.r07.s028.fq2.fastq\" | samtools view -bS - > \"n100.r07.s028_output/n100.r07.s028.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s028_output/n100.r07.s028.untrimmed.sorted.bam\" \"n100.r07.s028_output/n100.r07.s028.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s028_output/n100.r07.s028.untrimmed.sorted.bam\" -b \"n100.r07.s028_output/n100.r07.s028.primers.bed\" -p \"n100.r07.s028_output/n100.r07.s028.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s028_output/n100.r07.s028.trimmed.sorted.bam\" \"n100.r07.s028_output/n100.r07.s028.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s028_output/n100.r07.s028.reference.fas\" \"n100.r07.s028_output/n100.r07.s028.trimmed.sorted.bam\" > \"n100.r07.s028_output/n100.r07.s028.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s028_output/n100.r07.s028.reference.fas\" --call-indels \"n100.r07.s028_output/n100.r07.s028.trimmed.sorted.bam\" > \"n100.r07.s028_output/n100.r07.s028.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s028_output/n100.r07.s028.trimmed.sorted.bam\" > \"n100.r07.s028_output/n100.r07.s028.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s028_output/n100.r07.s028.depth.txt\" \"n100.r07.s028_output/n100.r07.s028.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s028_output/n100.r07.s028.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s028_output/n100.r07.s028.reference.fas\" | bcftools consensus -m \"n100.r07.s028_output/n100.r07.s028.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s028_output/n100.r07.s028.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s028_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s028_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s028_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 95756e2e (flow 61093b34): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s004_output\"\n        wget -O \"n100.r07.s004_output/n100.r07.s004.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s004_output/n100.r07.s004.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s004_output/n100.r07.s004.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s004_output/n100.r07.s004.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s004_output/n100.r07.s004.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s004_output/n100.r07.s004.reference.fas\" \"n100.r07.s004_output/n100.r07.s004.fq1.fastq\" \"n100.r07.s004_output/n100.r07.s004.fq2.fastq\" | samtools view -bS - > \"n100.r07.s004_output/n100.r07.s004.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s004_output/n100.r07.s004.untrimmed.sorted.bam\" \"n100.r07.s004_output/n100.r07.s004.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s004_output/n100.r07.s004.untrimmed.sorted.bam\" -b \"n100.r07.s004_output/n100.r07.s004.primers.bed\" -p \"n100.r07.s004_output/n100.r07.s004.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s004_output/n100.r07.s004.trimmed.sorted.bam\" \"n100.r07.s004_output/n100.r07.s004.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s004_output/n100.r07.s004.reference.fas\" \"n100.r07.s004_output/n100.r07.s004.trimmed.sorted.bam\" > \"n100.r07.s004_output/n100.r07.s004.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s004_output/n100.r07.s004.reference.fas\" --call-indels \"n100.r07.s004_output/n100.r07.s004.trimmed.sorted.bam\" > \"n100.r07.s004_output/n100.r07.s004.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s004_output/n100.r07.s004.trimmed.sorted.bam\" > \"n100.r07.s004_output/n100.r07.s004.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s004_output/n100.r07.s004.depth.txt\" \"n100.r07.s004_output/n100.r07.s004.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s004_output/n100.r07.s004.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s004_output/n100.r07.s004.reference.fas\" | bcftools consensus -m \"n100.r07.s004_output/n100.r07.s004.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s004_output/n100.r07.s004.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s004_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s004_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s004_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 5f2ce7d1 (flow e0ab9d71): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s062_output\"\n        wget -O \"n100.r07.s062_output/n100.r07.s062.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s062_output/n100.r07.s062.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s062_output/n100.r07.s062.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s062_output/n100.r07.s062.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s062_output/n100.r07.s062.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s062_output/n100.r07.s062.reference.fas\" \"n100.r07.s062_output/n100.r07.s062.fq1.fastq\" \"n100.r07.s062_output/n100.r07.s062.fq2.fastq\" | samtools view -bS - > \"n100.r07.s062_output/n100.r07.s062.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s062_output/n100.r07.s062.untrimmed.sorted.bam\" \"n100.r07.s062_output/n100.r07.s062.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s062_output/n100.r07.s062.untrimmed.sorted.bam\" -b \"n100.r07.s062_output/n100.r07.s062.primers.bed\" -p \"n100.r07.s062_output/n100.r07.s062.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s062_output/n100.r07.s062.trimmed.sorted.bam\" \"n100.r07.s062_output/n100.r07.s062.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s062_output/n100.r07.s062.reference.fas\" \"n100.r07.s062_output/n100.r07.s062.trimmed.sorted.bam\" > \"n100.r07.s062_output/n100.r07.s062.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s062_output/n100.r07.s062.reference.fas\" --call-indels \"n100.r07.s062_output/n100.r07.s062.trimmed.sorted.bam\" > \"n100.r07.s062_output/n100.r07.s062.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s062_output/n100.r07.s062.trimmed.sorted.bam\" > \"n100.r07.s062_output/n100.r07.s062.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s062_output/n100.r07.s062.depth.txt\" \"n100.r07.s062_output/n100.r07.s062.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s062_output/n100.r07.s062.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s062_output/n100.r07.s062.reference.fas\" | bcftools consensus -m \"n100.r07.s062_output/n100.r07.s062.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s062_output/n100.r07.s062.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s062_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s062_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s062_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 3d2380ba (flow 90113c2d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s030_output\"\n        wget -O \"n100.r07.s030_output/n100.r07.s030.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s030_output/n100.r07.s030.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s030_output/n100.r07.s030.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s030_output/n100.r07.s030.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s030_output/n100.r07.s030.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s030_output/n100.r07.s030.reference.fas\" \"n100.r07.s030_output/n100.r07.s030.fq1.fastq\" \"n100.r07.s030_output/n100.r07.s030.fq2.fastq\" | samtools view -bS - > \"n100.r07.s030_output/n100.r07.s030.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s030_output/n100.r07.s030.untrimmed.sorted.bam\" \"n100.r07.s030_output/n100.r07.s030.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s030_output/n100.r07.s030.untrimmed.sorted.bam\" -b \"n100.r07.s030_output/n100.r07.s030.primers.bed\" -p \"n100.r07.s030_output/n100.r07.s030.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s030_output/n100.r07.s030.trimmed.sorted.bam\" \"n100.r07.s030_output/n100.r07.s030.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s030_output/n100.r07.s030.reference.fas\" \"n100.r07.s030_output/n100.r07.s030.trimmed.sorted.bam\" > \"n100.r07.s030_output/n100.r07.s030.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s030_output/n100.r07.s030.reference.fas\" --call-indels \"n100.r07.s030_output/n100.r07.s030.trimmed.sorted.bam\" > \"n100.r07.s030_output/n100.r07.s030.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s030_output/n100.r07.s030.trimmed.sorted.bam\" > \"n100.r07.s030_output/n100.r07.s030.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s030_output/n100.r07.s030.depth.txt\" \"n100.r07.s030_output/n100.r07.s030.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s030_output/n100.r07.s030.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s030_output/n100.r07.s030.reference.fas\" | bcftools consensus -m \"n100.r07.s030_output/n100.r07.s030.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s030_output/n100.r07.s030.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s030_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s030_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s030_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task c9898fc4 (flow 8efd3fba): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s044_output\"\n        wget -O \"n100.r07.s044_output/n100.r07.s044.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s044_output/n100.r07.s044.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s044_output/n100.r07.s044.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s044_output/n100.r07.s044.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s044_output/n100.r07.s044.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s044_output/n100.r07.s044.reference.fas\" \"n100.r07.s044_output/n100.r07.s044.fq1.fastq\" \"n100.r07.s044_output/n100.r07.s044.fq2.fastq\" | samtools view -bS - > \"n100.r07.s044_output/n100.r07.s044.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s044_output/n100.r07.s044.untrimmed.sorted.bam\" \"n100.r07.s044_output/n100.r07.s044.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s044_output/n100.r07.s044.untrimmed.sorted.bam\" -b \"n100.r07.s044_output/n100.r07.s044.primers.bed\" -p \"n100.r07.s044_output/n100.r07.s044.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s044_output/n100.r07.s044.trimmed.sorted.bam\" \"n100.r07.s044_output/n100.r07.s044.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s044_output/n100.r07.s044.reference.fas\" \"n100.r07.s044_output/n100.r07.s044.trimmed.sorted.bam\" > \"n100.r07.s044_output/n100.r07.s044.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s044_output/n100.r07.s044.reference.fas\" --call-indels \"n100.r07.s044_output/n100.r07.s044.trimmed.sorted.bam\" > \"n100.r07.s044_output/n100.r07.s044.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s044_output/n100.r07.s044.trimmed.sorted.bam\" > \"n100.r07.s044_output/n100.r07.s044.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s044_output/n100.r07.s044.depth.txt\" \"n100.r07.s044_output/n100.r07.s044.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s044_output/n100.r07.s044.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s044_output/n100.r07.s044.reference.fas\" | bcftools consensus -m \"n100.r07.s044_output/n100.r07.s044.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s044_output/n100.r07.s044.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s044_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s044_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s044_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task cbc7ffd0 (flow f84bcf3d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s012_output\"\n        wget -O \"n100.r07.s012_output/n100.r07.s012.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s012_output/n100.r07.s012.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s012_output/n100.r07.s012.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s012_output/n100.r07.s012.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s012_output/n100.r07.s012.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s012_output/n100.r07.s012.reference.fas\" \"n100.r07.s012_output/n100.r07.s012.fq1.fastq\" \"n100.r07.s012_output/n100.r07.s012.fq2.fastq\" | samtools view -bS - > \"n100.r07.s012_output/n100.r07.s012.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s012_output/n100.r07.s012.untrimmed.sorted.bam\" \"n100.r07.s012_output/n100.r07.s012.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s012_output/n100.r07.s012.untrimmed.sorted.bam\" -b \"n100.r07.s012_output/n100.r07.s012.primers.bed\" -p \"n100.r07.s012_output/n100.r07.s012.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s012_output/n100.r07.s012.trimmed.sorted.bam\" \"n100.r07.s012_output/n100.r07.s012.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s012_output/n100.r07.s012.reference.fas\" \"n100.r07.s012_output/n100.r07.s012.trimmed.sorted.bam\" > \"n100.r07.s012_output/n100.r07.s012.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s012_output/n100.r07.s012.reference.fas\" --call-indels \"n100.r07.s012_output/n100.r07.s012.trimmed.sorted.bam\" > \"n100.r07.s012_output/n100.r07.s012.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s012_output/n100.r07.s012.trimmed.sorted.bam\" > \"n100.r07.s012_output/n100.r07.s012.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s012_output/n100.r07.s012.depth.txt\" \"n100.r07.s012_output/n100.r07.s012.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s012_output/n100.r07.s012.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s012_output/n100.r07.s012.reference.fas\" | bcftools consensus -m \"n100.r07.s012_output/n100.r07.s012.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s012_output/n100.r07.s012.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s012_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s012_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s012_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 3a850123 (flow f498b7de): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s003_output\"\n        wget -O \"n100.r07.s003_output/n100.r07.s003.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s003_output/n100.r07.s003.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s003_output/n100.r07.s003.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s003_output/n100.r07.s003.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s003_output/n100.r07.s003.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s003_output/n100.r07.s003.reference.fas\" \"n100.r07.s003_output/n100.r07.s003.fq1.fastq\" \"n100.r07.s003_output/n100.r07.s003.fq2.fastq\" | samtools view -bS - > \"n100.r07.s003_output/n100.r07.s003.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s003_output/n100.r07.s003.untrimmed.sorted.bam\" \"n100.r07.s003_output/n100.r07.s003.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s003_output/n100.r07.s003.untrimmed.sorted.bam\" -b \"n100.r07.s003_output/n100.r07.s003.primers.bed\" -p \"n100.r07.s003_output/n100.r07.s003.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s003_output/n100.r07.s003.trimmed.sorted.bam\" \"n100.r07.s003_output/n100.r07.s003.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s003_output/n100.r07.s003.reference.fas\" \"n100.r07.s003_output/n100.r07.s003.trimmed.sorted.bam\" > \"n100.r07.s003_output/n100.r07.s003.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s003_output/n100.r07.s003.reference.fas\" --call-indels \"n100.r07.s003_output/n100.r07.s003.trimmed.sorted.bam\" > \"n100.r07.s003_output/n100.r07.s003.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s003_output/n100.r07.s003.trimmed.sorted.bam\" > \"n100.r07.s003_output/n100.r07.s003.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s003_output/n100.r07.s003.depth.txt\" \"n100.r07.s003_output/n100.r07.s003.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s003_output/n100.r07.s003.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s003_output/n100.r07.s003.reference.fas\" | bcftools consensus -m \"n100.r07.s003_output/n100.r07.s003.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s003_output/n100.r07.s003.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s003_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s003_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s003_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task bcd66609 (flow 365c94e8): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s069_output\"\n        wget -O \"n100.r07.s069_output/n100.r07.s069.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s069_output/n100.r07.s069.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s069_output/n100.r07.s069.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s069_output/n100.r07.s069.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s069_output/n100.r07.s069.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s069_output/n100.r07.s069.reference.fas\" \"n100.r07.s069_output/n100.r07.s069.fq1.fastq\" \"n100.r07.s069_output/n100.r07.s069.fq2.fastq\" | samtools view -bS - > \"n100.r07.s069_output/n100.r07.s069.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s069_output/n100.r07.s069.untrimmed.sorted.bam\" \"n100.r07.s069_output/n100.r07.s069.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s069_output/n100.r07.s069.untrimmed.sorted.bam\" -b \"n100.r07.s069_output/n100.r07.s069.primers.bed\" -p \"n100.r07.s069_output/n100.r07.s069.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s069_output/n100.r07.s069.trimmed.sorted.bam\" \"n100.r07.s069_output/n100.r07.s069.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s069_output/n100.r07.s069.reference.fas\" \"n100.r07.s069_output/n100.r07.s069.trimmed.sorted.bam\" > \"n100.r07.s069_output/n100.r07.s069.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s069_output/n100.r07.s069.reference.fas\" --call-indels \"n100.r07.s069_output/n100.r07.s069.trimmed.sorted.bam\" > \"n100.r07.s069_output/n100.r07.s069.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s069_output/n100.r07.s069.trimmed.sorted.bam\" > \"n100.r07.s069_output/n100.r07.s069.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s069_output/n100.r07.s069.depth.txt\" \"n100.r07.s069_output/n100.r07.s069.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s069_output/n100.r07.s069.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s069_output/n100.r07.s069.reference.fas\" | bcftools consensus -m \"n100.r07.s069_output/n100.r07.s069.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s069_output/n100.r07.s069.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s069_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s069_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s069_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 9a98392a (flow e4ffdf1c): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s066_output\"\n        wget -O \"n100.r07.s066_output/n100.r07.s066.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s066_output/n100.r07.s066.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s066_output/n100.r07.s066.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s066_output/n100.r07.s066.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s066_output/n100.r07.s066.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s066_output/n100.r07.s066.reference.fas\" \"n100.r07.s066_output/n100.r07.s066.fq1.fastq\" \"n100.r07.s066_output/n100.r07.s066.fq2.fastq\" | samtools view -bS - > \"n100.r07.s066_output/n100.r07.s066.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s066_output/n100.r07.s066.untrimmed.sorted.bam\" \"n100.r07.s066_output/n100.r07.s066.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s066_output/n100.r07.s066.untrimmed.sorted.bam\" -b \"n100.r07.s066_output/n100.r07.s066.primers.bed\" -p \"n100.r07.s066_output/n100.r07.s066.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s066_output/n100.r07.s066.trimmed.sorted.bam\" \"n100.r07.s066_output/n100.r07.s066.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s066_output/n100.r07.s066.reference.fas\" \"n100.r07.s066_output/n100.r07.s066.trimmed.sorted.bam\" > \"n100.r07.s066_output/n100.r07.s066.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s066_output/n100.r07.s066.reference.fas\" --call-indels \"n100.r07.s066_output/n100.r07.s066.trimmed.sorted.bam\" > \"n100.r07.s066_output/n100.r07.s066.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s066_output/n100.r07.s066.trimmed.sorted.bam\" > \"n100.r07.s066_output/n100.r07.s066.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s066_output/n100.r07.s066.depth.txt\" \"n100.r07.s066_output/n100.r07.s066.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s066_output/n100.r07.s066.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s066_output/n100.r07.s066.reference.fas\" | bcftools consensus -m \"n100.r07.s066_output/n100.r07.s066.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s066_output/n100.r07.s066.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s066_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s066_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s066_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 3c2fce3f (flow 3d7c11ce): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s017_output\"\n        wget -O \"n100.r07.s017_output/n100.r07.s017.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s017_output/n100.r07.s017.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s017_output/n100.r07.s017.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s017_output/n100.r07.s017.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s017_output/n100.r07.s017.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s017_output/n100.r07.s017.reference.fas\" \"n100.r07.s017_output/n100.r07.s017.fq1.fastq\" \"n100.r07.s017_output/n100.r07.s017.fq2.fastq\" | samtools view -bS - > \"n100.r07.s017_output/n100.r07.s017.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s017_output/n100.r07.s017.untrimmed.sorted.bam\" \"n100.r07.s017_output/n100.r07.s017.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s017_output/n100.r07.s017.untrimmed.sorted.bam\" -b \"n100.r07.s017_output/n100.r07.s017.primers.bed\" -p \"n100.r07.s017_output/n100.r07.s017.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s017_output/n100.r07.s017.trimmed.sorted.bam\" \"n100.r07.s017_output/n100.r07.s017.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s017_output/n100.r07.s017.reference.fas\" \"n100.r07.s017_output/n100.r07.s017.trimmed.sorted.bam\" > \"n100.r07.s017_output/n100.r07.s017.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s017_output/n100.r07.s017.reference.fas\" --call-indels \"n100.r07.s017_output/n100.r07.s017.trimmed.sorted.bam\" > \"n100.r07.s017_output/n100.r07.s017.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s017_output/n100.r07.s017.trimmed.sorted.bam\" > \"n100.r07.s017_output/n100.r07.s017.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s017_output/n100.r07.s017.depth.txt\" \"n100.r07.s017_output/n100.r07.s017.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s017_output/n100.r07.s017.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s017_output/n100.r07.s017.reference.fas\" | bcftools consensus -m \"n100.r07.s017_output/n100.r07.s017.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s017_output/n100.r07.s017.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s017_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s017_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s017_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 0d5c5330 (flow c96780e2): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s047_output\"\n        wget -O \"n100.r07.s047_output/n100.r07.s047.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s047_output/n100.r07.s047.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s047_output/n100.r07.s047.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s047_output/n100.r07.s047.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s047_output/n100.r07.s047.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s047_output/n100.r07.s047.reference.fas\" \"n100.r07.s047_output/n100.r07.s047.fq1.fastq\" \"n100.r07.s047_output/n100.r07.s047.fq2.fastq\" | samtools view -bS - > \"n100.r07.s047_output/n100.r07.s047.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s047_output/n100.r07.s047.untrimmed.sorted.bam\" \"n100.r07.s047_output/n100.r07.s047.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s047_output/n100.r07.s047.untrimmed.sorted.bam\" -b \"n100.r07.s047_output/n100.r07.s047.primers.bed\" -p \"n100.r07.s047_output/n100.r07.s047.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s047_output/n100.r07.s047.trimmed.sorted.bam\" \"n100.r07.s047_output/n100.r07.s047.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s047_output/n100.r07.s047.reference.fas\" \"n100.r07.s047_output/n100.r07.s047.trimmed.sorted.bam\" > \"n100.r07.s047_output/n100.r07.s047.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s047_output/n100.r07.s047.reference.fas\" --call-indels \"n100.r07.s047_output/n100.r07.s047.trimmed.sorted.bam\" > \"n100.r07.s047_output/n100.r07.s047.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s047_output/n100.r07.s047.trimmed.sorted.bam\" > \"n100.r07.s047_output/n100.r07.s047.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s047_output/n100.r07.s047.depth.txt\" \"n100.r07.s047_output/n100.r07.s047.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s047_output/n100.r07.s047.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s047_output/n100.r07.s047.reference.fas\" | bcftools consensus -m \"n100.r07.s047_output/n100.r07.s047.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s047_output/n100.r07.s047.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s047_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s047_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s047_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 10a99fae (flow 7b842208): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s041_output\"\n        wget -O \"n100.r07.s041_output/n100.r07.s041.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s041_output/n100.r07.s041.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s041_output/n100.r07.s041.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s041_output/n100.r07.s041.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s041_output/n100.r07.s041.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s041_output/n100.r07.s041.reference.fas\" \"n100.r07.s041_output/n100.r07.s041.fq1.fastq\" \"n100.r07.s041_output/n100.r07.s041.fq2.fastq\" | samtools view -bS - > \"n100.r07.s041_output/n100.r07.s041.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s041_output/n100.r07.s041.untrimmed.sorted.bam\" \"n100.r07.s041_output/n100.r07.s041.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s041_output/n100.r07.s041.untrimmed.sorted.bam\" -b \"n100.r07.s041_output/n100.r07.s041.primers.bed\" -p \"n100.r07.s041_output/n100.r07.s041.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s041_output/n100.r07.s041.trimmed.sorted.bam\" \"n100.r07.s041_output/n100.r07.s041.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s041_output/n100.r07.s041.reference.fas\" \"n100.r07.s041_output/n100.r07.s041.trimmed.sorted.bam\" > \"n100.r07.s041_output/n100.r07.s041.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s041_output/n100.r07.s041.reference.fas\" --call-indels \"n100.r07.s041_output/n100.r07.s041.trimmed.sorted.bam\" > \"n100.r07.s041_output/n100.r07.s041.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s041_output/n100.r07.s041.trimmed.sorted.bam\" > \"n100.r07.s041_output/n100.r07.s041.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s041_output/n100.r07.s041.depth.txt\" \"n100.r07.s041_output/n100.r07.s041.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s041_output/n100.r07.s041.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s041_output/n100.r07.s041.reference.fas\" | bcftools consensus -m \"n100.r07.s041_output/n100.r07.s041.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s041_output/n100.r07.s041.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s041_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s041_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s041_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 46b3d1f4 (flow 74bc54ab): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s029_output\"\n        wget -O \"n100.r07.s029_output/n100.r07.s029.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s029_output/n100.r07.s029.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s029_output/n100.r07.s029.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s029_output/n100.r07.s029.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s029_output/n100.r07.s029.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s029_output/n100.r07.s029.reference.fas\" \"n100.r07.s029_output/n100.r07.s029.fq1.fastq\" \"n100.r07.s029_output/n100.r07.s029.fq2.fastq\" | samtools view -bS - > \"n100.r07.s029_output/n100.r07.s029.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s029_output/n100.r07.s029.untrimmed.sorted.bam\" \"n100.r07.s029_output/n100.r07.s029.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s029_output/n100.r07.s029.untrimmed.sorted.bam\" -b \"n100.r07.s029_output/n100.r07.s029.primers.bed\" -p \"n100.r07.s029_output/n100.r07.s029.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s029_output/n100.r07.s029.trimmed.sorted.bam\" \"n100.r07.s029_output/n100.r07.s029.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s029_output/n100.r07.s029.reference.fas\" \"n100.r07.s029_output/n100.r07.s029.trimmed.sorted.bam\" > \"n100.r07.s029_output/n100.r07.s029.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s029_output/n100.r07.s029.reference.fas\" --call-indels \"n100.r07.s029_output/n100.r07.s029.trimmed.sorted.bam\" > \"n100.r07.s029_output/n100.r07.s029.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s029_output/n100.r07.s029.trimmed.sorted.bam\" > \"n100.r07.s029_output/n100.r07.s029.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s029_output/n100.r07.s029.depth.txt\" \"n100.r07.s029_output/n100.r07.s029.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s029_output/n100.r07.s029.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s029_output/n100.r07.s029.reference.fas\" | bcftools consensus -m \"n100.r07.s029_output/n100.r07.s029.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s029_output/n100.r07.s029.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s029_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s029_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s029_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task db4186ab (flow 9e638bb7): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s007_output\"\n        wget -O \"n100.r07.s007_output/n100.r07.s007.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s007_output/n100.r07.s007.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s007_output/n100.r07.s007.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s007_output/n100.r07.s007.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s007_output/n100.r07.s007.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s007_output/n100.r07.s007.reference.fas\" \"n100.r07.s007_output/n100.r07.s007.fq1.fastq\" \"n100.r07.s007_output/n100.r07.s007.fq2.fastq\" | samtools view -bS - > \"n100.r07.s007_output/n100.r07.s007.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s007_output/n100.r07.s007.untrimmed.sorted.bam\" \"n100.r07.s007_output/n100.r07.s007.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s007_output/n100.r07.s007.untrimmed.sorted.bam\" -b \"n100.r07.s007_output/n100.r07.s007.primers.bed\" -p \"n100.r07.s007_output/n100.r07.s007.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s007_output/n100.r07.s007.trimmed.sorted.bam\" \"n100.r07.s007_output/n100.r07.s007.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s007_output/n100.r07.s007.reference.fas\" \"n100.r07.s007_output/n100.r07.s007.trimmed.sorted.bam\" > \"n100.r07.s007_output/n100.r07.s007.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s007_output/n100.r07.s007.reference.fas\" --call-indels \"n100.r07.s007_output/n100.r07.s007.trimmed.sorted.bam\" > \"n100.r07.s007_output/n100.r07.s007.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s007_output/n100.r07.s007.trimmed.sorted.bam\" > \"n100.r07.s007_output/n100.r07.s007.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s007_output/n100.r07.s007.depth.txt\" \"n100.r07.s007_output/n100.r07.s007.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s007_output/n100.r07.s007.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s007_output/n100.r07.s007.reference.fas\" | bcftools consensus -m \"n100.r07.s007_output/n100.r07.s007.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s007_output/n100.r07.s007.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s007_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s007_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s007_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 334f3996 (flow a9afc8a9): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s065_output\"\n        wget -O \"n100.r07.s065_output/n100.r07.s065.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s065_output/n100.r07.s065.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s065_output/n100.r07.s065.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s065_output/n100.r07.s065.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s065_output/n100.r07.s065.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s065_output/n100.r07.s065.reference.fas\" \"n100.r07.s065_output/n100.r07.s065.fq1.fastq\" \"n100.r07.s065_output/n100.r07.s065.fq2.fastq\" | samtools view -bS - > \"n100.r07.s065_output/n100.r07.s065.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s065_output/n100.r07.s065.untrimmed.sorted.bam\" \"n100.r07.s065_output/n100.r07.s065.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s065_output/n100.r07.s065.untrimmed.sorted.bam\" -b \"n100.r07.s065_output/n100.r07.s065.primers.bed\" -p \"n100.r07.s065_output/n100.r07.s065.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s065_output/n100.r07.s065.trimmed.sorted.bam\" \"n100.r07.s065_output/n100.r07.s065.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s065_output/n100.r07.s065.reference.fas\" \"n100.r07.s065_output/n100.r07.s065.trimmed.sorted.bam\" > \"n100.r07.s065_output/n100.r07.s065.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s065_output/n100.r07.s065.reference.fas\" --call-indels \"n100.r07.s065_output/n100.r07.s065.trimmed.sorted.bam\" > \"n100.r07.s065_output/n100.r07.s065.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s065_output/n100.r07.s065.trimmed.sorted.bam\" > \"n100.r07.s065_output/n100.r07.s065.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s065_output/n100.r07.s065.depth.txt\" \"n100.r07.s065_output/n100.r07.s065.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s065_output/n100.r07.s065.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s065_output/n100.r07.s065.reference.fas\" | bcftools consensus -m \"n100.r07.s065_output/n100.r07.s065.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s065_output/n100.r07.s065.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s065_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s065_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s065_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 20f4384f (flow 6fbc481f): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s019_output\"\n        wget -O \"n100.r07.s019_output/n100.r07.s019.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s019_output/n100.r07.s019.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s019_output/n100.r07.s019.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s019_output/n100.r07.s019.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s019_output/n100.r07.s019.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s019_output/n100.r07.s019.reference.fas\" \"n100.r07.s019_output/n100.r07.s019.fq1.fastq\" \"n100.r07.s019_output/n100.r07.s019.fq2.fastq\" | samtools view -bS - > \"n100.r07.s019_output/n100.r07.s019.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s019_output/n100.r07.s019.untrimmed.sorted.bam\" \"n100.r07.s019_output/n100.r07.s019.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s019_output/n100.r07.s019.untrimmed.sorted.bam\" -b \"n100.r07.s019_output/n100.r07.s019.primers.bed\" -p \"n100.r07.s019_output/n100.r07.s019.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s019_output/n100.r07.s019.trimmed.sorted.bam\" \"n100.r07.s019_output/n100.r07.s019.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s019_output/n100.r07.s019.reference.fas\" \"n100.r07.s019_output/n100.r07.s019.trimmed.sorted.bam\" > \"n100.r07.s019_output/n100.r07.s019.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s019_output/n100.r07.s019.reference.fas\" --call-indels \"n100.r07.s019_output/n100.r07.s019.trimmed.sorted.bam\" > \"n100.r07.s019_output/n100.r07.s019.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s019_output/n100.r07.s019.trimmed.sorted.bam\" > \"n100.r07.s019_output/n100.r07.s019.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s019_output/n100.r07.s019.depth.txt\" \"n100.r07.s019_output/n100.r07.s019.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s019_output/n100.r07.s019.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s019_output/n100.r07.s019.reference.fas\" | bcftools consensus -m \"n100.r07.s019_output/n100.r07.s019.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s019_output/n100.r07.s019.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s019_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s019_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s019_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task c0a2e047 (flow 281a5421): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s010_output\"\n        wget -O \"n100.r07.s010_output/n100.r07.s010.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s010_output/n100.r07.s010.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s010_output/n100.r07.s010.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s010_output/n100.r07.s010.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s010_output/n100.r07.s010.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s010_output/n100.r07.s010.reference.fas\" \"n100.r07.s010_output/n100.r07.s010.fq1.fastq\" \"n100.r07.s010_output/n100.r07.s010.fq2.fastq\" | samtools view -bS - > \"n100.r07.s010_output/n100.r07.s010.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s010_output/n100.r07.s010.untrimmed.sorted.bam\" \"n100.r07.s010_output/n100.r07.s010.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s010_output/n100.r07.s010.untrimmed.sorted.bam\" -b \"n100.r07.s010_output/n100.r07.s010.primers.bed\" -p \"n100.r07.s010_output/n100.r07.s010.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s010_output/n100.r07.s010.trimmed.sorted.bam\" \"n100.r07.s010_output/n100.r07.s010.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s010_output/n100.r07.s010.reference.fas\" \"n100.r07.s010_output/n100.r07.s010.trimmed.sorted.bam\" > \"n100.r07.s010_output/n100.r07.s010.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s010_output/n100.r07.s010.reference.fas\" --call-indels \"n100.r07.s010_output/n100.r07.s010.trimmed.sorted.bam\" > \"n100.r07.s010_output/n100.r07.s010.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s010_output/n100.r07.s010.trimmed.sorted.bam\" > \"n100.r07.s010_output/n100.r07.s010.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s010_output/n100.r07.s010.depth.txt\" \"n100.r07.s010_output/n100.r07.s010.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s010_output/n100.r07.s010.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s010_output/n100.r07.s010.reference.fas\" | bcftools consensus -m \"n100.r07.s010_output/n100.r07.s010.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s010_output/n100.r07.s010.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s010_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s010_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s010_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 3d94ce3a (flow 60c3d9b3): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s039_output\"\n        wget -O \"n100.r07.s039_output/n100.r07.s039.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s039_output/n100.r07.s039.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s039_output/n100.r07.s039.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s039_output/n100.r07.s039.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s039_output/n100.r07.s039.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s039_output/n100.r07.s039.reference.fas\" \"n100.r07.s039_output/n100.r07.s039.fq1.fastq\" \"n100.r07.s039_output/n100.r07.s039.fq2.fastq\" | samtools view -bS - > \"n100.r07.s039_output/n100.r07.s039.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s039_output/n100.r07.s039.untrimmed.sorted.bam\" \"n100.r07.s039_output/n100.r07.s039.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s039_output/n100.r07.s039.untrimmed.sorted.bam\" -b \"n100.r07.s039_output/n100.r07.s039.primers.bed\" -p \"n100.r07.s039_output/n100.r07.s039.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s039_output/n100.r07.s039.trimmed.sorted.bam\" \"n100.r07.s039_output/n100.r07.s039.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s039_output/n100.r07.s039.reference.fas\" \"n100.r07.s039_output/n100.r07.s039.trimmed.sorted.bam\" > \"n100.r07.s039_output/n100.r07.s039.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s039_output/n100.r07.s039.reference.fas\" --call-indels \"n100.r07.s039_output/n100.r07.s039.trimmed.sorted.bam\" > \"n100.r07.s039_output/n100.r07.s039.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s039_output/n100.r07.s039.trimmed.sorted.bam\" > \"n100.r07.s039_output/n100.r07.s039.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s039_output/n100.r07.s039.depth.txt\" \"n100.r07.s039_output/n100.r07.s039.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s039_output/n100.r07.s039.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s039_output/n100.r07.s039.reference.fas\" | bcftools consensus -m \"n100.r07.s039_output/n100.r07.s039.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s039_output/n100.r07.s039.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s039_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s039_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s039_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 1d2e33c5 (flow e07d1478): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s035_output\"\n        wget -O \"n100.r07.s035_output/n100.r07.s035.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s035_output/n100.r07.s035.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s035_output/n100.r07.s035.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s035_output/n100.r07.s035.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s035_output/n100.r07.s035.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s035_output/n100.r07.s035.reference.fas\" \"n100.r07.s035_output/n100.r07.s035.fq1.fastq\" \"n100.r07.s035_output/n100.r07.s035.fq2.fastq\" | samtools view -bS - > \"n100.r07.s035_output/n100.r07.s035.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s035_output/n100.r07.s035.untrimmed.sorted.bam\" \"n100.r07.s035_output/n100.r07.s035.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s035_output/n100.r07.s035.untrimmed.sorted.bam\" -b \"n100.r07.s035_output/n100.r07.s035.primers.bed\" -p \"n100.r07.s035_output/n100.r07.s035.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s035_output/n100.r07.s035.trimmed.sorted.bam\" \"n100.r07.s035_output/n100.r07.s035.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s035_output/n100.r07.s035.reference.fas\" \"n100.r07.s035_output/n100.r07.s035.trimmed.sorted.bam\" > \"n100.r07.s035_output/n100.r07.s035.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s035_output/n100.r07.s035.reference.fas\" --call-indels \"n100.r07.s035_output/n100.r07.s035.trimmed.sorted.bam\" > \"n100.r07.s035_output/n100.r07.s035.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s035_output/n100.r07.s035.trimmed.sorted.bam\" > \"n100.r07.s035_output/n100.r07.s035.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s035_output/n100.r07.s035.depth.txt\" \"n100.r07.s035_output/n100.r07.s035.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s035_output/n100.r07.s035.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s035_output/n100.r07.s035.reference.fas\" | bcftools consensus -m \"n100.r07.s035_output/n100.r07.s035.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s035_output/n100.r07.s035.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s035_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s035_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s035_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 4cf5300c (flow 9257a616): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s050_output\"\n        wget -O \"n100.r07.s050_output/n100.r07.s050.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s050_output/n100.r07.s050.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s050_output/n100.r07.s050.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s050_output/n100.r07.s050.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s050_output/n100.r07.s050.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s050_output/n100.r07.s050.reference.fas\" \"n100.r07.s050_output/n100.r07.s050.fq1.fastq\" \"n100.r07.s050_output/n100.r07.s050.fq2.fastq\" | samtools view -bS - > \"n100.r07.s050_output/n100.r07.s050.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s050_output/n100.r07.s050.untrimmed.sorted.bam\" \"n100.r07.s050_output/n100.r07.s050.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s050_output/n100.r07.s050.untrimmed.sorted.bam\" -b \"n100.r07.s050_output/n100.r07.s050.primers.bed\" -p \"n100.r07.s050_output/n100.r07.s050.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s050_output/n100.r07.s050.trimmed.sorted.bam\" \"n100.r07.s050_output/n100.r07.s050.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s050_output/n100.r07.s050.reference.fas\" \"n100.r07.s050_output/n100.r07.s050.trimmed.sorted.bam\" > \"n100.r07.s050_output/n100.r07.s050.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s050_output/n100.r07.s050.reference.fas\" --call-indels \"n100.r07.s050_output/n100.r07.s050.trimmed.sorted.bam\" > \"n100.r07.s050_output/n100.r07.s050.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s050_output/n100.r07.s050.trimmed.sorted.bam\" > \"n100.r07.s050_output/n100.r07.s050.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s050_output/n100.r07.s050.depth.txt\" \"n100.r07.s050_output/n100.r07.s050.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s050_output/n100.r07.s050.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s050_output/n100.r07.s050.reference.fas\" | bcftools consensus -m \"n100.r07.s050_output/n100.r07.s050.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s050_output/n100.r07.s050.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s050_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s050_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s050_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task b41c06f5 (flow 602e5744): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s021_output\"\n        wget -O \"n100.r07.s021_output/n100.r07.s021.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s021_output/n100.r07.s021.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s021_output/n100.r07.s021.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s021_output/n100.r07.s021.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s021_output/n100.r07.s021.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s021_output/n100.r07.s021.reference.fas\" \"n100.r07.s021_output/n100.r07.s021.fq1.fastq\" \"n100.r07.s021_output/n100.r07.s021.fq2.fastq\" | samtools view -bS - > \"n100.r07.s021_output/n100.r07.s021.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s021_output/n100.r07.s021.untrimmed.sorted.bam\" \"n100.r07.s021_output/n100.r07.s021.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s021_output/n100.r07.s021.untrimmed.sorted.bam\" -b \"n100.r07.s021_output/n100.r07.s021.primers.bed\" -p \"n100.r07.s021_output/n100.r07.s021.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s021_output/n100.r07.s021.trimmed.sorted.bam\" \"n100.r07.s021_output/n100.r07.s021.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s021_output/n100.r07.s021.reference.fas\" \"n100.r07.s021_output/n100.r07.s021.trimmed.sorted.bam\" > \"n100.r07.s021_output/n100.r07.s021.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s021_output/n100.r07.s021.reference.fas\" --call-indels \"n100.r07.s021_output/n100.r07.s021.trimmed.sorted.bam\" > \"n100.r07.s021_output/n100.r07.s021.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s021_output/n100.r07.s021.trimmed.sorted.bam\" > \"n100.r07.s021_output/n100.r07.s021.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s021_output/n100.r07.s021.depth.txt\" \"n100.r07.s021_output/n100.r07.s021.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s021_output/n100.r07.s021.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s021_output/n100.r07.s021.reference.fas\" | bcftools consensus -m \"n100.r07.s021_output/n100.r07.s021.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s021_output/n100.r07.s021.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s021_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s021_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s021_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 8168a241 (flow 761ac0e3): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s085_output\"\n        wget -O \"n100.r07.s085_output/n100.r07.s085.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s085_output/n100.r07.s085.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s085_output/n100.r07.s085.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s085_output/n100.r07.s085.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s085_output/n100.r07.s085.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s085_output/n100.r07.s085.reference.fas\" \"n100.r07.s085_output/n100.r07.s085.fq1.fastq\" \"n100.r07.s085_output/n100.r07.s085.fq2.fastq\" | samtools view -bS - > \"n100.r07.s085_output/n100.r07.s085.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s085_output/n100.r07.s085.untrimmed.sorted.bam\" \"n100.r07.s085_output/n100.r07.s085.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s085_output/n100.r07.s085.untrimmed.sorted.bam\" -b \"n100.r07.s085_output/n100.r07.s085.primers.bed\" -p \"n100.r07.s085_output/n100.r07.s085.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s085_output/n100.r07.s085.trimmed.sorted.bam\" \"n100.r07.s085_output/n100.r07.s085.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s085_output/n100.r07.s085.reference.fas\" \"n100.r07.s085_output/n100.r07.s085.trimmed.sorted.bam\" > \"n100.r07.s085_output/n100.r07.s085.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s085_output/n100.r07.s085.reference.fas\" --call-indels \"n100.r07.s085_output/n100.r07.s085.trimmed.sorted.bam\" > \"n100.r07.s085_output/n100.r07.s085.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s085_output/n100.r07.s085.trimmed.sorted.bam\" > \"n100.r07.s085_output/n100.r07.s085.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s085_output/n100.r07.s085.depth.txt\" \"n100.r07.s085_output/n100.r07.s085.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s085_output/n100.r07.s085.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s085_output/n100.r07.s085.reference.fas\" | bcftools consensus -m \"n100.r07.s085_output/n100.r07.s085.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s085_output/n100.r07.s085.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s085_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s085_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s085_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 60169fd2 (flow cd6e30ef): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s027_output\"\n        wget -O \"n100.r07.s027_output/n100.r07.s027.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s027_output/n100.r07.s027.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s027_output/n100.r07.s027.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s027_output/n100.r07.s027.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s027_output/n100.r07.s027.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s027_output/n100.r07.s027.reference.fas\" \"n100.r07.s027_output/n100.r07.s027.fq1.fastq\" \"n100.r07.s027_output/n100.r07.s027.fq2.fastq\" | samtools view -bS - > \"n100.r07.s027_output/n100.r07.s027.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s027_output/n100.r07.s027.untrimmed.sorted.bam\" \"n100.r07.s027_output/n100.r07.s027.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s027_output/n100.r07.s027.untrimmed.sorted.bam\" -b \"n100.r07.s027_output/n100.r07.s027.primers.bed\" -p \"n100.r07.s027_output/n100.r07.s027.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s027_output/n100.r07.s027.trimmed.sorted.bam\" \"n100.r07.s027_output/n100.r07.s027.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s027_output/n100.r07.s027.reference.fas\" \"n100.r07.s027_output/n100.r07.s027.trimmed.sorted.bam\" > \"n100.r07.s027_output/n100.r07.s027.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s027_output/n100.r07.s027.reference.fas\" --call-indels \"n100.r07.s027_output/n100.r07.s027.trimmed.sorted.bam\" > \"n100.r07.s027_output/n100.r07.s027.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s027_output/n100.r07.s027.trimmed.sorted.bam\" > \"n100.r07.s027_output/n100.r07.s027.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s027_output/n100.r07.s027.depth.txt\" \"n100.r07.s027_output/n100.r07.s027.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s027_output/n100.r07.s027.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s027_output/n100.r07.s027.reference.fas\" | bcftools consensus -m \"n100.r07.s027_output/n100.r07.s027.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s027_output/n100.r07.s027.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s027_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s027_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s027_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task fd193e05 (flow e299776e): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s013_output\"\n        wget -O \"n100.r07.s013_output/n100.r07.s013.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s013_output/n100.r07.s013.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s013_output/n100.r07.s013.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s013_output/n100.r07.s013.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s013_output/n100.r07.s013.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s013_output/n100.r07.s013.reference.fas\" \"n100.r07.s013_output/n100.r07.s013.fq1.fastq\" \"n100.r07.s013_output/n100.r07.s013.fq2.fastq\" | samtools view -bS - > \"n100.r07.s013_output/n100.r07.s013.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s013_output/n100.r07.s013.untrimmed.sorted.bam\" \"n100.r07.s013_output/n100.r07.s013.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s013_output/n100.r07.s013.untrimmed.sorted.bam\" -b \"n100.r07.s013_output/n100.r07.s013.primers.bed\" -p \"n100.r07.s013_output/n100.r07.s013.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s013_output/n100.r07.s013.trimmed.sorted.bam\" \"n100.r07.s013_output/n100.r07.s013.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s013_output/n100.r07.s013.reference.fas\" \"n100.r07.s013_output/n100.r07.s013.trimmed.sorted.bam\" > \"n100.r07.s013_output/n100.r07.s013.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s013_output/n100.r07.s013.reference.fas\" --call-indels \"n100.r07.s013_output/n100.r07.s013.trimmed.sorted.bam\" > \"n100.r07.s013_output/n100.r07.s013.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s013_output/n100.r07.s013.trimmed.sorted.bam\" > \"n100.r07.s013_output/n100.r07.s013.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s013_output/n100.r07.s013.depth.txt\" \"n100.r07.s013_output/n100.r07.s013.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s013_output/n100.r07.s013.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s013_output/n100.r07.s013.reference.fas\" | bcftools consensus -m \"n100.r07.s013_output/n100.r07.s013.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s013_output/n100.r07.s013.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s013_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s013_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s013_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task e2af4871 (flow 41a5e943): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s008_output\"\n        wget -O \"n100.r07.s008_output/n100.r07.s008.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s008_output/n100.r07.s008.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s008_output/n100.r07.s008.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s008_output/n100.r07.s008.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s008_output/n100.r07.s008.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s008_output/n100.r07.s008.reference.fas\" \"n100.r07.s008_output/n100.r07.s008.fq1.fastq\" \"n100.r07.s008_output/n100.r07.s008.fq2.fastq\" | samtools view -bS - > \"n100.r07.s008_output/n100.r07.s008.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s008_output/n100.r07.s008.untrimmed.sorted.bam\" \"n100.r07.s008_output/n100.r07.s008.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s008_output/n100.r07.s008.untrimmed.sorted.bam\" -b \"n100.r07.s008_output/n100.r07.s008.primers.bed\" -p \"n100.r07.s008_output/n100.r07.s008.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s008_output/n100.r07.s008.trimmed.sorted.bam\" \"n100.r07.s008_output/n100.r07.s008.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s008_output/n100.r07.s008.reference.fas\" \"n100.r07.s008_output/n100.r07.s008.trimmed.sorted.bam\" > \"n100.r07.s008_output/n100.r07.s008.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s008_output/n100.r07.s008.reference.fas\" --call-indels \"n100.r07.s008_output/n100.r07.s008.trimmed.sorted.bam\" > \"n100.r07.s008_output/n100.r07.s008.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s008_output/n100.r07.s008.trimmed.sorted.bam\" > \"n100.r07.s008_output/n100.r07.s008.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s008_output/n100.r07.s008.depth.txt\" \"n100.r07.s008_output/n100.r07.s008.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s008_output/n100.r07.s008.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s008_output/n100.r07.s008.reference.fas\" | bcftools consensus -m \"n100.r07.s008_output/n100.r07.s008.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s008_output/n100.r07.s008.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s008_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s008_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s008_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task af534387 (flow 90d93718): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s049_output\"\n        wget -O \"n100.r07.s049_output/n100.r07.s049.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s049_output/n100.r07.s049.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s049_output/n100.r07.s049.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s049_output/n100.r07.s049.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s049_output/n100.r07.s049.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s049_output/n100.r07.s049.reference.fas\" \"n100.r07.s049_output/n100.r07.s049.fq1.fastq\" \"n100.r07.s049_output/n100.r07.s049.fq2.fastq\" | samtools view -bS - > \"n100.r07.s049_output/n100.r07.s049.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s049_output/n100.r07.s049.untrimmed.sorted.bam\" \"n100.r07.s049_output/n100.r07.s049.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s049_output/n100.r07.s049.untrimmed.sorted.bam\" -b \"n100.r07.s049_output/n100.r07.s049.primers.bed\" -p \"n100.r07.s049_output/n100.r07.s049.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s049_output/n100.r07.s049.trimmed.sorted.bam\" \"n100.r07.s049_output/n100.r07.s049.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s049_output/n100.r07.s049.reference.fas\" \"n100.r07.s049_output/n100.r07.s049.trimmed.sorted.bam\" > \"n100.r07.s049_output/n100.r07.s049.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s049_output/n100.r07.s049.reference.fas\" --call-indels \"n100.r07.s049_output/n100.r07.s049.trimmed.sorted.bam\" > \"n100.r07.s049_output/n100.r07.s049.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s049_output/n100.r07.s049.trimmed.sorted.bam\" > \"n100.r07.s049_output/n100.r07.s049.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s049_output/n100.r07.s049.depth.txt\" \"n100.r07.s049_output/n100.r07.s049.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s049_output/n100.r07.s049.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s049_output/n100.r07.s049.reference.fas\" | bcftools consensus -m \"n100.r07.s049_output/n100.r07.s049.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s049_output/n100.r07.s049.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s049_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s049_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s049_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 2623b266 (flow 26192454): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s016_output\"\n        wget -O \"n100.r07.s016_output/n100.r07.s016.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s016_output/n100.r07.s016.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s016_output/n100.r07.s016.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s016_output/n100.r07.s016.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s016_output/n100.r07.s016.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s016_output/n100.r07.s016.reference.fas\" \"n100.r07.s016_output/n100.r07.s016.fq1.fastq\" \"n100.r07.s016_output/n100.r07.s016.fq2.fastq\" | samtools view -bS - > \"n100.r07.s016_output/n100.r07.s016.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s016_output/n100.r07.s016.untrimmed.sorted.bam\" \"n100.r07.s016_output/n100.r07.s016.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s016_output/n100.r07.s016.untrimmed.sorted.bam\" -b \"n100.r07.s016_output/n100.r07.s016.primers.bed\" -p \"n100.r07.s016_output/n100.r07.s016.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s016_output/n100.r07.s016.trimmed.sorted.bam\" \"n100.r07.s016_output/n100.r07.s016.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s016_output/n100.r07.s016.reference.fas\" \"n100.r07.s016_output/n100.r07.s016.trimmed.sorted.bam\" > \"n100.r07.s016_output/n100.r07.s016.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s016_output/n100.r07.s016.reference.fas\" --call-indels \"n100.r07.s016_output/n100.r07.s016.trimmed.sorted.bam\" > \"n100.r07.s016_output/n100.r07.s016.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s016_output/n100.r07.s016.trimmed.sorted.bam\" > \"n100.r07.s016_output/n100.r07.s016.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s016_output/n100.r07.s016.depth.txt\" \"n100.r07.s016_output/n100.r07.s016.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s016_output/n100.r07.s016.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s016_output/n100.r07.s016.reference.fas\" | bcftools consensus -m \"n100.r07.s016_output/n100.r07.s016.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s016_output/n100.r07.s016.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s016_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s016_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s016_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 300fd7a5 (flow b9812173): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s051_output\"\n        wget -O \"n100.r07.s051_output/n100.r07.s051.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s051_output/n100.r07.s051.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s051_output/n100.r07.s051.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s051_output/n100.r07.s051.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s051_output/n100.r07.s051.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s051_output/n100.r07.s051.reference.fas\" \"n100.r07.s051_output/n100.r07.s051.fq1.fastq\" \"n100.r07.s051_output/n100.r07.s051.fq2.fastq\" | samtools view -bS - > \"n100.r07.s051_output/n100.r07.s051.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s051_output/n100.r07.s051.untrimmed.sorted.bam\" \"n100.r07.s051_output/n100.r07.s051.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s051_output/n100.r07.s051.untrimmed.sorted.bam\" -b \"n100.r07.s051_output/n100.r07.s051.primers.bed\" -p \"n100.r07.s051_output/n100.r07.s051.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s051_output/n100.r07.s051.trimmed.sorted.bam\" \"n100.r07.s051_output/n100.r07.s051.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s051_output/n100.r07.s051.reference.fas\" \"n100.r07.s051_output/n100.r07.s051.trimmed.sorted.bam\" > \"n100.r07.s051_output/n100.r07.s051.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s051_output/n100.r07.s051.reference.fas\" --call-indels \"n100.r07.s051_output/n100.r07.s051.trimmed.sorted.bam\" > \"n100.r07.s051_output/n100.r07.s051.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s051_output/n100.r07.s051.trimmed.sorted.bam\" > \"n100.r07.s051_output/n100.r07.s051.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s051_output/n100.r07.s051.depth.txt\" \"n100.r07.s051_output/n100.r07.s051.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s051_output/n100.r07.s051.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s051_output/n100.r07.s051.reference.fas\" | bcftools consensus -m \"n100.r07.s051_output/n100.r07.s051.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s051_output/n100.r07.s051.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s051_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s051_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s051_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 31906a42 (flow 667619f5): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s053_output\"\n        wget -O \"n100.r07.s053_output/n100.r07.s053.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s053_output/n100.r07.s053.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s053_output/n100.r07.s053.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s053_output/n100.r07.s053.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s053_output/n100.r07.s053.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s053_output/n100.r07.s053.reference.fas\" \"n100.r07.s053_output/n100.r07.s053.fq1.fastq\" \"n100.r07.s053_output/n100.r07.s053.fq2.fastq\" | samtools view -bS - > \"n100.r07.s053_output/n100.r07.s053.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s053_output/n100.r07.s053.untrimmed.sorted.bam\" \"n100.r07.s053_output/n100.r07.s053.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s053_output/n100.r07.s053.untrimmed.sorted.bam\" -b \"n100.r07.s053_output/n100.r07.s053.primers.bed\" -p \"n100.r07.s053_output/n100.r07.s053.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s053_output/n100.r07.s053.trimmed.sorted.bam\" \"n100.r07.s053_output/n100.r07.s053.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s053_output/n100.r07.s053.reference.fas\" \"n100.r07.s053_output/n100.r07.s053.trimmed.sorted.bam\" > \"n100.r07.s053_output/n100.r07.s053.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s053_output/n100.r07.s053.reference.fas\" --call-indels \"n100.r07.s053_output/n100.r07.s053.trimmed.sorted.bam\" > \"n100.r07.s053_output/n100.r07.s053.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s053_output/n100.r07.s053.trimmed.sorted.bam\" > \"n100.r07.s053_output/n100.r07.s053.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s053_output/n100.r07.s053.depth.txt\" \"n100.r07.s053_output/n100.r07.s053.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s053_output/n100.r07.s053.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s053_output/n100.r07.s053.reference.fas\" | bcftools consensus -m \"n100.r07.s053_output/n100.r07.s053.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s053_output/n100.r07.s053.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s053_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s053_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s053_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task a3f46aee (flow 956ffc0d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s002_output\"\n        wget -O \"n100.r07.s002_output/n100.r07.s002.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s002_output/n100.r07.s002.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s002_output/n100.r07.s002.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s002_output/n100.r07.s002.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s002_output/n100.r07.s002.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s002_output/n100.r07.s002.reference.fas\" \"n100.r07.s002_output/n100.r07.s002.fq1.fastq\" \"n100.r07.s002_output/n100.r07.s002.fq2.fastq\" | samtools view -bS - > \"n100.r07.s002_output/n100.r07.s002.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s002_output/n100.r07.s002.untrimmed.sorted.bam\" \"n100.r07.s002_output/n100.r07.s002.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s002_output/n100.r07.s002.untrimmed.sorted.bam\" -b \"n100.r07.s002_output/n100.r07.s002.primers.bed\" -p \"n100.r07.s002_output/n100.r07.s002.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s002_output/n100.r07.s002.trimmed.sorted.bam\" \"n100.r07.s002_output/n100.r07.s002.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s002_output/n100.r07.s002.reference.fas\" \"n100.r07.s002_output/n100.r07.s002.trimmed.sorted.bam\" > \"n100.r07.s002_output/n100.r07.s002.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s002_output/n100.r07.s002.reference.fas\" --call-indels \"n100.r07.s002_output/n100.r07.s002.trimmed.sorted.bam\" > \"n100.r07.s002_output/n100.r07.s002.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s002_output/n100.r07.s002.trimmed.sorted.bam\" > \"n100.r07.s002_output/n100.r07.s002.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s002_output/n100.r07.s002.depth.txt\" \"n100.r07.s002_output/n100.r07.s002.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s002_output/n100.r07.s002.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s002_output/n100.r07.s002.reference.fas\" | bcftools consensus -m \"n100.r07.s002_output/n100.r07.s002.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s002_output/n100.r07.s002.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s002_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s002_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s002_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 004d43f9 (flow 51e59bfc): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s023_output\"\n        wget -O \"n100.r07.s023_output/n100.r07.s023.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s023_output/n100.r07.s023.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s023_output/n100.r07.s023.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s023_output/n100.r07.s023.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s023_output/n100.r07.s023.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s023_output/n100.r07.s023.reference.fas\" \"n100.r07.s023_output/n100.r07.s023.fq1.fastq\" \"n100.r07.s023_output/n100.r07.s023.fq2.fastq\" | samtools view -bS - > \"n100.r07.s023_output/n100.r07.s023.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s023_output/n100.r07.s023.untrimmed.sorted.bam\" \"n100.r07.s023_output/n100.r07.s023.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s023_output/n100.r07.s023.untrimmed.sorted.bam\" -b \"n100.r07.s023_output/n100.r07.s023.primers.bed\" -p \"n100.r07.s023_output/n100.r07.s023.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s023_output/n100.r07.s023.trimmed.sorted.bam\" \"n100.r07.s023_output/n100.r07.s023.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s023_output/n100.r07.s023.reference.fas\" \"n100.r07.s023_output/n100.r07.s023.trimmed.sorted.bam\" > \"n100.r07.s023_output/n100.r07.s023.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s023_output/n100.r07.s023.reference.fas\" --call-indels \"n100.r07.s023_output/n100.r07.s023.trimmed.sorted.bam\" > \"n100.r07.s023_output/n100.r07.s023.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s023_output/n100.r07.s023.trimmed.sorted.bam\" > \"n100.r07.s023_output/n100.r07.s023.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s023_output/n100.r07.s023.depth.txt\" \"n100.r07.s023_output/n100.r07.s023.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s023_output/n100.r07.s023.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s023_output/n100.r07.s023.reference.fas\" | bcftools consensus -m \"n100.r07.s023_output/n100.r07.s023.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s023_output/n100.r07.s023.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s023_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s023_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s023_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task e9711b6d (flow 4741c76b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s020_output\"\n        wget -O \"n100.r07.s020_output/n100.r07.s020.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s020_output/n100.r07.s020.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s020_output/n100.r07.s020.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s020_output/n100.r07.s020.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s020_output/n100.r07.s020.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s020_output/n100.r07.s020.reference.fas\" \"n100.r07.s020_output/n100.r07.s020.fq1.fastq\" \"n100.r07.s020_output/n100.r07.s020.fq2.fastq\" | samtools view -bS - > \"n100.r07.s020_output/n100.r07.s020.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s020_output/n100.r07.s020.untrimmed.sorted.bam\" \"n100.r07.s020_output/n100.r07.s020.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s020_output/n100.r07.s020.untrimmed.sorted.bam\" -b \"n100.r07.s020_output/n100.r07.s020.primers.bed\" -p \"n100.r07.s020_output/n100.r07.s020.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s020_output/n100.r07.s020.trimmed.sorted.bam\" \"n100.r07.s020_output/n100.r07.s020.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s020_output/n100.r07.s020.reference.fas\" \"n100.r07.s020_output/n100.r07.s020.trimmed.sorted.bam\" > \"n100.r07.s020_output/n100.r07.s020.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s020_output/n100.r07.s020.reference.fas\" --call-indels \"n100.r07.s020_output/n100.r07.s020.trimmed.sorted.bam\" > \"n100.r07.s020_output/n100.r07.s020.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s020_output/n100.r07.s020.trimmed.sorted.bam\" > \"n100.r07.s020_output/n100.r07.s020.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s020_output/n100.r07.s020.depth.txt\" \"n100.r07.s020_output/n100.r07.s020.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s020_output/n100.r07.s020.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s020_output/n100.r07.s020.reference.fas\" | bcftools consensus -m \"n100.r07.s020_output/n100.r07.s020.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s020_output/n100.r07.s020.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s020_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s020_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s020_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task bdc179fc (flow c7a8d3dc): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s070_output\"\n        wget -O \"n100.r07.s070_output/n100.r07.s070.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s070_output/n100.r07.s070.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s070_output/n100.r07.s070.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s070_output/n100.r07.s070.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s070_output/n100.r07.s070.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s070_output/n100.r07.s070.reference.fas\" \"n100.r07.s070_output/n100.r07.s070.fq1.fastq\" \"n100.r07.s070_output/n100.r07.s070.fq2.fastq\" | samtools view -bS - > \"n100.r07.s070_output/n100.r07.s070.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s070_output/n100.r07.s070.untrimmed.sorted.bam\" \"n100.r07.s070_output/n100.r07.s070.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s070_output/n100.r07.s070.untrimmed.sorted.bam\" -b \"n100.r07.s070_output/n100.r07.s070.primers.bed\" -p \"n100.r07.s070_output/n100.r07.s070.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s070_output/n100.r07.s070.trimmed.sorted.bam\" \"n100.r07.s070_output/n100.r07.s070.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s070_output/n100.r07.s070.reference.fas\" \"n100.r07.s070_output/n100.r07.s070.trimmed.sorted.bam\" > \"n100.r07.s070_output/n100.r07.s070.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s070_output/n100.r07.s070.reference.fas\" --call-indels \"n100.r07.s070_output/n100.r07.s070.trimmed.sorted.bam\" > \"n100.r07.s070_output/n100.r07.s070.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s070_output/n100.r07.s070.trimmed.sorted.bam\" > \"n100.r07.s070_output/n100.r07.s070.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s070_output/n100.r07.s070.depth.txt\" \"n100.r07.s070_output/n100.r07.s070.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s070_output/n100.r07.s070.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s070_output/n100.r07.s070.reference.fas\" | bcftools consensus -m \"n100.r07.s070_output/n100.r07.s070.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s070_output/n100.r07.s070.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s070_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s070_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s070_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 6c7d8d18 (flow 7d51370c): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s009_output\"\n        wget -O \"n100.r07.s009_output/n100.r07.s009.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s009_output/n100.r07.s009.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s009_output/n100.r07.s009.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s009_output/n100.r07.s009.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s009_output/n100.r07.s009.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s009_output/n100.r07.s009.reference.fas\" \"n100.r07.s009_output/n100.r07.s009.fq1.fastq\" \"n100.r07.s009_output/n100.r07.s009.fq2.fastq\" | samtools view -bS - > \"n100.r07.s009_output/n100.r07.s009.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s009_output/n100.r07.s009.untrimmed.sorted.bam\" \"n100.r07.s009_output/n100.r07.s009.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s009_output/n100.r07.s009.untrimmed.sorted.bam\" -b \"n100.r07.s009_output/n100.r07.s009.primers.bed\" -p \"n100.r07.s009_output/n100.r07.s009.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s009_output/n100.r07.s009.trimmed.sorted.bam\" \"n100.r07.s009_output/n100.r07.s009.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s009_output/n100.r07.s009.reference.fas\" \"n100.r07.s009_output/n100.r07.s009.trimmed.sorted.bam\" > \"n100.r07.s009_output/n100.r07.s009.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s009_output/n100.r07.s009.reference.fas\" --call-indels \"n100.r07.s009_output/n100.r07.s009.trimmed.sorted.bam\" > \"n100.r07.s009_output/n100.r07.s009.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s009_output/n100.r07.s009.trimmed.sorted.bam\" > \"n100.r07.s009_output/n100.r07.s009.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s009_output/n100.r07.s009.depth.txt\" \"n100.r07.s009_output/n100.r07.s009.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s009_output/n100.r07.s009.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s009_output/n100.r07.s009.reference.fas\" | bcftools consensus -m \"n100.r07.s009_output/n100.r07.s009.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s009_output/n100.r07.s009.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s009_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s009_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s009_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 852314b6 (flow d13a1791): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s032_output\"\n        wget -O \"n100.r07.s032_output/n100.r07.s032.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s032_output/n100.r07.s032.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s032_output/n100.r07.s032.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s032_output/n100.r07.s032.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s032_output/n100.r07.s032.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s032_output/n100.r07.s032.reference.fas\" \"n100.r07.s032_output/n100.r07.s032.fq1.fastq\" \"n100.r07.s032_output/n100.r07.s032.fq2.fastq\" | samtools view -bS - > \"n100.r07.s032_output/n100.r07.s032.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s032_output/n100.r07.s032.untrimmed.sorted.bam\" \"n100.r07.s032_output/n100.r07.s032.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s032_output/n100.r07.s032.untrimmed.sorted.bam\" -b \"n100.r07.s032_output/n100.r07.s032.primers.bed\" -p \"n100.r07.s032_output/n100.r07.s032.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s032_output/n100.r07.s032.trimmed.sorted.bam\" \"n100.r07.s032_output/n100.r07.s032.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s032_output/n100.r07.s032.reference.fas\" \"n100.r07.s032_output/n100.r07.s032.trimmed.sorted.bam\" > \"n100.r07.s032_output/n100.r07.s032.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s032_output/n100.r07.s032.reference.fas\" --call-indels \"n100.r07.s032_output/n100.r07.s032.trimmed.sorted.bam\" > \"n100.r07.s032_output/n100.r07.s032.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s032_output/n100.r07.s032.trimmed.sorted.bam\" > \"n100.r07.s032_output/n100.r07.s032.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s032_output/n100.r07.s032.depth.txt\" \"n100.r07.s032_output/n100.r07.s032.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s032_output/n100.r07.s032.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s032_output/n100.r07.s032.reference.fas\" | bcftools consensus -m \"n100.r07.s032_output/n100.r07.s032.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s032_output/n100.r07.s032.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s032_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s032_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s032_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task eebbb090 (flow 2cedb108): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s054_output\"\n        wget -O \"n100.r07.s054_output/n100.r07.s054.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s054_output/n100.r07.s054.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s054_output/n100.r07.s054.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s054_output/n100.r07.s054.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s054_output/n100.r07.s054.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s054_output/n100.r07.s054.reference.fas\" \"n100.r07.s054_output/n100.r07.s054.fq1.fastq\" \"n100.r07.s054_output/n100.r07.s054.fq2.fastq\" | samtools view -bS - > \"n100.r07.s054_output/n100.r07.s054.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s054_output/n100.r07.s054.untrimmed.sorted.bam\" \"n100.r07.s054_output/n100.r07.s054.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s054_output/n100.r07.s054.untrimmed.sorted.bam\" -b \"n100.r07.s054_output/n100.r07.s054.primers.bed\" -p \"n100.r07.s054_output/n100.r07.s054.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s054_output/n100.r07.s054.trimmed.sorted.bam\" \"n100.r07.s054_output/n100.r07.s054.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s054_output/n100.r07.s054.reference.fas\" \"n100.r07.s054_output/n100.r07.s054.trimmed.sorted.bam\" > \"n100.r07.s054_output/n100.r07.s054.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s054_output/n100.r07.s054.reference.fas\" --call-indels \"n100.r07.s054_output/n100.r07.s054.trimmed.sorted.bam\" > \"n100.r07.s054_output/n100.r07.s054.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s054_output/n100.r07.s054.trimmed.sorted.bam\" > \"n100.r07.s054_output/n100.r07.s054.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s054_output/n100.r07.s054.depth.txt\" \"n100.r07.s054_output/n100.r07.s054.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s054_output/n100.r07.s054.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s054_output/n100.r07.s054.reference.fas\" | bcftools consensus -m \"n100.r07.s054_output/n100.r07.s054.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s054_output/n100.r07.s054.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s054_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s054_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s054_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 30bfcda0 (flow 878d6e7b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s037_output\"\n        wget -O \"n100.r07.s037_output/n100.r07.s037.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s037_output/n100.r07.s037.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s037_output/n100.r07.s037.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s037_output/n100.r07.s037.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s037_output/n100.r07.s037.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s037_output/n100.r07.s037.reference.fas\" \"n100.r07.s037_output/n100.r07.s037.fq1.fastq\" \"n100.r07.s037_output/n100.r07.s037.fq2.fastq\" | samtools view -bS - > \"n100.r07.s037_output/n100.r07.s037.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s037_output/n100.r07.s037.untrimmed.sorted.bam\" \"n100.r07.s037_output/n100.r07.s037.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s037_output/n100.r07.s037.untrimmed.sorted.bam\" -b \"n100.r07.s037_output/n100.r07.s037.primers.bed\" -p \"n100.r07.s037_output/n100.r07.s037.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s037_output/n100.r07.s037.trimmed.sorted.bam\" \"n100.r07.s037_output/n100.r07.s037.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s037_output/n100.r07.s037.reference.fas\" \"n100.r07.s037_output/n100.r07.s037.trimmed.sorted.bam\" > \"n100.r07.s037_output/n100.r07.s037.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s037_output/n100.r07.s037.reference.fas\" --call-indels \"n100.r07.s037_output/n100.r07.s037.trimmed.sorted.bam\" > \"n100.r07.s037_output/n100.r07.s037.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s037_output/n100.r07.s037.trimmed.sorted.bam\" > \"n100.r07.s037_output/n100.r07.s037.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s037_output/n100.r07.s037.depth.txt\" \"n100.r07.s037_output/n100.r07.s037.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s037_output/n100.r07.s037.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s037_output/n100.r07.s037.reference.fas\" | bcftools consensus -m \"n100.r07.s037_output/n100.r07.s037.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s037_output/n100.r07.s037.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s037_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s037_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s037_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 5008561a (flow 3ac59401): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s096_output\"\n        wget -O \"n100.r07.s096_output/n100.r07.s096.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s096_output/n100.r07.s096.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s096_output/n100.r07.s096.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s096_output/n100.r07.s096.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s096_output/n100.r07.s096.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s096_output/n100.r07.s096.reference.fas\" \"n100.r07.s096_output/n100.r07.s096.fq1.fastq\" \"n100.r07.s096_output/n100.r07.s096.fq2.fastq\" | samtools view -bS - > \"n100.r07.s096_output/n100.r07.s096.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s096_output/n100.r07.s096.untrimmed.sorted.bam\" \"n100.r07.s096_output/n100.r07.s096.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s096_output/n100.r07.s096.untrimmed.sorted.bam\" -b \"n100.r07.s096_output/n100.r07.s096.primers.bed\" -p \"n100.r07.s096_output/n100.r07.s096.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s096_output/n100.r07.s096.trimmed.sorted.bam\" \"n100.r07.s096_output/n100.r07.s096.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s096_output/n100.r07.s096.reference.fas\" \"n100.r07.s096_output/n100.r07.s096.trimmed.sorted.bam\" > \"n100.r07.s096_output/n100.r07.s096.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s096_output/n100.r07.s096.reference.fas\" --call-indels \"n100.r07.s096_output/n100.r07.s096.trimmed.sorted.bam\" > \"n100.r07.s096_output/n100.r07.s096.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s096_output/n100.r07.s096.trimmed.sorted.bam\" > \"n100.r07.s096_output/n100.r07.s096.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s096_output/n100.r07.s096.depth.txt\" \"n100.r07.s096_output/n100.r07.s096.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s096_output/n100.r07.s096.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s096_output/n100.r07.s096.reference.fas\" | bcftools consensus -m \"n100.r07.s096_output/n100.r07.s096.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s096_output/n100.r07.s096.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s096_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s096_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s096_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task d01e6baf (flow 1bff83e3): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s025_output\"\n        wget -O \"n100.r07.s025_output/n100.r07.s025.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s025_output/n100.r07.s025.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s025_output/n100.r07.s025.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s025_output/n100.r07.s025.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s025_output/n100.r07.s025.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s025_output/n100.r07.s025.reference.fas\" \"n100.r07.s025_output/n100.r07.s025.fq1.fastq\" \"n100.r07.s025_output/n100.r07.s025.fq2.fastq\" | samtools view -bS - > \"n100.r07.s025_output/n100.r07.s025.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s025_output/n100.r07.s025.untrimmed.sorted.bam\" \"n100.r07.s025_output/n100.r07.s025.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s025_output/n100.r07.s025.untrimmed.sorted.bam\" -b \"n100.r07.s025_output/n100.r07.s025.primers.bed\" -p \"n100.r07.s025_output/n100.r07.s025.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s025_output/n100.r07.s025.trimmed.sorted.bam\" \"n100.r07.s025_output/n100.r07.s025.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s025_output/n100.r07.s025.reference.fas\" \"n100.r07.s025_output/n100.r07.s025.trimmed.sorted.bam\" > \"n100.r07.s025_output/n100.r07.s025.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s025_output/n100.r07.s025.reference.fas\" --call-indels \"n100.r07.s025_output/n100.r07.s025.trimmed.sorted.bam\" > \"n100.r07.s025_output/n100.r07.s025.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s025_output/n100.r07.s025.trimmed.sorted.bam\" > \"n100.r07.s025_output/n100.r07.s025.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s025_output/n100.r07.s025.depth.txt\" \"n100.r07.s025_output/n100.r07.s025.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s025_output/n100.r07.s025.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s025_output/n100.r07.s025.reference.fas\" | bcftools consensus -m \"n100.r07.s025_output/n100.r07.s025.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s025_output/n100.r07.s025.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s025_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s025_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s025_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 415ae885 (flow abb16dca): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s052_output\"\n        wget -O \"n100.r07.s052_output/n100.r07.s052.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s052_output/n100.r07.s052.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s052_output/n100.r07.s052.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s052_output/n100.r07.s052.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s052_output/n100.r07.s052.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s052_output/n100.r07.s052.reference.fas\" \"n100.r07.s052_output/n100.r07.s052.fq1.fastq\" \"n100.r07.s052_output/n100.r07.s052.fq2.fastq\" | samtools view -bS - > \"n100.r07.s052_output/n100.r07.s052.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s052_output/n100.r07.s052.untrimmed.sorted.bam\" \"n100.r07.s052_output/n100.r07.s052.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s052_output/n100.r07.s052.untrimmed.sorted.bam\" -b \"n100.r07.s052_output/n100.r07.s052.primers.bed\" -p \"n100.r07.s052_output/n100.r07.s052.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s052_output/n100.r07.s052.trimmed.sorted.bam\" \"n100.r07.s052_output/n100.r07.s052.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s052_output/n100.r07.s052.reference.fas\" \"n100.r07.s052_output/n100.r07.s052.trimmed.sorted.bam\" > \"n100.r07.s052_output/n100.r07.s052.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s052_output/n100.r07.s052.reference.fas\" --call-indels \"n100.r07.s052_output/n100.r07.s052.trimmed.sorted.bam\" > \"n100.r07.s052_output/n100.r07.s052.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s052_output/n100.r07.s052.trimmed.sorted.bam\" > \"n100.r07.s052_output/n100.r07.s052.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s052_output/n100.r07.s052.depth.txt\" \"n100.r07.s052_output/n100.r07.s052.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s052_output/n100.r07.s052.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s052_output/n100.r07.s052.reference.fas\" | bcftools consensus -m \"n100.r07.s052_output/n100.r07.s052.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s052_output/n100.r07.s052.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s052_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s052_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s052_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 4f4f4171 (flow 522bd866): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s083_output\"\n        wget -O \"n100.r07.s083_output/n100.r07.s083.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s083_output/n100.r07.s083.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s083_output/n100.r07.s083.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s083_output/n100.r07.s083.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s083_output/n100.r07.s083.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s083_output/n100.r07.s083.reference.fas\" \"n100.r07.s083_output/n100.r07.s083.fq1.fastq\" \"n100.r07.s083_output/n100.r07.s083.fq2.fastq\" | samtools view -bS - > \"n100.r07.s083_output/n100.r07.s083.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s083_output/n100.r07.s083.untrimmed.sorted.bam\" \"n100.r07.s083_output/n100.r07.s083.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s083_output/n100.r07.s083.untrimmed.sorted.bam\" -b \"n100.r07.s083_output/n100.r07.s083.primers.bed\" -p \"n100.r07.s083_output/n100.r07.s083.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s083_output/n100.r07.s083.trimmed.sorted.bam\" \"n100.r07.s083_output/n100.r07.s083.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s083_output/n100.r07.s083.reference.fas\" \"n100.r07.s083_output/n100.r07.s083.trimmed.sorted.bam\" > \"n100.r07.s083_output/n100.r07.s083.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s083_output/n100.r07.s083.reference.fas\" --call-indels \"n100.r07.s083_output/n100.r07.s083.trimmed.sorted.bam\" > \"n100.r07.s083_output/n100.r07.s083.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s083_output/n100.r07.s083.trimmed.sorted.bam\" > \"n100.r07.s083_output/n100.r07.s083.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s083_output/n100.r07.s083.depth.txt\" \"n100.r07.s083_output/n100.r07.s083.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s083_output/n100.r07.s083.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s083_output/n100.r07.s083.reference.fas\" | bcftools consensus -m \"n100.r07.s083_output/n100.r07.s083.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s083_output/n100.r07.s083.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s083_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s083_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s083_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 18faa772 (flow 4989a6de): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s018_output\"\n        wget -O \"n100.r07.s018_output/n100.r07.s018.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s018_output/n100.r07.s018.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s018_output/n100.r07.s018.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s018_output/n100.r07.s018.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s018_output/n100.r07.s018.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s018_output/n100.r07.s018.reference.fas\" \"n100.r07.s018_output/n100.r07.s018.fq1.fastq\" \"n100.r07.s018_output/n100.r07.s018.fq2.fastq\" | samtools view -bS - > \"n100.r07.s018_output/n100.r07.s018.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s018_output/n100.r07.s018.untrimmed.sorted.bam\" \"n100.r07.s018_output/n100.r07.s018.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s018_output/n100.r07.s018.untrimmed.sorted.bam\" -b \"n100.r07.s018_output/n100.r07.s018.primers.bed\" -p \"n100.r07.s018_output/n100.r07.s018.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s018_output/n100.r07.s018.trimmed.sorted.bam\" \"n100.r07.s018_output/n100.r07.s018.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s018_output/n100.r07.s018.reference.fas\" \"n100.r07.s018_output/n100.r07.s018.trimmed.sorted.bam\" > \"n100.r07.s018_output/n100.r07.s018.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s018_output/n100.r07.s018.reference.fas\" --call-indels \"n100.r07.s018_output/n100.r07.s018.trimmed.sorted.bam\" > \"n100.r07.s018_output/n100.r07.s018.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s018_output/n100.r07.s018.trimmed.sorted.bam\" > \"n100.r07.s018_output/n100.r07.s018.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s018_output/n100.r07.s018.depth.txt\" \"n100.r07.s018_output/n100.r07.s018.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s018_output/n100.r07.s018.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s018_output/n100.r07.s018.reference.fas\" | bcftools consensus -m \"n100.r07.s018_output/n100.r07.s018.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s018_output/n100.r07.s018.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s018_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s018_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s018_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task e7923c9a (flow 2a86d1d5): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s073_output\"\n        wget -O \"n100.r07.s073_output/n100.r07.s073.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s073_output/n100.r07.s073.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s073_output/n100.r07.s073.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s073_output/n100.r07.s073.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s073_output/n100.r07.s073.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s073_output/n100.r07.s073.reference.fas\" \"n100.r07.s073_output/n100.r07.s073.fq1.fastq\" \"n100.r07.s073_output/n100.r07.s073.fq2.fastq\" | samtools view -bS - > \"n100.r07.s073_output/n100.r07.s073.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s073_output/n100.r07.s073.untrimmed.sorted.bam\" \"n100.r07.s073_output/n100.r07.s073.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s073_output/n100.r07.s073.untrimmed.sorted.bam\" -b \"n100.r07.s073_output/n100.r07.s073.primers.bed\" -p \"n100.r07.s073_output/n100.r07.s073.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s073_output/n100.r07.s073.trimmed.sorted.bam\" \"n100.r07.s073_output/n100.r07.s073.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s073_output/n100.r07.s073.reference.fas\" \"n100.r07.s073_output/n100.r07.s073.trimmed.sorted.bam\" > \"n100.r07.s073_output/n100.r07.s073.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s073_output/n100.r07.s073.reference.fas\" --call-indels \"n100.r07.s073_output/n100.r07.s073.trimmed.sorted.bam\" > \"n100.r07.s073_output/n100.r07.s073.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s073_output/n100.r07.s073.trimmed.sorted.bam\" > \"n100.r07.s073_output/n100.r07.s073.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s073_output/n100.r07.s073.depth.txt\" \"n100.r07.s073_output/n100.r07.s073.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s073_output/n100.r07.s073.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s073_output/n100.r07.s073.reference.fas\" | bcftools consensus -m \"n100.r07.s073_output/n100.r07.s073.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s073_output/n100.r07.s073.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s073_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s073_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s073_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 3fa58d8b (flow 461bf7dc): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s014_output\"\n        wget -O \"n100.r07.s014_output/n100.r07.s014.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s014_output/n100.r07.s014.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s014_output/n100.r07.s014.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s014_output/n100.r07.s014.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s014_output/n100.r07.s014.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s014_output/n100.r07.s014.reference.fas\" \"n100.r07.s014_output/n100.r07.s014.fq1.fastq\" \"n100.r07.s014_output/n100.r07.s014.fq2.fastq\" | samtools view -bS - > \"n100.r07.s014_output/n100.r07.s014.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s014_output/n100.r07.s014.untrimmed.sorted.bam\" \"n100.r07.s014_output/n100.r07.s014.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s014_output/n100.r07.s014.untrimmed.sorted.bam\" -b \"n100.r07.s014_output/n100.r07.s014.primers.bed\" -p \"n100.r07.s014_output/n100.r07.s014.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s014_output/n100.r07.s014.trimmed.sorted.bam\" \"n100.r07.s014_output/n100.r07.s014.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s014_output/n100.r07.s014.reference.fas\" \"n100.r07.s014_output/n100.r07.s014.trimmed.sorted.bam\" > \"n100.r07.s014_output/n100.r07.s014.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s014_output/n100.r07.s014.reference.fas\" --call-indels \"n100.r07.s014_output/n100.r07.s014.trimmed.sorted.bam\" > \"n100.r07.s014_output/n100.r07.s014.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s014_output/n100.r07.s014.trimmed.sorted.bam\" > \"n100.r07.s014_output/n100.r07.s014.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s014_output/n100.r07.s014.depth.txt\" \"n100.r07.s014_output/n100.r07.s014.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s014_output/n100.r07.s014.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s014_output/n100.r07.s014.reference.fas\" | bcftools consensus -m \"n100.r07.s014_output/n100.r07.s014.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s014_output/n100.r07.s014.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s014_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s014_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s014_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task f1fdc12e (flow d483a765): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s095_output\"\n        wget -O \"n100.r07.s095_output/n100.r07.s095.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s095_output/n100.r07.s095.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s095_output/n100.r07.s095.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s095_output/n100.r07.s095.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s095_output/n100.r07.s095.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s095_output/n100.r07.s095.reference.fas\" \"n100.r07.s095_output/n100.r07.s095.fq1.fastq\" \"n100.r07.s095_output/n100.r07.s095.fq2.fastq\" | samtools view -bS - > \"n100.r07.s095_output/n100.r07.s095.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s095_output/n100.r07.s095.untrimmed.sorted.bam\" \"n100.r07.s095_output/n100.r07.s095.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s095_output/n100.r07.s095.untrimmed.sorted.bam\" -b \"n100.r07.s095_output/n100.r07.s095.primers.bed\" -p \"n100.r07.s095_output/n100.r07.s095.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s095_output/n100.r07.s095.trimmed.sorted.bam\" \"n100.r07.s095_output/n100.r07.s095.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s095_output/n100.r07.s095.reference.fas\" \"n100.r07.s095_output/n100.r07.s095.trimmed.sorted.bam\" > \"n100.r07.s095_output/n100.r07.s095.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s095_output/n100.r07.s095.reference.fas\" --call-indels \"n100.r07.s095_output/n100.r07.s095.trimmed.sorted.bam\" > \"n100.r07.s095_output/n100.r07.s095.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s095_output/n100.r07.s095.trimmed.sorted.bam\" > \"n100.r07.s095_output/n100.r07.s095.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s095_output/n100.r07.s095.depth.txt\" \"n100.r07.s095_output/n100.r07.s095.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s095_output/n100.r07.s095.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s095_output/n100.r07.s095.reference.fas\" | bcftools consensus -m \"n100.r07.s095_output/n100.r07.s095.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s095_output/n100.r07.s095.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s095_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s095_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s095_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task e89fdb62 (flow 85485140): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s026_output\"\n        wget -O \"n100.r07.s026_output/n100.r07.s026.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s026_output/n100.r07.s026.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s026_output/n100.r07.s026.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s026_output/n100.r07.s026.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s026_output/n100.r07.s026.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s026_output/n100.r07.s026.reference.fas\" \"n100.r07.s026_output/n100.r07.s026.fq1.fastq\" \"n100.r07.s026_output/n100.r07.s026.fq2.fastq\" | samtools view -bS - > \"n100.r07.s026_output/n100.r07.s026.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s026_output/n100.r07.s026.untrimmed.sorted.bam\" \"n100.r07.s026_output/n100.r07.s026.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s026_output/n100.r07.s026.untrimmed.sorted.bam\" -b \"n100.r07.s026_output/n100.r07.s026.primers.bed\" -p \"n100.r07.s026_output/n100.r07.s026.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s026_output/n100.r07.s026.trimmed.sorted.bam\" \"n100.r07.s026_output/n100.r07.s026.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s026_output/n100.r07.s026.reference.fas\" \"n100.r07.s026_output/n100.r07.s026.trimmed.sorted.bam\" > \"n100.r07.s026_output/n100.r07.s026.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s026_output/n100.r07.s026.reference.fas\" --call-indels \"n100.r07.s026_output/n100.r07.s026.trimmed.sorted.bam\" > \"n100.r07.s026_output/n100.r07.s026.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s026_output/n100.r07.s026.trimmed.sorted.bam\" > \"n100.r07.s026_output/n100.r07.s026.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s026_output/n100.r07.s026.depth.txt\" \"n100.r07.s026_output/n100.r07.s026.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s026_output/n100.r07.s026.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s026_output/n100.r07.s026.reference.fas\" | bcftools consensus -m \"n100.r07.s026_output/n100.r07.s026.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s026_output/n100.r07.s026.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s026_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s026_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s026_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task fb62fd75 (flow 91d65e11): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s074_output\"\n        wget -O \"n100.r07.s074_output/n100.r07.s074.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s074_output/n100.r07.s074.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s074_output/n100.r07.s074.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s074_output/n100.r07.s074.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s074_output/n100.r07.s074.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s074_output/n100.r07.s074.reference.fas\" \"n100.r07.s074_output/n100.r07.s074.fq1.fastq\" \"n100.r07.s074_output/n100.r07.s074.fq2.fastq\" | samtools view -bS - > \"n100.r07.s074_output/n100.r07.s074.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s074_output/n100.r07.s074.untrimmed.sorted.bam\" \"n100.r07.s074_output/n100.r07.s074.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s074_output/n100.r07.s074.untrimmed.sorted.bam\" -b \"n100.r07.s074_output/n100.r07.s074.primers.bed\" -p \"n100.r07.s074_output/n100.r07.s074.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s074_output/n100.r07.s074.trimmed.sorted.bam\" \"n100.r07.s074_output/n100.r07.s074.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s074_output/n100.r07.s074.reference.fas\" \"n100.r07.s074_output/n100.r07.s074.trimmed.sorted.bam\" > \"n100.r07.s074_output/n100.r07.s074.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s074_output/n100.r07.s074.reference.fas\" --call-indels \"n100.r07.s074_output/n100.r07.s074.trimmed.sorted.bam\" > \"n100.r07.s074_output/n100.r07.s074.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s074_output/n100.r07.s074.trimmed.sorted.bam\" > \"n100.r07.s074_output/n100.r07.s074.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s074_output/n100.r07.s074.depth.txt\" \"n100.r07.s074_output/n100.r07.s074.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s074_output/n100.r07.s074.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s074_output/n100.r07.s074.reference.fas\" | bcftools consensus -m \"n100.r07.s074_output/n100.r07.s074.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s074_output/n100.r07.s074.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s074_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s074_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s074_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 964686c2 (flow 1be4cbdf): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s077_output\"\n        wget -O \"n100.r07.s077_output/n100.r07.s077.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s077_output/n100.r07.s077.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s077_output/n100.r07.s077.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s077_output/n100.r07.s077.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s077_output/n100.r07.s077.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s077_output/n100.r07.s077.reference.fas\" \"n100.r07.s077_output/n100.r07.s077.fq1.fastq\" \"n100.r07.s077_output/n100.r07.s077.fq2.fastq\" | samtools view -bS - > \"n100.r07.s077_output/n100.r07.s077.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s077_output/n100.r07.s077.untrimmed.sorted.bam\" \"n100.r07.s077_output/n100.r07.s077.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s077_output/n100.r07.s077.untrimmed.sorted.bam\" -b \"n100.r07.s077_output/n100.r07.s077.primers.bed\" -p \"n100.r07.s077_output/n100.r07.s077.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s077_output/n100.r07.s077.trimmed.sorted.bam\" \"n100.r07.s077_output/n100.r07.s077.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s077_output/n100.r07.s077.reference.fas\" \"n100.r07.s077_output/n100.r07.s077.trimmed.sorted.bam\" > \"n100.r07.s077_output/n100.r07.s077.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s077_output/n100.r07.s077.reference.fas\" --call-indels \"n100.r07.s077_output/n100.r07.s077.trimmed.sorted.bam\" > \"n100.r07.s077_output/n100.r07.s077.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s077_output/n100.r07.s077.trimmed.sorted.bam\" > \"n100.r07.s077_output/n100.r07.s077.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s077_output/n100.r07.s077.depth.txt\" \"n100.r07.s077_output/n100.r07.s077.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s077_output/n100.r07.s077.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s077_output/n100.r07.s077.reference.fas\" | bcftools consensus -m \"n100.r07.s077_output/n100.r07.s077.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s077_output/n100.r07.s077.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s077_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s077_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s077_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 164261c5 (flow 441e1d42): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s082_output\"\n        wget -O \"n100.r07.s082_output/n100.r07.s082.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s082_output/n100.r07.s082.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s082_output/n100.r07.s082.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s082_output/n100.r07.s082.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s082_output/n100.r07.s082.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s082_output/n100.r07.s082.reference.fas\" \"n100.r07.s082_output/n100.r07.s082.fq1.fastq\" \"n100.r07.s082_output/n100.r07.s082.fq2.fastq\" | samtools view -bS - > \"n100.r07.s082_output/n100.r07.s082.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s082_output/n100.r07.s082.untrimmed.sorted.bam\" \"n100.r07.s082_output/n100.r07.s082.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s082_output/n100.r07.s082.untrimmed.sorted.bam\" -b \"n100.r07.s082_output/n100.r07.s082.primers.bed\" -p \"n100.r07.s082_output/n100.r07.s082.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s082_output/n100.r07.s082.trimmed.sorted.bam\" \"n100.r07.s082_output/n100.r07.s082.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s082_output/n100.r07.s082.reference.fas\" \"n100.r07.s082_output/n100.r07.s082.trimmed.sorted.bam\" > \"n100.r07.s082_output/n100.r07.s082.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s082_output/n100.r07.s082.reference.fas\" --call-indels \"n100.r07.s082_output/n100.r07.s082.trimmed.sorted.bam\" > \"n100.r07.s082_output/n100.r07.s082.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s082_output/n100.r07.s082.trimmed.sorted.bam\" > \"n100.r07.s082_output/n100.r07.s082.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s082_output/n100.r07.s082.depth.txt\" \"n100.r07.s082_output/n100.r07.s082.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s082_output/n100.r07.s082.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s082_output/n100.r07.s082.reference.fas\" | bcftools consensus -m \"n100.r07.s082_output/n100.r07.s082.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s082_output/n100.r07.s082.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s082_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s082_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s082_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 18db9c9a (flow edcaa27c): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s046_output\"\n        wget -O \"n100.r07.s046_output/n100.r07.s046.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s046_output/n100.r07.s046.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s046_output/n100.r07.s046.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s046_output/n100.r07.s046.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s046_output/n100.r07.s046.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s046_output/n100.r07.s046.reference.fas\" \"n100.r07.s046_output/n100.r07.s046.fq1.fastq\" \"n100.r07.s046_output/n100.r07.s046.fq2.fastq\" | samtools view -bS - > \"n100.r07.s046_output/n100.r07.s046.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s046_output/n100.r07.s046.untrimmed.sorted.bam\" \"n100.r07.s046_output/n100.r07.s046.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s046_output/n100.r07.s046.untrimmed.sorted.bam\" -b \"n100.r07.s046_output/n100.r07.s046.primers.bed\" -p \"n100.r07.s046_output/n100.r07.s046.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s046_output/n100.r07.s046.trimmed.sorted.bam\" \"n100.r07.s046_output/n100.r07.s046.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s046_output/n100.r07.s046.reference.fas\" \"n100.r07.s046_output/n100.r07.s046.trimmed.sorted.bam\" > \"n100.r07.s046_output/n100.r07.s046.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s046_output/n100.r07.s046.reference.fas\" --call-indels \"n100.r07.s046_output/n100.r07.s046.trimmed.sorted.bam\" > \"n100.r07.s046_output/n100.r07.s046.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s046_output/n100.r07.s046.trimmed.sorted.bam\" > \"n100.r07.s046_output/n100.r07.s046.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s046_output/n100.r07.s046.depth.txt\" \"n100.r07.s046_output/n100.r07.s046.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s046_output/n100.r07.s046.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s046_output/n100.r07.s046.reference.fas\" | bcftools consensus -m \"n100.r07.s046_output/n100.r07.s046.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s046_output/n100.r07.s046.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s046_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s046_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s046_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 88d23280 (flow bbce7a63): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s033_output\"\n        wget -O \"n100.r07.s033_output/n100.r07.s033.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s033_output/n100.r07.s033.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s033_output/n100.r07.s033.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s033_output/n100.r07.s033.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s033_output/n100.r07.s033.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s033_output/n100.r07.s033.reference.fas\" \"n100.r07.s033_output/n100.r07.s033.fq1.fastq\" \"n100.r07.s033_output/n100.r07.s033.fq2.fastq\" | samtools view -bS - > \"n100.r07.s033_output/n100.r07.s033.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s033_output/n100.r07.s033.untrimmed.sorted.bam\" \"n100.r07.s033_output/n100.r07.s033.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s033_output/n100.r07.s033.untrimmed.sorted.bam\" -b \"n100.r07.s033_output/n100.r07.s033.primers.bed\" -p \"n100.r07.s033_output/n100.r07.s033.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s033_output/n100.r07.s033.trimmed.sorted.bam\" \"n100.r07.s033_output/n100.r07.s033.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s033_output/n100.r07.s033.reference.fas\" \"n100.r07.s033_output/n100.r07.s033.trimmed.sorted.bam\" > \"n100.r07.s033_output/n100.r07.s033.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s033_output/n100.r07.s033.reference.fas\" --call-indels \"n100.r07.s033_output/n100.r07.s033.trimmed.sorted.bam\" > \"n100.r07.s033_output/n100.r07.s033.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s033_output/n100.r07.s033.trimmed.sorted.bam\" > \"n100.r07.s033_output/n100.r07.s033.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s033_output/n100.r07.s033.depth.txt\" \"n100.r07.s033_output/n100.r07.s033.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s033_output/n100.r07.s033.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s033_output/n100.r07.s033.reference.fas\" | bcftools consensus -m \"n100.r07.s033_output/n100.r07.s033.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s033_output/n100.r07.s033.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s033_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s033_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s033_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 36d6431d (flow 589a2296): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s036_output\"\n        wget -O \"n100.r07.s036_output/n100.r07.s036.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s036_output/n100.r07.s036.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s036_output/n100.r07.s036.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s036_output/n100.r07.s036.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s036_output/n100.r07.s036.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s036_output/n100.r07.s036.reference.fas\" \"n100.r07.s036_output/n100.r07.s036.fq1.fastq\" \"n100.r07.s036_output/n100.r07.s036.fq2.fastq\" | samtools view -bS - > \"n100.r07.s036_output/n100.r07.s036.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s036_output/n100.r07.s036.untrimmed.sorted.bam\" \"n100.r07.s036_output/n100.r07.s036.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s036_output/n100.r07.s036.untrimmed.sorted.bam\" -b \"n100.r07.s036_output/n100.r07.s036.primers.bed\" -p \"n100.r07.s036_output/n100.r07.s036.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s036_output/n100.r07.s036.trimmed.sorted.bam\" \"n100.r07.s036_output/n100.r07.s036.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s036_output/n100.r07.s036.reference.fas\" \"n100.r07.s036_output/n100.r07.s036.trimmed.sorted.bam\" > \"n100.r07.s036_output/n100.r07.s036.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s036_output/n100.r07.s036.reference.fas\" --call-indels \"n100.r07.s036_output/n100.r07.s036.trimmed.sorted.bam\" > \"n100.r07.s036_output/n100.r07.s036.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s036_output/n100.r07.s036.trimmed.sorted.bam\" > \"n100.r07.s036_output/n100.r07.s036.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s036_output/n100.r07.s036.depth.txt\" \"n100.r07.s036_output/n100.r07.s036.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s036_output/n100.r07.s036.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s036_output/n100.r07.s036.reference.fas\" | bcftools consensus -m \"n100.r07.s036_output/n100.r07.s036.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s036_output/n100.r07.s036.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s036_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s036_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s036_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task b5a99eab (flow dfc4a546): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s076_output\"\n        wget -O \"n100.r07.s076_output/n100.r07.s076.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s076_output/n100.r07.s076.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s076_output/n100.r07.s076.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s076_output/n100.r07.s076.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s076_output/n100.r07.s076.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s076_output/n100.r07.s076.reference.fas\" \"n100.r07.s076_output/n100.r07.s076.fq1.fastq\" \"n100.r07.s076_output/n100.r07.s076.fq2.fastq\" | samtools view -bS - > \"n100.r07.s076_output/n100.r07.s076.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s076_output/n100.r07.s076.untrimmed.sorted.bam\" \"n100.r07.s076_output/n100.r07.s076.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s076_output/n100.r07.s076.untrimmed.sorted.bam\" -b \"n100.r07.s076_output/n100.r07.s076.primers.bed\" -p \"n100.r07.s076_output/n100.r07.s076.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s076_output/n100.r07.s076.trimmed.sorted.bam\" \"n100.r07.s076_output/n100.r07.s076.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s076_output/n100.r07.s076.reference.fas\" \"n100.r07.s076_output/n100.r07.s076.trimmed.sorted.bam\" > \"n100.r07.s076_output/n100.r07.s076.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s076_output/n100.r07.s076.reference.fas\" --call-indels \"n100.r07.s076_output/n100.r07.s076.trimmed.sorted.bam\" > \"n100.r07.s076_output/n100.r07.s076.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s076_output/n100.r07.s076.trimmed.sorted.bam\" > \"n100.r07.s076_output/n100.r07.s076.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s076_output/n100.r07.s076.depth.txt\" \"n100.r07.s076_output/n100.r07.s076.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s076_output/n100.r07.s076.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s076_output/n100.r07.s076.reference.fas\" | bcftools consensus -m \"n100.r07.s076_output/n100.r07.s076.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s076_output/n100.r07.s076.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s076_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s076_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s076_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 094c83a9 (flow 0455dc2c): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s055_output\"\n        wget -O \"n100.r07.s055_output/n100.r07.s055.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s055_output/n100.r07.s055.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s055_output/n100.r07.s055.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s055_output/n100.r07.s055.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s055_output/n100.r07.s055.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s055_output/n100.r07.s055.reference.fas\" \"n100.r07.s055_output/n100.r07.s055.fq1.fastq\" \"n100.r07.s055_output/n100.r07.s055.fq2.fastq\" | samtools view -bS - > \"n100.r07.s055_output/n100.r07.s055.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s055_output/n100.r07.s055.untrimmed.sorted.bam\" \"n100.r07.s055_output/n100.r07.s055.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s055_output/n100.r07.s055.untrimmed.sorted.bam\" -b \"n100.r07.s055_output/n100.r07.s055.primers.bed\" -p \"n100.r07.s055_output/n100.r07.s055.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s055_output/n100.r07.s055.trimmed.sorted.bam\" \"n100.r07.s055_output/n100.r07.s055.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s055_output/n100.r07.s055.reference.fas\" \"n100.r07.s055_output/n100.r07.s055.trimmed.sorted.bam\" > \"n100.r07.s055_output/n100.r07.s055.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s055_output/n100.r07.s055.reference.fas\" --call-indels \"n100.r07.s055_output/n100.r07.s055.trimmed.sorted.bam\" > \"n100.r07.s055_output/n100.r07.s055.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s055_output/n100.r07.s055.trimmed.sorted.bam\" > \"n100.r07.s055_output/n100.r07.s055.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s055_output/n100.r07.s055.depth.txt\" \"n100.r07.s055_output/n100.r07.s055.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s055_output/n100.r07.s055.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s055_output/n100.r07.s055.reference.fas\" | bcftools consensus -m \"n100.r07.s055_output/n100.r07.s055.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s055_output/n100.r07.s055.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s055_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s055_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s055_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 51d530dd (flow 9adf3c04): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s081_output\"\n        wget -O \"n100.r07.s081_output/n100.r07.s081.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s081_output/n100.r07.s081.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s081_output/n100.r07.s081.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s081_output/n100.r07.s081.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s081_output/n100.r07.s081.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s081_output/n100.r07.s081.reference.fas\" \"n100.r07.s081_output/n100.r07.s081.fq1.fastq\" \"n100.r07.s081_output/n100.r07.s081.fq2.fastq\" | samtools view -bS - > \"n100.r07.s081_output/n100.r07.s081.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s081_output/n100.r07.s081.untrimmed.sorted.bam\" \"n100.r07.s081_output/n100.r07.s081.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s081_output/n100.r07.s081.untrimmed.sorted.bam\" -b \"n100.r07.s081_output/n100.r07.s081.primers.bed\" -p \"n100.r07.s081_output/n100.r07.s081.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s081_output/n100.r07.s081.trimmed.sorted.bam\" \"n100.r07.s081_output/n100.r07.s081.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s081_output/n100.r07.s081.reference.fas\" \"n100.r07.s081_output/n100.r07.s081.trimmed.sorted.bam\" > \"n100.r07.s081_output/n100.r07.s081.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s081_output/n100.r07.s081.reference.fas\" --call-indels \"n100.r07.s081_output/n100.r07.s081.trimmed.sorted.bam\" > \"n100.r07.s081_output/n100.r07.s081.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s081_output/n100.r07.s081.trimmed.sorted.bam\" > \"n100.r07.s081_output/n100.r07.s081.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s081_output/n100.r07.s081.depth.txt\" \"n100.r07.s081_output/n100.r07.s081.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s081_output/n100.r07.s081.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s081_output/n100.r07.s081.reference.fas\" | bcftools consensus -m \"n100.r07.s081_output/n100.r07.s081.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s081_output/n100.r07.s081.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s081_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s081_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s081_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 77caf1b8 (flow 4855c020): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s005_output\"\n        wget -O \"n100.r07.s005_output/n100.r07.s005.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s005_output/n100.r07.s005.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s005_output/n100.r07.s005.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s005_output/n100.r07.s005.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s005_output/n100.r07.s005.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s005_output/n100.r07.s005.reference.fas\" \"n100.r07.s005_output/n100.r07.s005.fq1.fastq\" \"n100.r07.s005_output/n100.r07.s005.fq2.fastq\" | samtools view -bS - > \"n100.r07.s005_output/n100.r07.s005.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s005_output/n100.r07.s005.untrimmed.sorted.bam\" \"n100.r07.s005_output/n100.r07.s005.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s005_output/n100.r07.s005.untrimmed.sorted.bam\" -b \"n100.r07.s005_output/n100.r07.s005.primers.bed\" -p \"n100.r07.s005_output/n100.r07.s005.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s005_output/n100.r07.s005.trimmed.sorted.bam\" \"n100.r07.s005_output/n100.r07.s005.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s005_output/n100.r07.s005.reference.fas\" \"n100.r07.s005_output/n100.r07.s005.trimmed.sorted.bam\" > \"n100.r07.s005_output/n100.r07.s005.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s005_output/n100.r07.s005.reference.fas\" --call-indels \"n100.r07.s005_output/n100.r07.s005.trimmed.sorted.bam\" > \"n100.r07.s005_output/n100.r07.s005.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s005_output/n100.r07.s005.trimmed.sorted.bam\" > \"n100.r07.s005_output/n100.r07.s005.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s005_output/n100.r07.s005.depth.txt\" \"n100.r07.s005_output/n100.r07.s005.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s005_output/n100.r07.s005.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s005_output/n100.r07.s005.reference.fas\" | bcftools consensus -m \"n100.r07.s005_output/n100.r07.s005.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s005_output/n100.r07.s005.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s005_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s005_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s005_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 590eb55e (flow bdb75ce9): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s079_output\"\n        wget -O \"n100.r07.s079_output/n100.r07.s079.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s079_output/n100.r07.s079.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s079_output/n100.r07.s079.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s079_output/n100.r07.s079.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s079_output/n100.r07.s079.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s079_output/n100.r07.s079.reference.fas\" \"n100.r07.s079_output/n100.r07.s079.fq1.fastq\" \"n100.r07.s079_output/n100.r07.s079.fq2.fastq\" | samtools view -bS - > \"n100.r07.s079_output/n100.r07.s079.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s079_output/n100.r07.s079.untrimmed.sorted.bam\" \"n100.r07.s079_output/n100.r07.s079.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s079_output/n100.r07.s079.untrimmed.sorted.bam\" -b \"n100.r07.s079_output/n100.r07.s079.primers.bed\" -p \"n100.r07.s079_output/n100.r07.s079.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s079_output/n100.r07.s079.trimmed.sorted.bam\" \"n100.r07.s079_output/n100.r07.s079.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s079_output/n100.r07.s079.reference.fas\" \"n100.r07.s079_output/n100.r07.s079.trimmed.sorted.bam\" > \"n100.r07.s079_output/n100.r07.s079.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s079_output/n100.r07.s079.reference.fas\" --call-indels \"n100.r07.s079_output/n100.r07.s079.trimmed.sorted.bam\" > \"n100.r07.s079_output/n100.r07.s079.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s079_output/n100.r07.s079.trimmed.sorted.bam\" > \"n100.r07.s079_output/n100.r07.s079.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s079_output/n100.r07.s079.depth.txt\" \"n100.r07.s079_output/n100.r07.s079.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s079_output/n100.r07.s079.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s079_output/n100.r07.s079.reference.fas\" | bcftools consensus -m \"n100.r07.s079_output/n100.r07.s079.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s079_output/n100.r07.s079.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s079_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s079_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s079_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task d038551e (flow 2ad2ef89): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s078_output\"\n        wget -O \"n100.r07.s078_output/n100.r07.s078.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s078_output/n100.r07.s078.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s078_output/n100.r07.s078.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s078_output/n100.r07.s078.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s078_output/n100.r07.s078.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s078_output/n100.r07.s078.reference.fas\" \"n100.r07.s078_output/n100.r07.s078.fq1.fastq\" \"n100.r07.s078_output/n100.r07.s078.fq2.fastq\" | samtools view -bS - > \"n100.r07.s078_output/n100.r07.s078.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s078_output/n100.r07.s078.untrimmed.sorted.bam\" \"n100.r07.s078_output/n100.r07.s078.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s078_output/n100.r07.s078.untrimmed.sorted.bam\" -b \"n100.r07.s078_output/n100.r07.s078.primers.bed\" -p \"n100.r07.s078_output/n100.r07.s078.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s078_output/n100.r07.s078.trimmed.sorted.bam\" \"n100.r07.s078_output/n100.r07.s078.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s078_output/n100.r07.s078.reference.fas\" \"n100.r07.s078_output/n100.r07.s078.trimmed.sorted.bam\" > \"n100.r07.s078_output/n100.r07.s078.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s078_output/n100.r07.s078.reference.fas\" --call-indels \"n100.r07.s078_output/n100.r07.s078.trimmed.sorted.bam\" > \"n100.r07.s078_output/n100.r07.s078.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s078_output/n100.r07.s078.trimmed.sorted.bam\" > \"n100.r07.s078_output/n100.r07.s078.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s078_output/n100.r07.s078.depth.txt\" \"n100.r07.s078_output/n100.r07.s078.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s078_output/n100.r07.s078.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s078_output/n100.r07.s078.reference.fas\" | bcftools consensus -m \"n100.r07.s078_output/n100.r07.s078.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s078_output/n100.r07.s078.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s078_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s078_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s078_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task ba13af1f (flow 91ed633a): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s063_output\"\n        wget -O \"n100.r07.s063_output/n100.r07.s063.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s063_output/n100.r07.s063.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s063_output/n100.r07.s063.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s063_output/n100.r07.s063.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s063_output/n100.r07.s063.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s063_output/n100.r07.s063.reference.fas\" \"n100.r07.s063_output/n100.r07.s063.fq1.fastq\" \"n100.r07.s063_output/n100.r07.s063.fq2.fastq\" | samtools view -bS - > \"n100.r07.s063_output/n100.r07.s063.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s063_output/n100.r07.s063.untrimmed.sorted.bam\" \"n100.r07.s063_output/n100.r07.s063.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s063_output/n100.r07.s063.untrimmed.sorted.bam\" -b \"n100.r07.s063_output/n100.r07.s063.primers.bed\" -p \"n100.r07.s063_output/n100.r07.s063.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s063_output/n100.r07.s063.trimmed.sorted.bam\" \"n100.r07.s063_output/n100.r07.s063.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s063_output/n100.r07.s063.reference.fas\" \"n100.r07.s063_output/n100.r07.s063.trimmed.sorted.bam\" > \"n100.r07.s063_output/n100.r07.s063.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s063_output/n100.r07.s063.reference.fas\" --call-indels \"n100.r07.s063_output/n100.r07.s063.trimmed.sorted.bam\" > \"n100.r07.s063_output/n100.r07.s063.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s063_output/n100.r07.s063.trimmed.sorted.bam\" > \"n100.r07.s063_output/n100.r07.s063.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s063_output/n100.r07.s063.depth.txt\" \"n100.r07.s063_output/n100.r07.s063.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s063_output/n100.r07.s063.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s063_output/n100.r07.s063.reference.fas\" | bcftools consensus -m \"n100.r07.s063_output/n100.r07.s063.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s063_output/n100.r07.s063.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s063_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s063_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s063_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 6f663194 (flow bb352724): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s071_output\"\n        wget -O \"n100.r07.s071_output/n100.r07.s071.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s071_output/n100.r07.s071.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s071_output/n100.r07.s071.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s071_output/n100.r07.s071.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s071_output/n100.r07.s071.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s071_output/n100.r07.s071.reference.fas\" \"n100.r07.s071_output/n100.r07.s071.fq1.fastq\" \"n100.r07.s071_output/n100.r07.s071.fq2.fastq\" | samtools view -bS - > \"n100.r07.s071_output/n100.r07.s071.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s071_output/n100.r07.s071.untrimmed.sorted.bam\" \"n100.r07.s071_output/n100.r07.s071.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s071_output/n100.r07.s071.untrimmed.sorted.bam\" -b \"n100.r07.s071_output/n100.r07.s071.primers.bed\" -p \"n100.r07.s071_output/n100.r07.s071.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s071_output/n100.r07.s071.trimmed.sorted.bam\" \"n100.r07.s071_output/n100.r07.s071.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s071_output/n100.r07.s071.reference.fas\" \"n100.r07.s071_output/n100.r07.s071.trimmed.sorted.bam\" > \"n100.r07.s071_output/n100.r07.s071.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s071_output/n100.r07.s071.reference.fas\" --call-indels \"n100.r07.s071_output/n100.r07.s071.trimmed.sorted.bam\" > \"n100.r07.s071_output/n100.r07.s071.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s071_output/n100.r07.s071.trimmed.sorted.bam\" > \"n100.r07.s071_output/n100.r07.s071.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s071_output/n100.r07.s071.depth.txt\" \"n100.r07.s071_output/n100.r07.s071.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s071_output/n100.r07.s071.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s071_output/n100.r07.s071.reference.fas\" | bcftools consensus -m \"n100.r07.s071_output/n100.r07.s071.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s071_output/n100.r07.s071.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s071_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s071_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s071_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task bcd979c9 (flow bb3f7b07): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s092_output\"\n        wget -O \"n100.r07.s092_output/n100.r07.s092.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s092_output/n100.r07.s092.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s092_output/n100.r07.s092.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s092_output/n100.r07.s092.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s092_output/n100.r07.s092.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s092_output/n100.r07.s092.reference.fas\" \"n100.r07.s092_output/n100.r07.s092.fq1.fastq\" \"n100.r07.s092_output/n100.r07.s092.fq2.fastq\" | samtools view -bS - > \"n100.r07.s092_output/n100.r07.s092.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s092_output/n100.r07.s092.untrimmed.sorted.bam\" \"n100.r07.s092_output/n100.r07.s092.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s092_output/n100.r07.s092.untrimmed.sorted.bam\" -b \"n100.r07.s092_output/n100.r07.s092.primers.bed\" -p \"n100.r07.s092_output/n100.r07.s092.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s092_output/n100.r07.s092.trimmed.sorted.bam\" \"n100.r07.s092_output/n100.r07.s092.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s092_output/n100.r07.s092.reference.fas\" \"n100.r07.s092_output/n100.r07.s092.trimmed.sorted.bam\" > \"n100.r07.s092_output/n100.r07.s092.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s092_output/n100.r07.s092.reference.fas\" --call-indels \"n100.r07.s092_output/n100.r07.s092.trimmed.sorted.bam\" > \"n100.r07.s092_output/n100.r07.s092.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s092_output/n100.r07.s092.trimmed.sorted.bam\" > \"n100.r07.s092_output/n100.r07.s092.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s092_output/n100.r07.s092.depth.txt\" \"n100.r07.s092_output/n100.r07.s092.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s092_output/n100.r07.s092.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s092_output/n100.r07.s092.reference.fas\" | bcftools consensus -m \"n100.r07.s092_output/n100.r07.s092.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s092_output/n100.r07.s092.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s092_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s092_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s092_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 777deb41 (flow a83135ea): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s089_output\"\n        wget -O \"n100.r07.s089_output/n100.r07.s089.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s089_output/n100.r07.s089.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s089_output/n100.r07.s089.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s089_output/n100.r07.s089.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s089_output/n100.r07.s089.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s089_output/n100.r07.s089.reference.fas\" \"n100.r07.s089_output/n100.r07.s089.fq1.fastq\" \"n100.r07.s089_output/n100.r07.s089.fq2.fastq\" | samtools view -bS - > \"n100.r07.s089_output/n100.r07.s089.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s089_output/n100.r07.s089.untrimmed.sorted.bam\" \"n100.r07.s089_output/n100.r07.s089.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s089_output/n100.r07.s089.untrimmed.sorted.bam\" -b \"n100.r07.s089_output/n100.r07.s089.primers.bed\" -p \"n100.r07.s089_output/n100.r07.s089.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s089_output/n100.r07.s089.trimmed.sorted.bam\" \"n100.r07.s089_output/n100.r07.s089.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s089_output/n100.r07.s089.reference.fas\" \"n100.r07.s089_output/n100.r07.s089.trimmed.sorted.bam\" > \"n100.r07.s089_output/n100.r07.s089.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s089_output/n100.r07.s089.reference.fas\" --call-indels \"n100.r07.s089_output/n100.r07.s089.trimmed.sorted.bam\" > \"n100.r07.s089_output/n100.r07.s089.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s089_output/n100.r07.s089.trimmed.sorted.bam\" > \"n100.r07.s089_output/n100.r07.s089.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s089_output/n100.r07.s089.depth.txt\" \"n100.r07.s089_output/n100.r07.s089.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s089_output/n100.r07.s089.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s089_output/n100.r07.s089.reference.fas\" | bcftools consensus -m \"n100.r07.s089_output/n100.r07.s089.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s089_output/n100.r07.s089.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s089_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s089_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s089_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task adc32aa7 (flow 3ba0729e): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s090_output\"\n        wget -O \"n100.r07.s090_output/n100.r07.s090.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s090_output/n100.r07.s090.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s090_output/n100.r07.s090.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s090_output/n100.r07.s090.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s090_output/n100.r07.s090.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s090_output/n100.r07.s090.reference.fas\" \"n100.r07.s090_output/n100.r07.s090.fq1.fastq\" \"n100.r07.s090_output/n100.r07.s090.fq2.fastq\" | samtools view -bS - > \"n100.r07.s090_output/n100.r07.s090.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s090_output/n100.r07.s090.untrimmed.sorted.bam\" \"n100.r07.s090_output/n100.r07.s090.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s090_output/n100.r07.s090.untrimmed.sorted.bam\" -b \"n100.r07.s090_output/n100.r07.s090.primers.bed\" -p \"n100.r07.s090_output/n100.r07.s090.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s090_output/n100.r07.s090.trimmed.sorted.bam\" \"n100.r07.s090_output/n100.r07.s090.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s090_output/n100.r07.s090.reference.fas\" \"n100.r07.s090_output/n100.r07.s090.trimmed.sorted.bam\" > \"n100.r07.s090_output/n100.r07.s090.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s090_output/n100.r07.s090.reference.fas\" --call-indels \"n100.r07.s090_output/n100.r07.s090.trimmed.sorted.bam\" > \"n100.r07.s090_output/n100.r07.s090.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s090_output/n100.r07.s090.trimmed.sorted.bam\" > \"n100.r07.s090_output/n100.r07.s090.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s090_output/n100.r07.s090.depth.txt\" \"n100.r07.s090_output/n100.r07.s090.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s090_output/n100.r07.s090.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s090_output/n100.r07.s090.reference.fas\" | bcftools consensus -m \"n100.r07.s090_output/n100.r07.s090.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s090_output/n100.r07.s090.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s090_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s090_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s090_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task d6a5ea9f (flow bc6da4cb): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s075_output\"\n        wget -O \"n100.r07.s075_output/n100.r07.s075.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s075_output/n100.r07.s075.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s075_output/n100.r07.s075.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s075_output/n100.r07.s075.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s075_output/n100.r07.s075.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s075_output/n100.r07.s075.reference.fas\" \"n100.r07.s075_output/n100.r07.s075.fq1.fastq\" \"n100.r07.s075_output/n100.r07.s075.fq2.fastq\" | samtools view -bS - > \"n100.r07.s075_output/n100.r07.s075.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s075_output/n100.r07.s075.untrimmed.sorted.bam\" \"n100.r07.s075_output/n100.r07.s075.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s075_output/n100.r07.s075.untrimmed.sorted.bam\" -b \"n100.r07.s075_output/n100.r07.s075.primers.bed\" -p \"n100.r07.s075_output/n100.r07.s075.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s075_output/n100.r07.s075.trimmed.sorted.bam\" \"n100.r07.s075_output/n100.r07.s075.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s075_output/n100.r07.s075.reference.fas\" \"n100.r07.s075_output/n100.r07.s075.trimmed.sorted.bam\" > \"n100.r07.s075_output/n100.r07.s075.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s075_output/n100.r07.s075.reference.fas\" --call-indels \"n100.r07.s075_output/n100.r07.s075.trimmed.sorted.bam\" > \"n100.r07.s075_output/n100.r07.s075.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s075_output/n100.r07.s075.trimmed.sorted.bam\" > \"n100.r07.s075_output/n100.r07.s075.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s075_output/n100.r07.s075.depth.txt\" \"n100.r07.s075_output/n100.r07.s075.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s075_output/n100.r07.s075.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s075_output/n100.r07.s075.reference.fas\" | bcftools consensus -m \"n100.r07.s075_output/n100.r07.s075.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s075_output/n100.r07.s075.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s075_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s075_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s075_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task c5654e5c (flow ef41d477): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s064_output\"\n        wget -O \"n100.r07.s064_output/n100.r07.s064.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s064_output/n100.r07.s064.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s064_output/n100.r07.s064.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s064_output/n100.r07.s064.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s064_output/n100.r07.s064.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s064_output/n100.r07.s064.reference.fas\" \"n100.r07.s064_output/n100.r07.s064.fq1.fastq\" \"n100.r07.s064_output/n100.r07.s064.fq2.fastq\" | samtools view -bS - > \"n100.r07.s064_output/n100.r07.s064.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s064_output/n100.r07.s064.untrimmed.sorted.bam\" \"n100.r07.s064_output/n100.r07.s064.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s064_output/n100.r07.s064.untrimmed.sorted.bam\" -b \"n100.r07.s064_output/n100.r07.s064.primers.bed\" -p \"n100.r07.s064_output/n100.r07.s064.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s064_output/n100.r07.s064.trimmed.sorted.bam\" \"n100.r07.s064_output/n100.r07.s064.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s064_output/n100.r07.s064.reference.fas\" \"n100.r07.s064_output/n100.r07.s064.trimmed.sorted.bam\" > \"n100.r07.s064_output/n100.r07.s064.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s064_output/n100.r07.s064.reference.fas\" --call-indels \"n100.r07.s064_output/n100.r07.s064.trimmed.sorted.bam\" > \"n100.r07.s064_output/n100.r07.s064.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s064_output/n100.r07.s064.trimmed.sorted.bam\" > \"n100.r07.s064_output/n100.r07.s064.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s064_output/n100.r07.s064.depth.txt\" \"n100.r07.s064_output/n100.r07.s064.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s064_output/n100.r07.s064.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s064_output/n100.r07.s064.reference.fas\" | bcftools consensus -m \"n100.r07.s064_output/n100.r07.s064.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s064_output/n100.r07.s064.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s064_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s064_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s064_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task a6a27466 (flow 1d245d3d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s100_output\"\n        wget -O \"n100.r07.s100_output/n100.r07.s100.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s100_output/n100.r07.s100.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s100_output/n100.r07.s100.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s100_output/n100.r07.s100.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s100_output/n100.r07.s100.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s100_output/n100.r07.s100.reference.fas\" \"n100.r07.s100_output/n100.r07.s100.fq1.fastq\" \"n100.r07.s100_output/n100.r07.s100.fq2.fastq\" | samtools view -bS - > \"n100.r07.s100_output/n100.r07.s100.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s100_output/n100.r07.s100.untrimmed.sorted.bam\" \"n100.r07.s100_output/n100.r07.s100.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s100_output/n100.r07.s100.untrimmed.sorted.bam\" -b \"n100.r07.s100_output/n100.r07.s100.primers.bed\" -p \"n100.r07.s100_output/n100.r07.s100.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s100_output/n100.r07.s100.trimmed.sorted.bam\" \"n100.r07.s100_output/n100.r07.s100.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s100_output/n100.r07.s100.reference.fas\" \"n100.r07.s100_output/n100.r07.s100.trimmed.sorted.bam\" > \"n100.r07.s100_output/n100.r07.s100.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s100_output/n100.r07.s100.reference.fas\" --call-indels \"n100.r07.s100_output/n100.r07.s100.trimmed.sorted.bam\" > \"n100.r07.s100_output/n100.r07.s100.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s100_output/n100.r07.s100.trimmed.sorted.bam\" > \"n100.r07.s100_output/n100.r07.s100.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s100_output/n100.r07.s100.depth.txt\" \"n100.r07.s100_output/n100.r07.s100.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s100_output/n100.r07.s100.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s100_output/n100.r07.s100.reference.fas\" | bcftools consensus -m \"n100.r07.s100_output/n100.r07.s100.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s100_output/n100.r07.s100.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s100_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s100_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s100_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task c129edfe (flow 9ee68a11): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s022_output\"\n        wget -O \"n100.r07.s022_output/n100.r07.s022.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s022_output/n100.r07.s022.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s022_output/n100.r07.s022.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s022_output/n100.r07.s022.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s022_output/n100.r07.s022.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s022_output/n100.r07.s022.reference.fas\" \"n100.r07.s022_output/n100.r07.s022.fq1.fastq\" \"n100.r07.s022_output/n100.r07.s022.fq2.fastq\" | samtools view -bS - > \"n100.r07.s022_output/n100.r07.s022.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s022_output/n100.r07.s022.untrimmed.sorted.bam\" \"n100.r07.s022_output/n100.r07.s022.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s022_output/n100.r07.s022.untrimmed.sorted.bam\" -b \"n100.r07.s022_output/n100.r07.s022.primers.bed\" -p \"n100.r07.s022_output/n100.r07.s022.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s022_output/n100.r07.s022.trimmed.sorted.bam\" \"n100.r07.s022_output/n100.r07.s022.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s022_output/n100.r07.s022.reference.fas\" \"n100.r07.s022_output/n100.r07.s022.trimmed.sorted.bam\" > \"n100.r07.s022_output/n100.r07.s022.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s022_output/n100.r07.s022.reference.fas\" --call-indels \"n100.r07.s022_output/n100.r07.s022.trimmed.sorted.bam\" > \"n100.r07.s022_output/n100.r07.s022.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s022_output/n100.r07.s022.trimmed.sorted.bam\" > \"n100.r07.s022_output/n100.r07.s022.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s022_output/n100.r07.s022.depth.txt\" \"n100.r07.s022_output/n100.r07.s022.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s022_output/n100.r07.s022.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s022_output/n100.r07.s022.reference.fas\" | bcftools consensus -m \"n100.r07.s022_output/n100.r07.s022.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s022_output/n100.r07.s022.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s022_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s022_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s022_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 151a9227 (flow b10d32be): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s098_output\"\n        wget -O \"n100.r07.s098_output/n100.r07.s098.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s098_output/n100.r07.s098.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s098_output/n100.r07.s098.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s098_output/n100.r07.s098.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s098_output/n100.r07.s098.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s098_output/n100.r07.s098.reference.fas\" \"n100.r07.s098_output/n100.r07.s098.fq1.fastq\" \"n100.r07.s098_output/n100.r07.s098.fq2.fastq\" | samtools view -bS - > \"n100.r07.s098_output/n100.r07.s098.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s098_output/n100.r07.s098.untrimmed.sorted.bam\" \"n100.r07.s098_output/n100.r07.s098.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s098_output/n100.r07.s098.untrimmed.sorted.bam\" -b \"n100.r07.s098_output/n100.r07.s098.primers.bed\" -p \"n100.r07.s098_output/n100.r07.s098.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s098_output/n100.r07.s098.trimmed.sorted.bam\" \"n100.r07.s098_output/n100.r07.s098.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s098_output/n100.r07.s098.reference.fas\" \"n100.r07.s098_output/n100.r07.s098.trimmed.sorted.bam\" > \"n100.r07.s098_output/n100.r07.s098.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s098_output/n100.r07.s098.reference.fas\" --call-indels \"n100.r07.s098_output/n100.r07.s098.trimmed.sorted.bam\" > \"n100.r07.s098_output/n100.r07.s098.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s098_output/n100.r07.s098.trimmed.sorted.bam\" > \"n100.r07.s098_output/n100.r07.s098.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s098_output/n100.r07.s098.depth.txt\" \"n100.r07.s098_output/n100.r07.s098.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s098_output/n100.r07.s098.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s098_output/n100.r07.s098.reference.fas\" | bcftools consensus -m \"n100.r07.s098_output/n100.r07.s098.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s098_output/n100.r07.s098.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s098_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s098_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s098_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 8465c67c (flow b2a24fdd): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s087_output\"\n        wget -O \"n100.r07.s087_output/n100.r07.s087.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s087_output/n100.r07.s087.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s087_output/n100.r07.s087.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s087_output/n100.r07.s087.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s087_output/n100.r07.s087.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s087_output/n100.r07.s087.reference.fas\" \"n100.r07.s087_output/n100.r07.s087.fq1.fastq\" \"n100.r07.s087_output/n100.r07.s087.fq2.fastq\" | samtools view -bS - > \"n100.r07.s087_output/n100.r07.s087.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s087_output/n100.r07.s087.untrimmed.sorted.bam\" \"n100.r07.s087_output/n100.r07.s087.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s087_output/n100.r07.s087.untrimmed.sorted.bam\" -b \"n100.r07.s087_output/n100.r07.s087.primers.bed\" -p \"n100.r07.s087_output/n100.r07.s087.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s087_output/n100.r07.s087.trimmed.sorted.bam\" \"n100.r07.s087_output/n100.r07.s087.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s087_output/n100.r07.s087.reference.fas\" \"n100.r07.s087_output/n100.r07.s087.trimmed.sorted.bam\" > \"n100.r07.s087_output/n100.r07.s087.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s087_output/n100.r07.s087.reference.fas\" --call-indels \"n100.r07.s087_output/n100.r07.s087.trimmed.sorted.bam\" > \"n100.r07.s087_output/n100.r07.s087.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s087_output/n100.r07.s087.trimmed.sorted.bam\" > \"n100.r07.s087_output/n100.r07.s087.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s087_output/n100.r07.s087.depth.txt\" \"n100.r07.s087_output/n100.r07.s087.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s087_output/n100.r07.s087.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s087_output/n100.r07.s087.reference.fas\" | bcftools consensus -m \"n100.r07.s087_output/n100.r07.s087.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s087_output/n100.r07.s087.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s087_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s087_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s087_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task cbb63d8b (flow 12c709ba): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s086_output\"\n        wget -O \"n100.r07.s086_output/n100.r07.s086.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s086_output/n100.r07.s086.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s086_output/n100.r07.s086.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s086_output/n100.r07.s086.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s086_output/n100.r07.s086.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s086_output/n100.r07.s086.reference.fas\" \"n100.r07.s086_output/n100.r07.s086.fq1.fastq\" \"n100.r07.s086_output/n100.r07.s086.fq2.fastq\" | samtools view -bS - > \"n100.r07.s086_output/n100.r07.s086.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s086_output/n100.r07.s086.untrimmed.sorted.bam\" \"n100.r07.s086_output/n100.r07.s086.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s086_output/n100.r07.s086.untrimmed.sorted.bam\" -b \"n100.r07.s086_output/n100.r07.s086.primers.bed\" -p \"n100.r07.s086_output/n100.r07.s086.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s086_output/n100.r07.s086.trimmed.sorted.bam\" \"n100.r07.s086_output/n100.r07.s086.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s086_output/n100.r07.s086.reference.fas\" \"n100.r07.s086_output/n100.r07.s086.trimmed.sorted.bam\" > \"n100.r07.s086_output/n100.r07.s086.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s086_output/n100.r07.s086.reference.fas\" --call-indels \"n100.r07.s086_output/n100.r07.s086.trimmed.sorted.bam\" > \"n100.r07.s086_output/n100.r07.s086.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s086_output/n100.r07.s086.trimmed.sorted.bam\" > \"n100.r07.s086_output/n100.r07.s086.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s086_output/n100.r07.s086.depth.txt\" \"n100.r07.s086_output/n100.r07.s086.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s086_output/n100.r07.s086.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s086_output/n100.r07.s086.reference.fas\" | bcftools consensus -m \"n100.r07.s086_output/n100.r07.s086.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s086_output/n100.r07.s086.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s086_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s086_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s086_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 2ba58d45 (flow 1463162b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s093_output\"\n        wget -O \"n100.r07.s093_output/n100.r07.s093.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s093_output/n100.r07.s093.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s093_output/n100.r07.s093.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s093_output/n100.r07.s093.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s093_output/n100.r07.s093.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s093_output/n100.r07.s093.reference.fas\" \"n100.r07.s093_output/n100.r07.s093.fq1.fastq\" \"n100.r07.s093_output/n100.r07.s093.fq2.fastq\" | samtools view -bS - > \"n100.r07.s093_output/n100.r07.s093.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s093_output/n100.r07.s093.untrimmed.sorted.bam\" \"n100.r07.s093_output/n100.r07.s093.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s093_output/n100.r07.s093.untrimmed.sorted.bam\" -b \"n100.r07.s093_output/n100.r07.s093.primers.bed\" -p \"n100.r07.s093_output/n100.r07.s093.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s093_output/n100.r07.s093.trimmed.sorted.bam\" \"n100.r07.s093_output/n100.r07.s093.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s093_output/n100.r07.s093.reference.fas\" \"n100.r07.s093_output/n100.r07.s093.trimmed.sorted.bam\" > \"n100.r07.s093_output/n100.r07.s093.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s093_output/n100.r07.s093.reference.fas\" --call-indels \"n100.r07.s093_output/n100.r07.s093.trimmed.sorted.bam\" > \"n100.r07.s093_output/n100.r07.s093.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s093_output/n100.r07.s093.trimmed.sorted.bam\" > \"n100.r07.s093_output/n100.r07.s093.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s093_output/n100.r07.s093.depth.txt\" \"n100.r07.s093_output/n100.r07.s093.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s093_output/n100.r07.s093.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s093_output/n100.r07.s093.reference.fas\" | bcftools consensus -m \"n100.r07.s093_output/n100.r07.s093.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s093_output/n100.r07.s093.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s093_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s093_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s093_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 1f5b8fb7 (flow 18bb98c1): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s099_output\"\n        wget -O \"n100.r07.s099_output/n100.r07.s099.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s099_output/n100.r07.s099.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s099_output/n100.r07.s099.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s099_output/n100.r07.s099.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s099_output/n100.r07.s099.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s099_output/n100.r07.s099.reference.fas\" \"n100.r07.s099_output/n100.r07.s099.fq1.fastq\" \"n100.r07.s099_output/n100.r07.s099.fq2.fastq\" | samtools view -bS - > \"n100.r07.s099_output/n100.r07.s099.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s099_output/n100.r07.s099.untrimmed.sorted.bam\" \"n100.r07.s099_output/n100.r07.s099.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s099_output/n100.r07.s099.untrimmed.sorted.bam\" -b \"n100.r07.s099_output/n100.r07.s099.primers.bed\" -p \"n100.r07.s099_output/n100.r07.s099.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s099_output/n100.r07.s099.trimmed.sorted.bam\" \"n100.r07.s099_output/n100.r07.s099.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s099_output/n100.r07.s099.reference.fas\" \"n100.r07.s099_output/n100.r07.s099.trimmed.sorted.bam\" > \"n100.r07.s099_output/n100.r07.s099.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s099_output/n100.r07.s099.reference.fas\" --call-indels \"n100.r07.s099_output/n100.r07.s099.trimmed.sorted.bam\" > \"n100.r07.s099_output/n100.r07.s099.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s099_output/n100.r07.s099.trimmed.sorted.bam\" > \"n100.r07.s099_output/n100.r07.s099.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s099_output/n100.r07.s099.depth.txt\" \"n100.r07.s099_output/n100.r07.s099.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s099_output/n100.r07.s099.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s099_output/n100.r07.s099.reference.fas\" | bcftools consensus -m \"n100.r07.s099_output/n100.r07.s099.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s099_output/n100.r07.s099.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s099_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s099_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s099_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 282e35f8 (flow 081e5dc5): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s094_output\"\n        wget -O \"n100.r07.s094_output/n100.r07.s094.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s094_output/n100.r07.s094.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s094_output/n100.r07.s094.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s094_output/n100.r07.s094.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s094_output/n100.r07.s094.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s094_output/n100.r07.s094.reference.fas\" \"n100.r07.s094_output/n100.r07.s094.fq1.fastq\" \"n100.r07.s094_output/n100.r07.s094.fq2.fastq\" | samtools view -bS - > \"n100.r07.s094_output/n100.r07.s094.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s094_output/n100.r07.s094.untrimmed.sorted.bam\" \"n100.r07.s094_output/n100.r07.s094.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s094_output/n100.r07.s094.untrimmed.sorted.bam\" -b \"n100.r07.s094_output/n100.r07.s094.primers.bed\" -p \"n100.r07.s094_output/n100.r07.s094.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s094_output/n100.r07.s094.trimmed.sorted.bam\" \"n100.r07.s094_output/n100.r07.s094.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s094_output/n100.r07.s094.reference.fas\" \"n100.r07.s094_output/n100.r07.s094.trimmed.sorted.bam\" > \"n100.r07.s094_output/n100.r07.s094.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s094_output/n100.r07.s094.reference.fas\" --call-indels \"n100.r07.s094_output/n100.r07.s094.trimmed.sorted.bam\" > \"n100.r07.s094_output/n100.r07.s094.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s094_output/n100.r07.s094.trimmed.sorted.bam\" > \"n100.r07.s094_output/n100.r07.s094.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s094_output/n100.r07.s094.depth.txt\" \"n100.r07.s094_output/n100.r07.s094.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s094_output/n100.r07.s094.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s094_output/n100.r07.s094.reference.fas\" | bcftools consensus -m \"n100.r07.s094_output/n100.r07.s094.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s094_output/n100.r07.s094.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s094_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s094_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s094_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task a1216deb (flow a6081c46): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s067_output\"\n        wget -O \"n100.r07.s067_output/n100.r07.s067.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s067_output/n100.r07.s067.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s067_output/n100.r07.s067.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s067_output/n100.r07.s067.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s067_output/n100.r07.s067.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s067_output/n100.r07.s067.reference.fas\" \"n100.r07.s067_output/n100.r07.s067.fq1.fastq\" \"n100.r07.s067_output/n100.r07.s067.fq2.fastq\" | samtools view -bS - > \"n100.r07.s067_output/n100.r07.s067.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s067_output/n100.r07.s067.untrimmed.sorted.bam\" \"n100.r07.s067_output/n100.r07.s067.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s067_output/n100.r07.s067.untrimmed.sorted.bam\" -b \"n100.r07.s067_output/n100.r07.s067.primers.bed\" -p \"n100.r07.s067_output/n100.r07.s067.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s067_output/n100.r07.s067.trimmed.sorted.bam\" \"n100.r07.s067_output/n100.r07.s067.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s067_output/n100.r07.s067.reference.fas\" \"n100.r07.s067_output/n100.r07.s067.trimmed.sorted.bam\" > \"n100.r07.s067_output/n100.r07.s067.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s067_output/n100.r07.s067.reference.fas\" --call-indels \"n100.r07.s067_output/n100.r07.s067.trimmed.sorted.bam\" > \"n100.r07.s067_output/n100.r07.s067.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s067_output/n100.r07.s067.trimmed.sorted.bam\" > \"n100.r07.s067_output/n100.r07.s067.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s067_output/n100.r07.s067.depth.txt\" \"n100.r07.s067_output/n100.r07.s067.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s067_output/n100.r07.s067.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s067_output/n100.r07.s067.reference.fas\" | bcftools consensus -m \"n100.r07.s067_output/n100.r07.s067.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s067_output/n100.r07.s067.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s067_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s067_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s067_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task aae9bef3 (flow 5c374ba7): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s091_output\"\n        wget -O \"n100.r07.s091_output/n100.r07.s091.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s091_output/n100.r07.s091.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s091_output/n100.r07.s091.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s091_output/n100.r07.s091.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s091_output/n100.r07.s091.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s091_output/n100.r07.s091.reference.fas\" \"n100.r07.s091_output/n100.r07.s091.fq1.fastq\" \"n100.r07.s091_output/n100.r07.s091.fq2.fastq\" | samtools view -bS - > \"n100.r07.s091_output/n100.r07.s091.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s091_output/n100.r07.s091.untrimmed.sorted.bam\" \"n100.r07.s091_output/n100.r07.s091.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s091_output/n100.r07.s091.untrimmed.sorted.bam\" -b \"n100.r07.s091_output/n100.r07.s091.primers.bed\" -p \"n100.r07.s091_output/n100.r07.s091.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s091_output/n100.r07.s091.trimmed.sorted.bam\" \"n100.r07.s091_output/n100.r07.s091.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s091_output/n100.r07.s091.reference.fas\" \"n100.r07.s091_output/n100.r07.s091.trimmed.sorted.bam\" > \"n100.r07.s091_output/n100.r07.s091.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s091_output/n100.r07.s091.reference.fas\" --call-indels \"n100.r07.s091_output/n100.r07.s091.trimmed.sorted.bam\" > \"n100.r07.s091_output/n100.r07.s091.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s091_output/n100.r07.s091.trimmed.sorted.bam\" > \"n100.r07.s091_output/n100.r07.s091.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s091_output/n100.r07.s091.depth.txt\" \"n100.r07.s091_output/n100.r07.s091.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s091_output/n100.r07.s091.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s091_output/n100.r07.s091.reference.fas\" | bcftools consensus -m \"n100.r07.s091_output/n100.r07.s091.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s091_output/n100.r07.s091.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s091_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s091_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s091_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task f992ad8d (flow b7fedadc): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s097_output\"\n        wget -O \"n100.r07.s097_output/n100.r07.s097.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s097_output/n100.r07.s097.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s097_output/n100.r07.s097.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s097_output/n100.r07.s097.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s097_output/n100.r07.s097.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s097_output/n100.r07.s097.reference.fas\" \"n100.r07.s097_output/n100.r07.s097.fq1.fastq\" \"n100.r07.s097_output/n100.r07.s097.fq2.fastq\" | samtools view -bS - > \"n100.r07.s097_output/n100.r07.s097.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s097_output/n100.r07.s097.untrimmed.sorted.bam\" \"n100.r07.s097_output/n100.r07.s097.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s097_output/n100.r07.s097.untrimmed.sorted.bam\" -b \"n100.r07.s097_output/n100.r07.s097.primers.bed\" -p \"n100.r07.s097_output/n100.r07.s097.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s097_output/n100.r07.s097.trimmed.sorted.bam\" \"n100.r07.s097_output/n100.r07.s097.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s097_output/n100.r07.s097.reference.fas\" \"n100.r07.s097_output/n100.r07.s097.trimmed.sorted.bam\" > \"n100.r07.s097_output/n100.r07.s097.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s097_output/n100.r07.s097.reference.fas\" --call-indels \"n100.r07.s097_output/n100.r07.s097.trimmed.sorted.bam\" > \"n100.r07.s097_output/n100.r07.s097.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s097_output/n100.r07.s097.trimmed.sorted.bam\" > \"n100.r07.s097_output/n100.r07.s097.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s097_output/n100.r07.s097.depth.txt\" \"n100.r07.s097_output/n100.r07.s097.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s097_output/n100.r07.s097.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s097_output/n100.r07.s097.reference.fas\" | bcftools consensus -m \"n100.r07.s097_output/n100.r07.s097.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s097_output/n100.r07.s097.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s097_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s097_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s097_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 3f55473f (flow 3d776298): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s084_output\"\n        wget -O \"n100.r07.s084_output/n100.r07.s084.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s084_output/n100.r07.s084.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s084_output/n100.r07.s084.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s084_output/n100.r07.s084.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s084_output/n100.r07.s084.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s084_output/n100.r07.s084.reference.fas\" \"n100.r07.s084_output/n100.r07.s084.fq1.fastq\" \"n100.r07.s084_output/n100.r07.s084.fq2.fastq\" | samtools view -bS - > \"n100.r07.s084_output/n100.r07.s084.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s084_output/n100.r07.s084.untrimmed.sorted.bam\" \"n100.r07.s084_output/n100.r07.s084.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s084_output/n100.r07.s084.untrimmed.sorted.bam\" -b \"n100.r07.s084_output/n100.r07.s084.primers.bed\" -p \"n100.r07.s084_output/n100.r07.s084.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s084_output/n100.r07.s084.trimmed.sorted.bam\" \"n100.r07.s084_output/n100.r07.s084.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s084_output/n100.r07.s084.reference.fas\" \"n100.r07.s084_output/n100.r07.s084.trimmed.sorted.bam\" > \"n100.r07.s084_output/n100.r07.s084.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s084_output/n100.r07.s084.reference.fas\" --call-indels \"n100.r07.s084_output/n100.r07.s084.trimmed.sorted.bam\" > \"n100.r07.s084_output/n100.r07.s084.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s084_output/n100.r07.s084.trimmed.sorted.bam\" > \"n100.r07.s084_output/n100.r07.s084.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s084_output/n100.r07.s084.depth.txt\" \"n100.r07.s084_output/n100.r07.s084.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s084_output/n100.r07.s084.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s084_output/n100.r07.s084.reference.fas\" | bcftools consensus -m \"n100.r07.s084_output/n100.r07.s084.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s084_output/n100.r07.s084.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s084_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s084_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s084_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 9299bf20 (flow db3942f3): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s056_output\"\n        wget -O \"n100.r07.s056_output/n100.r07.s056.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s056_output/n100.r07.s056.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s056_output/n100.r07.s056.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s056_output/n100.r07.s056.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s056_output/n100.r07.s056.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s056_output/n100.r07.s056.reference.fas\" \"n100.r07.s056_output/n100.r07.s056.fq1.fastq\" \"n100.r07.s056_output/n100.r07.s056.fq2.fastq\" | samtools view -bS - > \"n100.r07.s056_output/n100.r07.s056.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s056_output/n100.r07.s056.untrimmed.sorted.bam\" \"n100.r07.s056_output/n100.r07.s056.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s056_output/n100.r07.s056.untrimmed.sorted.bam\" -b \"n100.r07.s056_output/n100.r07.s056.primers.bed\" -p \"n100.r07.s056_output/n100.r07.s056.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s056_output/n100.r07.s056.trimmed.sorted.bam\" \"n100.r07.s056_output/n100.r07.s056.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s056_output/n100.r07.s056.reference.fas\" \"n100.r07.s056_output/n100.r07.s056.trimmed.sorted.bam\" > \"n100.r07.s056_output/n100.r07.s056.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s056_output/n100.r07.s056.reference.fas\" --call-indels \"n100.r07.s056_output/n100.r07.s056.trimmed.sorted.bam\" > \"n100.r07.s056_output/n100.r07.s056.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s056_output/n100.r07.s056.trimmed.sorted.bam\" > \"n100.r07.s056_output/n100.r07.s056.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s056_output/n100.r07.s056.depth.txt\" \"n100.r07.s056_output/n100.r07.s056.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s056_output/n100.r07.s056.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s056_output/n100.r07.s056.reference.fas\" | bcftools consensus -m \"n100.r07.s056_output/n100.r07.s056.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s056_output/n100.r07.s056.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s056_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s056_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s056_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task ee486401 (flow acaec2ed): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s058_output\"\n        wget -O \"n100.r07.s058_output/n100.r07.s058.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s058_output/n100.r07.s058.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s058_output/n100.r07.s058.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s058_output/n100.r07.s058.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s058_output/n100.r07.s058.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s058_output/n100.r07.s058.reference.fas\" \"n100.r07.s058_output/n100.r07.s058.fq1.fastq\" \"n100.r07.s058_output/n100.r07.s058.fq2.fastq\" | samtools view -bS - > \"n100.r07.s058_output/n100.r07.s058.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s058_output/n100.r07.s058.untrimmed.sorted.bam\" \"n100.r07.s058_output/n100.r07.s058.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s058_output/n100.r07.s058.untrimmed.sorted.bam\" -b \"n100.r07.s058_output/n100.r07.s058.primers.bed\" -p \"n100.r07.s058_output/n100.r07.s058.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s058_output/n100.r07.s058.trimmed.sorted.bam\" \"n100.r07.s058_output/n100.r07.s058.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s058_output/n100.r07.s058.reference.fas\" \"n100.r07.s058_output/n100.r07.s058.trimmed.sorted.bam\" > \"n100.r07.s058_output/n100.r07.s058.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s058_output/n100.r07.s058.reference.fas\" --call-indels \"n100.r07.s058_output/n100.r07.s058.trimmed.sorted.bam\" > \"n100.r07.s058_output/n100.r07.s058.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s058_output/n100.r07.s058.trimmed.sorted.bam\" > \"n100.r07.s058_output/n100.r07.s058.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s058_output/n100.r07.s058.depth.txt\" \"n100.r07.s058_output/n100.r07.s058.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s058_output/n100.r07.s058.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s058_output/n100.r07.s058.reference.fas\" | bcftools consensus -m \"n100.r07.s058_output/n100.r07.s058.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s058_output/n100.r07.s058.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s058_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s058_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s058_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 6b13fa0f (flow 7b3d1113): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s061_output\"\n        wget -O \"n100.r07.s061_output/n100.r07.s061.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s061_output/n100.r07.s061.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s061_output/n100.r07.s061.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s061_output/n100.r07.s061.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s061_output/n100.r07.s061.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s061_output/n100.r07.s061.reference.fas\" \"n100.r07.s061_output/n100.r07.s061.fq1.fastq\" \"n100.r07.s061_output/n100.r07.s061.fq2.fastq\" | samtools view -bS - > \"n100.r07.s061_output/n100.r07.s061.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s061_output/n100.r07.s061.untrimmed.sorted.bam\" \"n100.r07.s061_output/n100.r07.s061.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s061_output/n100.r07.s061.untrimmed.sorted.bam\" -b \"n100.r07.s061_output/n100.r07.s061.primers.bed\" -p \"n100.r07.s061_output/n100.r07.s061.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s061_output/n100.r07.s061.trimmed.sorted.bam\" \"n100.r07.s061_output/n100.r07.s061.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s061_output/n100.r07.s061.reference.fas\" \"n100.r07.s061_output/n100.r07.s061.trimmed.sorted.bam\" > \"n100.r07.s061_output/n100.r07.s061.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s061_output/n100.r07.s061.reference.fas\" --call-indels \"n100.r07.s061_output/n100.r07.s061.trimmed.sorted.bam\" > \"n100.r07.s061_output/n100.r07.s061.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s061_output/n100.r07.s061.trimmed.sorted.bam\" > \"n100.r07.s061_output/n100.r07.s061.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s061_output/n100.r07.s061.depth.txt\" \"n100.r07.s061_output/n100.r07.s061.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s061_output/n100.r07.s061.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s061_output/n100.r07.s061.reference.fas\" | bcftools consensus -m \"n100.r07.s061_output/n100.r07.s061.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s061_output/n100.r07.s061.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s061_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s061_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s061_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task f2bf54fd (flow d73b86a9): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s057_output\"\n        wget -O \"n100.r07.s057_output/n100.r07.s057.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s057_output/n100.r07.s057.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s057_output/n100.r07.s057.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s057_output/n100.r07.s057.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s057_output/n100.r07.s057.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s057_output/n100.r07.s057.reference.fas\" \"n100.r07.s057_output/n100.r07.s057.fq1.fastq\" \"n100.r07.s057_output/n100.r07.s057.fq2.fastq\" | samtools view -bS - > \"n100.r07.s057_output/n100.r07.s057.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s057_output/n100.r07.s057.untrimmed.sorted.bam\" \"n100.r07.s057_output/n100.r07.s057.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s057_output/n100.r07.s057.untrimmed.sorted.bam\" -b \"n100.r07.s057_output/n100.r07.s057.primers.bed\" -p \"n100.r07.s057_output/n100.r07.s057.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s057_output/n100.r07.s057.trimmed.sorted.bam\" \"n100.r07.s057_output/n100.r07.s057.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s057_output/n100.r07.s057.reference.fas\" \"n100.r07.s057_output/n100.r07.s057.trimmed.sorted.bam\" > \"n100.r07.s057_output/n100.r07.s057.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s057_output/n100.r07.s057.reference.fas\" --call-indels \"n100.r07.s057_output/n100.r07.s057.trimmed.sorted.bam\" > \"n100.r07.s057_output/n100.r07.s057.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s057_output/n100.r07.s057.trimmed.sorted.bam\" > \"n100.r07.s057_output/n100.r07.s057.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s057_output/n100.r07.s057.depth.txt\" \"n100.r07.s057_output/n100.r07.s057.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s057_output/n100.r07.s057.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s057_output/n100.r07.s057.reference.fas\" | bcftools consensus -m \"n100.r07.s057_output/n100.r07.s057.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s057_output/n100.r07.s057.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s057_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s057_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s057_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 1dc90817 (flow cb2c7a28): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s059_output\"\n        wget -O \"n100.r07.s059_output/n100.r07.s059.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s059_output/n100.r07.s059.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s059_output/n100.r07.s059.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s059_output/n100.r07.s059.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s059_output/n100.r07.s059.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s059_output/n100.r07.s059.reference.fas\" \"n100.r07.s059_output/n100.r07.s059.fq1.fastq\" \"n100.r07.s059_output/n100.r07.s059.fq2.fastq\" | samtools view -bS - > \"n100.r07.s059_output/n100.r07.s059.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s059_output/n100.r07.s059.untrimmed.sorted.bam\" \"n100.r07.s059_output/n100.r07.s059.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s059_output/n100.r07.s059.untrimmed.sorted.bam\" -b \"n100.r07.s059_output/n100.r07.s059.primers.bed\" -p \"n100.r07.s059_output/n100.r07.s059.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s059_output/n100.r07.s059.trimmed.sorted.bam\" \"n100.r07.s059_output/n100.r07.s059.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s059_output/n100.r07.s059.reference.fas\" \"n100.r07.s059_output/n100.r07.s059.trimmed.sorted.bam\" > \"n100.r07.s059_output/n100.r07.s059.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s059_output/n100.r07.s059.reference.fas\" --call-indels \"n100.r07.s059_output/n100.r07.s059.trimmed.sorted.bam\" > \"n100.r07.s059_output/n100.r07.s059.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s059_output/n100.r07.s059.trimmed.sorted.bam\" > \"n100.r07.s059_output/n100.r07.s059.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s059_output/n100.r07.s059.depth.txt\" \"n100.r07.s059_output/n100.r07.s059.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s059_output/n100.r07.s059.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s059_output/n100.r07.s059.reference.fas\" | bcftools consensus -m \"n100.r07.s059_output/n100.r07.s059.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s059_output/n100.r07.s059.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s059_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s059_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s059_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 6d0b8c8b (flow 8af16490): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s068_output\"\n        wget -O \"n100.r07.s068_output/n100.r07.s068.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s068_output/n100.r07.s068.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s068_output/n100.r07.s068.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s068_output/n100.r07.s068.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s068_output/n100.r07.s068.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s068_output/n100.r07.s068.reference.fas\" \"n100.r07.s068_output/n100.r07.s068.fq1.fastq\" \"n100.r07.s068_output/n100.r07.s068.fq2.fastq\" | samtools view -bS - > \"n100.r07.s068_output/n100.r07.s068.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s068_output/n100.r07.s068.untrimmed.sorted.bam\" \"n100.r07.s068_output/n100.r07.s068.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s068_output/n100.r07.s068.untrimmed.sorted.bam\" -b \"n100.r07.s068_output/n100.r07.s068.primers.bed\" -p \"n100.r07.s068_output/n100.r07.s068.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s068_output/n100.r07.s068.trimmed.sorted.bam\" \"n100.r07.s068_output/n100.r07.s068.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s068_output/n100.r07.s068.reference.fas\" \"n100.r07.s068_output/n100.r07.s068.trimmed.sorted.bam\" > \"n100.r07.s068_output/n100.r07.s068.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s068_output/n100.r07.s068.reference.fas\" --call-indels \"n100.r07.s068_output/n100.r07.s068.trimmed.sorted.bam\" > \"n100.r07.s068_output/n100.r07.s068.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s068_output/n100.r07.s068.trimmed.sorted.bam\" > \"n100.r07.s068_output/n100.r07.s068.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s068_output/n100.r07.s068.depth.txt\" \"n100.r07.s068_output/n100.r07.s068.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s068_output/n100.r07.s068.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s068_output/n100.r07.s068.reference.fas\" | bcftools consensus -m \"n100.r07.s068_output/n100.r07.s068.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s068_output/n100.r07.s068.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s068_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s068_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s068_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:03 scheduler task 349d60d9 (flow 61ea32de): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r07.s072_output\"\n        wget -O \"n100.r07.s072_output/n100.r07.s072.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r07.s072_output/n100.r07.s072.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r07.s072_output/n100.r07.s072.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r07.s072_output/n100.r07.s072.fq1.fastq\"\n        cp \"%s\" \"n100.r07.s072_output/n100.r07.s072.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r07.s072_output/n100.r07.s072.reference.fas\" \"n100.r07.s072_output/n100.r07.s072.fq1.fastq\" \"n100.r07.s072_output/n100.r07.s072.fq2.fastq\" | samtools view -bS - > \"n100.r07.s072_output/n100.r07.s072.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s072_output/n100.r07.s072.untrimmed.sorted.bam\" \"n100.r07.s072_output/n100.r07.s072.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r07.s072_output/n100.r07.s072.untrimmed.sorted.bam\" -b \"n100.r07.s072_output/n100.r07.s072.primers.bed\" -p \"n100.r07.s072_output/n100.r07.s072.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r07.s072_output/n100.r07.s072.trimmed.sorted.bam\" \"n100.r07.s072_output/n100.r07.s072.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r07.s072_output/n100.r07.s072.reference.fas\" \"n100.r07.s072_output/n100.r07.s072.trimmed.sorted.bam\" > \"n100.r07.s072_output/n100.r07.s072.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r07.s072_output/n100.r07.s072.reference.fas\" --call-indels \"n100.r07.s072_output/n100.r07.s072.trimmed.sorted.bam\" > \"n100.r07.s072_output/n100.r07.s072.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r07.s072_output/n100.r07.s072.trimmed.sorted.bam\" > \"n100.r07.s072_output/n100.r07.s072.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r07.s072_output/n100.r07.s072.depth.txt\" \"n100.r07.s072_output/n100.r07.s072.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r07.s072_output/n100.r07.s072.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r07.s072_output/n100.r07.s072.reference.fas\" | bcftools consensus -m \"n100.r07.s072_output/n100.r07.s072.low_depth.tsv\" tmp.vcf.gz > \"n100.r07.s072_output/n100.r07.s072.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r07.s072_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r07/n100.r07.s072_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r07/n100.r07.s072_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:13:50 scheduler task b79979ad (flow 627a1f3f): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 349d60d9 (flow 61ea32de): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 6d0b8c8b (flow 8af16490): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task b79979ad (flow 627a1f3f): loading (try 0): started
2021/07/08 17:13:50 scheduler task 6d0b8c8b (flow 8af16490): loading (try 0): started
2021/07/08 17:13:50 scheduler task 349d60d9 (flow 61ea32de): loading (try 0): started
2021/07/08 17:13:50 scheduler task 1dc90817 (flow cb2c7a28): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 349d60d9 (flow 61ea32de): loading val<.=s3://niema-test/n100/r07/n100.r07.s072_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task b79979ad (flow 627a1f3f): loading val<.=s3://niema-test/n100/r07/n100.r07.s001_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task f2bf54fd (flow d73b86a9): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task b79979ad (flow 627a1f3f): loading val<.=s3://niema-test/n100/r07/n100.r07.s001_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 6b13fa0f (flow 7b3d1113): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 6d0b8c8b (flow 8af16490): loading val<.=s3://niema-test/n100/r07/n100.r07.s068_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 6d0b8c8b (flow 8af16490): loading val<.=s3://niema-test/n100/r07/n100.r07.s068_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 349d60d9 (flow 61ea32de): loading val<.=s3://niema-test/n100/r07/n100.r07.s072_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 6b13fa0f (flow 7b3d1113): loading (try 0): started
2021/07/08 17:13:50 scheduler task ee486401 (flow acaec2ed): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 6b13fa0f (flow 7b3d1113): loading val<.=s3://niema-test/n100/r07/n100.r07.s061_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 9299bf20 (flow db3942f3): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task ee486401 (flow acaec2ed): loading (try 0): started
2021/07/08 17:13:50 scheduler task ee486401 (flow acaec2ed): loading val<.=s3://niema-test/n100/r07/n100.r07.s058_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task f2bf54fd (flow d73b86a9): loading (try 0): started
2021/07/08 17:13:50 scheduler task f2bf54fd (flow d73b86a9): loading val<.=s3://niema-test/n100/r07/n100.r07.s057_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 6b13fa0f (flow 7b3d1113): loading val<.=s3://niema-test/n100/r07/n100.r07.s061_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task ee486401 (flow acaec2ed): loading val<.=s3://niema-test/n100/r07/n100.r07.s058_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 1dc90817 (flow cb2c7a28): loading (try 0): started
2021/07/08 17:13:50 scheduler task 1dc90817 (flow cb2c7a28): loading val<.=s3://niema-test/n100/r07/n100.r07.s059_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 3f55473f (flow 3d776298): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task f992ad8d (flow b7fedadc): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task aae9bef3 (flow 5c374ba7): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task a1216deb (flow a6081c46): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 282e35f8 (flow 081e5dc5): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 1f5b8fb7 (flow 18bb98c1): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 2ba58d45 (flow 1463162b): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task cbb63d8b (flow 12c709ba): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 8465c67c (flow b2a24fdd): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 151a9227 (flow b10d32be): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task c129edfe (flow 9ee68a11): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task a6a27466 (flow 1d245d3d): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task c5654e5c (flow ef41d477): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task d6a5ea9f (flow bc6da4cb): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task adc32aa7 (flow 3ba0729e): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 777deb41 (flow a83135ea): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 282e35f8 (flow 081e5dc5): loading (try 0): started
2021/07/08 17:13:50 scheduler task 151a9227 (flow b10d32be): loading (try 0): started
2021/07/08 17:13:50 scheduler task 3f55473f (flow 3d776298): loading (try 0): started
2021/07/08 17:13:50 scheduler task c129edfe (flow 9ee68a11): loading (try 0): started
2021/07/08 17:13:50 scheduler task 282e35f8 (flow 081e5dc5): loading val<.=s3://niema-test/n100/r07/n100.r07.s094_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 1f5b8fb7 (flow 18bb98c1): loading (try 0): started
2021/07/08 17:13:50 scheduler task f2bf54fd (flow d73b86a9): loading val<.=s3://niema-test/n100/r07/n100.r07.s057_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 9299bf20 (flow db3942f3): loading (try 0): started
2021/07/08 17:13:50 scheduler task 3f55473f (flow 3d776298): loading val<.=s3://niema-test/n100/r07/n100.r07.s084_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task c129edfe (flow 9ee68a11): loading val<.=s3://niema-test/n100/r07/n100.r07.s022_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 9299bf20 (flow db3942f3): loading val<.=s3://niema-test/n100/r07/n100.r07.s056_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task c129edfe (flow 9ee68a11): loading val<.=s3://niema-test/n100/r07/n100.r07.s022_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 1dc90817 (flow cb2c7a28): loading val<.=s3://niema-test/n100/r07/n100.r07.s059_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task bcd979c9 (flow bb3f7b07): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 6f663194 (flow bb352724): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task ba13af1f (flow 91ed633a): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task d038551e (flow 2ad2ef89): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 590eb55e (flow bdb75ce9): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 77caf1b8 (flow 4855c020): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 51d530dd (flow 9adf3c04): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 094c83a9 (flow 0455dc2c): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task b5a99eab (flow dfc4a546): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 36d6431d (flow 589a2296): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 88d23280 (flow bbce7a63): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task b5a99eab (flow dfc4a546): loading (try 0): started
2021/07/08 17:13:50 scheduler task b5a99eab (flow dfc4a546): loading val<.=s3://niema-test/n100/r07/n100.r07.s076_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 094c83a9 (flow 0455dc2c): loading (try 0): started
2021/07/08 17:13:50 scheduler task 590eb55e (flow bdb75ce9): loading (try 0): started
2021/07/08 17:13:50 scheduler task 094c83a9 (flow 0455dc2c): loading val<.=s3://niema-test/n100/r07/n100.r07.s055_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 36d6431d (flow 589a2296): loading (try 0): started
2021/07/08 17:13:50 scheduler task d038551e (flow 2ad2ef89): loading (try 0): started
2021/07/08 17:13:50 scheduler task 18db9c9a (flow edcaa27c): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 36d6431d (flow 589a2296): loading val<.=s3://niema-test/n100/r07/n100.r07.s036_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task d038551e (flow 2ad2ef89): loading val<.=s3://niema-test/n100/r07/n100.r07.s078_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 18db9c9a (flow edcaa27c): loading (try 0): started
2021/07/08 17:13:50 scheduler task d038551e (flow 2ad2ef89): loading val<.=s3://niema-test/n100/r07/n100.r07.s078_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 18db9c9a (flow edcaa27c): loading val<.=s3://niema-test/n100/r07/n100.r07.s046_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 18db9c9a (flow edcaa27c): loading val<.=s3://niema-test/n100/r07/n100.r07.s046_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task bcd979c9 (flow bb3f7b07): loading (try 0): started
2021/07/08 17:13:50 scheduler task 77caf1b8 (flow 4855c020): loading (try 0): started
2021/07/08 17:13:50 scheduler task 77caf1b8 (flow 4855c020): loading val<.=s3://niema-test/n100/r07/n100.r07.s005_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task bcd979c9 (flow bb3f7b07): loading val<.=s3://niema-test/n100/r07/n100.r07.s092_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 151a9227 (flow b10d32be): loading val<.=s3://niema-test/n100/r07/n100.r07.s098_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task ba13af1f (flow 91ed633a): loading (try 0): started
2021/07/08 17:13:50 scheduler task 2ba58d45 (flow 1463162b): loading (try 0): started
2021/07/08 17:13:50 scheduler task a6a27466 (flow 1d245d3d): loading (try 0): started
2021/07/08 17:13:50 scheduler task 2ba58d45 (flow 1463162b): loading val<.=s3://niema-test/n100/r07/n100.r07.s093_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task a6a27466 (flow 1d245d3d): loading val<.=s3://niema-test/n100/r07/n100.r07.s100_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 282e35f8 (flow 081e5dc5): loading val<.=s3://niema-test/n100/r07/n100.r07.s094_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task a6a27466 (flow 1d245d3d): loading val<.=s3://niema-test/n100/r07/n100.r07.s100_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task a1216deb (flow a6081c46): loading (try 0): started
2021/07/08 17:13:50 scheduler task f992ad8d (flow b7fedadc): loading (try 0): started
2021/07/08 17:13:50 scheduler task a1216deb (flow a6081c46): loading val<.=s3://niema-test/n100/r07/n100.r07.s067_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task f992ad8d (flow b7fedadc): loading val<.=s3://niema-test/n100/r07/n100.r07.s097_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task d6a5ea9f (flow bc6da4cb): loading (try 0): started
2021/07/08 17:13:50 scheduler task d6a5ea9f (flow bc6da4cb): loading val<.=s3://niema-test/n100/r07/n100.r07.s075_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 151a9227 (flow b10d32be): loading val<.=s3://niema-test/n100/r07/n100.r07.s098_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task adc32aa7 (flow 3ba0729e): loading (try 0): started
2021/07/08 17:13:50 scheduler task adc32aa7 (flow 3ba0729e): loading val<.=s3://niema-test/n100/r07/n100.r07.s090_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 777deb41 (flow a83135ea): loading (try 0): started
2021/07/08 17:13:50 scheduler task 1f5b8fb7 (flow 18bb98c1): loading val<.=s3://niema-test/n100/r07/n100.r07.s099_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task cbb63d8b (flow 12c709ba): loading (try 0): started
2021/07/08 17:13:50 scheduler task 3f55473f (flow 3d776298): loading val<.=s3://niema-test/n100/r07/n100.r07.s084_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task aae9bef3 (flow 5c374ba7): loading (try 0): started
2021/07/08 17:13:50 scheduler task 8465c67c (flow b2a24fdd): loading (try 0): started
2021/07/08 17:13:50 scheduler task 1f5b8fb7 (flow 18bb98c1): loading val<.=s3://niema-test/n100/r07/n100.r07.s099_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 9299bf20 (flow db3942f3): loading val<.=s3://niema-test/n100/r07/n100.r07.s056_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 6f663194 (flow bb352724): loading (try 0): started
2021/07/08 17:13:50 scheduler task 51d530dd (flow 9adf3c04): loading (try 0): started
2021/07/08 17:13:50 scheduler task b5a99eab (flow dfc4a546): loading val<.=s3://niema-test/n100/r07/n100.r07.s076_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 88d23280 (flow bbce7a63): loading (try 0): started
2021/07/08 17:13:50 scheduler task 094c83a9 (flow 0455dc2c): loading val<.=s3://niema-test/n100/r07/n100.r07.s055_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 590eb55e (flow bdb75ce9): loading val<.=s3://niema-test/n100/r07/n100.r07.s079_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 590eb55e (flow bdb75ce9): loading val<.=s3://niema-test/n100/r07/n100.r07.s079_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 36d6431d (flow 589a2296): loading val<.=s3://niema-test/n100/r07/n100.r07.s036_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 164261c5 (flow 441e1d42): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task bcd979c9 (flow bb3f7b07): loading val<.=s3://niema-test/n100/r07/n100.r07.s092_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 77caf1b8 (flow 4855c020): loading val<.=s3://niema-test/n100/r07/n100.r07.s005_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task ba13af1f (flow 91ed633a): loading val<.=s3://niema-test/n100/r07/n100.r07.s063_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task ba13af1f (flow 91ed633a): loading val<.=s3://niema-test/n100/r07/n100.r07.s063_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 2ba58d45 (flow 1463162b): loading val<.=s3://niema-test/n100/r07/n100.r07.s093_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task a1216deb (flow a6081c46): loading val<.=s3://niema-test/n100/r07/n100.r07.s067_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task c5654e5c (flow ef41d477): loading (try 0): started
2021/07/08 17:13:50 scheduler task f992ad8d (flow b7fedadc): loading val<.=s3://niema-test/n100/r07/n100.r07.s097_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task d6a5ea9f (flow bc6da4cb): loading val<.=s3://niema-test/n100/r07/n100.r07.s075_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 777deb41 (flow a83135ea): loading val<.=s3://niema-test/n100/r07/n100.r07.s089_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task adc32aa7 (flow 3ba0729e): loading val<.=s3://niema-test/n100/r07/n100.r07.s090_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 777deb41 (flow a83135ea): loading val<.=s3://niema-test/n100/r07/n100.r07.s089_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task c5654e5c (flow ef41d477): loading val<.=s3://niema-test/n100/r07/n100.r07.s064_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task cbb63d8b (flow 12c709ba): loading val<.=s3://niema-test/n100/r07/n100.r07.s086_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task cbb63d8b (flow 12c709ba): loading val<.=s3://niema-test/n100/r07/n100.r07.s086_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task aae9bef3 (flow 5c374ba7): loading val<.=s3://niema-test/n100/r07/n100.r07.s091_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task aae9bef3 (flow 5c374ba7): loading val<.=s3://niema-test/n100/r07/n100.r07.s091_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 8465c67c (flow b2a24fdd): loading val<.=s3://niema-test/n100/r07/n100.r07.s087_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 6f663194 (flow bb352724): loading val<.=s3://niema-test/n100/r07/n100.r07.s071_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 8465c67c (flow b2a24fdd): loading val<.=s3://niema-test/n100/r07/n100.r07.s087_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 51d530dd (flow 9adf3c04): loading val<.=s3://niema-test/n100/r07/n100.r07.s081_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 6f663194 (flow bb352724): loading val<.=s3://niema-test/n100/r07/n100.r07.s071_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 51d530dd (flow 9adf3c04): loading val<.=s3://niema-test/n100/r07/n100.r07.s081_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 88d23280 (flow bbce7a63): loading val<.=s3://niema-test/n100/r07/n100.r07.s033_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 964686c2 (flow 1be4cbdf): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task fb62fd75 (flow 91d65e11): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task e89fdb62 (flow 85485140): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task f1fdc12e (flow d483a765): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 3fa58d8b (flow 461bf7dc): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task e7923c9a (flow 2a86d1d5): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 18faa772 (flow 4989a6de): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 4f4f4171 (flow 522bd866): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 415ae885 (flow abb16dca): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task d01e6baf (flow 1bff83e3): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 5008561a (flow 3ac59401): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 30bfcda0 (flow 878d6e7b): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task eebbb090 (flow 2cedb108): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 852314b6 (flow d13a1791): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 6c7d8d18 (flow 7d51370c): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task bdc179fc (flow c7a8d3dc): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task e9711b6d (flow 4741c76b): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 004d43f9 (flow 51e59bfc): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task a3f46aee (flow 956ffc0d): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 31906a42 (flow 667619f5): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 300fd7a5 (flow b9812173): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 2623b266 (flow 26192454): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task af534387 (flow 90d93718): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task e2af4871 (flow 41a5e943): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task fd193e05 (flow e299776e): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 5008561a (flow 3ac59401): loading (try 0): started
2021/07/08 17:13:50 scheduler task fd193e05 (flow e299776e): loading (try 0): started
2021/07/08 17:13:50 scheduler task 5008561a (flow 3ac59401): loading val<.=s3://niema-test/n100/r07/n100.r07.s096_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task fd193e05 (flow e299776e): loading val<.=s3://niema-test/n100/r07/n100.r07.s013_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 164261c5 (flow 441e1d42): loading (try 0): started
2021/07/08 17:13:50 scheduler task eebbb090 (flow 2cedb108): loading (try 0): started
2021/07/08 17:13:50 scheduler task 164261c5 (flow 441e1d42): loading val<.=s3://niema-test/n100/r07/n100.r07.s082_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 300fd7a5 (flow b9812173): loading (try 0): started
2021/07/08 17:13:50 scheduler task 2623b266 (flow 26192454): loading (try 0): started
2021/07/08 17:13:50 scheduler task 300fd7a5 (flow b9812173): loading val<.=s3://niema-test/n100/r07/n100.r07.s051_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 004d43f9 (flow 51e59bfc): loading (try 0): started
2021/07/08 17:13:50 scheduler task 4f4f4171 (flow 522bd866): loading (try 0): started
2021/07/08 17:13:50 scheduler task 2623b266 (flow 26192454): loading val<.=s3://niema-test/n100/r07/n100.r07.s016_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 18faa772 (flow 4989a6de): loading (try 0): started
2021/07/08 17:13:50 scheduler task 852314b6 (flow d13a1791): loading (try 0): started
2021/07/08 17:13:50 scheduler task bdc179fc (flow c7a8d3dc): loading (try 0): started
2021/07/08 17:13:50 scheduler task 18faa772 (flow 4989a6de): loading val<.=s3://niema-test/n100/r07/n100.r07.s018_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 18faa772 (flow 4989a6de): loading val<.=s3://niema-test/n100/r07/n100.r07.s018_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task bdc179fc (flow c7a8d3dc): loading val<.=s3://niema-test/n100/r07/n100.r07.s070_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task bdc179fc (flow c7a8d3dc): loading val<.=s3://niema-test/n100/r07/n100.r07.s070_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 6c7d8d18 (flow 7d51370c): loading (try 0): started
2021/07/08 17:13:50 scheduler task 6c7d8d18 (flow 7d51370c): loading val<.=s3://niema-test/n100/r07/n100.r07.s009_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 60169fd2 (flow cd6e30ef): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 8168a241 (flow 761ac0e3): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task b41c06f5 (flow 602e5744): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 4cf5300c (flow 9257a616): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 1d2e33c5 (flow e07d1478): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 3d94ce3a (flow 60c3d9b3): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task c0a2e047 (flow 281a5421): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 20f4384f (flow 6fbc481f): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 334f3996 (flow a9afc8a9): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task db4186ab (flow 9e638bb7): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 46b3d1f4 (flow 74bc54ab): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 10a99fae (flow 7b842208): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 0d5c5330 (flow c96780e2): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 3c2fce3f (flow 3d7c11ce): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 9a98392a (flow e4ffdf1c): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task bcd66609 (flow 365c94e8): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 3a850123 (flow f498b7de): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task cbc7ffd0 (flow f84bcf3d): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task c9898fc4 (flow 8efd3fba): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 3d2380ba (flow 90113c2d): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 5f2ce7d1 (flow e0ab9d71): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 95756e2e (flow 61093b34): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 34c0f138 (flow 806765de): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 31458704 (flow 40bc41f4): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 6c805c91 (flow 422def09): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 2cc05ef0 (flow 78f39472): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task d7452493 (flow a3bb669d): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 0b40294a (flow d3087af8): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task ac285b56 (flow d679cd61): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 072a8e2d (flow edd91e32): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task bb3aebb8 (flow 2ffcac3d): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 450f7005 (flow 93a728de): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 5a053160 (flow 556ae154): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 57e27363 (flow cd67159a): assigning to alloc ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:13:50 scheduler task 1d2e33c5 (flow e07d1478): loading (try 0): started
2021/07/08 17:13:50 scheduler task 3d94ce3a (flow 60c3d9b3): loading (try 0): started
2021/07/08 17:13:50 scheduler task 6c7d8d18 (flow 7d51370c): loading val<.=s3://niema-test/n100/r07/n100.r07.s009_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 3d94ce3a (flow 60c3d9b3): loading val<.=s3://niema-test/n100/r07/n100.r07.s039_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task bcd66609 (flow 365c94e8): loading (try 0): started
2021/07/08 17:13:50 scheduler task 31906a42 (flow 667619f5): loading (try 0): started
2021/07/08 17:13:50 scheduler task bcd66609 (flow 365c94e8): loading val<.=s3://niema-test/n100/r07/n100.r07.s069_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 3c2fce3f (flow 3d7c11ce): loading (try 0): started
2021/07/08 17:13:50 scheduler task 1d2e33c5 (flow e07d1478): loading val<.=s3://niema-test/n100/r07/n100.r07.s035_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 8168a241 (flow 761ac0e3): loading (try 0): started
2021/07/08 17:13:50 scheduler task 0b40294a (flow d3087af8): loading (try 0): started
2021/07/08 17:13:50 scheduler task 004d43f9 (flow 51e59bfc): loading val<.=s3://niema-test/n100/r07/n100.r07.s023_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 10a99fae (flow 7b842208): loading (try 0): started
2021/07/08 17:13:50 scheduler task 6c805c91 (flow 422def09): loading (try 0): started
2021/07/08 17:13:50 scheduler task 8168a241 (flow 761ac0e3): loading val<.=s3://niema-test/n100/r07/n100.r07.s085_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 0b40294a (flow d3087af8): loading val<.=s3://niema-test/n100/r07/n100.r07.s034_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task db4186ab (flow 9e638bb7): loading (try 0): started
2021/07/08 17:13:50 scheduler task 34c0f138 (flow 806765de): loading (try 0): started
2021/07/08 17:13:50 scheduler task 3d94ce3a (flow 60c3d9b3): loading val<.=s3://niema-test/n100/r07/n100.r07.s039_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task db4186ab (flow 9e638bb7): loading val<.=s3://niema-test/n100/r07/n100.r07.s007_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 10a99fae (flow 7b842208): loading val<.=s3://niema-test/n100/r07/n100.r07.s041_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 34c0f138 (flow 806765de): loading val<.=s3://niema-test/n100/r07/n100.r07.s028_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 450f7005 (flow 93a728de): loading (try 0): started
2021/07/08 17:13:50 scheduler task 9a98392a (flow e4ffdf1c): loading (try 0): started
2021/07/08 17:13:50 scheduler task 450f7005 (flow 93a728de): loading val<.=s3://niema-test/n100/r07/n100.r07.s024_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 450f7005 (flow 93a728de): loading val<.=s3://niema-test/n100/r07/n100.r07.s024_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task bb3aebb8 (flow 2ffcac3d): loading (try 0): started
2021/07/08 17:13:50 scheduler task 5a053160 (flow 556ae154): loading (try 0): started
2021/07/08 17:13:50 scheduler task c9898fc4 (flow 8efd3fba): loading (try 0): started
2021/07/08 17:13:50 scheduler task 5a053160 (flow 556ae154): loading val<.=s3://niema-test/n100/r07/n100.r07.s015_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task c9898fc4 (flow 8efd3fba): loading val<.=s3://niema-test/n100/r07/n100.r07.s044_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 1d2e33c5 (flow e07d1478): loading val<.=s3://niema-test/n100/r07/n100.r07.s035_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 0d5c5330 (flow c96780e2): loading (try 0): started
2021/07/08 17:13:50 scheduler task c9898fc4 (flow 8efd3fba): loading val<.=s3://niema-test/n100/r07/n100.r07.s044_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 0d5c5330 (flow c96780e2): loading val<.=s3://niema-test/n100/r07/n100.r07.s047_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 0d5c5330 (flow c96780e2): loading val<.=s3://niema-test/n100/r07/n100.r07.s047_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 3c2fce3f (flow 3d7c11ce): loading val<.=s3://niema-test/n100/r07/n100.r07.s017_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task c0a2e047 (flow 281a5421): loading (try 0): started
2021/07/08 17:13:50 scheduler task c0a2e047 (flow 281a5421): loading val<.=s3://niema-test/n100/r07/n100.r07.s010_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 0b40294a (flow d3087af8): loading val<.=s3://niema-test/n100/r07/n100.r07.s034_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task c0a2e047 (flow 281a5421): loading val<.=s3://niema-test/n100/r07/n100.r07.s010_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task e2af4871 (flow 41a5e943): loading (try 0): started
2021/07/08 17:13:50 scheduler task e2af4871 (flow 41a5e943): loading val<.=s3://niema-test/n100/r07/n100.r07.s008_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task af534387 (flow 90d93718): loading (try 0): started
2021/07/08 17:13:50 scheduler task af534387 (flow 90d93718): loading val<.=s3://niema-test/n100/r07/n100.r07.s049_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task e2af4871 (flow 41a5e943): loading val<.=s3://niema-test/n100/r07/n100.r07.s008_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task e9711b6d (flow 4741c76b): loading (try 0): started
2021/07/08 17:13:50 scheduler task e9711b6d (flow 4741c76b): loading val<.=s3://niema-test/n100/r07/n100.r07.s020_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 3fa58d8b (flow 461bf7dc): loading (try 0): started
2021/07/08 17:13:50 scheduler task e9711b6d (flow 4741c76b): loading val<.=s3://niema-test/n100/r07/n100.r07.s020_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 3fa58d8b (flow 461bf7dc): loading val<.=s3://niema-test/n100/r07/n100.r07.s014_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 3fa58d8b (flow 461bf7dc): loading val<.=s3://niema-test/n100/r07/n100.r07.s014_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task fb62fd75 (flow 91d65e11): loading (try 0): started
2021/07/08 17:13:50 scheduler task 2623b266 (flow 26192454): loading val<.=s3://niema-test/n100/r07/n100.r07.s016_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task f1fdc12e (flow d483a765): loading (try 0): started
2021/07/08 17:13:50 scheduler task e89fdb62 (flow 85485140): loading (try 0): started
2021/07/08 17:13:50 scheduler task 415ae885 (flow abb16dca): loading (try 0): started
2021/07/08 17:13:50 scheduler task 5008561a (flow 3ac59401): loading val<.=s3://niema-test/n100/r07/n100.r07.s096_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 88d23280 (flow bbce7a63): loading val<.=s3://niema-test/n100/r07/n100.r07.s033_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task d01e6baf (flow 1bff83e3): loading (try 0): started
2021/07/08 17:13:50 scheduler task fd193e05 (flow e299776e): loading val<.=s3://niema-test/n100/r07/n100.r07.s013_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task e7923c9a (flow 2a86d1d5): loading (try 0): started
2021/07/08 17:13:50 scheduler task 164261c5 (flow 441e1d42): loading val<.=s3://niema-test/n100/r07/n100.r07.s082_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task c5654e5c (flow ef41d477): loading val<.=s3://niema-test/n100/r07/n100.r07.s064_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task a3f46aee (flow 956ffc0d): loading (try 0): started
2021/07/08 17:13:50 scheduler task 4f4f4171 (flow 522bd866): loading val<.=s3://niema-test/n100/r07/n100.r07.s083_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 964686c2 (flow 1be4cbdf): loading (try 0): started
2021/07/08 17:13:50 scheduler task eebbb090 (flow 2cedb108): loading val<.=s3://niema-test/n100/r07/n100.r07.s054_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 004d43f9 (flow 51e59bfc): loading val<.=s3://niema-test/n100/r07/n100.r07.s023_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 4f4f4171 (flow 522bd866): loading val<.=s3://niema-test/n100/r07/n100.r07.s083_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 300fd7a5 (flow b9812173): loading val<.=s3://niema-test/n100/r07/n100.r07.s051_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 852314b6 (flow d13a1791): loading val<.=s3://niema-test/n100/r07/n100.r07.s032_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 852314b6 (flow d13a1791): loading val<.=s3://niema-test/n100/r07/n100.r07.s032_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 31906a42 (flow 667619f5): loading val<.=s3://niema-test/n100/r07/n100.r07.s053_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 30bfcda0 (flow 878d6e7b): loading (try 0): started
2021/07/08 17:13:50 scheduler task d7452493 (flow a3bb669d): loading (try 0): started
2021/07/08 17:13:50 scheduler task 20f4384f (flow 6fbc481f): loading (try 0): started
2021/07/08 17:13:50 scheduler task 5f2ce7d1 (flow e0ab9d71): loading (try 0): started
2021/07/08 17:13:50 scheduler task 95756e2e (flow 61093b34): loading (try 0): started
2021/07/08 17:13:50 scheduler task b41c06f5 (flow 602e5744): loading (try 0): started
2021/07/08 17:13:50 scheduler task 3c2fce3f (flow 3d7c11ce): loading val<.=s3://niema-test/n100/r07/n100.r07.s017_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 46b3d1f4 (flow 74bc54ab): loading (try 0): started
2021/07/08 17:13:50 scheduler task cbc7ffd0 (flow f84bcf3d): loading (try 0): started
2021/07/08 17:13:50 scheduler task 31458704 (flow 40bc41f4): loading (try 0): started
2021/07/08 17:13:50 scheduler task 8168a241 (flow 761ac0e3): loading val<.=s3://niema-test/n100/r07/n100.r07.s085_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 4cf5300c (flow 9257a616): loading (try 0): started
2021/07/08 17:13:50 scheduler task 31906a42 (flow 667619f5): loading val<.=s3://niema-test/n100/r07/n100.r07.s053_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 60169fd2 (flow cd6e30ef): loading (try 0): started
2021/07/08 17:13:50 scheduler task 3d2380ba (flow 90113c2d): loading (try 0): started
2021/07/08 17:13:50 scheduler task 334f3996 (flow a9afc8a9): loading (try 0): started
2021/07/08 17:13:50 scheduler task bcd66609 (flow 365c94e8): loading val<.=s3://niema-test/n100/r07/n100.r07.s069_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 10a99fae (flow 7b842208): loading val<.=s3://niema-test/n100/r07/n100.r07.s041_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 2cc05ef0 (flow 78f39472): loading (try 0): started
2021/07/08 17:13:50 scheduler task 6c805c91 (flow 422def09): loading val<.=s3://niema-test/n100/r07/n100.r07.s038_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 3a850123 (flow f498b7de): loading (try 0): started
2021/07/08 17:13:50 scheduler task eebbb090 (flow 2cedb108): loading val<.=s3://niema-test/n100/r07/n100.r07.s054_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 6c805c91 (flow 422def09): loading val<.=s3://niema-test/n100/r07/n100.r07.s038_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task db4186ab (flow 9e638bb7): loading val<.=s3://niema-test/n100/r07/n100.r07.s007_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 34c0f138 (flow 806765de): loading val<.=s3://niema-test/n100/r07/n100.r07.s028_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task ac285b56 (flow d679cd61): loading (try 0): started
2021/07/08 17:13:50 scheduler task 57e27363 (flow cd67159a): loading (try 0): started
2021/07/08 17:13:50 scheduler task 072a8e2d (flow edd91e32): loading (try 0): started
2021/07/08 17:13:50 scheduler task bb3aebb8 (flow 2ffcac3d): loading val<.=s3://niema-test/n100/r07/n100.r07.s088_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 9a98392a (flow e4ffdf1c): loading val<.=s3://niema-test/n100/r07/n100.r07.s066_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 9a98392a (flow e4ffdf1c): loading val<.=s3://niema-test/n100/r07/n100.r07.s066_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task bb3aebb8 (flow 2ffcac3d): loading val<.=s3://niema-test/n100/r07/n100.r07.s088_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 5a053160 (flow 556ae154): loading val<.=s3://niema-test/n100/r07/n100.r07.s015_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task af534387 (flow 90d93718): loading val<.=s3://niema-test/n100/r07/n100.r07.s049_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task fb62fd75 (flow 91d65e11): loading val<.=s3://niema-test/n100/r07/n100.r07.s074_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task fb62fd75 (flow 91d65e11): loading val<.=s3://niema-test/n100/r07/n100.r07.s074_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task f1fdc12e (flow d483a765): loading val<.=s3://niema-test/n100/r07/n100.r07.s095_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task e89fdb62 (flow 85485140): loading val<.=s3://niema-test/n100/r07/n100.r07.s026_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task f1fdc12e (flow d483a765): loading val<.=s3://niema-test/n100/r07/n100.r07.s095_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 415ae885 (flow abb16dca): loading val<.=s3://niema-test/n100/r07/n100.r07.s052_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task e89fdb62 (flow 85485140): loading val<.=s3://niema-test/n100/r07/n100.r07.s026_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 415ae885 (flow abb16dca): loading val<.=s3://niema-test/n100/r07/n100.r07.s052_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task d01e6baf (flow 1bff83e3): loading val<.=s3://niema-test/n100/r07/n100.r07.s025_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task d01e6baf (flow 1bff83e3): loading val<.=s3://niema-test/n100/r07/n100.r07.s025_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task e7923c9a (flow 2a86d1d5): loading val<.=s3://niema-test/n100/r07/n100.r07.s073_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task e7923c9a (flow 2a86d1d5): loading val<.=s3://niema-test/n100/r07/n100.r07.s073_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task a3f46aee (flow 956ffc0d): loading val<.=s3://niema-test/n100/r07/n100.r07.s002_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task a3f46aee (flow 956ffc0d): loading val<.=s3://niema-test/n100/r07/n100.r07.s002_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 964686c2 (flow 1be4cbdf): loading val<.=s3://niema-test/n100/r07/n100.r07.s077_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 964686c2 (flow 1be4cbdf): loading val<.=s3://niema-test/n100/r07/n100.r07.s077_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 30bfcda0 (flow 878d6e7b): loading val<.=s3://niema-test/n100/r07/n100.r07.s037_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task d7452493 (flow a3bb669d): loading val<.=s3://niema-test/n100/r07/n100.r07.s011_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 30bfcda0 (flow 878d6e7b): loading val<.=s3://niema-test/n100/r07/n100.r07.s037_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 20f4384f (flow 6fbc481f): loading val<.=s3://niema-test/n100/r07/n100.r07.s019_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task d7452493 (flow a3bb669d): loading val<.=s3://niema-test/n100/r07/n100.r07.s011_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 20f4384f (flow 6fbc481f): loading val<.=s3://niema-test/n100/r07/n100.r07.s019_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 5f2ce7d1 (flow e0ab9d71): loading val<.=s3://niema-test/n100/r07/n100.r07.s062_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 5f2ce7d1 (flow e0ab9d71): loading val<.=s3://niema-test/n100/r07/n100.r07.s062_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 95756e2e (flow 61093b34): loading val<.=s3://niema-test/n100/r07/n100.r07.s004_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task b41c06f5 (flow 602e5744): loading val<.=s3://niema-test/n100/r07/n100.r07.s021_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task b41c06f5 (flow 602e5744): loading val<.=s3://niema-test/n100/r07/n100.r07.s021_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 95756e2e (flow 61093b34): loading val<.=s3://niema-test/n100/r07/n100.r07.s004_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 46b3d1f4 (flow 74bc54ab): loading val<.=s3://niema-test/n100/r07/n100.r07.s029_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 46b3d1f4 (flow 74bc54ab): loading val<.=s3://niema-test/n100/r07/n100.r07.s029_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task cbc7ffd0 (flow f84bcf3d): loading val<.=s3://niema-test/n100/r07/n100.r07.s012_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task cbc7ffd0 (flow f84bcf3d): loading val<.=s3://niema-test/n100/r07/n100.r07.s012_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 31458704 (flow 40bc41f4): loading val<.=s3://niema-test/n100/r07/n100.r07.s006_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 31458704 (flow 40bc41f4): loading val<.=s3://niema-test/n100/r07/n100.r07.s006_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 4cf5300c (flow 9257a616): loading val<.=s3://niema-test/n100/r07/n100.r07.s050_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 4cf5300c (flow 9257a616): loading val<.=s3://niema-test/n100/r07/n100.r07.s050_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 60169fd2 (flow cd6e30ef): loading val<.=s3://niema-test/n100/r07/n100.r07.s027_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 3d2380ba (flow 90113c2d): loading val<.=s3://niema-test/n100/r07/n100.r07.s030_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 60169fd2 (flow cd6e30ef): loading val<.=s3://niema-test/n100/r07/n100.r07.s027_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 334f3996 (flow a9afc8a9): loading val<.=s3://niema-test/n100/r07/n100.r07.s065_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 3d2380ba (flow 90113c2d): loading val<.=s3://niema-test/n100/r07/n100.r07.s030_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 334f3996 (flow a9afc8a9): loading val<.=s3://niema-test/n100/r07/n100.r07.s065_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 2cc05ef0 (flow 78f39472): loading val<.=s3://niema-test/n100/r07/n100.r07.s048_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 2cc05ef0 (flow 78f39472): loading val<.=s3://niema-test/n100/r07/n100.r07.s048_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 3a850123 (flow f498b7de): loading val<.=s3://niema-test/n100/r07/n100.r07.s003_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 3a850123 (flow f498b7de): loading val<.=s3://niema-test/n100/r07/n100.r07.s003_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task ac285b56 (flow d679cd61): loading val<.=s3://niema-test/n100/r07/n100.r07.s042_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 57e27363 (flow cd67159a): loading val<.=s3://niema-test/n100/r07/n100.r07.s031_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task ac285b56 (flow d679cd61): loading val<.=s3://niema-test/n100/r07/n100.r07.s042_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 072a8e2d (flow edd91e32): loading val<.=s3://niema-test/n100/r07/n100.r07.s045_R2.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 57e27363 (flow cd67159a): loading val<.=s3://niema-test/n100/r07/n100.r07.s031_R1.fastq 35.4MiB>
2021/07/08 17:13:50 scheduler task 072a8e2d (flow edd91e32): loading val<.=s3://niema-test/n100/r07/n100.r07.s045_R1.fastq 35.4MiB>
2021/07/08 17:13:51 scheduler task 2cd48a42 (flow ab63e124): assigning to alloc ec2-3-139-104-158.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 17:13:51 scheduler task 92cb3014 (flow e38f563a): assigning to alloc ec2-3-139-104-158.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 17:13:51 scheduler task d280101a (flow 2063d14e): assigning to alloc ec2-3-139-104-158.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 17:13:51 scheduler task e9888daf (flow ec27422b): assigning to alloc ec2-3-139-104-158.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 17:13:51 scheduler task e9888daf (flow ec27422b): loading (try 0): started
2021/07/08 17:13:51 scheduler task 92cb3014 (flow e38f563a): loading (try 0): started
2021/07/08 17:13:51 scheduler task d280101a (flow 2063d14e): loading (try 0): started
2021/07/08 17:13:51 scheduler task 2cd48a42 (flow ab63e124): loading (try 0): started
2021/07/08 17:13:51 scheduler task 92cb3014 (flow e38f563a): loading val<.=s3://niema-test/n100/r07/n100.r07.s043_R1.fastq 35.4MiB>
2021/07/08 17:13:51 scheduler task 2cd48a42 (flow ab63e124): loading val<.=s3://niema-test/n100/r07/n100.r07.s040_R1.fastq 35.4MiB>
2021/07/08 17:13:51 scheduler task 2cd48a42 (flow ab63e124): loading val<.=s3://niema-test/n100/r07/n100.r07.s040_R2.fastq 35.4MiB>
2021/07/08 17:13:51 scheduler task d280101a (flow 2063d14e): loading val<.=s3://niema-test/n100/r07/n100.r07.s080_R2.fastq 35.4MiB>
2021/07/08 17:13:51 scheduler task 92cb3014 (flow e38f563a): loading val<.=s3://niema-test/n100/r07/n100.r07.s043_R2.fastq 35.4MiB>
2021/07/08 17:13:51 scheduler task e9888daf (flow ec27422b): loading val<.=s3://niema-test/n100/r07/n100.r07.s060_R2.fastq 35.4MiB>
2021/07/08 17:13:51 scheduler task e9888daf (flow ec27422b): loading val<.=s3://niema-test/n100/r07/n100.r07.s060_R1.fastq 35.4MiB>
2021/07/08 17:13:51 scheduler task d280101a (flow 2063d14e): loading val<.=s3://niema-test/n100/r07/n100.r07.s080_R1.fastq 35.4MiB>
2021/07/08 17:13:51 scheduler task 349d60d9 (flow 61ea32de): loaded val<.=22cbb19a 35.4MiB>
2021/07/08 17:13:51 scheduler task 1dc90817 (flow cb2c7a28): loaded val<.=c4258675 35.4MiB>
2021/07/08 17:13:51 scheduler task a1216deb (flow a6081c46): loaded val<.=44b9712f 35.4MiB>
2021/07/08 17:13:51 scheduler task ee486401 (flow acaec2ed): loaded val<.=e1c11a2b 35.4MiB>
2021/07/08 17:13:51 scheduler task 282e35f8 (flow 081e5dc5): loaded val<.=30e5fa56 35.4MiB>
2021/07/08 17:13:51 scheduler task 1f5b8fb7 (flow 18bb98c1): loaded val<.=4120f7f3 35.4MiB>
2021/07/08 17:13:51 scheduler task 590eb55e (flow bdb75ce9): loaded val<.=5d15969d 35.4MiB>
2021/07/08 17:13:51 scheduler task c129edfe (flow 9ee68a11): loaded val<.=ef7c5bcc 35.4MiB>
2021/07/08 17:13:51 scheduler task 2ba58d45 (flow 1463162b): loaded val<.=f237cc2d 35.4MiB>
2021/07/08 17:13:51 scheduler task 151a9227 (flow b10d32be): loaded val<.=f8ab4e0b 35.4MiB>
2021/07/08 17:13:51 scheduler task c129edfe (flow 9ee68a11): loaded val<.=332809c0 35.4MiB>
2021/07/08 17:13:51 scheduler task c129edfe (flow 9ee68a11): loading (try 0): successful, next state: submitting
2021/07/08 17:13:51 scheduler task c129edfe (flow 9ee68a11): submitting (try 0): started
2021/07/08 17:13:51 scheduler task b5a99eab (flow dfc4a546): loaded val<.=2588b13a 35.4MiB>
2021/07/08 17:13:51 scheduler task 1dc90817 (flow cb2c7a28): loaded val<.=4faa52e9 35.4MiB>
2021/07/08 17:13:51 scheduler task 1dc90817 (flow cb2c7a28): loading (try 0): successful, next state: submitting
2021/07/08 17:13:51 scheduler task 18db9c9a (flow edcaa27c): loaded val<.=f8536a0c 35.4MiB>
2021/07/08 17:13:51 scheduler task 36d6431d (flow 589a2296): loaded val<.=6ee717c7 35.4MiB>
2021/07/08 17:13:51 scheduler task 1dc90817 (flow cb2c7a28): submitting (try 0): started
2021/07/08 17:13:51 scheduler task b5a99eab (flow dfc4a546): loaded val<.=0fcd9fb2 35.4MiB>
2021/07/08 17:13:51 scheduler task 77caf1b8 (flow 4855c020): loaded val<.=3f9fb04a 35.4MiB>
2021/07/08 17:13:51 scheduler task 9299bf20 (flow db3942f3): loaded val<.=9047c8ca 35.4MiB>
2021/07/08 17:13:51 scheduler task b5a99eab (flow dfc4a546): loading (try 0): successful, next state: submitting
2021/07/08 17:13:51 scheduler task 36d6431d (flow 589a2296): loaded val<.=95736b85 35.4MiB>
2021/07/08 17:13:51 scheduler task f2bf54fd (flow d73b86a9): loaded val<.=1d8f8082 35.4MiB>
2021/07/08 17:13:51 scheduler task 36d6431d (flow 589a2296): loading (try 0): successful, next state: submitting
2021/07/08 17:13:51 scheduler task b5a99eab (flow dfc4a546): submitting (try 0): started
2021/07/08 17:13:51 scheduler task 36d6431d (flow 589a2296): submitting (try 0): started
2021/07/08 17:13:51 scheduler task b79979ad (flow 627a1f3f): loaded val<.=6823efd1 35.4MiB>
2021/07/08 17:13:51 scheduler task 349d60d9 (flow 61ea32de): loaded val<.=4bf00db9 35.4MiB>
2021/07/08 17:13:51 scheduler task 349d60d9 (flow 61ea32de): loading (try 0): successful, next state: submitting
2021/07/08 17:13:51 scheduler task d6a5ea9f (flow bc6da4cb): loaded val<.=1c77f05a 35.4MiB>
2021/07/08 17:13:51 scheduler task 349d60d9 (flow 61ea32de): submitting (try 0): started
2021/07/08 17:13:51 scheduler task 3f55473f (flow 3d776298): loaded val<.=e1c8127b 35.4MiB>
2021/07/08 17:13:51 scheduler task 51d530dd (flow 9adf3c04): loaded val<.=62ed5ffd 35.4MiB>
2021/07/08 17:13:51 scheduler task a6a27466 (flow 1d245d3d): loaded val<.=1c56f829 35.4MiB>
2021/07/08 17:13:51 scheduler task f992ad8d (flow b7fedadc): loaded val<.=d5cd0d35 35.4MiB>
2021/07/08 17:13:51 scheduler task 094c83a9 (flow 0455dc2c): loaded val<.=734220a9 35.4MiB>
2021/07/08 17:13:51 scheduler task 9299bf20 (flow db3942f3): loaded val<.=d09f29d0 35.4MiB>
2021/07/08 17:13:51 scheduler task 9299bf20 (flow db3942f3): loading (try 0): successful, next state: submitting
2021/07/08 17:13:51 scheduler task adc32aa7 (flow 3ba0729e): loaded val<.=32f12b48 35.4MiB>
2021/07/08 17:13:51 scheduler task 51d530dd (flow 9adf3c04): loaded val<.=c2a3550c 35.4MiB>
2021/07/08 17:13:51 scheduler task 51d530dd (flow 9adf3c04): loading (try 0): successful, next state: submitting
2021/07/08 17:13:51 scheduler task a1216deb (flow a6081c46): loaded val<.=4fbd7cf7 35.4MiB>
2021/07/08 17:13:51 scheduler task a1216deb (flow a6081c46): loading (try 0): successful, next state: submitting
2021/07/08 17:13:51 scheduler task d038551e (flow 2ad2ef89): loaded val<.=b7f5c2cc 35.4MiB>
2021/07/08 17:13:51 scheduler task 9299bf20 (flow db3942f3): submitting (try 0): started
2021/07/08 17:13:51 scheduler task 6d0b8c8b (flow 8af16490): loaded val<.=76900d5c 35.4MiB>
2021/07/08 17:13:51 scheduler task 590eb55e (flow bdb75ce9): loaded val<.=9833b6a7 35.4MiB>
2021/07/08 17:13:51 scheduler task 590eb55e (flow bdb75ce9): loading (try 0): successful, next state: submitting
2021/07/08 17:13:51 scheduler task 51d530dd (flow 9adf3c04): submitting (try 0): started
2021/07/08 17:13:51 scheduler task 1f5b8fb7 (flow 18bb98c1): loaded val<.=fa3f6bc5 35.4MiB>
2021/07/08 17:13:51 scheduler task 1f5b8fb7 (flow 18bb98c1): loading (try 0): successful, next state: submitting
2021/07/08 17:13:51 scheduler task 6b13fa0f (flow 7b3d1113): loaded val<.=ec34847a 35.4MiB>
2021/07/08 17:13:51 scheduler task aae9bef3 (flow 5c374ba7): loaded val<.=3117cc46 35.4MiB>
2021/07/08 17:13:51 scheduler task 18db9c9a (flow edcaa27c): loaded val<.=37aad99a 35.4MiB>
2021/07/08 17:13:51 scheduler task 18db9c9a (flow edcaa27c): loading (try 0): successful, next state: submitting
2021/07/08 17:13:51 scheduler task 094c83a9 (flow 0455dc2c): loaded val<.=ac35f10e 35.4MiB>
2021/07/08 17:13:51 scheduler task 094c83a9 (flow 0455dc2c): loading (try 0): successful, next state: submitting
2021/07/08 17:13:51 scheduler task a1216deb (flow a6081c46): submitting (try 0): started
2021/07/08 17:13:51 scheduler task f2bf54fd (flow d73b86a9): loaded val<.=a9315a7c 35.4MiB>
2021/07/08 17:13:51 scheduler task f2bf54fd (flow d73b86a9): loading (try 0): successful, next state: submitting
2021/07/08 17:13:51 scheduler task a6a27466 (flow 1d245d3d): loaded val<.=5d95e537 35.4MiB>
2021/07/08 17:13:51 scheduler task adc32aa7 (flow 3ba0729e): loaded val<.=a2d61145 35.4MiB>
2021/07/08 17:13:51 scheduler task 151a9227 (flow b10d32be): loaded val<.=abdc8796 35.4MiB>
2021/07/08 17:13:51 scheduler task adc32aa7 (flow 3ba0729e): loading (try 0): successful, next state: submitting
2021/07/08 17:13:51 scheduler task 151a9227 (flow b10d32be): loading (try 0): successful, next state: submitting
2021/07/08 17:13:51 scheduler task a6a27466 (flow 1d245d3d): loading (try 0): successful, next state: submitting
2021/07/08 17:13:51 scheduler task 6d0b8c8b (flow 8af16490): loaded val<.=7bc3c3a6 35.4MiB>
2021/07/08 17:13:51 scheduler task 6d0b8c8b (flow 8af16490): loading (try 0): successful, next state: submitting
2021/07/08 17:13:51 scheduler task 590eb55e (flow bdb75ce9): submitting (try 0): started
2021/07/08 17:13:51 scheduler task b79979ad (flow 627a1f3f): loaded val<.=f58e90da 35.4MiB>
2021/07/08 17:13:51 scheduler task b79979ad (flow 627a1f3f): loading (try 0): successful, next state: submitting
2021/07/08 17:13:51 scheduler task 1f5b8fb7 (flow 18bb98c1): submitting (try 0): started
2021/07/08 17:13:51 scheduler task 18db9c9a (flow edcaa27c): submitting (try 0): started
2021/07/08 17:13:51 scheduler task 094c83a9 (flow 0455dc2c): submitting (try 0): started
2021/07/08 17:13:51 scheduler task ba13af1f (flow 91ed633a): loaded val<.=2a717da2 35.4MiB>
2021/07/08 17:13:51 scheduler task f992ad8d (flow b7fedadc): loaded val<.=cb85b10f 35.4MiB>
2021/07/08 17:13:51 scheduler task f992ad8d (flow b7fedadc): loading (try 0): successful, next state: submitting
2021/07/08 17:13:51 scheduler task 777deb41 (flow a83135ea): loaded val<.=e951aa6e 35.4MiB>
2021/07/08 17:13:51 scheduler task bcd979c9 (flow bb3f7b07): loaded val<.=58a40951 35.4MiB>
2021/07/08 17:13:51 scheduler task f2bf54fd (flow d73b86a9): submitting (try 0): started
2021/07/08 17:13:51 scheduler task 282e35f8 (flow 081e5dc5): loaded val<.=dd90be64 35.4MiB>
2021/07/08 17:13:51 scheduler task 282e35f8 (flow 081e5dc5): loading (try 0): successful, next state: submitting
2021/07/08 17:13:51 scheduler task adc32aa7 (flow 3ba0729e): submitting (try 0): started
2021/07/08 17:13:51 scheduler task 151a9227 (flow b10d32be): submitting (try 0): started
2021/07/08 17:13:51 scheduler task cbb63d8b (flow 12c709ba): loaded val<.=8f1c55f9 35.4MiB>
2021/07/08 17:13:51 scheduler task a6a27466 (flow 1d245d3d): submitting (try 0): started
2021/07/08 17:13:51 scheduler task d038551e (flow 2ad2ef89): loaded val<.=e6bd128b 35.4MiB>
2021/07/08 17:13:51 scheduler task d038551e (flow 2ad2ef89): loading (try 0): successful, next state: submitting
2021/07/08 17:13:51 scheduler task 6d0b8c8b (flow 8af16490): submitting (try 0): started
2021/07/08 17:13:51 scheduler task b79979ad (flow 627a1f3f): submitting (try 0): started
2021/07/08 17:13:51 scheduler task cbb63d8b (flow 12c709ba): loaded val<.=90ff8c07 35.4MiB>
2021/07/08 17:13:51 scheduler task 6b13fa0f (flow 7b3d1113): loaded val<.=c1153255 35.4MiB>
2021/07/08 17:13:51 scheduler task 6b13fa0f (flow 7b3d1113): loading (try 0): successful, next state: submitting
2021/07/08 17:13:51 scheduler task 777deb41 (flow a83135ea): loaded val<.=27a0d8bc 35.4MiB>
2021/07/08 17:13:51 scheduler task cbb63d8b (flow 12c709ba): loading (try 0): successful, next state: submitting
2021/07/08 17:13:51 scheduler task 777deb41 (flow a83135ea): loading (try 0): successful, next state: submitting
2021/07/08 17:13:51 scheduler task f992ad8d (flow b7fedadc): submitting (try 0): started
2021/07/08 17:13:51 scheduler task 282e35f8 (flow 081e5dc5): submitting (try 0): started
2021/07/08 17:13:51 scheduler task d038551e (flow 2ad2ef89): submitting (try 0): started
2021/07/08 17:13:51 scheduler task 92cb3014 (flow e38f563a): loaded val<.=ad4e246d 35.4MiB>
2021/07/08 17:13:51 scheduler task 6b13fa0f (flow 7b3d1113): submitting (try 0): started
2021/07/08 17:13:51 scheduler task cbb63d8b (flow 12c709ba): submitting (try 0): started
2021/07/08 17:13:51 scheduler task 777deb41 (flow a83135ea): submitting (try 0): started
2021/07/08 17:13:51 scheduler task ba13af1f (flow 91ed633a): loaded val<.=7750acfd 35.4MiB>
2021/07/08 17:13:51 scheduler task ba13af1f (flow 91ed633a): loading (try 0): successful, next state: submitting
2021/07/08 17:13:51 scheduler task ba13af1f (flow 91ed633a): submitting (try 0): started
2021/07/08 17:13:51 scheduler task 2cd48a42 (flow ab63e124): loaded val<.=f428bde4 35.4MiB>
2021/07/08 17:13:51 scheduler task 2ba58d45 (flow 1463162b): loaded val<.=f991d5a5 35.4MiB>
2021/07/08 17:13:51 scheduler task 2ba58d45 (flow 1463162b): loading (try 0): successful, next state: submitting
2021/07/08 17:13:51 scheduler task 2ba58d45 (flow 1463162b): submitting (try 0): started
2021/07/08 17:13:51 scheduler task c5654e5c (flow ef41d477): loaded val<.=9dd2196a 35.4MiB>
2021/07/08 17:13:51 scheduler task d280101a (flow 2063d14e): loaded val<.=0fc36eec 35.4MiB>
2021/07/08 17:13:51 scheduler task 92cb3014 (flow e38f563a): loaded val<.=339a6812 35.4MiB>
2021/07/08 17:13:51 scheduler task 92cb3014 (flow e38f563a): loading (try 0): successful, next state: submitting
2021/07/08 17:13:51 scheduler task 92cb3014 (flow e38f563a): submitting (try 0): started
2021/07/08 17:13:51 scheduler task 6f663194 (flow bb352724): loaded val<.=9eabe52d 35.4MiB>
2021/07/08 17:13:51 scheduler task d6a5ea9f (flow bc6da4cb): loaded val<.=01d512c5 35.4MiB>
2021/07/08 17:13:51 scheduler task d6a5ea9f (flow bc6da4cb): loading (try 0): successful, next state: submitting
2021/07/08 17:13:52 scheduler task d6a5ea9f (flow bc6da4cb): submitting (try 0): started
2021/07/08 17:13:52 scheduler task e9888daf (flow ec27422b): loaded val<.=50d93b59 35.4MiB>
2021/07/08 17:13:52 scheduler task e9888daf (flow ec27422b): loaded val<.=35130427 35.4MiB>
2021/07/08 17:13:52 scheduler task e9888daf (flow ec27422b): loading (try 0): successful, next state: submitting
2021/07/08 17:13:52 scheduler task e9888daf (flow ec27422b): submitting (try 0): started
2021/07/08 17:13:52 scheduler task d280101a (flow 2063d14e): loaded val<.=65fc32af 35.4MiB>
2021/07/08 17:13:52 scheduler task d280101a (flow 2063d14e): loading (try 0): successful, next state: submitting
2021/07/08 17:13:52 scheduler task 77caf1b8 (flow 4855c020): loaded val<.=fec7dc60 35.4MiB>
2021/07/08 17:13:52 scheduler task 77caf1b8 (flow 4855c020): loading (try 0): successful, next state: submitting
2021/07/08 17:13:52 scheduler task d280101a (flow 2063d14e): submitting (try 0): started
2021/07/08 17:13:52 scheduler task bcd66609 (flow 365c94e8): loaded val<.=3aa7d596 35.4MiB>
2021/07/08 17:13:52 scheduler task 77caf1b8 (flow 4855c020): submitting (try 0): started
2021/07/08 17:13:52 scheduler task 2cd48a42 (flow ab63e124): loaded val<.=d76ee65c 35.4MiB>
2021/07/08 17:13:52 scheduler task 2cd48a42 (flow ab63e124): loading (try 0): successful, next state: submitting
2021/07/08 17:13:52 scheduler task 2cd48a42 (flow ab63e124): submitting (try 0): started
2021/07/08 17:13:52 scheduler task 34c0f138 (flow 806765de): loaded val<.=be25e98d 35.4MiB>
2021/07/08 17:13:52 scheduler task c129edfe (flow 9ee68a11): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:52 scheduler task 92cb3014 (flow e38f563a): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:52 scheduler task 2cc05ef0 (flow 78f39472): loaded val<.=be168e49 35.4MiB>
2021/07/08 17:13:52 scheduler task c129edfe (flow 9ee68a11): waiting for completion (try 0): started
2021/07/08 17:13:52  ->  n100.r07.s022.Main.out_file 9ee68a11 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:52 n100.r07.s022.Main.out_file 9ee68a11 n100/r07/n100.r07.s022.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2071b5dcdffad10024bd7c18d35e53107a8041b904125d2c61d921f38f2eae00
	sha256:9ee68a119898f979c9954b435537558ed757f1edb19953bf9f8cad6c905ba41b
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c129edfe6e86e77c1582ecb0f31839cc5604456fb2edd804ee9cd14f38ad91c6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s022_output"
	    wget -O "n100.r07.s022_output/n100.r07.s022.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s022_output/n100.r07.s022.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s022_output/n100.r07.s022.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s022_output/n100.r07.s022.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s022_output/n100.r07.s022.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s022_output/n100.r07.s022.reference.fas" "n100.r07.s022_output/n100.r07.s022.fq1.fastq" "n100.r07.s022_output/n100.r07.s022.fq2.fastq" | samtools view -bS - > "n100.r07.s022_output/n100.r07.s022.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s022_output/n100.r07.s022.untrimmed.sorted.bam" "n100.r07.s022_output/n100.r07.s022.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s022_output/n100.r07.s022.untrimmed.sorted.bam" -b "n100.r07.s022_output/n100.r07.s022.primers.bed" -p "n100.r07.s022_output/n100.r07.s022.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s022_output/n100.r07.s022.trimmed.sorted.bam" "n100.r07.s022_output/n100.r07.s022.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s022_output/n100.r07.s022.reference.fas" "n100.r07.s022_output/n100.r07.s022.trimmed.sorted.bam" > "n100.r07.s022_output/n100.r07.s022.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s022_output/n100.r07.s022.reference.fas" --call-indels "n100.r07.s022_output/n100.r07.s022.trimmed.sorted.bam" > "n100.r07.s022_output/n100.r07.s022.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s022_output/n100.r07.s022.trimmed.sorted.bam" > "n100.r07.s022_output/n100.r07.s022.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s022_output/n100.r07.s022.depth.txt" "n100.r07.s022_output/n100.r07.s022.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s022_output/n100.r07.s022.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s022_output/n100.r07.s022.reference.fas" | bcftools consensus -m "n100.r07.s022_output/n100.r07.s022.low_depth.tsv" tmp.vcf.gz > "n100.r07.s022_output/n100.r07.s022.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s022_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:52 scheduler task 92cb3014 (flow e38f563a): waiting for completion (try 0): started
2021/07/08 17:13:52  ->  n100.r07.s043.Main.out_file e38f563a exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:52 n100.r07.s043.Main.out_file e38f563a n100/r07/n100.r07.s043.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c02a9cd761f3a882ef155d5d7c1e51bad350707bf643cac65eaee1a5b95d6649
	sha256:e38f563a72116eaf8bbdb7236cdebd2e987907c8d1c5ee3d3a2840bcb67f0a0b
	ec2-3-139-104-158.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/92cb30146ce63f7d5f00139e20d0de6860eb9a0b9a885af92b64c1d35753c6f7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s043_output"
	    wget -O "n100.r07.s043_output/n100.r07.s043.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s043_output/n100.r07.s043.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s043_output/n100.r07.s043.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s043_output/n100.r07.s043.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s043_output/n100.r07.s043.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s043_output/n100.r07.s043.reference.fas" "n100.r07.s043_output/n100.r07.s043.fq1.fastq" "n100.r07.s043_output/n100.r07.s043.fq2.fastq" | samtools view -bS - > "n100.r07.s043_output/n100.r07.s043.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s043_output/n100.r07.s043.untrimmed.sorted.bam" "n100.r07.s043_output/n100.r07.s043.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s043_output/n100.r07.s043.untrimmed.sorted.bam" -b "n100.r07.s043_output/n100.r07.s043.primers.bed" -p "n100.r07.s043_output/n100.r07.s043.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s043_output/n100.r07.s043.trimmed.sorted.bam" "n100.r07.s043_output/n100.r07.s043.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s043_output/n100.r07.s043.reference.fas" "n100.r07.s043_output/n100.r07.s043.trimmed.sorted.bam" > "n100.r07.s043_output/n100.r07.s043.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s043_output/n100.r07.s043.reference.fas" --call-indels "n100.r07.s043_output/n100.r07.s043.trimmed.sorted.bam" > "n100.r07.s043_output/n100.r07.s043.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s043_output/n100.r07.s043.trimmed.sorted.bam" > "n100.r07.s043_output/n100.r07.s043.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s043_output/n100.r07.s043.depth.txt" "n100.r07.s043_output/n100.r07.s043.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s043_output/n100.r07.s043.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s043_output/n100.r07.s043.reference.fas" | bcftools consensus -m "n100.r07.s043_output/n100.r07.s043.low_depth.tsv" tmp.vcf.gz > "n100.r07.s043_output/n100.r07.s043.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s043_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:52 scheduler task d01e6baf (flow 1bff83e3): loaded val<.=1df1c94f 35.4MiB>
2021/07/08 17:13:52 scheduler task a3f46aee (flow 956ffc0d): loaded val<.=e2f6905b 35.4MiB>
2021/07/08 17:13:52 scheduler task 95756e2e (flow 61093b34): loaded val<.=0bcd7d71 35.4MiB>
2021/07/08 17:13:52 scheduler task c0a2e047 (flow 281a5421): loaded val<.=05d0b7bf 35.4MiB>
2021/07/08 17:13:52 scheduler task e7923c9a (flow 2a86d1d5): loaded val<.=99114633 35.4MiB>
2021/07/08 17:13:52 scheduler task db4186ab (flow 9e638bb7): loaded val<.=6bc90a8d 35.4MiB>
2021/07/08 17:13:52 scheduler task 6c805c91 (flow 422def09): loaded val<.=fedb7623 35.4MiB>
2021/07/08 17:13:52 scheduler task bcd66609 (flow 365c94e8): loaded val<.=00e45036 35.4MiB>
2021/07/08 17:13:52 scheduler task bcd66609 (flow 365c94e8): loading (try 0): successful, next state: submitting
2021/07/08 17:13:52 scheduler task bcd66609 (flow 365c94e8): submitting (try 0): started
2021/07/08 17:13:52 scheduler task 30bfcda0 (flow 878d6e7b): loaded val<.=f1f23975 35.4MiB>
2021/07/08 17:13:52 scheduler task 4cf5300c (flow 9257a616): loaded val<.=6769094a 35.4MiB>
2021/07/08 17:13:52 scheduler task 3c2fce3f (flow 3d7c11ce): loaded val<.=a198c9c4 35.4MiB>
2021/07/08 17:13:52 scheduler task 1d2e33c5 (flow e07d1478): loaded val<.=09ed927d 35.4MiB>
2021/07/08 17:13:52 scheduler task cbc7ffd0 (flow f84bcf3d): loaded val<.=7f34a5fa 35.4MiB>
2021/07/08 17:13:52 scheduler task 5008561a (flow 3ac59401): loaded val<.=e251d632 35.4MiB>
2021/07/08 17:13:52 scheduler task 20f4384f (flow 6fbc481f): loaded val<.=e6643112 35.4MiB>
2021/07/08 17:13:52 scheduler task 3a850123 (flow f498b7de): loaded val<.=85958612 35.4MiB>
2021/07/08 17:13:52 scheduler task 3a850123 (flow f498b7de): loaded val<.=01684b42 35.4MiB>
2021/07/08 17:13:52 scheduler task 3a850123 (flow f498b7de): loading (try 0): successful, next state: submitting
2021/07/08 17:13:52 scheduler task d01e6baf (flow 1bff83e3): loaded val<.=52bc0956 35.4MiB>
2021/07/08 17:13:52 scheduler task d01e6baf (flow 1bff83e3): loading (try 0): successful, next state: submitting
2021/07/08 17:13:52 scheduler task 3d94ce3a (flow 60c3d9b3): loaded val<.=3327d968 35.4MiB>
2021/07/08 17:13:52 scheduler task ac285b56 (flow d679cd61): loaded val<.=32215303 35.4MiB>
2021/07/08 17:13:52 scheduler task 4f4f4171 (flow 522bd866): loaded val<.=2b450fea 35.4MiB>
2021/07/08 17:13:52 scheduler task 3a850123 (flow f498b7de): submitting (try 0): started
2021/07/08 17:13:52 scheduler task 004d43f9 (flow 51e59bfc): loaded val<.=5b8e6a38 35.4MiB>
2021/07/08 17:13:52 scheduler task e9888daf (flow ec27422b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:52 scheduler task d01e6baf (flow 1bff83e3): submitting (try 0): started
2021/07/08 17:13:52 scheduler task e9888daf (flow ec27422b): waiting for completion (try 0): started
2021/07/08 17:13:52  ->  n100.r07.s060.Main.out_file ec27422b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:52 n100.r07.s060.Main.out_file ec27422b n100/r07/n100.r07.s060.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:353cb6dd11813103413e59e77cc6d17d0a0183a6170790d9fcea62a2401ffe9b
	sha256:ec27422b4aff5da534cfe2549f021359bd189922ca9e9660fbeebe972661d521
	ec2-3-139-104-158.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e9888daf977837251eb24b4b93dcbff468eff6502c1db46106e32093f2e565b5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s060_output"
	    wget -O "n100.r07.s060_output/n100.r07.s060.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s060_output/n100.r07.s060.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s060_output/n100.r07.s060.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s060_output/n100.r07.s060.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s060_output/n100.r07.s060.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s060_output/n100.r07.s060.reference.fas" "n100.r07.s060_output/n100.r07.s060.fq1.fastq" "n100.r07.s060_output/n100.r07.s060.fq2.fastq" | samtools view -bS - > "n100.r07.s060_output/n100.r07.s060.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s060_output/n100.r07.s060.untrimmed.sorted.bam" "n100.r07.s060_output/n100.r07.s060.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s060_output/n100.r07.s060.untrimmed.sorted.bam" -b "n100.r07.s060_output/n100.r07.s060.primers.bed" -p "n100.r07.s060_output/n100.r07.s060.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s060_output/n100.r07.s060.trimmed.sorted.bam" "n100.r07.s060_output/n100.r07.s060.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s060_output/n100.r07.s060.reference.fas" "n100.r07.s060_output/n100.r07.s060.trimmed.sorted.bam" > "n100.r07.s060_output/n100.r07.s060.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s060_output/n100.r07.s060.reference.fas" --call-indels "n100.r07.s060_output/n100.r07.s060.trimmed.sorted.bam" > "n100.r07.s060_output/n100.r07.s060.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s060_output/n100.r07.s060.trimmed.sorted.bam" > "n100.r07.s060_output/n100.r07.s060.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s060_output/n100.r07.s060.depth.txt" "n100.r07.s060_output/n100.r07.s060.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s060_output/n100.r07.s060.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s060_output/n100.r07.s060.reference.fas" | bcftools consensus -m "n100.r07.s060_output/n100.r07.s060.low_depth.tsv" tmp.vcf.gz > "n100.r07.s060_output/n100.r07.s060.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s060_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:52 scheduler task 964686c2 (flow 1be4cbdf): loaded val<.=a735578a 35.4MiB>
2021/07/08 17:13:52 scheduler task 1dc90817 (flow cb2c7a28): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:52 scheduler task fd193e05 (flow e299776e): loaded val<.=82274f42 35.4MiB>
2021/07/08 17:13:52 scheduler task 46b3d1f4 (flow 74bc54ab): loaded val<.=3dde503b 35.4MiB>
2021/07/08 17:13:52 scheduler task 1dc90817 (flow cb2c7a28): waiting for completion (try 0): started
2021/07/08 17:13:52  ->  n100.r07.s059.Main.out_file cb2c7a28 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:52 n100.r07.s059.Main.out_file cb2c7a28 n100/r07/n100.r07.s059.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:63ab1deda5a427873755db40595c1a4e203c039af0f6742ce29102eefad3e27c
	sha256:cb2c7a28f9b6d5fd14cf38526fed9cf605fc9863fdd9903cff1a161aca0118cc
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1dc90817db49cbb39d5d329056443a7fb97d3ebaef34228700262715bb6cec48
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s059_output"
	    wget -O "n100.r07.s059_output/n100.r07.s059.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s059_output/n100.r07.s059.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s059_output/n100.r07.s059.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s059_output/n100.r07.s059.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s059_output/n100.r07.s059.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s059_output/n100.r07.s059.reference.fas" "n100.r07.s059_output/n100.r07.s059.fq1.fastq" "n100.r07.s059_output/n100.r07.s059.fq2.fastq" | samtools view -bS - > "n100.r07.s059_output/n100.r07.s059.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s059_output/n100.r07.s059.untrimmed.sorted.bam" "n100.r07.s059_output/n100.r07.s059.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s059_output/n100.r07.s059.untrimmed.sorted.bam" -b "n100.r07.s059_output/n100.r07.s059.primers.bed" -p "n100.r07.s059_output/n100.r07.s059.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s059_output/n100.r07.s059.trimmed.sorted.bam" "n100.r07.s059_output/n100.r07.s059.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s059_output/n100.r07.s059.reference.fas" "n100.r07.s059_output/n100.r07.s059.trimmed.sorted.bam" > "n100.r07.s059_output/n100.r07.s059.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s059_output/n100.r07.s059.reference.fas" --call-indels "n100.r07.s059_output/n100.r07.s059.trimmed.sorted.bam" > "n100.r07.s059_output/n100.r07.s059.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s059_output/n100.r07.s059.trimmed.sorted.bam" > "n100.r07.s059_output/n100.r07.s059.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s059_output/n100.r07.s059.depth.txt" "n100.r07.s059_output/n100.r07.s059.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s059_output/n100.r07.s059.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s059_output/n100.r07.s059.reference.fas" | bcftools consensus -m "n100.r07.s059_output/n100.r07.s059.low_depth.tsv" tmp.vcf.gz > "n100.r07.s059_output/n100.r07.s059.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s059_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:52 scheduler task 2623b266 (flow 26192454): loaded val<.=ec479eab 35.4MiB>
2021/07/08 17:13:52 scheduler task 3c2fce3f (flow 3d7c11ce): loaded val<.=68f901d7 35.4MiB>
2021/07/08 17:13:52 scheduler task 3c2fce3f (flow 3d7c11ce): loading (try 0): successful, next state: submitting
2021/07/08 17:13:52 scheduler task 5f2ce7d1 (flow e0ab9d71): loaded val<.=783d723f 35.4MiB>
2021/07/08 17:13:52 scheduler task 3c2fce3f (flow 3d7c11ce): submitting (try 0): started
2021/07/08 17:13:52 scheduler task 4cf5300c (flow 9257a616): loaded val<.=75b9b4c5 35.4MiB>
2021/07/08 17:13:52 scheduler task 4cf5300c (flow 9257a616): loading (try 0): successful, next state: submitting
2021/07/08 17:13:52 scheduler task e7923c9a (flow 2a86d1d5): loaded val<.=f9df0cf9 35.4MiB>
2021/07/08 17:13:52 scheduler task 6c7d8d18 (flow 7d51370c): loaded val<.=48c18dfb 35.4MiB>
2021/07/08 17:13:52 scheduler task f1fdc12e (flow d483a765): loaded val<.=fe9867af 35.4MiB>
2021/07/08 17:13:52 scheduler task e7923c9a (flow 2a86d1d5): loading (try 0): successful, next state: submitting
2021/07/08 17:13:52 scheduler task 57e27363 (flow cd67159a): loaded val<.=794f0f86 35.4MiB>
2021/07/08 17:13:52 scheduler task c9898fc4 (flow 8efd3fba): loaded val<.=e74adf89 35.4MiB>
2021/07/08 17:13:52 scheduler task 4cf5300c (flow 9257a616): submitting (try 0): started
2021/07/08 17:13:52 scheduler task 334f3996 (flow a9afc8a9): loaded val<.=fce026f4 35.4MiB>
2021/07/08 17:13:52 scheduler task e89fdb62 (flow 85485140): loaded val<.=c9cada21 35.4MiB>
2021/07/08 17:13:52 scheduler task e7923c9a (flow 2a86d1d5): submitting (try 0): started
2021/07/08 17:13:52 scheduler task 31906a42 (flow 667619f5): loaded val<.=1dd171f7 35.4MiB>
2021/07/08 17:13:52 scheduler task eebbb090 (flow 2cedb108): loaded val<.=e880845f 35.4MiB>
2021/07/08 17:13:52 scheduler task 60169fd2 (flow cd6e30ef): loaded val<.=bc8e034c 35.4MiB>
2021/07/08 17:13:52 scheduler task fb62fd75 (flow 91d65e11): loaded val<.=7878e91a 35.4MiB>
2021/07/08 17:13:52 scheduler task 5f2ce7d1 (flow e0ab9d71): loaded val<.=c2fbfa4d 35.4MiB>
2021/07/08 17:13:52 scheduler task 8168a241 (flow 761ac0e3): loaded val<.=b550697f 35.4MiB>
2021/07/08 17:13:52 scheduler task e9711b6d (flow 4741c76b): loaded val<.=0c0f34ea 35.4MiB>
2021/07/08 17:13:52 scheduler task 5f2ce7d1 (flow e0ab9d71): loading (try 0): successful, next state: submitting
2021/07/08 17:13:52 scheduler task 34c0f138 (flow 806765de): loaded val<.=757efb70 35.4MiB>
2021/07/08 17:13:52 scheduler task 852314b6 (flow d13a1791): loaded val<.=883e6deb 35.4MiB>
2021/07/08 17:13:52 scheduler task 34c0f138 (flow 806765de): loading (try 0): successful, next state: submitting
2021/07/08 17:13:52 scheduler task 3fa58d8b (flow 461bf7dc): loaded val<.=00ec5fb7 35.4MiB>
2021/07/08 17:13:52 scheduler task 5f2ce7d1 (flow e0ab9d71): submitting (try 0): started
2021/07/08 17:13:52 scheduler task 34c0f138 (flow 806765de): submitting (try 0): started
2021/07/08 17:13:52 scheduler task bcd979c9 (flow bb3f7b07): loaded val<.=51c28374 35.4MiB>
2021/07/08 17:13:52 scheduler task bcd979c9 (flow bb3f7b07): loading (try 0): successful, next state: submitting
2021/07/08 17:13:52 scheduler task bcd979c9 (flow bb3f7b07): submitting (try 0): started
2021/07/08 17:13:52 scheduler task 57e27363 (flow cd67159a): loaded val<.=acfa43b8 35.4MiB>
2021/07/08 17:13:52 scheduler task 57e27363 (flow cd67159a): loading (try 0): successful, next state: submitting
2021/07/08 17:13:52 scheduler task fd193e05 (flow e299776e): loaded val<.=77c9e9bd 35.4MiB>
2021/07/08 17:13:52 scheduler task fd193e05 (flow e299776e): loading (try 0): successful, next state: submitting
2021/07/08 17:13:52 scheduler task fb62fd75 (flow 91d65e11): loaded val<.=bc338827 35.4MiB>
2021/07/08 17:13:52 scheduler task fb62fd75 (flow 91d65e11): loading (try 0): successful, next state: submitting
2021/07/08 17:13:52 scheduler task 57e27363 (flow cd67159a): submitting (try 0): started
2021/07/08 17:13:52 scheduler task fd193e05 (flow e299776e): submitting (try 0): started
2021/07/08 17:13:52 scheduler task fb62fd75 (flow 91d65e11): submitting (try 0): started
2021/07/08 17:13:52 scheduler task 0d5c5330 (flow c96780e2): loaded val<.=cffa8d80 35.4MiB>
2021/07/08 17:13:52 scheduler task 0b40294a (flow d3087af8): loaded val<.=ad708fbc 35.4MiB>
2021/07/08 17:13:52 scheduler task f1fdc12e (flow d483a765): loaded val<.=b55745e4 35.4MiB>
2021/07/08 17:13:52 scheduler task f1fdc12e (flow d483a765): loading (try 0): successful, next state: submitting
2021/07/08 17:13:52 scheduler task f1fdc12e (flow d483a765): submitting (try 0): started
2021/07/08 17:13:52 scheduler task d280101a (flow 2063d14e): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:52 scheduler task b5a99eab (flow dfc4a546): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:52 scheduler task d280101a (flow 2063d14e): waiting for completion (try 0): started
2021/07/08 17:13:52  ->  n100.r07.s080.Main.out_file 2063d14e exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:52 n100.r07.s080.Main.out_file 2063d14e n100/r07/n100.r07.s080.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f0be3806e859b3e5bc07cd4d49082f2ebf14a538565c39ab878a475c09c2f044
	sha256:2063d14e163178f019b120d97d1720d47e42470718d6eb8ea7538443008e7dba
	ec2-3-139-104-158.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d280101af85cdc0e1265ed4a0103c252d807c28d1ca9a90ea2defa21764f16da
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s080_output"
	    wget -O "n100.r07.s080_output/n100.r07.s080.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s080_output/n100.r07.s080.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s080_output/n100.r07.s080.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s080_output/n100.r07.s080.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s080_output/n100.r07.s080.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s080_output/n100.r07.s080.reference.fas" "n100.r07.s080_output/n100.r07.s080.fq1.fastq" "n100.r07.s080_output/n100.r07.s080.fq2.fastq" | samtools view -bS - > "n100.r07.s080_output/n100.r07.s080.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s080_output/n100.r07.s080.untrimmed.sorted.bam" "n100.r07.s080_output/n100.r07.s080.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s080_output/n100.r07.s080.untrimmed.sorted.bam" -b "n100.r07.s080_output/n100.r07.s080.primers.bed" -p "n100.r07.s080_output/n100.r07.s080.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s080_output/n100.r07.s080.trimmed.sorted.bam" "n100.r07.s080_output/n100.r07.s080.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s080_output/n100.r07.s080.reference.fas" "n100.r07.s080_output/n100.r07.s080.trimmed.sorted.bam" > "n100.r07.s080_output/n100.r07.s080.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s080_output/n100.r07.s080.reference.fas" --call-indels "n100.r07.s080_output/n100.r07.s080.trimmed.sorted.bam" > "n100.r07.s080_output/n100.r07.s080.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s080_output/n100.r07.s080.trimmed.sorted.bam" > "n100.r07.s080_output/n100.r07.s080.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s080_output/n100.r07.s080.depth.txt" "n100.r07.s080_output/n100.r07.s080.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s080_output/n100.r07.s080.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s080_output/n100.r07.s080.reference.fas" | bcftools consensus -m "n100.r07.s080_output/n100.r07.s080.low_depth.tsv" tmp.vcf.gz > "n100.r07.s080_output/n100.r07.s080.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s080_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:52 scheduler task b5a99eab (flow dfc4a546): waiting for completion (try 0): started
2021/07/08 17:13:52  ->  n100.r07.s076.Main.out_file dfc4a546 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:52 n100.r07.s076.Main.out_file dfc4a546 n100/r07/n100.r07.s076.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0ef7187bcf46fc0f24e10767509492c3e6f8ede8676a16c42a29e70447264695
	sha256:dfc4a54648c3137df4b656eb3d9bf21f40efe7dbaf4c812e239734506abff74f
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b5a99eab44927caf6dc0dcd64156db2eb6ba5e71c7ed161e29dbbc2b59b4a9bb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s076_output"
	    wget -O "n100.r07.s076_output/n100.r07.s076.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s076_output/n100.r07.s076.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s076_output/n100.r07.s076.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s076_output/n100.r07.s076.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s076_output/n100.r07.s076.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s076_output/n100.r07.s076.reference.fas" "n100.r07.s076_output/n100.r07.s076.fq1.fastq" "n100.r07.s076_output/n100.r07.s076.fq2.fastq" | samtools view -bS - > "n100.r07.s076_output/n100.r07.s076.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s076_output/n100.r07.s076.untrimmed.sorted.bam" "n100.r07.s076_output/n100.r07.s076.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s076_output/n100.r07.s076.untrimmed.sorted.bam" -b "n100.r07.s076_output/n100.r07.s076.primers.bed" -p "n100.r07.s076_output/n100.r07.s076.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s076_output/n100.r07.s076.trimmed.sorted.bam" "n100.r07.s076_output/n100.r07.s076.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s076_output/n100.r07.s076.reference.fas" "n100.r07.s076_output/n100.r07.s076.trimmed.sorted.bam" > "n100.r07.s076_output/n100.r07.s076.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s076_output/n100.r07.s076.reference.fas" --call-indels "n100.r07.s076_output/n100.r07.s076.trimmed.sorted.bam" > "n100.r07.s076_output/n100.r07.s076.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s076_output/n100.r07.s076.trimmed.sorted.bam" > "n100.r07.s076_output/n100.r07.s076.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s076_output/n100.r07.s076.depth.txt" "n100.r07.s076_output/n100.r07.s076.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s076_output/n100.r07.s076.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s076_output/n100.r07.s076.reference.fas" | bcftools consensus -m "n100.r07.s076_output/n100.r07.s076.low_depth.tsv" tmp.vcf.gz > "n100.r07.s076_output/n100.r07.s076.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s076_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:52 scheduler task c9898fc4 (flow 8efd3fba): loaded val<.=8744f546 35.4MiB>
2021/07/08 17:13:52 scheduler task c9898fc4 (flow 8efd3fba): loading (try 0): successful, next state: submitting
2021/07/08 17:13:52 scheduler task 164261c5 (flow 441e1d42): loaded val<.=4330f9a1 35.4MiB>
2021/07/08 17:13:52 scheduler task 88d23280 (flow bbce7a63): loaded val<.=3e78a469 35.4MiB>
2021/07/08 17:13:52 scheduler task c9898fc4 (flow 8efd3fba): submitting (try 0): started
2021/07/08 17:13:52 scheduler task 10a99fae (flow 7b842208): loaded val<.=e47ef776 35.4MiB>
2021/07/08 17:13:52 scheduler task 5008561a (flow 3ac59401): loaded val<.=2de91597 35.4MiB>
2021/07/08 17:13:52 scheduler task 5008561a (flow 3ac59401): loading (try 0): successful, next state: submitting
2021/07/08 17:13:52 scheduler task 2cd48a42 (flow ab63e124): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:52 scheduler task 5008561a (flow 3ac59401): submitting (try 0): started
2021/07/08 17:13:52 scheduler task 2cd48a42 (flow ab63e124): waiting for completion (try 0): started
2021/07/08 17:13:52  ->  n100.r07.s040.Main.out_file ab63e124 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:52 n100.r07.s040.Main.out_file ab63e124 n100/r07/n100.r07.s040.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6a0b7e0c9a523888bb341f45ccc269f0605459dad19a1a114d736f4a4485ed2b
	sha256:ab63e124d35b27663a976ff3422374d1d496983ff3913058e13dd77909112d29
	ec2-3-139-104-158.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2cd48a423ff8d6203b7c3475d8a2a250a4a5c084c457c14a13a72718061ec3dd
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s040_output"
	    wget -O "n100.r07.s040_output/n100.r07.s040.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s040_output/n100.r07.s040.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s040_output/n100.r07.s040.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s040_output/n100.r07.s040.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s040_output/n100.r07.s040.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s040_output/n100.r07.s040.reference.fas" "n100.r07.s040_output/n100.r07.s040.fq1.fastq" "n100.r07.s040_output/n100.r07.s040.fq2.fastq" | samtools view -bS - > "n100.r07.s040_output/n100.r07.s040.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s040_output/n100.r07.s040.untrimmed.sorted.bam" "n100.r07.s040_output/n100.r07.s040.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s040_output/n100.r07.s040.untrimmed.sorted.bam" -b "n100.r07.s040_output/n100.r07.s040.primers.bed" -p "n100.r07.s040_output/n100.r07.s040.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s040_output/n100.r07.s040.trimmed.sorted.bam" "n100.r07.s040_output/n100.r07.s040.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s040_output/n100.r07.s040.reference.fas" "n100.r07.s040_output/n100.r07.s040.trimmed.sorted.bam" > "n100.r07.s040_output/n100.r07.s040.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s040_output/n100.r07.s040.reference.fas" --call-indels "n100.r07.s040_output/n100.r07.s040.trimmed.sorted.bam" > "n100.r07.s040_output/n100.r07.s040.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s040_output/n100.r07.s040.trimmed.sorted.bam" > "n100.r07.s040_output/n100.r07.s040.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s040_output/n100.r07.s040.depth.txt" "n100.r07.s040_output/n100.r07.s040.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s040_output/n100.r07.s040.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s040_output/n100.r07.s040.reference.fas" | bcftools consensus -m "n100.r07.s040_output/n100.r07.s040.low_depth.tsv" tmp.vcf.gz > "n100.r07.s040_output/n100.r07.s040.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s040_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:52 scheduler task 36d6431d (flow 589a2296): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:52 scheduler task 36d6431d (flow 589a2296): waiting for completion (try 0): started
2021/07/08 17:13:52  ->  n100.r07.s036.Main.out_file 589a2296 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:52 n100.r07.s036.Main.out_file 589a2296 n100/r07/n100.r07.s036.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1bc9b8580d00111c5a373ae30a28a3eb5afbf625a4cb38e5ad17bbade6b4478a
	sha256:589a22965af777c29cd6abc5622a3e474bd4b57aa40f22c8f6bbe3d4fecf19e8
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/36d6431daacb75d08e01d49365ffc66de9b08309e882d96714bdbfe44ca2ca98
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s036_output"
	    wget -O "n100.r07.s036_output/n100.r07.s036.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s036_output/n100.r07.s036.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s036_output/n100.r07.s036.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s036_output/n100.r07.s036.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s036_output/n100.r07.s036.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s036_output/n100.r07.s036.reference.fas" "n100.r07.s036_output/n100.r07.s036.fq1.fastq" "n100.r07.s036_output/n100.r07.s036.fq2.fastq" | samtools view -bS - > "n100.r07.s036_output/n100.r07.s036.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s036_output/n100.r07.s036.untrimmed.sorted.bam" "n100.r07.s036_output/n100.r07.s036.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s036_output/n100.r07.s036.untrimmed.sorted.bam" -b "n100.r07.s036_output/n100.r07.s036.primers.bed" -p "n100.r07.s036_output/n100.r07.s036.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s036_output/n100.r07.s036.trimmed.sorted.bam" "n100.r07.s036_output/n100.r07.s036.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s036_output/n100.r07.s036.reference.fas" "n100.r07.s036_output/n100.r07.s036.trimmed.sorted.bam" > "n100.r07.s036_output/n100.r07.s036.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s036_output/n100.r07.s036.reference.fas" --call-indels "n100.r07.s036_output/n100.r07.s036.trimmed.sorted.bam" > "n100.r07.s036_output/n100.r07.s036.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s036_output/n100.r07.s036.trimmed.sorted.bam" > "n100.r07.s036_output/n100.r07.s036.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s036_output/n100.r07.s036.depth.txt" "n100.r07.s036_output/n100.r07.s036.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s036_output/n100.r07.s036.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s036_output/n100.r07.s036.reference.fas" | bcftools consensus -m "n100.r07.s036_output/n100.r07.s036.low_depth.tsv" tmp.vcf.gz > "n100.r07.s036_output/n100.r07.s036.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s036_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:52 scheduler task db4186ab (flow 9e638bb7): loaded val<.=8239cb27 35.4MiB>
2021/07/08 17:13:52 scheduler task db4186ab (flow 9e638bb7): loading (try 0): successful, next state: submitting
2021/07/08 17:13:52 scheduler task db4186ab (flow 9e638bb7): submitting (try 0): started
2021/07/08 17:13:52 scheduler task bb3aebb8 (flow 2ffcac3d): loaded val<.=2ab24ea4 35.4MiB>
2021/07/08 17:13:53 scheduler task 349d60d9 (flow 61ea32de): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:53 scheduler task 5a053160 (flow 556ae154): loaded val<.=f7a92daa 35.4MiB>
2021/07/08 17:13:53 scheduler task 349d60d9 (flow 61ea32de): waiting for completion (try 0): started
2021/07/08 17:13:53  ->  n100.r07.s072.Main.out_file 61ea32de exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:53 n100.r07.s072.Main.out_file 61ea32de n100/r07/n100.r07.s072.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4a8d20c0428f2c19618e0510a328cdaa52f4383bf6675a77f0b078281e62dae8
	sha256:61ea32dedea9f37b8a1a71c667eaa56222e98dde3823853a9c5af778dc6d751c
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/349d60d9435a02e4ce783207dc9827523daf2715afcdd318844d20f1a13fb4b3
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s072_output"
	    wget -O "n100.r07.s072_output/n100.r07.s072.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s072_output/n100.r07.s072.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s072_output/n100.r07.s072.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s072_output/n100.r07.s072.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s072_output/n100.r07.s072.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s072_output/n100.r07.s072.reference.fas" "n100.r07.s072_output/n100.r07.s072.fq1.fastq" "n100.r07.s072_output/n100.r07.s072.fq2.fastq" | samtools view -bS - > "n100.r07.s072_output/n100.r07.s072.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s072_output/n100.r07.s072.untrimmed.sorted.bam" "n100.r07.s072_output/n100.r07.s072.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s072_output/n100.r07.s072.untrimmed.sorted.bam" -b "n100.r07.s072_output/n100.r07.s072.primers.bed" -p "n100.r07.s072_output/n100.r07.s072.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s072_output/n100.r07.s072.trimmed.sorted.bam" "n100.r07.s072_output/n100.r07.s072.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s072_output/n100.r07.s072.reference.fas" "n100.r07.s072_output/n100.r07.s072.trimmed.sorted.bam" > "n100.r07.s072_output/n100.r07.s072.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s072_output/n100.r07.s072.reference.fas" --call-indels "n100.r07.s072_output/n100.r07.s072.trimmed.sorted.bam" > "n100.r07.s072_output/n100.r07.s072.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s072_output/n100.r07.s072.trimmed.sorted.bam" > "n100.r07.s072_output/n100.r07.s072.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s072_output/n100.r07.s072.depth.txt" "n100.r07.s072_output/n100.r07.s072.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s072_output/n100.r07.s072.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s072_output/n100.r07.s072.reference.fas" | bcftools consensus -m "n100.r07.s072_output/n100.r07.s072.low_depth.tsv" tmp.vcf.gz > "n100.r07.s072_output/n100.r07.s072.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s072_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:53 scheduler task 31906a42 (flow 667619f5): loaded val<.=79f74e53 35.4MiB>
2021/07/08 17:13:53 scheduler task 31906a42 (flow 667619f5): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 31906a42 (flow 667619f5): submitting (try 0): started
2021/07/08 17:13:53 scheduler task 0d5c5330 (flow c96780e2): loaded val<.=284f68c1 35.4MiB>
2021/07/08 17:13:53 scheduler task 0d5c5330 (flow c96780e2): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 0d5c5330 (flow c96780e2): submitting (try 0): started
2021/07/08 17:13:53 scheduler task 31458704 (flow 40bc41f4): loaded val<.=04977b3c 35.4MiB>
2021/07/08 17:13:53 scheduler task 9299bf20 (flow db3942f3): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:53 scheduler task bdc179fc (flow c7a8d3dc): loaded val<.=b5790878 35.4MiB>
2021/07/08 17:13:53 scheduler task 9299bf20 (flow db3942f3): waiting for completion (try 0): started
2021/07/08 17:13:53  ->  n100.r07.s056.Main.out_file db3942f3 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:53 n100.r07.s056.Main.out_file db3942f3 n100/r07/n100.r07.s056.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ca5876fd3428a298a7357be9f635092d53f9354868adb20fd7689387780bc9d0
	sha256:db3942f33ff914cb09d5ae70b9f05047cabae2e0262e46344755e49f1c9a7a6c
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9299bf200a5c01f57485e56c767ddcc0944bc932129f5ea92e3e6856b0a42e46
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s056_output"
	    wget -O "n100.r07.s056_output/n100.r07.s056.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s056_output/n100.r07.s056.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s056_output/n100.r07.s056.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s056_output/n100.r07.s056.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s056_output/n100.r07.s056.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s056_output/n100.r07.s056.reference.fas" "n100.r07.s056_output/n100.r07.s056.fq1.fastq" "n100.r07.s056_output/n100.r07.s056.fq2.fastq" | samtools view -bS - > "n100.r07.s056_output/n100.r07.s056.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s056_output/n100.r07.s056.untrimmed.sorted.bam" "n100.r07.s056_output/n100.r07.s056.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s056_output/n100.r07.s056.untrimmed.sorted.bam" -b "n100.r07.s056_output/n100.r07.s056.primers.bed" -p "n100.r07.s056_output/n100.r07.s056.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s056_output/n100.r07.s056.trimmed.sorted.bam" "n100.r07.s056_output/n100.r07.s056.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s056_output/n100.r07.s056.reference.fas" "n100.r07.s056_output/n100.r07.s056.trimmed.sorted.bam" > "n100.r07.s056_output/n100.r07.s056.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s056_output/n100.r07.s056.reference.fas" --call-indels "n100.r07.s056_output/n100.r07.s056.trimmed.sorted.bam" > "n100.r07.s056_output/n100.r07.s056.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s056_output/n100.r07.s056.trimmed.sorted.bam" > "n100.r07.s056_output/n100.r07.s056.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s056_output/n100.r07.s056.depth.txt" "n100.r07.s056_output/n100.r07.s056.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s056_output/n100.r07.s056.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s056_output/n100.r07.s056.reference.fas" | bcftools consensus -m "n100.r07.s056_output/n100.r07.s056.low_depth.tsv" tmp.vcf.gz > "n100.r07.s056_output/n100.r07.s056.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s056_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:53 scheduler task bb3aebb8 (flow 2ffcac3d): loaded val<.=8aaec201 35.4MiB>
2021/07/08 17:13:53 scheduler task bb3aebb8 (flow 2ffcac3d): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task b41c06f5 (flow 602e5744): loaded val<.=eae1509e 35.4MiB>
2021/07/08 17:13:53 scheduler task bb3aebb8 (flow 2ffcac3d): submitting (try 0): started
2021/07/08 17:13:53 scheduler task d7452493 (flow a3bb669d): loaded val<.=e58cec98 35.4MiB>
2021/07/08 17:13:53 scheduler task 164261c5 (flow 441e1d42): loaded val<.=85ef23c1 35.4MiB>
2021/07/08 17:13:53 scheduler task 164261c5 (flow 441e1d42): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 300fd7a5 (flow b9812173): loaded val<.=ba223009 35.4MiB>
2021/07/08 17:13:53 scheduler task 164261c5 (flow 441e1d42): submitting (try 0): started
2021/07/08 17:13:53 scheduler task 1d2e33c5 (flow e07d1478): loaded val<.=38e5e9da 35.4MiB>
2021/07/08 17:13:53 scheduler task 1d2e33c5 (flow e07d1478): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 1d2e33c5 (flow e07d1478): submitting (try 0): started
2021/07/08 17:13:53 scheduler task 3f55473f (flow 3d776298): loaded val<.=c2cd1e8b 35.4MiB>
2021/07/08 17:13:53 scheduler task 3f55473f (flow 3d776298): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 3f55473f (flow 3d776298): submitting (try 0): started
2021/07/08 17:13:53 scheduler task c0a2e047 (flow 281a5421): loaded val<.=8ef57abd 35.4MiB>
2021/07/08 17:13:53 scheduler task 10a99fae (flow 7b842208): loaded val<.=7e325fcf 35.4MiB>
2021/07/08 17:13:53 scheduler task 10a99fae (flow 7b842208): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 88d23280 (flow bbce7a63): loaded val<.=771ce5dd 35.4MiB>
2021/07/08 17:13:53 scheduler task c0a2e047 (flow 281a5421): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 88d23280 (flow bbce7a63): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task af534387 (flow 90d93718): loaded val<.=a956492e 35.4MiB>
2021/07/08 17:13:53 scheduler task 10a99fae (flow 7b842208): submitting (try 0): started
2021/07/08 17:13:53 scheduler task c0a2e047 (flow 281a5421): submitting (try 0): started
2021/07/08 17:13:53 scheduler task 88d23280 (flow bbce7a63): submitting (try 0): started
2021/07/08 17:13:53 scheduler task d7452493 (flow a3bb669d): loaded val<.=d7286acd 35.4MiB>
2021/07/08 17:13:53 scheduler task d7452493 (flow a3bb669d): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task cbc7ffd0 (flow f84bcf3d): loaded val<.=3d72fb01 35.4MiB>
2021/07/08 17:13:53 scheduler task cbc7ffd0 (flow f84bcf3d): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 415ae885 (flow abb16dca): loaded val<.=6cbad8a7 35.4MiB>
2021/07/08 17:13:53 scheduler task d7452493 (flow a3bb669d): submitting (try 0): started
2021/07/08 17:13:53 scheduler task 334f3996 (flow a9afc8a9): loaded val<.=75929da2 35.4MiB>
2021/07/08 17:13:53 scheduler task 334f3996 (flow a9afc8a9): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task cbc7ffd0 (flow f84bcf3d): submitting (try 0): started
2021/07/08 17:13:53 scheduler task b41c06f5 (flow 602e5744): loaded val<.=cc0a78fa 35.4MiB>
2021/07/08 17:13:53 scheduler task b41c06f5 (flow 602e5744): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 334f3996 (flow a9afc8a9): submitting (try 0): started
2021/07/08 17:13:53 scheduler task e89fdb62 (flow 85485140): loaded val<.=a97bf394 35.4MiB>
2021/07/08 17:13:53 scheduler task e89fdb62 (flow 85485140): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 3d2380ba (flow 90113c2d): loaded val<.=2b7caeae 35.4MiB>
2021/07/08 17:13:53 scheduler task b41c06f5 (flow 602e5744): submitting (try 0): started
2021/07/08 17:13:53 scheduler task e89fdb62 (flow 85485140): submitting (try 0): started
2021/07/08 17:13:53 scheduler task 3fa58d8b (flow 461bf7dc): loaded val<.=a899b946 35.4MiB>
2021/07/08 17:13:53 scheduler task 3fa58d8b (flow 461bf7dc): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 51d530dd (flow 9adf3c04): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:53 scheduler task 3fa58d8b (flow 461bf7dc): submitting (try 0): started
2021/07/08 17:13:53 scheduler task 51d530dd (flow 9adf3c04): waiting for completion (try 0): started
2021/07/08 17:13:53  ->  n100.r07.s081.Main.out_file 9adf3c04 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:53 n100.r07.s081.Main.out_file 9adf3c04 n100/r07/n100.r07.s081.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1bafc5abdf4a34fded438196ead24b433e29a1f4cba67a9e6e9fdaf4a0761b3c
	sha256:9adf3c04e8faa00be5dc1e0579cba926b7e57ba83b72a90d9191c3585d0605ef
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/51d530dde2df52d2faed4abade23ccca3980f8587e0c7b197d7702bc88ef16de
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s081_output"
	    wget -O "n100.r07.s081_output/n100.r07.s081.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s081_output/n100.r07.s081.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s081_output/n100.r07.s081.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s081_output/n100.r07.s081.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s081_output/n100.r07.s081.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s081_output/n100.r07.s081.reference.fas" "n100.r07.s081_output/n100.r07.s081.fq1.fastq" "n100.r07.s081_output/n100.r07.s081.fq2.fastq" | samtools view -bS - > "n100.r07.s081_output/n100.r07.s081.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s081_output/n100.r07.s081.untrimmed.sorted.bam" "n100.r07.s081_output/n100.r07.s081.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s081_output/n100.r07.s081.untrimmed.sorted.bam" -b "n100.r07.s081_output/n100.r07.s081.primers.bed" -p "n100.r07.s081_output/n100.r07.s081.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s081_output/n100.r07.s081.trimmed.sorted.bam" "n100.r07.s081_output/n100.r07.s081.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s081_output/n100.r07.s081.reference.fas" "n100.r07.s081_output/n100.r07.s081.trimmed.sorted.bam" > "n100.r07.s081_output/n100.r07.s081.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s081_output/n100.r07.s081.reference.fas" --call-indels "n100.r07.s081_output/n100.r07.s081.trimmed.sorted.bam" > "n100.r07.s081_output/n100.r07.s081.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s081_output/n100.r07.s081.trimmed.sorted.bam" > "n100.r07.s081_output/n100.r07.s081.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s081_output/n100.r07.s081.depth.txt" "n100.r07.s081_output/n100.r07.s081.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s081_output/n100.r07.s081.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s081_output/n100.r07.s081.reference.fas" | bcftools consensus -m "n100.r07.s081_output/n100.r07.s081.low_depth.tsv" tmp.vcf.gz > "n100.r07.s081_output/n100.r07.s081.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s081_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:53 scheduler task 5a053160 (flow 556ae154): loaded val<.=12ce7e20 35.4MiB>
2021/07/08 17:13:53 scheduler task 5a053160 (flow 556ae154): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 46b3d1f4 (flow 74bc54ab): loaded val<.=09eb8fc6 35.4MiB>
2021/07/08 17:13:53 scheduler task 46b3d1f4 (flow 74bc54ab): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 072a8e2d (flow edd91e32): loaded val<.=7893a9f1 35.4MiB>
2021/07/08 17:13:53 scheduler task 5a053160 (flow 556ae154): submitting (try 0): started
2021/07/08 17:13:53 scheduler task 46b3d1f4 (flow 74bc54ab): submitting (try 0): started
2021/07/08 17:13:53 scheduler task 3d2380ba (flow 90113c2d): loaded val<.=08bdeacb 35.4MiB>
2021/07/08 17:13:53 scheduler task 3d2380ba (flow 90113c2d): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task e2af4871 (flow 41a5e943): loaded val<.=78e32551 35.4MiB>
2021/07/08 17:13:53 scheduler task 3d2380ba (flow 90113c2d): submitting (try 0): started
2021/07/08 17:13:53 scheduler task 20f4384f (flow 6fbc481f): loaded val<.=ccee20d6 35.4MiB>
2021/07/08 17:13:53 scheduler task 072a8e2d (flow edd91e32): loaded val<.=889521a5 35.4MiB>
2021/07/08 17:13:53 scheduler task 20f4384f (flow 6fbc481f): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 072a8e2d (flow edd91e32): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 0b40294a (flow d3087af8): loaded val<.=59aa0eb6 35.4MiB>
2021/07/08 17:13:53 scheduler task 0b40294a (flow d3087af8): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task aae9bef3 (flow 5c374ba7): loaded val<.=eb588c18 35.4MiB>
2021/07/08 17:13:53 scheduler task aae9bef3 (flow 5c374ba7): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 20f4384f (flow 6fbc481f): submitting (try 0): started
2021/07/08 17:13:53 scheduler task 8168a241 (flow 761ac0e3): loaded val<.=023d36c4 35.4MiB>
2021/07/08 17:13:53 scheduler task 8168a241 (flow 761ac0e3): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 30bfcda0 (flow 878d6e7b): loaded val<.=8823a646 35.4MiB>
2021/07/08 17:13:53 scheduler task 30bfcda0 (flow 878d6e7b): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 9a98392a (flow e4ffdf1c): loaded val<.=2c349b9e 35.4MiB>
2021/07/08 17:13:53 scheduler task e9711b6d (flow 4741c76b): loaded val<.=cc79849d 35.4MiB>
2021/07/08 17:13:53 scheduler task e9711b6d (flow 4741c76b): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 3d94ce3a (flow 60c3d9b3): loaded val<.=7ed7e893 35.4MiB>
2021/07/08 17:13:53 scheduler task 6c7d8d18 (flow 7d51370c): loaded val<.=859d3709 35.4MiB>
2021/07/08 17:13:53 scheduler task 8465c67c (flow b2a24fdd): loaded val<.=3e134d90 35.4MiB>
2021/07/08 17:13:53 scheduler task 6c7d8d18 (flow 7d51370c): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 4f4f4171 (flow 522bd866): loaded val<.=2ca202e8 35.4MiB>
2021/07/08 17:13:53 scheduler task 3d94ce3a (flow 60c3d9b3): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 6f663194 (flow bb352724): loaded val<.=684b6610 35.4MiB>
2021/07/08 17:13:53 scheduler task 6f663194 (flow bb352724): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 4f4f4171 (flow 522bd866): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 300fd7a5 (flow b9812173): loaded val<.=0a96da1f 35.4MiB>
2021/07/08 17:13:53 scheduler task 300fd7a5 (flow b9812173): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 450f7005 (flow 93a728de): loaded val<.=54ba57b8 35.4MiB>
2021/07/08 17:13:53 scheduler task 2cc05ef0 (flow 78f39472): loaded val<.=2df8e733 35.4MiB>
2021/07/08 17:13:53 scheduler task 2cc05ef0 (flow 78f39472): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 31458704 (flow 40bc41f4): loaded val<.=3de4911f 35.4MiB>
2021/07/08 17:13:53 scheduler task 31458704 (flow 40bc41f4): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 18faa772 (flow 4989a6de): loaded val<.=dfac24ab 35.4MiB>
2021/07/08 17:13:53 scheduler task a3f46aee (flow 956ffc0d): loaded val<.=82afec20 35.4MiB>
2021/07/08 17:13:53 scheduler task a3f46aee (flow 956ffc0d): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task e2af4871 (flow 41a5e943): loaded val<.=755db5e3 35.4MiB>
2021/07/08 17:13:53 scheduler task e2af4871 (flow 41a5e943): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 8168a241 (flow 761ac0e3): submitting (try 0): started
2021/07/08 17:13:53 scheduler task af534387 (flow 90d93718): loaded val<.=536b656a 35.4MiB>
2021/07/08 17:13:53 scheduler task af534387 (flow 90d93718): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task ac285b56 (flow d679cd61): loaded val<.=b67d99ab 35.4MiB>
2021/07/08 17:13:53 scheduler task ac285b56 (flow d679cd61): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 004d43f9 (flow 51e59bfc): loaded val<.=ff7f875a 35.4MiB>
2021/07/08 17:13:53 scheduler task 004d43f9 (flow 51e59bfc): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 072a8e2d (flow edd91e32): submitting (try 0): started
2021/07/08 17:13:53 scheduler task 0b40294a (flow d3087af8): submitting (try 0): started
2021/07/08 17:13:53 scheduler task aae9bef3 (flow 5c374ba7): submitting (try 0): started
2021/07/08 17:13:53 scheduler task 30bfcda0 (flow 878d6e7b): submitting (try 0): started
2021/07/08 17:13:53 scheduler task ee486401 (flow acaec2ed): loaded val<.=0a7a1be0 35.4MiB>
2021/07/08 17:13:53 scheduler task ee486401 (flow acaec2ed): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task e9711b6d (flow 4741c76b): submitting (try 0): started
2021/07/08 17:13:53 scheduler task 6c7d8d18 (flow 7d51370c): submitting (try 0): started
2021/07/08 17:13:53 scheduler task 3d94ce3a (flow 60c3d9b3): submitting (try 0): started
2021/07/08 17:13:53 scheduler task a1216deb (flow a6081c46): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:53 scheduler task 6f663194 (flow bb352724): submitting (try 0): started
2021/07/08 17:13:53 scheduler task 4f4f4171 (flow 522bd866): submitting (try 0): started
2021/07/08 17:13:53 scheduler task 2cc05ef0 (flow 78f39472): submitting (try 0): started
2021/07/08 17:13:53 scheduler task 300fd7a5 (flow b9812173): submitting (try 0): started
2021/07/08 17:13:53 scheduler task 31458704 (flow 40bc41f4): submitting (try 0): started
2021/07/08 17:13:53 scheduler task a3f46aee (flow 956ffc0d): submitting (try 0): started
2021/07/08 17:13:53 scheduler task 964686c2 (flow 1be4cbdf): loaded val<.=9e80a3e8 35.4MiB>
2021/07/08 17:13:53 scheduler task e2af4871 (flow 41a5e943): submitting (try 0): started
2021/07/08 17:13:53 scheduler task 964686c2 (flow 1be4cbdf): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task af534387 (flow 90d93718): submitting (try 0): started
2021/07/08 17:13:53 scheduler task ac285b56 (flow d679cd61): submitting (try 0): started
2021/07/08 17:13:53 scheduler task 004d43f9 (flow 51e59bfc): submitting (try 0): started
2021/07/08 17:13:53 scheduler task ee486401 (flow acaec2ed): submitting (try 0): started
2021/07/08 17:13:53 scheduler task 450f7005 (flow 93a728de): loaded val<.=682b7e3f 35.4MiB>
2021/07/08 17:13:53 scheduler task 415ae885 (flow abb16dca): loaded val<.=a6168f00 35.4MiB>
2021/07/08 17:13:53 scheduler task 415ae885 (flow abb16dca): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 450f7005 (flow 93a728de): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task a1216deb (flow a6081c46): waiting for completion (try 0): started
2021/07/08 17:13:53  ->  n100.r07.s067.Main.out_file a6081c46 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:53 n100.r07.s067.Main.out_file a6081c46 n100/r07/n100.r07.s067.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b5d5cdaddb0d331352f6847d5d38a8b46fe6e45419c077515310fa2fb474c491
	sha256:a6081c46d84bbaa06027b2c3d9982895797ea82c98976a3ca8cae664f23aa599
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a1216deb143740ff1b73a6081bff26d4d32433349d68c6cb919691ced5a9956a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s067_output"
	    wget -O "n100.r07.s067_output/n100.r07.s067.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s067_output/n100.r07.s067.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s067_output/n100.r07.s067.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s067_output/n100.r07.s067.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s067_output/n100.r07.s067.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s067_output/n100.r07.s067.reference.fas" "n100.r07.s067_output/n100.r07.s067.fq1.fastq" "n100.r07.s067_output/n100.r07.s067.fq2.fastq" | samtools view -bS - > "n100.r07.s067_output/n100.r07.s067.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s067_output/n100.r07.s067.untrimmed.sorted.bam" "n100.r07.s067_output/n100.r07.s067.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s067_output/n100.r07.s067.untrimmed.sorted.bam" -b "n100.r07.s067_output/n100.r07.s067.primers.bed" -p "n100.r07.s067_output/n100.r07.s067.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s067_output/n100.r07.s067.trimmed.sorted.bam" "n100.r07.s067_output/n100.r07.s067.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s067_output/n100.r07.s067.reference.fas" "n100.r07.s067_output/n100.r07.s067.trimmed.sorted.bam" > "n100.r07.s067_output/n100.r07.s067.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s067_output/n100.r07.s067.reference.fas" --call-indels "n100.r07.s067_output/n100.r07.s067.trimmed.sorted.bam" > "n100.r07.s067_output/n100.r07.s067.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s067_output/n100.r07.s067.trimmed.sorted.bam" > "n100.r07.s067_output/n100.r07.s067.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s067_output/n100.r07.s067.depth.txt" "n100.r07.s067_output/n100.r07.s067.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s067_output/n100.r07.s067.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s067_output/n100.r07.s067.reference.fas" | bcftools consensus -m "n100.r07.s067_output/n100.r07.s067.low_depth.tsv" tmp.vcf.gz > "n100.r07.s067_output/n100.r07.s067.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s067_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:53 scheduler task 964686c2 (flow 1be4cbdf): submitting (try 0): started
2021/07/08 17:13:53 scheduler task 415ae885 (flow abb16dca): submitting (try 0): started
2021/07/08 17:13:53 scheduler task 450f7005 (flow 93a728de): submitting (try 0): started
2021/07/08 17:13:53 scheduler task 9a98392a (flow e4ffdf1c): loaded val<.=43bc4293 35.4MiB>
2021/07/08 17:13:53 scheduler task 9a98392a (flow e4ffdf1c): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 9a98392a (flow e4ffdf1c): submitting (try 0): started
2021/07/08 17:13:53 scheduler task 6c805c91 (flow 422def09): loaded val<.=551a0d45 35.4MiB>
2021/07/08 17:13:53 scheduler task 6c805c91 (flow 422def09): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 18faa772 (flow 4989a6de): loaded val<.=b0b672e9 35.4MiB>
2021/07/08 17:13:53 scheduler task 18faa772 (flow 4989a6de): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 6c805c91 (flow 422def09): submitting (try 0): started
2021/07/08 17:13:53 scheduler task 18faa772 (flow 4989a6de): submitting (try 0): started
2021/07/08 17:13:53 scheduler task bdc179fc (flow c7a8d3dc): loaded val<.=7c843910 35.4MiB>
2021/07/08 17:13:53 scheduler task bdc179fc (flow c7a8d3dc): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task bdc179fc (flow c7a8d3dc): submitting (try 0): started
2021/07/08 17:13:53 scheduler task c5654e5c (flow ef41d477): loaded val<.=529b778b 35.4MiB>
2021/07/08 17:13:53 scheduler task c5654e5c (flow ef41d477): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task c5654e5c (flow ef41d477): submitting (try 0): started
2021/07/08 17:13:53 scheduler task 590eb55e (flow bdb75ce9): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:53 scheduler task 590eb55e (flow bdb75ce9): waiting for completion (try 0): started
2021/07/08 17:13:53  ->  n100.r07.s079.Main.out_file bdb75ce9 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:53 n100.r07.s079.Main.out_file bdb75ce9 n100/r07/n100.r07.s079.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ab1b31f6aad8114d91414fc1421cee4663d99c82a4da53d6e526ca64d4030e67
	sha256:bdb75ce982a44e66d23c0fc18fef4e43a57d8dac2f9bed7b5b9603fb435a7894
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/590eb55ea462850c4b2a8a9d26b5b83374a2f6a62e32831ccbc54477b96abf7a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s079_output"
	    wget -O "n100.r07.s079_output/n100.r07.s079.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s079_output/n100.r07.s079.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s079_output/n100.r07.s079.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s079_output/n100.r07.s079.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s079_output/n100.r07.s079.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s079_output/n100.r07.s079.reference.fas" "n100.r07.s079_output/n100.r07.s079.fq1.fastq" "n100.r07.s079_output/n100.r07.s079.fq2.fastq" | samtools view -bS - > "n100.r07.s079_output/n100.r07.s079.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s079_output/n100.r07.s079.untrimmed.sorted.bam" "n100.r07.s079_output/n100.r07.s079.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s079_output/n100.r07.s079.untrimmed.sorted.bam" -b "n100.r07.s079_output/n100.r07.s079.primers.bed" -p "n100.r07.s079_output/n100.r07.s079.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s079_output/n100.r07.s079.trimmed.sorted.bam" "n100.r07.s079_output/n100.r07.s079.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s079_output/n100.r07.s079.reference.fas" "n100.r07.s079_output/n100.r07.s079.trimmed.sorted.bam" > "n100.r07.s079_output/n100.r07.s079.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s079_output/n100.r07.s079.reference.fas" --call-indels "n100.r07.s079_output/n100.r07.s079.trimmed.sorted.bam" > "n100.r07.s079_output/n100.r07.s079.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s079_output/n100.r07.s079.trimmed.sorted.bam" > "n100.r07.s079_output/n100.r07.s079.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s079_output/n100.r07.s079.depth.txt" "n100.r07.s079_output/n100.r07.s079.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s079_output/n100.r07.s079.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s079_output/n100.r07.s079.reference.fas" | bcftools consensus -m "n100.r07.s079_output/n100.r07.s079.low_depth.tsv" tmp.vcf.gz > "n100.r07.s079_output/n100.r07.s079.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s079_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:53 scheduler task 852314b6 (flow d13a1791): loaded val<.=b6c4a37a 35.4MiB>
2021/07/08 17:13:53 scheduler task 852314b6 (flow d13a1791): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 852314b6 (flow d13a1791): submitting (try 0): started
2021/07/08 17:13:53 scheduler task 2623b266 (flow 26192454): loaded val<.=68686f31 35.4MiB>
2021/07/08 17:13:53 scheduler task 2623b266 (flow 26192454): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 2623b266 (flow 26192454): submitting (try 0): started
2021/07/08 17:13:53 scheduler task 60169fd2 (flow cd6e30ef): loaded val<.=c039cecf 35.4MiB>
2021/07/08 17:13:53 scheduler task 60169fd2 (flow cd6e30ef): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 60169fd2 (flow cd6e30ef): submitting (try 0): started
2021/07/08 17:13:53 scheduler task 95756e2e (flow 61093b34): loaded val<.=4f406fff 35.4MiB>
2021/07/08 17:13:53 scheduler task 95756e2e (flow 61093b34): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 95756e2e (flow 61093b34): submitting (try 0): started
2021/07/08 17:13:53 scheduler task 1f5b8fb7 (flow 18bb98c1): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:53 scheduler task 1f5b8fb7 (flow 18bb98c1): waiting for completion (try 0): started
2021/07/08 17:13:53  ->  n100.r07.s099.Main.out_file 18bb98c1 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:53 n100.r07.s099.Main.out_file 18bb98c1 n100/r07/n100.r07.s099.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e9a73e5ab5710c48865f3657f731d5caa34d78af362ad34716bdfe7c62a1115a
	sha256:18bb98c10b4bcce0c0e5dfcfc818b426ecf4adae29698bcc5f4c63947d22ee7a
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1f5b8fb76ad9ea87642c1b5df9f3d7dd0e64ff5c381374ad23a3c685e99fb91b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s099_output"
	    wget -O "n100.r07.s099_output/n100.r07.s099.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s099_output/n100.r07.s099.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s099_output/n100.r07.s099.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s099_output/n100.r07.s099.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s099_output/n100.r07.s099.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s099_output/n100.r07.s099.reference.fas" "n100.r07.s099_output/n100.r07.s099.fq1.fastq" "n100.r07.s099_output/n100.r07.s099.fq2.fastq" | samtools view -bS - > "n100.r07.s099_output/n100.r07.s099.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s099_output/n100.r07.s099.untrimmed.sorted.bam" "n100.r07.s099_output/n100.r07.s099.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s099_output/n100.r07.s099.untrimmed.sorted.bam" -b "n100.r07.s099_output/n100.r07.s099.primers.bed" -p "n100.r07.s099_output/n100.r07.s099.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s099_output/n100.r07.s099.trimmed.sorted.bam" "n100.r07.s099_output/n100.r07.s099.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s099_output/n100.r07.s099.reference.fas" "n100.r07.s099_output/n100.r07.s099.trimmed.sorted.bam" > "n100.r07.s099_output/n100.r07.s099.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s099_output/n100.r07.s099.reference.fas" --call-indels "n100.r07.s099_output/n100.r07.s099.trimmed.sorted.bam" > "n100.r07.s099_output/n100.r07.s099.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s099_output/n100.r07.s099.trimmed.sorted.bam" > "n100.r07.s099_output/n100.r07.s099.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s099_output/n100.r07.s099.depth.txt" "n100.r07.s099_output/n100.r07.s099.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s099_output/n100.r07.s099.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s099_output/n100.r07.s099.reference.fas" | bcftools consensus -m "n100.r07.s099_output/n100.r07.s099.low_depth.tsv" tmp.vcf.gz > "n100.r07.s099_output/n100.r07.s099.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s099_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:53 scheduler task eebbb090 (flow 2cedb108): loaded val<.=8d0bcd10 35.4MiB>
2021/07/08 17:13:53 scheduler task eebbb090 (flow 2cedb108): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task eebbb090 (flow 2cedb108): submitting (try 0): started
2021/07/08 17:13:53 scheduler task 8465c67c (flow b2a24fdd): loaded val<.=fa035bd3 35.4MiB>
2021/07/08 17:13:53 scheduler task 8465c67c (flow b2a24fdd): loading (try 0): successful, next state: submitting
2021/07/08 17:13:53 scheduler task 8465c67c (flow b2a24fdd): submitting (try 0): started
2021/07/08 17:13:53 scheduler task 18db9c9a (flow edcaa27c): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:54 scheduler task 18db9c9a (flow edcaa27c): waiting for completion (try 0): started
2021/07/08 17:13:54  ->  n100.r07.s046.Main.out_file edcaa27c exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:54 n100.r07.s046.Main.out_file edcaa27c n100/r07/n100.r07.s046.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fbb2c03508d8648f6b8c288840d1d69f8eb5aef59597d3882d6f7ca6626ead97
	sha256:edcaa27c48eabc8fd43d436cf1c8364cdcdaf06972b5cc877ec6d21314a66540
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/18db9c9a51aeda3eef6567d2984216150ef1b555f507cf1c4ffc044f3272b819
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s046_output"
	    wget -O "n100.r07.s046_output/n100.r07.s046.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s046_output/n100.r07.s046.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s046_output/n100.r07.s046.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s046_output/n100.r07.s046.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s046_output/n100.r07.s046.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s046_output/n100.r07.s046.reference.fas" "n100.r07.s046_output/n100.r07.s046.fq1.fastq" "n100.r07.s046_output/n100.r07.s046.fq2.fastq" | samtools view -bS - > "n100.r07.s046_output/n100.r07.s046.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s046_output/n100.r07.s046.untrimmed.sorted.bam" "n100.r07.s046_output/n100.r07.s046.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s046_output/n100.r07.s046.untrimmed.sorted.bam" -b "n100.r07.s046_output/n100.r07.s046.primers.bed" -p "n100.r07.s046_output/n100.r07.s046.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s046_output/n100.r07.s046.trimmed.sorted.bam" "n100.r07.s046_output/n100.r07.s046.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s046_output/n100.r07.s046.reference.fas" "n100.r07.s046_output/n100.r07.s046.trimmed.sorted.bam" > "n100.r07.s046_output/n100.r07.s046.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s046_output/n100.r07.s046.reference.fas" --call-indels "n100.r07.s046_output/n100.r07.s046.trimmed.sorted.bam" > "n100.r07.s046_output/n100.r07.s046.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s046_output/n100.r07.s046.trimmed.sorted.bam" > "n100.r07.s046_output/n100.r07.s046.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s046_output/n100.r07.s046.depth.txt" "n100.r07.s046_output/n100.r07.s046.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s046_output/n100.r07.s046.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s046_output/n100.r07.s046.reference.fas" | bcftools consensus -m "n100.r07.s046_output/n100.r07.s046.low_depth.tsv" tmp.vcf.gz > "n100.r07.s046_output/n100.r07.s046.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s046_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:54 scheduler task 094c83a9 (flow 0455dc2c): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:54 scheduler task 094c83a9 (flow 0455dc2c): waiting for completion (try 0): started
2021/07/08 17:13:54  ->  n100.r07.s055.Main.out_file 0455dc2c exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:54 n100.r07.s055.Main.out_file 0455dc2c n100/r07/n100.r07.s055.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4ea36f5db826336b8849fd90a3a0045677dd9f301601b94803282dc97fa7e19e
	sha256:0455dc2c6c1b31d7183fa5cf72fb1f34baf88ca217224e92bffe9aec4a5a4da4
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/094c83a9088a352badb26dd414af5f62c88d70c5d3130d3e734cbf1419aef9e4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s055_output"
	    wget -O "n100.r07.s055_output/n100.r07.s055.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s055_output/n100.r07.s055.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s055_output/n100.r07.s055.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s055_output/n100.r07.s055.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s055_output/n100.r07.s055.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s055_output/n100.r07.s055.reference.fas" "n100.r07.s055_output/n100.r07.s055.fq1.fastq" "n100.r07.s055_output/n100.r07.s055.fq2.fastq" | samtools view -bS - > "n100.r07.s055_output/n100.r07.s055.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s055_output/n100.r07.s055.untrimmed.sorted.bam" "n100.r07.s055_output/n100.r07.s055.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s055_output/n100.r07.s055.untrimmed.sorted.bam" -b "n100.r07.s055_output/n100.r07.s055.primers.bed" -p "n100.r07.s055_output/n100.r07.s055.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s055_output/n100.r07.s055.trimmed.sorted.bam" "n100.r07.s055_output/n100.r07.s055.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s055_output/n100.r07.s055.reference.fas" "n100.r07.s055_output/n100.r07.s055.trimmed.sorted.bam" > "n100.r07.s055_output/n100.r07.s055.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s055_output/n100.r07.s055.reference.fas" --call-indels "n100.r07.s055_output/n100.r07.s055.trimmed.sorted.bam" > "n100.r07.s055_output/n100.r07.s055.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s055_output/n100.r07.s055.trimmed.sorted.bam" > "n100.r07.s055_output/n100.r07.s055.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s055_output/n100.r07.s055.depth.txt" "n100.r07.s055_output/n100.r07.s055.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s055_output/n100.r07.s055.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s055_output/n100.r07.s055.reference.fas" | bcftools consensus -m "n100.r07.s055_output/n100.r07.s055.low_depth.tsv" tmp.vcf.gz > "n100.r07.s055_output/n100.r07.s055.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s055_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:54 scheduler task f2bf54fd (flow d73b86a9): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:54 scheduler task f2bf54fd (flow d73b86a9): waiting for completion (try 0): started
2021/07/08 17:13:54  ->  n100.r07.s057.Main.out_file d73b86a9 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:54 n100.r07.s057.Main.out_file d73b86a9 n100/r07/n100.r07.s057.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2cfd049fabcb662de1dd978c4cb2a268953c9e006a3613fe249ba9304b8fd735
	sha256:d73b86a9527655ef6347af8ab80703fef06d521a7cc566078c9dd3b5774f4f8e
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f2bf54fd2b5d140bf68f46e7f384b4184a25dc7be765b1ee0d497bb38f1eb00f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s057_output"
	    wget -O "n100.r07.s057_output/n100.r07.s057.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s057_output/n100.r07.s057.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s057_output/n100.r07.s057.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s057_output/n100.r07.s057.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s057_output/n100.r07.s057.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s057_output/n100.r07.s057.reference.fas" "n100.r07.s057_output/n100.r07.s057.fq1.fastq" "n100.r07.s057_output/n100.r07.s057.fq2.fastq" | samtools view -bS - > "n100.r07.s057_output/n100.r07.s057.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s057_output/n100.r07.s057.untrimmed.sorted.bam" "n100.r07.s057_output/n100.r07.s057.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s057_output/n100.r07.s057.untrimmed.sorted.bam" -b "n100.r07.s057_output/n100.r07.s057.primers.bed" -p "n100.r07.s057_output/n100.r07.s057.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s057_output/n100.r07.s057.trimmed.sorted.bam" "n100.r07.s057_output/n100.r07.s057.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s057_output/n100.r07.s057.reference.fas" "n100.r07.s057_output/n100.r07.s057.trimmed.sorted.bam" > "n100.r07.s057_output/n100.r07.s057.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s057_output/n100.r07.s057.reference.fas" --call-indels "n100.r07.s057_output/n100.r07.s057.trimmed.sorted.bam" > "n100.r07.s057_output/n100.r07.s057.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s057_output/n100.r07.s057.trimmed.sorted.bam" > "n100.r07.s057_output/n100.r07.s057.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s057_output/n100.r07.s057.depth.txt" "n100.r07.s057_output/n100.r07.s057.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s057_output/n100.r07.s057.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s057_output/n100.r07.s057.reference.fas" | bcftools consensus -m "n100.r07.s057_output/n100.r07.s057.low_depth.tsv" tmp.vcf.gz > "n100.r07.s057_output/n100.r07.s057.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s057_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:54 scheduler task adc32aa7 (flow 3ba0729e): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:54 scheduler task adc32aa7 (flow 3ba0729e): waiting for completion (try 0): started
2021/07/08 17:13:54  ->  n100.r07.s090.Main.out_file 3ba0729e exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:54 n100.r07.s090.Main.out_file 3ba0729e n100/r07/n100.r07.s090.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:67fd9e606fa4c33f562aaebccfea512572d04e322e3cfd13f7be1b122793512c
	sha256:3ba0729e6cb3634949fa67ed52befdb6ca43a60bf35c4c31e04a082dcdabab98
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/adc32aa79fa56fac717c4ca6ae846ba7783dc743fdc10882b73e792dccfbe601
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s090_output"
	    wget -O "n100.r07.s090_output/n100.r07.s090.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s090_output/n100.r07.s090.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s090_output/n100.r07.s090.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s090_output/n100.r07.s090.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s090_output/n100.r07.s090.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s090_output/n100.r07.s090.reference.fas" "n100.r07.s090_output/n100.r07.s090.fq1.fastq" "n100.r07.s090_output/n100.r07.s090.fq2.fastq" | samtools view -bS - > "n100.r07.s090_output/n100.r07.s090.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s090_output/n100.r07.s090.untrimmed.sorted.bam" "n100.r07.s090_output/n100.r07.s090.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s090_output/n100.r07.s090.untrimmed.sorted.bam" -b "n100.r07.s090_output/n100.r07.s090.primers.bed" -p "n100.r07.s090_output/n100.r07.s090.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s090_output/n100.r07.s090.trimmed.sorted.bam" "n100.r07.s090_output/n100.r07.s090.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s090_output/n100.r07.s090.reference.fas" "n100.r07.s090_output/n100.r07.s090.trimmed.sorted.bam" > "n100.r07.s090_output/n100.r07.s090.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s090_output/n100.r07.s090.reference.fas" --call-indels "n100.r07.s090_output/n100.r07.s090.trimmed.sorted.bam" > "n100.r07.s090_output/n100.r07.s090.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s090_output/n100.r07.s090.trimmed.sorted.bam" > "n100.r07.s090_output/n100.r07.s090.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s090_output/n100.r07.s090.depth.txt" "n100.r07.s090_output/n100.r07.s090.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s090_output/n100.r07.s090.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s090_output/n100.r07.s090.reference.fas" | bcftools consensus -m "n100.r07.s090_output/n100.r07.s090.low_depth.tsv" tmp.vcf.gz > "n100.r07.s090_output/n100.r07.s090.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s090_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:54 scheduler task 151a9227 (flow b10d32be): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:54 scheduler task 151a9227 (flow b10d32be): waiting for completion (try 0): started
2021/07/08 17:13:54  ->  n100.r07.s098.Main.out_file b10d32be exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:54 n100.r07.s098.Main.out_file b10d32be n100/r07/n100.r07.s098.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f94b7c7c69576eb87b5f46478dc08e788306c222e314d55001d22e7e294b0603
	sha256:b10d32bea950e157b9ba77381d690dbb135d93c5c2eb6b56d0c9eb8fb9ecc959
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/151a9227fa9602bebf288a6139bdfdc6567d32ea20c9fbb52ce2a09690d534f7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s098_output"
	    wget -O "n100.r07.s098_output/n100.r07.s098.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s098_output/n100.r07.s098.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s098_output/n100.r07.s098.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s098_output/n100.r07.s098.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s098_output/n100.r07.s098.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s098_output/n100.r07.s098.reference.fas" "n100.r07.s098_output/n100.r07.s098.fq1.fastq" "n100.r07.s098_output/n100.r07.s098.fq2.fastq" | samtools view -bS - > "n100.r07.s098_output/n100.r07.s098.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s098_output/n100.r07.s098.untrimmed.sorted.bam" "n100.r07.s098_output/n100.r07.s098.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s098_output/n100.r07.s098.untrimmed.sorted.bam" -b "n100.r07.s098_output/n100.r07.s098.primers.bed" -p "n100.r07.s098_output/n100.r07.s098.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s098_output/n100.r07.s098.trimmed.sorted.bam" "n100.r07.s098_output/n100.r07.s098.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s098_output/n100.r07.s098.reference.fas" "n100.r07.s098_output/n100.r07.s098.trimmed.sorted.bam" > "n100.r07.s098_output/n100.r07.s098.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s098_output/n100.r07.s098.reference.fas" --call-indels "n100.r07.s098_output/n100.r07.s098.trimmed.sorted.bam" > "n100.r07.s098_output/n100.r07.s098.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s098_output/n100.r07.s098.trimmed.sorted.bam" > "n100.r07.s098_output/n100.r07.s098.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s098_output/n100.r07.s098.depth.txt" "n100.r07.s098_output/n100.r07.s098.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s098_output/n100.r07.s098.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s098_output/n100.r07.s098.reference.fas" | bcftools consensus -m "n100.r07.s098_output/n100.r07.s098.low_depth.tsv" tmp.vcf.gz > "n100.r07.s098_output/n100.r07.s098.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s098_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:54 scheduler task a6a27466 (flow 1d245d3d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:54 scheduler task a6a27466 (flow 1d245d3d): waiting for completion (try 0): started
2021/07/08 17:13:54  ->  n100.r07.s100.Main.out_file 1d245d3d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:54 n100.r07.s100.Main.out_file 1d245d3d n100/r07/n100.r07.s100.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1fdd03a43b8f43e841cf1cd11cc0520e4a3e47eae038fa51cd6249a42cfb78f5
	sha256:1d245d3dca30353f50498af5d3e6b2920fa7dc247d6896fc3531f4518b44ffc5
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a6a274662b9180f961931b7449c0f5e545c768915890bde387177ff3a1e059a9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s100_output"
	    wget -O "n100.r07.s100_output/n100.r07.s100.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s100_output/n100.r07.s100.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s100_output/n100.r07.s100.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s100_output/n100.r07.s100.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s100_output/n100.r07.s100.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s100_output/n100.r07.s100.reference.fas" "n100.r07.s100_output/n100.r07.s100.fq1.fastq" "n100.r07.s100_output/n100.r07.s100.fq2.fastq" | samtools view -bS - > "n100.r07.s100_output/n100.r07.s100.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s100_output/n100.r07.s100.untrimmed.sorted.bam" "n100.r07.s100_output/n100.r07.s100.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s100_output/n100.r07.s100.untrimmed.sorted.bam" -b "n100.r07.s100_output/n100.r07.s100.primers.bed" -p "n100.r07.s100_output/n100.r07.s100.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s100_output/n100.r07.s100.trimmed.sorted.bam" "n100.r07.s100_output/n100.r07.s100.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s100_output/n100.r07.s100.reference.fas" "n100.r07.s100_output/n100.r07.s100.trimmed.sorted.bam" > "n100.r07.s100_output/n100.r07.s100.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s100_output/n100.r07.s100.reference.fas" --call-indels "n100.r07.s100_output/n100.r07.s100.trimmed.sorted.bam" > "n100.r07.s100_output/n100.r07.s100.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s100_output/n100.r07.s100.trimmed.sorted.bam" > "n100.r07.s100_output/n100.r07.s100.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s100_output/n100.r07.s100.depth.txt" "n100.r07.s100_output/n100.r07.s100.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s100_output/n100.r07.s100.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s100_output/n100.r07.s100.reference.fas" | bcftools consensus -m "n100.r07.s100_output/n100.r07.s100.low_depth.tsv" tmp.vcf.gz > "n100.r07.s100_output/n100.r07.s100.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s100_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:54 scheduler task 6d0b8c8b (flow 8af16490): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:54 scheduler task 6d0b8c8b (flow 8af16490): waiting for completion (try 0): started
2021/07/08 17:13:54  ->  n100.r07.s068.Main.out_file 8af16490 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:54 n100.r07.s068.Main.out_file 8af16490 n100/r07/n100.r07.s068.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:92ca80ad8664056db71270f0fec5f44b8cdf3c026cc5e170596d468e16a9a091
	sha256:8af1649035284f8b90d93d8bf618d590276f485a1ff3312c72777fa56306b636
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6d0b8c8b2badf4b337827471d1f6f09b1a424ac242d2dc55e92696a8a5f610aa
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s068_output"
	    wget -O "n100.r07.s068_output/n100.r07.s068.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s068_output/n100.r07.s068.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s068_output/n100.r07.s068.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s068_output/n100.r07.s068.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s068_output/n100.r07.s068.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s068_output/n100.r07.s068.reference.fas" "n100.r07.s068_output/n100.r07.s068.fq1.fastq" "n100.r07.s068_output/n100.r07.s068.fq2.fastq" | samtools view -bS - > "n100.r07.s068_output/n100.r07.s068.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s068_output/n100.r07.s068.untrimmed.sorted.bam" "n100.r07.s068_output/n100.r07.s068.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s068_output/n100.r07.s068.untrimmed.sorted.bam" -b "n100.r07.s068_output/n100.r07.s068.primers.bed" -p "n100.r07.s068_output/n100.r07.s068.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s068_output/n100.r07.s068.trimmed.sorted.bam" "n100.r07.s068_output/n100.r07.s068.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s068_output/n100.r07.s068.reference.fas" "n100.r07.s068_output/n100.r07.s068.trimmed.sorted.bam" > "n100.r07.s068_output/n100.r07.s068.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s068_output/n100.r07.s068.reference.fas" --call-indels "n100.r07.s068_output/n100.r07.s068.trimmed.sorted.bam" > "n100.r07.s068_output/n100.r07.s068.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s068_output/n100.r07.s068.trimmed.sorted.bam" > "n100.r07.s068_output/n100.r07.s068.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s068_output/n100.r07.s068.depth.txt" "n100.r07.s068_output/n100.r07.s068.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s068_output/n100.r07.s068.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s068_output/n100.r07.s068.reference.fas" | bcftools consensus -m "n100.r07.s068_output/n100.r07.s068.low_depth.tsv" tmp.vcf.gz > "n100.r07.s068_output/n100.r07.s068.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s068_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:55 scheduler task b79979ad (flow 627a1f3f): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:55 scheduler task b79979ad (flow 627a1f3f): waiting for completion (try 0): started
2021/07/08 17:13:55  ->  n100.r07.s001.Main.out_file 627a1f3f exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:55 n100.r07.s001.Main.out_file 627a1f3f n100/r07/n100.r07.s001.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e27326443faf54c83a89975b6d94ef6984513152fac0a1d0f0a94559bd8ed0eb
	sha256:627a1f3f11a1211494ade246bf4593ad4f1edee234cd6f5ecd9d70764a3c82ee
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b79979ad7928170032642cd4106d1ce28d7bdb81f5cd1fae71e0759cd7713c34
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s001_output"
	    wget -O "n100.r07.s001_output/n100.r07.s001.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s001_output/n100.r07.s001.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s001_output/n100.r07.s001.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s001_output/n100.r07.s001.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s001_output/n100.r07.s001.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s001_output/n100.r07.s001.reference.fas" "n100.r07.s001_output/n100.r07.s001.fq1.fastq" "n100.r07.s001_output/n100.r07.s001.fq2.fastq" | samtools view -bS - > "n100.r07.s001_output/n100.r07.s001.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s001_output/n100.r07.s001.untrimmed.sorted.bam" "n100.r07.s001_output/n100.r07.s001.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s001_output/n100.r07.s001.untrimmed.sorted.bam" -b "n100.r07.s001_output/n100.r07.s001.primers.bed" -p "n100.r07.s001_output/n100.r07.s001.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s001_output/n100.r07.s001.trimmed.sorted.bam" "n100.r07.s001_output/n100.r07.s001.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s001_output/n100.r07.s001.reference.fas" "n100.r07.s001_output/n100.r07.s001.trimmed.sorted.bam" > "n100.r07.s001_output/n100.r07.s001.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s001_output/n100.r07.s001.reference.fas" --call-indels "n100.r07.s001_output/n100.r07.s001.trimmed.sorted.bam" > "n100.r07.s001_output/n100.r07.s001.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s001_output/n100.r07.s001.trimmed.sorted.bam" > "n100.r07.s001_output/n100.r07.s001.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s001_output/n100.r07.s001.depth.txt" "n100.r07.s001_output/n100.r07.s001.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s001_output/n100.r07.s001.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s001_output/n100.r07.s001.reference.fas" | bcftools consensus -m "n100.r07.s001_output/n100.r07.s001.low_depth.tsv" tmp.vcf.gz > "n100.r07.s001_output/n100.r07.s001.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s001_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:55 scheduler task f992ad8d (flow b7fedadc): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:55 scheduler task f992ad8d (flow b7fedadc): waiting for completion (try 0): started
2021/07/08 17:13:55  ->  n100.r07.s097.Main.out_file b7fedadc exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:55 n100.r07.s097.Main.out_file b7fedadc n100/r07/n100.r07.s097.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c2de1d4c5cb0b3d3b7be3ae6d4de4a743622603460568c2e0ae0715fca9445a3
	sha256:b7fedadc0621645e441fac1aac7ba50c5cb6713265a38ae628ba7e90a450a405
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f992ad8d4c1b1a8033e2750a18f7eaed0b68a1b00fde5711ac1da98b6b7baa46
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s097_output"
	    wget -O "n100.r07.s097_output/n100.r07.s097.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s097_output/n100.r07.s097.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s097_output/n100.r07.s097.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s097_output/n100.r07.s097.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s097_output/n100.r07.s097.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s097_output/n100.r07.s097.reference.fas" "n100.r07.s097_output/n100.r07.s097.fq1.fastq" "n100.r07.s097_output/n100.r07.s097.fq2.fastq" | samtools view -bS - > "n100.r07.s097_output/n100.r07.s097.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s097_output/n100.r07.s097.untrimmed.sorted.bam" "n100.r07.s097_output/n100.r07.s097.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s097_output/n100.r07.s097.untrimmed.sorted.bam" -b "n100.r07.s097_output/n100.r07.s097.primers.bed" -p "n100.r07.s097_output/n100.r07.s097.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s097_output/n100.r07.s097.trimmed.sorted.bam" "n100.r07.s097_output/n100.r07.s097.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s097_output/n100.r07.s097.reference.fas" "n100.r07.s097_output/n100.r07.s097.trimmed.sorted.bam" > "n100.r07.s097_output/n100.r07.s097.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s097_output/n100.r07.s097.reference.fas" --call-indels "n100.r07.s097_output/n100.r07.s097.trimmed.sorted.bam" > "n100.r07.s097_output/n100.r07.s097.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s097_output/n100.r07.s097.trimmed.sorted.bam" > "n100.r07.s097_output/n100.r07.s097.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s097_output/n100.r07.s097.depth.txt" "n100.r07.s097_output/n100.r07.s097.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s097_output/n100.r07.s097.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s097_output/n100.r07.s097.reference.fas" | bcftools consensus -m "n100.r07.s097_output/n100.r07.s097.low_depth.tsv" tmp.vcf.gz > "n100.r07.s097_output/n100.r07.s097.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s097_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:55 scheduler task 282e35f8 (flow 081e5dc5): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:55 scheduler task 282e35f8 (flow 081e5dc5): waiting for completion (try 0): started
2021/07/08 17:13:55  ->  n100.r07.s094.Main.out_file 081e5dc5 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:55 n100.r07.s094.Main.out_file 081e5dc5 n100/r07/n100.r07.s094.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:065c2963b7152044904e1efdd7bd5821661b1a5014a5439b29459bf8063f0f0d
	sha256:081e5dc53476f2b2de9a266284832f31e21dcab7f4b2fbea2f6223e211a0ebda
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/282e35f889ddbb2665fe9ae1e9b18e63e5eac7cd074b6905966b3400cea244a8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s094_output"
	    wget -O "n100.r07.s094_output/n100.r07.s094.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s094_output/n100.r07.s094.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s094_output/n100.r07.s094.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s094_output/n100.r07.s094.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s094_output/n100.r07.s094.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s094_output/n100.r07.s094.reference.fas" "n100.r07.s094_output/n100.r07.s094.fq1.fastq" "n100.r07.s094_output/n100.r07.s094.fq2.fastq" | samtools view -bS - > "n100.r07.s094_output/n100.r07.s094.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s094_output/n100.r07.s094.untrimmed.sorted.bam" "n100.r07.s094_output/n100.r07.s094.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s094_output/n100.r07.s094.untrimmed.sorted.bam" -b "n100.r07.s094_output/n100.r07.s094.primers.bed" -p "n100.r07.s094_output/n100.r07.s094.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s094_output/n100.r07.s094.trimmed.sorted.bam" "n100.r07.s094_output/n100.r07.s094.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s094_output/n100.r07.s094.reference.fas" "n100.r07.s094_output/n100.r07.s094.trimmed.sorted.bam" > "n100.r07.s094_output/n100.r07.s094.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s094_output/n100.r07.s094.reference.fas" --call-indels "n100.r07.s094_output/n100.r07.s094.trimmed.sorted.bam" > "n100.r07.s094_output/n100.r07.s094.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s094_output/n100.r07.s094.trimmed.sorted.bam" > "n100.r07.s094_output/n100.r07.s094.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s094_output/n100.r07.s094.depth.txt" "n100.r07.s094_output/n100.r07.s094.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s094_output/n100.r07.s094.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s094_output/n100.r07.s094.reference.fas" | bcftools consensus -m "n100.r07.s094_output/n100.r07.s094.low_depth.tsv" tmp.vcf.gz > "n100.r07.s094_output/n100.r07.s094.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s094_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:55 scheduler task d038551e (flow 2ad2ef89): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:55 scheduler task d038551e (flow 2ad2ef89): waiting for completion (try 0): started
2021/07/08 17:13:55  ->  n100.r07.s078.Main.out_file 2ad2ef89 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:55 n100.r07.s078.Main.out_file 2ad2ef89 n100/r07/n100.r07.s078.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7f1291734a13263db1b4bd01e47198a8f3b8cfb14662c90953c22d8ae2983ff5
	sha256:2ad2ef89fb68887ce5d13d851976873550a8d9220fe05a4366e6a69f0d12d183
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d038551e5c73523a665b0087a28e93bbaabf63dbe0030d66931d13e65c50313b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s078_output"
	    wget -O "n100.r07.s078_output/n100.r07.s078.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s078_output/n100.r07.s078.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s078_output/n100.r07.s078.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s078_output/n100.r07.s078.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s078_output/n100.r07.s078.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s078_output/n100.r07.s078.reference.fas" "n100.r07.s078_output/n100.r07.s078.fq1.fastq" "n100.r07.s078_output/n100.r07.s078.fq2.fastq" | samtools view -bS - > "n100.r07.s078_output/n100.r07.s078.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s078_output/n100.r07.s078.untrimmed.sorted.bam" "n100.r07.s078_output/n100.r07.s078.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s078_output/n100.r07.s078.untrimmed.sorted.bam" -b "n100.r07.s078_output/n100.r07.s078.primers.bed" -p "n100.r07.s078_output/n100.r07.s078.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s078_output/n100.r07.s078.trimmed.sorted.bam" "n100.r07.s078_output/n100.r07.s078.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s078_output/n100.r07.s078.reference.fas" "n100.r07.s078_output/n100.r07.s078.trimmed.sorted.bam" > "n100.r07.s078_output/n100.r07.s078.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s078_output/n100.r07.s078.reference.fas" --call-indels "n100.r07.s078_output/n100.r07.s078.trimmed.sorted.bam" > "n100.r07.s078_output/n100.r07.s078.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s078_output/n100.r07.s078.trimmed.sorted.bam" > "n100.r07.s078_output/n100.r07.s078.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s078_output/n100.r07.s078.depth.txt" "n100.r07.s078_output/n100.r07.s078.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s078_output/n100.r07.s078.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s078_output/n100.r07.s078.reference.fas" | bcftools consensus -m "n100.r07.s078_output/n100.r07.s078.low_depth.tsv" tmp.vcf.gz > "n100.r07.s078_output/n100.r07.s078.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s078_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:55 scheduler task 6b13fa0f (flow 7b3d1113): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:55 scheduler task 6b13fa0f (flow 7b3d1113): waiting for completion (try 0): started
2021/07/08 17:13:55  ->  n100.r07.s061.Main.out_file 7b3d1113 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:55 n100.r07.s061.Main.out_file 7b3d1113 n100/r07/n100.r07.s061.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:078bc9f53259e5dad60b51206e7af16a7723a84f34aedbb4518a24cfc3e39d29
	sha256:7b3d1113a891b99136835d74f024d18593e66a9f71559874606f68dcfda8a85c
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6b13fa0fa1d7bd90853726ac7e4d09addedc14dd7d00debb1ec6c764b8f1002c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s061_output"
	    wget -O "n100.r07.s061_output/n100.r07.s061.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s061_output/n100.r07.s061.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s061_output/n100.r07.s061.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s061_output/n100.r07.s061.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s061_output/n100.r07.s061.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s061_output/n100.r07.s061.reference.fas" "n100.r07.s061_output/n100.r07.s061.fq1.fastq" "n100.r07.s061_output/n100.r07.s061.fq2.fastq" | samtools view -bS - > "n100.r07.s061_output/n100.r07.s061.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s061_output/n100.r07.s061.untrimmed.sorted.bam" "n100.r07.s061_output/n100.r07.s061.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s061_output/n100.r07.s061.untrimmed.sorted.bam" -b "n100.r07.s061_output/n100.r07.s061.primers.bed" -p "n100.r07.s061_output/n100.r07.s061.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s061_output/n100.r07.s061.trimmed.sorted.bam" "n100.r07.s061_output/n100.r07.s061.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s061_output/n100.r07.s061.reference.fas" "n100.r07.s061_output/n100.r07.s061.trimmed.sorted.bam" > "n100.r07.s061_output/n100.r07.s061.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s061_output/n100.r07.s061.reference.fas" --call-indels "n100.r07.s061_output/n100.r07.s061.trimmed.sorted.bam" > "n100.r07.s061_output/n100.r07.s061.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s061_output/n100.r07.s061.trimmed.sorted.bam" > "n100.r07.s061_output/n100.r07.s061.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s061_output/n100.r07.s061.depth.txt" "n100.r07.s061_output/n100.r07.s061.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s061_output/n100.r07.s061.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s061_output/n100.r07.s061.reference.fas" | bcftools consensus -m "n100.r07.s061_output/n100.r07.s061.low_depth.tsv" tmp.vcf.gz > "n100.r07.s061_output/n100.r07.s061.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s061_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:55 scheduler task cbb63d8b (flow 12c709ba): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:55 scheduler task cbb63d8b (flow 12c709ba): waiting for completion (try 0): started
2021/07/08 17:13:55  ->  n100.r07.s086.Main.out_file 12c709ba exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:55 n100.r07.s086.Main.out_file 12c709ba n100/r07/n100.r07.s086.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c91f75f724cc2e487986972e090c87d680bafbbfae3d5a2e6814ceac25e1b27d
	sha256:12c709babe44a919792a637f396510d30550b74271a95c2e4ba0405254b76108
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cbb63d8ba13a9b0db4edbb593687caff822731c3ac8b7db05798b4b22fb145ff
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s086_output"
	    wget -O "n100.r07.s086_output/n100.r07.s086.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s086_output/n100.r07.s086.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s086_output/n100.r07.s086.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s086_output/n100.r07.s086.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s086_output/n100.r07.s086.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s086_output/n100.r07.s086.reference.fas" "n100.r07.s086_output/n100.r07.s086.fq1.fastq" "n100.r07.s086_output/n100.r07.s086.fq2.fastq" | samtools view -bS - > "n100.r07.s086_output/n100.r07.s086.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s086_output/n100.r07.s086.untrimmed.sorted.bam" "n100.r07.s086_output/n100.r07.s086.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s086_output/n100.r07.s086.untrimmed.sorted.bam" -b "n100.r07.s086_output/n100.r07.s086.primers.bed" -p "n100.r07.s086_output/n100.r07.s086.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s086_output/n100.r07.s086.trimmed.sorted.bam" "n100.r07.s086_output/n100.r07.s086.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s086_output/n100.r07.s086.reference.fas" "n100.r07.s086_output/n100.r07.s086.trimmed.sorted.bam" > "n100.r07.s086_output/n100.r07.s086.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s086_output/n100.r07.s086.reference.fas" --call-indels "n100.r07.s086_output/n100.r07.s086.trimmed.sorted.bam" > "n100.r07.s086_output/n100.r07.s086.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s086_output/n100.r07.s086.trimmed.sorted.bam" > "n100.r07.s086_output/n100.r07.s086.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s086_output/n100.r07.s086.depth.txt" "n100.r07.s086_output/n100.r07.s086.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s086_output/n100.r07.s086.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s086_output/n100.r07.s086.reference.fas" | bcftools consensus -m "n100.r07.s086_output/n100.r07.s086.low_depth.tsv" tmp.vcf.gz > "n100.r07.s086_output/n100.r07.s086.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s086_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:55 scheduler task 777deb41 (flow a83135ea): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:55 scheduler task 777deb41 (flow a83135ea): waiting for completion (try 0): started
2021/07/08 17:13:55  ->  n100.r07.s089.Main.out_file a83135ea exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:55 n100.r07.s089.Main.out_file a83135ea n100/r07/n100.r07.s089.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6b887ea37eab88cd80e0d6a5482a0b3555532d02e3b62cc0e98d4538df3be505
	sha256:a83135ea689baa363362b63e3f1ea0d61487776aa9863405a34bf18be4b24d0e
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/777deb4165ea337852077e9b5e76a0d3d2b0bc287e171c96a50f9be73ccb76f0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s089_output"
	    wget -O "n100.r07.s089_output/n100.r07.s089.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s089_output/n100.r07.s089.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s089_output/n100.r07.s089.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s089_output/n100.r07.s089.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s089_output/n100.r07.s089.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s089_output/n100.r07.s089.reference.fas" "n100.r07.s089_output/n100.r07.s089.fq1.fastq" "n100.r07.s089_output/n100.r07.s089.fq2.fastq" | samtools view -bS - > "n100.r07.s089_output/n100.r07.s089.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s089_output/n100.r07.s089.untrimmed.sorted.bam" "n100.r07.s089_output/n100.r07.s089.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s089_output/n100.r07.s089.untrimmed.sorted.bam" -b "n100.r07.s089_output/n100.r07.s089.primers.bed" -p "n100.r07.s089_output/n100.r07.s089.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s089_output/n100.r07.s089.trimmed.sorted.bam" "n100.r07.s089_output/n100.r07.s089.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s089_output/n100.r07.s089.reference.fas" "n100.r07.s089_output/n100.r07.s089.trimmed.sorted.bam" > "n100.r07.s089_output/n100.r07.s089.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s089_output/n100.r07.s089.reference.fas" --call-indels "n100.r07.s089_output/n100.r07.s089.trimmed.sorted.bam" > "n100.r07.s089_output/n100.r07.s089.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s089_output/n100.r07.s089.trimmed.sorted.bam" > "n100.r07.s089_output/n100.r07.s089.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s089_output/n100.r07.s089.depth.txt" "n100.r07.s089_output/n100.r07.s089.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s089_output/n100.r07.s089.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s089_output/n100.r07.s089.reference.fas" | bcftools consensus -m "n100.r07.s089_output/n100.r07.s089.low_depth.tsv" tmp.vcf.gz > "n100.r07.s089_output/n100.r07.s089.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s089_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:56 scheduler task ba13af1f (flow 91ed633a): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:56 scheduler task ba13af1f (flow 91ed633a): waiting for completion (try 0): started
2021/07/08 17:13:56  ->  n100.r07.s063.Main.out_file 91ed633a exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:56 n100.r07.s063.Main.out_file 91ed633a n100/r07/n100.r07.s063.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d3cb3d76f8b101dcf1545c2c836d47400a014be0e06f2e4376b547f17b4545e2
	sha256:91ed633af9bd8d33aa36a42362e054fe961e0576b5bae8fe07612c4f3af4599b
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ba13af1f469da64df24ff7b558371ade5dfee216718eca266183c16d3e558849
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s063_output"
	    wget -O "n100.r07.s063_output/n100.r07.s063.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s063_output/n100.r07.s063.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s063_output/n100.r07.s063.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s063_output/n100.r07.s063.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s063_output/n100.r07.s063.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s063_output/n100.r07.s063.reference.fas" "n100.r07.s063_output/n100.r07.s063.fq1.fastq" "n100.r07.s063_output/n100.r07.s063.fq2.fastq" | samtools view -bS - > "n100.r07.s063_output/n100.r07.s063.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s063_output/n100.r07.s063.untrimmed.sorted.bam" "n100.r07.s063_output/n100.r07.s063.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s063_output/n100.r07.s063.untrimmed.sorted.bam" -b "n100.r07.s063_output/n100.r07.s063.primers.bed" -p "n100.r07.s063_output/n100.r07.s063.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s063_output/n100.r07.s063.trimmed.sorted.bam" "n100.r07.s063_output/n100.r07.s063.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s063_output/n100.r07.s063.reference.fas" "n100.r07.s063_output/n100.r07.s063.trimmed.sorted.bam" > "n100.r07.s063_output/n100.r07.s063.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s063_output/n100.r07.s063.reference.fas" --call-indels "n100.r07.s063_output/n100.r07.s063.trimmed.sorted.bam" > "n100.r07.s063_output/n100.r07.s063.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s063_output/n100.r07.s063.trimmed.sorted.bam" > "n100.r07.s063_output/n100.r07.s063.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s063_output/n100.r07.s063.depth.txt" "n100.r07.s063_output/n100.r07.s063.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s063_output/n100.r07.s063.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s063_output/n100.r07.s063.reference.fas" | bcftools consensus -m "n100.r07.s063_output/n100.r07.s063.low_depth.tsv" tmp.vcf.gz > "n100.r07.s063_output/n100.r07.s063.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s063_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:56 scheduler task 2ba58d45 (flow 1463162b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:56 scheduler task 2ba58d45 (flow 1463162b): waiting for completion (try 0): started
2021/07/08 17:13:56  ->  n100.r07.s093.Main.out_file 1463162b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:56 n100.r07.s093.Main.out_file 1463162b n100/r07/n100.r07.s093.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d9490a9a6ba8b76ec9d3a613be41f48bae6a17af34bb0e1512cd4808938375a8
	sha256:1463162b1d982ee5362171896599d2913b64da99f9960ac8880d89def14f40f9
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2ba58d45c72c217bedb30784c55930b38a5da5a271b658760c854b2d663f4ed4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s093_output"
	    wget -O "n100.r07.s093_output/n100.r07.s093.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s093_output/n100.r07.s093.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s093_output/n100.r07.s093.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s093_output/n100.r07.s093.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s093_output/n100.r07.s093.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s093_output/n100.r07.s093.reference.fas" "n100.r07.s093_output/n100.r07.s093.fq1.fastq" "n100.r07.s093_output/n100.r07.s093.fq2.fastq" | samtools view -bS - > "n100.r07.s093_output/n100.r07.s093.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s093_output/n100.r07.s093.untrimmed.sorted.bam" "n100.r07.s093_output/n100.r07.s093.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s093_output/n100.r07.s093.untrimmed.sorted.bam" -b "n100.r07.s093_output/n100.r07.s093.primers.bed" -p "n100.r07.s093_output/n100.r07.s093.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s093_output/n100.r07.s093.trimmed.sorted.bam" "n100.r07.s093_output/n100.r07.s093.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s093_output/n100.r07.s093.reference.fas" "n100.r07.s093_output/n100.r07.s093.trimmed.sorted.bam" > "n100.r07.s093_output/n100.r07.s093.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s093_output/n100.r07.s093.reference.fas" --call-indels "n100.r07.s093_output/n100.r07.s093.trimmed.sorted.bam" > "n100.r07.s093_output/n100.r07.s093.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s093_output/n100.r07.s093.trimmed.sorted.bam" > "n100.r07.s093_output/n100.r07.s093.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s093_output/n100.r07.s093.depth.txt" "n100.r07.s093_output/n100.r07.s093.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s093_output/n100.r07.s093.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s093_output/n100.r07.s093.reference.fas" | bcftools consensus -m "n100.r07.s093_output/n100.r07.s093.low_depth.tsv" tmp.vcf.gz > "n100.r07.s093_output/n100.r07.s093.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s093_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:56 scheduler task d6a5ea9f (flow bc6da4cb): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:56 scheduler task d6a5ea9f (flow bc6da4cb): waiting for completion (try 0): started
2021/07/08 17:13:56  ->  n100.r07.s075.Main.out_file bc6da4cb exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:56 n100.r07.s075.Main.out_file bc6da4cb n100/r07/n100.r07.s075.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:280b30229fe9e268d293162b2d7c0cab41877167a9fb79d57591844055ae0b8c
	sha256:bc6da4cbdebd8e8ca0647041f6e68f6980a576d0f8215f1fd700292770dc8f9a
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d6a5ea9f2354e5174a8234be7865860edf2c448715494fd5ad9b625dae565013
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s075_output"
	    wget -O "n100.r07.s075_output/n100.r07.s075.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s075_output/n100.r07.s075.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s075_output/n100.r07.s075.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s075_output/n100.r07.s075.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s075_output/n100.r07.s075.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s075_output/n100.r07.s075.reference.fas" "n100.r07.s075_output/n100.r07.s075.fq1.fastq" "n100.r07.s075_output/n100.r07.s075.fq2.fastq" | samtools view -bS - > "n100.r07.s075_output/n100.r07.s075.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s075_output/n100.r07.s075.untrimmed.sorted.bam" "n100.r07.s075_output/n100.r07.s075.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s075_output/n100.r07.s075.untrimmed.sorted.bam" -b "n100.r07.s075_output/n100.r07.s075.primers.bed" -p "n100.r07.s075_output/n100.r07.s075.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s075_output/n100.r07.s075.trimmed.sorted.bam" "n100.r07.s075_output/n100.r07.s075.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s075_output/n100.r07.s075.reference.fas" "n100.r07.s075_output/n100.r07.s075.trimmed.sorted.bam" > "n100.r07.s075_output/n100.r07.s075.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s075_output/n100.r07.s075.reference.fas" --call-indels "n100.r07.s075_output/n100.r07.s075.trimmed.sorted.bam" > "n100.r07.s075_output/n100.r07.s075.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s075_output/n100.r07.s075.trimmed.sorted.bam" > "n100.r07.s075_output/n100.r07.s075.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s075_output/n100.r07.s075.depth.txt" "n100.r07.s075_output/n100.r07.s075.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s075_output/n100.r07.s075.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s075_output/n100.r07.s075.reference.fas" | bcftools consensus -m "n100.r07.s075_output/n100.r07.s075.low_depth.tsv" tmp.vcf.gz > "n100.r07.s075_output/n100.r07.s075.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s075_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:56 scheduler task 77caf1b8 (flow 4855c020): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:56 scheduler task 77caf1b8 (flow 4855c020): waiting for completion (try 0): started
2021/07/08 17:13:56  ->  n100.r07.s005.Main.out_file 4855c020 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:56 n100.r07.s005.Main.out_file 4855c020 n100/r07/n100.r07.s005.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:78d81e034edb730feb54baf7eea381e306f2dfbcdedf7adc1fda95bf9e491502
	sha256:4855c020111d8b169a45be81ebd0d4f670668437d19a31688fe44e3bf5a18e53
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/77caf1b89e2f7c9e1be81aae4222b73ce49881421c1fb2397c03ea2cddf63d25
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s005_output"
	    wget -O "n100.r07.s005_output/n100.r07.s005.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s005_output/n100.r07.s005.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s005_output/n100.r07.s005.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s005_output/n100.r07.s005.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s005_output/n100.r07.s005.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s005_output/n100.r07.s005.reference.fas" "n100.r07.s005_output/n100.r07.s005.fq1.fastq" "n100.r07.s005_output/n100.r07.s005.fq2.fastq" | samtools view -bS - > "n100.r07.s005_output/n100.r07.s005.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s005_output/n100.r07.s005.untrimmed.sorted.bam" "n100.r07.s005_output/n100.r07.s005.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s005_output/n100.r07.s005.untrimmed.sorted.bam" -b "n100.r07.s005_output/n100.r07.s005.primers.bed" -p "n100.r07.s005_output/n100.r07.s005.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s005_output/n100.r07.s005.trimmed.sorted.bam" "n100.r07.s005_output/n100.r07.s005.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s005_output/n100.r07.s005.reference.fas" "n100.r07.s005_output/n100.r07.s005.trimmed.sorted.bam" > "n100.r07.s005_output/n100.r07.s005.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s005_output/n100.r07.s005.reference.fas" --call-indels "n100.r07.s005_output/n100.r07.s005.trimmed.sorted.bam" > "n100.r07.s005_output/n100.r07.s005.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s005_output/n100.r07.s005.trimmed.sorted.bam" > "n100.r07.s005_output/n100.r07.s005.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s005_output/n100.r07.s005.depth.txt" "n100.r07.s005_output/n100.r07.s005.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s005_output/n100.r07.s005.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s005_output/n100.r07.s005.reference.fas" | bcftools consensus -m "n100.r07.s005_output/n100.r07.s005.low_depth.tsv" tmp.vcf.gz > "n100.r07.s005_output/n100.r07.s005.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s005_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:56 scheduler task bcd66609 (flow 365c94e8): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:56 scheduler task bcd66609 (flow 365c94e8): waiting for completion (try 0): started
2021/07/08 17:13:56  ->  n100.r07.s069.Main.out_file 365c94e8 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:56 n100.r07.s069.Main.out_file 365c94e8 n100/r07/n100.r07.s069.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:15173f6fc971ee0ff40f600a36d63c95013fcaadfd8e71f337dd0dc6691b760f
	sha256:365c94e8de1185c5a89c1dc462c816e708ff1cd504466c3d22d0d5cfc9eb511c
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bcd66609f0e3df30a2d162e27eadec939fc1ae1c172d34837066fdefcabdc03b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s069_output"
	    wget -O "n100.r07.s069_output/n100.r07.s069.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s069_output/n100.r07.s069.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s069_output/n100.r07.s069.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s069_output/n100.r07.s069.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s069_output/n100.r07.s069.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s069_output/n100.r07.s069.reference.fas" "n100.r07.s069_output/n100.r07.s069.fq1.fastq" "n100.r07.s069_output/n100.r07.s069.fq2.fastq" | samtools view -bS - > "n100.r07.s069_output/n100.r07.s069.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s069_output/n100.r07.s069.untrimmed.sorted.bam" "n100.r07.s069_output/n100.r07.s069.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s069_output/n100.r07.s069.untrimmed.sorted.bam" -b "n100.r07.s069_output/n100.r07.s069.primers.bed" -p "n100.r07.s069_output/n100.r07.s069.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s069_output/n100.r07.s069.trimmed.sorted.bam" "n100.r07.s069_output/n100.r07.s069.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s069_output/n100.r07.s069.reference.fas" "n100.r07.s069_output/n100.r07.s069.trimmed.sorted.bam" > "n100.r07.s069_output/n100.r07.s069.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s069_output/n100.r07.s069.reference.fas" --call-indels "n100.r07.s069_output/n100.r07.s069.trimmed.sorted.bam" > "n100.r07.s069_output/n100.r07.s069.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s069_output/n100.r07.s069.trimmed.sorted.bam" > "n100.r07.s069_output/n100.r07.s069.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s069_output/n100.r07.s069.depth.txt" "n100.r07.s069_output/n100.r07.s069.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s069_output/n100.r07.s069.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s069_output/n100.r07.s069.reference.fas" | bcftools consensus -m "n100.r07.s069_output/n100.r07.s069.low_depth.tsv" tmp.vcf.gz > "n100.r07.s069_output/n100.r07.s069.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s069_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:57 scheduler task 3a850123 (flow f498b7de): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:57 scheduler task 3a850123 (flow f498b7de): waiting for completion (try 0): started
2021/07/08 17:13:57  ->  n100.r07.s003.Main.out_file f498b7de exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:57 n100.r07.s003.Main.out_file f498b7de n100/r07/n100.r07.s003.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f5c222c62be56bcc53e9ef594065c04848a13b9564751664b7b7e67031920f57
	sha256:f498b7dee68226b40229ce997e85c10445a0b35a9dd2b904f19f536618c4956e
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3a85012320b52ae7d9df08aacfb04afb8caf5504da5637c2f21fcea1db5266a6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s003_output"
	    wget -O "n100.r07.s003_output/n100.r07.s003.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s003_output/n100.r07.s003.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s003_output/n100.r07.s003.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s003_output/n100.r07.s003.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s003_output/n100.r07.s003.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s003_output/n100.r07.s003.reference.fas" "n100.r07.s003_output/n100.r07.s003.fq1.fastq" "n100.r07.s003_output/n100.r07.s003.fq2.fastq" | samtools view -bS - > "n100.r07.s003_output/n100.r07.s003.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s003_output/n100.r07.s003.untrimmed.sorted.bam" "n100.r07.s003_output/n100.r07.s003.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s003_output/n100.r07.s003.untrimmed.sorted.bam" -b "n100.r07.s003_output/n100.r07.s003.primers.bed" -p "n100.r07.s003_output/n100.r07.s003.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s003_output/n100.r07.s003.trimmed.sorted.bam" "n100.r07.s003_output/n100.r07.s003.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s003_output/n100.r07.s003.reference.fas" "n100.r07.s003_output/n100.r07.s003.trimmed.sorted.bam" > "n100.r07.s003_output/n100.r07.s003.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s003_output/n100.r07.s003.reference.fas" --call-indels "n100.r07.s003_output/n100.r07.s003.trimmed.sorted.bam" > "n100.r07.s003_output/n100.r07.s003.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s003_output/n100.r07.s003.trimmed.sorted.bam" > "n100.r07.s003_output/n100.r07.s003.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s003_output/n100.r07.s003.depth.txt" "n100.r07.s003_output/n100.r07.s003.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s003_output/n100.r07.s003.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s003_output/n100.r07.s003.reference.fas" | bcftools consensus -m "n100.r07.s003_output/n100.r07.s003.low_depth.tsv" tmp.vcf.gz > "n100.r07.s003_output/n100.r07.s003.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s003_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:57 scheduler task d01e6baf (flow 1bff83e3): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:57 scheduler task d01e6baf (flow 1bff83e3): waiting for completion (try 0): started
2021/07/08 17:13:57  ->  n100.r07.s025.Main.out_file 1bff83e3 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:57 n100.r07.s025.Main.out_file 1bff83e3 n100/r07/n100.r07.s025.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1288323806c6479d71947af637030c06d3fa0137d49d6e2315e18c8ce828fbcb
	sha256:1bff83e3f15ad8bb2d1777fea73b80f5722d7667c8733855c9f2e22635d79e7e
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d01e6baf63121fd6c860c2fa502e7fb4a3356db5a128646a0985c13e3a1e5813
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s025_output"
	    wget -O "n100.r07.s025_output/n100.r07.s025.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s025_output/n100.r07.s025.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s025_output/n100.r07.s025.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s025_output/n100.r07.s025.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s025_output/n100.r07.s025.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s025_output/n100.r07.s025.reference.fas" "n100.r07.s025_output/n100.r07.s025.fq1.fastq" "n100.r07.s025_output/n100.r07.s025.fq2.fastq" | samtools view -bS - > "n100.r07.s025_output/n100.r07.s025.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s025_output/n100.r07.s025.untrimmed.sorted.bam" "n100.r07.s025_output/n100.r07.s025.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s025_output/n100.r07.s025.untrimmed.sorted.bam" -b "n100.r07.s025_output/n100.r07.s025.primers.bed" -p "n100.r07.s025_output/n100.r07.s025.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s025_output/n100.r07.s025.trimmed.sorted.bam" "n100.r07.s025_output/n100.r07.s025.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s025_output/n100.r07.s025.reference.fas" "n100.r07.s025_output/n100.r07.s025.trimmed.sorted.bam" > "n100.r07.s025_output/n100.r07.s025.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s025_output/n100.r07.s025.reference.fas" --call-indels "n100.r07.s025_output/n100.r07.s025.trimmed.sorted.bam" > "n100.r07.s025_output/n100.r07.s025.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s025_output/n100.r07.s025.trimmed.sorted.bam" > "n100.r07.s025_output/n100.r07.s025.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s025_output/n100.r07.s025.depth.txt" "n100.r07.s025_output/n100.r07.s025.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s025_output/n100.r07.s025.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s025_output/n100.r07.s025.reference.fas" | bcftools consensus -m "n100.r07.s025_output/n100.r07.s025.low_depth.tsv" tmp.vcf.gz > "n100.r07.s025_output/n100.r07.s025.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s025_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:57 scheduler task 3c2fce3f (flow 3d7c11ce): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:57 scheduler task 3c2fce3f (flow 3d7c11ce): waiting for completion (try 0): started
2021/07/08 17:13:57  ->  n100.r07.s017.Main.out_file 3d7c11ce exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:57 n100.r07.s017.Main.out_file 3d7c11ce n100/r07/n100.r07.s017.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:857e37b81de97065f663ac29788dcc7a3afb2788826fe7ee73bb04ee47b55396
	sha256:3d7c11cee314f59df2471953d39b4a731f084c37c67fc7d857db4c41efa6f6c6
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3c2fce3f68707d874250cddc9e44b2f9601151f57ae2a7ed7f125e0cb149dfc6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s017_output"
	    wget -O "n100.r07.s017_output/n100.r07.s017.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s017_output/n100.r07.s017.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s017_output/n100.r07.s017.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s017_output/n100.r07.s017.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s017_output/n100.r07.s017.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s017_output/n100.r07.s017.reference.fas" "n100.r07.s017_output/n100.r07.s017.fq1.fastq" "n100.r07.s017_output/n100.r07.s017.fq2.fastq" | samtools view -bS - > "n100.r07.s017_output/n100.r07.s017.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s017_output/n100.r07.s017.untrimmed.sorted.bam" "n100.r07.s017_output/n100.r07.s017.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s017_output/n100.r07.s017.untrimmed.sorted.bam" -b "n100.r07.s017_output/n100.r07.s017.primers.bed" -p "n100.r07.s017_output/n100.r07.s017.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s017_output/n100.r07.s017.trimmed.sorted.bam" "n100.r07.s017_output/n100.r07.s017.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s017_output/n100.r07.s017.reference.fas" "n100.r07.s017_output/n100.r07.s017.trimmed.sorted.bam" > "n100.r07.s017_output/n100.r07.s017.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s017_output/n100.r07.s017.reference.fas" --call-indels "n100.r07.s017_output/n100.r07.s017.trimmed.sorted.bam" > "n100.r07.s017_output/n100.r07.s017.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s017_output/n100.r07.s017.trimmed.sorted.bam" > "n100.r07.s017_output/n100.r07.s017.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s017_output/n100.r07.s017.depth.txt" "n100.r07.s017_output/n100.r07.s017.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s017_output/n100.r07.s017.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s017_output/n100.r07.s017.reference.fas" | bcftools consensus -m "n100.r07.s017_output/n100.r07.s017.low_depth.tsv" tmp.vcf.gz > "n100.r07.s017_output/n100.r07.s017.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s017_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:57 scheduler task 4cf5300c (flow 9257a616): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:57 scheduler task 4cf5300c (flow 9257a616): waiting for completion (try 0): started
2021/07/08 17:13:57  ->  n100.r07.s050.Main.out_file 9257a616 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:57 n100.r07.s050.Main.out_file 9257a616 n100/r07/n100.r07.s050.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4330064cfed117cc7939ca9e3dde9d3ddda84c41f5b1cc2244578e526d916c58
	sha256:9257a616f45abe6cb828cb2b4cc5b1cb446a5546a17bebd3da55809cc8c82adc
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4cf5300c55d6ea785a045ce382f03a3dbedb50518b49ea825af5b26e3e432b02
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s050_output"
	    wget -O "n100.r07.s050_output/n100.r07.s050.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s050_output/n100.r07.s050.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s050_output/n100.r07.s050.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s050_output/n100.r07.s050.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s050_output/n100.r07.s050.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s050_output/n100.r07.s050.reference.fas" "n100.r07.s050_output/n100.r07.s050.fq1.fastq" "n100.r07.s050_output/n100.r07.s050.fq2.fastq" | samtools view -bS - > "n100.r07.s050_output/n100.r07.s050.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s050_output/n100.r07.s050.untrimmed.sorted.bam" "n100.r07.s050_output/n100.r07.s050.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s050_output/n100.r07.s050.untrimmed.sorted.bam" -b "n100.r07.s050_output/n100.r07.s050.primers.bed" -p "n100.r07.s050_output/n100.r07.s050.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s050_output/n100.r07.s050.trimmed.sorted.bam" "n100.r07.s050_output/n100.r07.s050.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s050_output/n100.r07.s050.reference.fas" "n100.r07.s050_output/n100.r07.s050.trimmed.sorted.bam" > "n100.r07.s050_output/n100.r07.s050.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s050_output/n100.r07.s050.reference.fas" --call-indels "n100.r07.s050_output/n100.r07.s050.trimmed.sorted.bam" > "n100.r07.s050_output/n100.r07.s050.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s050_output/n100.r07.s050.trimmed.sorted.bam" > "n100.r07.s050_output/n100.r07.s050.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s050_output/n100.r07.s050.depth.txt" "n100.r07.s050_output/n100.r07.s050.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s050_output/n100.r07.s050.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s050_output/n100.r07.s050.reference.fas" | bcftools consensus -m "n100.r07.s050_output/n100.r07.s050.low_depth.tsv" tmp.vcf.gz > "n100.r07.s050_output/n100.r07.s050.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s050_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:57 scheduler task e7923c9a (flow 2a86d1d5): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:57 scheduler task e7923c9a (flow 2a86d1d5): waiting for completion (try 0): started
2021/07/08 17:13:57  ->  n100.r07.s073.Main.out_file 2a86d1d5 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:57 n100.r07.s073.Main.out_file 2a86d1d5 n100/r07/n100.r07.s073.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a2c486502c1618f1a5d730beb25d61717e2c0909011c3add0225a6ced0a711d2
	sha256:2a86d1d5c8a78ea3a5386cae626ae5d364bad2be6aeb6ece49eee34a33753d08
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e7923c9af69eb00e6e05cf9a58053698c3c8e4dedfb2f78d6486269918c13346
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s073_output"
	    wget -O "n100.r07.s073_output/n100.r07.s073.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s073_output/n100.r07.s073.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s073_output/n100.r07.s073.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s073_output/n100.r07.s073.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s073_output/n100.r07.s073.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s073_output/n100.r07.s073.reference.fas" "n100.r07.s073_output/n100.r07.s073.fq1.fastq" "n100.r07.s073_output/n100.r07.s073.fq2.fastq" | samtools view -bS - > "n100.r07.s073_output/n100.r07.s073.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s073_output/n100.r07.s073.untrimmed.sorted.bam" "n100.r07.s073_output/n100.r07.s073.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s073_output/n100.r07.s073.untrimmed.sorted.bam" -b "n100.r07.s073_output/n100.r07.s073.primers.bed" -p "n100.r07.s073_output/n100.r07.s073.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s073_output/n100.r07.s073.trimmed.sorted.bam" "n100.r07.s073_output/n100.r07.s073.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s073_output/n100.r07.s073.reference.fas" "n100.r07.s073_output/n100.r07.s073.trimmed.sorted.bam" > "n100.r07.s073_output/n100.r07.s073.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s073_output/n100.r07.s073.reference.fas" --call-indels "n100.r07.s073_output/n100.r07.s073.trimmed.sorted.bam" > "n100.r07.s073_output/n100.r07.s073.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s073_output/n100.r07.s073.trimmed.sorted.bam" > "n100.r07.s073_output/n100.r07.s073.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s073_output/n100.r07.s073.depth.txt" "n100.r07.s073_output/n100.r07.s073.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s073_output/n100.r07.s073.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s073_output/n100.r07.s073.reference.fas" | bcftools consensus -m "n100.r07.s073_output/n100.r07.s073.low_depth.tsv" tmp.vcf.gz > "n100.r07.s073_output/n100.r07.s073.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s073_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:57 scheduler task 5f2ce7d1 (flow e0ab9d71): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:57 scheduler task 5f2ce7d1 (flow e0ab9d71): waiting for completion (try 0): started
2021/07/08 17:13:57  ->  n100.r07.s062.Main.out_file e0ab9d71 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:57 n100.r07.s062.Main.out_file e0ab9d71 n100/r07/n100.r07.s062.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a5e07e0e674cbbec92c80a3fa02167c55668773b5ec2cdfe2b8a773db44cc39c
	sha256:e0ab9d718b7e5bee3dfde1a16dc9a656619914c31a3737be90e32f88d3f85f1e
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5f2ce7d10cf00147e7e6580f104461e8af8c3177297bf49d64a2518a6a192227
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s062_output"
	    wget -O "n100.r07.s062_output/n100.r07.s062.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s062_output/n100.r07.s062.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s062_output/n100.r07.s062.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s062_output/n100.r07.s062.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s062_output/n100.r07.s062.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s062_output/n100.r07.s062.reference.fas" "n100.r07.s062_output/n100.r07.s062.fq1.fastq" "n100.r07.s062_output/n100.r07.s062.fq2.fastq" | samtools view -bS - > "n100.r07.s062_output/n100.r07.s062.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s062_output/n100.r07.s062.untrimmed.sorted.bam" "n100.r07.s062_output/n100.r07.s062.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s062_output/n100.r07.s062.untrimmed.sorted.bam" -b "n100.r07.s062_output/n100.r07.s062.primers.bed" -p "n100.r07.s062_output/n100.r07.s062.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s062_output/n100.r07.s062.trimmed.sorted.bam" "n100.r07.s062_output/n100.r07.s062.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s062_output/n100.r07.s062.reference.fas" "n100.r07.s062_output/n100.r07.s062.trimmed.sorted.bam" > "n100.r07.s062_output/n100.r07.s062.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s062_output/n100.r07.s062.reference.fas" --call-indels "n100.r07.s062_output/n100.r07.s062.trimmed.sorted.bam" > "n100.r07.s062_output/n100.r07.s062.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s062_output/n100.r07.s062.trimmed.sorted.bam" > "n100.r07.s062_output/n100.r07.s062.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s062_output/n100.r07.s062.depth.txt" "n100.r07.s062_output/n100.r07.s062.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s062_output/n100.r07.s062.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s062_output/n100.r07.s062.reference.fas" | bcftools consensus -m "n100.r07.s062_output/n100.r07.s062.low_depth.tsv" tmp.vcf.gz > "n100.r07.s062_output/n100.r07.s062.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s062_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:58 scheduler task 34c0f138 (flow 806765de): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:58 scheduler task 34c0f138 (flow 806765de): waiting for completion (try 0): started
2021/07/08 17:13:58  ->  n100.r07.s028.Main.out_file 806765de exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:58 n100.r07.s028.Main.out_file 806765de n100/r07/n100.r07.s028.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:bdec94f0c314de80b039d9c3656e96a7fbdbccda6a01ea0652e75bdfb7080d98
	sha256:806765de947c5bc275eac2f8757c1b5ad6ef41186a60b2d2ca98aac6ef70ec28
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/34c0f138153a6ff4dfeafafdb03e384216801a41e725f9c3b19c1361adf52f41
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s028_output"
	    wget -O "n100.r07.s028_output/n100.r07.s028.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s028_output/n100.r07.s028.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s028_output/n100.r07.s028.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s028_output/n100.r07.s028.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s028_output/n100.r07.s028.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s028_output/n100.r07.s028.reference.fas" "n100.r07.s028_output/n100.r07.s028.fq1.fastq" "n100.r07.s028_output/n100.r07.s028.fq2.fastq" | samtools view -bS - > "n100.r07.s028_output/n100.r07.s028.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s028_output/n100.r07.s028.untrimmed.sorted.bam" "n100.r07.s028_output/n100.r07.s028.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s028_output/n100.r07.s028.untrimmed.sorted.bam" -b "n100.r07.s028_output/n100.r07.s028.primers.bed" -p "n100.r07.s028_output/n100.r07.s028.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s028_output/n100.r07.s028.trimmed.sorted.bam" "n100.r07.s028_output/n100.r07.s028.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s028_output/n100.r07.s028.reference.fas" "n100.r07.s028_output/n100.r07.s028.trimmed.sorted.bam" > "n100.r07.s028_output/n100.r07.s028.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s028_output/n100.r07.s028.reference.fas" --call-indels "n100.r07.s028_output/n100.r07.s028.trimmed.sorted.bam" > "n100.r07.s028_output/n100.r07.s028.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s028_output/n100.r07.s028.trimmed.sorted.bam" > "n100.r07.s028_output/n100.r07.s028.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s028_output/n100.r07.s028.depth.txt" "n100.r07.s028_output/n100.r07.s028.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s028_output/n100.r07.s028.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s028_output/n100.r07.s028.reference.fas" | bcftools consensus -m "n100.r07.s028_output/n100.r07.s028.low_depth.tsv" tmp.vcf.gz > "n100.r07.s028_output/n100.r07.s028.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s028_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:58 scheduler task bcd979c9 (flow bb3f7b07): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:58 scheduler task bcd979c9 (flow bb3f7b07): waiting for completion (try 0): started
2021/07/08 17:13:58  ->  n100.r07.s092.Main.out_file bb3f7b07 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:58 n100.r07.s092.Main.out_file bb3f7b07 n100/r07/n100.r07.s092.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6d53a26332f71b57ea73e1b0e5e76787f2f85e66805e418a774f98082d087465
	sha256:bb3f7b07f5d4fe808e280c950e4e19c3f9fc7a7171b09f3de5829d2b2df7482f
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bcd979c97da9c6a0b2fd5429345387788e2e30673fc5bf8d6172913c201949ca
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s092_output"
	    wget -O "n100.r07.s092_output/n100.r07.s092.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s092_output/n100.r07.s092.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s092_output/n100.r07.s092.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s092_output/n100.r07.s092.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s092_output/n100.r07.s092.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s092_output/n100.r07.s092.reference.fas" "n100.r07.s092_output/n100.r07.s092.fq1.fastq" "n100.r07.s092_output/n100.r07.s092.fq2.fastq" | samtools view -bS - > "n100.r07.s092_output/n100.r07.s092.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s092_output/n100.r07.s092.untrimmed.sorted.bam" "n100.r07.s092_output/n100.r07.s092.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s092_output/n100.r07.s092.untrimmed.sorted.bam" -b "n100.r07.s092_output/n100.r07.s092.primers.bed" -p "n100.r07.s092_output/n100.r07.s092.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s092_output/n100.r07.s092.trimmed.sorted.bam" "n100.r07.s092_output/n100.r07.s092.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s092_output/n100.r07.s092.reference.fas" "n100.r07.s092_output/n100.r07.s092.trimmed.sorted.bam" > "n100.r07.s092_output/n100.r07.s092.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s092_output/n100.r07.s092.reference.fas" --call-indels "n100.r07.s092_output/n100.r07.s092.trimmed.sorted.bam" > "n100.r07.s092_output/n100.r07.s092.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s092_output/n100.r07.s092.trimmed.sorted.bam" > "n100.r07.s092_output/n100.r07.s092.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s092_output/n100.r07.s092.depth.txt" "n100.r07.s092_output/n100.r07.s092.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s092_output/n100.r07.s092.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s092_output/n100.r07.s092.reference.fas" | bcftools consensus -m "n100.r07.s092_output/n100.r07.s092.low_depth.tsv" tmp.vcf.gz > "n100.r07.s092_output/n100.r07.s092.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s092_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:58 scheduler task 57e27363 (flow cd67159a): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:58 scheduler task 57e27363 (flow cd67159a): waiting for completion (try 0): started
2021/07/08 17:13:58  ->  n100.r07.s031.Main.out_file cd67159a exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:58 n100.r07.s031.Main.out_file cd67159a n100/r07/n100.r07.s031.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1e4f19a28580c350671b170ed9ad3fa410ea3d2aed8b19a9c53481bf13f100e1
	sha256:cd67159a6bd3d8226c999d5f1102dfdf84af08ed92260c1c5019250b152ad8b1
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/57e27363e674a83c0737fd5ec4e85d475600a20c6e122f6da192bdb290b5104e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s031_output"
	    wget -O "n100.r07.s031_output/n100.r07.s031.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s031_output/n100.r07.s031.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s031_output/n100.r07.s031.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s031_output/n100.r07.s031.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s031_output/n100.r07.s031.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s031_output/n100.r07.s031.reference.fas" "n100.r07.s031_output/n100.r07.s031.fq1.fastq" "n100.r07.s031_output/n100.r07.s031.fq2.fastq" | samtools view -bS - > "n100.r07.s031_output/n100.r07.s031.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s031_output/n100.r07.s031.untrimmed.sorted.bam" "n100.r07.s031_output/n100.r07.s031.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s031_output/n100.r07.s031.untrimmed.sorted.bam" -b "n100.r07.s031_output/n100.r07.s031.primers.bed" -p "n100.r07.s031_output/n100.r07.s031.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s031_output/n100.r07.s031.trimmed.sorted.bam" "n100.r07.s031_output/n100.r07.s031.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s031_output/n100.r07.s031.reference.fas" "n100.r07.s031_output/n100.r07.s031.trimmed.sorted.bam" > "n100.r07.s031_output/n100.r07.s031.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s031_output/n100.r07.s031.reference.fas" --call-indels "n100.r07.s031_output/n100.r07.s031.trimmed.sorted.bam" > "n100.r07.s031_output/n100.r07.s031.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s031_output/n100.r07.s031.trimmed.sorted.bam" > "n100.r07.s031_output/n100.r07.s031.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s031_output/n100.r07.s031.depth.txt" "n100.r07.s031_output/n100.r07.s031.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s031_output/n100.r07.s031.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s031_output/n100.r07.s031.reference.fas" | bcftools consensus -m "n100.r07.s031_output/n100.r07.s031.low_depth.tsv" tmp.vcf.gz > "n100.r07.s031_output/n100.r07.s031.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s031_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:58 scheduler task fd193e05 (flow e299776e): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:58 scheduler task fd193e05 (flow e299776e): waiting for completion (try 0): started
2021/07/08 17:13:58  ->  n100.r07.s013.Main.out_file e299776e exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:58 n100.r07.s013.Main.out_file e299776e n100/r07/n100.r07.s013.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4440493c1713f7b46a91c911dc1a4efc382e67aa8ecf5be3eac40fc4b590e923
	sha256:e299776ea94343d5afbe3debbb3bea7963ca13ef9a7fff17899271adf6303a77
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fd193e054d3b956e77ecf1743ca92e990eb8abb2f23b908ddef67311c62f38c6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s013_output"
	    wget -O "n100.r07.s013_output/n100.r07.s013.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s013_output/n100.r07.s013.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s013_output/n100.r07.s013.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s013_output/n100.r07.s013.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s013_output/n100.r07.s013.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s013_output/n100.r07.s013.reference.fas" "n100.r07.s013_output/n100.r07.s013.fq1.fastq" "n100.r07.s013_output/n100.r07.s013.fq2.fastq" | samtools view -bS - > "n100.r07.s013_output/n100.r07.s013.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s013_output/n100.r07.s013.untrimmed.sorted.bam" "n100.r07.s013_output/n100.r07.s013.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s013_output/n100.r07.s013.untrimmed.sorted.bam" -b "n100.r07.s013_output/n100.r07.s013.primers.bed" -p "n100.r07.s013_output/n100.r07.s013.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s013_output/n100.r07.s013.trimmed.sorted.bam" "n100.r07.s013_output/n100.r07.s013.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s013_output/n100.r07.s013.reference.fas" "n100.r07.s013_output/n100.r07.s013.trimmed.sorted.bam" > "n100.r07.s013_output/n100.r07.s013.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s013_output/n100.r07.s013.reference.fas" --call-indels "n100.r07.s013_output/n100.r07.s013.trimmed.sorted.bam" > "n100.r07.s013_output/n100.r07.s013.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s013_output/n100.r07.s013.trimmed.sorted.bam" > "n100.r07.s013_output/n100.r07.s013.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s013_output/n100.r07.s013.depth.txt" "n100.r07.s013_output/n100.r07.s013.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s013_output/n100.r07.s013.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s013_output/n100.r07.s013.reference.fas" | bcftools consensus -m "n100.r07.s013_output/n100.r07.s013.low_depth.tsv" tmp.vcf.gz > "n100.r07.s013_output/n100.r07.s013.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s013_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:58 scheduler task fb62fd75 (flow 91d65e11): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:58 scheduler task fb62fd75 (flow 91d65e11): waiting for completion (try 0): started
2021/07/08 17:13:58  ->  n100.r07.s074.Main.out_file 91d65e11 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:58 n100.r07.s074.Main.out_file 91d65e11 n100/r07/n100.r07.s074.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:78e88b9360ff405924bbe4c5a4218eb8e73d5ff2d7f3ddb12454da574e65f894
	sha256:91d65e11203707f8495e3881f5a9192d5ed0b2cce8af4bb7354d16dc2a62c753
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fb62fd752738fdaee3b34ed4115aa1a750fa10056c1c15cf3e95966c66a9e3d5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s074_output"
	    wget -O "n100.r07.s074_output/n100.r07.s074.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s074_output/n100.r07.s074.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s074_output/n100.r07.s074.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s074_output/n100.r07.s074.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s074_output/n100.r07.s074.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s074_output/n100.r07.s074.reference.fas" "n100.r07.s074_output/n100.r07.s074.fq1.fastq" "n100.r07.s074_output/n100.r07.s074.fq2.fastq" | samtools view -bS - > "n100.r07.s074_output/n100.r07.s074.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s074_output/n100.r07.s074.untrimmed.sorted.bam" "n100.r07.s074_output/n100.r07.s074.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s074_output/n100.r07.s074.untrimmed.sorted.bam" -b "n100.r07.s074_output/n100.r07.s074.primers.bed" -p "n100.r07.s074_output/n100.r07.s074.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s074_output/n100.r07.s074.trimmed.sorted.bam" "n100.r07.s074_output/n100.r07.s074.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s074_output/n100.r07.s074.reference.fas" "n100.r07.s074_output/n100.r07.s074.trimmed.sorted.bam" > "n100.r07.s074_output/n100.r07.s074.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s074_output/n100.r07.s074.reference.fas" --call-indels "n100.r07.s074_output/n100.r07.s074.trimmed.sorted.bam" > "n100.r07.s074_output/n100.r07.s074.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s074_output/n100.r07.s074.trimmed.sorted.bam" > "n100.r07.s074_output/n100.r07.s074.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s074_output/n100.r07.s074.depth.txt" "n100.r07.s074_output/n100.r07.s074.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s074_output/n100.r07.s074.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s074_output/n100.r07.s074.reference.fas" | bcftools consensus -m "n100.r07.s074_output/n100.r07.s074.low_depth.tsv" tmp.vcf.gz > "n100.r07.s074_output/n100.r07.s074.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s074_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:58 scheduler task f1fdc12e (flow d483a765): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:58 scheduler task f1fdc12e (flow d483a765): waiting for completion (try 0): started
2021/07/08 17:13:58  ->  n100.r07.s095.Main.out_file d483a765 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:58 n100.r07.s095.Main.out_file d483a765 n100/r07/n100.r07.s095.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9543261aa8422611dc55f92b643a3b169205ef11856f19e741a6ddab19e849af
	sha256:d483a7654959e7927b45031411a24f869d642edb3fa3440627f3ef2029902159
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f1fdc12e9789432344a3dcd50964699e30e2b573540015a1c21359d23ffa237a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s095_output"
	    wget -O "n100.r07.s095_output/n100.r07.s095.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s095_output/n100.r07.s095.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s095_output/n100.r07.s095.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s095_output/n100.r07.s095.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s095_output/n100.r07.s095.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s095_output/n100.r07.s095.reference.fas" "n100.r07.s095_output/n100.r07.s095.fq1.fastq" "n100.r07.s095_output/n100.r07.s095.fq2.fastq" | samtools view -bS - > "n100.r07.s095_output/n100.r07.s095.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s095_output/n100.r07.s095.untrimmed.sorted.bam" "n100.r07.s095_output/n100.r07.s095.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s095_output/n100.r07.s095.untrimmed.sorted.bam" -b "n100.r07.s095_output/n100.r07.s095.primers.bed" -p "n100.r07.s095_output/n100.r07.s095.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s095_output/n100.r07.s095.trimmed.sorted.bam" "n100.r07.s095_output/n100.r07.s095.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s095_output/n100.r07.s095.reference.fas" "n100.r07.s095_output/n100.r07.s095.trimmed.sorted.bam" > "n100.r07.s095_output/n100.r07.s095.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s095_output/n100.r07.s095.reference.fas" --call-indels "n100.r07.s095_output/n100.r07.s095.trimmed.sorted.bam" > "n100.r07.s095_output/n100.r07.s095.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s095_output/n100.r07.s095.trimmed.sorted.bam" > "n100.r07.s095_output/n100.r07.s095.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s095_output/n100.r07.s095.depth.txt" "n100.r07.s095_output/n100.r07.s095.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s095_output/n100.r07.s095.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s095_output/n100.r07.s095.reference.fas" | bcftools consensus -m "n100.r07.s095_output/n100.r07.s095.low_depth.tsv" tmp.vcf.gz > "n100.r07.s095_output/n100.r07.s095.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s095_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:59 scheduler task c9898fc4 (flow 8efd3fba): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:59 scheduler task c9898fc4 (flow 8efd3fba): waiting for completion (try 0): started
2021/07/08 17:13:59  ->  n100.r07.s044.Main.out_file 8efd3fba exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:59 n100.r07.s044.Main.out_file 8efd3fba n100/r07/n100.r07.s044.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b747c86c3a30383cf6c69b69ab47ee0331c19da40b804919ff6495477894c618
	sha256:8efd3fba9bfead8ae52dc18ef2399b985784b1bcad6fc070664829835652b7ea
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c9898fc4ec3af00cdaf63212f6342cdb2072b9f55b33b9f7b397f81f81ac5aaf
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s044_output"
	    wget -O "n100.r07.s044_output/n100.r07.s044.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s044_output/n100.r07.s044.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s044_output/n100.r07.s044.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s044_output/n100.r07.s044.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s044_output/n100.r07.s044.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s044_output/n100.r07.s044.reference.fas" "n100.r07.s044_output/n100.r07.s044.fq1.fastq" "n100.r07.s044_output/n100.r07.s044.fq2.fastq" | samtools view -bS - > "n100.r07.s044_output/n100.r07.s044.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s044_output/n100.r07.s044.untrimmed.sorted.bam" "n100.r07.s044_output/n100.r07.s044.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s044_output/n100.r07.s044.untrimmed.sorted.bam" -b "n100.r07.s044_output/n100.r07.s044.primers.bed" -p "n100.r07.s044_output/n100.r07.s044.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s044_output/n100.r07.s044.trimmed.sorted.bam" "n100.r07.s044_output/n100.r07.s044.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s044_output/n100.r07.s044.reference.fas" "n100.r07.s044_output/n100.r07.s044.trimmed.sorted.bam" > "n100.r07.s044_output/n100.r07.s044.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s044_output/n100.r07.s044.reference.fas" --call-indels "n100.r07.s044_output/n100.r07.s044.trimmed.sorted.bam" > "n100.r07.s044_output/n100.r07.s044.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s044_output/n100.r07.s044.trimmed.sorted.bam" > "n100.r07.s044_output/n100.r07.s044.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s044_output/n100.r07.s044.depth.txt" "n100.r07.s044_output/n100.r07.s044.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s044_output/n100.r07.s044.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s044_output/n100.r07.s044.reference.fas" | bcftools consensus -m "n100.r07.s044_output/n100.r07.s044.low_depth.tsv" tmp.vcf.gz > "n100.r07.s044_output/n100.r07.s044.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s044_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:59 scheduler task 5008561a (flow 3ac59401): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:59 scheduler task 5008561a (flow 3ac59401): waiting for completion (try 0): started
2021/07/08 17:13:59  ->  n100.r07.s096.Main.out_file 3ac59401 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:59 n100.r07.s096.Main.out_file 3ac59401 n100/r07/n100.r07.s096.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:61fb37585f169dfe7e0c11e648c3c96514575739d6c30aa272cc00f7d08211a2
	sha256:3ac5940126f94583084ecc4604a9a488498d86451f251d64b936fb58e1c77eea
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5008561a9cf486b69ea9090c42cebd62743d4ce35909dfbb8497a088f6a90f81
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s096_output"
	    wget -O "n100.r07.s096_output/n100.r07.s096.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s096_output/n100.r07.s096.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s096_output/n100.r07.s096.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s096_output/n100.r07.s096.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s096_output/n100.r07.s096.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s096_output/n100.r07.s096.reference.fas" "n100.r07.s096_output/n100.r07.s096.fq1.fastq" "n100.r07.s096_output/n100.r07.s096.fq2.fastq" | samtools view -bS - > "n100.r07.s096_output/n100.r07.s096.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s096_output/n100.r07.s096.untrimmed.sorted.bam" "n100.r07.s096_output/n100.r07.s096.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s096_output/n100.r07.s096.untrimmed.sorted.bam" -b "n100.r07.s096_output/n100.r07.s096.primers.bed" -p "n100.r07.s096_output/n100.r07.s096.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s096_output/n100.r07.s096.trimmed.sorted.bam" "n100.r07.s096_output/n100.r07.s096.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s096_output/n100.r07.s096.reference.fas" "n100.r07.s096_output/n100.r07.s096.trimmed.sorted.bam" > "n100.r07.s096_output/n100.r07.s096.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s096_output/n100.r07.s096.reference.fas" --call-indels "n100.r07.s096_output/n100.r07.s096.trimmed.sorted.bam" > "n100.r07.s096_output/n100.r07.s096.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s096_output/n100.r07.s096.trimmed.sorted.bam" > "n100.r07.s096_output/n100.r07.s096.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s096_output/n100.r07.s096.depth.txt" "n100.r07.s096_output/n100.r07.s096.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s096_output/n100.r07.s096.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s096_output/n100.r07.s096.reference.fas" | bcftools consensus -m "n100.r07.s096_output/n100.r07.s096.low_depth.tsv" tmp.vcf.gz > "n100.r07.s096_output/n100.r07.s096.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s096_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:59 scheduler task db4186ab (flow 9e638bb7): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:59 scheduler task db4186ab (flow 9e638bb7): waiting for completion (try 0): started
2021/07/08 17:13:59  ->  n100.r07.s007.Main.out_file 9e638bb7 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:59 n100.r07.s007.Main.out_file 9e638bb7 n100/r07/n100.r07.s007.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b15934e34e3ac10bec66fed5b6a265871dcab62cb74967fd59e598fd42d8936e
	sha256:9e638bb7c0422ed3d3d429543f297218bc3ed85492675881e1240ffd937573d9
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/db4186ab4828fa96fce0a1b9d409badd15b9c930a5b2eedc3f581338ba8abe0e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s007_output"
	    wget -O "n100.r07.s007_output/n100.r07.s007.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s007_output/n100.r07.s007.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s007_output/n100.r07.s007.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s007_output/n100.r07.s007.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s007_output/n100.r07.s007.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s007_output/n100.r07.s007.reference.fas" "n100.r07.s007_output/n100.r07.s007.fq1.fastq" "n100.r07.s007_output/n100.r07.s007.fq2.fastq" | samtools view -bS - > "n100.r07.s007_output/n100.r07.s007.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s007_output/n100.r07.s007.untrimmed.sorted.bam" "n100.r07.s007_output/n100.r07.s007.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s007_output/n100.r07.s007.untrimmed.sorted.bam" -b "n100.r07.s007_output/n100.r07.s007.primers.bed" -p "n100.r07.s007_output/n100.r07.s007.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s007_output/n100.r07.s007.trimmed.sorted.bam" "n100.r07.s007_output/n100.r07.s007.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s007_output/n100.r07.s007.reference.fas" "n100.r07.s007_output/n100.r07.s007.trimmed.sorted.bam" > "n100.r07.s007_output/n100.r07.s007.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s007_output/n100.r07.s007.reference.fas" --call-indels "n100.r07.s007_output/n100.r07.s007.trimmed.sorted.bam" > "n100.r07.s007_output/n100.r07.s007.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s007_output/n100.r07.s007.trimmed.sorted.bam" > "n100.r07.s007_output/n100.r07.s007.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s007_output/n100.r07.s007.depth.txt" "n100.r07.s007_output/n100.r07.s007.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s007_output/n100.r07.s007.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s007_output/n100.r07.s007.reference.fas" | bcftools consensus -m "n100.r07.s007_output/n100.r07.s007.low_depth.tsv" tmp.vcf.gz > "n100.r07.s007_output/n100.r07.s007.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s007_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:59 scheduler task 31906a42 (flow 667619f5): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:59 scheduler task 31906a42 (flow 667619f5): waiting for completion (try 0): started
2021/07/08 17:13:59  ->  n100.r07.s053.Main.out_file 667619f5 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:59 n100.r07.s053.Main.out_file 667619f5 n100/r07/n100.r07.s053.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:41e81b8302535adc8b669e4644ab65b32de0ea392d1bb1aa1197f6db92600c48
	sha256:667619f5fca71d36068cbeeeeb500a95795fc4a48d5cb4716ec8de24f14d0487
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/31906a42668796a31756672453864bcf9bc94c298722d47fe857cbed84a67a20
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s053_output"
	    wget -O "n100.r07.s053_output/n100.r07.s053.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s053_output/n100.r07.s053.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s053_output/n100.r07.s053.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s053_output/n100.r07.s053.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s053_output/n100.r07.s053.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s053_output/n100.r07.s053.reference.fas" "n100.r07.s053_output/n100.r07.s053.fq1.fastq" "n100.r07.s053_output/n100.r07.s053.fq2.fastq" | samtools view -bS - > "n100.r07.s053_output/n100.r07.s053.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s053_output/n100.r07.s053.untrimmed.sorted.bam" "n100.r07.s053_output/n100.r07.s053.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s053_output/n100.r07.s053.untrimmed.sorted.bam" -b "n100.r07.s053_output/n100.r07.s053.primers.bed" -p "n100.r07.s053_output/n100.r07.s053.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s053_output/n100.r07.s053.trimmed.sorted.bam" "n100.r07.s053_output/n100.r07.s053.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s053_output/n100.r07.s053.reference.fas" "n100.r07.s053_output/n100.r07.s053.trimmed.sorted.bam" > "n100.r07.s053_output/n100.r07.s053.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s053_output/n100.r07.s053.reference.fas" --call-indels "n100.r07.s053_output/n100.r07.s053.trimmed.sorted.bam" > "n100.r07.s053_output/n100.r07.s053.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s053_output/n100.r07.s053.trimmed.sorted.bam" > "n100.r07.s053_output/n100.r07.s053.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s053_output/n100.r07.s053.depth.txt" "n100.r07.s053_output/n100.r07.s053.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s053_output/n100.r07.s053.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s053_output/n100.r07.s053.reference.fas" | bcftools consensus -m "n100.r07.s053_output/n100.r07.s053.low_depth.tsv" tmp.vcf.gz > "n100.r07.s053_output/n100.r07.s053.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s053_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:59 scheduler task 0d5c5330 (flow c96780e2): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:59 scheduler task 0d5c5330 (flow c96780e2): waiting for completion (try 0): started
2021/07/08 17:13:59  ->  n100.r07.s047.Main.out_file c96780e2 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:59 n100.r07.s047.Main.out_file c96780e2 n100/r07/n100.r07.s047.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:78643578a9387babc7623a18340f3fd2bc706a6cb656e602e3f6ae7a9b2acf44
	sha256:c96780e217bb53e39c51cce8b45cf1dfa83ef7fd66aa1db53931cbc0888c1be6
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0d5c533019fc576a6a040f5cb61c97ba5f19b3faad7579b19aed6d22715b154a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s047_output"
	    wget -O "n100.r07.s047_output/n100.r07.s047.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s047_output/n100.r07.s047.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s047_output/n100.r07.s047.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s047_output/n100.r07.s047.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s047_output/n100.r07.s047.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s047_output/n100.r07.s047.reference.fas" "n100.r07.s047_output/n100.r07.s047.fq1.fastq" "n100.r07.s047_output/n100.r07.s047.fq2.fastq" | samtools view -bS - > "n100.r07.s047_output/n100.r07.s047.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s047_output/n100.r07.s047.untrimmed.sorted.bam" "n100.r07.s047_output/n100.r07.s047.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s047_output/n100.r07.s047.untrimmed.sorted.bam" -b "n100.r07.s047_output/n100.r07.s047.primers.bed" -p "n100.r07.s047_output/n100.r07.s047.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s047_output/n100.r07.s047.trimmed.sorted.bam" "n100.r07.s047_output/n100.r07.s047.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s047_output/n100.r07.s047.reference.fas" "n100.r07.s047_output/n100.r07.s047.trimmed.sorted.bam" > "n100.r07.s047_output/n100.r07.s047.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s047_output/n100.r07.s047.reference.fas" --call-indels "n100.r07.s047_output/n100.r07.s047.trimmed.sorted.bam" > "n100.r07.s047_output/n100.r07.s047.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s047_output/n100.r07.s047.trimmed.sorted.bam" > "n100.r07.s047_output/n100.r07.s047.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s047_output/n100.r07.s047.depth.txt" "n100.r07.s047_output/n100.r07.s047.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s047_output/n100.r07.s047.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s047_output/n100.r07.s047.reference.fas" | bcftools consensus -m "n100.r07.s047_output/n100.r07.s047.low_depth.tsv" tmp.vcf.gz > "n100.r07.s047_output/n100.r07.s047.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s047_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:59 scheduler task bb3aebb8 (flow 2ffcac3d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:59 scheduler task bb3aebb8 (flow 2ffcac3d): waiting for completion (try 0): started
2021/07/08 17:13:59  ->  n100.r07.s088.Main.out_file 2ffcac3d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:59 n100.r07.s088.Main.out_file 2ffcac3d n100/r07/n100.r07.s088.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:efa806bc5e1a5ccdc7c54aa1dbbdbd5e9940587c2a7f31da7f4a5e0c9d74cda0
	sha256:2ffcac3d26508e93be4292b6df3f84aa07aed65afdb278d9ce393d77eff82336
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bb3aebb85c1344ca516855fdcdd4effe1c0ab49a2e31a7501349d122431dfaae
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s088_output"
	    wget -O "n100.r07.s088_output/n100.r07.s088.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s088_output/n100.r07.s088.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s088_output/n100.r07.s088.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s088_output/n100.r07.s088.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s088_output/n100.r07.s088.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s088_output/n100.r07.s088.reference.fas" "n100.r07.s088_output/n100.r07.s088.fq1.fastq" "n100.r07.s088_output/n100.r07.s088.fq2.fastq" | samtools view -bS - > "n100.r07.s088_output/n100.r07.s088.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s088_output/n100.r07.s088.untrimmed.sorted.bam" "n100.r07.s088_output/n100.r07.s088.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s088_output/n100.r07.s088.untrimmed.sorted.bam" -b "n100.r07.s088_output/n100.r07.s088.primers.bed" -p "n100.r07.s088_output/n100.r07.s088.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s088_output/n100.r07.s088.trimmed.sorted.bam" "n100.r07.s088_output/n100.r07.s088.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s088_output/n100.r07.s088.reference.fas" "n100.r07.s088_output/n100.r07.s088.trimmed.sorted.bam" > "n100.r07.s088_output/n100.r07.s088.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s088_output/n100.r07.s088.reference.fas" --call-indels "n100.r07.s088_output/n100.r07.s088.trimmed.sorted.bam" > "n100.r07.s088_output/n100.r07.s088.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s088_output/n100.r07.s088.trimmed.sorted.bam" > "n100.r07.s088_output/n100.r07.s088.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s088_output/n100.r07.s088.depth.txt" "n100.r07.s088_output/n100.r07.s088.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s088_output/n100.r07.s088.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s088_output/n100.r07.s088.reference.fas" | bcftools consensus -m "n100.r07.s088_output/n100.r07.s088.low_depth.tsv" tmp.vcf.gz > "n100.r07.s088_output/n100.r07.s088.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s088_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:13:59 scheduler task 164261c5 (flow 441e1d42): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:13:59 scheduler task 164261c5 (flow 441e1d42): waiting for completion (try 0): started
2021/07/08 17:13:59  ->  n100.r07.s082.Main.out_file 441e1d42 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:13:59 n100.r07.s082.Main.out_file 441e1d42 n100/r07/n100.r07.s082.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8bd55b9628816de79e37e240842a119a88f171e98a0bf7f7cbb82e4600a24a11
	sha256:441e1d42809de958f385d4eedc1a2135790869cb92e0d1d5e27e8061c654664f
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/164261c51aad94c53b86a2bb88b88ed2bc20b746aeadd19765b2e721e75103b7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s082_output"
	    wget -O "n100.r07.s082_output/n100.r07.s082.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s082_output/n100.r07.s082.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s082_output/n100.r07.s082.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s082_output/n100.r07.s082.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s082_output/n100.r07.s082.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s082_output/n100.r07.s082.reference.fas" "n100.r07.s082_output/n100.r07.s082.fq1.fastq" "n100.r07.s082_output/n100.r07.s082.fq2.fastq" | samtools view -bS - > "n100.r07.s082_output/n100.r07.s082.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s082_output/n100.r07.s082.untrimmed.sorted.bam" "n100.r07.s082_output/n100.r07.s082.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s082_output/n100.r07.s082.untrimmed.sorted.bam" -b "n100.r07.s082_output/n100.r07.s082.primers.bed" -p "n100.r07.s082_output/n100.r07.s082.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s082_output/n100.r07.s082.trimmed.sorted.bam" "n100.r07.s082_output/n100.r07.s082.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s082_output/n100.r07.s082.reference.fas" "n100.r07.s082_output/n100.r07.s082.trimmed.sorted.bam" > "n100.r07.s082_output/n100.r07.s082.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s082_output/n100.r07.s082.reference.fas" --call-indels "n100.r07.s082_output/n100.r07.s082.trimmed.sorted.bam" > "n100.r07.s082_output/n100.r07.s082.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s082_output/n100.r07.s082.trimmed.sorted.bam" > "n100.r07.s082_output/n100.r07.s082.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s082_output/n100.r07.s082.depth.txt" "n100.r07.s082_output/n100.r07.s082.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s082_output/n100.r07.s082.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s082_output/n100.r07.s082.reference.fas" | bcftools consensus -m "n100.r07.s082_output/n100.r07.s082.low_depth.tsv" tmp.vcf.gz > "n100.r07.s082_output/n100.r07.s082.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s082_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:00 scheduler task 1d2e33c5 (flow e07d1478): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:00 scheduler task 1d2e33c5 (flow e07d1478): waiting for completion (try 0): started
2021/07/08 17:14:00  ->  n100.r07.s035.Main.out_file e07d1478 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:00 n100.r07.s035.Main.out_file e07d1478 n100/r07/n100.r07.s035.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d061e699887daa04d36feea96138335c495e1b1cc734ab5d9d071d5218a6864a
	sha256:e07d14782e68ae4336961539d58ea041e36688c17374219250144a3883b85ba9
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1d2e33c5299c35496d0c0263b41ca80ac3efc254934c557301d86985c1b11769
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s035_output"
	    wget -O "n100.r07.s035_output/n100.r07.s035.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s035_output/n100.r07.s035.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s035_output/n100.r07.s035.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s035_output/n100.r07.s035.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s035_output/n100.r07.s035.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s035_output/n100.r07.s035.reference.fas" "n100.r07.s035_output/n100.r07.s035.fq1.fastq" "n100.r07.s035_output/n100.r07.s035.fq2.fastq" | samtools view -bS - > "n100.r07.s035_output/n100.r07.s035.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s035_output/n100.r07.s035.untrimmed.sorted.bam" "n100.r07.s035_output/n100.r07.s035.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s035_output/n100.r07.s035.untrimmed.sorted.bam" -b "n100.r07.s035_output/n100.r07.s035.primers.bed" -p "n100.r07.s035_output/n100.r07.s035.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s035_output/n100.r07.s035.trimmed.sorted.bam" "n100.r07.s035_output/n100.r07.s035.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s035_output/n100.r07.s035.reference.fas" "n100.r07.s035_output/n100.r07.s035.trimmed.sorted.bam" > "n100.r07.s035_output/n100.r07.s035.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s035_output/n100.r07.s035.reference.fas" --call-indels "n100.r07.s035_output/n100.r07.s035.trimmed.sorted.bam" > "n100.r07.s035_output/n100.r07.s035.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s035_output/n100.r07.s035.trimmed.sorted.bam" > "n100.r07.s035_output/n100.r07.s035.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s035_output/n100.r07.s035.depth.txt" "n100.r07.s035_output/n100.r07.s035.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s035_output/n100.r07.s035.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s035_output/n100.r07.s035.reference.fas" | bcftools consensus -m "n100.r07.s035_output/n100.r07.s035.low_depth.tsv" tmp.vcf.gz > "n100.r07.s035_output/n100.r07.s035.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s035_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:00 scheduler task 3f55473f (flow 3d776298): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:00 scheduler task 3f55473f (flow 3d776298): waiting for completion (try 0): started
2021/07/08 17:14:00  ->  n100.r07.s084.Main.out_file 3d776298 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:00 n100.r07.s084.Main.out_file 3d776298 n100/r07/n100.r07.s084.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:edf69997b141721a730d1a3d95148da331beac466b05d1f6b42a6556e4474f59
	sha256:3d7762987f5c3822516c27b469fa336cafbd37b5930eeb8627b30f87c375ef9b
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3f55473fe8e37c6038227e9ed1c26cc2f4c209e6593f6f2b9e39af0268306135
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s084_output"
	    wget -O "n100.r07.s084_output/n100.r07.s084.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s084_output/n100.r07.s084.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s084_output/n100.r07.s084.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s084_output/n100.r07.s084.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s084_output/n100.r07.s084.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s084_output/n100.r07.s084.reference.fas" "n100.r07.s084_output/n100.r07.s084.fq1.fastq" "n100.r07.s084_output/n100.r07.s084.fq2.fastq" | samtools view -bS - > "n100.r07.s084_output/n100.r07.s084.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s084_output/n100.r07.s084.untrimmed.sorted.bam" "n100.r07.s084_output/n100.r07.s084.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s084_output/n100.r07.s084.untrimmed.sorted.bam" -b "n100.r07.s084_output/n100.r07.s084.primers.bed" -p "n100.r07.s084_output/n100.r07.s084.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s084_output/n100.r07.s084.trimmed.sorted.bam" "n100.r07.s084_output/n100.r07.s084.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s084_output/n100.r07.s084.reference.fas" "n100.r07.s084_output/n100.r07.s084.trimmed.sorted.bam" > "n100.r07.s084_output/n100.r07.s084.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s084_output/n100.r07.s084.reference.fas" --call-indels "n100.r07.s084_output/n100.r07.s084.trimmed.sorted.bam" > "n100.r07.s084_output/n100.r07.s084.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s084_output/n100.r07.s084.trimmed.sorted.bam" > "n100.r07.s084_output/n100.r07.s084.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s084_output/n100.r07.s084.depth.txt" "n100.r07.s084_output/n100.r07.s084.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s084_output/n100.r07.s084.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s084_output/n100.r07.s084.reference.fas" | bcftools consensus -m "n100.r07.s084_output/n100.r07.s084.low_depth.tsv" tmp.vcf.gz > "n100.r07.s084_output/n100.r07.s084.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s084_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:00 scheduler task 10a99fae (flow 7b842208): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:00 scheduler task 10a99fae (flow 7b842208): waiting for completion (try 0): started
2021/07/08 17:14:00  ->  n100.r07.s041.Main.out_file 7b842208 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:00 n100.r07.s041.Main.out_file 7b842208 n100/r07/n100.r07.s041.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4467f2e3fa63bcfe7a93883d45bacfe31c7f88eb93848c1bd042ef69b94219af
	sha256:7b842208cf17d16cbcff4650f81c6a4884be4f8f84caa74fd3391d19c3a0db5a
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/10a99fae993f8493df5a81d8545f525102b5c4f9b71ae88550a9627d7faf1ff3
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s041_output"
	    wget -O "n100.r07.s041_output/n100.r07.s041.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s041_output/n100.r07.s041.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s041_output/n100.r07.s041.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s041_output/n100.r07.s041.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s041_output/n100.r07.s041.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s041_output/n100.r07.s041.reference.fas" "n100.r07.s041_output/n100.r07.s041.fq1.fastq" "n100.r07.s041_output/n100.r07.s041.fq2.fastq" | samtools view -bS - > "n100.r07.s041_output/n100.r07.s041.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s041_output/n100.r07.s041.untrimmed.sorted.bam" "n100.r07.s041_output/n100.r07.s041.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s041_output/n100.r07.s041.untrimmed.sorted.bam" -b "n100.r07.s041_output/n100.r07.s041.primers.bed" -p "n100.r07.s041_output/n100.r07.s041.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s041_output/n100.r07.s041.trimmed.sorted.bam" "n100.r07.s041_output/n100.r07.s041.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s041_output/n100.r07.s041.reference.fas" "n100.r07.s041_output/n100.r07.s041.trimmed.sorted.bam" > "n100.r07.s041_output/n100.r07.s041.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s041_output/n100.r07.s041.reference.fas" --call-indels "n100.r07.s041_output/n100.r07.s041.trimmed.sorted.bam" > "n100.r07.s041_output/n100.r07.s041.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s041_output/n100.r07.s041.trimmed.sorted.bam" > "n100.r07.s041_output/n100.r07.s041.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s041_output/n100.r07.s041.depth.txt" "n100.r07.s041_output/n100.r07.s041.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s041_output/n100.r07.s041.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s041_output/n100.r07.s041.reference.fas" | bcftools consensus -m "n100.r07.s041_output/n100.r07.s041.low_depth.tsv" tmp.vcf.gz > "n100.r07.s041_output/n100.r07.s041.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s041_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:00 scheduler task c0a2e047 (flow 281a5421): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:00 scheduler task c0a2e047 (flow 281a5421): waiting for completion (try 0): started
2021/07/08 17:14:00  ->  n100.r07.s010.Main.out_file 281a5421 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:00 n100.r07.s010.Main.out_file 281a5421 n100/r07/n100.r07.s010.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4e336fcaa0ca83c606446ab0d092064aa169526eeac0d533ee3cbe494f31a26e
	sha256:281a5421aaccda90a90750545225d60ff5262e8aa6c0ce1201081d4d7131811f
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c0a2e0470d72ca4634af11e6dd971352a3bfc104e9536418861197ba15f193a3
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s010_output"
	    wget -O "n100.r07.s010_output/n100.r07.s010.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s010_output/n100.r07.s010.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s010_output/n100.r07.s010.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s010_output/n100.r07.s010.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s010_output/n100.r07.s010.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s010_output/n100.r07.s010.reference.fas" "n100.r07.s010_output/n100.r07.s010.fq1.fastq" "n100.r07.s010_output/n100.r07.s010.fq2.fastq" | samtools view -bS - > "n100.r07.s010_output/n100.r07.s010.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s010_output/n100.r07.s010.untrimmed.sorted.bam" "n100.r07.s010_output/n100.r07.s010.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s010_output/n100.r07.s010.untrimmed.sorted.bam" -b "n100.r07.s010_output/n100.r07.s010.primers.bed" -p "n100.r07.s010_output/n100.r07.s010.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s010_output/n100.r07.s010.trimmed.sorted.bam" "n100.r07.s010_output/n100.r07.s010.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s010_output/n100.r07.s010.reference.fas" "n100.r07.s010_output/n100.r07.s010.trimmed.sorted.bam" > "n100.r07.s010_output/n100.r07.s010.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s010_output/n100.r07.s010.reference.fas" --call-indels "n100.r07.s010_output/n100.r07.s010.trimmed.sorted.bam" > "n100.r07.s010_output/n100.r07.s010.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s010_output/n100.r07.s010.trimmed.sorted.bam" > "n100.r07.s010_output/n100.r07.s010.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s010_output/n100.r07.s010.depth.txt" "n100.r07.s010_output/n100.r07.s010.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s010_output/n100.r07.s010.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s010_output/n100.r07.s010.reference.fas" | bcftools consensus -m "n100.r07.s010_output/n100.r07.s010.low_depth.tsv" tmp.vcf.gz > "n100.r07.s010_output/n100.r07.s010.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s010_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:00 scheduler task 88d23280 (flow bbce7a63): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:00 scheduler task 88d23280 (flow bbce7a63): waiting for completion (try 0): started
2021/07/08 17:14:00  ->  n100.r07.s033.Main.out_file bbce7a63 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:00 n100.r07.s033.Main.out_file bbce7a63 n100/r07/n100.r07.s033.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a6b2770b06ea8498095ffbf40a3cf29cec1ee8d85bc1aae42da9e6e75857da00
	sha256:bbce7a635c11c3c90bacaf3c37dd2f039e3e84ce3291fe05a8be7eb0dd0b3909
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/88d232805559e7444a8570b21d96964fff82c803d6070425543e8acd449dd969
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s033_output"
	    wget -O "n100.r07.s033_output/n100.r07.s033.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s033_output/n100.r07.s033.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s033_output/n100.r07.s033.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s033_output/n100.r07.s033.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s033_output/n100.r07.s033.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s033_output/n100.r07.s033.reference.fas" "n100.r07.s033_output/n100.r07.s033.fq1.fastq" "n100.r07.s033_output/n100.r07.s033.fq2.fastq" | samtools view -bS - > "n100.r07.s033_output/n100.r07.s033.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s033_output/n100.r07.s033.untrimmed.sorted.bam" "n100.r07.s033_output/n100.r07.s033.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s033_output/n100.r07.s033.untrimmed.sorted.bam" -b "n100.r07.s033_output/n100.r07.s033.primers.bed" -p "n100.r07.s033_output/n100.r07.s033.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s033_output/n100.r07.s033.trimmed.sorted.bam" "n100.r07.s033_output/n100.r07.s033.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s033_output/n100.r07.s033.reference.fas" "n100.r07.s033_output/n100.r07.s033.trimmed.sorted.bam" > "n100.r07.s033_output/n100.r07.s033.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s033_output/n100.r07.s033.reference.fas" --call-indels "n100.r07.s033_output/n100.r07.s033.trimmed.sorted.bam" > "n100.r07.s033_output/n100.r07.s033.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s033_output/n100.r07.s033.trimmed.sorted.bam" > "n100.r07.s033_output/n100.r07.s033.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s033_output/n100.r07.s033.depth.txt" "n100.r07.s033_output/n100.r07.s033.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s033_output/n100.r07.s033.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s033_output/n100.r07.s033.reference.fas" | bcftools consensus -m "n100.r07.s033_output/n100.r07.s033.low_depth.tsv" tmp.vcf.gz > "n100.r07.s033_output/n100.r07.s033.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s033_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:01 scheduler task d7452493 (flow a3bb669d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:01 scheduler task d7452493 (flow a3bb669d): waiting for completion (try 0): started
2021/07/08 17:14:01  ->  n100.r07.s011.Main.out_file a3bb669d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:01 n100.r07.s011.Main.out_file a3bb669d n100/r07/n100.r07.s011.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:db74e9a49bbf8665749bedf1229a2441803c61847174b1dbca438bd360343774
	sha256:a3bb669d77e63dd42f1ab47db2b98f3a3aba0f2b961a86ee2f6e76810d3a591e
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d7452493516ffc117717075d62728a935e94a19f8ecea930df27814613b1fc46
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s011_output"
	    wget -O "n100.r07.s011_output/n100.r07.s011.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s011_output/n100.r07.s011.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s011_output/n100.r07.s011.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s011_output/n100.r07.s011.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s011_output/n100.r07.s011.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s011_output/n100.r07.s011.reference.fas" "n100.r07.s011_output/n100.r07.s011.fq1.fastq" "n100.r07.s011_output/n100.r07.s011.fq2.fastq" | samtools view -bS - > "n100.r07.s011_output/n100.r07.s011.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s011_output/n100.r07.s011.untrimmed.sorted.bam" "n100.r07.s011_output/n100.r07.s011.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s011_output/n100.r07.s011.untrimmed.sorted.bam" -b "n100.r07.s011_output/n100.r07.s011.primers.bed" -p "n100.r07.s011_output/n100.r07.s011.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s011_output/n100.r07.s011.trimmed.sorted.bam" "n100.r07.s011_output/n100.r07.s011.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s011_output/n100.r07.s011.reference.fas" "n100.r07.s011_output/n100.r07.s011.trimmed.sorted.bam" > "n100.r07.s011_output/n100.r07.s011.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s011_output/n100.r07.s011.reference.fas" --call-indels "n100.r07.s011_output/n100.r07.s011.trimmed.sorted.bam" > "n100.r07.s011_output/n100.r07.s011.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s011_output/n100.r07.s011.trimmed.sorted.bam" > "n100.r07.s011_output/n100.r07.s011.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s011_output/n100.r07.s011.depth.txt" "n100.r07.s011_output/n100.r07.s011.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s011_output/n100.r07.s011.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s011_output/n100.r07.s011.reference.fas" | bcftools consensus -m "n100.r07.s011_output/n100.r07.s011.low_depth.tsv" tmp.vcf.gz > "n100.r07.s011_output/n100.r07.s011.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s011_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:01 scheduler task cbc7ffd0 (flow f84bcf3d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:01 scheduler task cbc7ffd0 (flow f84bcf3d): waiting for completion (try 0): started
2021/07/08 17:14:01  ->  n100.r07.s012.Main.out_file f84bcf3d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:01 n100.r07.s012.Main.out_file f84bcf3d n100/r07/n100.r07.s012.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:dc79eb543ff43ec9996b0380486995a2a4528a3afb20d5e584221f3ac3b32203
	sha256:f84bcf3d8501967ec24757f070ae2ed507f73b73ec7676d7112e3b0394ca78ec
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cbc7ffd0fcb2d53dcdf5b7ac2f3f27d1b468e1bf6d9615d9d3e7996d61bf94d7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s012_output"
	    wget -O "n100.r07.s012_output/n100.r07.s012.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s012_output/n100.r07.s012.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s012_output/n100.r07.s012.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s012_output/n100.r07.s012.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s012_output/n100.r07.s012.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s012_output/n100.r07.s012.reference.fas" "n100.r07.s012_output/n100.r07.s012.fq1.fastq" "n100.r07.s012_output/n100.r07.s012.fq2.fastq" | samtools view -bS - > "n100.r07.s012_output/n100.r07.s012.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s012_output/n100.r07.s012.untrimmed.sorted.bam" "n100.r07.s012_output/n100.r07.s012.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s012_output/n100.r07.s012.untrimmed.sorted.bam" -b "n100.r07.s012_output/n100.r07.s012.primers.bed" -p "n100.r07.s012_output/n100.r07.s012.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s012_output/n100.r07.s012.trimmed.sorted.bam" "n100.r07.s012_output/n100.r07.s012.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s012_output/n100.r07.s012.reference.fas" "n100.r07.s012_output/n100.r07.s012.trimmed.sorted.bam" > "n100.r07.s012_output/n100.r07.s012.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s012_output/n100.r07.s012.reference.fas" --call-indels "n100.r07.s012_output/n100.r07.s012.trimmed.sorted.bam" > "n100.r07.s012_output/n100.r07.s012.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s012_output/n100.r07.s012.trimmed.sorted.bam" > "n100.r07.s012_output/n100.r07.s012.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s012_output/n100.r07.s012.depth.txt" "n100.r07.s012_output/n100.r07.s012.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s012_output/n100.r07.s012.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s012_output/n100.r07.s012.reference.fas" | bcftools consensus -m "n100.r07.s012_output/n100.r07.s012.low_depth.tsv" tmp.vcf.gz > "n100.r07.s012_output/n100.r07.s012.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s012_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:01 scheduler task 334f3996 (flow a9afc8a9): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:01 scheduler task 334f3996 (flow a9afc8a9): waiting for completion (try 0): started
2021/07/08 17:14:01  ->  n100.r07.s065.Main.out_file a9afc8a9 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:01 n100.r07.s065.Main.out_file a9afc8a9 n100/r07/n100.r07.s065.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:25379dab4bb2ee42701af84a8567f516d493f5e741310950618ff4d27064e542
	sha256:a9afc8a99abf0a400374ba6ea77f6161f24f005a3697039260ab59415836a5e2
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/334f39965d85fc2531b2f46d26972e2abe2f7dd062d8daea36d881c3d72a9a15
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s065_output"
	    wget -O "n100.r07.s065_output/n100.r07.s065.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s065_output/n100.r07.s065.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s065_output/n100.r07.s065.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s065_output/n100.r07.s065.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s065_output/n100.r07.s065.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s065_output/n100.r07.s065.reference.fas" "n100.r07.s065_output/n100.r07.s065.fq1.fastq" "n100.r07.s065_output/n100.r07.s065.fq2.fastq" | samtools view -bS - > "n100.r07.s065_output/n100.r07.s065.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s065_output/n100.r07.s065.untrimmed.sorted.bam" "n100.r07.s065_output/n100.r07.s065.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s065_output/n100.r07.s065.untrimmed.sorted.bam" -b "n100.r07.s065_output/n100.r07.s065.primers.bed" -p "n100.r07.s065_output/n100.r07.s065.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s065_output/n100.r07.s065.trimmed.sorted.bam" "n100.r07.s065_output/n100.r07.s065.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s065_output/n100.r07.s065.reference.fas" "n100.r07.s065_output/n100.r07.s065.trimmed.sorted.bam" > "n100.r07.s065_output/n100.r07.s065.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s065_output/n100.r07.s065.reference.fas" --call-indels "n100.r07.s065_output/n100.r07.s065.trimmed.sorted.bam" > "n100.r07.s065_output/n100.r07.s065.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s065_output/n100.r07.s065.trimmed.sorted.bam" > "n100.r07.s065_output/n100.r07.s065.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s065_output/n100.r07.s065.depth.txt" "n100.r07.s065_output/n100.r07.s065.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s065_output/n100.r07.s065.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s065_output/n100.r07.s065.reference.fas" | bcftools consensus -m "n100.r07.s065_output/n100.r07.s065.low_depth.tsv" tmp.vcf.gz > "n100.r07.s065_output/n100.r07.s065.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s065_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:01 scheduler task b41c06f5 (flow 602e5744): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:01 scheduler task b41c06f5 (flow 602e5744): waiting for completion (try 0): started
2021/07/08 17:14:01  ->  n100.r07.s021.Main.out_file 602e5744 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:01 n100.r07.s021.Main.out_file 602e5744 n100/r07/n100.r07.s021.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9958bd7dc3fa37b5bebb5316575c03fd8140837fa94e0cba8e9c5b2a8c8ae039
	sha256:602e5744f169061b924be6332ea111155b331607deabb5b9b5bfa590c9325a1b
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b41c06f50275cda606b67c1f2dbfbab03eeff21bcba71c1dcdb005b9a3619730
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s021_output"
	    wget -O "n100.r07.s021_output/n100.r07.s021.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s021_output/n100.r07.s021.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s021_output/n100.r07.s021.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s021_output/n100.r07.s021.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s021_output/n100.r07.s021.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s021_output/n100.r07.s021.reference.fas" "n100.r07.s021_output/n100.r07.s021.fq1.fastq" "n100.r07.s021_output/n100.r07.s021.fq2.fastq" | samtools view -bS - > "n100.r07.s021_output/n100.r07.s021.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s021_output/n100.r07.s021.untrimmed.sorted.bam" "n100.r07.s021_output/n100.r07.s021.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s021_output/n100.r07.s021.untrimmed.sorted.bam" -b "n100.r07.s021_output/n100.r07.s021.primers.bed" -p "n100.r07.s021_output/n100.r07.s021.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s021_output/n100.r07.s021.trimmed.sorted.bam" "n100.r07.s021_output/n100.r07.s021.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s021_output/n100.r07.s021.reference.fas" "n100.r07.s021_output/n100.r07.s021.trimmed.sorted.bam" > "n100.r07.s021_output/n100.r07.s021.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s021_output/n100.r07.s021.reference.fas" --call-indels "n100.r07.s021_output/n100.r07.s021.trimmed.sorted.bam" > "n100.r07.s021_output/n100.r07.s021.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s021_output/n100.r07.s021.trimmed.sorted.bam" > "n100.r07.s021_output/n100.r07.s021.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s021_output/n100.r07.s021.depth.txt" "n100.r07.s021_output/n100.r07.s021.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s021_output/n100.r07.s021.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s021_output/n100.r07.s021.reference.fas" | bcftools consensus -m "n100.r07.s021_output/n100.r07.s021.low_depth.tsv" tmp.vcf.gz > "n100.r07.s021_output/n100.r07.s021.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s021_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:01 scheduler task e89fdb62 (flow 85485140): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:01 scheduler task e89fdb62 (flow 85485140): waiting for completion (try 0): started
2021/07/08 17:14:01  ->  n100.r07.s026.Main.out_file 85485140 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:01 n100.r07.s026.Main.out_file 85485140 n100/r07/n100.r07.s026.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6c378bfd10e209205419e36cd792e8f20d697d3ccc0f5e83a0ac7501c63988a0
	sha256:85485140af93f0b8b012850dc95c134916ddcd28e48510f40eaca5bb634f13b8
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e89fdb6260264867400322f21f34f9632bb43c419ffef398be7ee4b6d041ef56
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s026_output"
	    wget -O "n100.r07.s026_output/n100.r07.s026.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s026_output/n100.r07.s026.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s026_output/n100.r07.s026.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s026_output/n100.r07.s026.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s026_output/n100.r07.s026.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s026_output/n100.r07.s026.reference.fas" "n100.r07.s026_output/n100.r07.s026.fq1.fastq" "n100.r07.s026_output/n100.r07.s026.fq2.fastq" | samtools view -bS - > "n100.r07.s026_output/n100.r07.s026.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s026_output/n100.r07.s026.untrimmed.sorted.bam" "n100.r07.s026_output/n100.r07.s026.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s026_output/n100.r07.s026.untrimmed.sorted.bam" -b "n100.r07.s026_output/n100.r07.s026.primers.bed" -p "n100.r07.s026_output/n100.r07.s026.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s026_output/n100.r07.s026.trimmed.sorted.bam" "n100.r07.s026_output/n100.r07.s026.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s026_output/n100.r07.s026.reference.fas" "n100.r07.s026_output/n100.r07.s026.trimmed.sorted.bam" > "n100.r07.s026_output/n100.r07.s026.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s026_output/n100.r07.s026.reference.fas" --call-indels "n100.r07.s026_output/n100.r07.s026.trimmed.sorted.bam" > "n100.r07.s026_output/n100.r07.s026.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s026_output/n100.r07.s026.trimmed.sorted.bam" > "n100.r07.s026_output/n100.r07.s026.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s026_output/n100.r07.s026.depth.txt" "n100.r07.s026_output/n100.r07.s026.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s026_output/n100.r07.s026.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s026_output/n100.r07.s026.reference.fas" | bcftools consensus -m "n100.r07.s026_output/n100.r07.s026.low_depth.tsv" tmp.vcf.gz > "n100.r07.s026_output/n100.r07.s026.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s026_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:01 scheduler task 3fa58d8b (flow 461bf7dc): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:01 scheduler task 3fa58d8b (flow 461bf7dc): waiting for completion (try 0): started
2021/07/08 17:14:01  ->  n100.r07.s014.Main.out_file 461bf7dc exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:01 n100.r07.s014.Main.out_file 461bf7dc n100/r07/n100.r07.s014.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:20cadced1c9cf354f2cf48051a30e5d4e77025cb7506fde7ec7081210c1471d2
	sha256:461bf7dc7bce820789e5fb2316af08fd4928bcbbc82906b6b76cc680e73aaac8
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3fa58d8b9e9f63933b131c901c5a24cc0d3ef3a9265965cb277532ab885a4e07
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s014_output"
	    wget -O "n100.r07.s014_output/n100.r07.s014.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s014_output/n100.r07.s014.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s014_output/n100.r07.s014.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s014_output/n100.r07.s014.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s014_output/n100.r07.s014.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s014_output/n100.r07.s014.reference.fas" "n100.r07.s014_output/n100.r07.s014.fq1.fastq" "n100.r07.s014_output/n100.r07.s014.fq2.fastq" | samtools view -bS - > "n100.r07.s014_output/n100.r07.s014.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s014_output/n100.r07.s014.untrimmed.sorted.bam" "n100.r07.s014_output/n100.r07.s014.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s014_output/n100.r07.s014.untrimmed.sorted.bam" -b "n100.r07.s014_output/n100.r07.s014.primers.bed" -p "n100.r07.s014_output/n100.r07.s014.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s014_output/n100.r07.s014.trimmed.sorted.bam" "n100.r07.s014_output/n100.r07.s014.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s014_output/n100.r07.s014.reference.fas" "n100.r07.s014_output/n100.r07.s014.trimmed.sorted.bam" > "n100.r07.s014_output/n100.r07.s014.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s014_output/n100.r07.s014.reference.fas" --call-indels "n100.r07.s014_output/n100.r07.s014.trimmed.sorted.bam" > "n100.r07.s014_output/n100.r07.s014.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s014_output/n100.r07.s014.trimmed.sorted.bam" > "n100.r07.s014_output/n100.r07.s014.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s014_output/n100.r07.s014.depth.txt" "n100.r07.s014_output/n100.r07.s014.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s014_output/n100.r07.s014.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s014_output/n100.r07.s014.reference.fas" | bcftools consensus -m "n100.r07.s014_output/n100.r07.s014.low_depth.tsv" tmp.vcf.gz > "n100.r07.s014_output/n100.r07.s014.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s014_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:02 scheduler task 5a053160 (flow 556ae154): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:02 scheduler task 5a053160 (flow 556ae154): waiting for completion (try 0): started
2021/07/08 17:14:02  ->  n100.r07.s015.Main.out_file 556ae154 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:02 n100.r07.s015.Main.out_file 556ae154 n100/r07/n100.r07.s015.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:52fbb07392ac7cb00e498c56a9ca65661b505af26f4e7b633b926960b0163d0b
	sha256:556ae154a61acc677607879377dc353d4929991abe884c2be30f228a7fef14dd
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5a0531600f3c8803eebb26f1e5f358279eb7b792a73f8cc8c0b98470ac02dc32
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s015_output"
	    wget -O "n100.r07.s015_output/n100.r07.s015.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s015_output/n100.r07.s015.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s015_output/n100.r07.s015.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s015_output/n100.r07.s015.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s015_output/n100.r07.s015.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s015_output/n100.r07.s015.reference.fas" "n100.r07.s015_output/n100.r07.s015.fq1.fastq" "n100.r07.s015_output/n100.r07.s015.fq2.fastq" | samtools view -bS - > "n100.r07.s015_output/n100.r07.s015.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s015_output/n100.r07.s015.untrimmed.sorted.bam" "n100.r07.s015_output/n100.r07.s015.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s015_output/n100.r07.s015.untrimmed.sorted.bam" -b "n100.r07.s015_output/n100.r07.s015.primers.bed" -p "n100.r07.s015_output/n100.r07.s015.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s015_output/n100.r07.s015.trimmed.sorted.bam" "n100.r07.s015_output/n100.r07.s015.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s015_output/n100.r07.s015.reference.fas" "n100.r07.s015_output/n100.r07.s015.trimmed.sorted.bam" > "n100.r07.s015_output/n100.r07.s015.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s015_output/n100.r07.s015.reference.fas" --call-indels "n100.r07.s015_output/n100.r07.s015.trimmed.sorted.bam" > "n100.r07.s015_output/n100.r07.s015.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s015_output/n100.r07.s015.trimmed.sorted.bam" > "n100.r07.s015_output/n100.r07.s015.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s015_output/n100.r07.s015.depth.txt" "n100.r07.s015_output/n100.r07.s015.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s015_output/n100.r07.s015.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s015_output/n100.r07.s015.reference.fas" | bcftools consensus -m "n100.r07.s015_output/n100.r07.s015.low_depth.tsv" tmp.vcf.gz > "n100.r07.s015_output/n100.r07.s015.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s015_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:02 scheduler task 46b3d1f4 (flow 74bc54ab): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:02 scheduler task 46b3d1f4 (flow 74bc54ab): waiting for completion (try 0): started
2021/07/08 17:14:02  ->  n100.r07.s029.Main.out_file 74bc54ab exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:02 n100.r07.s029.Main.out_file 74bc54ab n100/r07/n100.r07.s029.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:52837d6e32b6bb2e982040e3805f2cce8fd30304767dcdff51738037300642b3
	sha256:74bc54ab9018cfbadebcee07cc369f071995a7641e880360bff84f54848cca0e
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/46b3d1f4de9475e80ab5f5a9f2cb7bcecc3b6e7262d9d5fd62d6e6578871c44e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s029_output"
	    wget -O "n100.r07.s029_output/n100.r07.s029.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s029_output/n100.r07.s029.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s029_output/n100.r07.s029.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s029_output/n100.r07.s029.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s029_output/n100.r07.s029.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s029_output/n100.r07.s029.reference.fas" "n100.r07.s029_output/n100.r07.s029.fq1.fastq" "n100.r07.s029_output/n100.r07.s029.fq2.fastq" | samtools view -bS - > "n100.r07.s029_output/n100.r07.s029.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s029_output/n100.r07.s029.untrimmed.sorted.bam" "n100.r07.s029_output/n100.r07.s029.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s029_output/n100.r07.s029.untrimmed.sorted.bam" -b "n100.r07.s029_output/n100.r07.s029.primers.bed" -p "n100.r07.s029_output/n100.r07.s029.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s029_output/n100.r07.s029.trimmed.sorted.bam" "n100.r07.s029_output/n100.r07.s029.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s029_output/n100.r07.s029.reference.fas" "n100.r07.s029_output/n100.r07.s029.trimmed.sorted.bam" > "n100.r07.s029_output/n100.r07.s029.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s029_output/n100.r07.s029.reference.fas" --call-indels "n100.r07.s029_output/n100.r07.s029.trimmed.sorted.bam" > "n100.r07.s029_output/n100.r07.s029.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s029_output/n100.r07.s029.trimmed.sorted.bam" > "n100.r07.s029_output/n100.r07.s029.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s029_output/n100.r07.s029.depth.txt" "n100.r07.s029_output/n100.r07.s029.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s029_output/n100.r07.s029.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s029_output/n100.r07.s029.reference.fas" | bcftools consensus -m "n100.r07.s029_output/n100.r07.s029.low_depth.tsv" tmp.vcf.gz > "n100.r07.s029_output/n100.r07.s029.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s029_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:02 scheduler task 3d2380ba (flow 90113c2d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:02 scheduler task 3d2380ba (flow 90113c2d): waiting for completion (try 0): started
2021/07/08 17:14:02  ->  n100.r07.s030.Main.out_file 90113c2d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:02 n100.r07.s030.Main.out_file 90113c2d n100/r07/n100.r07.s030.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c64c919cb80cbbb85ad85ab18531e63e3607f34ab3edfb3c4ffb6a3a440faa06
	sha256:90113c2d4ab071f2a7820ec326b37b37d8c1f6a5c4f74f86eb1c601fc976df67
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3d2380bacf721c9635296cb0a6a1d49c4a6e9e9b332841a72b0f504d9ac9fdf4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s030_output"
	    wget -O "n100.r07.s030_output/n100.r07.s030.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s030_output/n100.r07.s030.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s030_output/n100.r07.s030.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s030_output/n100.r07.s030.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s030_output/n100.r07.s030.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s030_output/n100.r07.s030.reference.fas" "n100.r07.s030_output/n100.r07.s030.fq1.fastq" "n100.r07.s030_output/n100.r07.s030.fq2.fastq" | samtools view -bS - > "n100.r07.s030_output/n100.r07.s030.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s030_output/n100.r07.s030.untrimmed.sorted.bam" "n100.r07.s030_output/n100.r07.s030.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s030_output/n100.r07.s030.untrimmed.sorted.bam" -b "n100.r07.s030_output/n100.r07.s030.primers.bed" -p "n100.r07.s030_output/n100.r07.s030.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s030_output/n100.r07.s030.trimmed.sorted.bam" "n100.r07.s030_output/n100.r07.s030.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s030_output/n100.r07.s030.reference.fas" "n100.r07.s030_output/n100.r07.s030.trimmed.sorted.bam" > "n100.r07.s030_output/n100.r07.s030.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s030_output/n100.r07.s030.reference.fas" --call-indels "n100.r07.s030_output/n100.r07.s030.trimmed.sorted.bam" > "n100.r07.s030_output/n100.r07.s030.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s030_output/n100.r07.s030.trimmed.sorted.bam" > "n100.r07.s030_output/n100.r07.s030.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s030_output/n100.r07.s030.depth.txt" "n100.r07.s030_output/n100.r07.s030.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s030_output/n100.r07.s030.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s030_output/n100.r07.s030.reference.fas" | bcftools consensus -m "n100.r07.s030_output/n100.r07.s030.low_depth.tsv" tmp.vcf.gz > "n100.r07.s030_output/n100.r07.s030.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s030_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:02 scheduler task 20f4384f (flow 6fbc481f): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:02 scheduler task 20f4384f (flow 6fbc481f): waiting for completion (try 0): started
2021/07/08 17:14:02  ->  n100.r07.s019.Main.out_file 6fbc481f exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:02 n100.r07.s019.Main.out_file 6fbc481f n100/r07/n100.r07.s019.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:40fe6f713bfa06edb715bde4a61b84e9b43ae30d124b01840020d5d1514a0aa8
	sha256:6fbc481f6b44bfb868a9797adf0bfe7549d68f72b89a1474c223520d239e9d8b
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/20f4384fcfe6b521b6afeaea7dfec3e592d9517d8880b4d584bb8dafe4d7be2e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s019_output"
	    wget -O "n100.r07.s019_output/n100.r07.s019.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s019_output/n100.r07.s019.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s019_output/n100.r07.s019.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s019_output/n100.r07.s019.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s019_output/n100.r07.s019.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s019_output/n100.r07.s019.reference.fas" "n100.r07.s019_output/n100.r07.s019.fq1.fastq" "n100.r07.s019_output/n100.r07.s019.fq2.fastq" | samtools view -bS - > "n100.r07.s019_output/n100.r07.s019.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s019_output/n100.r07.s019.untrimmed.sorted.bam" "n100.r07.s019_output/n100.r07.s019.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s019_output/n100.r07.s019.untrimmed.sorted.bam" -b "n100.r07.s019_output/n100.r07.s019.primers.bed" -p "n100.r07.s019_output/n100.r07.s019.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s019_output/n100.r07.s019.trimmed.sorted.bam" "n100.r07.s019_output/n100.r07.s019.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s019_output/n100.r07.s019.reference.fas" "n100.r07.s019_output/n100.r07.s019.trimmed.sorted.bam" > "n100.r07.s019_output/n100.r07.s019.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s019_output/n100.r07.s019.reference.fas" --call-indels "n100.r07.s019_output/n100.r07.s019.trimmed.sorted.bam" > "n100.r07.s019_output/n100.r07.s019.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s019_output/n100.r07.s019.trimmed.sorted.bam" > "n100.r07.s019_output/n100.r07.s019.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s019_output/n100.r07.s019.depth.txt" "n100.r07.s019_output/n100.r07.s019.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s019_output/n100.r07.s019.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s019_output/n100.r07.s019.reference.fas" | bcftools consensus -m "n100.r07.s019_output/n100.r07.s019.low_depth.tsv" tmp.vcf.gz > "n100.r07.s019_output/n100.r07.s019.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s019_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:02 scheduler task 8168a241 (flow 761ac0e3): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:02 scheduler task 8168a241 (flow 761ac0e3): waiting for completion (try 0): started
2021/07/08 17:14:02  ->  n100.r07.s085.Main.out_file 761ac0e3 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:02 n100.r07.s085.Main.out_file 761ac0e3 n100/r07/n100.r07.s085.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:510ff2f617243c54bf443e1beec58c525fc491cfb36a17bfcfd8c5dbc12030df
	sha256:761ac0e3315302d84015837002325d085e162e9868e9a31e94ee240d6bd77c1b
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8168a241da580e0dffe1a626d7389f5f112950a66a49510bf62484a0c11a5c05
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s085_output"
	    wget -O "n100.r07.s085_output/n100.r07.s085.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s085_output/n100.r07.s085.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s085_output/n100.r07.s085.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s085_output/n100.r07.s085.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s085_output/n100.r07.s085.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s085_output/n100.r07.s085.reference.fas" "n100.r07.s085_output/n100.r07.s085.fq1.fastq" "n100.r07.s085_output/n100.r07.s085.fq2.fastq" | samtools view -bS - > "n100.r07.s085_output/n100.r07.s085.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s085_output/n100.r07.s085.untrimmed.sorted.bam" "n100.r07.s085_output/n100.r07.s085.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s085_output/n100.r07.s085.untrimmed.sorted.bam" -b "n100.r07.s085_output/n100.r07.s085.primers.bed" -p "n100.r07.s085_output/n100.r07.s085.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s085_output/n100.r07.s085.trimmed.sorted.bam" "n100.r07.s085_output/n100.r07.s085.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s085_output/n100.r07.s085.reference.fas" "n100.r07.s085_output/n100.r07.s085.trimmed.sorted.bam" > "n100.r07.s085_output/n100.r07.s085.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s085_output/n100.r07.s085.reference.fas" --call-indels "n100.r07.s085_output/n100.r07.s085.trimmed.sorted.bam" > "n100.r07.s085_output/n100.r07.s085.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s085_output/n100.r07.s085.trimmed.sorted.bam" > "n100.r07.s085_output/n100.r07.s085.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s085_output/n100.r07.s085.depth.txt" "n100.r07.s085_output/n100.r07.s085.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s085_output/n100.r07.s085.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s085_output/n100.r07.s085.reference.fas" | bcftools consensus -m "n100.r07.s085_output/n100.r07.s085.low_depth.tsv" tmp.vcf.gz > "n100.r07.s085_output/n100.r07.s085.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s085_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:02 scheduler task 072a8e2d (flow edd91e32): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:02 scheduler task 072a8e2d (flow edd91e32): waiting for completion (try 0): started
2021/07/08 17:14:02  ->  n100.r07.s045.Main.out_file edd91e32 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:02 n100.r07.s045.Main.out_file edd91e32 n100/r07/n100.r07.s045.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8786fc5c3b712d45d98b0699976a0fb54aa45239674d13b04f0bd6b9b380808b
	sha256:edd91e328b8266ade8a0664c45f86fdc6ad657681c23ba653b8fdde9dd5df4bb
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/072a8e2dc477141a95da39b503895941a9d043e7ac616d749fd7c620c9afbc25
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s045_output"
	    wget -O "n100.r07.s045_output/n100.r07.s045.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s045_output/n100.r07.s045.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s045_output/n100.r07.s045.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s045_output/n100.r07.s045.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s045_output/n100.r07.s045.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s045_output/n100.r07.s045.reference.fas" "n100.r07.s045_output/n100.r07.s045.fq1.fastq" "n100.r07.s045_output/n100.r07.s045.fq2.fastq" | samtools view -bS - > "n100.r07.s045_output/n100.r07.s045.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s045_output/n100.r07.s045.untrimmed.sorted.bam" "n100.r07.s045_output/n100.r07.s045.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s045_output/n100.r07.s045.untrimmed.sorted.bam" -b "n100.r07.s045_output/n100.r07.s045.primers.bed" -p "n100.r07.s045_output/n100.r07.s045.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s045_output/n100.r07.s045.trimmed.sorted.bam" "n100.r07.s045_output/n100.r07.s045.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s045_output/n100.r07.s045.reference.fas" "n100.r07.s045_output/n100.r07.s045.trimmed.sorted.bam" > "n100.r07.s045_output/n100.r07.s045.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s045_output/n100.r07.s045.reference.fas" --call-indels "n100.r07.s045_output/n100.r07.s045.trimmed.sorted.bam" > "n100.r07.s045_output/n100.r07.s045.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s045_output/n100.r07.s045.trimmed.sorted.bam" > "n100.r07.s045_output/n100.r07.s045.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s045_output/n100.r07.s045.depth.txt" "n100.r07.s045_output/n100.r07.s045.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s045_output/n100.r07.s045.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s045_output/n100.r07.s045.reference.fas" | bcftools consensus -m "n100.r07.s045_output/n100.r07.s045.low_depth.tsv" tmp.vcf.gz > "n100.r07.s045_output/n100.r07.s045.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s045_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:02 scheduler task 0b40294a (flow d3087af8): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:02 scheduler task 0b40294a (flow d3087af8): waiting for completion (try 0): started
2021/07/08 17:14:02  ->  n100.r07.s034.Main.out_file d3087af8 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:02 n100.r07.s034.Main.out_file d3087af8 n100/r07/n100.r07.s034.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e1f21f377660efa36f489c22c925d824e6d0fd352d7ccea8a4e39bf283b85f0b
	sha256:d3087af8c51d8635e7e60244fd82288d86aec6452e1328060997f667020590d7
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0b40294a121736ce1eb01e8296b4d56ea348a9f96492a52795fa3c5e82988de9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s034_output"
	    wget -O "n100.r07.s034_output/n100.r07.s034.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s034_output/n100.r07.s034.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s034_output/n100.r07.s034.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s034_output/n100.r07.s034.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s034_output/n100.r07.s034.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s034_output/n100.r07.s034.reference.fas" "n100.r07.s034_output/n100.r07.s034.fq1.fastq" "n100.r07.s034_output/n100.r07.s034.fq2.fastq" | samtools view -bS - > "n100.r07.s034_output/n100.r07.s034.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s034_output/n100.r07.s034.untrimmed.sorted.bam" "n100.r07.s034_output/n100.r07.s034.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s034_output/n100.r07.s034.untrimmed.sorted.bam" -b "n100.r07.s034_output/n100.r07.s034.primers.bed" -p "n100.r07.s034_output/n100.r07.s034.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s034_output/n100.r07.s034.trimmed.sorted.bam" "n100.r07.s034_output/n100.r07.s034.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s034_output/n100.r07.s034.reference.fas" "n100.r07.s034_output/n100.r07.s034.trimmed.sorted.bam" > "n100.r07.s034_output/n100.r07.s034.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s034_output/n100.r07.s034.reference.fas" --call-indels "n100.r07.s034_output/n100.r07.s034.trimmed.sorted.bam" > "n100.r07.s034_output/n100.r07.s034.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s034_output/n100.r07.s034.trimmed.sorted.bam" > "n100.r07.s034_output/n100.r07.s034.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s034_output/n100.r07.s034.depth.txt" "n100.r07.s034_output/n100.r07.s034.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s034_output/n100.r07.s034.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s034_output/n100.r07.s034.reference.fas" | bcftools consensus -m "n100.r07.s034_output/n100.r07.s034.low_depth.tsv" tmp.vcf.gz > "n100.r07.s034_output/n100.r07.s034.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s034_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:03 scheduler task aae9bef3 (flow 5c374ba7): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:03 scheduler task aae9bef3 (flow 5c374ba7): waiting for completion (try 0): started
2021/07/08 17:14:03  ->  n100.r07.s091.Main.out_file 5c374ba7 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:03 n100.r07.s091.Main.out_file 5c374ba7 n100/r07/n100.r07.s091.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1b6ca2e006bb6bfbadd1d25721acdee2de62d78a0af540ee9e8a592bdf3b7c78
	sha256:5c374ba79cb822c363f3b30b14adf35ad82ee959dd271704ad073a6ce759ac85
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/aae9bef33418366b09a440c428cc4970648a2fd971e32ddfbc70ab3c841b16b7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s091_output"
	    wget -O "n100.r07.s091_output/n100.r07.s091.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s091_output/n100.r07.s091.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s091_output/n100.r07.s091.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s091_output/n100.r07.s091.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s091_output/n100.r07.s091.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s091_output/n100.r07.s091.reference.fas" "n100.r07.s091_output/n100.r07.s091.fq1.fastq" "n100.r07.s091_output/n100.r07.s091.fq2.fastq" | samtools view -bS - > "n100.r07.s091_output/n100.r07.s091.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s091_output/n100.r07.s091.untrimmed.sorted.bam" "n100.r07.s091_output/n100.r07.s091.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s091_output/n100.r07.s091.untrimmed.sorted.bam" -b "n100.r07.s091_output/n100.r07.s091.primers.bed" -p "n100.r07.s091_output/n100.r07.s091.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s091_output/n100.r07.s091.trimmed.sorted.bam" "n100.r07.s091_output/n100.r07.s091.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s091_output/n100.r07.s091.reference.fas" "n100.r07.s091_output/n100.r07.s091.trimmed.sorted.bam" > "n100.r07.s091_output/n100.r07.s091.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s091_output/n100.r07.s091.reference.fas" --call-indels "n100.r07.s091_output/n100.r07.s091.trimmed.sorted.bam" > "n100.r07.s091_output/n100.r07.s091.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s091_output/n100.r07.s091.trimmed.sorted.bam" > "n100.r07.s091_output/n100.r07.s091.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s091_output/n100.r07.s091.depth.txt" "n100.r07.s091_output/n100.r07.s091.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s091_output/n100.r07.s091.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s091_output/n100.r07.s091.reference.fas" | bcftools consensus -m "n100.r07.s091_output/n100.r07.s091.low_depth.tsv" tmp.vcf.gz > "n100.r07.s091_output/n100.r07.s091.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s091_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:03 scheduler task 30bfcda0 (flow 878d6e7b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:03 scheduler task 30bfcda0 (flow 878d6e7b): waiting for completion (try 0): started
2021/07/08 17:14:03  ->  n100.r07.s037.Main.out_file 878d6e7b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:03 n100.r07.s037.Main.out_file 878d6e7b n100/r07/n100.r07.s037.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1a4e1643746ff68dee217b3d09b47b0eac3443d670db9746adfb65131469ad2f
	sha256:878d6e7be77642a6549a5222bf49983c65f13724c2521369a01bf125f3345ef6
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/30bfcda09f7007725526faeadc33ebc3b1fb998e630419755a216ef25108c30e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s037_output"
	    wget -O "n100.r07.s037_output/n100.r07.s037.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s037_output/n100.r07.s037.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s037_output/n100.r07.s037.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s037_output/n100.r07.s037.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s037_output/n100.r07.s037.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s037_output/n100.r07.s037.reference.fas" "n100.r07.s037_output/n100.r07.s037.fq1.fastq" "n100.r07.s037_output/n100.r07.s037.fq2.fastq" | samtools view -bS - > "n100.r07.s037_output/n100.r07.s037.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s037_output/n100.r07.s037.untrimmed.sorted.bam" "n100.r07.s037_output/n100.r07.s037.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s037_output/n100.r07.s037.untrimmed.sorted.bam" -b "n100.r07.s037_output/n100.r07.s037.primers.bed" -p "n100.r07.s037_output/n100.r07.s037.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s037_output/n100.r07.s037.trimmed.sorted.bam" "n100.r07.s037_output/n100.r07.s037.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s037_output/n100.r07.s037.reference.fas" "n100.r07.s037_output/n100.r07.s037.trimmed.sorted.bam" > "n100.r07.s037_output/n100.r07.s037.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s037_output/n100.r07.s037.reference.fas" --call-indels "n100.r07.s037_output/n100.r07.s037.trimmed.sorted.bam" > "n100.r07.s037_output/n100.r07.s037.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s037_output/n100.r07.s037.trimmed.sorted.bam" > "n100.r07.s037_output/n100.r07.s037.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s037_output/n100.r07.s037.depth.txt" "n100.r07.s037_output/n100.r07.s037.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s037_output/n100.r07.s037.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s037_output/n100.r07.s037.reference.fas" | bcftools consensus -m "n100.r07.s037_output/n100.r07.s037.low_depth.tsv" tmp.vcf.gz > "n100.r07.s037_output/n100.r07.s037.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s037_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:03 scheduler task e9711b6d (flow 4741c76b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:03 scheduler task e9711b6d (flow 4741c76b): waiting for completion (try 0): started
2021/07/08 17:14:03  ->  n100.r07.s020.Main.out_file 4741c76b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:03 n100.r07.s020.Main.out_file 4741c76b n100/r07/n100.r07.s020.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8052c88d92832123ee119c2b45dd407547bc68534a7b08e6c54dfa1596121cad
	sha256:4741c76b356899afeb57d8c25ae5994b36d6a6819b566852c6efb6bec8a72a49
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e9711b6dfdf23e2e883067054909171fd7f2b211051fecc2efad04b72f20ba91
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s020_output"
	    wget -O "n100.r07.s020_output/n100.r07.s020.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s020_output/n100.r07.s020.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s020_output/n100.r07.s020.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s020_output/n100.r07.s020.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s020_output/n100.r07.s020.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s020_output/n100.r07.s020.reference.fas" "n100.r07.s020_output/n100.r07.s020.fq1.fastq" "n100.r07.s020_output/n100.r07.s020.fq2.fastq" | samtools view -bS - > "n100.r07.s020_output/n100.r07.s020.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s020_output/n100.r07.s020.untrimmed.sorted.bam" "n100.r07.s020_output/n100.r07.s020.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s020_output/n100.r07.s020.untrimmed.sorted.bam" -b "n100.r07.s020_output/n100.r07.s020.primers.bed" -p "n100.r07.s020_output/n100.r07.s020.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s020_output/n100.r07.s020.trimmed.sorted.bam" "n100.r07.s020_output/n100.r07.s020.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s020_output/n100.r07.s020.reference.fas" "n100.r07.s020_output/n100.r07.s020.trimmed.sorted.bam" > "n100.r07.s020_output/n100.r07.s020.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s020_output/n100.r07.s020.reference.fas" --call-indels "n100.r07.s020_output/n100.r07.s020.trimmed.sorted.bam" > "n100.r07.s020_output/n100.r07.s020.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s020_output/n100.r07.s020.trimmed.sorted.bam" > "n100.r07.s020_output/n100.r07.s020.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s020_output/n100.r07.s020.depth.txt" "n100.r07.s020_output/n100.r07.s020.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s020_output/n100.r07.s020.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s020_output/n100.r07.s020.reference.fas" | bcftools consensus -m "n100.r07.s020_output/n100.r07.s020.low_depth.tsv" tmp.vcf.gz > "n100.r07.s020_output/n100.r07.s020.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s020_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:03 scheduler task 6c7d8d18 (flow 7d51370c): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:03 scheduler task 6c7d8d18 (flow 7d51370c): waiting for completion (try 0): started
2021/07/08 17:14:03  ->  n100.r07.s009.Main.out_file 7d51370c exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:03 n100.r07.s009.Main.out_file 7d51370c n100/r07/n100.r07.s009.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:bd1e9a0e40bda0dcbf100f0bc039f3e91747d91c6adf70c98cae13f5c9fbe108
	sha256:7d51370cf13f63dee90eb4c9c6e23b6389b178b4e1ca3e315c96695226c3f879
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6c7d8d189bee0e0fcad1af0c33787785549e1caa2481dc9d39dc502ba5d57dbc
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s009_output"
	    wget -O "n100.r07.s009_output/n100.r07.s009.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s009_output/n100.r07.s009.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s009_output/n100.r07.s009.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s009_output/n100.r07.s009.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s009_output/n100.r07.s009.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s009_output/n100.r07.s009.reference.fas" "n100.r07.s009_output/n100.r07.s009.fq1.fastq" "n100.r07.s009_output/n100.r07.s009.fq2.fastq" | samtools view -bS - > "n100.r07.s009_output/n100.r07.s009.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s009_output/n100.r07.s009.untrimmed.sorted.bam" "n100.r07.s009_output/n100.r07.s009.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s009_output/n100.r07.s009.untrimmed.sorted.bam" -b "n100.r07.s009_output/n100.r07.s009.primers.bed" -p "n100.r07.s009_output/n100.r07.s009.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s009_output/n100.r07.s009.trimmed.sorted.bam" "n100.r07.s009_output/n100.r07.s009.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s009_output/n100.r07.s009.reference.fas" "n100.r07.s009_output/n100.r07.s009.trimmed.sorted.bam" > "n100.r07.s009_output/n100.r07.s009.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s009_output/n100.r07.s009.reference.fas" --call-indels "n100.r07.s009_output/n100.r07.s009.trimmed.sorted.bam" > "n100.r07.s009_output/n100.r07.s009.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s009_output/n100.r07.s009.trimmed.sorted.bam" > "n100.r07.s009_output/n100.r07.s009.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s009_output/n100.r07.s009.depth.txt" "n100.r07.s009_output/n100.r07.s009.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s009_output/n100.r07.s009.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s009_output/n100.r07.s009.reference.fas" | bcftools consensus -m "n100.r07.s009_output/n100.r07.s009.low_depth.tsv" tmp.vcf.gz > "n100.r07.s009_output/n100.r07.s009.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s009_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:03 scheduler task 3d94ce3a (flow 60c3d9b3): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:03 scheduler task 3d94ce3a (flow 60c3d9b3): waiting for completion (try 0): started
2021/07/08 17:14:03  ->  n100.r07.s039.Main.out_file 60c3d9b3 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:03 n100.r07.s039.Main.out_file 60c3d9b3 n100/r07/n100.r07.s039.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:69fef3656712c0a38c71624b8f6e14e986ba77d345ec22028f55f5e262579c01
	sha256:60c3d9b3822164c26e4e1f1df39a14433f93186551581d3292452130baa1b577
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3d94ce3acff269334bb3b3b8363e1166289543dd50f24201bc7cdcf2d125c389
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s039_output"
	    wget -O "n100.r07.s039_output/n100.r07.s039.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s039_output/n100.r07.s039.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s039_output/n100.r07.s039.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s039_output/n100.r07.s039.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s039_output/n100.r07.s039.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s039_output/n100.r07.s039.reference.fas" "n100.r07.s039_output/n100.r07.s039.fq1.fastq" "n100.r07.s039_output/n100.r07.s039.fq2.fastq" | samtools view -bS - > "n100.r07.s039_output/n100.r07.s039.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s039_output/n100.r07.s039.untrimmed.sorted.bam" "n100.r07.s039_output/n100.r07.s039.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s039_output/n100.r07.s039.untrimmed.sorted.bam" -b "n100.r07.s039_output/n100.r07.s039.primers.bed" -p "n100.r07.s039_output/n100.r07.s039.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s039_output/n100.r07.s039.trimmed.sorted.bam" "n100.r07.s039_output/n100.r07.s039.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s039_output/n100.r07.s039.reference.fas" "n100.r07.s039_output/n100.r07.s039.trimmed.sorted.bam" > "n100.r07.s039_output/n100.r07.s039.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s039_output/n100.r07.s039.reference.fas" --call-indels "n100.r07.s039_output/n100.r07.s039.trimmed.sorted.bam" > "n100.r07.s039_output/n100.r07.s039.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s039_output/n100.r07.s039.trimmed.sorted.bam" > "n100.r07.s039_output/n100.r07.s039.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s039_output/n100.r07.s039.depth.txt" "n100.r07.s039_output/n100.r07.s039.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s039_output/n100.r07.s039.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s039_output/n100.r07.s039.reference.fas" | bcftools consensus -m "n100.r07.s039_output/n100.r07.s039.low_depth.tsv" tmp.vcf.gz > "n100.r07.s039_output/n100.r07.s039.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s039_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:03 scheduler task 6f663194 (flow bb352724): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:03 scheduler task 6f663194 (flow bb352724): waiting for completion (try 0): started
2021/07/08 17:14:03  ->  n100.r07.s071.Main.out_file bb352724 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:03 n100.r07.s071.Main.out_file bb352724 n100/r07/n100.r07.s071.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:21f412e8bf1be836102eff0dddf9ac7cf3254e66851b0bc95391e308d2518870
	sha256:bb3527246b88806a434e8c685f2711ba0a0d43fe46de208cf91abb2ba983a4e6
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6f663194b0a11ad6fbafb0044cf98be6a29d26b69dde795e2a3241d6a4445c2e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s071_output"
	    wget -O "n100.r07.s071_output/n100.r07.s071.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s071_output/n100.r07.s071.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s071_output/n100.r07.s071.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s071_output/n100.r07.s071.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s071_output/n100.r07.s071.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s071_output/n100.r07.s071.reference.fas" "n100.r07.s071_output/n100.r07.s071.fq1.fastq" "n100.r07.s071_output/n100.r07.s071.fq2.fastq" | samtools view -bS - > "n100.r07.s071_output/n100.r07.s071.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s071_output/n100.r07.s071.untrimmed.sorted.bam" "n100.r07.s071_output/n100.r07.s071.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s071_output/n100.r07.s071.untrimmed.sorted.bam" -b "n100.r07.s071_output/n100.r07.s071.primers.bed" -p "n100.r07.s071_output/n100.r07.s071.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s071_output/n100.r07.s071.trimmed.sorted.bam" "n100.r07.s071_output/n100.r07.s071.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s071_output/n100.r07.s071.reference.fas" "n100.r07.s071_output/n100.r07.s071.trimmed.sorted.bam" > "n100.r07.s071_output/n100.r07.s071.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s071_output/n100.r07.s071.reference.fas" --call-indels "n100.r07.s071_output/n100.r07.s071.trimmed.sorted.bam" > "n100.r07.s071_output/n100.r07.s071.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s071_output/n100.r07.s071.trimmed.sorted.bam" > "n100.r07.s071_output/n100.r07.s071.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s071_output/n100.r07.s071.depth.txt" "n100.r07.s071_output/n100.r07.s071.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s071_output/n100.r07.s071.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s071_output/n100.r07.s071.reference.fas" | bcftools consensus -m "n100.r07.s071_output/n100.r07.s071.low_depth.tsv" tmp.vcf.gz > "n100.r07.s071_output/n100.r07.s071.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s071_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:04 scheduler task 4f4f4171 (flow 522bd866): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:04 scheduler task 4f4f4171 (flow 522bd866): waiting for completion (try 0): started
2021/07/08 17:14:04  ->  n100.r07.s083.Main.out_file 522bd866 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:04 n100.r07.s083.Main.out_file 522bd866 n100/r07/n100.r07.s083.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:91aa2eb9b632668e8e022c582f1d31298367e34297dc58f5c6a506c5f8e548e3
	sha256:522bd866569fc831a7dcfedf37917710478b412647cb0f9d385cc71997076ff7
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4f4f4171745404ac8c73bc6529921476a202f4d190b4e44d5bd0ad2e0a01eb37
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s083_output"
	    wget -O "n100.r07.s083_output/n100.r07.s083.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s083_output/n100.r07.s083.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s083_output/n100.r07.s083.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s083_output/n100.r07.s083.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s083_output/n100.r07.s083.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s083_output/n100.r07.s083.reference.fas" "n100.r07.s083_output/n100.r07.s083.fq1.fastq" "n100.r07.s083_output/n100.r07.s083.fq2.fastq" | samtools view -bS - > "n100.r07.s083_output/n100.r07.s083.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s083_output/n100.r07.s083.untrimmed.sorted.bam" "n100.r07.s083_output/n100.r07.s083.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s083_output/n100.r07.s083.untrimmed.sorted.bam" -b "n100.r07.s083_output/n100.r07.s083.primers.bed" -p "n100.r07.s083_output/n100.r07.s083.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s083_output/n100.r07.s083.trimmed.sorted.bam" "n100.r07.s083_output/n100.r07.s083.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s083_output/n100.r07.s083.reference.fas" "n100.r07.s083_output/n100.r07.s083.trimmed.sorted.bam" > "n100.r07.s083_output/n100.r07.s083.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s083_output/n100.r07.s083.reference.fas" --call-indels "n100.r07.s083_output/n100.r07.s083.trimmed.sorted.bam" > "n100.r07.s083_output/n100.r07.s083.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s083_output/n100.r07.s083.trimmed.sorted.bam" > "n100.r07.s083_output/n100.r07.s083.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s083_output/n100.r07.s083.depth.txt" "n100.r07.s083_output/n100.r07.s083.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s083_output/n100.r07.s083.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s083_output/n100.r07.s083.reference.fas" | bcftools consensus -m "n100.r07.s083_output/n100.r07.s083.low_depth.tsv" tmp.vcf.gz > "n100.r07.s083_output/n100.r07.s083.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s083_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:04 scheduler task 300fd7a5 (flow b9812173): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:04 scheduler task 300fd7a5 (flow b9812173): waiting for completion (try 0): started
2021/07/08 17:14:04  ->  n100.r07.s051.Main.out_file b9812173 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:04 n100.r07.s051.Main.out_file b9812173 n100/r07/n100.r07.s051.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c143d3640b692a55ce09a6c931c194619b07da7c66824adf1b2dfa4af7fa0607
	sha256:b981217370fdaa3094d95dfd17ea32dc1f2262bb3be4e7616b2d524750bfef7f
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/300fd7a5fc4305bbb589251a4b37ff2a75667d9ce27ae9b3b83c53fdaa2b5980
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s051_output"
	    wget -O "n100.r07.s051_output/n100.r07.s051.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s051_output/n100.r07.s051.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s051_output/n100.r07.s051.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s051_output/n100.r07.s051.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s051_output/n100.r07.s051.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s051_output/n100.r07.s051.reference.fas" "n100.r07.s051_output/n100.r07.s051.fq1.fastq" "n100.r07.s051_output/n100.r07.s051.fq2.fastq" | samtools view -bS - > "n100.r07.s051_output/n100.r07.s051.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s051_output/n100.r07.s051.untrimmed.sorted.bam" "n100.r07.s051_output/n100.r07.s051.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s051_output/n100.r07.s051.untrimmed.sorted.bam" -b "n100.r07.s051_output/n100.r07.s051.primers.bed" -p "n100.r07.s051_output/n100.r07.s051.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s051_output/n100.r07.s051.trimmed.sorted.bam" "n100.r07.s051_output/n100.r07.s051.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s051_output/n100.r07.s051.reference.fas" "n100.r07.s051_output/n100.r07.s051.trimmed.sorted.bam" > "n100.r07.s051_output/n100.r07.s051.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s051_output/n100.r07.s051.reference.fas" --call-indels "n100.r07.s051_output/n100.r07.s051.trimmed.sorted.bam" > "n100.r07.s051_output/n100.r07.s051.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s051_output/n100.r07.s051.trimmed.sorted.bam" > "n100.r07.s051_output/n100.r07.s051.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s051_output/n100.r07.s051.depth.txt" "n100.r07.s051_output/n100.r07.s051.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s051_output/n100.r07.s051.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s051_output/n100.r07.s051.reference.fas" | bcftools consensus -m "n100.r07.s051_output/n100.r07.s051.low_depth.tsv" tmp.vcf.gz > "n100.r07.s051_output/n100.r07.s051.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s051_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:04 scheduler task 2cc05ef0 (flow 78f39472): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:04 scheduler task 2cc05ef0 (flow 78f39472): waiting for completion (try 0): started
2021/07/08 17:14:04  ->  n100.r07.s048.Main.out_file 78f39472 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:04 n100.r07.s048.Main.out_file 78f39472 n100/r07/n100.r07.s048.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:bdee24fe374131999289d9a22c7cac23d2c9f230954bb261f2ad9d666dc98687
	sha256:78f394726c909aa1ac8a95706dbb0e1132cc240105a40829283b70ef37521900
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2cc05ef0b588619028d88e8a41a8b6ad8b1716e359b99602800814a97f0187d0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s048_output"
	    wget -O "n100.r07.s048_output/n100.r07.s048.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s048_output/n100.r07.s048.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s048_output/n100.r07.s048.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s048_output/n100.r07.s048.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s048_output/n100.r07.s048.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s048_output/n100.r07.s048.reference.fas" "n100.r07.s048_output/n100.r07.s048.fq1.fastq" "n100.r07.s048_output/n100.r07.s048.fq2.fastq" | samtools view -bS - > "n100.r07.s048_output/n100.r07.s048.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s048_output/n100.r07.s048.untrimmed.sorted.bam" "n100.r07.s048_output/n100.r07.s048.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s048_output/n100.r07.s048.untrimmed.sorted.bam" -b "n100.r07.s048_output/n100.r07.s048.primers.bed" -p "n100.r07.s048_output/n100.r07.s048.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s048_output/n100.r07.s048.trimmed.sorted.bam" "n100.r07.s048_output/n100.r07.s048.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s048_output/n100.r07.s048.reference.fas" "n100.r07.s048_output/n100.r07.s048.trimmed.sorted.bam" > "n100.r07.s048_output/n100.r07.s048.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s048_output/n100.r07.s048.reference.fas" --call-indels "n100.r07.s048_output/n100.r07.s048.trimmed.sorted.bam" > "n100.r07.s048_output/n100.r07.s048.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s048_output/n100.r07.s048.trimmed.sorted.bam" > "n100.r07.s048_output/n100.r07.s048.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s048_output/n100.r07.s048.depth.txt" "n100.r07.s048_output/n100.r07.s048.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s048_output/n100.r07.s048.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s048_output/n100.r07.s048.reference.fas" | bcftools consensus -m "n100.r07.s048_output/n100.r07.s048.low_depth.tsv" tmp.vcf.gz > "n100.r07.s048_output/n100.r07.s048.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s048_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:04 scheduler task 31458704 (flow 40bc41f4): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:04 scheduler task 31458704 (flow 40bc41f4): waiting for completion (try 0): started
2021/07/08 17:14:04  ->  n100.r07.s006.Main.out_file 40bc41f4 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:04 n100.r07.s006.Main.out_file 40bc41f4 n100/r07/n100.r07.s006.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b868fb8ddb61c7f6afc95ce0b1aac0fc8e8b44fea32e08e221e86c22bad0b148
	sha256:40bc41f486b7350f8cbb754f4a676fb142fcd8be4bd9bfa4da0da5a97d572f53
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/314587044c51b6ce6e364618fff3c779ff1d1c2531ce01e4b91a3df6970c53bb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s006_output"
	    wget -O "n100.r07.s006_output/n100.r07.s006.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s006_output/n100.r07.s006.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s006_output/n100.r07.s006.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s006_output/n100.r07.s006.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s006_output/n100.r07.s006.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s006_output/n100.r07.s006.reference.fas" "n100.r07.s006_output/n100.r07.s006.fq1.fastq" "n100.r07.s006_output/n100.r07.s006.fq2.fastq" | samtools view -bS - > "n100.r07.s006_output/n100.r07.s006.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s006_output/n100.r07.s006.untrimmed.sorted.bam" "n100.r07.s006_output/n100.r07.s006.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s006_output/n100.r07.s006.untrimmed.sorted.bam" -b "n100.r07.s006_output/n100.r07.s006.primers.bed" -p "n100.r07.s006_output/n100.r07.s006.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s006_output/n100.r07.s006.trimmed.sorted.bam" "n100.r07.s006_output/n100.r07.s006.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s006_output/n100.r07.s006.reference.fas" "n100.r07.s006_output/n100.r07.s006.trimmed.sorted.bam" > "n100.r07.s006_output/n100.r07.s006.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s006_output/n100.r07.s006.reference.fas" --call-indels "n100.r07.s006_output/n100.r07.s006.trimmed.sorted.bam" > "n100.r07.s006_output/n100.r07.s006.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s006_output/n100.r07.s006.trimmed.sorted.bam" > "n100.r07.s006_output/n100.r07.s006.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s006_output/n100.r07.s006.depth.txt" "n100.r07.s006_output/n100.r07.s006.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s006_output/n100.r07.s006.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s006_output/n100.r07.s006.reference.fas" | bcftools consensus -m "n100.r07.s006_output/n100.r07.s006.low_depth.tsv" tmp.vcf.gz > "n100.r07.s006_output/n100.r07.s006.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s006_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:04 scheduler task a3f46aee (flow 956ffc0d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:04 scheduler task a3f46aee (flow 956ffc0d): waiting for completion (try 0): started
2021/07/08 17:14:04  ->  n100.r07.s002.Main.out_file 956ffc0d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:04 n100.r07.s002.Main.out_file 956ffc0d n100/r07/n100.r07.s002.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a133c3acabe9a072b272d7c271c96aa62e49238ed742ff795d2577c941dc0508
	sha256:956ffc0d63a0916eb10ce6ac4055d32326bb7e6ec9dfdf486190e9d74504753b
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a3f46aee7d5667eed81369f28b3b4ea05ea22b4e50fac0afe04bb078093e4f4b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s002_output"
	    wget -O "n100.r07.s002_output/n100.r07.s002.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s002_output/n100.r07.s002.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s002_output/n100.r07.s002.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s002_output/n100.r07.s002.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s002_output/n100.r07.s002.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s002_output/n100.r07.s002.reference.fas" "n100.r07.s002_output/n100.r07.s002.fq1.fastq" "n100.r07.s002_output/n100.r07.s002.fq2.fastq" | samtools view -bS - > "n100.r07.s002_output/n100.r07.s002.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s002_output/n100.r07.s002.untrimmed.sorted.bam" "n100.r07.s002_output/n100.r07.s002.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s002_output/n100.r07.s002.untrimmed.sorted.bam" -b "n100.r07.s002_output/n100.r07.s002.primers.bed" -p "n100.r07.s002_output/n100.r07.s002.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s002_output/n100.r07.s002.trimmed.sorted.bam" "n100.r07.s002_output/n100.r07.s002.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s002_output/n100.r07.s002.reference.fas" "n100.r07.s002_output/n100.r07.s002.trimmed.sorted.bam" > "n100.r07.s002_output/n100.r07.s002.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s002_output/n100.r07.s002.reference.fas" --call-indels "n100.r07.s002_output/n100.r07.s002.trimmed.sorted.bam" > "n100.r07.s002_output/n100.r07.s002.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s002_output/n100.r07.s002.trimmed.sorted.bam" > "n100.r07.s002_output/n100.r07.s002.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s002_output/n100.r07.s002.depth.txt" "n100.r07.s002_output/n100.r07.s002.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s002_output/n100.r07.s002.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s002_output/n100.r07.s002.reference.fas" | bcftools consensus -m "n100.r07.s002_output/n100.r07.s002.low_depth.tsv" tmp.vcf.gz > "n100.r07.s002_output/n100.r07.s002.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s002_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:05 scheduler task e2af4871 (flow 41a5e943): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:05 scheduler task e2af4871 (flow 41a5e943): waiting for completion (try 0): started
2021/07/08 17:14:05  ->  n100.r07.s008.Main.out_file 41a5e943 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:05 n100.r07.s008.Main.out_file 41a5e943 n100/r07/n100.r07.s008.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a0363d2eda2f51cdf2d6499d8bf0870ebb21627eee83d64e509feed715efebf4
	sha256:41a5e9432eec2c2783ca36325d3fe8b7c62a307663a371353903161bb8096f6f
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e2af487107d8f96ddf3b61a86b821b982344b0153027a5ad04c2fec2284aec67
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s008_output"
	    wget -O "n100.r07.s008_output/n100.r07.s008.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s008_output/n100.r07.s008.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s008_output/n100.r07.s008.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s008_output/n100.r07.s008.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s008_output/n100.r07.s008.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s008_output/n100.r07.s008.reference.fas" "n100.r07.s008_output/n100.r07.s008.fq1.fastq" "n100.r07.s008_output/n100.r07.s008.fq2.fastq" | samtools view -bS - > "n100.r07.s008_output/n100.r07.s008.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s008_output/n100.r07.s008.untrimmed.sorted.bam" "n100.r07.s008_output/n100.r07.s008.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s008_output/n100.r07.s008.untrimmed.sorted.bam" -b "n100.r07.s008_output/n100.r07.s008.primers.bed" -p "n100.r07.s008_output/n100.r07.s008.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s008_output/n100.r07.s008.trimmed.sorted.bam" "n100.r07.s008_output/n100.r07.s008.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s008_output/n100.r07.s008.reference.fas" "n100.r07.s008_output/n100.r07.s008.trimmed.sorted.bam" > "n100.r07.s008_output/n100.r07.s008.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s008_output/n100.r07.s008.reference.fas" --call-indels "n100.r07.s008_output/n100.r07.s008.trimmed.sorted.bam" > "n100.r07.s008_output/n100.r07.s008.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s008_output/n100.r07.s008.trimmed.sorted.bam" > "n100.r07.s008_output/n100.r07.s008.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s008_output/n100.r07.s008.depth.txt" "n100.r07.s008_output/n100.r07.s008.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s008_output/n100.r07.s008.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s008_output/n100.r07.s008.reference.fas" | bcftools consensus -m "n100.r07.s008_output/n100.r07.s008.low_depth.tsv" tmp.vcf.gz > "n100.r07.s008_output/n100.r07.s008.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s008_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:05 scheduler task af534387 (flow 90d93718): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:05 scheduler task af534387 (flow 90d93718): waiting for completion (try 0): started
2021/07/08 17:14:05  ->  n100.r07.s049.Main.out_file 90d93718 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:05 n100.r07.s049.Main.out_file 90d93718 n100/r07/n100.r07.s049.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9fec96a15d94edd8990a8b4a4d3885f633d4ccc3745608bbeed2f2448ffb1350
	sha256:90d937181a626a38fc75a1e34963ea03507da9ec018f2d2cb0f98a3c476c63b1
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/af5343878faebc5dcd28e3395fda65379879c423fef2a00594324de9638f51b1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s049_output"
	    wget -O "n100.r07.s049_output/n100.r07.s049.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s049_output/n100.r07.s049.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s049_output/n100.r07.s049.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s049_output/n100.r07.s049.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s049_output/n100.r07.s049.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s049_output/n100.r07.s049.reference.fas" "n100.r07.s049_output/n100.r07.s049.fq1.fastq" "n100.r07.s049_output/n100.r07.s049.fq2.fastq" | samtools view -bS - > "n100.r07.s049_output/n100.r07.s049.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s049_output/n100.r07.s049.untrimmed.sorted.bam" "n100.r07.s049_output/n100.r07.s049.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s049_output/n100.r07.s049.untrimmed.sorted.bam" -b "n100.r07.s049_output/n100.r07.s049.primers.bed" -p "n100.r07.s049_output/n100.r07.s049.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s049_output/n100.r07.s049.trimmed.sorted.bam" "n100.r07.s049_output/n100.r07.s049.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s049_output/n100.r07.s049.reference.fas" "n100.r07.s049_output/n100.r07.s049.trimmed.sorted.bam" > "n100.r07.s049_output/n100.r07.s049.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s049_output/n100.r07.s049.reference.fas" --call-indels "n100.r07.s049_output/n100.r07.s049.trimmed.sorted.bam" > "n100.r07.s049_output/n100.r07.s049.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s049_output/n100.r07.s049.trimmed.sorted.bam" > "n100.r07.s049_output/n100.r07.s049.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s049_output/n100.r07.s049.depth.txt" "n100.r07.s049_output/n100.r07.s049.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s049_output/n100.r07.s049.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s049_output/n100.r07.s049.reference.fas" | bcftools consensus -m "n100.r07.s049_output/n100.r07.s049.low_depth.tsv" tmp.vcf.gz > "n100.r07.s049_output/n100.r07.s049.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s049_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:05 scheduler task ac285b56 (flow d679cd61): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:05 scheduler task ac285b56 (flow d679cd61): waiting for completion (try 0): started
2021/07/08 17:14:05  ->  n100.r07.s042.Main.out_file d679cd61 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:05 n100.r07.s042.Main.out_file d679cd61 n100/r07/n100.r07.s042.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:76a89458628dd568a5c6623643d05dc62deb3dde8601864132253f4ca6c4ed99
	sha256:d679cd614340fc432876765c7611f945b8784a68b6827f9e3a54fc49cdb866e4
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ac285b567e5c9adf921809ce120800e1d25d0b3a8c15f7762401e2b584e71aff
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s042_output"
	    wget -O "n100.r07.s042_output/n100.r07.s042.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s042_output/n100.r07.s042.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s042_output/n100.r07.s042.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s042_output/n100.r07.s042.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s042_output/n100.r07.s042.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s042_output/n100.r07.s042.reference.fas" "n100.r07.s042_output/n100.r07.s042.fq1.fastq" "n100.r07.s042_output/n100.r07.s042.fq2.fastq" | samtools view -bS - > "n100.r07.s042_output/n100.r07.s042.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s042_output/n100.r07.s042.untrimmed.sorted.bam" "n100.r07.s042_output/n100.r07.s042.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s042_output/n100.r07.s042.untrimmed.sorted.bam" -b "n100.r07.s042_output/n100.r07.s042.primers.bed" -p "n100.r07.s042_output/n100.r07.s042.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s042_output/n100.r07.s042.trimmed.sorted.bam" "n100.r07.s042_output/n100.r07.s042.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s042_output/n100.r07.s042.reference.fas" "n100.r07.s042_output/n100.r07.s042.trimmed.sorted.bam" > "n100.r07.s042_output/n100.r07.s042.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s042_output/n100.r07.s042.reference.fas" --call-indels "n100.r07.s042_output/n100.r07.s042.trimmed.sorted.bam" > "n100.r07.s042_output/n100.r07.s042.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s042_output/n100.r07.s042.trimmed.sorted.bam" > "n100.r07.s042_output/n100.r07.s042.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s042_output/n100.r07.s042.depth.txt" "n100.r07.s042_output/n100.r07.s042.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s042_output/n100.r07.s042.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s042_output/n100.r07.s042.reference.fas" | bcftools consensus -m "n100.r07.s042_output/n100.r07.s042.low_depth.tsv" tmp.vcf.gz > "n100.r07.s042_output/n100.r07.s042.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s042_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:05 scheduler task 004d43f9 (flow 51e59bfc): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:05 scheduler task 004d43f9 (flow 51e59bfc): waiting for completion (try 0): started
2021/07/08 17:14:05  ->  n100.r07.s023.Main.out_file 51e59bfc exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:05 n100.r07.s023.Main.out_file 51e59bfc n100/r07/n100.r07.s023.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b03ddfe9c0b808e507447b958fe84b8f0a88afa117d3d29c6d4e569dc48306de
	sha256:51e59bfc3a54c61e9dbfead795579179a65c281e97ee98cba759739b78ffb916
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/004d43f941e37cb369029214e15189466504ad88dbad8208bb70d82dbbdfbdd4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s023_output"
	    wget -O "n100.r07.s023_output/n100.r07.s023.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s023_output/n100.r07.s023.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s023_output/n100.r07.s023.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s023_output/n100.r07.s023.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s023_output/n100.r07.s023.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s023_output/n100.r07.s023.reference.fas" "n100.r07.s023_output/n100.r07.s023.fq1.fastq" "n100.r07.s023_output/n100.r07.s023.fq2.fastq" | samtools view -bS - > "n100.r07.s023_output/n100.r07.s023.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s023_output/n100.r07.s023.untrimmed.sorted.bam" "n100.r07.s023_output/n100.r07.s023.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s023_output/n100.r07.s023.untrimmed.sorted.bam" -b "n100.r07.s023_output/n100.r07.s023.primers.bed" -p "n100.r07.s023_output/n100.r07.s023.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s023_output/n100.r07.s023.trimmed.sorted.bam" "n100.r07.s023_output/n100.r07.s023.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s023_output/n100.r07.s023.reference.fas" "n100.r07.s023_output/n100.r07.s023.trimmed.sorted.bam" > "n100.r07.s023_output/n100.r07.s023.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s023_output/n100.r07.s023.reference.fas" --call-indels "n100.r07.s023_output/n100.r07.s023.trimmed.sorted.bam" > "n100.r07.s023_output/n100.r07.s023.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s023_output/n100.r07.s023.trimmed.sorted.bam" > "n100.r07.s023_output/n100.r07.s023.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s023_output/n100.r07.s023.depth.txt" "n100.r07.s023_output/n100.r07.s023.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s023_output/n100.r07.s023.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s023_output/n100.r07.s023.reference.fas" | bcftools consensus -m "n100.r07.s023_output/n100.r07.s023.low_depth.tsv" tmp.vcf.gz > "n100.r07.s023_output/n100.r07.s023.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s023_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:05 scheduler task ee486401 (flow acaec2ed): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:05 scheduler task ee486401 (flow acaec2ed): waiting for completion (try 0): started
2021/07/08 17:14:05  ->  n100.r07.s058.Main.out_file acaec2ed exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:05 n100.r07.s058.Main.out_file acaec2ed n100/r07/n100.r07.s058.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5108ee0f30d94c904d5cd1d1d1de1f66c289c4d4d8ce83c399fbc106cb673d9b
	sha256:acaec2ed25eda4df7f9c5f8db95295590140316f94d6b29ea9a3211c0269fd01
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ee486401808c49e0084b6d26ffe89df2f1cc792e589aef350a931c6b04fc8337
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s058_output"
	    wget -O "n100.r07.s058_output/n100.r07.s058.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s058_output/n100.r07.s058.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s058_output/n100.r07.s058.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s058_output/n100.r07.s058.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s058_output/n100.r07.s058.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s058_output/n100.r07.s058.reference.fas" "n100.r07.s058_output/n100.r07.s058.fq1.fastq" "n100.r07.s058_output/n100.r07.s058.fq2.fastq" | samtools view -bS - > "n100.r07.s058_output/n100.r07.s058.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s058_output/n100.r07.s058.untrimmed.sorted.bam" "n100.r07.s058_output/n100.r07.s058.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s058_output/n100.r07.s058.untrimmed.sorted.bam" -b "n100.r07.s058_output/n100.r07.s058.primers.bed" -p "n100.r07.s058_output/n100.r07.s058.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s058_output/n100.r07.s058.trimmed.sorted.bam" "n100.r07.s058_output/n100.r07.s058.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s058_output/n100.r07.s058.reference.fas" "n100.r07.s058_output/n100.r07.s058.trimmed.sorted.bam" > "n100.r07.s058_output/n100.r07.s058.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s058_output/n100.r07.s058.reference.fas" --call-indels "n100.r07.s058_output/n100.r07.s058.trimmed.sorted.bam" > "n100.r07.s058_output/n100.r07.s058.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s058_output/n100.r07.s058.trimmed.sorted.bam" > "n100.r07.s058_output/n100.r07.s058.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s058_output/n100.r07.s058.depth.txt" "n100.r07.s058_output/n100.r07.s058.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s058_output/n100.r07.s058.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s058_output/n100.r07.s058.reference.fas" | bcftools consensus -m "n100.r07.s058_output/n100.r07.s058.low_depth.tsv" tmp.vcf.gz > "n100.r07.s058_output/n100.r07.s058.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s058_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:05 scheduler task 964686c2 (flow 1be4cbdf): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:05 scheduler task 964686c2 (flow 1be4cbdf): waiting for completion (try 0): started
2021/07/08 17:14:05  ->  n100.r07.s077.Main.out_file 1be4cbdf exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:05 n100.r07.s077.Main.out_file 1be4cbdf n100/r07/n100.r07.s077.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e95c0fbd1e3ac4675e2eebfd560ef193aab1588af399f6b3a65e14572677293d
	sha256:1be4cbdf2782cadd6b9d5eb226c4db206226d9a4450969c306046bd6e807d563
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/964686c2947deac136bf804e16b8d610385011c01b53058dd9fb0ad501b70693
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s077_output"
	    wget -O "n100.r07.s077_output/n100.r07.s077.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s077_output/n100.r07.s077.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s077_output/n100.r07.s077.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s077_output/n100.r07.s077.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s077_output/n100.r07.s077.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s077_output/n100.r07.s077.reference.fas" "n100.r07.s077_output/n100.r07.s077.fq1.fastq" "n100.r07.s077_output/n100.r07.s077.fq2.fastq" | samtools view -bS - > "n100.r07.s077_output/n100.r07.s077.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s077_output/n100.r07.s077.untrimmed.sorted.bam" "n100.r07.s077_output/n100.r07.s077.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s077_output/n100.r07.s077.untrimmed.sorted.bam" -b "n100.r07.s077_output/n100.r07.s077.primers.bed" -p "n100.r07.s077_output/n100.r07.s077.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s077_output/n100.r07.s077.trimmed.sorted.bam" "n100.r07.s077_output/n100.r07.s077.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s077_output/n100.r07.s077.reference.fas" "n100.r07.s077_output/n100.r07.s077.trimmed.sorted.bam" > "n100.r07.s077_output/n100.r07.s077.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s077_output/n100.r07.s077.reference.fas" --call-indels "n100.r07.s077_output/n100.r07.s077.trimmed.sorted.bam" > "n100.r07.s077_output/n100.r07.s077.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s077_output/n100.r07.s077.trimmed.sorted.bam" > "n100.r07.s077_output/n100.r07.s077.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s077_output/n100.r07.s077.depth.txt" "n100.r07.s077_output/n100.r07.s077.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s077_output/n100.r07.s077.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s077_output/n100.r07.s077.reference.fas" | bcftools consensus -m "n100.r07.s077_output/n100.r07.s077.low_depth.tsv" tmp.vcf.gz > "n100.r07.s077_output/n100.r07.s077.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s077_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:05 scheduler task 415ae885 (flow abb16dca): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:05 scheduler task 415ae885 (flow abb16dca): waiting for completion (try 0): started
2021/07/08 17:14:05  ->  n100.r07.s052.Main.out_file abb16dca exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:05 n100.r07.s052.Main.out_file abb16dca n100/r07/n100.r07.s052.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:203b0773cdffb3db392a53fa8a01a1660d6028b6995d2abd1b25f8ffd98d9734
	sha256:abb16dca7d3983ad5d787c60aab159596417e3561af29c49b5a350a2b61f5713
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/415ae885b70306ac7ef776c46880635574eb065f1708c2a983d5adde83569659
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s052_output"
	    wget -O "n100.r07.s052_output/n100.r07.s052.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s052_output/n100.r07.s052.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s052_output/n100.r07.s052.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s052_output/n100.r07.s052.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s052_output/n100.r07.s052.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s052_output/n100.r07.s052.reference.fas" "n100.r07.s052_output/n100.r07.s052.fq1.fastq" "n100.r07.s052_output/n100.r07.s052.fq2.fastq" | samtools view -bS - > "n100.r07.s052_output/n100.r07.s052.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s052_output/n100.r07.s052.untrimmed.sorted.bam" "n100.r07.s052_output/n100.r07.s052.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s052_output/n100.r07.s052.untrimmed.sorted.bam" -b "n100.r07.s052_output/n100.r07.s052.primers.bed" -p "n100.r07.s052_output/n100.r07.s052.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s052_output/n100.r07.s052.trimmed.sorted.bam" "n100.r07.s052_output/n100.r07.s052.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s052_output/n100.r07.s052.reference.fas" "n100.r07.s052_output/n100.r07.s052.trimmed.sorted.bam" > "n100.r07.s052_output/n100.r07.s052.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s052_output/n100.r07.s052.reference.fas" --call-indels "n100.r07.s052_output/n100.r07.s052.trimmed.sorted.bam" > "n100.r07.s052_output/n100.r07.s052.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s052_output/n100.r07.s052.trimmed.sorted.bam" > "n100.r07.s052_output/n100.r07.s052.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s052_output/n100.r07.s052.depth.txt" "n100.r07.s052_output/n100.r07.s052.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s052_output/n100.r07.s052.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s052_output/n100.r07.s052.reference.fas" | bcftools consensus -m "n100.r07.s052_output/n100.r07.s052.low_depth.tsv" tmp.vcf.gz > "n100.r07.s052_output/n100.r07.s052.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s052_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:05 scheduler task 450f7005 (flow 93a728de): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:05 scheduler task 450f7005 (flow 93a728de): waiting for completion (try 0): started
2021/07/08 17:14:05  ->  n100.r07.s024.Main.out_file 93a728de exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:05 n100.r07.s024.Main.out_file 93a728de n100/r07/n100.r07.s024.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:89d3804b7971c013e572221caada4c9225dd51f25db66133572cf6e1746b3cdb
	sha256:93a728deacbd923ee27ed5430e7c35dca77617a6bcd65ff1c8baec0577421db3
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/450f7005b29d7b1d3c13bab5af1ef1dd155dbe0db7caaf5ff0938ef2b39ddeae
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s024_output"
	    wget -O "n100.r07.s024_output/n100.r07.s024.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s024_output/n100.r07.s024.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s024_output/n100.r07.s024.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s024_output/n100.r07.s024.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s024_output/n100.r07.s024.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s024_output/n100.r07.s024.reference.fas" "n100.r07.s024_output/n100.r07.s024.fq1.fastq" "n100.r07.s024_output/n100.r07.s024.fq2.fastq" | samtools view -bS - > "n100.r07.s024_output/n100.r07.s024.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s024_output/n100.r07.s024.untrimmed.sorted.bam" "n100.r07.s024_output/n100.r07.s024.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s024_output/n100.r07.s024.untrimmed.sorted.bam" -b "n100.r07.s024_output/n100.r07.s024.primers.bed" -p "n100.r07.s024_output/n100.r07.s024.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s024_output/n100.r07.s024.trimmed.sorted.bam" "n100.r07.s024_output/n100.r07.s024.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s024_output/n100.r07.s024.reference.fas" "n100.r07.s024_output/n100.r07.s024.trimmed.sorted.bam" > "n100.r07.s024_output/n100.r07.s024.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s024_output/n100.r07.s024.reference.fas" --call-indels "n100.r07.s024_output/n100.r07.s024.trimmed.sorted.bam" > "n100.r07.s024_output/n100.r07.s024.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s024_output/n100.r07.s024.trimmed.sorted.bam" > "n100.r07.s024_output/n100.r07.s024.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s024_output/n100.r07.s024.depth.txt" "n100.r07.s024_output/n100.r07.s024.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s024_output/n100.r07.s024.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s024_output/n100.r07.s024.reference.fas" | bcftools consensus -m "n100.r07.s024_output/n100.r07.s024.low_depth.tsv" tmp.vcf.gz > "n100.r07.s024_output/n100.r07.s024.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s024_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:06 scheduler task 9a98392a (flow e4ffdf1c): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:06 scheduler task 9a98392a (flow e4ffdf1c): waiting for completion (try 0): started
2021/07/08 17:14:06  ->  n100.r07.s066.Main.out_file e4ffdf1c exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:06 n100.r07.s066.Main.out_file e4ffdf1c n100/r07/n100.r07.s066.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:694a19884358e578149fa37f16cad45536479d8a14dc02cbebf41a8624defca7
	sha256:e4ffdf1c01ee8b87b110343b6912da5fce924fe45c05dca1c15f3b149f6c7e2c
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9a98392a0e3cd7ba7c63e292f990a1c7b8d1ce48f9f1a15e204ddc8289520fa4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s066_output"
	    wget -O "n100.r07.s066_output/n100.r07.s066.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s066_output/n100.r07.s066.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s066_output/n100.r07.s066.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s066_output/n100.r07.s066.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s066_output/n100.r07.s066.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s066_output/n100.r07.s066.reference.fas" "n100.r07.s066_output/n100.r07.s066.fq1.fastq" "n100.r07.s066_output/n100.r07.s066.fq2.fastq" | samtools view -bS - > "n100.r07.s066_output/n100.r07.s066.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s066_output/n100.r07.s066.untrimmed.sorted.bam" "n100.r07.s066_output/n100.r07.s066.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s066_output/n100.r07.s066.untrimmed.sorted.bam" -b "n100.r07.s066_output/n100.r07.s066.primers.bed" -p "n100.r07.s066_output/n100.r07.s066.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s066_output/n100.r07.s066.trimmed.sorted.bam" "n100.r07.s066_output/n100.r07.s066.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s066_output/n100.r07.s066.reference.fas" "n100.r07.s066_output/n100.r07.s066.trimmed.sorted.bam" > "n100.r07.s066_output/n100.r07.s066.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s066_output/n100.r07.s066.reference.fas" --call-indels "n100.r07.s066_output/n100.r07.s066.trimmed.sorted.bam" > "n100.r07.s066_output/n100.r07.s066.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s066_output/n100.r07.s066.trimmed.sorted.bam" > "n100.r07.s066_output/n100.r07.s066.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s066_output/n100.r07.s066.depth.txt" "n100.r07.s066_output/n100.r07.s066.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s066_output/n100.r07.s066.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s066_output/n100.r07.s066.reference.fas" | bcftools consensus -m "n100.r07.s066_output/n100.r07.s066.low_depth.tsv" tmp.vcf.gz > "n100.r07.s066_output/n100.r07.s066.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s066_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:06 scheduler task 6c805c91 (flow 422def09): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:06 scheduler task 6c805c91 (flow 422def09): waiting for completion (try 0): started
2021/07/08 17:14:06  ->  n100.r07.s038.Main.out_file 422def09 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:06 n100.r07.s038.Main.out_file 422def09 n100/r07/n100.r07.s038.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:64d69209ceffef55507bdb21e36d325234a7842d86c07d809353e847e8ab4599
	sha256:422def090f8c8c1744bd88cbae7e660f1bbe9ab699cb4d788d6a601e77ba0b70
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6c805c91a0da6ea4ed4e9c51b765f17b65bcab67e6d9ca8ec098676238095989
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s038_output"
	    wget -O "n100.r07.s038_output/n100.r07.s038.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s038_output/n100.r07.s038.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s038_output/n100.r07.s038.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s038_output/n100.r07.s038.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s038_output/n100.r07.s038.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s038_output/n100.r07.s038.reference.fas" "n100.r07.s038_output/n100.r07.s038.fq1.fastq" "n100.r07.s038_output/n100.r07.s038.fq2.fastq" | samtools view -bS - > "n100.r07.s038_output/n100.r07.s038.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s038_output/n100.r07.s038.untrimmed.sorted.bam" "n100.r07.s038_output/n100.r07.s038.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s038_output/n100.r07.s038.untrimmed.sorted.bam" -b "n100.r07.s038_output/n100.r07.s038.primers.bed" -p "n100.r07.s038_output/n100.r07.s038.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s038_output/n100.r07.s038.trimmed.sorted.bam" "n100.r07.s038_output/n100.r07.s038.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s038_output/n100.r07.s038.reference.fas" "n100.r07.s038_output/n100.r07.s038.trimmed.sorted.bam" > "n100.r07.s038_output/n100.r07.s038.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s038_output/n100.r07.s038.reference.fas" --call-indels "n100.r07.s038_output/n100.r07.s038.trimmed.sorted.bam" > "n100.r07.s038_output/n100.r07.s038.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s038_output/n100.r07.s038.trimmed.sorted.bam" > "n100.r07.s038_output/n100.r07.s038.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s038_output/n100.r07.s038.depth.txt" "n100.r07.s038_output/n100.r07.s038.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s038_output/n100.r07.s038.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s038_output/n100.r07.s038.reference.fas" | bcftools consensus -m "n100.r07.s038_output/n100.r07.s038.low_depth.tsv" tmp.vcf.gz > "n100.r07.s038_output/n100.r07.s038.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s038_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:06 scheduler task 18faa772 (flow 4989a6de): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:06 scheduler task 18faa772 (flow 4989a6de): waiting for completion (try 0): started
2021/07/08 17:14:06  ->  n100.r07.s018.Main.out_file 4989a6de exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:06 n100.r07.s018.Main.out_file 4989a6de n100/r07/n100.r07.s018.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:53e745eb9518285fa64f0f2c9410989565010ac36955625288ef015dc8434407
	sha256:4989a6de283dd9e9a2c1bd70d79246a35c6ca2c3e7e17d581378080b73d41526
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/18faa77291d56120a9933fe1c2ad7238f32c8dd75803ecc80f1715da959763a9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s018_output"
	    wget -O "n100.r07.s018_output/n100.r07.s018.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s018_output/n100.r07.s018.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s018_output/n100.r07.s018.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s018_output/n100.r07.s018.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s018_output/n100.r07.s018.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s018_output/n100.r07.s018.reference.fas" "n100.r07.s018_output/n100.r07.s018.fq1.fastq" "n100.r07.s018_output/n100.r07.s018.fq2.fastq" | samtools view -bS - > "n100.r07.s018_output/n100.r07.s018.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s018_output/n100.r07.s018.untrimmed.sorted.bam" "n100.r07.s018_output/n100.r07.s018.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s018_output/n100.r07.s018.untrimmed.sorted.bam" -b "n100.r07.s018_output/n100.r07.s018.primers.bed" -p "n100.r07.s018_output/n100.r07.s018.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s018_output/n100.r07.s018.trimmed.sorted.bam" "n100.r07.s018_output/n100.r07.s018.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s018_output/n100.r07.s018.reference.fas" "n100.r07.s018_output/n100.r07.s018.trimmed.sorted.bam" > "n100.r07.s018_output/n100.r07.s018.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s018_output/n100.r07.s018.reference.fas" --call-indels "n100.r07.s018_output/n100.r07.s018.trimmed.sorted.bam" > "n100.r07.s018_output/n100.r07.s018.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s018_output/n100.r07.s018.trimmed.sorted.bam" > "n100.r07.s018_output/n100.r07.s018.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s018_output/n100.r07.s018.depth.txt" "n100.r07.s018_output/n100.r07.s018.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s018_output/n100.r07.s018.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s018_output/n100.r07.s018.reference.fas" | bcftools consensus -m "n100.r07.s018_output/n100.r07.s018.low_depth.tsv" tmp.vcf.gz > "n100.r07.s018_output/n100.r07.s018.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s018_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:06 scheduler task bdc179fc (flow c7a8d3dc): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:06 scheduler task bdc179fc (flow c7a8d3dc): waiting for completion (try 0): started
2021/07/08 17:14:06  ->  n100.r07.s070.Main.out_file c7a8d3dc exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:06 n100.r07.s070.Main.out_file c7a8d3dc n100/r07/n100.r07.s070.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b49985d208baa7ff2a4ca6106fdeb60ae01f2639cba379437327e1cc46cf9206
	sha256:c7a8d3dc5e749175bd0840d2e2bce478c91b63021d38819356b7febff13c802a
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bdc179fc15c90c099179db9235ad9f789d7d5f48c885cf5d24f13b6f4ecc594a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s070_output"
	    wget -O "n100.r07.s070_output/n100.r07.s070.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s070_output/n100.r07.s070.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s070_output/n100.r07.s070.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s070_output/n100.r07.s070.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s070_output/n100.r07.s070.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s070_output/n100.r07.s070.reference.fas" "n100.r07.s070_output/n100.r07.s070.fq1.fastq" "n100.r07.s070_output/n100.r07.s070.fq2.fastq" | samtools view -bS - > "n100.r07.s070_output/n100.r07.s070.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s070_output/n100.r07.s070.untrimmed.sorted.bam" "n100.r07.s070_output/n100.r07.s070.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s070_output/n100.r07.s070.untrimmed.sorted.bam" -b "n100.r07.s070_output/n100.r07.s070.primers.bed" -p "n100.r07.s070_output/n100.r07.s070.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s070_output/n100.r07.s070.trimmed.sorted.bam" "n100.r07.s070_output/n100.r07.s070.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s070_output/n100.r07.s070.reference.fas" "n100.r07.s070_output/n100.r07.s070.trimmed.sorted.bam" > "n100.r07.s070_output/n100.r07.s070.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s070_output/n100.r07.s070.reference.fas" --call-indels "n100.r07.s070_output/n100.r07.s070.trimmed.sorted.bam" > "n100.r07.s070_output/n100.r07.s070.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s070_output/n100.r07.s070.trimmed.sorted.bam" > "n100.r07.s070_output/n100.r07.s070.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s070_output/n100.r07.s070.depth.txt" "n100.r07.s070_output/n100.r07.s070.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s070_output/n100.r07.s070.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s070_output/n100.r07.s070.reference.fas" | bcftools consensus -m "n100.r07.s070_output/n100.r07.s070.low_depth.tsv" tmp.vcf.gz > "n100.r07.s070_output/n100.r07.s070.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s070_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:06 scheduler task c5654e5c (flow ef41d477): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:06 scheduler task c5654e5c (flow ef41d477): waiting for completion (try 0): started
2021/07/08 17:14:06  ->  n100.r07.s064.Main.out_file ef41d477 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:06 n100.r07.s064.Main.out_file ef41d477 n100/r07/n100.r07.s064.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e178e93026d9f43d7518739f1d49c4d7ce3fa5b7b9cf563233c24c02443717d4
	sha256:ef41d477fa6666b38f06d6b19fef70d0b9edb7b21cb04aa19ffdfb6a6b5cfc2e
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c5654e5c97c3d5d589757641ba4cf9e1be1850195ae8a25eaf9330285eb5bab8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s064_output"
	    wget -O "n100.r07.s064_output/n100.r07.s064.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s064_output/n100.r07.s064.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s064_output/n100.r07.s064.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s064_output/n100.r07.s064.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s064_output/n100.r07.s064.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s064_output/n100.r07.s064.reference.fas" "n100.r07.s064_output/n100.r07.s064.fq1.fastq" "n100.r07.s064_output/n100.r07.s064.fq2.fastq" | samtools view -bS - > "n100.r07.s064_output/n100.r07.s064.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s064_output/n100.r07.s064.untrimmed.sorted.bam" "n100.r07.s064_output/n100.r07.s064.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s064_output/n100.r07.s064.untrimmed.sorted.bam" -b "n100.r07.s064_output/n100.r07.s064.primers.bed" -p "n100.r07.s064_output/n100.r07.s064.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s064_output/n100.r07.s064.trimmed.sorted.bam" "n100.r07.s064_output/n100.r07.s064.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s064_output/n100.r07.s064.reference.fas" "n100.r07.s064_output/n100.r07.s064.trimmed.sorted.bam" > "n100.r07.s064_output/n100.r07.s064.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s064_output/n100.r07.s064.reference.fas" --call-indels "n100.r07.s064_output/n100.r07.s064.trimmed.sorted.bam" > "n100.r07.s064_output/n100.r07.s064.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s064_output/n100.r07.s064.trimmed.sorted.bam" > "n100.r07.s064_output/n100.r07.s064.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s064_output/n100.r07.s064.depth.txt" "n100.r07.s064_output/n100.r07.s064.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s064_output/n100.r07.s064.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s064_output/n100.r07.s064.reference.fas" | bcftools consensus -m "n100.r07.s064_output/n100.r07.s064.low_depth.tsv" tmp.vcf.gz > "n100.r07.s064_output/n100.r07.s064.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s064_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:06 scheduler task 852314b6 (flow d13a1791): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:06 scheduler task 852314b6 (flow d13a1791): waiting for completion (try 0): started
2021/07/08 17:14:06  ->  n100.r07.s032.Main.out_file d13a1791 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:06 n100.r07.s032.Main.out_file d13a1791 n100/r07/n100.r07.s032.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:82c49a6922ee8160f014c37468dde9577ba0fd6542a60e48cc6f5bc03f25b456
	sha256:d13a1791dd4ff631423f6c82fdd5fb6db9c5eed0bfd925b885909a1f5115171d
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/852314b610b70472d17788cb06c9d20e7d16e2b6294a8be591c21a2c8f56e1d5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s032_output"
	    wget -O "n100.r07.s032_output/n100.r07.s032.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s032_output/n100.r07.s032.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s032_output/n100.r07.s032.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s032_output/n100.r07.s032.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s032_output/n100.r07.s032.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s032_output/n100.r07.s032.reference.fas" "n100.r07.s032_output/n100.r07.s032.fq1.fastq" "n100.r07.s032_output/n100.r07.s032.fq2.fastq" | samtools view -bS - > "n100.r07.s032_output/n100.r07.s032.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s032_output/n100.r07.s032.untrimmed.sorted.bam" "n100.r07.s032_output/n100.r07.s032.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s032_output/n100.r07.s032.untrimmed.sorted.bam" -b "n100.r07.s032_output/n100.r07.s032.primers.bed" -p "n100.r07.s032_output/n100.r07.s032.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s032_output/n100.r07.s032.trimmed.sorted.bam" "n100.r07.s032_output/n100.r07.s032.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s032_output/n100.r07.s032.reference.fas" "n100.r07.s032_output/n100.r07.s032.trimmed.sorted.bam" > "n100.r07.s032_output/n100.r07.s032.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s032_output/n100.r07.s032.reference.fas" --call-indels "n100.r07.s032_output/n100.r07.s032.trimmed.sorted.bam" > "n100.r07.s032_output/n100.r07.s032.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s032_output/n100.r07.s032.trimmed.sorted.bam" > "n100.r07.s032_output/n100.r07.s032.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s032_output/n100.r07.s032.depth.txt" "n100.r07.s032_output/n100.r07.s032.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s032_output/n100.r07.s032.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s032_output/n100.r07.s032.reference.fas" | bcftools consensus -m "n100.r07.s032_output/n100.r07.s032.low_depth.tsv" tmp.vcf.gz > "n100.r07.s032_output/n100.r07.s032.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s032_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:07 scheduler task 2623b266 (flow 26192454): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:07 scheduler task 2623b266 (flow 26192454): waiting for completion (try 0): started
2021/07/08 17:14:07  ->  n100.r07.s016.Main.out_file 26192454 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:07 n100.r07.s016.Main.out_file 26192454 n100/r07/n100.r07.s016.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f4627290ab220b534f4de4bb9c29695020da21cfee6b4441322015cfb0e9b39a
	sha256:261924548a232fddb15681629c94f9d36ab6f721d271ba155c8e1e6ab0b3fd93
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2623b266f1800fb00e962754ad4da37500ac3b60456819b9028a1bdda8c159a6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s016_output"
	    wget -O "n100.r07.s016_output/n100.r07.s016.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s016_output/n100.r07.s016.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s016_output/n100.r07.s016.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s016_output/n100.r07.s016.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s016_output/n100.r07.s016.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s016_output/n100.r07.s016.reference.fas" "n100.r07.s016_output/n100.r07.s016.fq1.fastq" "n100.r07.s016_output/n100.r07.s016.fq2.fastq" | samtools view -bS - > "n100.r07.s016_output/n100.r07.s016.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s016_output/n100.r07.s016.untrimmed.sorted.bam" "n100.r07.s016_output/n100.r07.s016.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s016_output/n100.r07.s016.untrimmed.sorted.bam" -b "n100.r07.s016_output/n100.r07.s016.primers.bed" -p "n100.r07.s016_output/n100.r07.s016.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s016_output/n100.r07.s016.trimmed.sorted.bam" "n100.r07.s016_output/n100.r07.s016.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s016_output/n100.r07.s016.reference.fas" "n100.r07.s016_output/n100.r07.s016.trimmed.sorted.bam" > "n100.r07.s016_output/n100.r07.s016.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s016_output/n100.r07.s016.reference.fas" --call-indels "n100.r07.s016_output/n100.r07.s016.trimmed.sorted.bam" > "n100.r07.s016_output/n100.r07.s016.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s016_output/n100.r07.s016.trimmed.sorted.bam" > "n100.r07.s016_output/n100.r07.s016.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s016_output/n100.r07.s016.depth.txt" "n100.r07.s016_output/n100.r07.s016.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s016_output/n100.r07.s016.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s016_output/n100.r07.s016.reference.fas" | bcftools consensus -m "n100.r07.s016_output/n100.r07.s016.low_depth.tsv" tmp.vcf.gz > "n100.r07.s016_output/n100.r07.s016.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s016_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:07 scheduler task 60169fd2 (flow cd6e30ef): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:07 scheduler task 60169fd2 (flow cd6e30ef): waiting for completion (try 0): started
2021/07/08 17:14:07  ->  n100.r07.s027.Main.out_file cd6e30ef exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:07 n100.r07.s027.Main.out_file cd6e30ef n100/r07/n100.r07.s027.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:947c9194b5d511b031fc0b3ed960660c25f74c828b707dcb91c11da8fb4fcb0a
	sha256:cd6e30ef376d4dc6a9a8260823b9eb67eec73793b93fa9cad7b729e77fecb3f5
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/60169fd24a4a71fbe84e0f6ff7792cbbe80294618b4f2f2333a951e896be0bbe
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s027_output"
	    wget -O "n100.r07.s027_output/n100.r07.s027.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s027_output/n100.r07.s027.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s027_output/n100.r07.s027.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s027_output/n100.r07.s027.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s027_output/n100.r07.s027.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s027_output/n100.r07.s027.reference.fas" "n100.r07.s027_output/n100.r07.s027.fq1.fastq" "n100.r07.s027_output/n100.r07.s027.fq2.fastq" | samtools view -bS - > "n100.r07.s027_output/n100.r07.s027.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s027_output/n100.r07.s027.untrimmed.sorted.bam" "n100.r07.s027_output/n100.r07.s027.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s027_output/n100.r07.s027.untrimmed.sorted.bam" -b "n100.r07.s027_output/n100.r07.s027.primers.bed" -p "n100.r07.s027_output/n100.r07.s027.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s027_output/n100.r07.s027.trimmed.sorted.bam" "n100.r07.s027_output/n100.r07.s027.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s027_output/n100.r07.s027.reference.fas" "n100.r07.s027_output/n100.r07.s027.trimmed.sorted.bam" > "n100.r07.s027_output/n100.r07.s027.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s027_output/n100.r07.s027.reference.fas" --call-indels "n100.r07.s027_output/n100.r07.s027.trimmed.sorted.bam" > "n100.r07.s027_output/n100.r07.s027.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s027_output/n100.r07.s027.trimmed.sorted.bam" > "n100.r07.s027_output/n100.r07.s027.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s027_output/n100.r07.s027.depth.txt" "n100.r07.s027_output/n100.r07.s027.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s027_output/n100.r07.s027.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s027_output/n100.r07.s027.reference.fas" | bcftools consensus -m "n100.r07.s027_output/n100.r07.s027.low_depth.tsv" tmp.vcf.gz > "n100.r07.s027_output/n100.r07.s027.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s027_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:07 scheduler task 95756e2e (flow 61093b34): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:07 scheduler task 95756e2e (flow 61093b34): waiting for completion (try 0): started
2021/07/08 17:14:07  ->  n100.r07.s004.Main.out_file 61093b34 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:07 n100.r07.s004.Main.out_file 61093b34 n100/r07/n100.r07.s004.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:72cd730b425cc121d2a9c5e132478d38108b79b264a4bb20fbe7254e62a718c1
	sha256:61093b34bb0d7d0bec1c95bb13f414100ba59fda9569d196840676b06468075a
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/95756e2efd0449b1b5435ba633d9cc7c07cdc6a3bf037b4c817e233027e01b64
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s004_output"
	    wget -O "n100.r07.s004_output/n100.r07.s004.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s004_output/n100.r07.s004.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s004_output/n100.r07.s004.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s004_output/n100.r07.s004.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s004_output/n100.r07.s004.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s004_output/n100.r07.s004.reference.fas" "n100.r07.s004_output/n100.r07.s004.fq1.fastq" "n100.r07.s004_output/n100.r07.s004.fq2.fastq" | samtools view -bS - > "n100.r07.s004_output/n100.r07.s004.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s004_output/n100.r07.s004.untrimmed.sorted.bam" "n100.r07.s004_output/n100.r07.s004.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s004_output/n100.r07.s004.untrimmed.sorted.bam" -b "n100.r07.s004_output/n100.r07.s004.primers.bed" -p "n100.r07.s004_output/n100.r07.s004.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s004_output/n100.r07.s004.trimmed.sorted.bam" "n100.r07.s004_output/n100.r07.s004.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s004_output/n100.r07.s004.reference.fas" "n100.r07.s004_output/n100.r07.s004.trimmed.sorted.bam" > "n100.r07.s004_output/n100.r07.s004.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s004_output/n100.r07.s004.reference.fas" --call-indels "n100.r07.s004_output/n100.r07.s004.trimmed.sorted.bam" > "n100.r07.s004_output/n100.r07.s004.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s004_output/n100.r07.s004.trimmed.sorted.bam" > "n100.r07.s004_output/n100.r07.s004.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s004_output/n100.r07.s004.depth.txt" "n100.r07.s004_output/n100.r07.s004.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s004_output/n100.r07.s004.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s004_output/n100.r07.s004.reference.fas" | bcftools consensus -m "n100.r07.s004_output/n100.r07.s004.low_depth.tsv" tmp.vcf.gz > "n100.r07.s004_output/n100.r07.s004.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s004_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:07 scheduler task eebbb090 (flow 2cedb108): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:07 scheduler task eebbb090 (flow 2cedb108): waiting for completion (try 0): started
2021/07/08 17:14:07  ->  n100.r07.s054.Main.out_file 2cedb108 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:07 n100.r07.s054.Main.out_file 2cedb108 n100/r07/n100.r07.s054.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f45afddd9a1e1dfaf83bba5fd7ffb7cff807d6cee03fe0e0fcac86655caeeddc
	sha256:2cedb108b352494514cf563b0c0a18cdc4162a6046bc8a58fcede4f2e0fd8a91
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/eebbb09003863ad9852d46114745e2e3abc9e00b7ea4d5d450b323e8d49acc55
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s054_output"
	    wget -O "n100.r07.s054_output/n100.r07.s054.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s054_output/n100.r07.s054.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s054_output/n100.r07.s054.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s054_output/n100.r07.s054.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s054_output/n100.r07.s054.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s054_output/n100.r07.s054.reference.fas" "n100.r07.s054_output/n100.r07.s054.fq1.fastq" "n100.r07.s054_output/n100.r07.s054.fq2.fastq" | samtools view -bS - > "n100.r07.s054_output/n100.r07.s054.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s054_output/n100.r07.s054.untrimmed.sorted.bam" "n100.r07.s054_output/n100.r07.s054.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s054_output/n100.r07.s054.untrimmed.sorted.bam" -b "n100.r07.s054_output/n100.r07.s054.primers.bed" -p "n100.r07.s054_output/n100.r07.s054.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s054_output/n100.r07.s054.trimmed.sorted.bam" "n100.r07.s054_output/n100.r07.s054.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s054_output/n100.r07.s054.reference.fas" "n100.r07.s054_output/n100.r07.s054.trimmed.sorted.bam" > "n100.r07.s054_output/n100.r07.s054.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s054_output/n100.r07.s054.reference.fas" --call-indels "n100.r07.s054_output/n100.r07.s054.trimmed.sorted.bam" > "n100.r07.s054_output/n100.r07.s054.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s054_output/n100.r07.s054.trimmed.sorted.bam" > "n100.r07.s054_output/n100.r07.s054.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s054_output/n100.r07.s054.depth.txt" "n100.r07.s054_output/n100.r07.s054.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s054_output/n100.r07.s054.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s054_output/n100.r07.s054.reference.fas" | bcftools consensus -m "n100.r07.s054_output/n100.r07.s054.low_depth.tsv" tmp.vcf.gz > "n100.r07.s054_output/n100.r07.s054.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s054_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:14:07 scheduler task 8465c67c (flow b2a24fdd): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:14:07 scheduler task 8465c67c (flow b2a24fdd): waiting for completion (try 0): started
2021/07/08 17:14:07  ->  n100.r07.s087.Main.out_file b2a24fdd exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:14:07 n100.r07.s087.Main.out_file b2a24fdd n100/r07/n100.r07.s087.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:494d0a39299cd2e0f30e1203afc13f1a95da706cb300cb2df224113be98dd83c
	sha256:b2a24fddbf8364fba2cf9dfc249cc6f34a3f4789b9aab2d7231c441f18c56be4
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8465c67ca7e07b3cdd95d8a4d37ad731ea989edd1a654f66d3a5b3cfb2fc8851
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s087_output"
	    wget -O "n100.r07.s087_output/n100.r07.s087.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s087_output/n100.r07.s087.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s087_output/n100.r07.s087.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s087_output/n100.r07.s087.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s087_output/n100.r07.s087.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s087_output/n100.r07.s087.reference.fas" "n100.r07.s087_output/n100.r07.s087.fq1.fastq" "n100.r07.s087_output/n100.r07.s087.fq2.fastq" | samtools view -bS - > "n100.r07.s087_output/n100.r07.s087.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s087_output/n100.r07.s087.untrimmed.sorted.bam" "n100.r07.s087_output/n100.r07.s087.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s087_output/n100.r07.s087.untrimmed.sorted.bam" -b "n100.r07.s087_output/n100.r07.s087.primers.bed" -p "n100.r07.s087_output/n100.r07.s087.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s087_output/n100.r07.s087.trimmed.sorted.bam" "n100.r07.s087_output/n100.r07.s087.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s087_output/n100.r07.s087.reference.fas" "n100.r07.s087_output/n100.r07.s087.trimmed.sorted.bam" > "n100.r07.s087_output/n100.r07.s087.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s087_output/n100.r07.s087.reference.fas" --call-indels "n100.r07.s087_output/n100.r07.s087.trimmed.sorted.bam" > "n100.r07.s087_output/n100.r07.s087.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s087_output/n100.r07.s087.trimmed.sorted.bam" > "n100.r07.s087_output/n100.r07.s087.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s087_output/n100.r07.s087.depth.txt" "n100.r07.s087_output/n100.r07.s087.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s087_output/n100.r07.s087.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s087_output/n100.r07.s087.reference.fas" | bcftools consensus -m "n100.r07.s087_output/n100.r07.s087.low_depth.tsv" tmp.vcf.gz > "n100.r07.s087_output/n100.r07.s087.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s087_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:18:06 scheduler task 92cb3014 (flow e38f563a): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:18:06 scheduler task 92cb3014 (flow e38f563a): promoting objects (try 0): started
2021/07/08 17:18:06 scheduler task 92cb3014 (flow e38f563a): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:18:06 scheduler task 92cb3014 (flow e38f563a): retrieving diagnostic output (try 0): started
2021/07/08 17:18:06 scheduler task 92cb3014 (flow e38f563a): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:18:06 scheduler task 92cb3014 (flow e38f563a): retrieving result (try 0): started
2021/07/08 17:18:06 scheduler task d280101a (flow 2063d14e): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:18:06 scheduler task d280101a (flow 2063d14e): promoting objects (try 0): started
2021/07/08 17:18:06 scheduler task 92cb3014 (flow e38f563a): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:18:06 scheduler task 92cb3014 (flow e38f563a): transferring output (try 0): started
2021/07/08 17:18:06 scheduler task d280101a (flow 2063d14e): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:18:06 scheduler task d280101a (flow 2063d14e): retrieving diagnostic output (try 0): started
2021/07/08 17:18:06 scheduler task d280101a (flow 2063d14e): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:18:06 scheduler task d280101a (flow 2063d14e): retrieving result (try 0): started
2021/07/08 17:18:06 scheduler task d280101a (flow 2063d14e): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:18:06 scheduler task d280101a (flow 2063d14e): transferring output (try 0): started
2021/07/08 17:18:07 scheduler task 92cb3014 (flow e38f563a): transferring output (try 0): successful, next state: unloading
2021/07/08 17:18:07 scheduler task 92cb3014 (flow e38f563a): unloading (try 0): started
2021/07/08 17:18:07 scheduler task 92cb3014 (flow e38f563a): unloading val<.=ad4e246d 35.4MiB>
2021/07/08 17:18:07 scheduler task 92cb3014 (flow e38f563a): unloading list<val<.=76b2b4f5 35.7MiB> 35.7MiB>
2021/07/08 17:18:07 scheduler task 92cb3014 (flow e38f563a): unloading val<.=339a6812 35.4MiB>
2021/07/08 17:18:07 scheduler task 92cb3014 (flow e38f563a): unloaded list<val<.=76b2b4f5 35.7MiB> 35.7MiB>
2021/07/08 17:18:07 scheduler task 92cb3014 (flow e38f563a): unloaded val<.=339a6812 35.4MiB>
2021/07/08 17:18:07 scheduler task 92cb3014 (flow e38f563a): unloaded val<.=ad4e246d 35.4MiB>
2021/07/08 17:18:07 scheduler task 92cb3014 (flow e38f563a): unloading (try 0): successful, next state: complete
2021/07/08 17:18:07  <-  n100.r07.s043.Main.out_file e38f563a ok     exec 3m57s 35.7MiB
2021/07/08 17:18:07 n100.r07.s043.Main.out_file e38f563a n100/r07/n100.r07.s043.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c02a9cd761f3a882ef155d5d7c1e51bad350707bf643cac65eaee1a5b95d6649
	sha256:e38f563a72116eaf8bbdb7236cdebd2e987907c8d1c5ee3d3a2840bcb67f0a0b
	ec2-3-139-104-158.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/92cb30146ce63f7d5f00139e20d0de6860eb9a0b9a885af92b64c1d35753c6f7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s043_output"
	    wget -O "n100.r07.s043_output/n100.r07.s043.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s043_output/n100.r07.s043.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s043_output/n100.r07.s043.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s043_output/n100.r07.s043.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s043_output/n100.r07.s043.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s043_output/n100.r07.s043.reference.fas" "n100.r07.s043_output/n100.r07.s043.fq1.fastq" "n100.r07.s043_output/n100.r07.s043.fq2.fastq" | samtools view -bS - > "n100.r07.s043_output/n100.r07.s043.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s043_output/n100.r07.s043.untrimmed.sorted.bam" "n100.r07.s043_output/n100.r07.s043.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s043_output/n100.r07.s043.untrimmed.sorted.bam" -b "n100.r07.s043_output/n100.r07.s043.primers.bed" -p "n100.r07.s043_output/n100.r07.s043.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s043_output/n100.r07.s043.trimmed.sorted.bam" "n100.r07.s043_output/n100.r07.s043.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s043_output/n100.r07.s043.reference.fas" "n100.r07.s043_output/n100.r07.s043.trimmed.sorted.bam" > "n100.r07.s043_output/n100.r07.s043.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s043_output/n100.r07.s043.reference.fas" --call-indels "n100.r07.s043_output/n100.r07.s043.trimmed.sorted.bam" > "n100.r07.s043_output/n100.r07.s043.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s043_output/n100.r07.s043.trimmed.sorted.bam" > "n100.r07.s043_output/n100.r07.s043.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s043_output/n100.r07.s043.depth.txt" "n100.r07.s043_output/n100.r07.s043.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s043_output/n100.r07.s043.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s043_output/n100.r07.s043.reference.fas" | bcftools consensus -m "n100.r07.s043_output/n100.r07.s043.low_depth.tsv" tmp.vcf.gz > "n100.r07.s043_output/n100.r07.s043.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s043_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:76b2b4f5eb947cead97551dd3a0abf54c1e6345ba0314daf6329abd30c230f0a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=16.3MiB max=124.6MiB
	    disk mean=8.9MiB max=35.7MiB
	    tmp mean=259B max=1.0KiB
2021/07/08 17:18:07 scheduler task 451887f2 (flow c26b8783): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s043.tar.gz resources {}
2021/07/08 17:18:07  ->  n100.r07.s043.Main.cp_out_file c26b8783 exec extern s3://niema-test/n100/r07/n100.r07.s043.tar.gz 35.7MiB
2021/07/08 17:18:07 scheduler task e9888daf (flow ec27422b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:18:07 scheduler task e9888daf (flow ec27422b): promoting objects (try 0): started
2021/07/08 17:18:07 scheduler task d280101a (flow 2063d14e): transferring output (try 0): successful, next state: unloading
2021/07/08 17:18:07 scheduler task d280101a (flow 2063d14e): unloading (try 0): started
2021/07/08 17:18:07 scheduler task d280101a (flow 2063d14e): unloading list<val<.=019e4fa2 35.7MiB> 35.7MiB>
2021/07/08 17:18:07 scheduler task d280101a (flow 2063d14e): unloading val<.=65fc32af 35.4MiB>
2021/07/08 17:18:07 scheduler task d280101a (flow 2063d14e): unloading val<.=0fc36eec 35.4MiB>
2021/07/08 17:18:07 scheduler task e9888daf (flow ec27422b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:18:07 scheduler task e9888daf (flow ec27422b): retrieving diagnostic output (try 0): started
2021/07/08 17:18:07 scheduler task d280101a (flow 2063d14e): unloaded val<.=65fc32af 35.4MiB>
2021/07/08 17:18:07 scheduler task d280101a (flow 2063d14e): unloaded list<val<.=019e4fa2 35.7MiB> 35.7MiB>
2021/07/08 17:18:07 scheduler task d280101a (flow 2063d14e): unloaded val<.=0fc36eec 35.4MiB>
2021/07/08 17:18:07 scheduler task d280101a (flow 2063d14e): unloading (try 0): successful, next state: complete
2021/07/08 17:18:07  <-  n100.r07.s080.Main.out_file 2063d14e ok     exec 3m57s 35.7MiB
2021/07/08 17:18:07 n100.r07.s080.Main.out_file 2063d14e n100/r07/n100.r07.s080.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f0be3806e859b3e5bc07cd4d49082f2ebf14a538565c39ab878a475c09c2f044
	sha256:2063d14e163178f019b120d97d1720d47e42470718d6eb8ea7538443008e7dba
	ec2-3-139-104-158.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d280101af85cdc0e1265ed4a0103c252d807c28d1ca9a90ea2defa21764f16da
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s080_output"
	    wget -O "n100.r07.s080_output/n100.r07.s080.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s080_output/n100.r07.s080.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s080_output/n100.r07.s080.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s080_output/n100.r07.s080.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s080_output/n100.r07.s080.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s080_output/n100.r07.s080.reference.fas" "n100.r07.s080_output/n100.r07.s080.fq1.fastq" "n100.r07.s080_output/n100.r07.s080.fq2.fastq" | samtools view -bS - > "n100.r07.s080_output/n100.r07.s080.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s080_output/n100.r07.s080.untrimmed.sorted.bam" "n100.r07.s080_output/n100.r07.s080.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s080_output/n100.r07.s080.untrimmed.sorted.bam" -b "n100.r07.s080_output/n100.r07.s080.primers.bed" -p "n100.r07.s080_output/n100.r07.s080.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s080_output/n100.r07.s080.trimmed.sorted.bam" "n100.r07.s080_output/n100.r07.s080.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s080_output/n100.r07.s080.reference.fas" "n100.r07.s080_output/n100.r07.s080.trimmed.sorted.bam" > "n100.r07.s080_output/n100.r07.s080.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s080_output/n100.r07.s080.reference.fas" --call-indels "n100.r07.s080_output/n100.r07.s080.trimmed.sorted.bam" > "n100.r07.s080_output/n100.r07.s080.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s080_output/n100.r07.s080.trimmed.sorted.bam" > "n100.r07.s080_output/n100.r07.s080.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s080_output/n100.r07.s080.depth.txt" "n100.r07.s080_output/n100.r07.s080.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s080_output/n100.r07.s080.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s080_output/n100.r07.s080.reference.fas" | bcftools consensus -m "n100.r07.s080_output/n100.r07.s080.low_depth.tsv" tmp.vcf.gz > "n100.r07.s080_output/n100.r07.s080.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s080_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:019e4fa2a73afadec59713d55d7fc51d82caee8667386e577f2dd0edf13e99bf 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=16.8MiB max=124.9MiB
	    disk mean=8.9MiB max=35.7MiB
	    tmp mean=259B max=1.0KiB
2021/07/08 17:18:07 scheduler task dddb6e6b (flow fa5b8836): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s080.tar.gz resources {}
2021/07/08 17:18:07  ->  n100.r07.s080.Main.cp_out_file fa5b8836 exec extern s3://niema-test/n100/r07/n100.r07.s080.tar.gz 35.7MiB
2021/07/08 17:18:07 scheduler task e9888daf (flow ec27422b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:18:07 scheduler task e9888daf (flow ec27422b): retrieving result (try 0): started
2021/07/08 17:18:07 scheduler task e9888daf (flow ec27422b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:18:07 scheduler task e9888daf (flow ec27422b): transferring output (try 0): started
2021/07/08 17:18:08 scheduler task 2cd48a42 (flow ab63e124): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:18:08 scheduler task 2cd48a42 (flow ab63e124): promoting objects (try 0): started
2021/07/08 17:18:08 scheduler task 2cd48a42 (flow ab63e124): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:18:08 scheduler task 2cd48a42 (flow ab63e124): retrieving diagnostic output (try 0): started
2021/07/08 17:18:08 scheduler task 2cd48a42 (flow ab63e124): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:18:08 scheduler task 2cd48a42 (flow ab63e124): retrieving result (try 0): started
2021/07/08 17:18:08 scheduler task 2cd48a42 (flow ab63e124): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:18:08 scheduler task 2cd48a42 (flow ab63e124): transferring output (try 0): started
2021/07/08 17:18:08 scheduler task e9888daf (flow ec27422b): transferring output (try 0): successful, next state: unloading
2021/07/08 17:18:08 scheduler task e9888daf (flow ec27422b): unloading (try 0): started
2021/07/08 17:18:08 scheduler task e9888daf (flow ec27422b): unloading list<val<.=f40368c8 35.7MiB> 35.7MiB>
2021/07/08 17:18:08 scheduler task e9888daf (flow ec27422b): unloading val<.=50d93b59 35.4MiB>
2021/07/08 17:18:08 scheduler task e9888daf (flow ec27422b): unloading val<.=35130427 35.4MiB>
2021/07/08 17:18:08 scheduler task e9888daf (flow ec27422b): unloaded val<.=50d93b59 35.4MiB>
2021/07/08 17:18:08 scheduler task e9888daf (flow ec27422b): unloaded list<val<.=f40368c8 35.7MiB> 35.7MiB>
2021/07/08 17:18:08 scheduler task e9888daf (flow ec27422b): unloaded val<.=35130427 35.4MiB>
2021/07/08 17:18:08 scheduler task e9888daf (flow ec27422b): unloading (try 0): successful, next state: complete
2021/07/08 17:18:08  <-  n100.r07.s060.Main.out_file ec27422b ok     exec 3m58s 35.7MiB
2021/07/08 17:18:08 n100.r07.s060.Main.out_file ec27422b n100/r07/n100.r07.s060.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:353cb6dd11813103413e59e77cc6d17d0a0183a6170790d9fcea62a2401ffe9b
	sha256:ec27422b4aff5da534cfe2549f021359bd189922ca9e9660fbeebe972661d521
	ec2-3-139-104-158.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e9888daf977837251eb24b4b93dcbff468eff6502c1db46106e32093f2e565b5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s060_output"
	    wget -O "n100.r07.s060_output/n100.r07.s060.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s060_output/n100.r07.s060.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s060_output/n100.r07.s060.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s060_output/n100.r07.s060.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s060_output/n100.r07.s060.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s060_output/n100.r07.s060.reference.fas" "n100.r07.s060_output/n100.r07.s060.fq1.fastq" "n100.r07.s060_output/n100.r07.s060.fq2.fastq" | samtools view -bS - > "n100.r07.s060_output/n100.r07.s060.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s060_output/n100.r07.s060.untrimmed.sorted.bam" "n100.r07.s060_output/n100.r07.s060.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s060_output/n100.r07.s060.untrimmed.sorted.bam" -b "n100.r07.s060_output/n100.r07.s060.primers.bed" -p "n100.r07.s060_output/n100.r07.s060.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s060_output/n100.r07.s060.trimmed.sorted.bam" "n100.r07.s060_output/n100.r07.s060.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s060_output/n100.r07.s060.reference.fas" "n100.r07.s060_output/n100.r07.s060.trimmed.sorted.bam" > "n100.r07.s060_output/n100.r07.s060.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s060_output/n100.r07.s060.reference.fas" --call-indels "n100.r07.s060_output/n100.r07.s060.trimmed.sorted.bam" > "n100.r07.s060_output/n100.r07.s060.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s060_output/n100.r07.s060.trimmed.sorted.bam" > "n100.r07.s060_output/n100.r07.s060.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s060_output/n100.r07.s060.depth.txt" "n100.r07.s060_output/n100.r07.s060.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s060_output/n100.r07.s060.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s060_output/n100.r07.s060.reference.fas" | bcftools consensus -m "n100.r07.s060_output/n100.r07.s060.low_depth.tsv" tmp.vcf.gz > "n100.r07.s060_output/n100.r07.s060.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s060_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f40368c864d81cf012e501fecbdadb30a4cc54d6fcd9e09f09bbf8fa79e98320 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=17.0MiB max=126.7MiB
	    disk mean=8.9MiB max=35.7MiB
	    tmp mean=259B max=1.0KiB
2021/07/08 17:18:08 scheduler task e2d7f8d6 (flow 904b259b): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s060.tar.gz resources {}
2021/07/08 17:18:08  ->  n100.r07.s060.Main.cp_out_file 904b259b exec extern s3://niema-test/n100/r07/n100.r07.s060.tar.gz 35.7MiB
2021/07/08 17:18:08 scheduler task 2cd48a42 (flow ab63e124): transferring output (try 0): successful, next state: unloading
2021/07/08 17:18:08 scheduler task 2cd48a42 (flow ab63e124): unloading (try 0): started
2021/07/08 17:18:08 scheduler task 2cd48a42 (flow ab63e124): unloading list<val<.=1c1e7cc9 35.7MiB> 35.7MiB>
2021/07/08 17:18:08 scheduler task 2cd48a42 (flow ab63e124): unloading val<.=d76ee65c 35.4MiB>
2021/07/08 17:18:08 scheduler task 2cd48a42 (flow ab63e124): unloading val<.=f428bde4 35.4MiB>
2021/07/08 17:18:09 scheduler task 451887f2 (flow c26b8783): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:76b2b4f5eb947cead97551dd3a0abf54c1e6345ba0314daf6329abd30c230f0a -> s3://niema-test/n100/r07/n100.r07.s043.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:18:09  <-  n100.r07.s043.Main.cp_out_file c26b8783 ok   extern 0s 35.7MiB
2021/07/08 17:18:09 scheduler task 2cd48a42 (flow ab63e124): unloaded val<.=d76ee65c 35.4MiB>
2021/07/08 17:18:09 scheduler task 2cd48a42 (flow ab63e124): unloaded list<val<.=1c1e7cc9 35.7MiB> 35.7MiB>
2021/07/08 17:18:09 scheduler task 2cd48a42 (flow ab63e124): unloaded val<.=f428bde4 35.4MiB>
2021/07/08 17:18:09 scheduler task 2cd48a42 (flow ab63e124): unloading (try 0): successful, next state: complete
2021/07/08 17:18:09  <-  n100.r07.s040.Main.out_file ab63e124 ok     exec 3m59s 35.7MiB
2021/07/08 17:18:09 n100.r07.s040.Main.out_file ab63e124 n100/r07/n100.r07.s040.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6a0b7e0c9a523888bb341f45ccc269f0605459dad19a1a114d736f4a4485ed2b
	sha256:ab63e124d35b27663a976ff3422374d1d496983ff3913058e13dd77909112d29
	ec2-3-139-104-158.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2cd48a423ff8d6203b7c3475d8a2a250a4a5c084c457c14a13a72718061ec3dd
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s040_output"
	    wget -O "n100.r07.s040_output/n100.r07.s040.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s040_output/n100.r07.s040.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s040_output/n100.r07.s040.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s040_output/n100.r07.s040.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s040_output/n100.r07.s040.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s040_output/n100.r07.s040.reference.fas" "n100.r07.s040_output/n100.r07.s040.fq1.fastq" "n100.r07.s040_output/n100.r07.s040.fq2.fastq" | samtools view -bS - > "n100.r07.s040_output/n100.r07.s040.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s040_output/n100.r07.s040.untrimmed.sorted.bam" "n100.r07.s040_output/n100.r07.s040.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s040_output/n100.r07.s040.untrimmed.sorted.bam" -b "n100.r07.s040_output/n100.r07.s040.primers.bed" -p "n100.r07.s040_output/n100.r07.s040.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s040_output/n100.r07.s040.trimmed.sorted.bam" "n100.r07.s040_output/n100.r07.s040.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s040_output/n100.r07.s040.reference.fas" "n100.r07.s040_output/n100.r07.s040.trimmed.sorted.bam" > "n100.r07.s040_output/n100.r07.s040.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s040_output/n100.r07.s040.reference.fas" --call-indels "n100.r07.s040_output/n100.r07.s040.trimmed.sorted.bam" > "n100.r07.s040_output/n100.r07.s040.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s040_output/n100.r07.s040.trimmed.sorted.bam" > "n100.r07.s040_output/n100.r07.s040.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s040_output/n100.r07.s040.depth.txt" "n100.r07.s040_output/n100.r07.s040.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s040_output/n100.r07.s040.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s040_output/n100.r07.s040.reference.fas" | bcftools consensus -m "n100.r07.s040_output/n100.r07.s040.low_depth.tsv" tmp.vcf.gz > "n100.r07.s040_output/n100.r07.s040.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s040_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:1c1e7cc9642eddc7611f5561a2db11360e507b8a4e6d4eb5292d86500d23295d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=16.7MiB max=125.3MiB
	    disk mean=8.9MiB max=35.7MiB
	    tmp mean=259B max=1.0KiB
2021/07/08 17:18:09 scheduler task 5c71a6b4 (flow 76ab9ebc): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s040.tar.gz resources {}
2021/07/08 17:18:09  ->  n100.r07.s040.Main.cp_out_file 76ab9ebc exec extern s3://niema-test/n100/r07/n100.r07.s040.tar.gz 35.7MiB
2021/07/08 17:18:09 scheduler task dddb6e6b (flow fa5b8836): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:019e4fa2a73afadec59713d55d7fc51d82caee8667386e577f2dd0edf13e99bf -> s3://niema-test/n100/r07/n100.r07.s080.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:18:09  <-  n100.r07.s080.Main.cp_out_file fa5b8836 ok   extern 0s 35.7MiB
2021/07/08 17:18:09 scheduler task e2d7f8d6 (flow 904b259b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f40368c864d81cf012e501fecbdadb30a4cc54d6fcd9e09f09bbf8fa79e98320 -> s3://niema-test/n100/r07/n100.r07.s060.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:18:09  <-  n100.r07.s060.Main.cp_out_file 904b259b ok   extern 0s 35.7MiB
2021/07/08 17:18:10 scheduler task 5c71a6b4 (flow 76ab9ebc): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:1c1e7cc9642eddc7611f5561a2db11360e507b8a4e6d4eb5292d86500d23295d -> s3://niema-test/n100/r07/n100.r07.s040.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:18:10  <-  n100.r07.s040.Main.cp_out_file 76ab9ebc ok   extern 0s 35.7MiB
2021/07/08 17:19:05 scheduler task 6c7d8d18 (flow 7d51370c): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:05 scheduler task 6c7d8d18 (flow 7d51370c): promoting objects (try 0): started
2021/07/08 17:19:05 scheduler task 6c7d8d18 (flow 7d51370c): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:05 scheduler task 6c7d8d18 (flow 7d51370c): retrieving diagnostic output (try 0): started
2021/07/08 17:19:06 scheduler task 6c7d8d18 (flow 7d51370c): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:06 scheduler task 6c7d8d18 (flow 7d51370c): retrieving result (try 0): started
2021/07/08 17:19:06 scheduler task 6c7d8d18 (flow 7d51370c): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:06 scheduler task 6c7d8d18 (flow 7d51370c): transferring output (try 0): started
2021/07/08 17:19:07 scheduler task 6c7d8d18 (flow 7d51370c): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:07 scheduler task 6c7d8d18 (flow 7d51370c): unloading (try 0): started
2021/07/08 17:19:07 scheduler task 6c7d8d18 (flow 7d51370c): unloading list<val<.=b786354b 35.7MiB> 35.7MiB>
2021/07/08 17:19:07 scheduler task 6c7d8d18 (flow 7d51370c): unloading val<.=48c18dfb 35.4MiB>
2021/07/08 17:19:07 scheduler task 6c7d8d18 (flow 7d51370c): unloading val<.=859d3709 35.4MiB>
2021/07/08 17:19:07 scheduler task 6c7d8d18 (flow 7d51370c): unloaded list<val<.=b786354b 35.7MiB> 35.7MiB>
2021/07/08 17:19:07 scheduler task 6c7d8d18 (flow 7d51370c): unloaded val<.=859d3709 35.4MiB>
2021/07/08 17:19:07 scheduler task 6c7d8d18 (flow 7d51370c): unloaded val<.=48c18dfb 35.4MiB>
2021/07/08 17:19:07 scheduler task 6c7d8d18 (flow 7d51370c): unloading (try 0): successful, next state: complete
2021/07/08 17:19:07  <-  n100.r07.s009.Main.out_file 7d51370c ok     exec 4m58s 35.7MiB
2021/07/08 17:19:07 n100.r07.s009.Main.out_file 7d51370c n100/r07/n100.r07.s009.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:bd1e9a0e40bda0dcbf100f0bc039f3e91747d91c6adf70c98cae13f5c9fbe108
	sha256:7d51370cf13f63dee90eb4c9c6e23b6389b178b4e1ca3e315c96695226c3f879
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6c7d8d189bee0e0fcad1af0c33787785549e1caa2481dc9d39dc502ba5d57dbc
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s009_output"
	    wget -O "n100.r07.s009_output/n100.r07.s009.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s009_output/n100.r07.s009.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s009_output/n100.r07.s009.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s009_output/n100.r07.s009.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s009_output/n100.r07.s009.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s009_output/n100.r07.s009.reference.fas" "n100.r07.s009_output/n100.r07.s009.fq1.fastq" "n100.r07.s009_output/n100.r07.s009.fq2.fastq" | samtools view -bS - > "n100.r07.s009_output/n100.r07.s009.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s009_output/n100.r07.s009.untrimmed.sorted.bam" "n100.r07.s009_output/n100.r07.s009.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s009_output/n100.r07.s009.untrimmed.sorted.bam" -b "n100.r07.s009_output/n100.r07.s009.primers.bed" -p "n100.r07.s009_output/n100.r07.s009.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s009_output/n100.r07.s009.trimmed.sorted.bam" "n100.r07.s009_output/n100.r07.s009.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s009_output/n100.r07.s009.reference.fas" "n100.r07.s009_output/n100.r07.s009.trimmed.sorted.bam" > "n100.r07.s009_output/n100.r07.s009.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s009_output/n100.r07.s009.reference.fas" --call-indels "n100.r07.s009_output/n100.r07.s009.trimmed.sorted.bam" > "n100.r07.s009_output/n100.r07.s009.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s009_output/n100.r07.s009.trimmed.sorted.bam" > "n100.r07.s009_output/n100.r07.s009.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s009_output/n100.r07.s009.depth.txt" "n100.r07.s009_output/n100.r07.s009.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s009_output/n100.r07.s009.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s009_output/n100.r07.s009.reference.fas" | bcftools consensus -m "n100.r07.s009_output/n100.r07.s009.low_depth.tsv" tmp.vcf.gz > "n100.r07.s009_output/n100.r07.s009.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s009_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:b786354b78603b307808d26a478338443decf80807f2a7727460624f5518e2ee 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.5MiB max=127.1MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=628B max=2.1KiB
2021/07/08 17:19:07 scheduler task 07f2ad03 (flow 37e2b3ac): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s009.tar.gz resources {}
2021/07/08 17:19:07  ->  n100.r07.s009.Main.cp_out_file 37e2b3ac exec extern s3://niema-test/n100/r07/n100.r07.s009.tar.gz 35.7MiB
2021/07/08 17:19:08 scheduler task 07f2ad03 (flow 37e2b3ac): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:b786354b78603b307808d26a478338443decf80807f2a7727460624f5518e2ee -> s3://niema-test/n100/r07/n100.r07.s009.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:08  <-  n100.r07.s009.Main.cp_out_file 37e2b3ac ok   extern 0s 35.7MiB
2021/07/08 17:19:11 scheduler task 1f5b8fb7 (flow 18bb98c1): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:11 scheduler task 1f5b8fb7 (flow 18bb98c1): promoting objects (try 0): started
2021/07/08 17:19:11 scheduler task 1f5b8fb7 (flow 18bb98c1): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:11 scheduler task 1f5b8fb7 (flow 18bb98c1): retrieving diagnostic output (try 0): started
2021/07/08 17:19:12 scheduler task 1f5b8fb7 (flow 18bb98c1): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:12 scheduler task 1f5b8fb7 (flow 18bb98c1): retrieving result (try 0): started
2021/07/08 17:19:12 scheduler task 1f5b8fb7 (flow 18bb98c1): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:12 scheduler task 1f5b8fb7 (flow 18bb98c1): transferring output (try 0): started
2021/07/08 17:19:12 scheduler task 1f5b8fb7 (flow 18bb98c1): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:12 scheduler task 1f5b8fb7 (flow 18bb98c1): unloading (try 0): started
2021/07/08 17:19:12 scheduler task 1f5b8fb7 (flow 18bb98c1): unloading list<val<.=ab8085cd 35.7MiB> 35.7MiB>
2021/07/08 17:19:12 scheduler task 1f5b8fb7 (flow 18bb98c1): unloading val<.=4120f7f3 35.4MiB>
2021/07/08 17:19:12 scheduler task 1f5b8fb7 (flow 18bb98c1): unloading val<.=fa3f6bc5 35.4MiB>
2021/07/08 17:19:12 scheduler task 1f5b8fb7 (flow 18bb98c1): unloaded list<val<.=ab8085cd 35.7MiB> 35.7MiB>
2021/07/08 17:19:12 scheduler task 1f5b8fb7 (flow 18bb98c1): unloaded val<.=fa3f6bc5 35.4MiB>
2021/07/08 17:19:12 scheduler task 1f5b8fb7 (flow 18bb98c1): unloaded val<.=4120f7f3 35.4MiB>
2021/07/08 17:19:12 scheduler task 1f5b8fb7 (flow 18bb98c1): unloading (try 0): successful, next state: complete
2021/07/08 17:19:12  <-  n100.r07.s099.Main.out_file 18bb98c1 ok     exec 5m4s 35.7MiB
2021/07/08 17:19:12 n100.r07.s099.Main.out_file 18bb98c1 n100/r07/n100.r07.s099.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e9a73e5ab5710c48865f3657f731d5caa34d78af362ad34716bdfe7c62a1115a
	sha256:18bb98c10b4bcce0c0e5dfcfc818b426ecf4adae29698bcc5f4c63947d22ee7a
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1f5b8fb76ad9ea87642c1b5df9f3d7dd0e64ff5c381374ad23a3c685e99fb91b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s099_output"
	    wget -O "n100.r07.s099_output/n100.r07.s099.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s099_output/n100.r07.s099.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s099_output/n100.r07.s099.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s099_output/n100.r07.s099.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s099_output/n100.r07.s099.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s099_output/n100.r07.s099.reference.fas" "n100.r07.s099_output/n100.r07.s099.fq1.fastq" "n100.r07.s099_output/n100.r07.s099.fq2.fastq" | samtools view -bS - > "n100.r07.s099_output/n100.r07.s099.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s099_output/n100.r07.s099.untrimmed.sorted.bam" "n100.r07.s099_output/n100.r07.s099.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s099_output/n100.r07.s099.untrimmed.sorted.bam" -b "n100.r07.s099_output/n100.r07.s099.primers.bed" -p "n100.r07.s099_output/n100.r07.s099.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s099_output/n100.r07.s099.trimmed.sorted.bam" "n100.r07.s099_output/n100.r07.s099.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s099_output/n100.r07.s099.reference.fas" "n100.r07.s099_output/n100.r07.s099.trimmed.sorted.bam" > "n100.r07.s099_output/n100.r07.s099.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s099_output/n100.r07.s099.reference.fas" --call-indels "n100.r07.s099_output/n100.r07.s099.trimmed.sorted.bam" > "n100.r07.s099_output/n100.r07.s099.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s099_output/n100.r07.s099.trimmed.sorted.bam" > "n100.r07.s099_output/n100.r07.s099.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s099_output/n100.r07.s099.depth.txt" "n100.r07.s099_output/n100.r07.s099.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s099_output/n100.r07.s099.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s099_output/n100.r07.s099.reference.fas" | bcftools consensus -m "n100.r07.s099_output/n100.r07.s099.low_depth.tsv" tmp.vcf.gz > "n100.r07.s099_output/n100.r07.s099.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s099_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:ab8085cd75379268c4f751d9c9ca9942d163ae3f6b24123ec2a520c3a24151b0 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=18.5MiB max=128.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 17:19:12 scheduler task 69dad38c (flow 6c2bcd6d): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s099.tar.gz resources {}
2021/07/08 17:19:12  ->  n100.r07.s099.Main.cp_out_file 6c2bcd6d exec extern s3://niema-test/n100/r07/n100.r07.s099.tar.gz 35.7MiB
2021/07/08 17:19:13 scheduler task 69dad38c (flow 6c2bcd6d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:ab8085cd75379268c4f751d9c9ca9942d163ae3f6b24123ec2a520c3a24151b0 -> s3://niema-test/n100/r07/n100.r07.s099.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:13  <-  n100.r07.s099.Main.cp_out_file 6c2bcd6d ok   extern 0s 35.7MiB
2021/07/08 17:19:15 scheduler task ba13af1f (flow 91ed633a): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:15 scheduler task ba13af1f (flow 91ed633a): promoting objects (try 0): started
2021/07/08 17:19:15 scheduler task ba13af1f (flow 91ed633a): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:15 scheduler task ba13af1f (flow 91ed633a): retrieving diagnostic output (try 0): started
2021/07/08 17:19:15 scheduler task ba13af1f (flow 91ed633a): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:15 scheduler task ba13af1f (flow 91ed633a): retrieving result (try 0): started
2021/07/08 17:19:15 scheduler task ba13af1f (flow 91ed633a): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:15 scheduler task ba13af1f (flow 91ed633a): transferring output (try 0): started
2021/07/08 17:19:16 scheduler task a6a27466 (flow 1d245d3d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:16 scheduler task a6a27466 (flow 1d245d3d): promoting objects (try 0): started
2021/07/08 17:19:16 scheduler task a6a27466 (flow 1d245d3d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:16 scheduler task a6a27466 (flow 1d245d3d): retrieving diagnostic output (try 0): started
2021/07/08 17:19:16 scheduler task a6a27466 (flow 1d245d3d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:16 scheduler task 46b3d1f4 (flow 74bc54ab): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:16 scheduler task a6a27466 (flow 1d245d3d): retrieving result (try 0): started
2021/07/08 17:19:16 scheduler task 46b3d1f4 (flow 74bc54ab): promoting objects (try 0): started
2021/07/08 17:19:16 scheduler task 282e35f8 (flow 081e5dc5): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:16 scheduler task 282e35f8 (flow 081e5dc5): promoting objects (try 0): started
2021/07/08 17:19:16 scheduler task a6a27466 (flow 1d245d3d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:16 scheduler task 46b3d1f4 (flow 74bc54ab): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:16 scheduler task a6a27466 (flow 1d245d3d): transferring output (try 0): started
2021/07/08 17:19:16 scheduler task 46b3d1f4 (flow 74bc54ab): retrieving diagnostic output (try 0): started
2021/07/08 17:19:16 scheduler task 282e35f8 (flow 081e5dc5): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:16 scheduler task 282e35f8 (flow 081e5dc5): retrieving diagnostic output (try 0): started
2021/07/08 17:19:16 scheduler task 164261c5 (flow 441e1d42): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:16 scheduler task 164261c5 (flow 441e1d42): promoting objects (try 0): started
2021/07/08 17:19:16 scheduler task ba13af1f (flow 91ed633a): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:16 scheduler task ba13af1f (flow 91ed633a): unloading (try 0): started
2021/07/08 17:19:16 scheduler task ba13af1f (flow 91ed633a): unloading list<val<.=a7295d6f 35.7MiB> 35.7MiB>
2021/07/08 17:19:16 scheduler task ba13af1f (flow 91ed633a): unloading val<.=2a717da2 35.4MiB>
2021/07/08 17:19:16 scheduler task ba13af1f (flow 91ed633a): unloading val<.=7750acfd 35.4MiB>
2021/07/08 17:19:16 scheduler task 46b3d1f4 (flow 74bc54ab): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:16 scheduler task 46b3d1f4 (flow 74bc54ab): retrieving result (try 0): started
2021/07/08 17:19:16 scheduler task 282e35f8 (flow 081e5dc5): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:16 scheduler task 282e35f8 (flow 081e5dc5): retrieving result (try 0): started
2021/07/08 17:19:16 scheduler task 164261c5 (flow 441e1d42): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:16 scheduler task 164261c5 (flow 441e1d42): retrieving diagnostic output (try 0): started
2021/07/08 17:19:16 scheduler task ba13af1f (flow 91ed633a): unloaded val<.=2a717da2 35.4MiB>
2021/07/08 17:19:16 scheduler task ba13af1f (flow 91ed633a): unloaded list<val<.=a7295d6f 35.7MiB> 35.7MiB>
2021/07/08 17:19:16 scheduler task ba13af1f (flow 91ed633a): unloaded val<.=7750acfd 35.4MiB>
2021/07/08 17:19:16 scheduler task ba13af1f (flow 91ed633a): unloading (try 0): successful, next state: complete
2021/07/08 17:19:16  <-  n100.r07.s063.Main.out_file 91ed633a ok     exec 5m7s 35.7MiB
2021/07/08 17:19:16 n100.r07.s063.Main.out_file 91ed633a n100/r07/n100.r07.s063.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d3cb3d76f8b101dcf1545c2c836d47400a014be0e06f2e4376b547f17b4545e2
	sha256:91ed633af9bd8d33aa36a42362e054fe961e0576b5bae8fe07612c4f3af4599b
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ba13af1f469da64df24ff7b558371ade5dfee216718eca266183c16d3e558849
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s063_output"
	    wget -O "n100.r07.s063_output/n100.r07.s063.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s063_output/n100.r07.s063.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s063_output/n100.r07.s063.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s063_output/n100.r07.s063.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s063_output/n100.r07.s063.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s063_output/n100.r07.s063.reference.fas" "n100.r07.s063_output/n100.r07.s063.fq1.fastq" "n100.r07.s063_output/n100.r07.s063.fq2.fastq" | samtools view -bS - > "n100.r07.s063_output/n100.r07.s063.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s063_output/n100.r07.s063.untrimmed.sorted.bam" "n100.r07.s063_output/n100.r07.s063.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s063_output/n100.r07.s063.untrimmed.sorted.bam" -b "n100.r07.s063_output/n100.r07.s063.primers.bed" -p "n100.r07.s063_output/n100.r07.s063.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s063_output/n100.r07.s063.trimmed.sorted.bam" "n100.r07.s063_output/n100.r07.s063.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s063_output/n100.r07.s063.reference.fas" "n100.r07.s063_output/n100.r07.s063.trimmed.sorted.bam" > "n100.r07.s063_output/n100.r07.s063.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s063_output/n100.r07.s063.reference.fas" --call-indels "n100.r07.s063_output/n100.r07.s063.trimmed.sorted.bam" > "n100.r07.s063_output/n100.r07.s063.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s063_output/n100.r07.s063.trimmed.sorted.bam" > "n100.r07.s063_output/n100.r07.s063.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s063_output/n100.r07.s063.depth.txt" "n100.r07.s063_output/n100.r07.s063.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s063_output/n100.r07.s063.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s063_output/n100.r07.s063.reference.fas" | bcftools consensus -m "n100.r07.s063_output/n100.r07.s063.low_depth.tsv" tmp.vcf.gz > "n100.r07.s063_output/n100.r07.s063.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s063_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a7295d6fab0568f937fc3d678a01bef7a1193531ae451826bb82aa5ddd37eeda 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.9MiB max=126.1MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 17:19:16 scheduler task 3af0f326 (flow 1015a6f9): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s063.tar.gz resources {}
2021/07/08 17:19:16  ->  n100.r07.s063.Main.cp_out_file 1015a6f9 exec extern s3://niema-test/n100/r07/n100.r07.s063.tar.gz 35.7MiB
2021/07/08 17:19:16 scheduler task 46b3d1f4 (flow 74bc54ab): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:16 scheduler task 46b3d1f4 (flow 74bc54ab): transferring output (try 0): started
2021/07/08 17:19:16 scheduler task 282e35f8 (flow 081e5dc5): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:16 scheduler task 282e35f8 (flow 081e5dc5): transferring output (try 0): started
2021/07/08 17:19:16 scheduler task 164261c5 (flow 441e1d42): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:16 scheduler task 164261c5 (flow 441e1d42): retrieving result (try 0): started
2021/07/08 17:19:16 scheduler task 164261c5 (flow 441e1d42): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:16 scheduler task 164261c5 (flow 441e1d42): transferring output (try 0): started
2021/07/08 17:19:16 scheduler task a6a27466 (flow 1d245d3d): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:16 scheduler task a6a27466 (flow 1d245d3d): unloading (try 0): started
2021/07/08 17:19:16 scheduler task a6a27466 (flow 1d245d3d): unloading list<val<.=0115473b 35.7MiB> 35.7MiB>
2021/07/08 17:19:16 scheduler task a6a27466 (flow 1d245d3d): unloading val<.=5d95e537 35.4MiB>
2021/07/08 17:19:16 scheduler task a6a27466 (flow 1d245d3d): unloading val<.=1c56f829 35.4MiB>
2021/07/08 17:19:16 scheduler task a6a27466 (flow 1d245d3d): unloaded list<val<.=0115473b 35.7MiB> 35.7MiB>
2021/07/08 17:19:16 scheduler task a6a27466 (flow 1d245d3d): unloaded val<.=1c56f829 35.4MiB>
2021/07/08 17:19:16 scheduler task a6a27466 (flow 1d245d3d): unloaded val<.=5d95e537 35.4MiB>
2021/07/08 17:19:16 scheduler task a6a27466 (flow 1d245d3d): unloading (try 0): successful, next state: complete
2021/07/08 17:19:16  <-  n100.r07.s100.Main.out_file 1d245d3d ok     exec 5m8s 35.7MiB
2021/07/08 17:19:16 n100.r07.s100.Main.out_file 1d245d3d n100/r07/n100.r07.s100.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1fdd03a43b8f43e841cf1cd11cc0520e4a3e47eae038fa51cd6249a42cfb78f5
	sha256:1d245d3dca30353f50498af5d3e6b2920fa7dc247d6896fc3531f4518b44ffc5
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a6a274662b9180f961931b7449c0f5e545c768915890bde387177ff3a1e059a9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s100_output"
	    wget -O "n100.r07.s100_output/n100.r07.s100.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s100_output/n100.r07.s100.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s100_output/n100.r07.s100.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s100_output/n100.r07.s100.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s100_output/n100.r07.s100.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s100_output/n100.r07.s100.reference.fas" "n100.r07.s100_output/n100.r07.s100.fq1.fastq" "n100.r07.s100_output/n100.r07.s100.fq2.fastq" | samtools view -bS - > "n100.r07.s100_output/n100.r07.s100.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s100_output/n100.r07.s100.untrimmed.sorted.bam" "n100.r07.s100_output/n100.r07.s100.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s100_output/n100.r07.s100.untrimmed.sorted.bam" -b "n100.r07.s100_output/n100.r07.s100.primers.bed" -p "n100.r07.s100_output/n100.r07.s100.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s100_output/n100.r07.s100.trimmed.sorted.bam" "n100.r07.s100_output/n100.r07.s100.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s100_output/n100.r07.s100.reference.fas" "n100.r07.s100_output/n100.r07.s100.trimmed.sorted.bam" > "n100.r07.s100_output/n100.r07.s100.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s100_output/n100.r07.s100.reference.fas" --call-indels "n100.r07.s100_output/n100.r07.s100.trimmed.sorted.bam" > "n100.r07.s100_output/n100.r07.s100.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s100_output/n100.r07.s100.trimmed.sorted.bam" > "n100.r07.s100_output/n100.r07.s100.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s100_output/n100.r07.s100.depth.txt" "n100.r07.s100_output/n100.r07.s100.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s100_output/n100.r07.s100.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s100_output/n100.r07.s100.reference.fas" | bcftools consensus -m "n100.r07.s100_output/n100.r07.s100.low_depth.tsv" tmp.vcf.gz > "n100.r07.s100_output/n100.r07.s100.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s100_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:0115473b572d35f2856b848ee50452e71c9388e1b2d814fe959c46e8ffa68e8c 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.8MiB max=125.7MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=696B max=2.1KiB
2021/07/08 17:19:16 scheduler task 4732c244 (flow d67bbd8a): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s100.tar.gz resources {}
2021/07/08 17:19:16  ->  n100.r07.s100.Main.cp_out_file d67bbd8a exec extern s3://niema-test/n100/r07/n100.r07.s100.tar.gz 35.7MiB
2021/07/08 17:19:17 scheduler task 46b3d1f4 (flow 74bc54ab): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:17 scheduler task 46b3d1f4 (flow 74bc54ab): unloading (try 0): started
2021/07/08 17:19:17 scheduler task 46b3d1f4 (flow 74bc54ab): unloading list<val<.=3d412c19 35.7MiB> 35.7MiB>
2021/07/08 17:19:17 scheduler task 46b3d1f4 (flow 74bc54ab): unloading val<.=09eb8fc6 35.4MiB>
2021/07/08 17:19:17 scheduler task 46b3d1f4 (flow 74bc54ab): unloading val<.=3dde503b 35.4MiB>
2021/07/08 17:19:17 scheduler task 282e35f8 (flow 081e5dc5): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:17 scheduler task 282e35f8 (flow 081e5dc5): unloading (try 0): started
2021/07/08 17:19:17 scheduler task 282e35f8 (flow 081e5dc5): unloading list<val<.=1a589fc9 35.7MiB> 35.7MiB>
2021/07/08 17:19:17 scheduler task 282e35f8 (flow 081e5dc5): unloading val<.=dd90be64 35.4MiB>
2021/07/08 17:19:17 scheduler task 282e35f8 (flow 081e5dc5): unloading val<.=30e5fa56 35.4MiB>
2021/07/08 17:19:17 scheduler task 46b3d1f4 (flow 74bc54ab): unloaded val<.=3dde503b 35.4MiB>
2021/07/08 17:19:17 scheduler task 46b3d1f4 (flow 74bc54ab): unloaded val<.=09eb8fc6 35.4MiB>
2021/07/08 17:19:17 scheduler task 46b3d1f4 (flow 74bc54ab): unloaded list<val<.=3d412c19 35.7MiB> 35.7MiB>
2021/07/08 17:19:17 scheduler task 46b3d1f4 (flow 74bc54ab): unloading (try 0): successful, next state: complete
2021/07/08 17:19:17  <-  n100.r07.s029.Main.out_file 74bc54ab ok     exec 5m8s 35.7MiB
2021/07/08 17:19:17 n100.r07.s029.Main.out_file 74bc54ab n100/r07/n100.r07.s029.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:52837d6e32b6bb2e982040e3805f2cce8fd30304767dcdff51738037300642b3
	sha256:74bc54ab9018cfbadebcee07cc369f071995a7641e880360bff84f54848cca0e
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/46b3d1f4de9475e80ab5f5a9f2cb7bcecc3b6e7262d9d5fd62d6e6578871c44e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s029_output"
	    wget -O "n100.r07.s029_output/n100.r07.s029.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s029_output/n100.r07.s029.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s029_output/n100.r07.s029.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s029_output/n100.r07.s029.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s029_output/n100.r07.s029.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s029_output/n100.r07.s029.reference.fas" "n100.r07.s029_output/n100.r07.s029.fq1.fastq" "n100.r07.s029_output/n100.r07.s029.fq2.fastq" | samtools view -bS - > "n100.r07.s029_output/n100.r07.s029.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s029_output/n100.r07.s029.untrimmed.sorted.bam" "n100.r07.s029_output/n100.r07.s029.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s029_output/n100.r07.s029.untrimmed.sorted.bam" -b "n100.r07.s029_output/n100.r07.s029.primers.bed" -p "n100.r07.s029_output/n100.r07.s029.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s029_output/n100.r07.s029.trimmed.sorted.bam" "n100.r07.s029_output/n100.r07.s029.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s029_output/n100.r07.s029.reference.fas" "n100.r07.s029_output/n100.r07.s029.trimmed.sorted.bam" > "n100.r07.s029_output/n100.r07.s029.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s029_output/n100.r07.s029.reference.fas" --call-indels "n100.r07.s029_output/n100.r07.s029.trimmed.sorted.bam" > "n100.r07.s029_output/n100.r07.s029.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s029_output/n100.r07.s029.trimmed.sorted.bam" > "n100.r07.s029_output/n100.r07.s029.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s029_output/n100.r07.s029.depth.txt" "n100.r07.s029_output/n100.r07.s029.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s029_output/n100.r07.s029.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s029_output/n100.r07.s029.reference.fas" | bcftools consensus -m "n100.r07.s029_output/n100.r07.s029.low_depth.tsv" tmp.vcf.gz > "n100.r07.s029_output/n100.r07.s029.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s029_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:3d412c19e27e9c1e28aa04259270ceb8c1d95744d861b27d5fdf0a491aca50ec 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.7MiB max=126.0MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.0KiB
2021/07/08 17:19:17 scheduler task 9e402fdd (flow 2a812048): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s029.tar.gz resources {}
2021/07/08 17:19:17  ->  n100.r07.s029.Main.cp_out_file 2a812048 exec extern s3://niema-test/n100/r07/n100.r07.s029.tar.gz 35.7MiB
2021/07/08 17:19:17 scheduler task 282e35f8 (flow 081e5dc5): unloaded list<val<.=1a589fc9 35.7MiB> 35.7MiB>
2021/07/08 17:19:17 scheduler task 282e35f8 (flow 081e5dc5): unloaded val<.=dd90be64 35.4MiB>
2021/07/08 17:19:17 scheduler task 282e35f8 (flow 081e5dc5): unloaded val<.=30e5fa56 35.4MiB>
2021/07/08 17:19:17 scheduler task 282e35f8 (flow 081e5dc5): unloading (try 0): successful, next state: complete
2021/07/08 17:19:17  <-  n100.r07.s094.Main.out_file 081e5dc5 ok     exec 5m8s 35.7MiB
2021/07/08 17:19:17 n100.r07.s094.Main.out_file 081e5dc5 n100/r07/n100.r07.s094.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:065c2963b7152044904e1efdd7bd5821661b1a5014a5439b29459bf8063f0f0d
	sha256:081e5dc53476f2b2de9a266284832f31e21dcab7f4b2fbea2f6223e211a0ebda
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/282e35f889ddbb2665fe9ae1e9b18e63e5eac7cd074b6905966b3400cea244a8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s094_output"
	    wget -O "n100.r07.s094_output/n100.r07.s094.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s094_output/n100.r07.s094.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s094_output/n100.r07.s094.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s094_output/n100.r07.s094.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s094_output/n100.r07.s094.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s094_output/n100.r07.s094.reference.fas" "n100.r07.s094_output/n100.r07.s094.fq1.fastq" "n100.r07.s094_output/n100.r07.s094.fq2.fastq" | samtools view -bS - > "n100.r07.s094_output/n100.r07.s094.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s094_output/n100.r07.s094.untrimmed.sorted.bam" "n100.r07.s094_output/n100.r07.s094.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s094_output/n100.r07.s094.untrimmed.sorted.bam" -b "n100.r07.s094_output/n100.r07.s094.primers.bed" -p "n100.r07.s094_output/n100.r07.s094.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s094_output/n100.r07.s094.trimmed.sorted.bam" "n100.r07.s094_output/n100.r07.s094.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s094_output/n100.r07.s094.reference.fas" "n100.r07.s094_output/n100.r07.s094.trimmed.sorted.bam" > "n100.r07.s094_output/n100.r07.s094.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s094_output/n100.r07.s094.reference.fas" --call-indels "n100.r07.s094_output/n100.r07.s094.trimmed.sorted.bam" > "n100.r07.s094_output/n100.r07.s094.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s094_output/n100.r07.s094.trimmed.sorted.bam" > "n100.r07.s094_output/n100.r07.s094.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s094_output/n100.r07.s094.depth.txt" "n100.r07.s094_output/n100.r07.s094.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s094_output/n100.r07.s094.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s094_output/n100.r07.s094.reference.fas" | bcftools consensus -m "n100.r07.s094_output/n100.r07.s094.low_depth.tsv" tmp.vcf.gz > "n100.r07.s094_output/n100.r07.s094.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s094_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:1a589fc9571351e1e0a95ce98ea542261e21c7c4f982394301c9eb4764b45629 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.5MiB max=125.5MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=878B max=2.1KiB
2021/07/08 17:19:17 scheduler task 8deb156b (flow 49e33968): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s094.tar.gz resources {}
2021/07/08 17:19:17  ->  n100.r07.s094.Main.cp_out_file 49e33968 exec extern s3://niema-test/n100/r07/n100.r07.s094.tar.gz 35.7MiB
2021/07/08 17:19:17 scheduler task 164261c5 (flow 441e1d42): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:17 scheduler task 164261c5 (flow 441e1d42): unloading (try 0): started
2021/07/08 17:19:17 scheduler task 164261c5 (flow 441e1d42): unloading list<val<.=abb2820e 35.8MiB> 35.8MiB>
2021/07/08 17:19:17 scheduler task 164261c5 (flow 441e1d42): unloading val<.=85ef23c1 35.4MiB>
2021/07/08 17:19:17 scheduler task 164261c5 (flow 441e1d42): unloading val<.=4330f9a1 35.4MiB>
2021/07/08 17:19:17 scheduler task 3af0f326 (flow 1015a6f9): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a7295d6fab0568f937fc3d678a01bef7a1193531ae451826bb82aa5ddd37eeda -> s3://niema-test/n100/r07/n100.r07.s063.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:17  <-  n100.r07.s063.Main.cp_out_file 1015a6f9 ok   extern 0s 35.7MiB
2021/07/08 17:19:17 scheduler task 164261c5 (flow 441e1d42): unloaded list<val<.=abb2820e 35.8MiB> 35.8MiB>
2021/07/08 17:19:17 scheduler task 164261c5 (flow 441e1d42): unloaded val<.=85ef23c1 35.4MiB>
2021/07/08 17:19:17 scheduler task 164261c5 (flow 441e1d42): unloaded val<.=4330f9a1 35.4MiB>
2021/07/08 17:19:17 scheduler task 164261c5 (flow 441e1d42): unloading (try 0): successful, next state: complete
2021/07/08 17:19:17  <-  n100.r07.s082.Main.out_file 441e1d42 ok     exec 5m8s 35.8MiB
2021/07/08 17:19:17 n100.r07.s082.Main.out_file 441e1d42 n100/r07/n100.r07.s082.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8bd55b9628816de79e37e240842a119a88f171e98a0bf7f7cbb82e4600a24a11
	sha256:441e1d42809de958f385d4eedc1a2135790869cb92e0d1d5e27e8061c654664f
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/164261c51aad94c53b86a2bb88b88ed2bc20b746aeadd19765b2e721e75103b7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s082_output"
	    wget -O "n100.r07.s082_output/n100.r07.s082.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s082_output/n100.r07.s082.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s082_output/n100.r07.s082.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s082_output/n100.r07.s082.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s082_output/n100.r07.s082.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s082_output/n100.r07.s082.reference.fas" "n100.r07.s082_output/n100.r07.s082.fq1.fastq" "n100.r07.s082_output/n100.r07.s082.fq2.fastq" | samtools view -bS - > "n100.r07.s082_output/n100.r07.s082.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s082_output/n100.r07.s082.untrimmed.sorted.bam" "n100.r07.s082_output/n100.r07.s082.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s082_output/n100.r07.s082.untrimmed.sorted.bam" -b "n100.r07.s082_output/n100.r07.s082.primers.bed" -p "n100.r07.s082_output/n100.r07.s082.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s082_output/n100.r07.s082.trimmed.sorted.bam" "n100.r07.s082_output/n100.r07.s082.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s082_output/n100.r07.s082.reference.fas" "n100.r07.s082_output/n100.r07.s082.trimmed.sorted.bam" > "n100.r07.s082_output/n100.r07.s082.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s082_output/n100.r07.s082.reference.fas" --call-indels "n100.r07.s082_output/n100.r07.s082.trimmed.sorted.bam" > "n100.r07.s082_output/n100.r07.s082.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s082_output/n100.r07.s082.trimmed.sorted.bam" > "n100.r07.s082_output/n100.r07.s082.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s082_output/n100.r07.s082.depth.txt" "n100.r07.s082_output/n100.r07.s082.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s082_output/n100.r07.s082.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s082_output/n100.r07.s082.reference.fas" | bcftools consensus -m "n100.r07.s082_output/n100.r07.s082.low_depth.tsv" tmp.vcf.gz > "n100.r07.s082_output/n100.r07.s082.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s082_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:abb2820ee49bd1ca125fec3a162f05b9eefa1c652a49ab54cd83cddb8713519a 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.8MiB max=124.2MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=871B max=2.0KiB
2021/07/08 17:19:17 scheduler task 1e2b8dcd (flow 5d31a569): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s082.tar.gz resources {}
2021/07/08 17:19:17  ->  n100.r07.s082.Main.cp_out_file 5d31a569 exec extern s3://niema-test/n100/r07/n100.r07.s082.tar.gz 35.8MiB
2021/07/08 17:19:17 scheduler task 4732c244 (flow d67bbd8a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:0115473b572d35f2856b848ee50452e71c9388e1b2d814fe959c46e8ffa68e8c -> s3://niema-test/n100/r07/n100.r07.s100.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:17  <-  n100.r07.s100.Main.cp_out_file d67bbd8a ok   extern 0s 35.7MiB
2021/07/08 17:19:17 scheduler task 34c0f138 (flow 806765de): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:17 scheduler task 9e402fdd (flow 2a812048): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:3d412c19e27e9c1e28aa04259270ceb8c1d95744d861b27d5fdf0a491aca50ec -> s3://niema-test/n100/r07/n100.r07.s029.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:17  <-  n100.r07.s029.Main.cp_out_file 2a812048 ok   extern 0s 35.7MiB
2021/07/08 17:19:17 scheduler task 34c0f138 (flow 806765de): promoting objects (try 0): started
2021/07/08 17:19:18 scheduler task 34c0f138 (flow 806765de): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:18 scheduler task 34c0f138 (flow 806765de): retrieving diagnostic output (try 0): started
2021/07/08 17:19:18 scheduler task 777deb41 (flow a83135ea): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:18 scheduler task 777deb41 (flow a83135ea): promoting objects (try 0): started
2021/07/08 17:19:18 scheduler task 34c0f138 (flow 806765de): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:18 scheduler task 34c0f138 (flow 806765de): retrieving result (try 0): started
2021/07/08 17:19:18 scheduler task 777deb41 (flow a83135ea): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:18 scheduler task 777deb41 (flow a83135ea): retrieving diagnostic output (try 0): started
2021/07/08 17:19:18 scheduler task 34c0f138 (flow 806765de): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:18 scheduler task 34c0f138 (flow 806765de): transferring output (try 0): started
2021/07/08 17:19:18 scheduler task 777deb41 (flow a83135ea): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:18 scheduler task 777deb41 (flow a83135ea): retrieving result (try 0): started
2021/07/08 17:19:18 scheduler task 1e2b8dcd (flow 5d31a569): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:abb2820ee49bd1ca125fec3a162f05b9eefa1c652a49ab54cd83cddb8713519a -> s3://niema-test/n100/r07/n100.r07.s082.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:19:18  <-  n100.r07.s082.Main.cp_out_file 5d31a569 ok   extern 0s 35.8MiB
2021/07/08 17:19:18 scheduler task 8deb156b (flow 49e33968): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:1a589fc9571351e1e0a95ce98ea542261e21c7c4f982394301c9eb4764b45629 -> s3://niema-test/n100/r07/n100.r07.s094.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:18  <-  n100.r07.s094.Main.cp_out_file 49e33968 ok   extern 0s 35.7MiB
2021/07/08 17:19:18 scheduler task 777deb41 (flow a83135ea): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:18 scheduler task 777deb41 (flow a83135ea): transferring output (try 0): started
2021/07/08 17:19:18 scheduler task e7923c9a (flow 2a86d1d5): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:18 scheduler task e7923c9a (flow 2a86d1d5): promoting objects (try 0): started
2021/07/08 17:19:18 scheduler task e7923c9a (flow 2a86d1d5): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:18 scheduler task e7923c9a (flow 2a86d1d5): retrieving diagnostic output (try 0): started
2021/07/08 17:19:18 scheduler task e7923c9a (flow 2a86d1d5): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:18 scheduler task e7923c9a (flow 2a86d1d5): retrieving result (try 0): started
2021/07/08 17:19:18 scheduler task e7923c9a (flow 2a86d1d5): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:18 scheduler task e7923c9a (flow 2a86d1d5): transferring output (try 0): started
2021/07/08 17:19:18 scheduler task 34c0f138 (flow 806765de): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:18 scheduler task 34c0f138 (flow 806765de): unloading (try 0): started
2021/07/08 17:19:18 scheduler task 34c0f138 (flow 806765de): unloading list<val<.=0baa208d 35.8MiB> 35.8MiB>
2021/07/08 17:19:18 scheduler task 34c0f138 (flow 806765de): unloading val<.=757efb70 35.4MiB>
2021/07/08 17:19:18 scheduler task 34c0f138 (flow 806765de): unloading val<.=be25e98d 35.4MiB>
2021/07/08 17:19:18 scheduler task 777deb41 (flow a83135ea): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:18 scheduler task 777deb41 (flow a83135ea): unloading (try 0): started
2021/07/08 17:19:18 scheduler task 777deb41 (flow a83135ea): unloading list<val<.=b9b98a32 35.7MiB> 35.7MiB>
2021/07/08 17:19:18 scheduler task 777deb41 (flow a83135ea): unloading val<.=27a0d8bc 35.4MiB>
2021/07/08 17:19:18 scheduler task 777deb41 (flow a83135ea): unloading val<.=e951aa6e 35.4MiB>
2021/07/08 17:19:18 scheduler task 34c0f138 (flow 806765de): unloaded list<val<.=0baa208d 35.8MiB> 35.8MiB>
2021/07/08 17:19:18 scheduler task 34c0f138 (flow 806765de): unloaded val<.=757efb70 35.4MiB>
2021/07/08 17:19:18 scheduler task 34c0f138 (flow 806765de): unloaded val<.=be25e98d 35.4MiB>
2021/07/08 17:19:18 scheduler task 34c0f138 (flow 806765de): unloading (try 0): successful, next state: complete
2021/07/08 17:19:18  <-  n100.r07.s028.Main.out_file 806765de ok     exec 5m9s 35.8MiB
2021/07/08 17:19:18 n100.r07.s028.Main.out_file 806765de n100/r07/n100.r07.s028.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:bdec94f0c314de80b039d9c3656e96a7fbdbccda6a01ea0652e75bdfb7080d98
	sha256:806765de947c5bc275eac2f8757c1b5ad6ef41186a60b2d2ca98aac6ef70ec28
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/34c0f138153a6ff4dfeafafdb03e384216801a41e725f9c3b19c1361adf52f41
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s028_output"
	    wget -O "n100.r07.s028_output/n100.r07.s028.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s028_output/n100.r07.s028.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s028_output/n100.r07.s028.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s028_output/n100.r07.s028.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s028_output/n100.r07.s028.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s028_output/n100.r07.s028.reference.fas" "n100.r07.s028_output/n100.r07.s028.fq1.fastq" "n100.r07.s028_output/n100.r07.s028.fq2.fastq" | samtools view -bS - > "n100.r07.s028_output/n100.r07.s028.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s028_output/n100.r07.s028.untrimmed.sorted.bam" "n100.r07.s028_output/n100.r07.s028.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s028_output/n100.r07.s028.untrimmed.sorted.bam" -b "n100.r07.s028_output/n100.r07.s028.primers.bed" -p "n100.r07.s028_output/n100.r07.s028.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s028_output/n100.r07.s028.trimmed.sorted.bam" "n100.r07.s028_output/n100.r07.s028.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s028_output/n100.r07.s028.reference.fas" "n100.r07.s028_output/n100.r07.s028.trimmed.sorted.bam" > "n100.r07.s028_output/n100.r07.s028.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s028_output/n100.r07.s028.reference.fas" --call-indels "n100.r07.s028_output/n100.r07.s028.trimmed.sorted.bam" > "n100.r07.s028_output/n100.r07.s028.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s028_output/n100.r07.s028.trimmed.sorted.bam" > "n100.r07.s028_output/n100.r07.s028.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s028_output/n100.r07.s028.depth.txt" "n100.r07.s028_output/n100.r07.s028.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s028_output/n100.r07.s028.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s028_output/n100.r07.s028.reference.fas" | bcftools consensus -m "n100.r07.s028_output/n100.r07.s028.low_depth.tsv" tmp.vcf.gz > "n100.r07.s028_output/n100.r07.s028.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s028_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:0baa208d6c505d814540157d9492a2f0f05c60a657f432fd6531b9ef363c1077 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.2MiB max=127.2MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=1.0KiB max=3.0KiB
2021/07/08 17:19:18 scheduler task 5eeef9e2 (flow 1bd116ff): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s028.tar.gz resources {}
2021/07/08 17:19:18  ->  n100.r07.s028.Main.cp_out_file 1bd116ff exec extern s3://niema-test/n100/r07/n100.r07.s028.tar.gz 35.8MiB
2021/07/08 17:19:18 scheduler task 777deb41 (flow a83135ea): unloaded val<.=e951aa6e 35.4MiB>
2021/07/08 17:19:18 scheduler task 777deb41 (flow a83135ea): unloaded list<val<.=b9b98a32 35.7MiB> 35.7MiB>
2021/07/08 17:19:18 scheduler task bb3aebb8 (flow 2ffcac3d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:18 scheduler task 777deb41 (flow a83135ea): unloaded val<.=27a0d8bc 35.4MiB>
2021/07/08 17:19:18 scheduler task 777deb41 (flow a83135ea): unloading (try 0): successful, next state: complete
2021/07/08 17:19:18 scheduler task bb3aebb8 (flow 2ffcac3d): promoting objects (try 0): started
2021/07/08 17:19:18  <-  n100.r07.s089.Main.out_file a83135ea ok     exec 5m10s 35.7MiB
2021/07/08 17:19:18 n100.r07.s089.Main.out_file a83135ea n100/r07/n100.r07.s089.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6b887ea37eab88cd80e0d6a5482a0b3555532d02e3b62cc0e98d4538df3be505
	sha256:a83135ea689baa363362b63e3f1ea0d61487776aa9863405a34bf18be4b24d0e
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/777deb4165ea337852077e9b5e76a0d3d2b0bc287e171c96a50f9be73ccb76f0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s089_output"
	    wget -O "n100.r07.s089_output/n100.r07.s089.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s089_output/n100.r07.s089.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s089_output/n100.r07.s089.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s089_output/n100.r07.s089.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s089_output/n100.r07.s089.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s089_output/n100.r07.s089.reference.fas" "n100.r07.s089_output/n100.r07.s089.fq1.fastq" "n100.r07.s089_output/n100.r07.s089.fq2.fastq" | samtools view -bS - > "n100.r07.s089_output/n100.r07.s089.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s089_output/n100.r07.s089.untrimmed.sorted.bam" "n100.r07.s089_output/n100.r07.s089.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s089_output/n100.r07.s089.untrimmed.sorted.bam" -b "n100.r07.s089_output/n100.r07.s089.primers.bed" -p "n100.r07.s089_output/n100.r07.s089.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s089_output/n100.r07.s089.trimmed.sorted.bam" "n100.r07.s089_output/n100.r07.s089.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s089_output/n100.r07.s089.reference.fas" "n100.r07.s089_output/n100.r07.s089.trimmed.sorted.bam" > "n100.r07.s089_output/n100.r07.s089.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s089_output/n100.r07.s089.reference.fas" --call-indels "n100.r07.s089_output/n100.r07.s089.trimmed.sorted.bam" > "n100.r07.s089_output/n100.r07.s089.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s089_output/n100.r07.s089.trimmed.sorted.bam" > "n100.r07.s089_output/n100.r07.s089.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s089_output/n100.r07.s089.depth.txt" "n100.r07.s089_output/n100.r07.s089.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s089_output/n100.r07.s089.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s089_output/n100.r07.s089.reference.fas" | bcftools consensus -m "n100.r07.s089_output/n100.r07.s089.low_depth.tsv" tmp.vcf.gz > "n100.r07.s089_output/n100.r07.s089.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s089_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:b9b98a324bdbba38b0ac5e73223f40ae10f2bea2c9a50594d907e2fde1816cbc 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.5MiB max=125.4MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=702B max=2.1KiB
2021/07/08 17:19:18 scheduler task d97e2f1e (flow d97e213f): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s089.tar.gz resources {}
2021/07/08 17:19:18  ->  n100.r07.s089.Main.cp_out_file d97e213f exec extern s3://niema-test/n100/r07/n100.r07.s089.tar.gz 35.7MiB
2021/07/08 17:19:18 scheduler task bb3aebb8 (flow 2ffcac3d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:19 scheduler task bb3aebb8 (flow 2ffcac3d): retrieving diagnostic output (try 0): started
2021/07/08 17:19:19 scheduler task 51d530dd (flow 9adf3c04): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:19 scheduler task 51d530dd (flow 9adf3c04): promoting objects (try 0): started
2021/07/08 17:19:19 scheduler task bb3aebb8 (flow 2ffcac3d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:19 scheduler task bb3aebb8 (flow 2ffcac3d): retrieving result (try 0): started
2021/07/08 17:19:19 scheduler task 51d530dd (flow 9adf3c04): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:19 scheduler task 51d530dd (flow 9adf3c04): retrieving diagnostic output (try 0): started
2021/07/08 17:19:19 scheduler task fb62fd75 (flow 91d65e11): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:19 scheduler task fb62fd75 (flow 91d65e11): promoting objects (try 0): started
2021/07/08 17:19:19 scheduler task bb3aebb8 (flow 2ffcac3d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:19 scheduler task e7923c9a (flow 2a86d1d5): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:19 scheduler task fb62fd75 (flow 91d65e11): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:19 scheduler task 51d530dd (flow 9adf3c04): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:19 scheduler task bb3aebb8 (flow 2ffcac3d): transferring output (try 0): started
2021/07/08 17:19:19 scheduler task e7923c9a (flow 2a86d1d5): unloading (try 0): started
2021/07/08 17:19:19 scheduler task e7923c9a (flow 2a86d1d5): unloading list<val<.=a51b4641 35.7MiB> 35.7MiB>
2021/07/08 17:19:19 scheduler task e7923c9a (flow 2a86d1d5): unloading val<.=f9df0cf9 35.4MiB>
2021/07/08 17:19:19 scheduler task e7923c9a (flow 2a86d1d5): unloading val<.=99114633 35.4MiB>
2021/07/08 17:19:19 scheduler task 51d530dd (flow 9adf3c04): retrieving result (try 0): started
2021/07/08 17:19:19 scheduler task fb62fd75 (flow 91d65e11): retrieving diagnostic output (try 0): started
2021/07/08 17:19:19 scheduler task e7923c9a (flow 2a86d1d5): unloaded list<val<.=a51b4641 35.7MiB> 35.7MiB>
2021/07/08 17:19:19 scheduler task e7923c9a (flow 2a86d1d5): unloaded val<.=99114633 35.4MiB>
2021/07/08 17:19:19 scheduler task e7923c9a (flow 2a86d1d5): unloaded val<.=f9df0cf9 35.4MiB>
2021/07/08 17:19:19 scheduler task e7923c9a (flow 2a86d1d5): unloading (try 0): successful, next state: complete
2021/07/08 17:19:19 scheduler task 51d530dd (flow 9adf3c04): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:19  <-  n100.r07.s073.Main.out_file 2a86d1d5 ok     exec 5m10s 35.7MiB
2021/07/08 17:19:19 n100.r07.s073.Main.out_file 2a86d1d5 n100/r07/n100.r07.s073.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a2c486502c1618f1a5d730beb25d61717e2c0909011c3add0225a6ced0a711d2
	sha256:2a86d1d5c8a78ea3a5386cae626ae5d364bad2be6aeb6ece49eee34a33753d08
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e7923c9af69eb00e6e05cf9a58053698c3c8e4dedfb2f78d6486269918c13346
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s073_output"
	    wget -O "n100.r07.s073_output/n100.r07.s073.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s073_output/n100.r07.s073.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s073_output/n100.r07.s073.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s073_output/n100.r07.s073.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s073_output/n100.r07.s073.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s073_output/n100.r07.s073.reference.fas" "n100.r07.s073_output/n100.r07.s073.fq1.fastq" "n100.r07.s073_output/n100.r07.s073.fq2.fastq" | samtools view -bS - > "n100.r07.s073_output/n100.r07.s073.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s073_output/n100.r07.s073.untrimmed.sorted.bam" "n100.r07.s073_output/n100.r07.s073.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s073_output/n100.r07.s073.untrimmed.sorted.bam" -b "n100.r07.s073_output/n100.r07.s073.primers.bed" -p "n100.r07.s073_output/n100.r07.s073.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s073_output/n100.r07.s073.trimmed.sorted.bam" "n100.r07.s073_output/n100.r07.s073.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s073_output/n100.r07.s073.reference.fas" "n100.r07.s073_output/n100.r07.s073.trimmed.sorted.bam" > "n100.r07.s073_output/n100.r07.s073.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s073_output/n100.r07.s073.reference.fas" --call-indels "n100.r07.s073_output/n100.r07.s073.trimmed.sorted.bam" > "n100.r07.s073_output/n100.r07.s073.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s073_output/n100.r07.s073.trimmed.sorted.bam" > "n100.r07.s073_output/n100.r07.s073.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s073_output/n100.r07.s073.depth.txt" "n100.r07.s073_output/n100.r07.s073.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s073_output/n100.r07.s073.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s073_output/n100.r07.s073.reference.fas" | bcftools consensus -m "n100.r07.s073_output/n100.r07.s073.low_depth.tsv" tmp.vcf.gz > "n100.r07.s073_output/n100.r07.s073.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s073_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a51b4641137c937b2768cc336cd86bc5949e1ef01bcffb790632d8dfafe4f276 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.7MiB max=127.2MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.0KiB
2021/07/08 17:19:19 scheduler task e7a70113 (flow 98201341): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s073.tar.gz resources {}
2021/07/08 17:19:19  ->  n100.r07.s073.Main.cp_out_file 98201341 exec extern s3://niema-test/n100/r07/n100.r07.s073.tar.gz 35.7MiB
2021/07/08 17:19:19 scheduler task fb62fd75 (flow 91d65e11): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:19 scheduler task 51d530dd (flow 9adf3c04): transferring output (try 0): started
2021/07/08 17:19:19 scheduler task fb62fd75 (flow 91d65e11): retrieving result (try 0): started
2021/07/08 17:19:19 scheduler task fb62fd75 (flow 91d65e11): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:19 scheduler task fb62fd75 (flow 91d65e11): transferring output (try 0): started
2021/07/08 17:19:19 scheduler task 5eeef9e2 (flow 1bd116ff): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:0baa208d6c505d814540157d9492a2f0f05c60a657f432fd6531b9ef363c1077 -> s3://niema-test/n100/r07/n100.r07.s028.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:19:19  <-  n100.r07.s028.Main.cp_out_file 1bd116ff ok   extern 0s 35.8MiB
2021/07/08 17:19:19 scheduler task d97e2f1e (flow d97e213f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:b9b98a324bdbba38b0ac5e73223f40ae10f2bea2c9a50594d907e2fde1816cbc -> s3://niema-test/n100/r07/n100.r07.s089.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:19  <-  n100.r07.s089.Main.cp_out_file d97e213f ok   extern 0s 35.7MiB
2021/07/08 17:19:19 scheduler task 151a9227 (flow b10d32be): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:19 scheduler task 151a9227 (flow b10d32be): promoting objects (try 0): started
2021/07/08 17:19:19 scheduler task 151a9227 (flow b10d32be): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:19 scheduler task 151a9227 (flow b10d32be): retrieving diagnostic output (try 0): started
2021/07/08 17:19:19 scheduler task bb3aebb8 (flow 2ffcac3d): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:19 scheduler task bb3aebb8 (flow 2ffcac3d): unloading (try 0): started
2021/07/08 17:19:19 scheduler task bb3aebb8 (flow 2ffcac3d): unloading list<val<.=64280475 35.7MiB> 35.7MiB>
2021/07/08 17:19:19 scheduler task bb3aebb8 (flow 2ffcac3d): unloading val<.=2ab24ea4 35.4MiB>
2021/07/08 17:19:19 scheduler task bb3aebb8 (flow 2ffcac3d): unloading val<.=8aaec201 35.4MiB>
2021/07/08 17:19:19 scheduler task 151a9227 (flow b10d32be): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:19 scheduler task 151a9227 (flow b10d32be): retrieving result (try 0): started
2021/07/08 17:19:19 scheduler task bb3aebb8 (flow 2ffcac3d): unloaded list<val<.=64280475 35.7MiB> 35.7MiB>
2021/07/08 17:19:19 scheduler task 51d530dd (flow 9adf3c04): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:19 scheduler task bb3aebb8 (flow 2ffcac3d): unloaded val<.=2ab24ea4 35.4MiB>
2021/07/08 17:19:19 scheduler task bb3aebb8 (flow 2ffcac3d): unloaded val<.=8aaec201 35.4MiB>
2021/07/08 17:19:19 scheduler task bb3aebb8 (flow 2ffcac3d): unloading (try 0): successful, next state: complete
2021/07/08 17:19:20 scheduler task 51d530dd (flow 9adf3c04): unloading (try 0): started
2021/07/08 17:19:20 scheduler task 51d530dd (flow 9adf3c04): unloading list<val<.=8b540e94 35.7MiB> 35.7MiB>
2021/07/08 17:19:20 scheduler task 51d530dd (flow 9adf3c04): unloading val<.=c2a3550c 35.4MiB>
2021/07/08 17:19:20 scheduler task 51d530dd (flow 9adf3c04): unloading val<.=62ed5ffd 35.4MiB>
2021/07/08 17:19:20 scheduler task 151a9227 (flow b10d32be): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:20 scheduler task fb62fd75 (flow 91d65e11): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:20  <-  n100.r07.s088.Main.out_file 2ffcac3d ok     exec 5m11s 35.7MiB
2021/07/08 17:19:20 n100.r07.s088.Main.out_file 2ffcac3d n100/r07/n100.r07.s088.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:efa806bc5e1a5ccdc7c54aa1dbbdbd5e9940587c2a7f31da7f4a5e0c9d74cda0
	sha256:2ffcac3d26508e93be4292b6df3f84aa07aed65afdb278d9ce393d77eff82336
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bb3aebb85c1344ca516855fdcdd4effe1c0ab49a2e31a7501349d122431dfaae
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s088_output"
	    wget -O "n100.r07.s088_output/n100.r07.s088.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s088_output/n100.r07.s088.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s088_output/n100.r07.s088.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s088_output/n100.r07.s088.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s088_output/n100.r07.s088.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s088_output/n100.r07.s088.reference.fas" "n100.r07.s088_output/n100.r07.s088.fq1.fastq" "n100.r07.s088_output/n100.r07.s088.fq2.fastq" | samtools view -bS - > "n100.r07.s088_output/n100.r07.s088.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s088_output/n100.r07.s088.untrimmed.sorted.bam" "n100.r07.s088_output/n100.r07.s088.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s088_output/n100.r07.s088.untrimmed.sorted.bam" -b "n100.r07.s088_output/n100.r07.s088.primers.bed" -p "n100.r07.s088_output/n100.r07.s088.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s088_output/n100.r07.s088.trimmed.sorted.bam" "n100.r07.s088_output/n100.r07.s088.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s088_output/n100.r07.s088.reference.fas" "n100.r07.s088_output/n100.r07.s088.trimmed.sorted.bam" > "n100.r07.s088_output/n100.r07.s088.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s088_output/n100.r07.s088.reference.fas" --call-indels "n100.r07.s088_output/n100.r07.s088.trimmed.sorted.bam" > "n100.r07.s088_output/n100.r07.s088.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s088_output/n100.r07.s088.trimmed.sorted.bam" > "n100.r07.s088_output/n100.r07.s088.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s088_output/n100.r07.s088.depth.txt" "n100.r07.s088_output/n100.r07.s088.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s088_output/n100.r07.s088.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s088_output/n100.r07.s088.reference.fas" | bcftools consensus -m "n100.r07.s088_output/n100.r07.s088.low_depth.tsv" tmp.vcf.gz > "n100.r07.s088_output/n100.r07.s088.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s088_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:642804757dacdfe6a7fbfa02499adfe19992e18a8ba6a752637886fda8757720 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.4MiB max=128.2MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=872B max=2.0KiB
2021/07/08 17:19:20 scheduler task 69d6a376 (flow ed8de20f): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s088.tar.gz resources {}
2021/07/08 17:19:20  ->  n100.r07.s088.Main.cp_out_file ed8de20f exec extern s3://niema-test/n100/r07/n100.r07.s088.tar.gz 35.7MiB
2021/07/08 17:19:20 scheduler task 151a9227 (flow b10d32be): transferring output (try 0): started
2021/07/08 17:19:20 scheduler task 9299bf20 (flow db3942f3): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:20 scheduler task fb62fd75 (flow 91d65e11): unloading (try 0): started
2021/07/08 17:19:20 scheduler task fb62fd75 (flow 91d65e11): unloading list<val<.=9d076001 35.7MiB> 35.7MiB>
2021/07/08 17:19:20 scheduler task fb62fd75 (flow 91d65e11): unloading val<.=7878e91a 35.4MiB>
2021/07/08 17:19:20 scheduler task fb62fd75 (flow 91d65e11): unloading val<.=bc338827 35.4MiB>
2021/07/08 17:19:20 scheduler task 9299bf20 (flow db3942f3): promoting objects (try 0): started
2021/07/08 17:19:20 scheduler task e7a70113 (flow 98201341): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a51b4641137c937b2768cc336cd86bc5949e1ef01bcffb790632d8dfafe4f276 -> s3://niema-test/n100/r07/n100.r07.s073.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:20  <-  n100.r07.s073.Main.cp_out_file 98201341 ok   extern 0s 35.7MiB
2021/07/08 17:19:20 scheduler task 51d530dd (flow 9adf3c04): unloaded list<val<.=8b540e94 35.7MiB> 35.7MiB>
2021/07/08 17:19:20 scheduler task 51d530dd (flow 9adf3c04): unloaded val<.=c2a3550c 35.4MiB>
2021/07/08 17:19:20 scheduler task 51d530dd (flow 9adf3c04): unloaded val<.=62ed5ffd 35.4MiB>
2021/07/08 17:19:20 scheduler task 51d530dd (flow 9adf3c04): unloading (try 0): successful, next state: complete
2021/07/08 17:19:20  <-  n100.r07.s081.Main.out_file 9adf3c04 ok     exec 5m10s 35.7MiB
2021/07/08 17:19:20 n100.r07.s081.Main.out_file 9adf3c04 n100/r07/n100.r07.s081.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1bafc5abdf4a34fded438196ead24b433e29a1f4cba67a9e6e9fdaf4a0761b3c
	sha256:9adf3c04e8faa00be5dc1e0579cba926b7e57ba83b72a90d9191c3585d0605ef
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/51d530dde2df52d2faed4abade23ccca3980f8587e0c7b197d7702bc88ef16de
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s081_output"
	    wget -O "n100.r07.s081_output/n100.r07.s081.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s081_output/n100.r07.s081.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s081_output/n100.r07.s081.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s081_output/n100.r07.s081.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s081_output/n100.r07.s081.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s081_output/n100.r07.s081.reference.fas" "n100.r07.s081_output/n100.r07.s081.fq1.fastq" "n100.r07.s081_output/n100.r07.s081.fq2.fastq" | samtools view -bS - > "n100.r07.s081_output/n100.r07.s081.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s081_output/n100.r07.s081.untrimmed.sorted.bam" "n100.r07.s081_output/n100.r07.s081.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s081_output/n100.r07.s081.untrimmed.sorted.bam" -b "n100.r07.s081_output/n100.r07.s081.primers.bed" -p "n100.r07.s081_output/n100.r07.s081.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s081_output/n100.r07.s081.trimmed.sorted.bam" "n100.r07.s081_output/n100.r07.s081.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s081_output/n100.r07.s081.reference.fas" "n100.r07.s081_output/n100.r07.s081.trimmed.sorted.bam" > "n100.r07.s081_output/n100.r07.s081.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s081_output/n100.r07.s081.reference.fas" --call-indels "n100.r07.s081_output/n100.r07.s081.trimmed.sorted.bam" > "n100.r07.s081_output/n100.r07.s081.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s081_output/n100.r07.s081.trimmed.sorted.bam" > "n100.r07.s081_output/n100.r07.s081.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s081_output/n100.r07.s081.depth.txt" "n100.r07.s081_output/n100.r07.s081.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s081_output/n100.r07.s081.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s081_output/n100.r07.s081.reference.fas" | bcftools consensus -m "n100.r07.s081_output/n100.r07.s081.low_depth.tsv" tmp.vcf.gz > "n100.r07.s081_output/n100.r07.s081.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s081_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:8b540e94a1cb63f26e36100f190855b2dadbefa5130de79db57c4a71d725e0d3 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.3MiB max=124.8MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=872B max=2.0KiB
2021/07/08 17:19:20 scheduler task 97fe8255 (flow b707cce1): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s081.tar.gz resources {}
2021/07/08 17:19:20  ->  n100.r07.s081.Main.cp_out_file b707cce1 exec extern s3://niema-test/n100/r07/n100.r07.s081.tar.gz 35.7MiB
2021/07/08 17:19:20 scheduler task fb62fd75 (flow 91d65e11): unloaded list<val<.=9d076001 35.7MiB> 35.7MiB>
2021/07/08 17:19:20 scheduler task 9299bf20 (flow db3942f3): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:20 scheduler task fb62fd75 (flow 91d65e11): unloaded val<.=bc338827 35.4MiB>
2021/07/08 17:19:20 scheduler task fb62fd75 (flow 91d65e11): unloaded val<.=7878e91a 35.4MiB>
2021/07/08 17:19:20 scheduler task fb62fd75 (flow 91d65e11): unloading (try 0): successful, next state: complete
2021/07/08 17:19:20 scheduler task 9299bf20 (flow db3942f3): retrieving diagnostic output (try 0): started
2021/07/08 17:19:20  <-  n100.r07.s074.Main.out_file 91d65e11 ok     exec 5m11s 35.7MiB
2021/07/08 17:19:20 n100.r07.s074.Main.out_file 91d65e11 n100/r07/n100.r07.s074.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:78e88b9360ff405924bbe4c5a4218eb8e73d5ff2d7f3ddb12454da574e65f894
	sha256:91d65e11203707f8495e3881f5a9192d5ed0b2cce8af4bb7354d16dc2a62c753
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fb62fd752738fdaee3b34ed4115aa1a750fa10056c1c15cf3e95966c66a9e3d5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s074_output"
	    wget -O "n100.r07.s074_output/n100.r07.s074.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s074_output/n100.r07.s074.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s074_output/n100.r07.s074.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s074_output/n100.r07.s074.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s074_output/n100.r07.s074.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s074_output/n100.r07.s074.reference.fas" "n100.r07.s074_output/n100.r07.s074.fq1.fastq" "n100.r07.s074_output/n100.r07.s074.fq2.fastq" | samtools view -bS - > "n100.r07.s074_output/n100.r07.s074.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s074_output/n100.r07.s074.untrimmed.sorted.bam" "n100.r07.s074_output/n100.r07.s074.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s074_output/n100.r07.s074.untrimmed.sorted.bam" -b "n100.r07.s074_output/n100.r07.s074.primers.bed" -p "n100.r07.s074_output/n100.r07.s074.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s074_output/n100.r07.s074.trimmed.sorted.bam" "n100.r07.s074_output/n100.r07.s074.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s074_output/n100.r07.s074.reference.fas" "n100.r07.s074_output/n100.r07.s074.trimmed.sorted.bam" > "n100.r07.s074_output/n100.r07.s074.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s074_output/n100.r07.s074.reference.fas" --call-indels "n100.r07.s074_output/n100.r07.s074.trimmed.sorted.bam" > "n100.r07.s074_output/n100.r07.s074.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s074_output/n100.r07.s074.trimmed.sorted.bam" > "n100.r07.s074_output/n100.r07.s074.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s074_output/n100.r07.s074.depth.txt" "n100.r07.s074_output/n100.r07.s074.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s074_output/n100.r07.s074.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s074_output/n100.r07.s074.reference.fas" | bcftools consensus -m "n100.r07.s074_output/n100.r07.s074.low_depth.tsv" tmp.vcf.gz > "n100.r07.s074_output/n100.r07.s074.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s074_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9d076001f68687766af190afe49e209fc3e876373952d88f6edc3eab7c370f9f 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.5MiB max=125.7MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=877B max=2.1KiB
2021/07/08 17:19:20 scheduler task 028b98a7 (flow 8cd11273): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s074.tar.gz resources {}
2021/07/08 17:19:20  ->  n100.r07.s074.Main.cp_out_file 8cd11273 exec extern s3://niema-test/n100/r07/n100.r07.s074.tar.gz 35.7MiB
2021/07/08 17:19:20 scheduler task 3a850123 (flow f498b7de): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:20 scheduler task 3a850123 (flow f498b7de): promoting objects (try 0): started
2021/07/08 17:19:20 scheduler task 9299bf20 (flow db3942f3): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:20 scheduler task 9299bf20 (flow db3942f3): retrieving result (try 0): started
2021/07/08 17:19:20 scheduler task 3a850123 (flow f498b7de): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:20 scheduler task 3a850123 (flow f498b7de): retrieving diagnostic output (try 0): started
2021/07/08 17:19:20 scheduler task 9299bf20 (flow db3942f3): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:20 scheduler task 9299bf20 (flow db3942f3): transferring output (try 0): started
2021/07/08 17:19:20 scheduler task 3a850123 (flow f498b7de): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:20 scheduler task 3a850123 (flow f498b7de): retrieving result (try 0): started
2021/07/08 17:19:20 scheduler task 1dc90817 (flow cb2c7a28): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:20 scheduler task 1dc90817 (flow cb2c7a28): promoting objects (try 0): started
2021/07/08 17:19:20 scheduler task 3a850123 (flow f498b7de): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:20 scheduler task 1dc90817 (flow cb2c7a28): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:20 scheduler task 3a850123 (flow f498b7de): transferring output (try 0): started
2021/07/08 17:19:20 scheduler task 1dc90817 (flow cb2c7a28): retrieving diagnostic output (try 0): started
2021/07/08 17:19:20 scheduler task 151a9227 (flow b10d32be): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:20 scheduler task 151a9227 (flow b10d32be): unloading (try 0): started
2021/07/08 17:19:20 scheduler task 151a9227 (flow b10d32be): unloading val<.=abdc8796 35.4MiB>
2021/07/08 17:19:20 scheduler task 151a9227 (flow b10d32be): unloading val<.=f8ab4e0b 35.4MiB>
2021/07/08 17:19:20 scheduler task 151a9227 (flow b10d32be): unloading list<val<.=33b8da70 35.7MiB> 35.7MiB>
2021/07/08 17:19:20 scheduler task 1dc90817 (flow cb2c7a28): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:20 scheduler task 1dc90817 (flow cb2c7a28): retrieving result (try 0): started
2021/07/08 17:19:20 scheduler task 151a9227 (flow b10d32be): unloaded val<.=abdc8796 35.4MiB>
2021/07/08 17:19:20 scheduler task 151a9227 (flow b10d32be): unloaded val<.=f8ab4e0b 35.4MiB>
2021/07/08 17:19:20 scheduler task 151a9227 (flow b10d32be): unloaded list<val<.=33b8da70 35.7MiB> 35.7MiB>
2021/07/08 17:19:20 scheduler task 151a9227 (flow b10d32be): unloading (try 0): successful, next state: complete
2021/07/08 17:19:20  <-  n100.r07.s098.Main.out_file b10d32be ok     exec 5m12s 35.7MiB
2021/07/08 17:19:20 n100.r07.s098.Main.out_file b10d32be n100/r07/n100.r07.s098.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f94b7c7c69576eb87b5f46478dc08e788306c222e314d55001d22e7e294b0603
	sha256:b10d32bea950e157b9ba77381d690dbb135d93c5c2eb6b56d0c9eb8fb9ecc959
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/151a9227fa9602bebf288a6139bdfdc6567d32ea20c9fbb52ce2a09690d534f7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s098_output"
	    wget -O "n100.r07.s098_output/n100.r07.s098.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s098_output/n100.r07.s098.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s098_output/n100.r07.s098.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s098_output/n100.r07.s098.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s098_output/n100.r07.s098.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s098_output/n100.r07.s098.reference.fas" "n100.r07.s098_output/n100.r07.s098.fq1.fastq" "n100.r07.s098_output/n100.r07.s098.fq2.fastq" | samtools view -bS - > "n100.r07.s098_output/n100.r07.s098.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s098_output/n100.r07.s098.untrimmed.sorted.bam" "n100.r07.s098_output/n100.r07.s098.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s098_output/n100.r07.s098.untrimmed.sorted.bam" -b "n100.r07.s098_output/n100.r07.s098.primers.bed" -p "n100.r07.s098_output/n100.r07.s098.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s098_output/n100.r07.s098.trimmed.sorted.bam" "n100.r07.s098_output/n100.r07.s098.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s098_output/n100.r07.s098.reference.fas" "n100.r07.s098_output/n100.r07.s098.trimmed.sorted.bam" > "n100.r07.s098_output/n100.r07.s098.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s098_output/n100.r07.s098.reference.fas" --call-indels "n100.r07.s098_output/n100.r07.s098.trimmed.sorted.bam" > "n100.r07.s098_output/n100.r07.s098.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s098_output/n100.r07.s098.trimmed.sorted.bam" > "n100.r07.s098_output/n100.r07.s098.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s098_output/n100.r07.s098.depth.txt" "n100.r07.s098_output/n100.r07.s098.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s098_output/n100.r07.s098.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s098_output/n100.r07.s098.reference.fas" | bcftools consensus -m "n100.r07.s098_output/n100.r07.s098.low_depth.tsv" tmp.vcf.gz > "n100.r07.s098_output/n100.r07.s098.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s098_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:33b8da70fd6e49c8b78ae634e53ccd5eb1b76b41b30f0ada959e1bd4b7ede68b 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.0MiB max=128.0MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=878B max=2.1KiB
2021/07/08 17:19:20 scheduler task f6c2e73f (flow 369a5f63): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s098.tar.gz resources {}
2021/07/08 17:19:20  ->  n100.r07.s098.Main.cp_out_file 369a5f63 exec extern s3://niema-test/n100/r07/n100.r07.s098.tar.gz 35.7MiB
2021/07/08 17:19:20 scheduler task 1dc90817 (flow cb2c7a28): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:20 scheduler task 1dc90817 (flow cb2c7a28): transferring output (try 0): started
2021/07/08 17:19:20 scheduler task 69d6a376 (flow ed8de20f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:642804757dacdfe6a7fbfa02499adfe19992e18a8ba6a752637886fda8757720 -> s3://niema-test/n100/r07/n100.r07.s088.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:20  <-  n100.r07.s088.Main.cp_out_file ed8de20f ok   extern 0s 35.7MiB
2021/07/08 17:19:20 scheduler task 97fe8255 (flow b707cce1): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:8b540e94a1cb63f26e36100f190855b2dadbefa5130de79db57c4a71d725e0d3 -> s3://niema-test/n100/r07/n100.r07.s081.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:20  <-  n100.r07.s081.Main.cp_out_file b707cce1 ok   extern 0s 35.7MiB
2021/07/08 17:19:20 scheduler task 9299bf20 (flow db3942f3): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:20 scheduler task 9299bf20 (flow db3942f3): unloading (try 0): started
2021/07/08 17:19:20 scheduler task 9299bf20 (flow db3942f3): unloading list<val<.=2d3b9d0b 35.8MiB> 35.8MiB>
2021/07/08 17:19:20 scheduler task 9299bf20 (flow db3942f3): unloading val<.=d09f29d0 35.4MiB>
2021/07/08 17:19:20 scheduler task 9299bf20 (flow db3942f3): unloading val<.=9047c8ca 35.4MiB>
2021/07/08 17:19:21 scheduler task 9299bf20 (flow db3942f3): unloaded val<.=9047c8ca 35.4MiB>
2021/07/08 17:19:21 scheduler task 9299bf20 (flow db3942f3): unloaded list<val<.=2d3b9d0b 35.8MiB> 35.8MiB>
2021/07/08 17:19:21 scheduler task 9299bf20 (flow db3942f3): unloaded val<.=d09f29d0 35.4MiB>
2021/07/08 17:19:21 scheduler task 9299bf20 (flow db3942f3): unloading (try 0): successful, next state: complete
2021/07/08 17:19:21  <-  n100.r07.s056.Main.out_file db3942f3 ok     exec 5m11s 35.8MiB
2021/07/08 17:19:21 n100.r07.s056.Main.out_file db3942f3 n100/r07/n100.r07.s056.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ca5876fd3428a298a7357be9f635092d53f9354868adb20fd7689387780bc9d0
	sha256:db3942f33ff914cb09d5ae70b9f05047cabae2e0262e46344755e49f1c9a7a6c
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9299bf200a5c01f57485e56c767ddcc0944bc932129f5ea92e3e6856b0a42e46
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s056_output"
	    wget -O "n100.r07.s056_output/n100.r07.s056.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s056_output/n100.r07.s056.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s056_output/n100.r07.s056.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s056_output/n100.r07.s056.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s056_output/n100.r07.s056.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s056_output/n100.r07.s056.reference.fas" "n100.r07.s056_output/n100.r07.s056.fq1.fastq" "n100.r07.s056_output/n100.r07.s056.fq2.fastq" | samtools view -bS - > "n100.r07.s056_output/n100.r07.s056.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s056_output/n100.r07.s056.untrimmed.sorted.bam" "n100.r07.s056_output/n100.r07.s056.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s056_output/n100.r07.s056.untrimmed.sorted.bam" -b "n100.r07.s056_output/n100.r07.s056.primers.bed" -p "n100.r07.s056_output/n100.r07.s056.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s056_output/n100.r07.s056.trimmed.sorted.bam" "n100.r07.s056_output/n100.r07.s056.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s056_output/n100.r07.s056.reference.fas" "n100.r07.s056_output/n100.r07.s056.trimmed.sorted.bam" > "n100.r07.s056_output/n100.r07.s056.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s056_output/n100.r07.s056.reference.fas" --call-indels "n100.r07.s056_output/n100.r07.s056.trimmed.sorted.bam" > "n100.r07.s056_output/n100.r07.s056.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s056_output/n100.r07.s056.trimmed.sorted.bam" > "n100.r07.s056_output/n100.r07.s056.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s056_output/n100.r07.s056.depth.txt" "n100.r07.s056_output/n100.r07.s056.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s056_output/n100.r07.s056.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s056_output/n100.r07.s056.reference.fas" | bcftools consensus -m "n100.r07.s056_output/n100.r07.s056.low_depth.tsv" tmp.vcf.gz > "n100.r07.s056_output/n100.r07.s056.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s056_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:2d3b9d0b65364529dd0d577ddae0ba32028ee26e5706561e520fdece31eb32a0 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.4MiB max=128.3MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=870B max=2.0KiB
2021/07/08 17:19:21 scheduler task 101ce413 (flow cdf26921): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s056.tar.gz resources {}
2021/07/08 17:19:21  ->  n100.r07.s056.Main.cp_out_file cdf26921 exec extern s3://niema-test/n100/r07/n100.r07.s056.tar.gz 35.8MiB
2021/07/08 17:19:21 scheduler task 3a850123 (flow f498b7de): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:21 scheduler task 3a850123 (flow f498b7de): unloading (try 0): started
2021/07/08 17:19:21 scheduler task 3a850123 (flow f498b7de): unloading list<val<.=1da2ec95 35.8MiB> 35.8MiB>
2021/07/08 17:19:21 scheduler task 3a850123 (flow f498b7de): unloading val<.=01684b42 35.4MiB>
2021/07/08 17:19:21 scheduler task 3a850123 (flow f498b7de): unloading val<.=85958612 35.4MiB>
2021/07/08 17:19:21 scheduler task 2ba58d45 (flow 1463162b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:21 scheduler task 2ba58d45 (flow 1463162b): promoting objects (try 0): started
2021/07/08 17:19:21 scheduler task 3a850123 (flow f498b7de): unloaded list<val<.=1da2ec95 35.8MiB> 35.8MiB>
2021/07/08 17:19:21 scheduler task 3a850123 (flow f498b7de): unloaded val<.=85958612 35.4MiB>
2021/07/08 17:19:21 scheduler task 3a850123 (flow f498b7de): unloaded val<.=01684b42 35.4MiB>
2021/07/08 17:19:21 scheduler task 3a850123 (flow f498b7de): unloading (try 0): successful, next state: complete
2021/07/08 17:19:21  <-  n100.r07.s003.Main.out_file f498b7de ok     exec 5m11s 35.8MiB
2021/07/08 17:19:21 n100.r07.s003.Main.out_file f498b7de n100/r07/n100.r07.s003.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f5c222c62be56bcc53e9ef594065c04848a13b9564751664b7b7e67031920f57
	sha256:f498b7dee68226b40229ce997e85c10445a0b35a9dd2b904f19f536618c4956e
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3a85012320b52ae7d9df08aacfb04afb8caf5504da5637c2f21fcea1db5266a6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s003_output"
	    wget -O "n100.r07.s003_output/n100.r07.s003.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s003_output/n100.r07.s003.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s003_output/n100.r07.s003.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s003_output/n100.r07.s003.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s003_output/n100.r07.s003.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s003_output/n100.r07.s003.reference.fas" "n100.r07.s003_output/n100.r07.s003.fq1.fastq" "n100.r07.s003_output/n100.r07.s003.fq2.fastq" | samtools view -bS - > "n100.r07.s003_output/n100.r07.s003.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s003_output/n100.r07.s003.untrimmed.sorted.bam" "n100.r07.s003_output/n100.r07.s003.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s003_output/n100.r07.s003.untrimmed.sorted.bam" -b "n100.r07.s003_output/n100.r07.s003.primers.bed" -p "n100.r07.s003_output/n100.r07.s003.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s003_output/n100.r07.s003.trimmed.sorted.bam" "n100.r07.s003_output/n100.r07.s003.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s003_output/n100.r07.s003.reference.fas" "n100.r07.s003_output/n100.r07.s003.trimmed.sorted.bam" > "n100.r07.s003_output/n100.r07.s003.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s003_output/n100.r07.s003.reference.fas" --call-indels "n100.r07.s003_output/n100.r07.s003.trimmed.sorted.bam" > "n100.r07.s003_output/n100.r07.s003.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s003_output/n100.r07.s003.trimmed.sorted.bam" > "n100.r07.s003_output/n100.r07.s003.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s003_output/n100.r07.s003.depth.txt" "n100.r07.s003_output/n100.r07.s003.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s003_output/n100.r07.s003.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s003_output/n100.r07.s003.reference.fas" | bcftools consensus -m "n100.r07.s003_output/n100.r07.s003.low_depth.tsv" tmp.vcf.gz > "n100.r07.s003_output/n100.r07.s003.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s003_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:1da2ec95e46bb2ad5784dea5e22637c9c73e5f5aa24c8c67a57d2d0f56673e32 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=18.8MiB max=127.6MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=1.0KiB max=3.0KiB
2021/07/08 17:19:21 scheduler task a379cb38 (flow d44ef1e6): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s003.tar.gz resources {}
2021/07/08 17:19:21  ->  n100.r07.s003.Main.cp_out_file d44ef1e6 exec extern s3://niema-test/n100/r07/n100.r07.s003.tar.gz 35.8MiB
2021/07/08 17:19:21 scheduler task 2ba58d45 (flow 1463162b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:21 scheduler task 2ba58d45 (flow 1463162b): retrieving diagnostic output (try 0): started
2021/07/08 17:19:21 scheduler task 1dc90817 (flow cb2c7a28): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:21 scheduler task 1dc90817 (flow cb2c7a28): unloading (try 0): started
2021/07/08 17:19:21 scheduler task 1dc90817 (flow cb2c7a28): unloading list<val<.=58d66057 35.7MiB> 35.7MiB>
2021/07/08 17:19:21 scheduler task 1dc90817 (flow cb2c7a28): unloading val<.=c4258675 35.4MiB>
2021/07/08 17:19:21 scheduler task 1dc90817 (flow cb2c7a28): unloading val<.=4faa52e9 35.4MiB>
2021/07/08 17:19:21 scheduler task 028b98a7 (flow 8cd11273): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9d076001f68687766af190afe49e209fc3e876373952d88f6edc3eab7c370f9f -> s3://niema-test/n100/r07/n100.r07.s074.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:21  <-  n100.r07.s074.Main.cp_out_file 8cd11273 ok   extern 0s 35.7MiB
2021/07/08 17:19:21 scheduler task 2ba58d45 (flow 1463162b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:21 scheduler task 2ba58d45 (flow 1463162b): retrieving result (try 0): started
2021/07/08 17:19:21 scheduler task 1dc90817 (flow cb2c7a28): unloaded list<val<.=58d66057 35.7MiB> 35.7MiB>
2021/07/08 17:19:21 scheduler task 1dc90817 (flow cb2c7a28): unloaded val<.=4faa52e9 35.4MiB>
2021/07/08 17:19:21 scheduler task 1dc90817 (flow cb2c7a28): unloaded val<.=c4258675 35.4MiB>
2021/07/08 17:19:21 scheduler task 1dc90817 (flow cb2c7a28): unloading (try 0): successful, next state: complete
2021/07/08 17:19:21  <-  n100.r07.s059.Main.out_file cb2c7a28 ok     exec 5m12s 35.7MiB
2021/07/08 17:19:21 n100.r07.s059.Main.out_file cb2c7a28 n100/r07/n100.r07.s059.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:63ab1deda5a427873755db40595c1a4e203c039af0f6742ce29102eefad3e27c
	sha256:cb2c7a28f9b6d5fd14cf38526fed9cf605fc9863fdd9903cff1a161aca0118cc
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1dc90817db49cbb39d5d329056443a7fb97d3ebaef34228700262715bb6cec48
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s059_output"
	    wget -O "n100.r07.s059_output/n100.r07.s059.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s059_output/n100.r07.s059.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s059_output/n100.r07.s059.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s059_output/n100.r07.s059.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s059_output/n100.r07.s059.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s059_output/n100.r07.s059.reference.fas" "n100.r07.s059_output/n100.r07.s059.fq1.fastq" "n100.r07.s059_output/n100.r07.s059.fq2.fastq" | samtools view -bS - > "n100.r07.s059_output/n100.r07.s059.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s059_output/n100.r07.s059.untrimmed.sorted.bam" "n100.r07.s059_output/n100.r07.s059.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s059_output/n100.r07.s059.untrimmed.sorted.bam" -b "n100.r07.s059_output/n100.r07.s059.primers.bed" -p "n100.r07.s059_output/n100.r07.s059.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s059_output/n100.r07.s059.trimmed.sorted.bam" "n100.r07.s059_output/n100.r07.s059.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s059_output/n100.r07.s059.reference.fas" "n100.r07.s059_output/n100.r07.s059.trimmed.sorted.bam" > "n100.r07.s059_output/n100.r07.s059.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s059_output/n100.r07.s059.reference.fas" --call-indels "n100.r07.s059_output/n100.r07.s059.trimmed.sorted.bam" > "n100.r07.s059_output/n100.r07.s059.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s059_output/n100.r07.s059.trimmed.sorted.bam" > "n100.r07.s059_output/n100.r07.s059.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s059_output/n100.r07.s059.depth.txt" "n100.r07.s059_output/n100.r07.s059.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s059_output/n100.r07.s059.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s059_output/n100.r07.s059.reference.fas" | bcftools consensus -m "n100.r07.s059_output/n100.r07.s059.low_depth.tsv" tmp.vcf.gz > "n100.r07.s059_output/n100.r07.s059.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s059_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:58d66057e555ae567fdb079168ece4cd4685638731b9655fab3cf5cd009bef17 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.5MiB max=127.8MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 17:19:21 scheduler task b65a6a8d (flow 9c99f072): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s059.tar.gz resources {}
2021/07/08 17:19:21  ->  n100.r07.s059.Main.cp_out_file 9c99f072 exec extern s3://niema-test/n100/r07/n100.r07.s059.tar.gz 35.7MiB
2021/07/08 17:19:21 scheduler task 5a053160 (flow 556ae154): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:21 scheduler task 2ba58d45 (flow 1463162b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:21 scheduler task 5a053160 (flow 556ae154): promoting objects (try 0): started
2021/07/08 17:19:21 scheduler task 2ba58d45 (flow 1463162b): transferring output (try 0): started
2021/07/08 17:19:21 scheduler task f6c2e73f (flow 369a5f63): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:33b8da70fd6e49c8b78ae634e53ccd5eb1b76b41b30f0ada959e1bd4b7ede68b -> s3://niema-test/n100/r07/n100.r07.s098.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:21  <-  n100.r07.s098.Main.cp_out_file 369a5f63 ok   extern 0s 35.7MiB
2021/07/08 17:19:21 scheduler task 5a053160 (flow 556ae154): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:21 scheduler task 5a053160 (flow 556ae154): retrieving diagnostic output (try 0): started
2021/07/08 17:19:21 scheduler task 5a053160 (flow 556ae154): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:21 scheduler task 5a053160 (flow 556ae154): retrieving result (try 0): started
2021/07/08 17:19:21 scheduler task 5a053160 (flow 556ae154): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:21 scheduler task 5a053160 (flow 556ae154): transferring output (try 0): started
2021/07/08 17:19:21 scheduler task 101ce413 (flow cdf26921): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:2d3b9d0b65364529dd0d577ddae0ba32028ee26e5706561e520fdece31eb32a0 -> s3://niema-test/n100/r07/n100.r07.s056.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:19:21  <-  n100.r07.s056.Main.cp_out_file cdf26921 ok   extern 0s 35.8MiB
2021/07/08 17:19:21 scheduler task a379cb38 (flow d44ef1e6): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:1da2ec95e46bb2ad5784dea5e22637c9c73e5f5aa24c8c67a57d2d0f56673e32 -> s3://niema-test/n100/r07/n100.r07.s003.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:19:21  <-  n100.r07.s003.Main.cp_out_file d44ef1e6 ok   extern 0s 35.8MiB
2021/07/08 17:19:21 scheduler task b65a6a8d (flow 9c99f072): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:58d66057e555ae567fdb079168ece4cd4685638731b9655fab3cf5cd009bef17 -> s3://niema-test/n100/r07/n100.r07.s059.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:21  <-  n100.r07.s059.Main.cp_out_file 9c99f072 ok   extern 0s 35.7MiB
2021/07/08 17:19:22 scheduler task 2ba58d45 (flow 1463162b): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:22 scheduler task 5a053160 (flow 556ae154): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:22 scheduler task 2ba58d45 (flow 1463162b): unloading (try 0): started
2021/07/08 17:19:22 scheduler task 2ba58d45 (flow 1463162b): unloading list<val<.=6821ee6c 35.7MiB> 35.7MiB>
2021/07/08 17:19:22 scheduler task 2ba58d45 (flow 1463162b): unloading val<.=f237cc2d 35.4MiB>
2021/07/08 17:19:22 scheduler task 2ba58d45 (flow 1463162b): unloading val<.=f991d5a5 35.4MiB>
2021/07/08 17:19:22 scheduler task 5a053160 (flow 556ae154): unloading (try 0): started
2021/07/08 17:19:22 scheduler task 5a053160 (flow 556ae154): unloading list<val<.=ca49ccdf 35.7MiB> 35.7MiB>
2021/07/08 17:19:22 scheduler task 5a053160 (flow 556ae154): unloading val<.=f7a92daa 35.4MiB>
2021/07/08 17:19:22 scheduler task 5a053160 (flow 556ae154): unloading val<.=12ce7e20 35.4MiB>
2021/07/08 17:19:22 scheduler task 2ba58d45 (flow 1463162b): unloaded val<.=f237cc2d 35.4MiB>
2021/07/08 17:19:22 scheduler task 2ba58d45 (flow 1463162b): unloaded val<.=f991d5a5 35.4MiB>
2021/07/08 17:19:22 scheduler task 2ba58d45 (flow 1463162b): unloaded list<val<.=6821ee6c 35.7MiB> 35.7MiB>
2021/07/08 17:19:22 scheduler task 2ba58d45 (flow 1463162b): unloading (try 0): successful, next state: complete
2021/07/08 17:19:22 scheduler task 5a053160 (flow 556ae154): unloaded val<.=f7a92daa 35.4MiB>
2021/07/08 17:19:22 scheduler task 5a053160 (flow 556ae154): unloaded list<val<.=ca49ccdf 35.7MiB> 35.7MiB>
2021/07/08 17:19:22 scheduler task 5a053160 (flow 556ae154): unloaded val<.=12ce7e20 35.4MiB>
2021/07/08 17:19:22 scheduler task 5a053160 (flow 556ae154): unloading (try 0): successful, next state: complete
2021/07/08 17:19:22  <-  n100.r07.s093.Main.out_file 1463162b ok     exec 5m13s 35.7MiB
2021/07/08 17:19:22 n100.r07.s093.Main.out_file 1463162b n100/r07/n100.r07.s093.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d9490a9a6ba8b76ec9d3a613be41f48bae6a17af34bb0e1512cd4808938375a8
	sha256:1463162b1d982ee5362171896599d2913b64da99f9960ac8880d89def14f40f9
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2ba58d45c72c217bedb30784c55930b38a5da5a271b658760c854b2d663f4ed4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s093_output"
	    wget -O "n100.r07.s093_output/n100.r07.s093.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s093_output/n100.r07.s093.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s093_output/n100.r07.s093.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s093_output/n100.r07.s093.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s093_output/n100.r07.s093.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s093_output/n100.r07.s093.reference.fas" "n100.r07.s093_output/n100.r07.s093.fq1.fastq" "n100.r07.s093_output/n100.r07.s093.fq2.fastq" | samtools view -bS - > "n100.r07.s093_output/n100.r07.s093.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s093_output/n100.r07.s093.untrimmed.sorted.bam" "n100.r07.s093_output/n100.r07.s093.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s093_output/n100.r07.s093.untrimmed.sorted.bam" -b "n100.r07.s093_output/n100.r07.s093.primers.bed" -p "n100.r07.s093_output/n100.r07.s093.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s093_output/n100.r07.s093.trimmed.sorted.bam" "n100.r07.s093_output/n100.r07.s093.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s093_output/n100.r07.s093.reference.fas" "n100.r07.s093_output/n100.r07.s093.trimmed.sorted.bam" > "n100.r07.s093_output/n100.r07.s093.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s093_output/n100.r07.s093.reference.fas" --call-indels "n100.r07.s093_output/n100.r07.s093.trimmed.sorted.bam" > "n100.r07.s093_output/n100.r07.s093.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s093_output/n100.r07.s093.trimmed.sorted.bam" > "n100.r07.s093_output/n100.r07.s093.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s093_output/n100.r07.s093.depth.txt" "n100.r07.s093_output/n100.r07.s093.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s093_output/n100.r07.s093.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s093_output/n100.r07.s093.reference.fas" | bcftools consensus -m "n100.r07.s093_output/n100.r07.s093.low_depth.tsv" tmp.vcf.gz > "n100.r07.s093_output/n100.r07.s093.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s093_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:6821ee6c3e9cf3afce1a6f056f5b3658e23ff90e93352b082eed86c88d35aa5a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.2MiB max=125.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=874B max=2.1KiB
2021/07/08 17:19:22 scheduler task 09c697b1 (flow 6a58ba9b): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s093.tar.gz resources {}
2021/07/08 17:19:22  ->  n100.r07.s093.Main.cp_out_file 6a58ba9b exec extern s3://niema-test/n100/r07/n100.r07.s093.tar.gz 35.7MiB
2021/07/08 17:19:22  <-  n100.r07.s015.Main.out_file 556ae154 ok     exec 5m13s 35.7MiB
2021/07/08 17:19:22 n100.r07.s015.Main.out_file 556ae154 n100/r07/n100.r07.s015.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:52fbb07392ac7cb00e498c56a9ca65661b505af26f4e7b633b926960b0163d0b
	sha256:556ae154a61acc677607879377dc353d4929991abe884c2be30f228a7fef14dd
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5a0531600f3c8803eebb26f1e5f358279eb7b792a73f8cc8c0b98470ac02dc32
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s015_output"
	    wget -O "n100.r07.s015_output/n100.r07.s015.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s015_output/n100.r07.s015.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s015_output/n100.r07.s015.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s015_output/n100.r07.s015.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s015_output/n100.r07.s015.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s015_output/n100.r07.s015.reference.fas" "n100.r07.s015_output/n100.r07.s015.fq1.fastq" "n100.r07.s015_output/n100.r07.s015.fq2.fastq" | samtools view -bS - > "n100.r07.s015_output/n100.r07.s015.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s015_output/n100.r07.s015.untrimmed.sorted.bam" "n100.r07.s015_output/n100.r07.s015.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s015_output/n100.r07.s015.untrimmed.sorted.bam" -b "n100.r07.s015_output/n100.r07.s015.primers.bed" -p "n100.r07.s015_output/n100.r07.s015.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s015_output/n100.r07.s015.trimmed.sorted.bam" "n100.r07.s015_output/n100.r07.s015.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s015_output/n100.r07.s015.reference.fas" "n100.r07.s015_output/n100.r07.s015.trimmed.sorted.bam" > "n100.r07.s015_output/n100.r07.s015.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s015_output/n100.r07.s015.reference.fas" --call-indels "n100.r07.s015_output/n100.r07.s015.trimmed.sorted.bam" > "n100.r07.s015_output/n100.r07.s015.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s015_output/n100.r07.s015.trimmed.sorted.bam" > "n100.r07.s015_output/n100.r07.s015.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s015_output/n100.r07.s015.depth.txt" "n100.r07.s015_output/n100.r07.s015.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s015_output/n100.r07.s015.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s015_output/n100.r07.s015.reference.fas" | bcftools consensus -m "n100.r07.s015_output/n100.r07.s015.low_depth.tsv" tmp.vcf.gz > "n100.r07.s015_output/n100.r07.s015.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s015_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:ca49ccdf62150008eb8445dd66772e55fdb3a2a9ab76af823cf133a5c5283d50 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.7MiB max=126.4MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=872B max=2.0KiB
2021/07/08 17:19:22 scheduler task e1dcb5d1 (flow 022ba706): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s015.tar.gz resources {}
2021/07/08 17:19:22  ->  n100.r07.s015.Main.cp_out_file 022ba706 exec extern s3://niema-test/n100/r07/n100.r07.s015.tar.gz 35.7MiB
2021/07/08 17:19:22 scheduler task cbb63d8b (flow 12c709ba): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:22 scheduler task cbb63d8b (flow 12c709ba): promoting objects (try 0): started
2021/07/08 17:19:22 scheduler task cbb63d8b (flow 12c709ba): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:22 scheduler task cbb63d8b (flow 12c709ba): retrieving diagnostic output (try 0): started
2021/07/08 17:19:22 scheduler task e1dcb5d1 (flow 022ba706): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:ca49ccdf62150008eb8445dd66772e55fdb3a2a9ab76af823cf133a5c5283d50 -> s3://niema-test/n100/r07/n100.r07.s015.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:22  <-  n100.r07.s015.Main.cp_out_file 022ba706 ok   extern 0s 35.7MiB
2021/07/08 17:19:22 scheduler task 09c697b1 (flow 6a58ba9b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:6821ee6c3e9cf3afce1a6f056f5b3658e23ff90e93352b082eed86c88d35aa5a -> s3://niema-test/n100/r07/n100.r07.s093.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:22  <-  n100.r07.s093.Main.cp_out_file 6a58ba9b ok   extern 0s 35.7MiB
2021/07/08 17:19:23 scheduler task cbb63d8b (flow 12c709ba): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:23 scheduler task cbb63d8b (flow 12c709ba): retrieving result (try 0): started
2021/07/08 17:19:23 scheduler task cbb63d8b (flow 12c709ba): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:23 scheduler task cbb63d8b (flow 12c709ba): transferring output (try 0): started
2021/07/08 17:19:23 scheduler task 36d6431d (flow 589a2296): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:23 scheduler task 36d6431d (flow 589a2296): promoting objects (try 0): started
2021/07/08 17:19:23 scheduler task cbb63d8b (flow 12c709ba): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:23 scheduler task cbb63d8b (flow 12c709ba): unloading (try 0): started
2021/07/08 17:19:23 scheduler task cbb63d8b (flow 12c709ba): unloading list<val<.=11aed960 35.7MiB> 35.7MiB>
2021/07/08 17:19:23 scheduler task cbb63d8b (flow 12c709ba): unloading val<.=8f1c55f9 35.4MiB>
2021/07/08 17:19:23 scheduler task cbb63d8b (flow 12c709ba): unloading val<.=90ff8c07 35.4MiB>
2021/07/08 17:19:23 scheduler task 36d6431d (flow 589a2296): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:23 scheduler task 36d6431d (flow 589a2296): retrieving diagnostic output (try 0): started
2021/07/08 17:19:23 scheduler task cbb63d8b (flow 12c709ba): unloaded val<.=8f1c55f9 35.4MiB>
2021/07/08 17:19:23 scheduler task cbb63d8b (flow 12c709ba): unloaded list<val<.=11aed960 35.7MiB> 35.7MiB>
2021/07/08 17:19:23 scheduler task cbb63d8b (flow 12c709ba): unloaded val<.=90ff8c07 35.4MiB>
2021/07/08 17:19:23 scheduler task cbb63d8b (flow 12c709ba): unloading (try 0): successful, next state: complete
2021/07/08 17:19:23  <-  n100.r07.s086.Main.out_file 12c709ba ok     exec 5m15s 35.7MiB
2021/07/08 17:19:23 n100.r07.s086.Main.out_file 12c709ba n100/r07/n100.r07.s086.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c91f75f724cc2e487986972e090c87d680bafbbfae3d5a2e6814ceac25e1b27d
	sha256:12c709babe44a919792a637f396510d30550b74271a95c2e4ba0405254b76108
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cbb63d8ba13a9b0db4edbb593687caff822731c3ac8b7db05798b4b22fb145ff
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s086_output"
	    wget -O "n100.r07.s086_output/n100.r07.s086.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s086_output/n100.r07.s086.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s086_output/n100.r07.s086.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s086_output/n100.r07.s086.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s086_output/n100.r07.s086.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s086_output/n100.r07.s086.reference.fas" "n100.r07.s086_output/n100.r07.s086.fq1.fastq" "n100.r07.s086_output/n100.r07.s086.fq2.fastq" | samtools view -bS - > "n100.r07.s086_output/n100.r07.s086.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s086_output/n100.r07.s086.untrimmed.sorted.bam" "n100.r07.s086_output/n100.r07.s086.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s086_output/n100.r07.s086.untrimmed.sorted.bam" -b "n100.r07.s086_output/n100.r07.s086.primers.bed" -p "n100.r07.s086_output/n100.r07.s086.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s086_output/n100.r07.s086.trimmed.sorted.bam" "n100.r07.s086_output/n100.r07.s086.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s086_output/n100.r07.s086.reference.fas" "n100.r07.s086_output/n100.r07.s086.trimmed.sorted.bam" > "n100.r07.s086_output/n100.r07.s086.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s086_output/n100.r07.s086.reference.fas" --call-indels "n100.r07.s086_output/n100.r07.s086.trimmed.sorted.bam" > "n100.r07.s086_output/n100.r07.s086.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s086_output/n100.r07.s086.trimmed.sorted.bam" > "n100.r07.s086_output/n100.r07.s086.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s086_output/n100.r07.s086.depth.txt" "n100.r07.s086_output/n100.r07.s086.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s086_output/n100.r07.s086.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s086_output/n100.r07.s086.reference.fas" | bcftools consensus -m "n100.r07.s086_output/n100.r07.s086.low_depth.tsv" tmp.vcf.gz > "n100.r07.s086_output/n100.r07.s086.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s086_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:11aed960f852d861d19fd510cd7a51ca7ee58089be9c6e6ef123cf3aa710a89d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.1MiB max=127.2MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=695B max=2.0KiB
2021/07/08 17:19:23 scheduler task e52f6939 (flow f92b04bb): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s086.tar.gz resources {}
2021/07/08 17:19:23  ->  n100.r07.s086.Main.cp_out_file f92b04bb exec extern s3://niema-test/n100/r07/n100.r07.s086.tar.gz 35.7MiB
2021/07/08 17:19:23 scheduler task 36d6431d (flow 589a2296): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:23 scheduler task 36d6431d (flow 589a2296): retrieving result (try 0): started
2021/07/08 17:19:23 scheduler task 36d6431d (flow 589a2296): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:23 scheduler task 36d6431d (flow 589a2296): transferring output (try 0): started
2021/07/08 17:19:24 scheduler task 36d6431d (flow 589a2296): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:24 scheduler task 36d6431d (flow 589a2296): unloading (try 0): started
2021/07/08 17:19:24 scheduler task 36d6431d (flow 589a2296): unloading list<val<.=f6b754b5 35.7MiB> 35.7MiB>
2021/07/08 17:19:24 scheduler task 36d6431d (flow 589a2296): unloading val<.=6ee717c7 35.4MiB>
2021/07/08 17:19:24 scheduler task 36d6431d (flow 589a2296): unloading val<.=95736b85 35.4MiB>
2021/07/08 17:19:24 scheduler task 2cc05ef0 (flow 78f39472): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:24 scheduler task 2cc05ef0 (flow 78f39472): promoting objects (try 0): started
2021/07/08 17:19:24 scheduler task 36d6431d (flow 589a2296): unloaded list<val<.=f6b754b5 35.7MiB> 35.7MiB>
2021/07/08 17:19:24 scheduler task 36d6431d (flow 589a2296): unloaded val<.=95736b85 35.4MiB>
2021/07/08 17:19:24 scheduler task 36d6431d (flow 589a2296): unloaded val<.=6ee717c7 35.4MiB>
2021/07/08 17:19:24 scheduler task 36d6431d (flow 589a2296): unloading (try 0): successful, next state: complete
2021/07/08 17:19:24  <-  n100.r07.s036.Main.out_file 589a2296 ok     exec 5m14s 35.7MiB
2021/07/08 17:19:24 n100.r07.s036.Main.out_file 589a2296 n100/r07/n100.r07.s036.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1bc9b8580d00111c5a373ae30a28a3eb5afbf625a4cb38e5ad17bbade6b4478a
	sha256:589a22965af777c29cd6abc5622a3e474bd4b57aa40f22c8f6bbe3d4fecf19e8
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/36d6431daacb75d08e01d49365ffc66de9b08309e882d96714bdbfe44ca2ca98
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s036_output"
	    wget -O "n100.r07.s036_output/n100.r07.s036.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s036_output/n100.r07.s036.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s036_output/n100.r07.s036.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s036_output/n100.r07.s036.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s036_output/n100.r07.s036.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s036_output/n100.r07.s036.reference.fas" "n100.r07.s036_output/n100.r07.s036.fq1.fastq" "n100.r07.s036_output/n100.r07.s036.fq2.fastq" | samtools view -bS - > "n100.r07.s036_output/n100.r07.s036.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s036_output/n100.r07.s036.untrimmed.sorted.bam" "n100.r07.s036_output/n100.r07.s036.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s036_output/n100.r07.s036.untrimmed.sorted.bam" -b "n100.r07.s036_output/n100.r07.s036.primers.bed" -p "n100.r07.s036_output/n100.r07.s036.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s036_output/n100.r07.s036.trimmed.sorted.bam" "n100.r07.s036_output/n100.r07.s036.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s036_output/n100.r07.s036.reference.fas" "n100.r07.s036_output/n100.r07.s036.trimmed.sorted.bam" > "n100.r07.s036_output/n100.r07.s036.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s036_output/n100.r07.s036.reference.fas" --call-indels "n100.r07.s036_output/n100.r07.s036.trimmed.sorted.bam" > "n100.r07.s036_output/n100.r07.s036.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s036_output/n100.r07.s036.trimmed.sorted.bam" > "n100.r07.s036_output/n100.r07.s036.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s036_output/n100.r07.s036.depth.txt" "n100.r07.s036_output/n100.r07.s036.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s036_output/n100.r07.s036.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s036_output/n100.r07.s036.reference.fas" | bcftools consensus -m "n100.r07.s036_output/n100.r07.s036.low_depth.tsv" tmp.vcf.gz > "n100.r07.s036_output/n100.r07.s036.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s036_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f6b754b50e92100496838a4869319e3696fb9b9ddc402f1208943fdf5e54ede8 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.8MiB max=130.0MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=859B max=2.0KiB
2021/07/08 17:19:24 scheduler task 09287f89 (flow 8a721ded): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s036.tar.gz resources {}
2021/07/08 17:19:24  ->  n100.r07.s036.Main.cp_out_file 8a721ded exec extern s3://niema-test/n100/r07/n100.r07.s036.tar.gz 35.7MiB
2021/07/08 17:19:24 scheduler task 2cc05ef0 (flow 78f39472): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:24 scheduler task 2cc05ef0 (flow 78f39472): retrieving diagnostic output (try 0): started
2021/07/08 17:19:24 scheduler task e52f6939 (flow f92b04bb): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:11aed960f852d861d19fd510cd7a51ca7ee58089be9c6e6ef123cf3aa710a89d -> s3://niema-test/n100/r07/n100.r07.s086.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:24  <-  n100.r07.s086.Main.cp_out_file f92b04bb ok   extern 0s 35.7MiB
2021/07/08 17:19:24 scheduler task 2cc05ef0 (flow 78f39472): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:24 scheduler task 2cc05ef0 (flow 78f39472): retrieving result (try 0): started
2021/07/08 17:19:24 scheduler task ac285b56 (flow d679cd61): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:24 scheduler task ac285b56 (flow d679cd61): promoting objects (try 0): started
2021/07/08 17:19:24 scheduler task 3fa58d8b (flow 461bf7dc): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:24 scheduler task ac285b56 (flow d679cd61): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:24 scheduler task 2cc05ef0 (flow 78f39472): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:24 scheduler task 3fa58d8b (flow 461bf7dc): promoting objects (try 0): started
2021/07/08 17:19:24 scheduler task ac285b56 (flow d679cd61): retrieving diagnostic output (try 0): started
2021/07/08 17:19:24 scheduler task 2cc05ef0 (flow 78f39472): transferring output (try 0): started
2021/07/08 17:19:24 scheduler task 3fa58d8b (flow 461bf7dc): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:24 scheduler task 3fa58d8b (flow 461bf7dc): retrieving diagnostic output (try 0): started
2021/07/08 17:19:24 scheduler task ac285b56 (flow d679cd61): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:24 scheduler task ac285b56 (flow d679cd61): retrieving result (try 0): started
2021/07/08 17:19:24 scheduler task 3fa58d8b (flow 461bf7dc): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:24 scheduler task ac285b56 (flow d679cd61): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:24 scheduler task 3fa58d8b (flow 461bf7dc): retrieving result (try 0): started
2021/07/08 17:19:24 scheduler task ac285b56 (flow d679cd61): transferring output (try 0): started
2021/07/08 17:19:25 scheduler task 3fa58d8b (flow 461bf7dc): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:25 scheduler task 3fa58d8b (flow 461bf7dc): transferring output (try 0): started
2021/07/08 17:19:25 scheduler task 2cc05ef0 (flow 78f39472): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:25 scheduler task 2cc05ef0 (flow 78f39472): unloading (try 0): started
2021/07/08 17:19:25 scheduler task 2cc05ef0 (flow 78f39472): unloading list<val<.=49f58351 35.7MiB> 35.7MiB>
2021/07/08 17:19:25 scheduler task 2cc05ef0 (flow 78f39472): unloading val<.=be168e49 35.4MiB>
2021/07/08 17:19:25 scheduler task 2cc05ef0 (flow 78f39472): unloading val<.=2df8e733 35.4MiB>
2021/07/08 17:19:25 scheduler task 09287f89 (flow 8a721ded): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f6b754b50e92100496838a4869319e3696fb9b9ddc402f1208943fdf5e54ede8 -> s3://niema-test/n100/r07/n100.r07.s036.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:25  <-  n100.r07.s036.Main.cp_out_file 8a721ded ok   extern 0s 35.7MiB
2021/07/08 17:19:25 scheduler task 2cc05ef0 (flow 78f39472): unloaded list<val<.=49f58351 35.7MiB> 35.7MiB>
2021/07/08 17:19:25 scheduler task 2cc05ef0 (flow 78f39472): unloaded val<.=be168e49 35.4MiB>
2021/07/08 17:19:25 scheduler task 2cc05ef0 (flow 78f39472): unloaded val<.=2df8e733 35.4MiB>
2021/07/08 17:19:25 scheduler task 2cc05ef0 (flow 78f39472): unloading (try 0): successful, next state: complete
2021/07/08 17:19:25  <-  n100.r07.s048.Main.out_file 78f39472 ok     exec 5m16s 35.7MiB
2021/07/08 17:19:25 n100.r07.s048.Main.out_file 78f39472 n100/r07/n100.r07.s048.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:bdee24fe374131999289d9a22c7cac23d2c9f230954bb261f2ad9d666dc98687
	sha256:78f394726c909aa1ac8a95706dbb0e1132cc240105a40829283b70ef37521900
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2cc05ef0b588619028d88e8a41a8b6ad8b1716e359b99602800814a97f0187d0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s048_output"
	    wget -O "n100.r07.s048_output/n100.r07.s048.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s048_output/n100.r07.s048.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s048_output/n100.r07.s048.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s048_output/n100.r07.s048.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s048_output/n100.r07.s048.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s048_output/n100.r07.s048.reference.fas" "n100.r07.s048_output/n100.r07.s048.fq1.fastq" "n100.r07.s048_output/n100.r07.s048.fq2.fastq" | samtools view -bS - > "n100.r07.s048_output/n100.r07.s048.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s048_output/n100.r07.s048.untrimmed.sorted.bam" "n100.r07.s048_output/n100.r07.s048.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s048_output/n100.r07.s048.untrimmed.sorted.bam" -b "n100.r07.s048_output/n100.r07.s048.primers.bed" -p "n100.r07.s048_output/n100.r07.s048.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s048_output/n100.r07.s048.trimmed.sorted.bam" "n100.r07.s048_output/n100.r07.s048.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s048_output/n100.r07.s048.reference.fas" "n100.r07.s048_output/n100.r07.s048.trimmed.sorted.bam" > "n100.r07.s048_output/n100.r07.s048.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s048_output/n100.r07.s048.reference.fas" --call-indels "n100.r07.s048_output/n100.r07.s048.trimmed.sorted.bam" > "n100.r07.s048_output/n100.r07.s048.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s048_output/n100.r07.s048.trimmed.sorted.bam" > "n100.r07.s048_output/n100.r07.s048.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s048_output/n100.r07.s048.depth.txt" "n100.r07.s048_output/n100.r07.s048.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s048_output/n100.r07.s048.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s048_output/n100.r07.s048.reference.fas" | bcftools consensus -m "n100.r07.s048_output/n100.r07.s048.low_depth.tsv" tmp.vcf.gz > "n100.r07.s048_output/n100.r07.s048.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s048_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:49f58351c4952e1f9c25094e9bb6c7c1d2208570b2d12bc949cffb7b5ffa587a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.0MiB max=124.9MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=877B max=2.1KiB
2021/07/08 17:19:25 scheduler task c8c1238f (flow ec6dd67e): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s048.tar.gz resources {}
2021/07/08 17:19:25  ->  n100.r07.s048.Main.cp_out_file ec6dd67e exec extern s3://niema-test/n100/r07/n100.r07.s048.tar.gz 35.7MiB
2021/07/08 17:19:25 scheduler task ac285b56 (flow d679cd61): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:25 scheduler task ac285b56 (flow d679cd61): unloading (try 0): started
2021/07/08 17:19:25 scheduler task ac285b56 (flow d679cd61): unloading list<val<.=4b8b83e4 35.7MiB> 35.7MiB>
2021/07/08 17:19:25 scheduler task ac285b56 (flow d679cd61): unloading val<.=b67d99ab 35.4MiB>
2021/07/08 17:19:25 scheduler task ac285b56 (flow d679cd61): unloading val<.=32215303 35.4MiB>
2021/07/08 17:19:25 scheduler task ac285b56 (flow d679cd61): unloaded val<.=32215303 35.4MiB>
2021/07/08 17:19:25 scheduler task ac285b56 (flow d679cd61): unloaded val<.=b67d99ab 35.4MiB>
2021/07/08 17:19:25 scheduler task ac285b56 (flow d679cd61): unloaded list<val<.=4b8b83e4 35.7MiB> 35.7MiB>
2021/07/08 17:19:25 scheduler task ac285b56 (flow d679cd61): unloading (try 0): successful, next state: complete
2021/07/08 17:19:25  <-  n100.r07.s042.Main.out_file d679cd61 ok     exec 5m16s 35.7MiB
2021/07/08 17:19:25 n100.r07.s042.Main.out_file d679cd61 n100/r07/n100.r07.s042.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:76a89458628dd568a5c6623643d05dc62deb3dde8601864132253f4ca6c4ed99
	sha256:d679cd614340fc432876765c7611f945b8784a68b6827f9e3a54fc49cdb866e4
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ac285b567e5c9adf921809ce120800e1d25d0b3a8c15f7762401e2b584e71aff
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s042_output"
	    wget -O "n100.r07.s042_output/n100.r07.s042.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s042_output/n100.r07.s042.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s042_output/n100.r07.s042.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s042_output/n100.r07.s042.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s042_output/n100.r07.s042.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s042_output/n100.r07.s042.reference.fas" "n100.r07.s042_output/n100.r07.s042.fq1.fastq" "n100.r07.s042_output/n100.r07.s042.fq2.fastq" | samtools view -bS - > "n100.r07.s042_output/n100.r07.s042.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s042_output/n100.r07.s042.untrimmed.sorted.bam" "n100.r07.s042_output/n100.r07.s042.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s042_output/n100.r07.s042.untrimmed.sorted.bam" -b "n100.r07.s042_output/n100.r07.s042.primers.bed" -p "n100.r07.s042_output/n100.r07.s042.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s042_output/n100.r07.s042.trimmed.sorted.bam" "n100.r07.s042_output/n100.r07.s042.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s042_output/n100.r07.s042.reference.fas" "n100.r07.s042_output/n100.r07.s042.trimmed.sorted.bam" > "n100.r07.s042_output/n100.r07.s042.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s042_output/n100.r07.s042.reference.fas" --call-indels "n100.r07.s042_output/n100.r07.s042.trimmed.sorted.bam" > "n100.r07.s042_output/n100.r07.s042.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s042_output/n100.r07.s042.trimmed.sorted.bam" > "n100.r07.s042_output/n100.r07.s042.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s042_output/n100.r07.s042.depth.txt" "n100.r07.s042_output/n100.r07.s042.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s042_output/n100.r07.s042.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s042_output/n100.r07.s042.reference.fas" | bcftools consensus -m "n100.r07.s042_output/n100.r07.s042.low_depth.tsv" tmp.vcf.gz > "n100.r07.s042_output/n100.r07.s042.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s042_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:4b8b83e4eda7772e0a7fc7daa2b22c2410d638b246900a2e09a36ee6ca15b80e 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.7MiB max=126.6MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=869B max=2.0KiB
2021/07/08 17:19:25 scheduler task fa7f7124 (flow 2bbcaf30): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s042.tar.gz resources {}
2021/07/08 17:19:25  ->  n100.r07.s042.Main.cp_out_file 2bbcaf30 exec extern s3://niema-test/n100/r07/n100.r07.s042.tar.gz 35.7MiB
2021/07/08 17:19:25 scheduler task 3fa58d8b (flow 461bf7dc): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:25 scheduler task 3fa58d8b (flow 461bf7dc): unloading (try 0): started
2021/07/08 17:19:25 scheduler task 3fa58d8b (flow 461bf7dc): unloading list<val<.=66fc29ef 35.8MiB> 35.8MiB>
2021/07/08 17:19:25 scheduler task 3fa58d8b (flow 461bf7dc): unloading val<.=a899b946 35.4MiB>
2021/07/08 17:19:25 scheduler task 3fa58d8b (flow 461bf7dc): unloading val<.=00ec5fb7 35.4MiB>
2021/07/08 17:19:25 scheduler task 3fa58d8b (flow 461bf7dc): unloaded list<val<.=66fc29ef 35.8MiB> 35.8MiB>
2021/07/08 17:19:25 scheduler task 3fa58d8b (flow 461bf7dc): unloaded val<.=00ec5fb7 35.4MiB>
2021/07/08 17:19:25 scheduler task 3fa58d8b (flow 461bf7dc): unloaded val<.=a899b946 35.4MiB>
2021/07/08 17:19:25 scheduler task 3fa58d8b (flow 461bf7dc): unloading (try 0): successful, next state: complete
2021/07/08 17:19:25  <-  n100.r07.s014.Main.out_file 461bf7dc ok     exec 5m16s 35.8MiB
2021/07/08 17:19:25 n100.r07.s014.Main.out_file 461bf7dc n100/r07/n100.r07.s014.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:20cadced1c9cf354f2cf48051a30e5d4e77025cb7506fde7ec7081210c1471d2
	sha256:461bf7dc7bce820789e5fb2316af08fd4928bcbbc82906b6b76cc680e73aaac8
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3fa58d8b9e9f63933b131c901c5a24cc0d3ef3a9265965cb277532ab885a4e07
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s014_output"
	    wget -O "n100.r07.s014_output/n100.r07.s014.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s014_output/n100.r07.s014.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s014_output/n100.r07.s014.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s014_output/n100.r07.s014.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s014_output/n100.r07.s014.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s014_output/n100.r07.s014.reference.fas" "n100.r07.s014_output/n100.r07.s014.fq1.fastq" "n100.r07.s014_output/n100.r07.s014.fq2.fastq" | samtools view -bS - > "n100.r07.s014_output/n100.r07.s014.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s014_output/n100.r07.s014.untrimmed.sorted.bam" "n100.r07.s014_output/n100.r07.s014.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s014_output/n100.r07.s014.untrimmed.sorted.bam" -b "n100.r07.s014_output/n100.r07.s014.primers.bed" -p "n100.r07.s014_output/n100.r07.s014.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s014_output/n100.r07.s014.trimmed.sorted.bam" "n100.r07.s014_output/n100.r07.s014.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s014_output/n100.r07.s014.reference.fas" "n100.r07.s014_output/n100.r07.s014.trimmed.sorted.bam" > "n100.r07.s014_output/n100.r07.s014.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s014_output/n100.r07.s014.reference.fas" --call-indels "n100.r07.s014_output/n100.r07.s014.trimmed.sorted.bam" > "n100.r07.s014_output/n100.r07.s014.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s014_output/n100.r07.s014.trimmed.sorted.bam" > "n100.r07.s014_output/n100.r07.s014.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s014_output/n100.r07.s014.depth.txt" "n100.r07.s014_output/n100.r07.s014.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s014_output/n100.r07.s014.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s014_output/n100.r07.s014.reference.fas" | bcftools consensus -m "n100.r07.s014_output/n100.r07.s014.low_depth.tsv" tmp.vcf.gz > "n100.r07.s014_output/n100.r07.s014.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s014_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:66fc29efc7810c0a3d76724f9b0772ca00868ec1c0cf39fbc7e6c669a0f70fa4 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.4MiB max=128.0MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 17:19:25 scheduler task 0761d8b8 (flow 2b05a1fc): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s014.tar.gz resources {}
2021/07/08 17:19:25  ->  n100.r07.s014.Main.cp_out_file 2b05a1fc exec extern s3://niema-test/n100/r07/n100.r07.s014.tar.gz 35.8MiB
2021/07/08 17:19:25 scheduler task 8168a241 (flow 761ac0e3): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:25 scheduler task 8168a241 (flow 761ac0e3): promoting objects (try 0): started
2021/07/08 17:19:26 scheduler task 300fd7a5 (flow b9812173): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:26 scheduler task 8168a241 (flow 761ac0e3): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:26 scheduler task 300fd7a5 (flow b9812173): promoting objects (try 0): started
2021/07/08 17:19:26 scheduler task 8168a241 (flow 761ac0e3): retrieving diagnostic output (try 0): started
2021/07/08 17:19:26 scheduler task 300fd7a5 (flow b9812173): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:26 scheduler task 300fd7a5 (flow b9812173): retrieving diagnostic output (try 0): started
2021/07/08 17:19:26 scheduler task 8168a241 (flow 761ac0e3): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:26 scheduler task 8168a241 (flow 761ac0e3): retrieving result (try 0): started
2021/07/08 17:19:26 scheduler task c8c1238f (flow ec6dd67e): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:49f58351c4952e1f9c25094e9bb6c7c1d2208570b2d12bc949cffb7b5ffa587a -> s3://niema-test/n100/r07/n100.r07.s048.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:26  <-  n100.r07.s048.Main.cp_out_file ec6dd67e ok   extern 0s 35.7MiB
2021/07/08 17:19:26 scheduler task 300fd7a5 (flow b9812173): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:26 scheduler task 8168a241 (flow 761ac0e3): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:26 scheduler task 300fd7a5 (flow b9812173): retrieving result (try 0): started
2021/07/08 17:19:26 scheduler task 8168a241 (flow 761ac0e3): transferring output (try 0): started
2021/07/08 17:19:26 scheduler task fa7f7124 (flow 2bbcaf30): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:4b8b83e4eda7772e0a7fc7daa2b22c2410d638b246900a2e09a36ee6ca15b80e -> s3://niema-test/n100/r07/n100.r07.s042.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:26  <-  n100.r07.s042.Main.cp_out_file 2bbcaf30 ok   extern 0s 35.7MiB
2021/07/08 17:19:26 scheduler task 300fd7a5 (flow b9812173): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:26 scheduler task 300fd7a5 (flow b9812173): transferring output (try 0): started
2021/07/08 17:19:26 scheduler task e9711b6d (flow 4741c76b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:26 scheduler task e9711b6d (flow 4741c76b): promoting objects (try 0): started
2021/07/08 17:19:26 scheduler task e9711b6d (flow 4741c76b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:26 scheduler task e9711b6d (flow 4741c76b): retrieving diagnostic output (try 0): started
2021/07/08 17:19:26 scheduler task 0761d8b8 (flow 2b05a1fc): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:66fc29efc7810c0a3d76724f9b0772ca00868ec1c0cf39fbc7e6c669a0f70fa4 -> s3://niema-test/n100/r07/n100.r07.s014.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:19:26 scheduler task e9711b6d (flow 4741c76b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:26  <-  n100.r07.s014.Main.cp_out_file 2b05a1fc ok   extern 0s 35.8MiB
2021/07/08 17:19:26 scheduler task e9711b6d (flow 4741c76b): retrieving result (try 0): started
2021/07/08 17:19:26 scheduler task e9711b6d (flow 4741c76b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:26 scheduler task e9711b6d (flow 4741c76b): transferring output (try 0): started
2021/07/08 17:19:26 scheduler task 8168a241 (flow 761ac0e3): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:26 scheduler task 300fd7a5 (flow b9812173): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:26 scheduler task 8168a241 (flow 761ac0e3): unloading (try 0): started
2021/07/08 17:19:26 scheduler task 8168a241 (flow 761ac0e3): unloading list<val<.=35cd2a83 35.7MiB> 35.7MiB>
2021/07/08 17:19:26 scheduler task 8168a241 (flow 761ac0e3): unloading val<.=b550697f 35.4MiB>
2021/07/08 17:19:26 scheduler task 8168a241 (flow 761ac0e3): unloading val<.=023d36c4 35.4MiB>
2021/07/08 17:19:26 scheduler task 300fd7a5 (flow b9812173): unloading (try 0): started
2021/07/08 17:19:26 scheduler task 300fd7a5 (flow b9812173): unloading list<val<.=a96b01ab 35.7MiB> 35.7MiB>
2021/07/08 17:19:26 scheduler task 300fd7a5 (flow b9812173): unloading val<.=0a96da1f 35.4MiB>
2021/07/08 17:19:26 scheduler task 300fd7a5 (flow b9812173): unloading val<.=ba223009 35.4MiB>
2021/07/08 17:19:26 scheduler task 8168a241 (flow 761ac0e3): unloaded val<.=b550697f 35.4MiB>
2021/07/08 17:19:26 scheduler task 8168a241 (flow 761ac0e3): unloaded list<val<.=35cd2a83 35.7MiB> 35.7MiB>
2021/07/08 17:19:26 scheduler task 300fd7a5 (flow b9812173): unloaded val<.=0a96da1f 35.4MiB>
2021/07/08 17:19:26 scheduler task 300fd7a5 (flow b9812173): unloaded val<.=ba223009 35.4MiB>
2021/07/08 17:19:26 scheduler task 300fd7a5 (flow b9812173): unloaded list<val<.=a96b01ab 35.7MiB> 35.7MiB>
2021/07/08 17:19:26 scheduler task 300fd7a5 (flow b9812173): unloading (try 0): successful, next state: complete
2021/07/08 17:19:26 scheduler task 8168a241 (flow 761ac0e3): unloaded val<.=023d36c4 35.4MiB>
2021/07/08 17:19:26 scheduler task 8168a241 (flow 761ac0e3): unloading (try 0): successful, next state: complete
2021/07/08 17:19:26  <-  n100.r07.s051.Main.out_file b9812173 ok     exec 5m17s 35.7MiB
2021/07/08 17:19:26 n100.r07.s051.Main.out_file b9812173 n100/r07/n100.r07.s051.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c143d3640b692a55ce09a6c931c194619b07da7c66824adf1b2dfa4af7fa0607
	sha256:b981217370fdaa3094d95dfd17ea32dc1f2262bb3be4e7616b2d524750bfef7f
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/300fd7a5fc4305bbb589251a4b37ff2a75667d9ce27ae9b3b83c53fdaa2b5980
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s051_output"
	    wget -O "n100.r07.s051_output/n100.r07.s051.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s051_output/n100.r07.s051.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s051_output/n100.r07.s051.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s051_output/n100.r07.s051.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s051_output/n100.r07.s051.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s051_output/n100.r07.s051.reference.fas" "n100.r07.s051_output/n100.r07.s051.fq1.fastq" "n100.r07.s051_output/n100.r07.s051.fq2.fastq" | samtools view -bS - > "n100.r07.s051_output/n100.r07.s051.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s051_output/n100.r07.s051.untrimmed.sorted.bam" "n100.r07.s051_output/n100.r07.s051.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s051_output/n100.r07.s051.untrimmed.sorted.bam" -b "n100.r07.s051_output/n100.r07.s051.primers.bed" -p "n100.r07.s051_output/n100.r07.s051.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s051_output/n100.r07.s051.trimmed.sorted.bam" "n100.r07.s051_output/n100.r07.s051.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s051_output/n100.r07.s051.reference.fas" "n100.r07.s051_output/n100.r07.s051.trimmed.sorted.bam" > "n100.r07.s051_output/n100.r07.s051.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s051_output/n100.r07.s051.reference.fas" --call-indels "n100.r07.s051_output/n100.r07.s051.trimmed.sorted.bam" > "n100.r07.s051_output/n100.r07.s051.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s051_output/n100.r07.s051.trimmed.sorted.bam" > "n100.r07.s051_output/n100.r07.s051.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s051_output/n100.r07.s051.depth.txt" "n100.r07.s051_output/n100.r07.s051.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s051_output/n100.r07.s051.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s051_output/n100.r07.s051.reference.fas" | bcftools consensus -m "n100.r07.s051_output/n100.r07.s051.low_depth.tsv" tmp.vcf.gz > "n100.r07.s051_output/n100.r07.s051.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s051_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a96b01ab6802b4b6676744dc62f2e1eadd90ed7335c805189a26d7d0e9b184f9 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.2MiB max=125.4MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=872B max=2.0KiB
2021/07/08 17:19:26 scheduler task f2ab5752 (flow 44231760): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s051.tar.gz resources {}
2021/07/08 17:19:26  ->  n100.r07.s051.Main.cp_out_file 44231760 exec extern s3://niema-test/n100/r07/n100.r07.s051.tar.gz 35.7MiB
2021/07/08 17:19:26  <-  n100.r07.s085.Main.out_file 761ac0e3 ok     exec 5m17s 35.7MiB
2021/07/08 17:19:26 n100.r07.s085.Main.out_file 761ac0e3 n100/r07/n100.r07.s085.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:510ff2f617243c54bf443e1beec58c525fc491cfb36a17bfcfd8c5dbc12030df
	sha256:761ac0e3315302d84015837002325d085e162e9868e9a31e94ee240d6bd77c1b
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8168a241da580e0dffe1a626d7389f5f112950a66a49510bf62484a0c11a5c05
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s085_output"
	    wget -O "n100.r07.s085_output/n100.r07.s085.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s085_output/n100.r07.s085.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s085_output/n100.r07.s085.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s085_output/n100.r07.s085.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s085_output/n100.r07.s085.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s085_output/n100.r07.s085.reference.fas" "n100.r07.s085_output/n100.r07.s085.fq1.fastq" "n100.r07.s085_output/n100.r07.s085.fq2.fastq" | samtools view -bS - > "n100.r07.s085_output/n100.r07.s085.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s085_output/n100.r07.s085.untrimmed.sorted.bam" "n100.r07.s085_output/n100.r07.s085.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s085_output/n100.r07.s085.untrimmed.sorted.bam" -b "n100.r07.s085_output/n100.r07.s085.primers.bed" -p "n100.r07.s085_output/n100.r07.s085.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s085_output/n100.r07.s085.trimmed.sorted.bam" "n100.r07.s085_output/n100.r07.s085.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s085_output/n100.r07.s085.reference.fas" "n100.r07.s085_output/n100.r07.s085.trimmed.sorted.bam" > "n100.r07.s085_output/n100.r07.s085.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s085_output/n100.r07.s085.reference.fas" --call-indels "n100.r07.s085_output/n100.r07.s085.trimmed.sorted.bam" > "n100.r07.s085_output/n100.r07.s085.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s085_output/n100.r07.s085.trimmed.sorted.bam" > "n100.r07.s085_output/n100.r07.s085.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s085_output/n100.r07.s085.depth.txt" "n100.r07.s085_output/n100.r07.s085.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s085_output/n100.r07.s085.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s085_output/n100.r07.s085.reference.fas" | bcftools consensus -m "n100.r07.s085_output/n100.r07.s085.low_depth.tsv" tmp.vcf.gz > "n100.r07.s085_output/n100.r07.s085.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s085_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:35cd2a83ab1ae3dbe830bbb479e1a60df4a7493c40d5a8a701bb22f6a59f89b0 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.2MiB max=124.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=701B max=2.1KiB
2021/07/08 17:19:26 scheduler task 227c96b5 (flow 631630f1): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s085.tar.gz resources {}
2021/07/08 17:19:26  ->  n100.r07.s085.Main.cp_out_file 631630f1 exec extern s3://niema-test/n100/r07/n100.r07.s085.tar.gz 35.7MiB
2021/07/08 17:19:27 scheduler task e9711b6d (flow 4741c76b): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:27 scheduler task e9711b6d (flow 4741c76b): unloading (try 0): started
2021/07/08 17:19:27 scheduler task e9711b6d (flow 4741c76b): unloading list<val<.=36d8e039 35.7MiB> 35.7MiB>
2021/07/08 17:19:27 scheduler task e9711b6d (flow 4741c76b): unloading val<.=cc79849d 35.4MiB>
2021/07/08 17:19:27 scheduler task e9711b6d (flow 4741c76b): unloading val<.=0c0f34ea 35.4MiB>
2021/07/08 17:19:27 scheduler task e9711b6d (flow 4741c76b): unloaded val<.=0c0f34ea 35.4MiB>
2021/07/08 17:19:27 scheduler task e9711b6d (flow 4741c76b): unloaded list<val<.=36d8e039 35.7MiB> 35.7MiB>
2021/07/08 17:19:27 scheduler task e9711b6d (flow 4741c76b): unloaded val<.=cc79849d 35.4MiB>
2021/07/08 17:19:27 scheduler task e9711b6d (flow 4741c76b): unloading (try 0): successful, next state: complete
2021/07/08 17:19:27  <-  n100.r07.s020.Main.out_file 4741c76b ok     exec 5m18s 35.7MiB
2021/07/08 17:19:27 n100.r07.s020.Main.out_file 4741c76b n100/r07/n100.r07.s020.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8052c88d92832123ee119c2b45dd407547bc68534a7b08e6c54dfa1596121cad
	sha256:4741c76b356899afeb57d8c25ae5994b36d6a6819b566852c6efb6bec8a72a49
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e9711b6dfdf23e2e883067054909171fd7f2b211051fecc2efad04b72f20ba91
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s020_output"
	    wget -O "n100.r07.s020_output/n100.r07.s020.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s020_output/n100.r07.s020.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s020_output/n100.r07.s020.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s020_output/n100.r07.s020.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s020_output/n100.r07.s020.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s020_output/n100.r07.s020.reference.fas" "n100.r07.s020_output/n100.r07.s020.fq1.fastq" "n100.r07.s020_output/n100.r07.s020.fq2.fastq" | samtools view -bS - > "n100.r07.s020_output/n100.r07.s020.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s020_output/n100.r07.s020.untrimmed.sorted.bam" "n100.r07.s020_output/n100.r07.s020.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s020_output/n100.r07.s020.untrimmed.sorted.bam" -b "n100.r07.s020_output/n100.r07.s020.primers.bed" -p "n100.r07.s020_output/n100.r07.s020.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s020_output/n100.r07.s020.trimmed.sorted.bam" "n100.r07.s020_output/n100.r07.s020.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s020_output/n100.r07.s020.reference.fas" "n100.r07.s020_output/n100.r07.s020.trimmed.sorted.bam" > "n100.r07.s020_output/n100.r07.s020.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s020_output/n100.r07.s020.reference.fas" --call-indels "n100.r07.s020_output/n100.r07.s020.trimmed.sorted.bam" > "n100.r07.s020_output/n100.r07.s020.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s020_output/n100.r07.s020.trimmed.sorted.bam" > "n100.r07.s020_output/n100.r07.s020.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s020_output/n100.r07.s020.depth.txt" "n100.r07.s020_output/n100.r07.s020.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s020_output/n100.r07.s020.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s020_output/n100.r07.s020.reference.fas" | bcftools consensus -m "n100.r07.s020_output/n100.r07.s020.low_depth.tsv" tmp.vcf.gz > "n100.r07.s020_output/n100.r07.s020.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s020_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:36d8e03970b6d8f6f43673295e6b01f711777822fc8903eeddf6029561f9c1ac 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.7MiB max=126.9MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=870B max=2.0KiB
2021/07/08 17:19:27 scheduler task 490d139b (flow 114920b8): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s020.tar.gz resources {}
2021/07/08 17:19:27  ->  n100.r07.s020.Main.cp_out_file 114920b8 exec extern s3://niema-test/n100/r07/n100.r07.s020.tar.gz 35.7MiB
2021/07/08 17:19:27 scheduler task 227c96b5 (flow 631630f1): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:35cd2a83ab1ae3dbe830bbb479e1a60df4a7493c40d5a8a701bb22f6a59f89b0 -> s3://niema-test/n100/r07/n100.r07.s085.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:27  <-  n100.r07.s085.Main.cp_out_file 631630f1 ok   extern 0s 35.7MiB
2021/07/08 17:19:27 scheduler task f2ab5752 (flow 44231760): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a96b01ab6802b4b6676744dc62f2e1eadd90ed7335c805189a26d7d0e9b184f9 -> s3://niema-test/n100/r07/n100.r07.s051.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:27  <-  n100.r07.s051.Main.cp_out_file 44231760 ok   extern 0s 35.7MiB
2021/07/08 17:19:28 scheduler task 490d139b (flow 114920b8): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:36d8e03970b6d8f6f43673295e6b01f711777822fc8903eeddf6029561f9c1ac -> s3://niema-test/n100/r07/n100.r07.s020.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:28  <-  n100.r07.s020.Main.cp_out_file 114920b8 ok   extern 0s 35.7MiB
2021/07/08 17:19:30 scheduler task c129edfe (flow 9ee68a11): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:30 scheduler task c129edfe (flow 9ee68a11): promoting objects (try 0): started
2021/07/08 17:19:30 scheduler task c129edfe (flow 9ee68a11): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:30 scheduler task c129edfe (flow 9ee68a11): retrieving diagnostic output (try 0): started
2021/07/08 17:19:30 scheduler task c129edfe (flow 9ee68a11): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:30 scheduler task c129edfe (flow 9ee68a11): retrieving result (try 0): started
2021/07/08 17:19:30 scheduler task c129edfe (flow 9ee68a11): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:30 scheduler task c129edfe (flow 9ee68a11): transferring output (try 0): started
2021/07/08 17:19:31 scheduler task c129edfe (flow 9ee68a11): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:31 scheduler task c129edfe (flow 9ee68a11): unloading (try 0): started
2021/07/08 17:19:31 scheduler task c129edfe (flow 9ee68a11): unloading list<val<.=6269a9a1 35.8MiB> 35.8MiB>
2021/07/08 17:19:31 scheduler task c129edfe (flow 9ee68a11): unloading val<.=332809c0 35.4MiB>
2021/07/08 17:19:31 scheduler task c129edfe (flow 9ee68a11): unloading val<.=ef7c5bcc 35.4MiB>
2021/07/08 17:19:31 scheduler task c129edfe (flow 9ee68a11): unloaded val<.=ef7c5bcc 35.4MiB>
2021/07/08 17:19:31 scheduler task c129edfe (flow 9ee68a11): unloaded val<.=332809c0 35.4MiB>
2021/07/08 17:19:31 scheduler task c129edfe (flow 9ee68a11): unloaded list<val<.=6269a9a1 35.8MiB> 35.8MiB>
2021/07/08 17:19:31 scheduler task c129edfe (flow 9ee68a11): unloading (try 0): successful, next state: complete
2021/07/08 17:19:31  <-  n100.r07.s022.Main.out_file 9ee68a11 ok     exec 5m22s 35.8MiB
2021/07/08 17:19:31 n100.r07.s022.Main.out_file 9ee68a11 n100/r07/n100.r07.s022.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2071b5dcdffad10024bd7c18d35e53107a8041b904125d2c61d921f38f2eae00
	sha256:9ee68a119898f979c9954b435537558ed757f1edb19953bf9f8cad6c905ba41b
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c129edfe6e86e77c1582ecb0f31839cc5604456fb2edd804ee9cd14f38ad91c6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s022_output"
	    wget -O "n100.r07.s022_output/n100.r07.s022.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s022_output/n100.r07.s022.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s022_output/n100.r07.s022.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s022_output/n100.r07.s022.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s022_output/n100.r07.s022.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s022_output/n100.r07.s022.reference.fas" "n100.r07.s022_output/n100.r07.s022.fq1.fastq" "n100.r07.s022_output/n100.r07.s022.fq2.fastq" | samtools view -bS - > "n100.r07.s022_output/n100.r07.s022.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s022_output/n100.r07.s022.untrimmed.sorted.bam" "n100.r07.s022_output/n100.r07.s022.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s022_output/n100.r07.s022.untrimmed.sorted.bam" -b "n100.r07.s022_output/n100.r07.s022.primers.bed" -p "n100.r07.s022_output/n100.r07.s022.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s022_output/n100.r07.s022.trimmed.sorted.bam" "n100.r07.s022_output/n100.r07.s022.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s022_output/n100.r07.s022.reference.fas" "n100.r07.s022_output/n100.r07.s022.trimmed.sorted.bam" > "n100.r07.s022_output/n100.r07.s022.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s022_output/n100.r07.s022.reference.fas" --call-indels "n100.r07.s022_output/n100.r07.s022.trimmed.sorted.bam" > "n100.r07.s022_output/n100.r07.s022.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s022_output/n100.r07.s022.trimmed.sorted.bam" > "n100.r07.s022_output/n100.r07.s022.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s022_output/n100.r07.s022.depth.txt" "n100.r07.s022_output/n100.r07.s022.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s022_output/n100.r07.s022.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s022_output/n100.r07.s022.reference.fas" | bcftools consensus -m "n100.r07.s022_output/n100.r07.s022.low_depth.tsv" tmp.vcf.gz > "n100.r07.s022_output/n100.r07.s022.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s022_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:6269a9a1551b104f6577d09c2efbe9c936bb79e9de7979dd3a8fe106ab7a0c20 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.2MiB max=126.8MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=875B max=2.1KiB
2021/07/08 17:19:31 scheduler task 9ec0f904 (flow e244b220): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s022.tar.gz resources {}
2021/07/08 17:19:31  ->  n100.r07.s022.Main.cp_out_file e244b220 exec extern s3://niema-test/n100/r07/n100.r07.s022.tar.gz 35.8MiB
2021/07/08 17:19:32 scheduler task 9ec0f904 (flow e244b220): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:6269a9a1551b104f6577d09c2efbe9c936bb79e9de7979dd3a8fe106ab7a0c20 -> s3://niema-test/n100/r07/n100.r07.s022.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:19:32  <-  n100.r07.s022.Main.cp_out_file e244b220 ok   extern 0s 35.8MiB
2021/07/08 17:19:32 scheduler task 072a8e2d (flow edd91e32): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:32 scheduler task 072a8e2d (flow edd91e32): promoting objects (try 0): started
2021/07/08 17:19:32 scheduler task 072a8e2d (flow edd91e32): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:32 scheduler task 072a8e2d (flow edd91e32): retrieving diagnostic output (try 0): started
2021/07/08 17:19:32 scheduler task 072a8e2d (flow edd91e32): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:32 scheduler task 072a8e2d (flow edd91e32): retrieving result (try 0): started
2021/07/08 17:19:32 scheduler task 072a8e2d (flow edd91e32): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:32 scheduler task 072a8e2d (flow edd91e32): transferring output (try 0): started
2021/07/08 17:19:33 scheduler task 072a8e2d (flow edd91e32): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:33 scheduler task 072a8e2d (flow edd91e32): unloading (try 0): started
2021/07/08 17:19:33 scheduler task 072a8e2d (flow edd91e32): unloading list<val<.=d02feb25 35.7MiB> 35.7MiB>
2021/07/08 17:19:33 scheduler task 072a8e2d (flow edd91e32): unloading val<.=7893a9f1 35.4MiB>
2021/07/08 17:19:33 scheduler task 072a8e2d (flow edd91e32): unloading val<.=889521a5 35.4MiB>
2021/07/08 17:19:33 scheduler task 072a8e2d (flow edd91e32): unloaded val<.=7893a9f1 35.4MiB>
2021/07/08 17:19:33 scheduler task 072a8e2d (flow edd91e32): unloaded list<val<.=d02feb25 35.7MiB> 35.7MiB>
2021/07/08 17:19:33 scheduler task 072a8e2d (flow edd91e32): unloaded val<.=889521a5 35.4MiB>
2021/07/08 17:19:33 scheduler task 072a8e2d (flow edd91e32): unloading (try 0): successful, next state: complete
2021/07/08 17:19:33  <-  n100.r07.s045.Main.out_file edd91e32 ok     exec 5m24s 35.7MiB
2021/07/08 17:19:33 n100.r07.s045.Main.out_file edd91e32 n100/r07/n100.r07.s045.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8786fc5c3b712d45d98b0699976a0fb54aa45239674d13b04f0bd6b9b380808b
	sha256:edd91e328b8266ade8a0664c45f86fdc6ad657681c23ba653b8fdde9dd5df4bb
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/072a8e2dc477141a95da39b503895941a9d043e7ac616d749fd7c620c9afbc25
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s045_output"
	    wget -O "n100.r07.s045_output/n100.r07.s045.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s045_output/n100.r07.s045.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s045_output/n100.r07.s045.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s045_output/n100.r07.s045.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s045_output/n100.r07.s045.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s045_output/n100.r07.s045.reference.fas" "n100.r07.s045_output/n100.r07.s045.fq1.fastq" "n100.r07.s045_output/n100.r07.s045.fq2.fastq" | samtools view -bS - > "n100.r07.s045_output/n100.r07.s045.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s045_output/n100.r07.s045.untrimmed.sorted.bam" "n100.r07.s045_output/n100.r07.s045.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s045_output/n100.r07.s045.untrimmed.sorted.bam" -b "n100.r07.s045_output/n100.r07.s045.primers.bed" -p "n100.r07.s045_output/n100.r07.s045.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s045_output/n100.r07.s045.trimmed.sorted.bam" "n100.r07.s045_output/n100.r07.s045.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s045_output/n100.r07.s045.reference.fas" "n100.r07.s045_output/n100.r07.s045.trimmed.sorted.bam" > "n100.r07.s045_output/n100.r07.s045.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s045_output/n100.r07.s045.reference.fas" --call-indels "n100.r07.s045_output/n100.r07.s045.trimmed.sorted.bam" > "n100.r07.s045_output/n100.r07.s045.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s045_output/n100.r07.s045.trimmed.sorted.bam" > "n100.r07.s045_output/n100.r07.s045.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s045_output/n100.r07.s045.depth.txt" "n100.r07.s045_output/n100.r07.s045.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s045_output/n100.r07.s045.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s045_output/n100.r07.s045.reference.fas" | bcftools consensus -m "n100.r07.s045_output/n100.r07.s045.low_depth.tsv" tmp.vcf.gz > "n100.r07.s045_output/n100.r07.s045.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s045_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d02feb25831d44c74ae2daece685727a373ca0d4eccaf1994df8f03fde7e5926 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.0MiB max=127.1MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=695B max=2.1KiB
2021/07/08 17:19:33 scheduler task 248ba061 (flow 6e6b75a7): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s045.tar.gz resources {}
2021/07/08 17:19:33  ->  n100.r07.s045.Main.cp_out_file 6e6b75a7 exec extern s3://niema-test/n100/r07/n100.r07.s045.tar.gz 35.7MiB
2021/07/08 17:19:34 scheduler task 248ba061 (flow 6e6b75a7): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d02feb25831d44c74ae2daece685727a373ca0d4eccaf1994df8f03fde7e5926 -> s3://niema-test/n100/r07/n100.r07.s045.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:34  <-  n100.r07.s045.Main.cp_out_file 6e6b75a7 ok   extern 0s 35.7MiB
2021/07/08 17:19:34 scheduler task 1d2e33c5 (flow e07d1478): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:34 scheduler task 1d2e33c5 (flow e07d1478): promoting objects (try 0): started
2021/07/08 17:19:34 scheduler task 1d2e33c5 (flow e07d1478): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:34 scheduler task 1d2e33c5 (flow e07d1478): retrieving diagnostic output (try 0): started
2021/07/08 17:19:34 scheduler task 3c2fce3f (flow 3d7c11ce): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:34 scheduler task 3c2fce3f (flow 3d7c11ce): promoting objects (try 0): started
2021/07/08 17:19:35 scheduler task 3c2fce3f (flow 3d7c11ce): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:35 scheduler task 1d2e33c5 (flow e07d1478): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:35 scheduler task 3c2fce3f (flow 3d7c11ce): retrieving diagnostic output (try 0): started
2021/07/08 17:19:35 scheduler task 1d2e33c5 (flow e07d1478): retrieving result (try 0): started
2021/07/08 17:19:35 scheduler task 1d2e33c5 (flow e07d1478): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:35 scheduler task 3c2fce3f (flow 3d7c11ce): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:35 scheduler task 1d2e33c5 (flow e07d1478): transferring output (try 0): started
2021/07/08 17:19:35 scheduler task 3c2fce3f (flow 3d7c11ce): retrieving result (try 0): started
2021/07/08 17:19:35 scheduler task 20f4384f (flow 6fbc481f): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:35 scheduler task 20f4384f (flow 6fbc481f): promoting objects (try 0): started
2021/07/08 17:19:35 scheduler task 3c2fce3f (flow 3d7c11ce): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:35 scheduler task 3c2fce3f (flow 3d7c11ce): transferring output (try 0): started
2021/07/08 17:19:35 scheduler task bcd979c9 (flow bb3f7b07): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:35 scheduler task bcd979c9 (flow bb3f7b07): promoting objects (try 0): started
2021/07/08 17:19:35 scheduler task 20f4384f (flow 6fbc481f): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:35 scheduler task 20f4384f (flow 6fbc481f): retrieving diagnostic output (try 0): started
2021/07/08 17:19:35 scheduler task bcd979c9 (flow bb3f7b07): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:35 scheduler task bcd979c9 (flow bb3f7b07): retrieving diagnostic output (try 0): started
2021/07/08 17:19:35 scheduler task 20f4384f (flow 6fbc481f): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:35 scheduler task 20f4384f (flow 6fbc481f): retrieving result (try 0): started
2021/07/08 17:19:35 scheduler task bcd979c9 (flow bb3f7b07): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:35 scheduler task 20f4384f (flow 6fbc481f): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:35 scheduler task bcd979c9 (flow bb3f7b07): retrieving result (try 0): started
2021/07/08 17:19:35 scheduler task 20f4384f (flow 6fbc481f): transferring output (try 0): started
2021/07/08 17:19:35 scheduler task bcd979c9 (flow bb3f7b07): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:35 scheduler task bcd979c9 (flow bb3f7b07): transferring output (try 0): started
2021/07/08 17:19:35 scheduler task 3c2fce3f (flow 3d7c11ce): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:35 scheduler task 1d2e33c5 (flow e07d1478): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:35 scheduler task 3c2fce3f (flow 3d7c11ce): unloading (try 0): started
2021/07/08 17:19:35 scheduler task 3c2fce3f (flow 3d7c11ce): unloading list<val<.=0a715bb2 35.8MiB> 35.8MiB>
2021/07/08 17:19:35 scheduler task 3c2fce3f (flow 3d7c11ce): unloading val<.=a198c9c4 35.4MiB>
2021/07/08 17:19:35 scheduler task 3c2fce3f (flow 3d7c11ce): unloading val<.=68f901d7 35.4MiB>
2021/07/08 17:19:35 scheduler task 1d2e33c5 (flow e07d1478): unloading (try 0): started
2021/07/08 17:19:35 scheduler task 1d2e33c5 (flow e07d1478): unloading list<val<.=bbb864de 35.7MiB> 35.7MiB>
2021/07/08 17:19:35 scheduler task 1d2e33c5 (flow e07d1478): unloading val<.=09ed927d 35.4MiB>
2021/07/08 17:19:35 scheduler task 1d2e33c5 (flow e07d1478): unloading val<.=38e5e9da 35.4MiB>
2021/07/08 17:19:35 scheduler task 3c2fce3f (flow 3d7c11ce): unloaded list<val<.=0a715bb2 35.8MiB> 35.8MiB>
2021/07/08 17:19:35 scheduler task 3c2fce3f (flow 3d7c11ce): unloaded val<.=68f901d7 35.4MiB>
2021/07/08 17:19:35 scheduler task 3c2fce3f (flow 3d7c11ce): unloaded val<.=a198c9c4 35.4MiB>
2021/07/08 17:19:35 scheduler task 3c2fce3f (flow 3d7c11ce): unloading (try 0): successful, next state: complete
2021/07/08 17:19:35  <-  n100.r07.s017.Main.out_file 3d7c11ce ok     exec 5m14s 35.8MiB
2021/07/08 17:19:35 n100.r07.s017.Main.out_file 3d7c11ce n100/r07/n100.r07.s017.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:857e37b81de97065f663ac29788dcc7a3afb2788826fe7ee73bb04ee47b55396
	sha256:3d7c11cee314f59df2471953d39b4a731f084c37c67fc7d857db4c41efa6f6c6
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3c2fce3f68707d874250cddc9e44b2f9601151f57ae2a7ed7f125e0cb149dfc6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s017_output"
	    wget -O "n100.r07.s017_output/n100.r07.s017.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s017_output/n100.r07.s017.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s017_output/n100.r07.s017.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s017_output/n100.r07.s017.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s017_output/n100.r07.s017.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s017_output/n100.r07.s017.reference.fas" "n100.r07.s017_output/n100.r07.s017.fq1.fastq" "n100.r07.s017_output/n100.r07.s017.fq2.fastq" | samtools view -bS - > "n100.r07.s017_output/n100.r07.s017.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s017_output/n100.r07.s017.untrimmed.sorted.bam" "n100.r07.s017_output/n100.r07.s017.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s017_output/n100.r07.s017.untrimmed.sorted.bam" -b "n100.r07.s017_output/n100.r07.s017.primers.bed" -p "n100.r07.s017_output/n100.r07.s017.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s017_output/n100.r07.s017.trimmed.sorted.bam" "n100.r07.s017_output/n100.r07.s017.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s017_output/n100.r07.s017.reference.fas" "n100.r07.s017_output/n100.r07.s017.trimmed.sorted.bam" > "n100.r07.s017_output/n100.r07.s017.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s017_output/n100.r07.s017.reference.fas" --call-indels "n100.r07.s017_output/n100.r07.s017.trimmed.sorted.bam" > "n100.r07.s017_output/n100.r07.s017.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s017_output/n100.r07.s017.trimmed.sorted.bam" > "n100.r07.s017_output/n100.r07.s017.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s017_output/n100.r07.s017.depth.txt" "n100.r07.s017_output/n100.r07.s017.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s017_output/n100.r07.s017.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s017_output/n100.r07.s017.reference.fas" | bcftools consensus -m "n100.r07.s017_output/n100.r07.s017.low_depth.tsv" tmp.vcf.gz > "n100.r07.s017_output/n100.r07.s017.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s017_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:0a715bb24d169156e1ccd1b6c55596f546ce63a4278ea2ef9f1b11f3da9b00db 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.9MiB max=128.7MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=872B max=2.1KiB
2021/07/08 17:19:35 scheduler task 7fa92112 (flow 4b4924ee): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s017.tar.gz resources {}
2021/07/08 17:19:35  ->  n100.r07.s017.Main.cp_out_file 4b4924ee exec extern s3://niema-test/n100/r07/n100.r07.s017.tar.gz 35.8MiB
2021/07/08 17:19:35 scheduler task 1d2e33c5 (flow e07d1478): unloaded val<.=38e5e9da 35.4MiB>
2021/07/08 17:19:35 scheduler task 1d2e33c5 (flow e07d1478): unloaded val<.=09ed927d 35.4MiB>
2021/07/08 17:19:35 scheduler task 1d2e33c5 (flow e07d1478): unloaded list<val<.=bbb864de 35.7MiB> 35.7MiB>
2021/07/08 17:19:35 scheduler task 1d2e33c5 (flow e07d1478): unloading (try 0): successful, next state: complete
2021/07/08 17:19:35  <-  n100.r07.s035.Main.out_file e07d1478 ok     exec 5m14s 35.7MiB
2021/07/08 17:19:35 n100.r07.s035.Main.out_file e07d1478 n100/r07/n100.r07.s035.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d061e699887daa04d36feea96138335c495e1b1cc734ab5d9d071d5218a6864a
	sha256:e07d14782e68ae4336961539d58ea041e36688c17374219250144a3883b85ba9
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1d2e33c5299c35496d0c0263b41ca80ac3efc254934c557301d86985c1b11769
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s035_output"
	    wget -O "n100.r07.s035_output/n100.r07.s035.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s035_output/n100.r07.s035.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s035_output/n100.r07.s035.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s035_output/n100.r07.s035.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s035_output/n100.r07.s035.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s035_output/n100.r07.s035.reference.fas" "n100.r07.s035_output/n100.r07.s035.fq1.fastq" "n100.r07.s035_output/n100.r07.s035.fq2.fastq" | samtools view -bS - > "n100.r07.s035_output/n100.r07.s035.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s035_output/n100.r07.s035.untrimmed.sorted.bam" "n100.r07.s035_output/n100.r07.s035.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s035_output/n100.r07.s035.untrimmed.sorted.bam" -b "n100.r07.s035_output/n100.r07.s035.primers.bed" -p "n100.r07.s035_output/n100.r07.s035.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s035_output/n100.r07.s035.trimmed.sorted.bam" "n100.r07.s035_output/n100.r07.s035.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s035_output/n100.r07.s035.reference.fas" "n100.r07.s035_output/n100.r07.s035.trimmed.sorted.bam" > "n100.r07.s035_output/n100.r07.s035.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s035_output/n100.r07.s035.reference.fas" --call-indels "n100.r07.s035_output/n100.r07.s035.trimmed.sorted.bam" > "n100.r07.s035_output/n100.r07.s035.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s035_output/n100.r07.s035.trimmed.sorted.bam" > "n100.r07.s035_output/n100.r07.s035.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s035_output/n100.r07.s035.depth.txt" "n100.r07.s035_output/n100.r07.s035.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s035_output/n100.r07.s035.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s035_output/n100.r07.s035.reference.fas" | bcftools consensus -m "n100.r07.s035_output/n100.r07.s035.low_depth.tsv" tmp.vcf.gz > "n100.r07.s035_output/n100.r07.s035.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s035_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:bbb864deac1e0351082133fc67bb019bde3ca3fa92d60f5424f0e98b00423825 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.4MiB max=127.8MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=695B max=2.0KiB
2021/07/08 17:19:35 scheduler task 2c0a5cbb (flow 9da61947): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s035.tar.gz resources {}
2021/07/08 17:19:35  ->  n100.r07.s035.Main.cp_out_file 9da61947 exec extern s3://niema-test/n100/r07/n100.r07.s035.tar.gz 35.7MiB
2021/07/08 17:19:35 scheduler task 20f4384f (flow 6fbc481f): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:35 scheduler task 20f4384f (flow 6fbc481f): unloading (try 0): started
2021/07/08 17:19:35 scheduler task 20f4384f (flow 6fbc481f): unloading list<val<.=63332775 35.8MiB> 35.8MiB>
2021/07/08 17:19:35 scheduler task 20f4384f (flow 6fbc481f): unloading val<.=e6643112 35.4MiB>
2021/07/08 17:19:35 scheduler task 20f4384f (flow 6fbc481f): unloading val<.=ccee20d6 35.4MiB>
2021/07/08 17:19:36 scheduler task 20f4384f (flow 6fbc481f): unloaded list<val<.=63332775 35.8MiB> 35.8MiB>
2021/07/08 17:19:36 scheduler task 20f4384f (flow 6fbc481f): unloaded val<.=ccee20d6 35.4MiB>
2021/07/08 17:19:36 scheduler task 20f4384f (flow 6fbc481f): unloaded val<.=e6643112 35.4MiB>
2021/07/08 17:19:36 scheduler task 20f4384f (flow 6fbc481f): unloading (try 0): successful, next state: complete
2021/07/08 17:19:36  <-  n100.r07.s019.Main.out_file 6fbc481f ok     exec 5m14s 35.8MiB
2021/07/08 17:19:36 n100.r07.s019.Main.out_file 6fbc481f n100/r07/n100.r07.s019.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:40fe6f713bfa06edb715bde4a61b84e9b43ae30d124b01840020d5d1514a0aa8
	sha256:6fbc481f6b44bfb868a9797adf0bfe7549d68f72b89a1474c223520d239e9d8b
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/20f4384fcfe6b521b6afeaea7dfec3e592d9517d8880b4d584bb8dafe4d7be2e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s019_output"
	    wget -O "n100.r07.s019_output/n100.r07.s019.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s019_output/n100.r07.s019.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s019_output/n100.r07.s019.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s019_output/n100.r07.s019.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s019_output/n100.r07.s019.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s019_output/n100.r07.s019.reference.fas" "n100.r07.s019_output/n100.r07.s019.fq1.fastq" "n100.r07.s019_output/n100.r07.s019.fq2.fastq" | samtools view -bS - > "n100.r07.s019_output/n100.r07.s019.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s019_output/n100.r07.s019.untrimmed.sorted.bam" "n100.r07.s019_output/n100.r07.s019.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s019_output/n100.r07.s019.untrimmed.sorted.bam" -b "n100.r07.s019_output/n100.r07.s019.primers.bed" -p "n100.r07.s019_output/n100.r07.s019.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s019_output/n100.r07.s019.trimmed.sorted.bam" "n100.r07.s019_output/n100.r07.s019.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s019_output/n100.r07.s019.reference.fas" "n100.r07.s019_output/n100.r07.s019.trimmed.sorted.bam" > "n100.r07.s019_output/n100.r07.s019.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s019_output/n100.r07.s019.reference.fas" --call-indels "n100.r07.s019_output/n100.r07.s019.trimmed.sorted.bam" > "n100.r07.s019_output/n100.r07.s019.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s019_output/n100.r07.s019.trimmed.sorted.bam" > "n100.r07.s019_output/n100.r07.s019.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s019_output/n100.r07.s019.depth.txt" "n100.r07.s019_output/n100.r07.s019.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s019_output/n100.r07.s019.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s019_output/n100.r07.s019.reference.fas" | bcftools consensus -m "n100.r07.s019_output/n100.r07.s019.low_depth.tsv" tmp.vcf.gz > "n100.r07.s019_output/n100.r07.s019.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s019_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:6333277540cb9ea85abc4b218423192be691bfd8e8d338ba0603ef171161ea3d 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.3MiB max=127.0MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=871B max=2.0KiB
2021/07/08 17:19:36 scheduler task ef60c207 (flow abaa79f0): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s019.tar.gz resources {}
2021/07/08 17:19:36  ->  n100.r07.s019.Main.cp_out_file abaa79f0 exec extern s3://niema-test/n100/r07/n100.r07.s019.tar.gz 35.8MiB
2021/07/08 17:19:36 scheduler task bcd979c9 (flow bb3f7b07): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:36 scheduler task bcd979c9 (flow bb3f7b07): unloading (try 0): started
2021/07/08 17:19:36 scheduler task bcd979c9 (flow bb3f7b07): unloading list<val<.=85a87407 35.7MiB> 35.7MiB>
2021/07/08 17:19:36 scheduler task bcd979c9 (flow bb3f7b07): unloading val<.=51c28374 35.4MiB>
2021/07/08 17:19:36 scheduler task bcd979c9 (flow bb3f7b07): unloading val<.=58a40951 35.4MiB>
2021/07/08 17:19:36 scheduler task bcd979c9 (flow bb3f7b07): unloaded list<val<.=85a87407 35.7MiB> 35.7MiB>
2021/07/08 17:19:36 scheduler task bcd979c9 (flow bb3f7b07): unloaded val<.=58a40951 35.4MiB>
2021/07/08 17:19:36 scheduler task bcd979c9 (flow bb3f7b07): unloaded val<.=51c28374 35.4MiB>
2021/07/08 17:19:36 scheduler task bcd979c9 (flow bb3f7b07): unloading (try 0): successful, next state: complete
2021/07/08 17:19:36  <-  n100.r07.s092.Main.out_file bb3f7b07 ok     exec 5m14s 35.7MiB
2021/07/08 17:19:36 n100.r07.s092.Main.out_file bb3f7b07 n100/r07/n100.r07.s092.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6d53a26332f71b57ea73e1b0e5e76787f2f85e66805e418a774f98082d087465
	sha256:bb3f7b07f5d4fe808e280c950e4e19c3f9fc7a7171b09f3de5829d2b2df7482f
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bcd979c97da9c6a0b2fd5429345387788e2e30673fc5bf8d6172913c201949ca
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s092_output"
	    wget -O "n100.r07.s092_output/n100.r07.s092.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s092_output/n100.r07.s092.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s092_output/n100.r07.s092.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s092_output/n100.r07.s092.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s092_output/n100.r07.s092.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s092_output/n100.r07.s092.reference.fas" "n100.r07.s092_output/n100.r07.s092.fq1.fastq" "n100.r07.s092_output/n100.r07.s092.fq2.fastq" | samtools view -bS - > "n100.r07.s092_output/n100.r07.s092.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s092_output/n100.r07.s092.untrimmed.sorted.bam" "n100.r07.s092_output/n100.r07.s092.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s092_output/n100.r07.s092.untrimmed.sorted.bam" -b "n100.r07.s092_output/n100.r07.s092.primers.bed" -p "n100.r07.s092_output/n100.r07.s092.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s092_output/n100.r07.s092.trimmed.sorted.bam" "n100.r07.s092_output/n100.r07.s092.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s092_output/n100.r07.s092.reference.fas" "n100.r07.s092_output/n100.r07.s092.trimmed.sorted.bam" > "n100.r07.s092_output/n100.r07.s092.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s092_output/n100.r07.s092.reference.fas" --call-indels "n100.r07.s092_output/n100.r07.s092.trimmed.sorted.bam" > "n100.r07.s092_output/n100.r07.s092.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s092_output/n100.r07.s092.trimmed.sorted.bam" > "n100.r07.s092_output/n100.r07.s092.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s092_output/n100.r07.s092.depth.txt" "n100.r07.s092_output/n100.r07.s092.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s092_output/n100.r07.s092.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s092_output/n100.r07.s092.reference.fas" | bcftools consensus -m "n100.r07.s092_output/n100.r07.s092.low_depth.tsv" tmp.vcf.gz > "n100.r07.s092_output/n100.r07.s092.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s092_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:85a87407d241acdbab1f9544a8dae2c1008d7528575dfdaf2cbfe7815a43ffca 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.6MiB max=125.8MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=870B max=2.0KiB
2021/07/08 17:19:36 scheduler task 2976774a (flow a8a97c03): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s092.tar.gz resources {}
2021/07/08 17:19:36  ->  n100.r07.s092.Main.cp_out_file a8a97c03 exec extern s3://niema-test/n100/r07/n100.r07.s092.tar.gz 35.7MiB
2021/07/08 17:19:36 scheduler task e89fdb62 (flow 85485140): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:36 scheduler task e89fdb62 (flow 85485140): promoting objects (try 0): started
2021/07/08 17:19:36 scheduler task e89fdb62 (flow 85485140): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:36 scheduler task e89fdb62 (flow 85485140): retrieving diagnostic output (try 0): started
2021/07/08 17:19:36 scheduler task e89fdb62 (flow 85485140): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:36 scheduler task e89fdb62 (flow 85485140): retrieving result (try 0): started
2021/07/08 17:19:36 scheduler task 2c0a5cbb (flow 9da61947): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:bbb864deac1e0351082133fc67bb019bde3ca3fa92d60f5424f0e98b00423825 -> s3://niema-test/n100/r07/n100.r07.s035.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:36  <-  n100.r07.s035.Main.cp_out_file 9da61947 ok   extern 0s 35.7MiB
2021/07/08 17:19:36 scheduler task e89fdb62 (flow 85485140): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:36 scheduler task e89fdb62 (flow 85485140): transferring output (try 0): started
2021/07/08 17:19:36 scheduler task 7fa92112 (flow 4b4924ee): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:0a715bb24d169156e1ccd1b6c55596f546ce63a4278ea2ef9f1b11f3da9b00db -> s3://niema-test/n100/r07/n100.r07.s017.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:19:36  <-  n100.r07.s017.Main.cp_out_file 4b4924ee ok   extern 0s 35.8MiB
2021/07/08 17:19:36 scheduler task ef60c207 (flow abaa79f0): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:6333277540cb9ea85abc4b218423192be691bfd8e8d338ba0603ef171161ea3d -> s3://niema-test/n100/r07/n100.r07.s019.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:19:36  <-  n100.r07.s019.Main.cp_out_file abaa79f0 ok   extern 0s 35.8MiB
2021/07/08 17:19:36 scheduler task 5008561a (flow 3ac59401): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:36 scheduler task 5008561a (flow 3ac59401): promoting objects (try 0): started
2021/07/08 17:19:37 scheduler task 0b40294a (flow d3087af8): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:37 scheduler task 5008561a (flow 3ac59401): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:37 scheduler task 0b40294a (flow d3087af8): promoting objects (try 0): started
2021/07/08 17:19:37 scheduler task 5008561a (flow 3ac59401): retrieving diagnostic output (try 0): started
2021/07/08 17:19:37 scheduler task 2976774a (flow a8a97c03): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:85a87407d241acdbab1f9544a8dae2c1008d7528575dfdaf2cbfe7815a43ffca -> s3://niema-test/n100/r07/n100.r07.s092.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:37  <-  n100.r07.s092.Main.cp_out_file a8a97c03 ok   extern 0s 35.7MiB
2021/07/08 17:19:37 scheduler task 0b40294a (flow d3087af8): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:37 scheduler task 0b40294a (flow d3087af8): retrieving diagnostic output (try 0): started
2021/07/08 17:19:37 scheduler task 5008561a (flow 3ac59401): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:37 scheduler task 5008561a (flow 3ac59401): retrieving result (try 0): started
2021/07/08 17:19:37 scheduler task e89fdb62 (flow 85485140): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:37 scheduler task 0b40294a (flow d3087af8): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:37 scheduler task e89fdb62 (flow 85485140): unloading (try 0): started
2021/07/08 17:19:37 scheduler task e89fdb62 (flow 85485140): unloading list<val<.=ca3bbb71 35.8MiB> 35.8MiB>
2021/07/08 17:19:37 scheduler task e89fdb62 (flow 85485140): unloading val<.=a97bf394 35.4MiB>
2021/07/08 17:19:37 scheduler task e89fdb62 (flow 85485140): unloading val<.=c9cada21 35.4MiB>
2021/07/08 17:19:37 scheduler task 5008561a (flow 3ac59401): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:37 scheduler task 0b40294a (flow d3087af8): retrieving result (try 0): started
2021/07/08 17:19:37 scheduler task 5008561a (flow 3ac59401): transferring output (try 0): started
2021/07/08 17:19:37 scheduler task e89fdb62 (flow 85485140): unloaded val<.=c9cada21 35.4MiB>
2021/07/08 17:19:37 scheduler task e89fdb62 (flow 85485140): unloaded val<.=a97bf394 35.4MiB>
2021/07/08 17:19:37 scheduler task e89fdb62 (flow 85485140): unloaded list<val<.=ca3bbb71 35.8MiB> 35.8MiB>
2021/07/08 17:19:37 scheduler task e89fdb62 (flow 85485140): unloading (try 0): successful, next state: complete
2021/07/08 17:19:37 scheduler task 0b40294a (flow d3087af8): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:37  <-  n100.r07.s026.Main.out_file 85485140 ok     exec 5m15s 35.8MiB
2021/07/08 17:19:37 n100.r07.s026.Main.out_file 85485140 n100/r07/n100.r07.s026.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6c378bfd10e209205419e36cd792e8f20d697d3ccc0f5e83a0ac7501c63988a0
	sha256:85485140af93f0b8b012850dc95c134916ddcd28e48510f40eaca5bb634f13b8
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e89fdb6260264867400322f21f34f9632bb43c419ffef398be7ee4b6d041ef56
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s026_output"
	    wget -O "n100.r07.s026_output/n100.r07.s026.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s026_output/n100.r07.s026.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s026_output/n100.r07.s026.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s026_output/n100.r07.s026.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s026_output/n100.r07.s026.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s026_output/n100.r07.s026.reference.fas" "n100.r07.s026_output/n100.r07.s026.fq1.fastq" "n100.r07.s026_output/n100.r07.s026.fq2.fastq" | samtools view -bS - > "n100.r07.s026_output/n100.r07.s026.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s026_output/n100.r07.s026.untrimmed.sorted.bam" "n100.r07.s026_output/n100.r07.s026.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s026_output/n100.r07.s026.untrimmed.sorted.bam" -b "n100.r07.s026_output/n100.r07.s026.primers.bed" -p "n100.r07.s026_output/n100.r07.s026.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s026_output/n100.r07.s026.trimmed.sorted.bam" "n100.r07.s026_output/n100.r07.s026.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s026_output/n100.r07.s026.reference.fas" "n100.r07.s026_output/n100.r07.s026.trimmed.sorted.bam" > "n100.r07.s026_output/n100.r07.s026.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s026_output/n100.r07.s026.reference.fas" --call-indels "n100.r07.s026_output/n100.r07.s026.trimmed.sorted.bam" > "n100.r07.s026_output/n100.r07.s026.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s026_output/n100.r07.s026.trimmed.sorted.bam" > "n100.r07.s026_output/n100.r07.s026.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s026_output/n100.r07.s026.depth.txt" "n100.r07.s026_output/n100.r07.s026.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s026_output/n100.r07.s026.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s026_output/n100.r07.s026.reference.fas" | bcftools consensus -m "n100.r07.s026_output/n100.r07.s026.low_depth.tsv" tmp.vcf.gz > "n100.r07.s026_output/n100.r07.s026.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s026_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:ca3bbb71b0599aa99e3f433801b98b33f9363171459f7189d44839f3ec7981ae 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=18.4MiB max=126.0MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=525B max=2.1KiB
2021/07/08 17:19:37 scheduler task 5e3efee8 (flow 224a3dfe): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s026.tar.gz resources {}
2021/07/08 17:19:37  ->  n100.r07.s026.Main.cp_out_file 224a3dfe exec extern s3://niema-test/n100/r07/n100.r07.s026.tar.gz 35.8MiB
2021/07/08 17:19:37 scheduler task 0b40294a (flow d3087af8): transferring output (try 0): started
2021/07/08 17:19:37 scheduler task 5008561a (flow 3ac59401): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:37 scheduler task 5008561a (flow 3ac59401): unloading (try 0): started
2021/07/08 17:19:37 scheduler task 5008561a (flow 3ac59401): unloading list<val<.=96f86c2a 35.7MiB> 35.7MiB>
2021/07/08 17:19:37 scheduler task 5008561a (flow 3ac59401): unloading val<.=e251d632 35.4MiB>
2021/07/08 17:19:37 scheduler task 5008561a (flow 3ac59401): unloading val<.=2de91597 35.4MiB>
2021/07/08 17:19:37 scheduler task 0b40294a (flow d3087af8): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:37 scheduler task 0b40294a (flow d3087af8): unloading (try 0): started
2021/07/08 17:19:37 scheduler task 0b40294a (flow d3087af8): unloading list<val<.=189180d5 35.7MiB> 35.7MiB>
2021/07/08 17:19:37 scheduler task 0b40294a (flow d3087af8): unloading val<.=59aa0eb6 35.4MiB>
2021/07/08 17:19:37 scheduler task 0b40294a (flow d3087af8): unloading val<.=ad708fbc 35.4MiB>
2021/07/08 17:19:37 scheduler task 5008561a (flow 3ac59401): unloaded list<val<.=96f86c2a 35.7MiB> 35.7MiB>
2021/07/08 17:19:37 scheduler task 5008561a (flow 3ac59401): unloaded val<.=2de91597 35.4MiB>
2021/07/08 17:19:37 scheduler task 5008561a (flow 3ac59401): unloaded val<.=e251d632 35.4MiB>
2021/07/08 17:19:37 scheduler task 5008561a (flow 3ac59401): unloading (try 0): successful, next state: complete
2021/07/08 17:19:37 scheduler task 094c83a9 (flow 0455dc2c): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:37  <-  n100.r07.s096.Main.out_file 3ac59401 ok     exec 5m16s 35.7MiB
2021/07/08 17:19:37 n100.r07.s096.Main.out_file 3ac59401 n100/r07/n100.r07.s096.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:61fb37585f169dfe7e0c11e648c3c96514575739d6c30aa272cc00f7d08211a2
	sha256:3ac5940126f94583084ecc4604a9a488498d86451f251d64b936fb58e1c77eea
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5008561a9cf486b69ea9090c42cebd62743d4ce35909dfbb8497a088f6a90f81
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s096_output"
	    wget -O "n100.r07.s096_output/n100.r07.s096.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s096_output/n100.r07.s096.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s096_output/n100.r07.s096.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s096_output/n100.r07.s096.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s096_output/n100.r07.s096.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s096_output/n100.r07.s096.reference.fas" "n100.r07.s096_output/n100.r07.s096.fq1.fastq" "n100.r07.s096_output/n100.r07.s096.fq2.fastq" | samtools view -bS - > "n100.r07.s096_output/n100.r07.s096.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s096_output/n100.r07.s096.untrimmed.sorted.bam" "n100.r07.s096_output/n100.r07.s096.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s096_output/n100.r07.s096.untrimmed.sorted.bam" -b "n100.r07.s096_output/n100.r07.s096.primers.bed" -p "n100.r07.s096_output/n100.r07.s096.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s096_output/n100.r07.s096.trimmed.sorted.bam" "n100.r07.s096_output/n100.r07.s096.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s096_output/n100.r07.s096.reference.fas" "n100.r07.s096_output/n100.r07.s096.trimmed.sorted.bam" > "n100.r07.s096_output/n100.r07.s096.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s096_output/n100.r07.s096.reference.fas" --call-indels "n100.r07.s096_output/n100.r07.s096.trimmed.sorted.bam" > "n100.r07.s096_output/n100.r07.s096.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s096_output/n100.r07.s096.trimmed.sorted.bam" > "n100.r07.s096_output/n100.r07.s096.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s096_output/n100.r07.s096.depth.txt" "n100.r07.s096_output/n100.r07.s096.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s096_output/n100.r07.s096.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s096_output/n100.r07.s096.reference.fas" | bcftools consensus -m "n100.r07.s096_output/n100.r07.s096.low_depth.tsv" tmp.vcf.gz > "n100.r07.s096_output/n100.r07.s096.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s096_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:96f86c2a0d432cccd001d237c6b554972f472bc2f7b18f352304e051e4f98a41 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.6MiB max=126.0MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=696B max=2.0KiB
2021/07/08 17:19:37 scheduler task 11173f43 (flow 24be8fd7): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s096.tar.gz resources {}
2021/07/08 17:19:37  ->  n100.r07.s096.Main.cp_out_file 24be8fd7 exec extern s3://niema-test/n100/r07/n100.r07.s096.tar.gz 35.7MiB
2021/07/08 17:19:37 scheduler task 094c83a9 (flow 0455dc2c): promoting objects (try 0): started
2021/07/08 17:19:37 scheduler task 0b40294a (flow d3087af8): unloaded list<val<.=189180d5 35.7MiB> 35.7MiB>
2021/07/08 17:19:37 scheduler task 0b40294a (flow d3087af8): unloaded val<.=ad708fbc 35.4MiB>
2021/07/08 17:19:37 scheduler task 0b40294a (flow d3087af8): unloaded val<.=59aa0eb6 35.4MiB>
2021/07/08 17:19:37 scheduler task 0b40294a (flow d3087af8): unloading (try 0): successful, next state: complete
2021/07/08 17:19:37  <-  n100.r07.s034.Main.out_file d3087af8 ok     exec 5m16s 35.7MiB
2021/07/08 17:19:37 n100.r07.s034.Main.out_file d3087af8 n100/r07/n100.r07.s034.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e1f21f377660efa36f489c22c925d824e6d0fd352d7ccea8a4e39bf283b85f0b
	sha256:d3087af8c51d8635e7e60244fd82288d86aec6452e1328060997f667020590d7
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0b40294a121736ce1eb01e8296b4d56ea348a9f96492a52795fa3c5e82988de9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s034_output"
	    wget -O "n100.r07.s034_output/n100.r07.s034.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s034_output/n100.r07.s034.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s034_output/n100.r07.s034.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s034_output/n100.r07.s034.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s034_output/n100.r07.s034.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s034_output/n100.r07.s034.reference.fas" "n100.r07.s034_output/n100.r07.s034.fq1.fastq" "n100.r07.s034_output/n100.r07.s034.fq2.fastq" | samtools view -bS - > "n100.r07.s034_output/n100.r07.s034.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s034_output/n100.r07.s034.untrimmed.sorted.bam" "n100.r07.s034_output/n100.r07.s034.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s034_output/n100.r07.s034.untrimmed.sorted.bam" -b "n100.r07.s034_output/n100.r07.s034.primers.bed" -p "n100.r07.s034_output/n100.r07.s034.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s034_output/n100.r07.s034.trimmed.sorted.bam" "n100.r07.s034_output/n100.r07.s034.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s034_output/n100.r07.s034.reference.fas" "n100.r07.s034_output/n100.r07.s034.trimmed.sorted.bam" > "n100.r07.s034_output/n100.r07.s034.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s034_output/n100.r07.s034.reference.fas" --call-indels "n100.r07.s034_output/n100.r07.s034.trimmed.sorted.bam" > "n100.r07.s034_output/n100.r07.s034.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s034_output/n100.r07.s034.trimmed.sorted.bam" > "n100.r07.s034_output/n100.r07.s034.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s034_output/n100.r07.s034.depth.txt" "n100.r07.s034_output/n100.r07.s034.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s034_output/n100.r07.s034.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s034_output/n100.r07.s034.reference.fas" | bcftools consensus -m "n100.r07.s034_output/n100.r07.s034.low_depth.tsv" tmp.vcf.gz > "n100.r07.s034_output/n100.r07.s034.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s034_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:189180d5e9273186366ab3230133b95f4b7704c7c6782e79ebc8a4500b7ed29b 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.1MiB max=127.0MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=696B max=2.1KiB
2021/07/08 17:19:37 scheduler task ed199528 (flow 9770d7d4): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s034.tar.gz resources {}
2021/07/08 17:19:37  ->  n100.r07.s034.Main.cp_out_file 9770d7d4 exec extern s3://niema-test/n100/r07/n100.r07.s034.tar.gz 35.7MiB
2021/07/08 17:19:37 scheduler task 094c83a9 (flow 0455dc2c): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:37 scheduler task 094c83a9 (flow 0455dc2c): retrieving diagnostic output (try 0): started
2021/07/08 17:19:38 scheduler task d7452493 (flow a3bb669d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:38 scheduler task d7452493 (flow a3bb669d): promoting objects (try 0): started
2021/07/08 17:19:38 scheduler task f992ad8d (flow b7fedadc): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:38 scheduler task 5e3efee8 (flow 224a3dfe): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:ca3bbb71b0599aa99e3f433801b98b33f9363171459f7189d44839f3ec7981ae -> s3://niema-test/n100/r07/n100.r07.s026.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:19:38  <-  n100.r07.s026.Main.cp_out_file 224a3dfe ok   extern 0s 35.8MiB
2021/07/08 17:19:38 scheduler task f992ad8d (flow b7fedadc): promoting objects (try 0): started
2021/07/08 17:19:38 scheduler task d7452493 (flow a3bb669d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:38 scheduler task 094c83a9 (flow 0455dc2c): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:38 scheduler task d7452493 (flow a3bb669d): retrieving diagnostic output (try 0): started
2021/07/08 17:19:38 scheduler task 094c83a9 (flow 0455dc2c): retrieving result (try 0): started
2021/07/08 17:19:38 scheduler task f992ad8d (flow b7fedadc): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:38 scheduler task f992ad8d (flow b7fedadc): retrieving diagnostic output (try 0): started
2021/07/08 17:19:38 scheduler task d7452493 (flow a3bb669d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:38 scheduler task d7452493 (flow a3bb669d): retrieving result (try 0): started
2021/07/08 17:19:38 scheduler task 094c83a9 (flow 0455dc2c): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:38 scheduler task 094c83a9 (flow 0455dc2c): transferring output (try 0): started
2021/07/08 17:19:38 scheduler task f992ad8d (flow b7fedadc): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:38 scheduler task d7452493 (flow a3bb669d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:38 scheduler task f992ad8d (flow b7fedadc): retrieving result (try 0): started
2021/07/08 17:19:38 scheduler task d7452493 (flow a3bb669d): transferring output (try 0): started
2021/07/08 17:19:38 scheduler task f992ad8d (flow b7fedadc): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:38 scheduler task f992ad8d (flow b7fedadc): transferring output (try 0): started
2021/07/08 17:19:38 scheduler task 11173f43 (flow 24be8fd7): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:96f86c2a0d432cccd001d237c6b554972f472bc2f7b18f352304e051e4f98a41 -> s3://niema-test/n100/r07/n100.r07.s096.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:38  <-  n100.r07.s096.Main.cp_out_file 24be8fd7 ok   extern 0s 35.7MiB
2021/07/08 17:19:38 scheduler task ed199528 (flow 9770d7d4): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:189180d5e9273186366ab3230133b95f4b7704c7c6782e79ebc8a4500b7ed29b -> s3://niema-test/n100/r07/n100.r07.s034.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:38  <-  n100.r07.s034.Main.cp_out_file 9770d7d4 ok   extern 0s 35.7MiB
2021/07/08 17:19:38 scheduler task d7452493 (flow a3bb669d): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:38 scheduler task d7452493 (flow a3bb669d): unloading (try 0): started
2021/07/08 17:19:38 scheduler task d7452493 (flow a3bb669d): unloading list<val<.=30c036af 35.7MiB> 35.7MiB>
2021/07/08 17:19:38 scheduler task d7452493 (flow a3bb669d): unloading val<.=d7286acd 35.4MiB>
2021/07/08 17:19:38 scheduler task d7452493 (flow a3bb669d): unloading val<.=e58cec98 35.4MiB>
2021/07/08 17:19:38 scheduler task 094c83a9 (flow 0455dc2c): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:38 scheduler task d7452493 (flow a3bb669d): unloaded list<val<.=30c036af 35.7MiB> 35.7MiB>
2021/07/08 17:19:38 scheduler task 094c83a9 (flow 0455dc2c): unloading (try 0): started
2021/07/08 17:19:38 scheduler task 094c83a9 (flow 0455dc2c): unloading list<val<.=85b8459c 35.8MiB> 35.8MiB>
2021/07/08 17:19:38 scheduler task 094c83a9 (flow 0455dc2c): unloading val<.=734220a9 35.4MiB>
2021/07/08 17:19:38 scheduler task 094c83a9 (flow 0455dc2c): unloading val<.=ac35f10e 35.4MiB>
2021/07/08 17:19:38 scheduler task d7452493 (flow a3bb669d): unloaded val<.=e58cec98 35.4MiB>
2021/07/08 17:19:38 scheduler task d7452493 (flow a3bb669d): unloaded val<.=d7286acd 35.4MiB>
2021/07/08 17:19:38 scheduler task d7452493 (flow a3bb669d): unloading (try 0): successful, next state: complete
2021/07/08 17:19:38  <-  n100.r07.s011.Main.out_file a3bb669d ok     exec 5m17s 35.7MiB
2021/07/08 17:19:38 n100.r07.s011.Main.out_file a3bb669d n100/r07/n100.r07.s011.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:db74e9a49bbf8665749bedf1229a2441803c61847174b1dbca438bd360343774
	sha256:a3bb669d77e63dd42f1ab47db2b98f3a3aba0f2b961a86ee2f6e76810d3a591e
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d7452493516ffc117717075d62728a935e94a19f8ecea930df27814613b1fc46
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s011_output"
	    wget -O "n100.r07.s011_output/n100.r07.s011.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s011_output/n100.r07.s011.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s011_output/n100.r07.s011.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s011_output/n100.r07.s011.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s011_output/n100.r07.s011.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s011_output/n100.r07.s011.reference.fas" "n100.r07.s011_output/n100.r07.s011.fq1.fastq" "n100.r07.s011_output/n100.r07.s011.fq2.fastq" | samtools view -bS - > "n100.r07.s011_output/n100.r07.s011.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s011_output/n100.r07.s011.untrimmed.sorted.bam" "n100.r07.s011_output/n100.r07.s011.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s011_output/n100.r07.s011.untrimmed.sorted.bam" -b "n100.r07.s011_output/n100.r07.s011.primers.bed" -p "n100.r07.s011_output/n100.r07.s011.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s011_output/n100.r07.s011.trimmed.sorted.bam" "n100.r07.s011_output/n100.r07.s011.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s011_output/n100.r07.s011.reference.fas" "n100.r07.s011_output/n100.r07.s011.trimmed.sorted.bam" > "n100.r07.s011_output/n100.r07.s011.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s011_output/n100.r07.s011.reference.fas" --call-indels "n100.r07.s011_output/n100.r07.s011.trimmed.sorted.bam" > "n100.r07.s011_output/n100.r07.s011.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s011_output/n100.r07.s011.trimmed.sorted.bam" > "n100.r07.s011_output/n100.r07.s011.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s011_output/n100.r07.s011.depth.txt" "n100.r07.s011_output/n100.r07.s011.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s011_output/n100.r07.s011.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s011_output/n100.r07.s011.reference.fas" | bcftools consensus -m "n100.r07.s011_output/n100.r07.s011.low_depth.tsv" tmp.vcf.gz > "n100.r07.s011_output/n100.r07.s011.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s011_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:30c036af6e61b64a1cab6e3ad4f581de05b80c84b612a9ef530f95a674a2c451 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.9MiB max=126.2MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=699B max=2.0KiB
2021/07/08 17:19:38 scheduler task 5af80543 (flow d716a06b): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s011.tar.gz resources {}
2021/07/08 17:19:38  ->  n100.r07.s011.Main.cp_out_file d716a06b exec extern s3://niema-test/n100/r07/n100.r07.s011.tar.gz 35.7MiB
2021/07/08 17:19:38 scheduler task f992ad8d (flow b7fedadc): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:38 scheduler task f992ad8d (flow b7fedadc): unloading (try 0): started
2021/07/08 17:19:38 scheduler task f992ad8d (flow b7fedadc): unloading list<val<.=f4e4baa7 35.8MiB> 35.8MiB>
2021/07/08 17:19:38 scheduler task f992ad8d (flow b7fedadc): unloading val<.=cb85b10f 35.4MiB>
2021/07/08 17:19:38 scheduler task f992ad8d (flow b7fedadc): unloading val<.=d5cd0d35 35.4MiB>
2021/07/08 17:19:38 scheduler task 094c83a9 (flow 0455dc2c): unloaded list<val<.=85b8459c 35.8MiB> 35.8MiB>
2021/07/08 17:19:38 scheduler task 094c83a9 (flow 0455dc2c): unloaded val<.=734220a9 35.4MiB>
2021/07/08 17:19:38 scheduler task 094c83a9 (flow 0455dc2c): unloaded val<.=ac35f10e 35.4MiB>
2021/07/08 17:19:38 scheduler task 094c83a9 (flow 0455dc2c): unloading (try 0): successful, next state: complete
2021/07/08 17:19:38  <-  n100.r07.s055.Main.out_file 0455dc2c ok     exec 5m17s 35.8MiB
2021/07/08 17:19:38 n100.r07.s055.Main.out_file 0455dc2c n100/r07/n100.r07.s055.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4ea36f5db826336b8849fd90a3a0045677dd9f301601b94803282dc97fa7e19e
	sha256:0455dc2c6c1b31d7183fa5cf72fb1f34baf88ca217224e92bffe9aec4a5a4da4
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/094c83a9088a352badb26dd414af5f62c88d70c5d3130d3e734cbf1419aef9e4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s055_output"
	    wget -O "n100.r07.s055_output/n100.r07.s055.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s055_output/n100.r07.s055.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s055_output/n100.r07.s055.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s055_output/n100.r07.s055.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s055_output/n100.r07.s055.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s055_output/n100.r07.s055.reference.fas" "n100.r07.s055_output/n100.r07.s055.fq1.fastq" "n100.r07.s055_output/n100.r07.s055.fq2.fastq" | samtools view -bS - > "n100.r07.s055_output/n100.r07.s055.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s055_output/n100.r07.s055.untrimmed.sorted.bam" "n100.r07.s055_output/n100.r07.s055.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s055_output/n100.r07.s055.untrimmed.sorted.bam" -b "n100.r07.s055_output/n100.r07.s055.primers.bed" -p "n100.r07.s055_output/n100.r07.s055.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s055_output/n100.r07.s055.trimmed.sorted.bam" "n100.r07.s055_output/n100.r07.s055.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s055_output/n100.r07.s055.reference.fas" "n100.r07.s055_output/n100.r07.s055.trimmed.sorted.bam" > "n100.r07.s055_output/n100.r07.s055.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s055_output/n100.r07.s055.reference.fas" --call-indels "n100.r07.s055_output/n100.r07.s055.trimmed.sorted.bam" > "n100.r07.s055_output/n100.r07.s055.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s055_output/n100.r07.s055.trimmed.sorted.bam" > "n100.r07.s055_output/n100.r07.s055.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s055_output/n100.r07.s055.depth.txt" "n100.r07.s055_output/n100.r07.s055.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s055_output/n100.r07.s055.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s055_output/n100.r07.s055.reference.fas" | bcftools consensus -m "n100.r07.s055_output/n100.r07.s055.low_depth.tsv" tmp.vcf.gz > "n100.r07.s055_output/n100.r07.s055.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s055_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:85b8459c7d2bb90fc66f9e5ddcaf160a78f58c25b62df73fb4c0a5cfeb13f761 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.7MiB max=128.8MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=695B max=2.1KiB
2021/07/08 17:19:38 scheduler task e8d1d28d (flow 6e81fb9e): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s055.tar.gz resources {}
2021/07/08 17:19:38  ->  n100.r07.s055.Main.cp_out_file 6e81fb9e exec extern s3://niema-test/n100/r07/n100.r07.s055.tar.gz 35.8MiB
2021/07/08 17:19:38 scheduler task f992ad8d (flow b7fedadc): unloaded list<val<.=f4e4baa7 35.8MiB> 35.8MiB>
2021/07/08 17:19:38 scheduler task f992ad8d (flow b7fedadc): unloaded val<.=d5cd0d35 35.4MiB>
2021/07/08 17:19:38 scheduler task f992ad8d (flow b7fedadc): unloaded val<.=cb85b10f 35.4MiB>
2021/07/08 17:19:38 scheduler task f992ad8d (flow b7fedadc): unloading (try 0): successful, next state: complete
2021/07/08 17:19:38  <-  n100.r07.s097.Main.out_file b7fedadc ok     exec 5m17s 35.8MiB
2021/07/08 17:19:38 n100.r07.s097.Main.out_file b7fedadc n100/r07/n100.r07.s097.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c2de1d4c5cb0b3d3b7be3ae6d4de4a743622603460568c2e0ae0715fca9445a3
	sha256:b7fedadc0621645e441fac1aac7ba50c5cb6713265a38ae628ba7e90a450a405
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f992ad8d4c1b1a8033e2750a18f7eaed0b68a1b00fde5711ac1da98b6b7baa46
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s097_output"
	    wget -O "n100.r07.s097_output/n100.r07.s097.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s097_output/n100.r07.s097.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s097_output/n100.r07.s097.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s097_output/n100.r07.s097.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s097_output/n100.r07.s097.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s097_output/n100.r07.s097.reference.fas" "n100.r07.s097_output/n100.r07.s097.fq1.fastq" "n100.r07.s097_output/n100.r07.s097.fq2.fastq" | samtools view -bS - > "n100.r07.s097_output/n100.r07.s097.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s097_output/n100.r07.s097.untrimmed.sorted.bam" "n100.r07.s097_output/n100.r07.s097.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s097_output/n100.r07.s097.untrimmed.sorted.bam" -b "n100.r07.s097_output/n100.r07.s097.primers.bed" -p "n100.r07.s097_output/n100.r07.s097.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s097_output/n100.r07.s097.trimmed.sorted.bam" "n100.r07.s097_output/n100.r07.s097.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s097_output/n100.r07.s097.reference.fas" "n100.r07.s097_output/n100.r07.s097.trimmed.sorted.bam" > "n100.r07.s097_output/n100.r07.s097.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s097_output/n100.r07.s097.reference.fas" --call-indels "n100.r07.s097_output/n100.r07.s097.trimmed.sorted.bam" > "n100.r07.s097_output/n100.r07.s097.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s097_output/n100.r07.s097.trimmed.sorted.bam" > "n100.r07.s097_output/n100.r07.s097.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s097_output/n100.r07.s097.depth.txt" "n100.r07.s097_output/n100.r07.s097.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s097_output/n100.r07.s097.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s097_output/n100.r07.s097.reference.fas" | bcftools consensus -m "n100.r07.s097_output/n100.r07.s097.low_depth.tsv" tmp.vcf.gz > "n100.r07.s097_output/n100.r07.s097.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s097_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f4e4baa79fc198bc9545571941dc900e8a4a74d9a0594c0e1fe31eacb71c3333 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.8MiB max=123.7MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:19:38 scheduler task 57c6dcba (flow 25eae58a): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s097.tar.gz resources {}
2021/07/08 17:19:38  ->  n100.r07.s097.Main.cp_out_file 25eae58a exec extern s3://niema-test/n100/r07/n100.r07.s097.tar.gz 35.8MiB
2021/07/08 17:19:39 scheduler task fd193e05 (flow e299776e): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:39 scheduler task fd193e05 (flow e299776e): promoting objects (try 0): started
2021/07/08 17:19:39 scheduler task 5f2ce7d1 (flow e0ab9d71): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:39 scheduler task 5f2ce7d1 (flow e0ab9d71): promoting objects (try 0): started
2021/07/08 17:19:39 scheduler task fd193e05 (flow e299776e): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:39 scheduler task fd193e05 (flow e299776e): retrieving diagnostic output (try 0): started
2021/07/08 17:19:39 scheduler task 5af80543 (flow d716a06b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:30c036af6e61b64a1cab6e3ad4f581de05b80c84b612a9ef530f95a674a2c451 -> s3://niema-test/n100/r07/n100.r07.s011.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:39  <-  n100.r07.s011.Main.cp_out_file d716a06b ok   extern 0s 35.7MiB
2021/07/08 17:19:39 scheduler task 5f2ce7d1 (flow e0ab9d71): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:39 scheduler task 5f2ce7d1 (flow e0ab9d71): retrieving diagnostic output (try 0): started
2021/07/08 17:19:39 scheduler task e8d1d28d (flow 6e81fb9e): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:85b8459c7d2bb90fc66f9e5ddcaf160a78f58c25b62df73fb4c0a5cfeb13f761 -> s3://niema-test/n100/r07/n100.r07.s055.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:19:39  <-  n100.r07.s055.Main.cp_out_file 6e81fb9e ok   extern 0s 35.8MiB
2021/07/08 17:19:39 scheduler task d01e6baf (flow 1bff83e3): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:39 scheduler task fd193e05 (flow e299776e): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:39 scheduler task d01e6baf (flow 1bff83e3): promoting objects (try 0): started
2021/07/08 17:19:39 scheduler task fd193e05 (flow e299776e): retrieving result (try 0): started
2021/07/08 17:19:39 scheduler task 5f2ce7d1 (flow e0ab9d71): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:39 scheduler task 5f2ce7d1 (flow e0ab9d71): retrieving result (try 0): started
2021/07/08 17:19:39 scheduler task d01e6baf (flow 1bff83e3): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:39 scheduler task fd193e05 (flow e299776e): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:39 scheduler task d01e6baf (flow 1bff83e3): retrieving diagnostic output (try 0): started
2021/07/08 17:19:39 scheduler task fd193e05 (flow e299776e): transferring output (try 0): started
2021/07/08 17:19:39 scheduler task 5f2ce7d1 (flow e0ab9d71): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:39 scheduler task 5f2ce7d1 (flow e0ab9d71): transferring output (try 0): started
2021/07/08 17:19:39 scheduler task d01e6baf (flow 1bff83e3): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:39 scheduler task d01e6baf (flow 1bff83e3): retrieving result (try 0): started
2021/07/08 17:19:39 scheduler task d01e6baf (flow 1bff83e3): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:39 scheduler task d01e6baf (flow 1bff83e3): transferring output (try 0): started
2021/07/08 17:19:40 scheduler task 3d94ce3a (flow 60c3d9b3): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:40 scheduler task 3d94ce3a (flow 60c3d9b3): promoting objects (try 0): started
2021/07/08 17:19:40 scheduler task 57c6dcba (flow 25eae58a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f4e4baa79fc198bc9545571941dc900e8a4a74d9a0594c0e1fe31eacb71c3333 -> s3://niema-test/n100/r07/n100.r07.s097.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:19:40  <-  n100.r07.s097.Main.cp_out_file 25eae58a ok   extern 0s 35.8MiB
2021/07/08 17:19:40 scheduler task 3d94ce3a (flow 60c3d9b3): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:40 scheduler task 3d94ce3a (flow 60c3d9b3): retrieving diagnostic output (try 0): started
2021/07/08 17:19:40 scheduler task fd193e05 (flow e299776e): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:40 scheduler task fd193e05 (flow e299776e): unloading (try 0): started
2021/07/08 17:19:40 scheduler task fd193e05 (flow e299776e): unloading list<val<.=d2f63703 35.7MiB> 35.7MiB>
2021/07/08 17:19:40 scheduler task fd193e05 (flow e299776e): unloading val<.=82274f42 35.4MiB>
2021/07/08 17:19:40 scheduler task fd193e05 (flow e299776e): unloading val<.=77c9e9bd 35.4MiB>
2021/07/08 17:19:40 scheduler task 3d94ce3a (flow 60c3d9b3): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:40 scheduler task 3d94ce3a (flow 60c3d9b3): retrieving result (try 0): started
2021/07/08 17:19:40 scheduler task fd193e05 (flow e299776e): unloaded list<val<.=d2f63703 35.7MiB> 35.7MiB>
2021/07/08 17:19:40 scheduler task fd193e05 (flow e299776e): unloaded val<.=77c9e9bd 35.4MiB>
2021/07/08 17:19:40 scheduler task fd193e05 (flow e299776e): unloaded val<.=82274f42 35.4MiB>
2021/07/08 17:19:40 scheduler task fd193e05 (flow e299776e): unloading (try 0): successful, next state: complete
2021/07/08 17:19:40  <-  n100.r07.s013.Main.out_file e299776e ok     exec 5m18s 35.7MiB
2021/07/08 17:19:40 n100.r07.s013.Main.out_file e299776e n100/r07/n100.r07.s013.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4440493c1713f7b46a91c911dc1a4efc382e67aa8ecf5be3eac40fc4b590e923
	sha256:e299776ea94343d5afbe3debbb3bea7963ca13ef9a7fff17899271adf6303a77
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fd193e054d3b956e77ecf1743ca92e990eb8abb2f23b908ddef67311c62f38c6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s013_output"
	    wget -O "n100.r07.s013_output/n100.r07.s013.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s013_output/n100.r07.s013.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s013_output/n100.r07.s013.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s013_output/n100.r07.s013.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s013_output/n100.r07.s013.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s013_output/n100.r07.s013.reference.fas" "n100.r07.s013_output/n100.r07.s013.fq1.fastq" "n100.r07.s013_output/n100.r07.s013.fq2.fastq" | samtools view -bS - > "n100.r07.s013_output/n100.r07.s013.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s013_output/n100.r07.s013.untrimmed.sorted.bam" "n100.r07.s013_output/n100.r07.s013.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s013_output/n100.r07.s013.untrimmed.sorted.bam" -b "n100.r07.s013_output/n100.r07.s013.primers.bed" -p "n100.r07.s013_output/n100.r07.s013.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s013_output/n100.r07.s013.trimmed.sorted.bam" "n100.r07.s013_output/n100.r07.s013.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s013_output/n100.r07.s013.reference.fas" "n100.r07.s013_output/n100.r07.s013.trimmed.sorted.bam" > "n100.r07.s013_output/n100.r07.s013.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s013_output/n100.r07.s013.reference.fas" --call-indels "n100.r07.s013_output/n100.r07.s013.trimmed.sorted.bam" > "n100.r07.s013_output/n100.r07.s013.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s013_output/n100.r07.s013.trimmed.sorted.bam" > "n100.r07.s013_output/n100.r07.s013.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s013_output/n100.r07.s013.depth.txt" "n100.r07.s013_output/n100.r07.s013.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s013_output/n100.r07.s013.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s013_output/n100.r07.s013.reference.fas" | bcftools consensus -m "n100.r07.s013_output/n100.r07.s013.low_depth.tsv" tmp.vcf.gz > "n100.r07.s013_output/n100.r07.s013.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s013_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d2f63703dc31253bc5dc1b7022e0faef954e0f5ca6ec1c3262a9f51e2bf90d81 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.5MiB max=127.1MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=521B max=2.0KiB
2021/07/08 17:19:40 scheduler task 5442d110 (flow 3f9e8490): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s013.tar.gz resources {}
2021/07/08 17:19:40  ->  n100.r07.s013.Main.cp_out_file 3f9e8490 exec extern s3://niema-test/n100/r07/n100.r07.s013.tar.gz 35.7MiB
2021/07/08 17:19:40 scheduler task 3d94ce3a (flow 60c3d9b3): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:40 scheduler task 3d94ce3a (flow 60c3d9b3): transferring output (try 0): started
2021/07/08 17:19:40 scheduler task 5f2ce7d1 (flow e0ab9d71): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:40 scheduler task 5f2ce7d1 (flow e0ab9d71): unloading (try 0): started
2021/07/08 17:19:40 scheduler task 5f2ce7d1 (flow e0ab9d71): unloading list<val<.=19d07c44 35.7MiB> 35.7MiB>
2021/07/08 17:19:40 scheduler task 5f2ce7d1 (flow e0ab9d71): unloading val<.=783d723f 35.4MiB>
2021/07/08 17:19:40 scheduler task 5f2ce7d1 (flow e0ab9d71): unloading val<.=c2fbfa4d 35.4MiB>
2021/07/08 17:19:40 scheduler task d01e6baf (flow 1bff83e3): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:40 scheduler task d01e6baf (flow 1bff83e3): unloading (try 0): started
2021/07/08 17:19:40 scheduler task d01e6baf (flow 1bff83e3): unloading list<val<.=cc9530e0 35.7MiB> 35.7MiB>
2021/07/08 17:19:40 scheduler task d01e6baf (flow 1bff83e3): unloading val<.=1df1c94f 35.4MiB>
2021/07/08 17:19:40 scheduler task d01e6baf (flow 1bff83e3): unloading val<.=52bc0956 35.4MiB>
2021/07/08 17:19:40 scheduler task 5f2ce7d1 (flow e0ab9d71): unloaded list<val<.=19d07c44 35.7MiB> 35.7MiB>
2021/07/08 17:19:40 scheduler task d038551e (flow 2ad2ef89): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:40 scheduler task 5f2ce7d1 (flow e0ab9d71): unloaded val<.=c2fbfa4d 35.4MiB>
2021/07/08 17:19:40 scheduler task 5f2ce7d1 (flow e0ab9d71): unloaded val<.=783d723f 35.4MiB>
2021/07/08 17:19:40 scheduler task 5f2ce7d1 (flow e0ab9d71): unloading (try 0): successful, next state: complete
2021/07/08 17:19:40 scheduler task d038551e (flow 2ad2ef89): promoting objects (try 0): started
2021/07/08 17:19:40  <-  n100.r07.s062.Main.out_file e0ab9d71 ok     exec 5m12s 35.7MiB
2021/07/08 17:19:40 n100.r07.s062.Main.out_file e0ab9d71 n100/r07/n100.r07.s062.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a5e07e0e674cbbec92c80a3fa02167c55668773b5ec2cdfe2b8a773db44cc39c
	sha256:e0ab9d718b7e5bee3dfde1a16dc9a656619914c31a3737be90e32f88d3f85f1e
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5f2ce7d10cf00147e7e6580f104461e8af8c3177297bf49d64a2518a6a192227
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s062_output"
	    wget -O "n100.r07.s062_output/n100.r07.s062.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s062_output/n100.r07.s062.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s062_output/n100.r07.s062.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s062_output/n100.r07.s062.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s062_output/n100.r07.s062.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s062_output/n100.r07.s062.reference.fas" "n100.r07.s062_output/n100.r07.s062.fq1.fastq" "n100.r07.s062_output/n100.r07.s062.fq2.fastq" | samtools view -bS - > "n100.r07.s062_output/n100.r07.s062.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s062_output/n100.r07.s062.untrimmed.sorted.bam" "n100.r07.s062_output/n100.r07.s062.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s062_output/n100.r07.s062.untrimmed.sorted.bam" -b "n100.r07.s062_output/n100.r07.s062.primers.bed" -p "n100.r07.s062_output/n100.r07.s062.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s062_output/n100.r07.s062.trimmed.sorted.bam" "n100.r07.s062_output/n100.r07.s062.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s062_output/n100.r07.s062.reference.fas" "n100.r07.s062_output/n100.r07.s062.trimmed.sorted.bam" > "n100.r07.s062_output/n100.r07.s062.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s062_output/n100.r07.s062.reference.fas" --call-indels "n100.r07.s062_output/n100.r07.s062.trimmed.sorted.bam" > "n100.r07.s062_output/n100.r07.s062.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s062_output/n100.r07.s062.trimmed.sorted.bam" > "n100.r07.s062_output/n100.r07.s062.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s062_output/n100.r07.s062.depth.txt" "n100.r07.s062_output/n100.r07.s062.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s062_output/n100.r07.s062.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s062_output/n100.r07.s062.reference.fas" | bcftools consensus -m "n100.r07.s062_output/n100.r07.s062.low_depth.tsv" tmp.vcf.gz > "n100.r07.s062_output/n100.r07.s062.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s062_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:19d07c445ebcab6d3303b9e04c66136dedd69cc3238ebceb3f21ece0cca21582 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=23.1MiB max=125.4MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:19:40 scheduler task da81fce9 (flow 2e0507ad): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s062.tar.gz resources {}
2021/07/08 17:19:40  ->  n100.r07.s062.Main.cp_out_file 2e0507ad exec extern s3://niema-test/n100/r07/n100.r07.s062.tar.gz 35.7MiB
2021/07/08 17:19:40 scheduler task d01e6baf (flow 1bff83e3): unloaded list<val<.=cc9530e0 35.7MiB> 35.7MiB>
2021/07/08 17:19:40 scheduler task d01e6baf (flow 1bff83e3): unloaded val<.=1df1c94f 35.4MiB>
2021/07/08 17:19:40 scheduler task d01e6baf (flow 1bff83e3): unloaded val<.=52bc0956 35.4MiB>
2021/07/08 17:19:40 scheduler task d01e6baf (flow 1bff83e3): unloading (try 0): successful, next state: complete
2021/07/08 17:19:40  <-  n100.r07.s025.Main.out_file 1bff83e3 ok     exec 5m12s 35.7MiB
2021/07/08 17:19:40 n100.r07.s025.Main.out_file 1bff83e3 n100/r07/n100.r07.s025.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1288323806c6479d71947af637030c06d3fa0137d49d6e2315e18c8ce828fbcb
	sha256:1bff83e3f15ad8bb2d1777fea73b80f5722d7667c8733855c9f2e22635d79e7e
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d01e6baf63121fd6c860c2fa502e7fb4a3356db5a128646a0985c13e3a1e5813
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s025_output"
	    wget -O "n100.r07.s025_output/n100.r07.s025.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s025_output/n100.r07.s025.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s025_output/n100.r07.s025.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s025_output/n100.r07.s025.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s025_output/n100.r07.s025.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s025_output/n100.r07.s025.reference.fas" "n100.r07.s025_output/n100.r07.s025.fq1.fastq" "n100.r07.s025_output/n100.r07.s025.fq2.fastq" | samtools view -bS - > "n100.r07.s025_output/n100.r07.s025.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s025_output/n100.r07.s025.untrimmed.sorted.bam" "n100.r07.s025_output/n100.r07.s025.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s025_output/n100.r07.s025.untrimmed.sorted.bam" -b "n100.r07.s025_output/n100.r07.s025.primers.bed" -p "n100.r07.s025_output/n100.r07.s025.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s025_output/n100.r07.s025.trimmed.sorted.bam" "n100.r07.s025_output/n100.r07.s025.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s025_output/n100.r07.s025.reference.fas" "n100.r07.s025_output/n100.r07.s025.trimmed.sorted.bam" > "n100.r07.s025_output/n100.r07.s025.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s025_output/n100.r07.s025.reference.fas" --call-indels "n100.r07.s025_output/n100.r07.s025.trimmed.sorted.bam" > "n100.r07.s025_output/n100.r07.s025.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s025_output/n100.r07.s025.trimmed.sorted.bam" > "n100.r07.s025_output/n100.r07.s025.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s025_output/n100.r07.s025.depth.txt" "n100.r07.s025_output/n100.r07.s025.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s025_output/n100.r07.s025.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s025_output/n100.r07.s025.reference.fas" | bcftools consensus -m "n100.r07.s025_output/n100.r07.s025.low_depth.tsv" tmp.vcf.gz > "n100.r07.s025_output/n100.r07.s025.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s025_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:cc9530e061bab2177f7c17135abc23688d893033252348ece105025db518ebf4 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.3MiB max=127.8MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=695B max=2.0KiB
2021/07/08 17:19:40 scheduler task fdfa7c8a (flow f52a4a19): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s025.tar.gz resources {}
2021/07/08 17:19:40  ->  n100.r07.s025.Main.cp_out_file f52a4a19 exec extern s3://niema-test/n100/r07/n100.r07.s025.tar.gz 35.7MiB
2021/07/08 17:19:40 scheduler task d038551e (flow 2ad2ef89): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:40 scheduler task d038551e (flow 2ad2ef89): retrieving diagnostic output (try 0): started
2021/07/08 17:19:40 scheduler task d038551e (flow 2ad2ef89): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:40 scheduler task d038551e (flow 2ad2ef89): retrieving result (try 0): started
2021/07/08 17:19:40 scheduler task d038551e (flow 2ad2ef89): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:40 scheduler task d038551e (flow 2ad2ef89): transferring output (try 0): started
2021/07/08 17:19:40 scheduler task b41c06f5 (flow 602e5744): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:40 scheduler task b41c06f5 (flow 602e5744): promoting objects (try 0): started
2021/07/08 17:19:40 scheduler task b41c06f5 (flow 602e5744): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:40 scheduler task b41c06f5 (flow 602e5744): retrieving diagnostic output (try 0): started
2021/07/08 17:19:40 scheduler task 3d94ce3a (flow 60c3d9b3): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:40 scheduler task 3d94ce3a (flow 60c3d9b3): unloading (try 0): started
2021/07/08 17:19:40 scheduler task 3d94ce3a (flow 60c3d9b3): unloading list<val<.=393d74cb 35.7MiB> 35.7MiB>
2021/07/08 17:19:40 scheduler task 3d94ce3a (flow 60c3d9b3): unloading val<.=3327d968 35.4MiB>
2021/07/08 17:19:40 scheduler task 3d94ce3a (flow 60c3d9b3): unloading val<.=7ed7e893 35.4MiB>
2021/07/08 17:19:41 scheduler task 3f55473f (flow 3d776298): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:41 scheduler task b41c06f5 (flow 602e5744): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:41 scheduler task 3f55473f (flow 3d776298): promoting objects (try 0): started
2021/07/08 17:19:41 scheduler task b41c06f5 (flow 602e5744): retrieving result (try 0): started
2021/07/08 17:19:41 scheduler task 3d94ce3a (flow 60c3d9b3): unloaded val<.=3327d968 35.4MiB>
2021/07/08 17:19:41 scheduler task 3d94ce3a (flow 60c3d9b3): unloaded list<val<.=393d74cb 35.7MiB> 35.7MiB>
2021/07/08 17:19:41 scheduler task 3d94ce3a (flow 60c3d9b3): unloaded val<.=7ed7e893 35.4MiB>
2021/07/08 17:19:41 scheduler task 3d94ce3a (flow 60c3d9b3): unloading (try 0): successful, next state: complete
2021/07/08 17:19:41  <-  n100.r07.s039.Main.out_file 60c3d9b3 ok     exec 5m13s 35.7MiB
2021/07/08 17:19:41 n100.r07.s039.Main.out_file 60c3d9b3 n100/r07/n100.r07.s039.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:69fef3656712c0a38c71624b8f6e14e986ba77d345ec22028f55f5e262579c01
	sha256:60c3d9b3822164c26e4e1f1df39a14433f93186551581d3292452130baa1b577
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3d94ce3acff269334bb3b3b8363e1166289543dd50f24201bc7cdcf2d125c389
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s039_output"
	    wget -O "n100.r07.s039_output/n100.r07.s039.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s039_output/n100.r07.s039.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s039_output/n100.r07.s039.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s039_output/n100.r07.s039.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s039_output/n100.r07.s039.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s039_output/n100.r07.s039.reference.fas" "n100.r07.s039_output/n100.r07.s039.fq1.fastq" "n100.r07.s039_output/n100.r07.s039.fq2.fastq" | samtools view -bS - > "n100.r07.s039_output/n100.r07.s039.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s039_output/n100.r07.s039.untrimmed.sorted.bam" "n100.r07.s039_output/n100.r07.s039.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s039_output/n100.r07.s039.untrimmed.sorted.bam" -b "n100.r07.s039_output/n100.r07.s039.primers.bed" -p "n100.r07.s039_output/n100.r07.s039.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s039_output/n100.r07.s039.trimmed.sorted.bam" "n100.r07.s039_output/n100.r07.s039.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s039_output/n100.r07.s039.reference.fas" "n100.r07.s039_output/n100.r07.s039.trimmed.sorted.bam" > "n100.r07.s039_output/n100.r07.s039.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s039_output/n100.r07.s039.reference.fas" --call-indels "n100.r07.s039_output/n100.r07.s039.trimmed.sorted.bam" > "n100.r07.s039_output/n100.r07.s039.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s039_output/n100.r07.s039.trimmed.sorted.bam" > "n100.r07.s039_output/n100.r07.s039.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s039_output/n100.r07.s039.depth.txt" "n100.r07.s039_output/n100.r07.s039.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s039_output/n100.r07.s039.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s039_output/n100.r07.s039.reference.fas" | bcftools consensus -m "n100.r07.s039_output/n100.r07.s039.low_depth.tsv" tmp.vcf.gz > "n100.r07.s039_output/n100.r07.s039.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s039_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:393d74cbff1c9886f4375d5e7a08c907e6729f62fae020bd3239ad7401a32643 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.9MiB max=128.2MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=698B max=2.0KiB
2021/07/08 17:19:41 scheduler task 5442d110 (flow 3f9e8490): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d2f63703dc31253bc5dc1b7022e0faef954e0f5ca6ec1c3262a9f51e2bf90d81 -> s3://niema-test/n100/r07/n100.r07.s013.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:41  <-  n100.r07.s013.Main.cp_out_file 3f9e8490 ok   extern 0s 35.7MiB
2021/07/08 17:19:41 scheduler task c8c1fff9 (flow ea2ab21b): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s039.tar.gz resources {}
2021/07/08 17:19:41  ->  n100.r07.s039.Main.cp_out_file ea2ab21b exec extern s3://niema-test/n100/r07/n100.r07.s039.tar.gz 35.7MiB
2021/07/08 17:19:41 scheduler task 3f55473f (flow 3d776298): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:41 scheduler task b41c06f5 (flow 602e5744): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:41 scheduler task 3f55473f (flow 3d776298): retrieving diagnostic output (try 0): started
2021/07/08 17:19:41 scheduler task b41c06f5 (flow 602e5744): transferring output (try 0): started
2021/07/08 17:19:41 scheduler task 3f55473f (flow 3d776298): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:41 scheduler task 3f55473f (flow 3d776298): retrieving result (try 0): started
2021/07/08 17:19:41 scheduler task d038551e (flow 2ad2ef89): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:41 scheduler task d038551e (flow 2ad2ef89): unloading (try 0): started
2021/07/08 17:19:41 scheduler task d038551e (flow 2ad2ef89): unloading list<val<.=eb05b2e0 35.7MiB> 35.7MiB>
2021/07/08 17:19:41 scheduler task d038551e (flow 2ad2ef89): unloading val<.=b7f5c2cc 35.4MiB>
2021/07/08 17:19:41 scheduler task d038551e (flow 2ad2ef89): unloading val<.=e6bd128b 35.4MiB>
2021/07/08 17:19:41 scheduler task 3f55473f (flow 3d776298): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:41 scheduler task 3f55473f (flow 3d776298): transferring output (try 0): started
2021/07/08 17:19:41 scheduler task da81fce9 (flow 2e0507ad): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:19d07c445ebcab6d3303b9e04c66136dedd69cc3238ebceb3f21ece0cca21582 -> s3://niema-test/n100/r07/n100.r07.s062.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:41  <-  n100.r07.s062.Main.cp_out_file 2e0507ad ok   extern 0s 35.7MiB
2021/07/08 17:19:41 scheduler task adc32aa7 (flow 3ba0729e): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:41 scheduler task adc32aa7 (flow 3ba0729e): promoting objects (try 0): started
2021/07/08 17:19:41 scheduler task d038551e (flow 2ad2ef89): unloaded list<val<.=eb05b2e0 35.7MiB> 35.7MiB>
2021/07/08 17:19:41 scheduler task d038551e (flow 2ad2ef89): unloaded val<.=e6bd128b 35.4MiB>
2021/07/08 17:19:41 scheduler task d038551e (flow 2ad2ef89): unloaded val<.=b7f5c2cc 35.4MiB>
2021/07/08 17:19:41 scheduler task d038551e (flow 2ad2ef89): unloading (try 0): successful, next state: complete
2021/07/08 17:19:41  <-  n100.r07.s078.Main.out_file 2ad2ef89 ok     exec 5m20s 35.7MiB
2021/07/08 17:19:41 n100.r07.s078.Main.out_file 2ad2ef89 n100/r07/n100.r07.s078.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7f1291734a13263db1b4bd01e47198a8f3b8cfb14662c90953c22d8ae2983ff5
	sha256:2ad2ef89fb68887ce5d13d851976873550a8d9220fe05a4366e6a69f0d12d183
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d038551e5c73523a665b0087a28e93bbaabf63dbe0030d66931d13e65c50313b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s078_output"
	    wget -O "n100.r07.s078_output/n100.r07.s078.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s078_output/n100.r07.s078.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s078_output/n100.r07.s078.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s078_output/n100.r07.s078.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s078_output/n100.r07.s078.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s078_output/n100.r07.s078.reference.fas" "n100.r07.s078_output/n100.r07.s078.fq1.fastq" "n100.r07.s078_output/n100.r07.s078.fq2.fastq" | samtools view -bS - > "n100.r07.s078_output/n100.r07.s078.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s078_output/n100.r07.s078.untrimmed.sorted.bam" "n100.r07.s078_output/n100.r07.s078.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s078_output/n100.r07.s078.untrimmed.sorted.bam" -b "n100.r07.s078_output/n100.r07.s078.primers.bed" -p "n100.r07.s078_output/n100.r07.s078.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s078_output/n100.r07.s078.trimmed.sorted.bam" "n100.r07.s078_output/n100.r07.s078.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s078_output/n100.r07.s078.reference.fas" "n100.r07.s078_output/n100.r07.s078.trimmed.sorted.bam" > "n100.r07.s078_output/n100.r07.s078.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s078_output/n100.r07.s078.reference.fas" --call-indels "n100.r07.s078_output/n100.r07.s078.trimmed.sorted.bam" > "n100.r07.s078_output/n100.r07.s078.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s078_output/n100.r07.s078.trimmed.sorted.bam" > "n100.r07.s078_output/n100.r07.s078.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s078_output/n100.r07.s078.depth.txt" "n100.r07.s078_output/n100.r07.s078.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s078_output/n100.r07.s078.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s078_output/n100.r07.s078.reference.fas" | bcftools consensus -m "n100.r07.s078_output/n100.r07.s078.low_depth.tsv" tmp.vcf.gz > "n100.r07.s078_output/n100.r07.s078.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s078_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:eb05b2e0a473d00ae64a8c471c674d291a83f05ecbeebcc1a84cf3504c577e8d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.4MiB max=127.1MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=871B max=2.0KiB
2021/07/08 17:19:41 scheduler task 57b5fd3c (flow 5c77ac92): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s078.tar.gz resources {}
2021/07/08 17:19:41  ->  n100.r07.s078.Main.cp_out_file 5c77ac92 exec extern s3://niema-test/n100/r07/n100.r07.s078.tar.gz 35.7MiB
2021/07/08 17:19:41 scheduler task adc32aa7 (flow 3ba0729e): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:41 scheduler task adc32aa7 (flow 3ba0729e): retrieving diagnostic output (try 0): started
2021/07/08 17:19:41 scheduler task aae9bef3 (flow 5c374ba7): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:41 scheduler task fdfa7c8a (flow f52a4a19): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:cc9530e061bab2177f7c17135abc23688d893033252348ece105025db518ebf4 -> s3://niema-test/n100/r07/n100.r07.s025.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:41  <-  n100.r07.s025.Main.cp_out_file f52a4a19 ok   extern 0s 35.7MiB
2021/07/08 17:19:41 scheduler task aae9bef3 (flow 5c374ba7): promoting objects (try 0): started
2021/07/08 17:19:41 scheduler task adc32aa7 (flow 3ba0729e): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:41 scheduler task adc32aa7 (flow 3ba0729e): retrieving result (try 0): started
2021/07/08 17:19:41 scheduler task aae9bef3 (flow 5c374ba7): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:41 scheduler task aae9bef3 (flow 5c374ba7): retrieving diagnostic output (try 0): started
2021/07/08 17:19:41 scheduler task 10a99fae (flow 7b842208): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:41 scheduler task adc32aa7 (flow 3ba0729e): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:41 scheduler task 10a99fae (flow 7b842208): promoting objects (try 0): started
2021/07/08 17:19:41 scheduler task adc32aa7 (flow 3ba0729e): transferring output (try 0): started
2021/07/08 17:19:41 scheduler task aae9bef3 (flow 5c374ba7): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:41 scheduler task aae9bef3 (flow 5c374ba7): retrieving result (try 0): started
2021/07/08 17:19:41 scheduler task b41c06f5 (flow 602e5744): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:41 scheduler task b41c06f5 (flow 602e5744): unloading (try 0): started
2021/07/08 17:19:41 scheduler task b41c06f5 (flow 602e5744): unloading list<val<.=af323edb 35.7MiB> 35.7MiB>
2021/07/08 17:19:41 scheduler task b41c06f5 (flow 602e5744): unloading val<.=eae1509e 35.4MiB>
2021/07/08 17:19:41 scheduler task b41c06f5 (flow 602e5744): unloading val<.=cc0a78fa 35.4MiB>
2021/07/08 17:19:41 scheduler task 10a99fae (flow 7b842208): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:41 scheduler task 10a99fae (flow 7b842208): retrieving diagnostic output (try 0): started
2021/07/08 17:19:41 scheduler task aae9bef3 (flow 5c374ba7): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:41 scheduler task aae9bef3 (flow 5c374ba7): transferring output (try 0): started
2021/07/08 17:19:41 scheduler task b41c06f5 (flow 602e5744): unloaded list<val<.=af323edb 35.7MiB> 35.7MiB>
2021/07/08 17:19:41 scheduler task b41c06f5 (flow 602e5744): unloaded val<.=cc0a78fa 35.4MiB>
2021/07/08 17:19:41 scheduler task b41c06f5 (flow 602e5744): unloaded val<.=eae1509e 35.4MiB>
2021/07/08 17:19:41 scheduler task b41c06f5 (flow 602e5744): unloading (try 0): successful, next state: complete
2021/07/08 17:19:41  <-  n100.r07.s021.Main.out_file 602e5744 ok     exec 5m20s 35.7MiB
2021/07/08 17:19:41 n100.r07.s021.Main.out_file 602e5744 n100/r07/n100.r07.s021.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9958bd7dc3fa37b5bebb5316575c03fd8140837fa94e0cba8e9c5b2a8c8ae039
	sha256:602e5744f169061b924be6332ea111155b331607deabb5b9b5bfa590c9325a1b
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b41c06f50275cda606b67c1f2dbfbab03eeff21bcba71c1dcdb005b9a3619730
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s021_output"
	    wget -O "n100.r07.s021_output/n100.r07.s021.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s021_output/n100.r07.s021.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s021_output/n100.r07.s021.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s021_output/n100.r07.s021.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s021_output/n100.r07.s021.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s021_output/n100.r07.s021.reference.fas" "n100.r07.s021_output/n100.r07.s021.fq1.fastq" "n100.r07.s021_output/n100.r07.s021.fq2.fastq" | samtools view -bS - > "n100.r07.s021_output/n100.r07.s021.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s021_output/n100.r07.s021.untrimmed.sorted.bam" "n100.r07.s021_output/n100.r07.s021.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s021_output/n100.r07.s021.untrimmed.sorted.bam" -b "n100.r07.s021_output/n100.r07.s021.primers.bed" -p "n100.r07.s021_output/n100.r07.s021.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s021_output/n100.r07.s021.trimmed.sorted.bam" "n100.r07.s021_output/n100.r07.s021.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s021_output/n100.r07.s021.reference.fas" "n100.r07.s021_output/n100.r07.s021.trimmed.sorted.bam" > "n100.r07.s021_output/n100.r07.s021.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s021_output/n100.r07.s021.reference.fas" --call-indels "n100.r07.s021_output/n100.r07.s021.trimmed.sorted.bam" > "n100.r07.s021_output/n100.r07.s021.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s021_output/n100.r07.s021.trimmed.sorted.bam" > "n100.r07.s021_output/n100.r07.s021.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s021_output/n100.r07.s021.depth.txt" "n100.r07.s021_output/n100.r07.s021.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s021_output/n100.r07.s021.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s021_output/n100.r07.s021.reference.fas" | bcftools consensus -m "n100.r07.s021_output/n100.r07.s021.low_depth.tsv" tmp.vcf.gz > "n100.r07.s021_output/n100.r07.s021.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s021_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:af323edb661119137660e016b2cb4792f1bc76564913bf484936e7f82242d46a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.7MiB max=130.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:19:41 scheduler task 8c51d085 (flow 22015d16): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s021.tar.gz resources {}
2021/07/08 17:19:41  ->  n100.r07.s021.Main.cp_out_file 22015d16 exec extern s3://niema-test/n100/r07/n100.r07.s021.tar.gz 35.7MiB
2021/07/08 17:19:41 scheduler task 10a99fae (flow 7b842208): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:41 scheduler task 10a99fae (flow 7b842208): retrieving result (try 0): started
2021/07/08 17:19:41 scheduler task 3f55473f (flow 3d776298): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:41 scheduler task 3f55473f (flow 3d776298): unloading (try 0): started
2021/07/08 17:19:41 scheduler task 3f55473f (flow 3d776298): unloading list<val<.=4423cafc 35.8MiB> 35.8MiB>
2021/07/08 17:19:41 scheduler task 3f55473f (flow 3d776298): unloading val<.=e1c8127b 35.4MiB>
2021/07/08 17:19:41 scheduler task 3f55473f (flow 3d776298): unloading val<.=c2cd1e8b 35.4MiB>
2021/07/08 17:19:41 scheduler task c8c1fff9 (flow ea2ab21b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:393d74cbff1c9886f4375d5e7a08c907e6729f62fae020bd3239ad7401a32643 -> s3://niema-test/n100/r07/n100.r07.s039.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:41  <-  n100.r07.s039.Main.cp_out_file ea2ab21b ok   extern 0s 35.7MiB
2021/07/08 17:19:41 scheduler task 10a99fae (flow 7b842208): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:41 scheduler task 10a99fae (flow 7b842208): transferring output (try 0): started
2021/07/08 17:19:41 scheduler task 3f55473f (flow 3d776298): unloaded val<.=e1c8127b 35.4MiB>
2021/07/08 17:19:41 scheduler task 3f55473f (flow 3d776298): unloaded list<val<.=4423cafc 35.8MiB> 35.8MiB>
2021/07/08 17:19:41 scheduler task 3f55473f (flow 3d776298): unloaded val<.=c2cd1e8b 35.4MiB>
2021/07/08 17:19:41 scheduler task 3f55473f (flow 3d776298): unloading (try 0): successful, next state: complete
2021/07/08 17:19:41  <-  n100.r07.s084.Main.out_file 3d776298 ok     exec 5m20s 35.8MiB
2021/07/08 17:19:41 n100.r07.s084.Main.out_file 3d776298 n100/r07/n100.r07.s084.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:edf69997b141721a730d1a3d95148da331beac466b05d1f6b42a6556e4474f59
	sha256:3d7762987f5c3822516c27b469fa336cafbd37b5930eeb8627b30f87c375ef9b
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3f55473fe8e37c6038227e9ed1c26cc2f4c209e6593f6f2b9e39af0268306135
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s084_output"
	    wget -O "n100.r07.s084_output/n100.r07.s084.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s084_output/n100.r07.s084.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s084_output/n100.r07.s084.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s084_output/n100.r07.s084.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s084_output/n100.r07.s084.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s084_output/n100.r07.s084.reference.fas" "n100.r07.s084_output/n100.r07.s084.fq1.fastq" "n100.r07.s084_output/n100.r07.s084.fq2.fastq" | samtools view -bS - > "n100.r07.s084_output/n100.r07.s084.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s084_output/n100.r07.s084.untrimmed.sorted.bam" "n100.r07.s084_output/n100.r07.s084.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s084_output/n100.r07.s084.untrimmed.sorted.bam" -b "n100.r07.s084_output/n100.r07.s084.primers.bed" -p "n100.r07.s084_output/n100.r07.s084.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s084_output/n100.r07.s084.trimmed.sorted.bam" "n100.r07.s084_output/n100.r07.s084.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s084_output/n100.r07.s084.reference.fas" "n100.r07.s084_output/n100.r07.s084.trimmed.sorted.bam" > "n100.r07.s084_output/n100.r07.s084.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s084_output/n100.r07.s084.reference.fas" --call-indels "n100.r07.s084_output/n100.r07.s084.trimmed.sorted.bam" > "n100.r07.s084_output/n100.r07.s084.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s084_output/n100.r07.s084.trimmed.sorted.bam" > "n100.r07.s084_output/n100.r07.s084.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s084_output/n100.r07.s084.depth.txt" "n100.r07.s084_output/n100.r07.s084.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s084_output/n100.r07.s084.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s084_output/n100.r07.s084.reference.fas" | bcftools consensus -m "n100.r07.s084_output/n100.r07.s084.low_depth.tsv" tmp.vcf.gz > "n100.r07.s084_output/n100.r07.s084.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s084_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:4423cafc110f61023902b82acf8245b4b3106b458cf6453bd3e7dceacb8613b3 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.5MiB max=124.9MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=697B max=2.0KiB
2021/07/08 17:19:41 scheduler task 52647872 (flow 94ca2145): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s084.tar.gz resources {}
2021/07/08 17:19:41  ->  n100.r07.s084.Main.cp_out_file 94ca2145 exec extern s3://niema-test/n100/r07/n100.r07.s084.tar.gz 35.8MiB
2021/07/08 17:19:42 scheduler task adc32aa7 (flow 3ba0729e): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:42 scheduler task adc32aa7 (flow 3ba0729e): unloading (try 0): started
2021/07/08 17:19:42 scheduler task adc32aa7 (flow 3ba0729e): unloading list<val<.=4bfed469 35.7MiB> 35.7MiB>
2021/07/08 17:19:42 scheduler task adc32aa7 (flow 3ba0729e): unloading val<.=32f12b48 35.4MiB>
2021/07/08 17:19:42 scheduler task adc32aa7 (flow 3ba0729e): unloading val<.=a2d61145 35.4MiB>
2021/07/08 17:19:42 scheduler task aae9bef3 (flow 5c374ba7): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:42 scheduler task aae9bef3 (flow 5c374ba7): unloading (try 0): started
2021/07/08 17:19:42 scheduler task aae9bef3 (flow 5c374ba7): unloading list<val<.=7b6373e4 35.7MiB> 35.7MiB>
2021/07/08 17:19:42 scheduler task aae9bef3 (flow 5c374ba7): unloading val<.=eb588c18 35.4MiB>
2021/07/08 17:19:42 scheduler task aae9bef3 (flow 5c374ba7): unloading val<.=3117cc46 35.4MiB>
2021/07/08 17:19:42 scheduler task adc32aa7 (flow 3ba0729e): unloaded list<val<.=4bfed469 35.7MiB> 35.7MiB>
2021/07/08 17:19:42 scheduler task adc32aa7 (flow 3ba0729e): unloaded val<.=32f12b48 35.4MiB>
2021/07/08 17:19:42 scheduler task adc32aa7 (flow 3ba0729e): unloaded val<.=a2d61145 35.4MiB>
2021/07/08 17:19:42 scheduler task adc32aa7 (flow 3ba0729e): unloading (try 0): successful, next state: complete
2021/07/08 17:19:42  <-  n100.r07.s090.Main.out_file 3ba0729e ok     exec 5m20s 35.7MiB
2021/07/08 17:19:42 n100.r07.s090.Main.out_file 3ba0729e n100/r07/n100.r07.s090.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:67fd9e606fa4c33f562aaebccfea512572d04e322e3cfd13f7be1b122793512c
	sha256:3ba0729e6cb3634949fa67ed52befdb6ca43a60bf35c4c31e04a082dcdabab98
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/adc32aa79fa56fac717c4ca6ae846ba7783dc743fdc10882b73e792dccfbe601
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s090_output"
	    wget -O "n100.r07.s090_output/n100.r07.s090.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s090_output/n100.r07.s090.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s090_output/n100.r07.s090.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s090_output/n100.r07.s090.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s090_output/n100.r07.s090.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s090_output/n100.r07.s090.reference.fas" "n100.r07.s090_output/n100.r07.s090.fq1.fastq" "n100.r07.s090_output/n100.r07.s090.fq2.fastq" | samtools view -bS - > "n100.r07.s090_output/n100.r07.s090.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s090_output/n100.r07.s090.untrimmed.sorted.bam" "n100.r07.s090_output/n100.r07.s090.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s090_output/n100.r07.s090.untrimmed.sorted.bam" -b "n100.r07.s090_output/n100.r07.s090.primers.bed" -p "n100.r07.s090_output/n100.r07.s090.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s090_output/n100.r07.s090.trimmed.sorted.bam" "n100.r07.s090_output/n100.r07.s090.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s090_output/n100.r07.s090.reference.fas" "n100.r07.s090_output/n100.r07.s090.trimmed.sorted.bam" > "n100.r07.s090_output/n100.r07.s090.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s090_output/n100.r07.s090.reference.fas" --call-indels "n100.r07.s090_output/n100.r07.s090.trimmed.sorted.bam" > "n100.r07.s090_output/n100.r07.s090.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s090_output/n100.r07.s090.trimmed.sorted.bam" > "n100.r07.s090_output/n100.r07.s090.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s090_output/n100.r07.s090.depth.txt" "n100.r07.s090_output/n100.r07.s090.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s090_output/n100.r07.s090.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s090_output/n100.r07.s090.reference.fas" | bcftools consensus -m "n100.r07.s090_output/n100.r07.s090.low_depth.tsv" tmp.vcf.gz > "n100.r07.s090_output/n100.r07.s090.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s090_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:4bfed469251c8d2c28cb91c73db6549b3ea49d874aa8d5f3168fb89a59b6e344 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.8MiB max=126.1MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:19:42 scheduler task 6120fea3 (flow 6b844a43): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s090.tar.gz resources {}
2021/07/08 17:19:42  ->  n100.r07.s090.Main.cp_out_file 6b844a43 exec extern s3://niema-test/n100/r07/n100.r07.s090.tar.gz 35.7MiB
2021/07/08 17:19:42 scheduler task 6d0b8c8b (flow 8af16490): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:42 scheduler task 6d0b8c8b (flow 8af16490): promoting objects (try 0): started
2021/07/08 17:19:42 scheduler task aae9bef3 (flow 5c374ba7): unloaded list<val<.=7b6373e4 35.7MiB> 35.7MiB>
2021/07/08 17:19:42 scheduler task aae9bef3 (flow 5c374ba7): unloaded val<.=eb588c18 35.4MiB>
2021/07/08 17:19:42 scheduler task aae9bef3 (flow 5c374ba7): unloaded val<.=3117cc46 35.4MiB>
2021/07/08 17:19:42 scheduler task aae9bef3 (flow 5c374ba7): unloading (try 0): successful, next state: complete
2021/07/08 17:19:42  <-  n100.r07.s091.Main.out_file 5c374ba7 ok     exec 5m14s 35.7MiB
2021/07/08 17:19:42 n100.r07.s091.Main.out_file 5c374ba7 n100/r07/n100.r07.s091.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1b6ca2e006bb6bfbadd1d25721acdee2de62d78a0af540ee9e8a592bdf3b7c78
	sha256:5c374ba79cb822c363f3b30b14adf35ad82ee959dd271704ad073a6ce759ac85
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/aae9bef33418366b09a440c428cc4970648a2fd971e32ddfbc70ab3c841b16b7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s091_output"
	    wget -O "n100.r07.s091_output/n100.r07.s091.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s091_output/n100.r07.s091.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s091_output/n100.r07.s091.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s091_output/n100.r07.s091.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s091_output/n100.r07.s091.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s091_output/n100.r07.s091.reference.fas" "n100.r07.s091_output/n100.r07.s091.fq1.fastq" "n100.r07.s091_output/n100.r07.s091.fq2.fastq" | samtools view -bS - > "n100.r07.s091_output/n100.r07.s091.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s091_output/n100.r07.s091.untrimmed.sorted.bam" "n100.r07.s091_output/n100.r07.s091.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s091_output/n100.r07.s091.untrimmed.sorted.bam" -b "n100.r07.s091_output/n100.r07.s091.primers.bed" -p "n100.r07.s091_output/n100.r07.s091.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s091_output/n100.r07.s091.trimmed.sorted.bam" "n100.r07.s091_output/n100.r07.s091.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s091_output/n100.r07.s091.reference.fas" "n100.r07.s091_output/n100.r07.s091.trimmed.sorted.bam" > "n100.r07.s091_output/n100.r07.s091.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s091_output/n100.r07.s091.reference.fas" --call-indels "n100.r07.s091_output/n100.r07.s091.trimmed.sorted.bam" > "n100.r07.s091_output/n100.r07.s091.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s091_output/n100.r07.s091.trimmed.sorted.bam" > "n100.r07.s091_output/n100.r07.s091.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s091_output/n100.r07.s091.depth.txt" "n100.r07.s091_output/n100.r07.s091.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s091_output/n100.r07.s091.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s091_output/n100.r07.s091.reference.fas" | bcftools consensus -m "n100.r07.s091_output/n100.r07.s091.low_depth.tsv" tmp.vcf.gz > "n100.r07.s091_output/n100.r07.s091.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s091_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:7b6373e48c8f315983a34bd7b9fd4a26be43005b65cd6a955d43fda8eeb5469d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.0MiB max=126.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:19:42 scheduler task 922f4b36 (flow 58f8cbce): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s091.tar.gz resources {}
2021/07/08 17:19:42  ->  n100.r07.s091.Main.cp_out_file 58f8cbce exec extern s3://niema-test/n100/r07/n100.r07.s091.tar.gz 35.7MiB
2021/07/08 17:19:42 scheduler task 10a99fae (flow 7b842208): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:42 scheduler task 10a99fae (flow 7b842208): unloading (try 0): started
2021/07/08 17:19:42 scheduler task 10a99fae (flow 7b842208): unloading list<val<.=edc05ec1 35.7MiB> 35.7MiB>
2021/07/08 17:19:42 scheduler task 10a99fae (flow 7b842208): unloading val<.=7e325fcf 35.4MiB>
2021/07/08 17:19:42 scheduler task 10a99fae (flow 7b842208): unloading val<.=e47ef776 35.4MiB>
2021/07/08 17:19:42 scheduler task 6d0b8c8b (flow 8af16490): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:42 scheduler task 6d0b8c8b (flow 8af16490): retrieving diagnostic output (try 0): started
2021/07/08 17:19:42 scheduler task 10a99fae (flow 7b842208): unloaded val<.=7e325fcf 35.4MiB>
2021/07/08 17:19:42 scheduler task 10a99fae (flow 7b842208): unloaded val<.=e47ef776 35.4MiB>
2021/07/08 17:19:42 scheduler task 10a99fae (flow 7b842208): unloaded list<val<.=edc05ec1 35.7MiB> 35.7MiB>
2021/07/08 17:19:42 scheduler task 10a99fae (flow 7b842208): unloading (try 0): successful, next state: complete
2021/07/08 17:19:42  <-  n100.r07.s041.Main.out_file 7b842208 ok     exec 5m14s 35.7MiB
2021/07/08 17:19:42 n100.r07.s041.Main.out_file 7b842208 n100/r07/n100.r07.s041.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4467f2e3fa63bcfe7a93883d45bacfe31c7f88eb93848c1bd042ef69b94219af
	sha256:7b842208cf17d16cbcff4650f81c6a4884be4f8f84caa74fd3391d19c3a0db5a
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/10a99fae993f8493df5a81d8545f525102b5c4f9b71ae88550a9627d7faf1ff3
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s041_output"
	    wget -O "n100.r07.s041_output/n100.r07.s041.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s041_output/n100.r07.s041.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s041_output/n100.r07.s041.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s041_output/n100.r07.s041.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s041_output/n100.r07.s041.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s041_output/n100.r07.s041.reference.fas" "n100.r07.s041_output/n100.r07.s041.fq1.fastq" "n100.r07.s041_output/n100.r07.s041.fq2.fastq" | samtools view -bS - > "n100.r07.s041_output/n100.r07.s041.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s041_output/n100.r07.s041.untrimmed.sorted.bam" "n100.r07.s041_output/n100.r07.s041.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s041_output/n100.r07.s041.untrimmed.sorted.bam" -b "n100.r07.s041_output/n100.r07.s041.primers.bed" -p "n100.r07.s041_output/n100.r07.s041.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s041_output/n100.r07.s041.trimmed.sorted.bam" "n100.r07.s041_output/n100.r07.s041.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s041_output/n100.r07.s041.reference.fas" "n100.r07.s041_output/n100.r07.s041.trimmed.sorted.bam" > "n100.r07.s041_output/n100.r07.s041.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s041_output/n100.r07.s041.reference.fas" --call-indels "n100.r07.s041_output/n100.r07.s041.trimmed.sorted.bam" > "n100.r07.s041_output/n100.r07.s041.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s041_output/n100.r07.s041.trimmed.sorted.bam" > "n100.r07.s041_output/n100.r07.s041.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s041_output/n100.r07.s041.depth.txt" "n100.r07.s041_output/n100.r07.s041.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s041_output/n100.r07.s041.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s041_output/n100.r07.s041.reference.fas" | bcftools consensus -m "n100.r07.s041_output/n100.r07.s041.low_depth.tsv" tmp.vcf.gz > "n100.r07.s041_output/n100.r07.s041.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s041_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:edc05ec169e8f04e7acbb16a810e184cfbe22c5d1c5ddbbbdb11e31767f4ee31 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.2MiB max=126.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:19:42 scheduler task 222a1c02 (flow 1abf5aab): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s041.tar.gz resources {}
2021/07/08 17:19:42  ->  n100.r07.s041.Main.cp_out_file 1abf5aab exec extern s3://niema-test/n100/r07/n100.r07.s041.tar.gz 35.7MiB
2021/07/08 17:19:42 scheduler task 6d0b8c8b (flow 8af16490): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:42 scheduler task 8c51d085 (flow 22015d16): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:af323edb661119137660e016b2cb4792f1bc76564913bf484936e7f82242d46a -> s3://niema-test/n100/r07/n100.r07.s021.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:42  <-  n100.r07.s021.Main.cp_out_file 22015d16 ok   extern 0s 35.7MiB
2021/07/08 17:19:42 scheduler task 6d0b8c8b (flow 8af16490): retrieving result (try 0): started
2021/07/08 17:19:42 scheduler task c9898fc4 (flow 8efd3fba): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:42 scheduler task c9898fc4 (flow 8efd3fba): promoting objects (try 0): started
2021/07/08 17:19:42 scheduler task 6d0b8c8b (flow 8af16490): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:42 scheduler task 6d0b8c8b (flow 8af16490): transferring output (try 0): started
2021/07/08 17:19:42 scheduler task c9898fc4 (flow 8efd3fba): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:42 scheduler task c9898fc4 (flow 8efd3fba): retrieving diagnostic output (try 0): started
2021/07/08 17:19:42 scheduler task c9898fc4 (flow 8efd3fba): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:42 scheduler task c9898fc4 (flow 8efd3fba): retrieving result (try 0): started
2021/07/08 17:19:42 scheduler task c9898fc4 (flow 8efd3fba): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:42 scheduler task c9898fc4 (flow 8efd3fba): transferring output (try 0): started
2021/07/08 17:19:42 scheduler task c0a2e047 (flow 281a5421): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:42 scheduler task c0a2e047 (flow 281a5421): promoting objects (try 0): started
2021/07/08 17:19:42 scheduler task af534387 (flow 90d93718): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:42 scheduler task af534387 (flow 90d93718): promoting objects (try 0): started
2021/07/08 17:19:42 scheduler task c0a2e047 (flow 281a5421): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:42 scheduler task c0a2e047 (flow 281a5421): retrieving diagnostic output (try 0): started
2021/07/08 17:19:42 scheduler task af534387 (flow 90d93718): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:42 scheduler task af534387 (flow 90d93718): retrieving diagnostic output (try 0): started
2021/07/08 17:19:42 scheduler task c0a2e047 (flow 281a5421): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:42 scheduler task c0a2e047 (flow 281a5421): retrieving result (try 0): started
2021/07/08 17:19:43 scheduler task 6120fea3 (flow 6b844a43): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:4bfed469251c8d2c28cb91c73db6549b3ea49d874aa8d5f3168fb89a59b6e344 -> s3://niema-test/n100/r07/n100.r07.s090.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:43  <-  n100.r07.s090.Main.cp_out_file 6b844a43 ok   extern 0s 35.7MiB
2021/07/08 17:19:43 scheduler task db4186ab (flow 9e638bb7): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:43 scheduler task af534387 (flow 90d93718): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:43 scheduler task db4186ab (flow 9e638bb7): promoting objects (try 0): started
2021/07/08 17:19:43 scheduler task c0a2e047 (flow 281a5421): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:43 scheduler task af534387 (flow 90d93718): retrieving result (try 0): started
2021/07/08 17:19:43 scheduler task c0a2e047 (flow 281a5421): transferring output (try 0): started
2021/07/08 17:19:43 scheduler task db4186ab (flow 9e638bb7): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:43 scheduler task af534387 (flow 90d93718): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:43 scheduler task db4186ab (flow 9e638bb7): retrieving diagnostic output (try 0): started
2021/07/08 17:19:43 scheduler task af534387 (flow 90d93718): transferring output (try 0): started
2021/07/08 17:19:43 scheduler task 922f4b36 (flow 58f8cbce): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:7b6373e48c8f315983a34bd7b9fd4a26be43005b65cd6a955d43fda8eeb5469d -> s3://niema-test/n100/r07/n100.r07.s091.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:43  <-  n100.r07.s091.Main.cp_out_file 58f8cbce ok   extern 0s 35.7MiB
2021/07/08 17:19:43 scheduler task db4186ab (flow 9e638bb7): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:43 scheduler task b5a99eab (flow dfc4a546): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:43 scheduler task db4186ab (flow 9e638bb7): retrieving result (try 0): started
2021/07/08 17:19:43 scheduler task b5a99eab (flow dfc4a546): promoting objects (try 0): started
2021/07/08 17:19:43 scheduler task 6d0b8c8b (flow 8af16490): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:43 scheduler task 6d0b8c8b (flow 8af16490): unloading (try 0): started
2021/07/08 17:19:43 scheduler task 6d0b8c8b (flow 8af16490): unloading list<val<.=5f4f4a4b 35.7MiB> 35.7MiB>
2021/07/08 17:19:43 scheduler task 6d0b8c8b (flow 8af16490): unloading val<.=7bc3c3a6 35.4MiB>
2021/07/08 17:19:43 scheduler task 6d0b8c8b (flow 8af16490): unloading val<.=76900d5c 35.4MiB>
2021/07/08 17:19:43 scheduler task db4186ab (flow 9e638bb7): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:43 scheduler task db4186ab (flow 9e638bb7): transferring output (try 0): started
2021/07/08 17:19:43 scheduler task b5a99eab (flow dfc4a546): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:43 scheduler task b5a99eab (flow dfc4a546): retrieving diagnostic output (try 0): started
2021/07/08 17:19:43 scheduler task 6d0b8c8b (flow 8af16490): unloaded val<.=7bc3c3a6 35.4MiB>
2021/07/08 17:19:43 scheduler task 6d0b8c8b (flow 8af16490): unloaded list<val<.=5f4f4a4b 35.7MiB> 35.7MiB>
2021/07/08 17:19:43 scheduler task 6d0b8c8b (flow 8af16490): unloaded val<.=76900d5c 35.4MiB>
2021/07/08 17:19:43 scheduler task 6d0b8c8b (flow 8af16490): unloading (try 0): successful, next state: complete
2021/07/08 17:19:43  <-  n100.r07.s068.Main.out_file 8af16490 ok     exec 5m15s 35.7MiB
2021/07/08 17:19:43 n100.r07.s068.Main.out_file 8af16490 n100/r07/n100.r07.s068.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:92ca80ad8664056db71270f0fec5f44b8cdf3c026cc5e170596d468e16a9a091
	sha256:8af1649035284f8b90d93d8bf618d590276f485a1ff3312c72777fa56306b636
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6d0b8c8b2badf4b337827471d1f6f09b1a424ac242d2dc55e92696a8a5f610aa
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s068_output"
	    wget -O "n100.r07.s068_output/n100.r07.s068.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s068_output/n100.r07.s068.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s068_output/n100.r07.s068.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s068_output/n100.r07.s068.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s068_output/n100.r07.s068.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s068_output/n100.r07.s068.reference.fas" "n100.r07.s068_output/n100.r07.s068.fq1.fastq" "n100.r07.s068_output/n100.r07.s068.fq2.fastq" | samtools view -bS - > "n100.r07.s068_output/n100.r07.s068.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s068_output/n100.r07.s068.untrimmed.sorted.bam" "n100.r07.s068_output/n100.r07.s068.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s068_output/n100.r07.s068.untrimmed.sorted.bam" -b "n100.r07.s068_output/n100.r07.s068.primers.bed" -p "n100.r07.s068_output/n100.r07.s068.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s068_output/n100.r07.s068.trimmed.sorted.bam" "n100.r07.s068_output/n100.r07.s068.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s068_output/n100.r07.s068.reference.fas" "n100.r07.s068_output/n100.r07.s068.trimmed.sorted.bam" > "n100.r07.s068_output/n100.r07.s068.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s068_output/n100.r07.s068.reference.fas" --call-indels "n100.r07.s068_output/n100.r07.s068.trimmed.sorted.bam" > "n100.r07.s068_output/n100.r07.s068.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s068_output/n100.r07.s068.trimmed.sorted.bam" > "n100.r07.s068_output/n100.r07.s068.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s068_output/n100.r07.s068.depth.txt" "n100.r07.s068_output/n100.r07.s068.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s068_output/n100.r07.s068.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s068_output/n100.r07.s068.reference.fas" | bcftools consensus -m "n100.r07.s068_output/n100.r07.s068.low_depth.tsv" tmp.vcf.gz > "n100.r07.s068_output/n100.r07.s068.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s068_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:5f4f4a4bf001372f12366dc7c3909c0710d64d58e3ff10ba10de83a98c2c0eba 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.9MiB max=127.7MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=700B max=2.1KiB
2021/07/08 17:19:43 scheduler task b413bc8d (flow a941632d): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s068.tar.gz resources {}
2021/07/08 17:19:43  ->  n100.r07.s068.Main.cp_out_file a941632d exec extern s3://niema-test/n100/r07/n100.r07.s068.tar.gz 35.7MiB
2021/07/08 17:19:43 scheduler task c9898fc4 (flow 8efd3fba): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:43 scheduler task c9898fc4 (flow 8efd3fba): unloading (try 0): started
2021/07/08 17:19:43 scheduler task c9898fc4 (flow 8efd3fba): unloading list<val<.=3fc4899a 35.7MiB> 35.7MiB>
2021/07/08 17:19:43 scheduler task c9898fc4 (flow 8efd3fba): unloading val<.=8744f546 35.4MiB>
2021/07/08 17:19:43 scheduler task c9898fc4 (flow 8efd3fba): unloading val<.=e74adf89 35.4MiB>
2021/07/08 17:19:43 scheduler task 222a1c02 (flow 1abf5aab): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:edc05ec169e8f04e7acbb16a810e184cfbe22c5d1c5ddbbbdb11e31767f4ee31 -> s3://niema-test/n100/r07/n100.r07.s041.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:43  <-  n100.r07.s041.Main.cp_out_file 1abf5aab ok   extern 0s 35.7MiB
2021/07/08 17:19:43 scheduler task b5a99eab (flow dfc4a546): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:43 scheduler task b5a99eab (flow dfc4a546): retrieving result (try 0): started
2021/07/08 17:19:43 scheduler task c9898fc4 (flow 8efd3fba): unloaded list<val<.=3fc4899a 35.7MiB> 35.7MiB>
2021/07/08 17:19:43 scheduler task c9898fc4 (flow 8efd3fba): unloaded val<.=8744f546 35.4MiB>
2021/07/08 17:19:43 scheduler task 349d60d9 (flow 61ea32de): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:43 scheduler task c9898fc4 (flow 8efd3fba): unloaded val<.=e74adf89 35.4MiB>
2021/07/08 17:19:43 scheduler task c9898fc4 (flow 8efd3fba): unloading (try 0): successful, next state: complete
2021/07/08 17:19:43 scheduler task 349d60d9 (flow 61ea32de): promoting objects (try 0): started
2021/07/08 17:19:43  <-  n100.r07.s044.Main.out_file 8efd3fba ok     exec 5m15s 35.7MiB
2021/07/08 17:19:43 n100.r07.s044.Main.out_file 8efd3fba n100/r07/n100.r07.s044.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b747c86c3a30383cf6c69b69ab47ee0331c19da40b804919ff6495477894c618
	sha256:8efd3fba9bfead8ae52dc18ef2399b985784b1bcad6fc070664829835652b7ea
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c9898fc4ec3af00cdaf63212f6342cdb2072b9f55b33b9f7b397f81f81ac5aaf
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s044_output"
	    wget -O "n100.r07.s044_output/n100.r07.s044.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s044_output/n100.r07.s044.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s044_output/n100.r07.s044.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s044_output/n100.r07.s044.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s044_output/n100.r07.s044.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s044_output/n100.r07.s044.reference.fas" "n100.r07.s044_output/n100.r07.s044.fq1.fastq" "n100.r07.s044_output/n100.r07.s044.fq2.fastq" | samtools view -bS - > "n100.r07.s044_output/n100.r07.s044.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s044_output/n100.r07.s044.untrimmed.sorted.bam" "n100.r07.s044_output/n100.r07.s044.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s044_output/n100.r07.s044.untrimmed.sorted.bam" -b "n100.r07.s044_output/n100.r07.s044.primers.bed" -p "n100.r07.s044_output/n100.r07.s044.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s044_output/n100.r07.s044.trimmed.sorted.bam" "n100.r07.s044_output/n100.r07.s044.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s044_output/n100.r07.s044.reference.fas" "n100.r07.s044_output/n100.r07.s044.trimmed.sorted.bam" > "n100.r07.s044_output/n100.r07.s044.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s044_output/n100.r07.s044.reference.fas" --call-indels "n100.r07.s044_output/n100.r07.s044.trimmed.sorted.bam" > "n100.r07.s044_output/n100.r07.s044.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s044_output/n100.r07.s044.trimmed.sorted.bam" > "n100.r07.s044_output/n100.r07.s044.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s044_output/n100.r07.s044.depth.txt" "n100.r07.s044_output/n100.r07.s044.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s044_output/n100.r07.s044.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s044_output/n100.r07.s044.reference.fas" | bcftools consensus -m "n100.r07.s044_output/n100.r07.s044.low_depth.tsv" tmp.vcf.gz > "n100.r07.s044_output/n100.r07.s044.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s044_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:3fc4899a7c4d8d3746f5c854e9dbd119ae1be2539b21c89aae6bfbf244ab19a4 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.2MiB max=128.2MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=521B max=2.0KiB
2021/07/08 17:19:43 scheduler task d5b7244c (flow e68fd223): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s044.tar.gz resources {}
2021/07/08 17:19:43  ->  n100.r07.s044.Main.cp_out_file e68fd223 exec extern s3://niema-test/n100/r07/n100.r07.s044.tar.gz 35.7MiB
2021/07/08 17:19:43 scheduler task 6b13fa0f (flow 7b3d1113): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:43 scheduler task b5a99eab (flow dfc4a546): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:43 scheduler task 6b13fa0f (flow 7b3d1113): promoting objects (try 0): started
2021/07/08 17:19:43 scheduler task b5a99eab (flow dfc4a546): transferring output (try 0): started
2021/07/08 17:19:43 scheduler task 349d60d9 (flow 61ea32de): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:43 scheduler task 349d60d9 (flow 61ea32de): retrieving diagnostic output (try 0): started
2021/07/08 17:19:43 scheduler task 6b13fa0f (flow 7b3d1113): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:43 scheduler task 6b13fa0f (flow 7b3d1113): retrieving diagnostic output (try 0): started
2021/07/08 17:19:43 scheduler task c0a2e047 (flow 281a5421): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:43 scheduler task c0a2e047 (flow 281a5421): unloading (try 0): started
2021/07/08 17:19:43 scheduler task c0a2e047 (flow 281a5421): unloading list<val<.=add95402 35.7MiB> 35.7MiB>
2021/07/08 17:19:43 scheduler task c0a2e047 (flow 281a5421): unloading val<.=8ef57abd 35.4MiB>
2021/07/08 17:19:43 scheduler task c0a2e047 (flow 281a5421): unloading val<.=05d0b7bf 35.4MiB>
2021/07/08 17:19:43 scheduler task 349d60d9 (flow 61ea32de): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:43 scheduler task 349d60d9 (flow 61ea32de): retrieving result (try 0): started
2021/07/08 17:19:43 scheduler task af534387 (flow 90d93718): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:43 scheduler task 6b13fa0f (flow 7b3d1113): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:43 scheduler task c0a2e047 (flow 281a5421): unloaded list<val<.=add95402 35.7MiB> 35.7MiB>
2021/07/08 17:19:43 scheduler task c0a2e047 (flow 281a5421): unloaded val<.=8ef57abd 35.4MiB>
2021/07/08 17:19:43 scheduler task c0a2e047 (flow 281a5421): unloaded val<.=05d0b7bf 35.4MiB>
2021/07/08 17:19:43 scheduler task c0a2e047 (flow 281a5421): unloading (try 0): successful, next state: complete
2021/07/08 17:19:43 scheduler task af534387 (flow 90d93718): unloading (try 0): started
2021/07/08 17:19:43 scheduler task af534387 (flow 90d93718): unloading list<val<.=eed7a6fb 35.7MiB> 35.7MiB>
2021/07/08 17:19:43 scheduler task af534387 (flow 90d93718): unloading val<.=a956492e 35.4MiB>
2021/07/08 17:19:43 scheduler task af534387 (flow 90d93718): unloading val<.=536b656a 35.4MiB>
2021/07/08 17:19:43 scheduler task 6b13fa0f (flow 7b3d1113): retrieving result (try 0): started
2021/07/08 17:19:43 scheduler task 349d60d9 (flow 61ea32de): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:43  <-  n100.r07.s010.Main.out_file 281a5421 ok     exec 5m7s 35.7MiB
2021/07/08 17:19:43 n100.r07.s010.Main.out_file 281a5421 n100/r07/n100.r07.s010.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4e336fcaa0ca83c606446ab0d092064aa169526eeac0d533ee3cbe494f31a26e
	sha256:281a5421aaccda90a90750545225d60ff5262e8aa6c0ce1201081d4d7131811f
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c0a2e0470d72ca4634af11e6dd971352a3bfc104e9536418861197ba15f193a3
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s010_output"
	    wget -O "n100.r07.s010_output/n100.r07.s010.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s010_output/n100.r07.s010.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s010_output/n100.r07.s010.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s010_output/n100.r07.s010.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s010_output/n100.r07.s010.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s010_output/n100.r07.s010.reference.fas" "n100.r07.s010_output/n100.r07.s010.fq1.fastq" "n100.r07.s010_output/n100.r07.s010.fq2.fastq" | samtools view -bS - > "n100.r07.s010_output/n100.r07.s010.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s010_output/n100.r07.s010.untrimmed.sorted.bam" "n100.r07.s010_output/n100.r07.s010.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s010_output/n100.r07.s010.untrimmed.sorted.bam" -b "n100.r07.s010_output/n100.r07.s010.primers.bed" -p "n100.r07.s010_output/n100.r07.s010.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s010_output/n100.r07.s010.trimmed.sorted.bam" "n100.r07.s010_output/n100.r07.s010.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s010_output/n100.r07.s010.reference.fas" "n100.r07.s010_output/n100.r07.s010.trimmed.sorted.bam" > "n100.r07.s010_output/n100.r07.s010.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s010_output/n100.r07.s010.reference.fas" --call-indels "n100.r07.s010_output/n100.r07.s010.trimmed.sorted.bam" > "n100.r07.s010_output/n100.r07.s010.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s010_output/n100.r07.s010.trimmed.sorted.bam" > "n100.r07.s010_output/n100.r07.s010.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s010_output/n100.r07.s010.depth.txt" "n100.r07.s010_output/n100.r07.s010.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s010_output/n100.r07.s010.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s010_output/n100.r07.s010.reference.fas" | bcftools consensus -m "n100.r07.s010_output/n100.r07.s010.low_depth.tsv" tmp.vcf.gz > "n100.r07.s010_output/n100.r07.s010.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s010_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:add954026748861afb74b718c4c4b4f5dad9601f18d8ec8e187fd6fce8928e1c 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.2MiB max=128.9MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=693B max=3.1KiB
2021/07/08 17:19:43 scheduler task 4b39a399 (flow 635de25e): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s010.tar.gz resources {}
2021/07/08 17:19:43  ->  n100.r07.s010.Main.cp_out_file 635de25e exec extern s3://niema-test/n100/r07/n100.r07.s010.tar.gz 35.7MiB
2021/07/08 17:19:43 scheduler task 349d60d9 (flow 61ea32de): transferring output (try 0): started
2021/07/08 17:19:43 scheduler task db4186ab (flow 9e638bb7): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:43 scheduler task db4186ab (flow 9e638bb7): unloading (try 0): started
2021/07/08 17:19:43 scheduler task db4186ab (flow 9e638bb7): unloading list<val<.=33a35d47 35.7MiB> 35.7MiB>
2021/07/08 17:19:43 scheduler task db4186ab (flow 9e638bb7): unloading val<.=8239cb27 35.4MiB>
2021/07/08 17:19:43 scheduler task db4186ab (flow 9e638bb7): unloading val<.=6bc90a8d 35.4MiB>
2021/07/08 17:19:43 scheduler task af534387 (flow 90d93718): unloaded list<val<.=eed7a6fb 35.7MiB> 35.7MiB>
2021/07/08 17:19:43 scheduler task af534387 (flow 90d93718): unloaded val<.=536b656a 35.4MiB>
2021/07/08 17:19:43 scheduler task af534387 (flow 90d93718): unloaded val<.=a956492e 35.4MiB>
2021/07/08 17:19:43 scheduler task af534387 (flow 90d93718): unloading (try 0): successful, next state: complete
2021/07/08 17:19:43 scheduler task 6b13fa0f (flow 7b3d1113): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:43  <-  n100.r07.s049.Main.out_file 90d93718 ok     exec 5m16s 35.7MiB
2021/07/08 17:19:43 n100.r07.s049.Main.out_file 90d93718 n100/r07/n100.r07.s049.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9fec96a15d94edd8990a8b4a4d3885f633d4ccc3745608bbeed2f2448ffb1350
	sha256:90d937181a626a38fc75a1e34963ea03507da9ec018f2d2cb0f98a3c476c63b1
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/af5343878faebc5dcd28e3395fda65379879c423fef2a00594324de9638f51b1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s049_output"
	    wget -O "n100.r07.s049_output/n100.r07.s049.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s049_output/n100.r07.s049.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s049_output/n100.r07.s049.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s049_output/n100.r07.s049.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s049_output/n100.r07.s049.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s049_output/n100.r07.s049.reference.fas" "n100.r07.s049_output/n100.r07.s049.fq1.fastq" "n100.r07.s049_output/n100.r07.s049.fq2.fastq" | samtools view -bS - > "n100.r07.s049_output/n100.r07.s049.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s049_output/n100.r07.s049.untrimmed.sorted.bam" "n100.r07.s049_output/n100.r07.s049.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s049_output/n100.r07.s049.untrimmed.sorted.bam" -b "n100.r07.s049_output/n100.r07.s049.primers.bed" -p "n100.r07.s049_output/n100.r07.s049.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s049_output/n100.r07.s049.trimmed.sorted.bam" "n100.r07.s049_output/n100.r07.s049.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s049_output/n100.r07.s049.reference.fas" "n100.r07.s049_output/n100.r07.s049.trimmed.sorted.bam" > "n100.r07.s049_output/n100.r07.s049.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s049_output/n100.r07.s049.reference.fas" --call-indels "n100.r07.s049_output/n100.r07.s049.trimmed.sorted.bam" > "n100.r07.s049_output/n100.r07.s049.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s049_output/n100.r07.s049.trimmed.sorted.bam" > "n100.r07.s049_output/n100.r07.s049.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s049_output/n100.r07.s049.depth.txt" "n100.r07.s049_output/n100.r07.s049.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s049_output/n100.r07.s049.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s049_output/n100.r07.s049.reference.fas" | bcftools consensus -m "n100.r07.s049_output/n100.r07.s049.low_depth.tsv" tmp.vcf.gz > "n100.r07.s049_output/n100.r07.s049.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s049_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:eed7a6fbdb4d627d8b6c6be5b1f98990c5f8f686de3ef0887316cea255dc5da1 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.2MiB max=126.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=527B max=2.1KiB
2021/07/08 17:19:43 scheduler task e3242430 (flow 6b463833): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s049.tar.gz resources {}
2021/07/08 17:19:43  ->  n100.r07.s049.Main.cp_out_file 6b463833 exec extern s3://niema-test/n100/r07/n100.r07.s049.tar.gz 35.7MiB
2021/07/08 17:19:43 scheduler task 6b13fa0f (flow 7b3d1113): transferring output (try 0): started
2021/07/08 17:19:43 scheduler task db4186ab (flow 9e638bb7): unloaded list<val<.=33a35d47 35.7MiB> 35.7MiB>
2021/07/08 17:19:43 scheduler task db4186ab (flow 9e638bb7): unloaded val<.=6bc90a8d 35.4MiB>
2021/07/08 17:19:43 scheduler task db4186ab (flow 9e638bb7): unloaded val<.=8239cb27 35.4MiB>
2021/07/08 17:19:43 scheduler task db4186ab (flow 9e638bb7): unloading (try 0): successful, next state: complete
2021/07/08 17:19:43  <-  n100.r07.s007.Main.out_file 9e638bb7 ok     exec 5m22s 35.7MiB
2021/07/08 17:19:43 n100.r07.s007.Main.out_file 9e638bb7 n100/r07/n100.r07.s007.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b15934e34e3ac10bec66fed5b6a265871dcab62cb74967fd59e598fd42d8936e
	sha256:9e638bb7c0422ed3d3d429543f297218bc3ed85492675881e1240ffd937573d9
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/db4186ab4828fa96fce0a1b9d409badd15b9c930a5b2eedc3f581338ba8abe0e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s007_output"
	    wget -O "n100.r07.s007_output/n100.r07.s007.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s007_output/n100.r07.s007.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s007_output/n100.r07.s007.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s007_output/n100.r07.s007.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s007_output/n100.r07.s007.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s007_output/n100.r07.s007.reference.fas" "n100.r07.s007_output/n100.r07.s007.fq1.fastq" "n100.r07.s007_output/n100.r07.s007.fq2.fastq" | samtools view -bS - > "n100.r07.s007_output/n100.r07.s007.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s007_output/n100.r07.s007.untrimmed.sorted.bam" "n100.r07.s007_output/n100.r07.s007.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s007_output/n100.r07.s007.untrimmed.sorted.bam" -b "n100.r07.s007_output/n100.r07.s007.primers.bed" -p "n100.r07.s007_output/n100.r07.s007.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s007_output/n100.r07.s007.trimmed.sorted.bam" "n100.r07.s007_output/n100.r07.s007.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s007_output/n100.r07.s007.reference.fas" "n100.r07.s007_output/n100.r07.s007.trimmed.sorted.bam" > "n100.r07.s007_output/n100.r07.s007.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s007_output/n100.r07.s007.reference.fas" --call-indels "n100.r07.s007_output/n100.r07.s007.trimmed.sorted.bam" > "n100.r07.s007_output/n100.r07.s007.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s007_output/n100.r07.s007.trimmed.sorted.bam" > "n100.r07.s007_output/n100.r07.s007.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s007_output/n100.r07.s007.depth.txt" "n100.r07.s007_output/n100.r07.s007.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s007_output/n100.r07.s007.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s007_output/n100.r07.s007.reference.fas" | bcftools consensus -m "n100.r07.s007_output/n100.r07.s007.low_depth.tsv" tmp.vcf.gz > "n100.r07.s007_output/n100.r07.s007.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s007_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:33a35d477d9d98f5d9dc4c15214726edb5ef4b292f726cefd919559f2f7959d2 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.6MiB max=130.0MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=525B max=2.1KiB
2021/07/08 17:19:43 scheduler task 41300953 (flow 4457c4ba): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s007.tar.gz resources {}
2021/07/08 17:19:43  ->  n100.r07.s007.Main.cp_out_file 4457c4ba exec extern s3://niema-test/n100/r07/n100.r07.s007.tar.gz 35.7MiB
2021/07/08 17:19:43 scheduler task b413bc8d (flow a941632d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:5f4f4a4bf001372f12366dc7c3909c0710d64d58e3ff10ba10de83a98c2c0eba -> s3://niema-test/n100/r07/n100.r07.s068.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:43  <-  n100.r07.s068.Main.cp_out_file a941632d ok   extern 0s 35.7MiB
2021/07/08 17:19:44 scheduler task a3f46aee (flow 956ffc0d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:44 scheduler task a3f46aee (flow 956ffc0d): promoting objects (try 0): started
2021/07/08 17:19:44 scheduler task b5a99eab (flow dfc4a546): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:44 scheduler task b5a99eab (flow dfc4a546): unloading (try 0): started
2021/07/08 17:19:44 scheduler task b5a99eab (flow dfc4a546): unloading list<val<.=2af628ad 35.8MiB> 35.8MiB>
2021/07/08 17:19:44 scheduler task b5a99eab (flow dfc4a546): unloading val<.=2588b13a 35.4MiB>
2021/07/08 17:19:44 scheduler task b5a99eab (flow dfc4a546): unloading val<.=0fcd9fb2 35.4MiB>
2021/07/08 17:19:44 scheduler task a3f46aee (flow 956ffc0d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:44 scheduler task a3f46aee (flow 956ffc0d): retrieving diagnostic output (try 0): started
2021/07/08 17:19:44 scheduler task 77caf1b8 (flow 4855c020): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:44 scheduler task 77caf1b8 (flow 4855c020): promoting objects (try 0): started
2021/07/08 17:19:44 scheduler task b5a99eab (flow dfc4a546): unloaded val<.=2588b13a 35.4MiB>
2021/07/08 17:19:44 scheduler task b5a99eab (flow dfc4a546): unloaded list<val<.=2af628ad 35.8MiB> 35.8MiB>
2021/07/08 17:19:44 scheduler task 964686c2 (flow 1be4cbdf): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:44 scheduler task b5a99eab (flow dfc4a546): unloaded val<.=0fcd9fb2 35.4MiB>
2021/07/08 17:19:44 scheduler task b5a99eab (flow dfc4a546): unloading (try 0): successful, next state: complete
2021/07/08 17:19:44 scheduler task 964686c2 (flow 1be4cbdf): promoting objects (try 0): started
2021/07/08 17:19:44 scheduler task a3f46aee (flow 956ffc0d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:44  <-  n100.r07.s076.Main.out_file dfc4a546 ok     exec 5m16s 35.8MiB
2021/07/08 17:19:44 n100.r07.s076.Main.out_file dfc4a546 n100/r07/n100.r07.s076.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0ef7187bcf46fc0f24e10767509492c3e6f8ede8676a16c42a29e70447264695
	sha256:dfc4a54648c3137df4b656eb3d9bf21f40efe7dbaf4c812e239734506abff74f
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b5a99eab44927caf6dc0dcd64156db2eb6ba5e71c7ed161e29dbbc2b59b4a9bb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s076_output"
	    wget -O "n100.r07.s076_output/n100.r07.s076.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s076_output/n100.r07.s076.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s076_output/n100.r07.s076.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s076_output/n100.r07.s076.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s076_output/n100.r07.s076.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s076_output/n100.r07.s076.reference.fas" "n100.r07.s076_output/n100.r07.s076.fq1.fastq" "n100.r07.s076_output/n100.r07.s076.fq2.fastq" | samtools view -bS - > "n100.r07.s076_output/n100.r07.s076.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s076_output/n100.r07.s076.untrimmed.sorted.bam" "n100.r07.s076_output/n100.r07.s076.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s076_output/n100.r07.s076.untrimmed.sorted.bam" -b "n100.r07.s076_output/n100.r07.s076.primers.bed" -p "n100.r07.s076_output/n100.r07.s076.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s076_output/n100.r07.s076.trimmed.sorted.bam" "n100.r07.s076_output/n100.r07.s076.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s076_output/n100.r07.s076.reference.fas" "n100.r07.s076_output/n100.r07.s076.trimmed.sorted.bam" > "n100.r07.s076_output/n100.r07.s076.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s076_output/n100.r07.s076.reference.fas" --call-indels "n100.r07.s076_output/n100.r07.s076.trimmed.sorted.bam" > "n100.r07.s076_output/n100.r07.s076.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s076_output/n100.r07.s076.trimmed.sorted.bam" > "n100.r07.s076_output/n100.r07.s076.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s076_output/n100.r07.s076.depth.txt" "n100.r07.s076_output/n100.r07.s076.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s076_output/n100.r07.s076.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s076_output/n100.r07.s076.reference.fas" | bcftools consensus -m "n100.r07.s076_output/n100.r07.s076.low_depth.tsv" tmp.vcf.gz > "n100.r07.s076_output/n100.r07.s076.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s076_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:2af628ada6a4d76c9185bc8775c7a18b5c0f0ee5f8a8b40229c5c118e70b52ce 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.8MiB max=125.6MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=695B max=2.0KiB
2021/07/08 17:19:44 scheduler task df01533b (flow dd5400e6): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s076.tar.gz resources {}
2021/07/08 17:19:44  ->  n100.r07.s076.Main.cp_out_file dd5400e6 exec extern s3://niema-test/n100/r07/n100.r07.s076.tar.gz 35.8MiB
2021/07/08 17:19:44 scheduler task a3f46aee (flow 956ffc0d): retrieving result (try 0): started
2021/07/08 17:19:44 scheduler task 77caf1b8 (flow 4855c020): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:44 scheduler task 77caf1b8 (flow 4855c020): retrieving diagnostic output (try 0): started
2021/07/08 17:19:44 scheduler task 349d60d9 (flow 61ea32de): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:44 scheduler task 349d60d9 (flow 61ea32de): unloading (try 0): started
2021/07/08 17:19:44 scheduler task 349d60d9 (flow 61ea32de): unloading list<val<.=4ef59dfe 35.7MiB> 35.7MiB>
2021/07/08 17:19:44 scheduler task 349d60d9 (flow 61ea32de): unloading val<.=4bf00db9 35.4MiB>
2021/07/08 17:19:44 scheduler task 349d60d9 (flow 61ea32de): unloading val<.=22cbb19a 35.4MiB>
2021/07/08 17:19:44 scheduler task d5b7244c (flow e68fd223): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:3fc4899a7c4d8d3746f5c854e9dbd119ae1be2539b21c89aae6bfbf244ab19a4 -> s3://niema-test/n100/r07/n100.r07.s044.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:44  <-  n100.r07.s044.Main.cp_out_file e68fd223 ok   extern 0s 35.7MiB
2021/07/08 17:19:44 scheduler task 964686c2 (flow 1be4cbdf): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:44 scheduler task 964686c2 (flow 1be4cbdf): retrieving diagnostic output (try 0): started
2021/07/08 17:19:44 scheduler task a3f46aee (flow 956ffc0d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:44 scheduler task a3f46aee (flow 956ffc0d): transferring output (try 0): started
2021/07/08 17:19:44 scheduler task 77caf1b8 (flow 4855c020): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:44 scheduler task 77caf1b8 (flow 4855c020): retrieving result (try 0): started
2021/07/08 17:19:44 scheduler task 349d60d9 (flow 61ea32de): unloaded val<.=22cbb19a 35.4MiB>
2021/07/08 17:19:44 scheduler task 349d60d9 (flow 61ea32de): unloaded list<val<.=4ef59dfe 35.7MiB> 35.7MiB>
2021/07/08 17:19:44 scheduler task 349d60d9 (flow 61ea32de): unloaded val<.=4bf00db9 35.4MiB>
2021/07/08 17:19:44 scheduler task 349d60d9 (flow 61ea32de): unloading (try 0): successful, next state: complete
2021/07/08 17:19:44  <-  n100.r07.s072.Main.out_file 61ea32de ok     exec 5m16s 35.7MiB
2021/07/08 17:19:44 n100.r07.s072.Main.out_file 61ea32de n100/r07/n100.r07.s072.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4a8d20c0428f2c19618e0510a328cdaa52f4383bf6675a77f0b078281e62dae8
	sha256:61ea32dedea9f37b8a1a71c667eaa56222e98dde3823853a9c5af778dc6d751c
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/349d60d9435a02e4ce783207dc9827523daf2715afcdd318844d20f1a13fb4b3
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s072_output"
	    wget -O "n100.r07.s072_output/n100.r07.s072.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s072_output/n100.r07.s072.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s072_output/n100.r07.s072.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s072_output/n100.r07.s072.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s072_output/n100.r07.s072.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s072_output/n100.r07.s072.reference.fas" "n100.r07.s072_output/n100.r07.s072.fq1.fastq" "n100.r07.s072_output/n100.r07.s072.fq2.fastq" | samtools view -bS - > "n100.r07.s072_output/n100.r07.s072.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s072_output/n100.r07.s072.untrimmed.sorted.bam" "n100.r07.s072_output/n100.r07.s072.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s072_output/n100.r07.s072.untrimmed.sorted.bam" -b "n100.r07.s072_output/n100.r07.s072.primers.bed" -p "n100.r07.s072_output/n100.r07.s072.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s072_output/n100.r07.s072.trimmed.sorted.bam" "n100.r07.s072_output/n100.r07.s072.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s072_output/n100.r07.s072.reference.fas" "n100.r07.s072_output/n100.r07.s072.trimmed.sorted.bam" > "n100.r07.s072_output/n100.r07.s072.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s072_output/n100.r07.s072.reference.fas" --call-indels "n100.r07.s072_output/n100.r07.s072.trimmed.sorted.bam" > "n100.r07.s072_output/n100.r07.s072.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s072_output/n100.r07.s072.trimmed.sorted.bam" > "n100.r07.s072_output/n100.r07.s072.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s072_output/n100.r07.s072.depth.txt" "n100.r07.s072_output/n100.r07.s072.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s072_output/n100.r07.s072.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s072_output/n100.r07.s072.reference.fas" | bcftools consensus -m "n100.r07.s072_output/n100.r07.s072.low_depth.tsv" tmp.vcf.gz > "n100.r07.s072_output/n100.r07.s072.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s072_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:4ef59dfefd338ea66c17edc23b3800a3ce051e8f0f9c8881ba62fecf2fe0d4a3 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.2MiB max=126.9MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=523B max=2.1KiB
2021/07/08 17:19:44 scheduler task 3d44cdab (flow 442ed5f4): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s072.tar.gz resources {}
2021/07/08 17:19:44  ->  n100.r07.s072.Main.cp_out_file 442ed5f4 exec extern s3://niema-test/n100/r07/n100.r07.s072.tar.gz 35.7MiB
2021/07/08 17:19:44 scheduler task 31906a42 (flow 667619f5): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:44 scheduler task 964686c2 (flow 1be4cbdf): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:44 scheduler task 77caf1b8 (flow 4855c020): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:44 scheduler task 31906a42 (flow 667619f5): promoting objects (try 0): started
2021/07/08 17:19:44 scheduler task 964686c2 (flow 1be4cbdf): retrieving result (try 0): started
2021/07/08 17:19:44 scheduler task 4b39a399 (flow 635de25e): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:add954026748861afb74b718c4c4b4f5dad9601f18d8ec8e187fd6fce8928e1c -> s3://niema-test/n100/r07/n100.r07.s010.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:44  <-  n100.r07.s010.Main.cp_out_file 635de25e ok   extern 0s 35.7MiB
2021/07/08 17:19:44 scheduler task 77caf1b8 (flow 4855c020): transferring output (try 0): started
2021/07/08 17:19:44 scheduler task 590eb55e (flow bdb75ce9): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:44 scheduler task 590eb55e (flow bdb75ce9): promoting objects (try 0): started
2021/07/08 17:19:44 scheduler task 31906a42 (flow 667619f5): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:44 scheduler task 964686c2 (flow 1be4cbdf): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:44 scheduler task 31906a42 (flow 667619f5): retrieving diagnostic output (try 0): started
2021/07/08 17:19:44 scheduler task 964686c2 (flow 1be4cbdf): transferring output (try 0): started
2021/07/08 17:19:44 scheduler task 590eb55e (flow bdb75ce9): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:44 scheduler task 590eb55e (flow bdb75ce9): retrieving diagnostic output (try 0): started
2021/07/08 17:19:44 scheduler task 6b13fa0f (flow 7b3d1113): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:44 scheduler task 6b13fa0f (flow 7b3d1113): unloading (try 0): started
2021/07/08 17:19:44 scheduler task 6b13fa0f (flow 7b3d1113): unloading list<val<.=9a2c80b2 35.7MiB> 35.7MiB>
2021/07/08 17:19:44 scheduler task 6b13fa0f (flow 7b3d1113): unloading val<.=ec34847a 35.4MiB>
2021/07/08 17:19:44 scheduler task 6b13fa0f (flow 7b3d1113): unloading val<.=c1153255 35.4MiB>
2021/07/08 17:19:44 scheduler task 31906a42 (flow 667619f5): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:44 scheduler task 31906a42 (flow 667619f5): retrieving result (try 0): started
2021/07/08 17:19:44 scheduler task 590eb55e (flow bdb75ce9): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:44 scheduler task 6b13fa0f (flow 7b3d1113): unloaded list<val<.=9a2c80b2 35.7MiB> 35.7MiB>
2021/07/08 17:19:44 scheduler task 590eb55e (flow bdb75ce9): retrieving result (try 0): started
2021/07/08 17:19:44 scheduler task 6b13fa0f (flow 7b3d1113): unloaded val<.=c1153255 35.4MiB>
2021/07/08 17:19:44 scheduler task 6b13fa0f (flow 7b3d1113): unloaded val<.=ec34847a 35.4MiB>
2021/07/08 17:19:44 scheduler task 6b13fa0f (flow 7b3d1113): unloading (try 0): successful, next state: complete
2021/07/08 17:19:44  <-  n100.r07.s061.Main.out_file 7b3d1113 ok     exec 5m23s 35.7MiB
2021/07/08 17:19:44 n100.r07.s061.Main.out_file 7b3d1113 n100/r07/n100.r07.s061.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:078bc9f53259e5dad60b51206e7af16a7723a84f34aedbb4518a24cfc3e39d29
	sha256:7b3d1113a891b99136835d74f024d18593e66a9f71559874606f68dcfda8a85c
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6b13fa0fa1d7bd90853726ac7e4d09addedc14dd7d00debb1ec6c764b8f1002c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s061_output"
	    wget -O "n100.r07.s061_output/n100.r07.s061.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s061_output/n100.r07.s061.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s061_output/n100.r07.s061.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s061_output/n100.r07.s061.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s061_output/n100.r07.s061.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s061_output/n100.r07.s061.reference.fas" "n100.r07.s061_output/n100.r07.s061.fq1.fastq" "n100.r07.s061_output/n100.r07.s061.fq2.fastq" | samtools view -bS - > "n100.r07.s061_output/n100.r07.s061.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s061_output/n100.r07.s061.untrimmed.sorted.bam" "n100.r07.s061_output/n100.r07.s061.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s061_output/n100.r07.s061.untrimmed.sorted.bam" -b "n100.r07.s061_output/n100.r07.s061.primers.bed" -p "n100.r07.s061_output/n100.r07.s061.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s061_output/n100.r07.s061.trimmed.sorted.bam" "n100.r07.s061_output/n100.r07.s061.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s061_output/n100.r07.s061.reference.fas" "n100.r07.s061_output/n100.r07.s061.trimmed.sorted.bam" > "n100.r07.s061_output/n100.r07.s061.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s061_output/n100.r07.s061.reference.fas" --call-indels "n100.r07.s061_output/n100.r07.s061.trimmed.sorted.bam" > "n100.r07.s061_output/n100.r07.s061.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s061_output/n100.r07.s061.trimmed.sorted.bam" > "n100.r07.s061_output/n100.r07.s061.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s061_output/n100.r07.s061.depth.txt" "n100.r07.s061_output/n100.r07.s061.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s061_output/n100.r07.s061.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s061_output/n100.r07.s061.reference.fas" | bcftools consensus -m "n100.r07.s061_output/n100.r07.s061.low_depth.tsv" tmp.vcf.gz > "n100.r07.s061_output/n100.r07.s061.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s061_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9a2c80b20424f05b891be41a0bb7ec4e0fb4f492896b9732d45e1f79d9e2308f 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.4MiB max=127.4MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:19:44 scheduler task b6c4e2b7 (flow 277307a9): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s061.tar.gz resources {}
2021/07/08 17:19:44  ->  n100.r07.s061.Main.cp_out_file 277307a9 exec extern s3://niema-test/n100/r07/n100.r07.s061.tar.gz 35.7MiB
2021/07/08 17:19:44 scheduler task 31906a42 (flow 667619f5): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:44 scheduler task 31906a42 (flow 667619f5): transferring output (try 0): started
2021/07/08 17:19:44 scheduler task e3242430 (flow 6b463833): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:eed7a6fbdb4d627d8b6c6be5b1f98990c5f8f686de3ef0887316cea255dc5da1 -> s3://niema-test/n100/r07/n100.r07.s049.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:44  <-  n100.r07.s049.Main.cp_out_file 6b463833 ok   extern 0s 35.7MiB
2021/07/08 17:19:44 scheduler task 590eb55e (flow bdb75ce9): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:44 scheduler task 590eb55e (flow bdb75ce9): transferring output (try 0): started
2021/07/08 17:19:44 scheduler task e2af4871 (flow 41a5e943): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:44 scheduler task e2af4871 (flow 41a5e943): promoting objects (try 0): started
2021/07/08 17:19:44 scheduler task f1fdc12e (flow d483a765): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:44 scheduler task f1fdc12e (flow d483a765): promoting objects (try 0): started
2021/07/08 17:19:44 scheduler task a3f46aee (flow 956ffc0d): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:44 scheduler task 41300953 (flow 4457c4ba): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:33a35d477d9d98f5d9dc4c15214726edb5ef4b292f726cefd919559f2f7959d2 -> s3://niema-test/n100/r07/n100.r07.s007.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:44  <-  n100.r07.s007.Main.cp_out_file 4457c4ba ok   extern 0s 35.7MiB
2021/07/08 17:19:44 scheduler task a3f46aee (flow 956ffc0d): unloading (try 0): started
2021/07/08 17:19:44 scheduler task a3f46aee (flow 956ffc0d): unloading list<val<.=edae8c09 35.7MiB> 35.7MiB>
2021/07/08 17:19:44 scheduler task a3f46aee (flow 956ffc0d): unloading val<.=e2f6905b 35.4MiB>
2021/07/08 17:19:44 scheduler task a3f46aee (flow 956ffc0d): unloading val<.=82afec20 35.4MiB>
2021/07/08 17:19:44 scheduler task e2af4871 (flow 41a5e943): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:44 scheduler task e2af4871 (flow 41a5e943): retrieving diagnostic output (try 0): started
2021/07/08 17:19:44 scheduler task f1fdc12e (flow d483a765): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:44 scheduler task f1fdc12e (flow d483a765): retrieving diagnostic output (try 0): started
2021/07/08 17:19:44 scheduler task a3f46aee (flow 956ffc0d): unloaded val<.=e2f6905b 35.4MiB>
2021/07/08 17:19:44 scheduler task a3f46aee (flow 956ffc0d): unloaded val<.=82afec20 35.4MiB>
2021/07/08 17:19:44 scheduler task a3f46aee (flow 956ffc0d): unloaded list<val<.=edae8c09 35.7MiB> 35.7MiB>
2021/07/08 17:19:44 scheduler task a3f46aee (flow 956ffc0d): unloading (try 0): successful, next state: complete
2021/07/08 17:19:44  <-  n100.r07.s002.Main.out_file 956ffc0d ok     exec 5m17s 35.7MiB
2021/07/08 17:19:44 n100.r07.s002.Main.out_file 956ffc0d n100/r07/n100.r07.s002.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a133c3acabe9a072b272d7c271c96aa62e49238ed742ff795d2577c941dc0508
	sha256:956ffc0d63a0916eb10ce6ac4055d32326bb7e6ec9dfdf486190e9d74504753b
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a3f46aee7d5667eed81369f28b3b4ea05ea22b4e50fac0afe04bb078093e4f4b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s002_output"
	    wget -O "n100.r07.s002_output/n100.r07.s002.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s002_output/n100.r07.s002.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s002_output/n100.r07.s002.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s002_output/n100.r07.s002.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s002_output/n100.r07.s002.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s002_output/n100.r07.s002.reference.fas" "n100.r07.s002_output/n100.r07.s002.fq1.fastq" "n100.r07.s002_output/n100.r07.s002.fq2.fastq" | samtools view -bS - > "n100.r07.s002_output/n100.r07.s002.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s002_output/n100.r07.s002.untrimmed.sorted.bam" "n100.r07.s002_output/n100.r07.s002.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s002_output/n100.r07.s002.untrimmed.sorted.bam" -b "n100.r07.s002_output/n100.r07.s002.primers.bed" -p "n100.r07.s002_output/n100.r07.s002.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s002_output/n100.r07.s002.trimmed.sorted.bam" "n100.r07.s002_output/n100.r07.s002.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s002_output/n100.r07.s002.reference.fas" "n100.r07.s002_output/n100.r07.s002.trimmed.sorted.bam" > "n100.r07.s002_output/n100.r07.s002.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s002_output/n100.r07.s002.reference.fas" --call-indels "n100.r07.s002_output/n100.r07.s002.trimmed.sorted.bam" > "n100.r07.s002_output/n100.r07.s002.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s002_output/n100.r07.s002.trimmed.sorted.bam" > "n100.r07.s002_output/n100.r07.s002.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s002_output/n100.r07.s002.depth.txt" "n100.r07.s002_output/n100.r07.s002.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s002_output/n100.r07.s002.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s002_output/n100.r07.s002.reference.fas" | bcftools consensus -m "n100.r07.s002_output/n100.r07.s002.low_depth.tsv" tmp.vcf.gz > "n100.r07.s002_output/n100.r07.s002.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s002_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:edae8c09b865f143efb13d24a8752d56f554c34a561e2c72ccfc0748862eca83 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.5MiB max=125.0MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=525B max=2.1KiB
2021/07/08 17:19:44 scheduler task 17596024 (flow 7dccd302): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s002.tar.gz resources {}
2021/07/08 17:19:44  ->  n100.r07.s002.Main.cp_out_file 7dccd302 exec extern s3://niema-test/n100/r07/n100.r07.s002.tar.gz 35.7MiB
2021/07/08 17:19:44 scheduler task 77caf1b8 (flow 4855c020): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:44 scheduler task 77caf1b8 (flow 4855c020): unloading (try 0): started
2021/07/08 17:19:44 scheduler task 77caf1b8 (flow 4855c020): unloading val<.=3f9fb04a 35.4MiB>
2021/07/08 17:19:44 scheduler task 77caf1b8 (flow 4855c020): unloading list<val<.=83016b3a 35.8MiB> 35.8MiB>
2021/07/08 17:19:44 scheduler task 77caf1b8 (flow 4855c020): unloading val<.=fec7dc60 35.4MiB>
2021/07/08 17:19:44 scheduler task e2af4871 (flow 41a5e943): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:44 scheduler task e2af4871 (flow 41a5e943): retrieving result (try 0): started
2021/07/08 17:19:44 scheduler task df01533b (flow dd5400e6): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:2af628ada6a4d76c9185bc8775c7a18b5c0f0ee5f8a8b40229c5c118e70b52ce -> s3://niema-test/n100/r07/n100.r07.s076.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:19:44  <-  n100.r07.s076.Main.cp_out_file dd5400e6 ok   extern 0s 35.8MiB
2021/07/08 17:19:44 scheduler task cbc7ffd0 (flow f84bcf3d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:44 scheduler task cbc7ffd0 (flow f84bcf3d): promoting objects (try 0): started
2021/07/08 17:19:44 scheduler task f1fdc12e (flow d483a765): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:44 scheduler task 964686c2 (flow 1be4cbdf): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:44 scheduler task f1fdc12e (flow d483a765): retrieving result (try 0): started
2021/07/08 17:19:44 scheduler task 964686c2 (flow 1be4cbdf): unloading (try 0): started
2021/07/08 17:19:44 scheduler task 964686c2 (flow 1be4cbdf): unloading list<val<.=eaf3652d 35.7MiB> 35.7MiB>
2021/07/08 17:19:44 scheduler task 964686c2 (flow 1be4cbdf): unloading val<.=9e80a3e8 35.4MiB>
2021/07/08 17:19:44 scheduler task 964686c2 (flow 1be4cbdf): unloading val<.=a735578a 35.4MiB>
2021/07/08 17:19:44 scheduler task 77caf1b8 (flow 4855c020): unloaded list<val<.=83016b3a 35.8MiB> 35.8MiB>
2021/07/08 17:19:44 scheduler task 77caf1b8 (flow 4855c020): unloaded val<.=fec7dc60 35.4MiB>
2021/07/08 17:19:44 scheduler task 77caf1b8 (flow 4855c020): unloaded val<.=3f9fb04a 35.4MiB>
2021/07/08 17:19:44 scheduler task 77caf1b8 (flow 4855c020): unloading (try 0): successful, next state: complete
2021/07/08 17:19:44  <-  n100.r07.s005.Main.out_file 4855c020 ok     exec 5m17s 35.8MiB
2021/07/08 17:19:44 n100.r07.s005.Main.out_file 4855c020 n100/r07/n100.r07.s005.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:78d81e034edb730feb54baf7eea381e306f2dfbcdedf7adc1fda95bf9e491502
	sha256:4855c020111d8b169a45be81ebd0d4f670668437d19a31688fe44e3bf5a18e53
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/77caf1b89e2f7c9e1be81aae4222b73ce49881421c1fb2397c03ea2cddf63d25
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s005_output"
	    wget -O "n100.r07.s005_output/n100.r07.s005.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s005_output/n100.r07.s005.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s005_output/n100.r07.s005.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s005_output/n100.r07.s005.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s005_output/n100.r07.s005.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s005_output/n100.r07.s005.reference.fas" "n100.r07.s005_output/n100.r07.s005.fq1.fastq" "n100.r07.s005_output/n100.r07.s005.fq2.fastq" | samtools view -bS - > "n100.r07.s005_output/n100.r07.s005.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s005_output/n100.r07.s005.untrimmed.sorted.bam" "n100.r07.s005_output/n100.r07.s005.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s005_output/n100.r07.s005.untrimmed.sorted.bam" -b "n100.r07.s005_output/n100.r07.s005.primers.bed" -p "n100.r07.s005_output/n100.r07.s005.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s005_output/n100.r07.s005.trimmed.sorted.bam" "n100.r07.s005_output/n100.r07.s005.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s005_output/n100.r07.s005.reference.fas" "n100.r07.s005_output/n100.r07.s005.trimmed.sorted.bam" > "n100.r07.s005_output/n100.r07.s005.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s005_output/n100.r07.s005.reference.fas" --call-indels "n100.r07.s005_output/n100.r07.s005.trimmed.sorted.bam" > "n100.r07.s005_output/n100.r07.s005.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s005_output/n100.r07.s005.trimmed.sorted.bam" > "n100.r07.s005_output/n100.r07.s005.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s005_output/n100.r07.s005.depth.txt" "n100.r07.s005_output/n100.r07.s005.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s005_output/n100.r07.s005.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s005_output/n100.r07.s005.reference.fas" | bcftools consensus -m "n100.r07.s005_output/n100.r07.s005.low_depth.tsv" tmp.vcf.gz > "n100.r07.s005_output/n100.r07.s005.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s005_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:83016b3ac9b9c27c8c8a12ed1dfad4672fc9cc8dfcab167629977f2527cfe37d 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.9MiB max=124.8MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 17:19:44 scheduler task 746a45ea (flow 15e4555d): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s005.tar.gz resources {}
2021/07/08 17:19:44  ->  n100.r07.s005.Main.cp_out_file 15e4555d exec extern s3://niema-test/n100/r07/n100.r07.s005.tar.gz 35.8MiB
2021/07/08 17:19:44 scheduler task e2af4871 (flow 41a5e943): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:44 scheduler task e2af4871 (flow 41a5e943): transferring output (try 0): started
2021/07/08 17:19:44 scheduler task 3d44cdab (flow 442ed5f4): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:4ef59dfefd338ea66c17edc23b3800a3ce051e8f0f9c8881ba62fecf2fe0d4a3 -> s3://niema-test/n100/r07/n100.r07.s072.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:44  <-  n100.r07.s072.Main.cp_out_file 442ed5f4 ok   extern 0s 35.7MiB
2021/07/08 17:19:45 scheduler task cbc7ffd0 (flow f84bcf3d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:45 scheduler task cbc7ffd0 (flow f84bcf3d): retrieving diagnostic output (try 0): started
2021/07/08 17:19:45 scheduler task f1fdc12e (flow d483a765): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:45 scheduler task 964686c2 (flow 1be4cbdf): unloaded val<.=9e80a3e8 35.4MiB>
2021/07/08 17:19:45 scheduler task 964686c2 (flow 1be4cbdf): unloaded list<val<.=eaf3652d 35.7MiB> 35.7MiB>
2021/07/08 17:19:45 scheduler task f1fdc12e (flow d483a765): transferring output (try 0): started
2021/07/08 17:19:45 scheduler task 964686c2 (flow 1be4cbdf): unloaded val<.=a735578a 35.4MiB>
2021/07/08 17:19:45 scheduler task 964686c2 (flow 1be4cbdf): unloading (try 0): successful, next state: complete
2021/07/08 17:19:45  <-  n100.r07.s077.Main.out_file 1be4cbdf ok     exec 5m8s 35.7MiB
2021/07/08 17:19:45 n100.r07.s077.Main.out_file 1be4cbdf n100/r07/n100.r07.s077.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e95c0fbd1e3ac4675e2eebfd560ef193aab1588af399f6b3a65e14572677293d
	sha256:1be4cbdf2782cadd6b9d5eb226c4db206226d9a4450969c306046bd6e807d563
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/964686c2947deac136bf804e16b8d610385011c01b53058dd9fb0ad501b70693
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s077_output"
	    wget -O "n100.r07.s077_output/n100.r07.s077.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s077_output/n100.r07.s077.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s077_output/n100.r07.s077.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s077_output/n100.r07.s077.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s077_output/n100.r07.s077.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s077_output/n100.r07.s077.reference.fas" "n100.r07.s077_output/n100.r07.s077.fq1.fastq" "n100.r07.s077_output/n100.r07.s077.fq2.fastq" | samtools view -bS - > "n100.r07.s077_output/n100.r07.s077.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s077_output/n100.r07.s077.untrimmed.sorted.bam" "n100.r07.s077_output/n100.r07.s077.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s077_output/n100.r07.s077.untrimmed.sorted.bam" -b "n100.r07.s077_output/n100.r07.s077.primers.bed" -p "n100.r07.s077_output/n100.r07.s077.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s077_output/n100.r07.s077.trimmed.sorted.bam" "n100.r07.s077_output/n100.r07.s077.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s077_output/n100.r07.s077.reference.fas" "n100.r07.s077_output/n100.r07.s077.trimmed.sorted.bam" > "n100.r07.s077_output/n100.r07.s077.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s077_output/n100.r07.s077.reference.fas" --call-indels "n100.r07.s077_output/n100.r07.s077.trimmed.sorted.bam" > "n100.r07.s077_output/n100.r07.s077.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s077_output/n100.r07.s077.trimmed.sorted.bam" > "n100.r07.s077_output/n100.r07.s077.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s077_output/n100.r07.s077.depth.txt" "n100.r07.s077_output/n100.r07.s077.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s077_output/n100.r07.s077.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s077_output/n100.r07.s077.reference.fas" | bcftools consensus -m "n100.r07.s077_output/n100.r07.s077.low_depth.tsv" tmp.vcf.gz > "n100.r07.s077_output/n100.r07.s077.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s077_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:eaf3652d0603c8114e6229646110b4f73e9dcd047c103e97a37005116fb82b5d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.4MiB max=126.8MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=699B max=3.1KiB
2021/07/08 17:19:45 scheduler task e846f94e (flow e3291b28): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s077.tar.gz resources {}
2021/07/08 17:19:45  ->  n100.r07.s077.Main.cp_out_file e3291b28 exec extern s3://niema-test/n100/r07/n100.r07.s077.tar.gz 35.7MiB
2021/07/08 17:19:45 scheduler task 57e27363 (flow cd67159a): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:45 scheduler task 57e27363 (flow cd67159a): promoting objects (try 0): started
2021/07/08 17:19:45 scheduler task cbc7ffd0 (flow f84bcf3d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:45 scheduler task cbc7ffd0 (flow f84bcf3d): retrieving result (try 0): started
2021/07/08 17:19:45 scheduler task 57e27363 (flow cd67159a): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:45 scheduler task 57e27363 (flow cd67159a): retrieving diagnostic output (try 0): started
2021/07/08 17:19:45 scheduler task 590eb55e (flow bdb75ce9): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:45 scheduler task 590eb55e (flow bdb75ce9): unloading (try 0): started
2021/07/08 17:19:45 scheduler task 590eb55e (flow bdb75ce9): unloading val<.=5d15969d 35.4MiB>
2021/07/08 17:19:45 scheduler task 590eb55e (flow bdb75ce9): unloading val<.=9833b6a7 35.4MiB>
2021/07/08 17:19:45 scheduler task 590eb55e (flow bdb75ce9): unloading list<val<.=30cbea03 35.7MiB> 35.7MiB>
2021/07/08 17:19:45 scheduler task 31906a42 (flow 667619f5): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:45 scheduler task cbc7ffd0 (flow f84bcf3d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:45 scheduler task 31906a42 (flow 667619f5): unloading (try 0): started
2021/07/08 17:19:45 scheduler task 31906a42 (flow 667619f5): unloading list<val<.=9c307698 35.7MiB> 35.7MiB>
2021/07/08 17:19:45 scheduler task 31906a42 (flow 667619f5): unloading val<.=1dd171f7 35.4MiB>
2021/07/08 17:19:45 scheduler task 31906a42 (flow 667619f5): unloading val<.=79f74e53 35.4MiB>
2021/07/08 17:19:45 scheduler task cbc7ffd0 (flow f84bcf3d): transferring output (try 0): started
2021/07/08 17:19:45 scheduler task b6c4e2b7 (flow 277307a9): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9a2c80b20424f05b891be41a0bb7ec4e0fb4f492896b9732d45e1f79d9e2308f -> s3://niema-test/n100/r07/n100.r07.s061.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:45  <-  n100.r07.s061.Main.cp_out_file 277307a9 ok   extern 0s 35.7MiB
2021/07/08 17:19:45 scheduler task 57e27363 (flow cd67159a): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:45 scheduler task 57e27363 (flow cd67159a): retrieving result (try 0): started
2021/07/08 17:19:45 scheduler task 590eb55e (flow bdb75ce9): unloaded val<.=5d15969d 35.4MiB>
2021/07/08 17:19:45 scheduler task 31906a42 (flow 667619f5): unloaded list<val<.=9c307698 35.7MiB> 35.7MiB>
2021/07/08 17:19:45 scheduler task 31906a42 (flow 667619f5): unloaded val<.=1dd171f7 35.4MiB>
2021/07/08 17:19:45 scheduler task 590eb55e (flow bdb75ce9): unloaded val<.=9833b6a7 35.4MiB>
2021/07/08 17:19:45 scheduler task 590eb55e (flow bdb75ce9): unloaded list<val<.=30cbea03 35.7MiB> 35.7MiB>
2021/07/08 17:19:45 scheduler task 590eb55e (flow bdb75ce9): unloading (try 0): successful, next state: complete
2021/07/08 17:19:45 scheduler task 31906a42 (flow 667619f5): unloaded val<.=79f74e53 35.4MiB>
2021/07/08 17:19:45 scheduler task 31906a42 (flow 667619f5): unloading (try 0): successful, next state: complete
2021/07/08 17:19:45  <-  n100.r07.s079.Main.out_file bdb75ce9 ok     exec 5m9s 35.7MiB
2021/07/08 17:19:45 n100.r07.s079.Main.out_file bdb75ce9 n100/r07/n100.r07.s079.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ab1b31f6aad8114d91414fc1421cee4663d99c82a4da53d6e526ca64d4030e67
	sha256:bdb75ce982a44e66d23c0fc18fef4e43a57d8dac2f9bed7b5b9603fb435a7894
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/590eb55ea462850c4b2a8a9d26b5b83374a2f6a62e32831ccbc54477b96abf7a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s079_output"
	    wget -O "n100.r07.s079_output/n100.r07.s079.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s079_output/n100.r07.s079.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s079_output/n100.r07.s079.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s079_output/n100.r07.s079.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s079_output/n100.r07.s079.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s079_output/n100.r07.s079.reference.fas" "n100.r07.s079_output/n100.r07.s079.fq1.fastq" "n100.r07.s079_output/n100.r07.s079.fq2.fastq" | samtools view -bS - > "n100.r07.s079_output/n100.r07.s079.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s079_output/n100.r07.s079.untrimmed.sorted.bam" "n100.r07.s079_output/n100.r07.s079.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s079_output/n100.r07.s079.untrimmed.sorted.bam" -b "n100.r07.s079_output/n100.r07.s079.primers.bed" -p "n100.r07.s079_output/n100.r07.s079.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s079_output/n100.r07.s079.trimmed.sorted.bam" "n100.r07.s079_output/n100.r07.s079.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s079_output/n100.r07.s079.reference.fas" "n100.r07.s079_output/n100.r07.s079.trimmed.sorted.bam" > "n100.r07.s079_output/n100.r07.s079.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s079_output/n100.r07.s079.reference.fas" --call-indels "n100.r07.s079_output/n100.r07.s079.trimmed.sorted.bam" > "n100.r07.s079_output/n100.r07.s079.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s079_output/n100.r07.s079.trimmed.sorted.bam" > "n100.r07.s079_output/n100.r07.s079.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s079_output/n100.r07.s079.depth.txt" "n100.r07.s079_output/n100.r07.s079.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s079_output/n100.r07.s079.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s079_output/n100.r07.s079.reference.fas" | bcftools consensus -m "n100.r07.s079_output/n100.r07.s079.low_depth.tsv" tmp.vcf.gz > "n100.r07.s079_output/n100.r07.s079.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s079_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:30cbea03f71fc34790f7a6ba4d0d0822eefe85b52b3f04a6a90e6ce7ad777d32 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.7MiB max=125.9MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=517B max=2.0KiB
2021/07/08 17:19:45 scheduler task b7539818 (flow 71ab994b): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s079.tar.gz resources {}
2021/07/08 17:19:45  ->  n100.r07.s079.Main.cp_out_file 71ab994b exec extern s3://niema-test/n100/r07/n100.r07.s079.tar.gz 35.7MiB
2021/07/08 17:19:45  <-  n100.r07.s053.Main.out_file 667619f5 ok     exec 5m17s 35.7MiB
2021/07/08 17:19:45 n100.r07.s053.Main.out_file 667619f5 n100/r07/n100.r07.s053.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:41e81b8302535adc8b669e4644ab65b32de0ea392d1bb1aa1197f6db92600c48
	sha256:667619f5fca71d36068cbeeeeb500a95795fc4a48d5cb4716ec8de24f14d0487
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/31906a42668796a31756672453864bcf9bc94c298722d47fe857cbed84a67a20
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s053_output"
	    wget -O "n100.r07.s053_output/n100.r07.s053.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s053_output/n100.r07.s053.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s053_output/n100.r07.s053.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s053_output/n100.r07.s053.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s053_output/n100.r07.s053.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s053_output/n100.r07.s053.reference.fas" "n100.r07.s053_output/n100.r07.s053.fq1.fastq" "n100.r07.s053_output/n100.r07.s053.fq2.fastq" | samtools view -bS - > "n100.r07.s053_output/n100.r07.s053.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s053_output/n100.r07.s053.untrimmed.sorted.bam" "n100.r07.s053_output/n100.r07.s053.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s053_output/n100.r07.s053.untrimmed.sorted.bam" -b "n100.r07.s053_output/n100.r07.s053.primers.bed" -p "n100.r07.s053_output/n100.r07.s053.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s053_output/n100.r07.s053.trimmed.sorted.bam" "n100.r07.s053_output/n100.r07.s053.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s053_output/n100.r07.s053.reference.fas" "n100.r07.s053_output/n100.r07.s053.trimmed.sorted.bam" > "n100.r07.s053_output/n100.r07.s053.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s053_output/n100.r07.s053.reference.fas" --call-indels "n100.r07.s053_output/n100.r07.s053.trimmed.sorted.bam" > "n100.r07.s053_output/n100.r07.s053.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s053_output/n100.r07.s053.trimmed.sorted.bam" > "n100.r07.s053_output/n100.r07.s053.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s053_output/n100.r07.s053.depth.txt" "n100.r07.s053_output/n100.r07.s053.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s053_output/n100.r07.s053.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s053_output/n100.r07.s053.reference.fas" | bcftools consensus -m "n100.r07.s053_output/n100.r07.s053.low_depth.tsv" tmp.vcf.gz > "n100.r07.s053_output/n100.r07.s053.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s053_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9c307698803586720f9c4483d70689b73c084b343afc66aa86b5c58ba890d7a3 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.3MiB max=127.1MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=525B max=2.1KiB
2021/07/08 17:19:45 scheduler task c5e7e1a0 (flow a96e84b2): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s053.tar.gz resources {}
2021/07/08 17:19:45  ->  n100.r07.s053.Main.cp_out_file a96e84b2 exec extern s3://niema-test/n100/r07/n100.r07.s053.tar.gz 35.7MiB
2021/07/08 17:19:45 scheduler task 57e27363 (flow cd67159a): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:45 scheduler task 57e27363 (flow cd67159a): transferring output (try 0): started
2021/07/08 17:19:45 scheduler task 3d2380ba (flow 90113c2d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:45 scheduler task 3d2380ba (flow 90113c2d): promoting objects (try 0): started
2021/07/08 17:19:45 scheduler task 3d2380ba (flow 90113c2d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:45 scheduler task 3d2380ba (flow 90113c2d): retrieving diagnostic output (try 0): started
2021/07/08 17:19:45 scheduler task 17596024 (flow 7dccd302): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:edae8c09b865f143efb13d24a8752d56f554c34a561e2c72ccfc0748862eca83 -> s3://niema-test/n100/r07/n100.r07.s002.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:45  <-  n100.r07.s002.Main.cp_out_file 7dccd302 ok   extern 0s 35.7MiB
2021/07/08 17:19:45 scheduler task f1fdc12e (flow d483a765): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:45 scheduler task f1fdc12e (flow d483a765): unloading (try 0): started
2021/07/08 17:19:45 scheduler task f1fdc12e (flow d483a765): unloading list<val<.=f32a148c 35.7MiB> 35.7MiB>
2021/07/08 17:19:45 scheduler task f1fdc12e (flow d483a765): unloading val<.=fe9867af 35.4MiB>
2021/07/08 17:19:45 scheduler task f1fdc12e (flow d483a765): unloading val<.=b55745e4 35.4MiB>
2021/07/08 17:19:45 scheduler task e2af4871 (flow 41a5e943): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:45 scheduler task e2af4871 (flow 41a5e943): unloading (try 0): started
2021/07/08 17:19:45 scheduler task e2af4871 (flow 41a5e943): unloading list<val<.=3e473bc2 35.8MiB> 35.8MiB>
2021/07/08 17:19:45 scheduler task e2af4871 (flow 41a5e943): unloading val<.=78e32551 35.4MiB>
2021/07/08 17:19:45 scheduler task e2af4871 (flow 41a5e943): unloading val<.=755db5e3 35.4MiB>
2021/07/08 17:19:45 scheduler task 3d2380ba (flow 90113c2d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:45 scheduler task eebbb090 (flow 2cedb108): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:45 scheduler task 3d2380ba (flow 90113c2d): retrieving result (try 0): started
2021/07/08 17:19:45 scheduler task eebbb090 (flow 2cedb108): promoting objects (try 0): started
2021/07/08 17:19:45 scheduler task f1fdc12e (flow d483a765): unloaded val<.=fe9867af 35.4MiB>
2021/07/08 17:19:45 scheduler task f1fdc12e (flow d483a765): unloaded list<val<.=f32a148c 35.7MiB> 35.7MiB>
2021/07/08 17:19:45 scheduler task f1fdc12e (flow d483a765): unloaded val<.=b55745e4 35.4MiB>
2021/07/08 17:19:45 scheduler task f1fdc12e (flow d483a765): unloading (try 0): successful, next state: complete
2021/07/08 17:19:45  <-  n100.r07.s095.Main.out_file d483a765 ok     exec 5m18s 35.7MiB
2021/07/08 17:19:45 n100.r07.s095.Main.out_file d483a765 n100/r07/n100.r07.s095.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9543261aa8422611dc55f92b643a3b169205ef11856f19e741a6ddab19e849af
	sha256:d483a7654959e7927b45031411a24f869d642edb3fa3440627f3ef2029902159
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f1fdc12e9789432344a3dcd50964699e30e2b573540015a1c21359d23ffa237a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s095_output"
	    wget -O "n100.r07.s095_output/n100.r07.s095.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s095_output/n100.r07.s095.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s095_output/n100.r07.s095.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s095_output/n100.r07.s095.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s095_output/n100.r07.s095.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s095_output/n100.r07.s095.reference.fas" "n100.r07.s095_output/n100.r07.s095.fq1.fastq" "n100.r07.s095_output/n100.r07.s095.fq2.fastq" | samtools view -bS - > "n100.r07.s095_output/n100.r07.s095.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s095_output/n100.r07.s095.untrimmed.sorted.bam" "n100.r07.s095_output/n100.r07.s095.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s095_output/n100.r07.s095.untrimmed.sorted.bam" -b "n100.r07.s095_output/n100.r07.s095.primers.bed" -p "n100.r07.s095_output/n100.r07.s095.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s095_output/n100.r07.s095.trimmed.sorted.bam" "n100.r07.s095_output/n100.r07.s095.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s095_output/n100.r07.s095.reference.fas" "n100.r07.s095_output/n100.r07.s095.trimmed.sorted.bam" > "n100.r07.s095_output/n100.r07.s095.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s095_output/n100.r07.s095.reference.fas" --call-indels "n100.r07.s095_output/n100.r07.s095.trimmed.sorted.bam" > "n100.r07.s095_output/n100.r07.s095.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s095_output/n100.r07.s095.trimmed.sorted.bam" > "n100.r07.s095_output/n100.r07.s095.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s095_output/n100.r07.s095.depth.txt" "n100.r07.s095_output/n100.r07.s095.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s095_output/n100.r07.s095.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s095_output/n100.r07.s095.reference.fas" | bcftools consensus -m "n100.r07.s095_output/n100.r07.s095.low_depth.tsv" tmp.vcf.gz > "n100.r07.s095_output/n100.r07.s095.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s095_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f32a148cf374b4df54b293ff5f41ca14a87ab23c083dfa863378c244c4c9179b 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.8MiB max=124.9MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=525B max=2.1KiB
2021/07/08 17:19:45 scheduler task 95bdea1f (flow 03bfd7f5): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s095.tar.gz resources {}
2021/07/08 17:19:45  ->  n100.r07.s095.Main.cp_out_file 03bfd7f5 exec extern s3://niema-test/n100/r07/n100.r07.s095.tar.gz 35.7MiB
2021/07/08 17:19:45 scheduler task 746a45ea (flow 15e4555d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:83016b3ac9b9c27c8c8a12ed1dfad4672fc9cc8dfcab167629977f2527cfe37d -> s3://niema-test/n100/r07/n100.r07.s005.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:19:45  <-  n100.r07.s005.Main.cp_out_file 15e4555d ok   extern 0s 35.8MiB
2021/07/08 17:19:45 scheduler task e2af4871 (flow 41a5e943): unloaded val<.=755db5e3 35.4MiB>
2021/07/08 17:19:45 scheduler task e2af4871 (flow 41a5e943): unloaded val<.=78e32551 35.4MiB>
2021/07/08 17:19:45 scheduler task e2af4871 (flow 41a5e943): unloaded list<val<.=3e473bc2 35.8MiB> 35.8MiB>
2021/07/08 17:19:45 scheduler task e2af4871 (flow 41a5e943): unloading (try 0): successful, next state: complete
2021/07/08 17:19:45  <-  n100.r07.s008.Main.out_file 41a5e943 ok     exec 5m19s 35.8MiB
2021/07/08 17:19:45 n100.r07.s008.Main.out_file 41a5e943 n100/r07/n100.r07.s008.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a0363d2eda2f51cdf2d6499d8bf0870ebb21627eee83d64e509feed715efebf4
	sha256:41a5e9432eec2c2783ca36325d3fe8b7c62a307663a371353903161bb8096f6f
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e2af487107d8f96ddf3b61a86b821b982344b0153027a5ad04c2fec2284aec67
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s008_output"
	    wget -O "n100.r07.s008_output/n100.r07.s008.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s008_output/n100.r07.s008.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s008_output/n100.r07.s008.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s008_output/n100.r07.s008.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s008_output/n100.r07.s008.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s008_output/n100.r07.s008.reference.fas" "n100.r07.s008_output/n100.r07.s008.fq1.fastq" "n100.r07.s008_output/n100.r07.s008.fq2.fastq" | samtools view -bS - > "n100.r07.s008_output/n100.r07.s008.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s008_output/n100.r07.s008.untrimmed.sorted.bam" "n100.r07.s008_output/n100.r07.s008.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s008_output/n100.r07.s008.untrimmed.sorted.bam" -b "n100.r07.s008_output/n100.r07.s008.primers.bed" -p "n100.r07.s008_output/n100.r07.s008.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s008_output/n100.r07.s008.trimmed.sorted.bam" "n100.r07.s008_output/n100.r07.s008.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s008_output/n100.r07.s008.reference.fas" "n100.r07.s008_output/n100.r07.s008.trimmed.sorted.bam" > "n100.r07.s008_output/n100.r07.s008.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s008_output/n100.r07.s008.reference.fas" --call-indels "n100.r07.s008_output/n100.r07.s008.trimmed.sorted.bam" > "n100.r07.s008_output/n100.r07.s008.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s008_output/n100.r07.s008.trimmed.sorted.bam" > "n100.r07.s008_output/n100.r07.s008.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s008_output/n100.r07.s008.depth.txt" "n100.r07.s008_output/n100.r07.s008.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s008_output/n100.r07.s008.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s008_output/n100.r07.s008.reference.fas" | bcftools consensus -m "n100.r07.s008_output/n100.r07.s008.low_depth.tsv" tmp.vcf.gz > "n100.r07.s008_output/n100.r07.s008.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s008_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:3e473bc2b59b464df858bd66d233f301700f15c2ad0541861788f31713063799 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.1MiB max=122.5MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:19:45 scheduler task 773ca5e7 (flow 2fce4cd0): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s008.tar.gz resources {}
2021/07/08 17:19:45  ->  n100.r07.s008.Main.cp_out_file 2fce4cd0 exec extern s3://niema-test/n100/r07/n100.r07.s008.tar.gz 35.8MiB
2021/07/08 17:19:45 scheduler task 3d2380ba (flow 90113c2d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:45 scheduler task 3d2380ba (flow 90113c2d): transferring output (try 0): started
2021/07/08 17:19:45 scheduler task eebbb090 (flow 2cedb108): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:45 scheduler task eebbb090 (flow 2cedb108): retrieving diagnostic output (try 0): started
2021/07/08 17:19:45 scheduler task e846f94e (flow e3291b28): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:eaf3652d0603c8114e6229646110b4f73e9dcd047c103e97a37005116fb82b5d -> s3://niema-test/n100/r07/n100.r07.s077.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:45  <-  n100.r07.s077.Main.cp_out_file e3291b28 ok   extern 0s 35.7MiB
2021/07/08 17:19:45 scheduler task eebbb090 (flow 2cedb108): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:45 scheduler task eebbb090 (flow 2cedb108): retrieving result (try 0): started
2021/07/08 17:19:45 scheduler task 57e27363 (flow cd67159a): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:45 scheduler task 57e27363 (flow cd67159a): unloading (try 0): started
2021/07/08 17:19:45 scheduler task 57e27363 (flow cd67159a): unloading list<val<.=6657c481 35.8MiB> 35.8MiB>
2021/07/08 17:19:45 scheduler task 57e27363 (flow cd67159a): unloading val<.=794f0f86 35.4MiB>
2021/07/08 17:19:45 scheduler task 57e27363 (flow cd67159a): unloading val<.=acfa43b8 35.4MiB>
2021/07/08 17:19:45 scheduler task a1216deb (flow a6081c46): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:45 scheduler task eebbb090 (flow 2cedb108): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:45 scheduler task a1216deb (flow a6081c46): promoting objects (try 0): started
2021/07/08 17:19:45 scheduler task eebbb090 (flow 2cedb108): transferring output (try 0): started
2021/07/08 17:19:45 scheduler task 57e27363 (flow cd67159a): unloaded val<.=794f0f86 35.4MiB>
2021/07/08 17:19:45 scheduler task 57e27363 (flow cd67159a): unloaded list<val<.=6657c481 35.8MiB> 35.8MiB>
2021/07/08 17:19:45 scheduler task 57e27363 (flow cd67159a): unloaded val<.=acfa43b8 35.4MiB>
2021/07/08 17:19:45 scheduler task 57e27363 (flow cd67159a): unloading (try 0): successful, next state: complete
2021/07/08 17:19:45  <-  n100.r07.s031.Main.out_file cd67159a ok     exec 5m9s 35.8MiB
2021/07/08 17:19:45 n100.r07.s031.Main.out_file cd67159a n100/r07/n100.r07.s031.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1e4f19a28580c350671b170ed9ad3fa410ea3d2aed8b19a9c53481bf13f100e1
	sha256:cd67159a6bd3d8226c999d5f1102dfdf84af08ed92260c1c5019250b152ad8b1
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/57e27363e674a83c0737fd5ec4e85d475600a20c6e122f6da192bdb290b5104e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s031_output"
	    wget -O "n100.r07.s031_output/n100.r07.s031.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s031_output/n100.r07.s031.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s031_output/n100.r07.s031.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s031_output/n100.r07.s031.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s031_output/n100.r07.s031.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s031_output/n100.r07.s031.reference.fas" "n100.r07.s031_output/n100.r07.s031.fq1.fastq" "n100.r07.s031_output/n100.r07.s031.fq2.fastq" | samtools view -bS - > "n100.r07.s031_output/n100.r07.s031.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s031_output/n100.r07.s031.untrimmed.sorted.bam" "n100.r07.s031_output/n100.r07.s031.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s031_output/n100.r07.s031.untrimmed.sorted.bam" -b "n100.r07.s031_output/n100.r07.s031.primers.bed" -p "n100.r07.s031_output/n100.r07.s031.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s031_output/n100.r07.s031.trimmed.sorted.bam" "n100.r07.s031_output/n100.r07.s031.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s031_output/n100.r07.s031.reference.fas" "n100.r07.s031_output/n100.r07.s031.trimmed.sorted.bam" > "n100.r07.s031_output/n100.r07.s031.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s031_output/n100.r07.s031.reference.fas" --call-indels "n100.r07.s031_output/n100.r07.s031.trimmed.sorted.bam" > "n100.r07.s031_output/n100.r07.s031.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s031_output/n100.r07.s031.trimmed.sorted.bam" > "n100.r07.s031_output/n100.r07.s031.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s031_output/n100.r07.s031.depth.txt" "n100.r07.s031_output/n100.r07.s031.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s031_output/n100.r07.s031.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s031_output/n100.r07.s031.reference.fas" | bcftools consensus -m "n100.r07.s031_output/n100.r07.s031.low_depth.tsv" tmp.vcf.gz > "n100.r07.s031_output/n100.r07.s031.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s031_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:6657c481e5d56b8f1eb66f09e259170ebfecb9b15fb0a8af00e9831bacc3134f 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=24.5MiB max=127.1MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=521B max=2.0KiB
2021/07/08 17:19:45 scheduler task 15a1b3c8 (flow aaf0fc00): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s031.tar.gz resources {}
2021/07/08 17:19:45  ->  n100.r07.s031.Main.cp_out_file aaf0fc00 exec extern s3://niema-test/n100/r07/n100.r07.s031.tar.gz 35.8MiB
2021/07/08 17:19:45 scheduler task a1216deb (flow a6081c46): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:45 scheduler task a1216deb (flow a6081c46): retrieving diagnostic output (try 0): started
2021/07/08 17:19:46 scheduler task 18db9c9a (flow edcaa27c): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:46 scheduler task 18db9c9a (flow edcaa27c): promoting objects (try 0): started
2021/07/08 17:19:46 scheduler task cbc7ffd0 (flow f84bcf3d): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:46 scheduler task cbc7ffd0 (flow f84bcf3d): unloading (try 0): started
2021/07/08 17:19:46 scheduler task cbc7ffd0 (flow f84bcf3d): unloading list<val<.=721d8b09 35.7MiB> 35.7MiB>
2021/07/08 17:19:46 scheduler task cbc7ffd0 (flow f84bcf3d): unloading val<.=3d72fb01 35.4MiB>
2021/07/08 17:19:46 scheduler task cbc7ffd0 (flow f84bcf3d): unloading val<.=7f34a5fa 35.4MiB>
2021/07/08 17:19:46 scheduler task b7539818 (flow 71ab994b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:30cbea03f71fc34790f7a6ba4d0d0822eefe85b52b3f04a6a90e6ce7ad777d32 -> s3://niema-test/n100/r07/n100.r07.s079.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:46  <-  n100.r07.s079.Main.cp_out_file 71ab994b ok   extern 0s 35.7MiB
2021/07/08 17:19:46 scheduler task a1216deb (flow a6081c46): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:46 scheduler task a1216deb (flow a6081c46): retrieving result (try 0): started
2021/07/08 17:19:46 scheduler task 18db9c9a (flow edcaa27c): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:46 scheduler task 18db9c9a (flow edcaa27c): retrieving diagnostic output (try 0): started
2021/07/08 17:19:46 scheduler task cbc7ffd0 (flow f84bcf3d): unloaded val<.=3d72fb01 35.4MiB>
2021/07/08 17:19:46 scheduler task cbc7ffd0 (flow f84bcf3d): unloaded list<val<.=721d8b09 35.7MiB> 35.7MiB>
2021/07/08 17:19:46 scheduler task cbc7ffd0 (flow f84bcf3d): unloaded val<.=7f34a5fa 35.4MiB>
2021/07/08 17:19:46 scheduler task cbc7ffd0 (flow f84bcf3d): unloading (try 0): successful, next state: complete
2021/07/08 17:19:46  <-  n100.r07.s012.Main.out_file f84bcf3d ok     exec 5m10s 35.7MiB
2021/07/08 17:19:46 n100.r07.s012.Main.out_file f84bcf3d n100/r07/n100.r07.s012.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:dc79eb543ff43ec9996b0380486995a2a4528a3afb20d5e584221f3ac3b32203
	sha256:f84bcf3d8501967ec24757f070ae2ed507f73b73ec7676d7112e3b0394ca78ec
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cbc7ffd0fcb2d53dcdf5b7ac2f3f27d1b468e1bf6d9615d9d3e7996d61bf94d7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s012_output"
	    wget -O "n100.r07.s012_output/n100.r07.s012.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s012_output/n100.r07.s012.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s012_output/n100.r07.s012.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s012_output/n100.r07.s012.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s012_output/n100.r07.s012.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s012_output/n100.r07.s012.reference.fas" "n100.r07.s012_output/n100.r07.s012.fq1.fastq" "n100.r07.s012_output/n100.r07.s012.fq2.fastq" | samtools view -bS - > "n100.r07.s012_output/n100.r07.s012.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s012_output/n100.r07.s012.untrimmed.sorted.bam" "n100.r07.s012_output/n100.r07.s012.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s012_output/n100.r07.s012.untrimmed.sorted.bam" -b "n100.r07.s012_output/n100.r07.s012.primers.bed" -p "n100.r07.s012_output/n100.r07.s012.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s012_output/n100.r07.s012.trimmed.sorted.bam" "n100.r07.s012_output/n100.r07.s012.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s012_output/n100.r07.s012.reference.fas" "n100.r07.s012_output/n100.r07.s012.trimmed.sorted.bam" > "n100.r07.s012_output/n100.r07.s012.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s012_output/n100.r07.s012.reference.fas" --call-indels "n100.r07.s012_output/n100.r07.s012.trimmed.sorted.bam" > "n100.r07.s012_output/n100.r07.s012.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s012_output/n100.r07.s012.trimmed.sorted.bam" > "n100.r07.s012_output/n100.r07.s012.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s012_output/n100.r07.s012.depth.txt" "n100.r07.s012_output/n100.r07.s012.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s012_output/n100.r07.s012.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s012_output/n100.r07.s012.reference.fas" | bcftools consensus -m "n100.r07.s012_output/n100.r07.s012.low_depth.tsv" tmp.vcf.gz > "n100.r07.s012_output/n100.r07.s012.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s012_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:721d8b097fc9b4e97c3bdfdb532f1d6fcf8ec630a7106dcfa7637bbb7da6457e 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.8MiB max=130.2MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:19:46 scheduler task d497c42f (flow b591addf): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s012.tar.gz resources {}
2021/07/08 17:19:46  ->  n100.r07.s012.Main.cp_out_file b591addf exec extern s3://niema-test/n100/r07/n100.r07.s012.tar.gz 35.7MiB
2021/07/08 17:19:46 scheduler task a1216deb (flow a6081c46): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:46 scheduler task a1216deb (flow a6081c46): transferring output (try 0): started
2021/07/08 17:19:46 scheduler task 18db9c9a (flow edcaa27c): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:46 scheduler task 18db9c9a (flow edcaa27c): retrieving result (try 0): started
2021/07/08 17:19:46 scheduler task c5e7e1a0 (flow a96e84b2): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9c307698803586720f9c4483d70689b73c084b343afc66aa86b5c58ba890d7a3 -> s3://niema-test/n100/r07/n100.r07.s053.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:46  <-  n100.r07.s053.Main.cp_out_file a96e84b2 ok   extern 0s 35.7MiB
2021/07/08 17:19:46 scheduler task 95bdea1f (flow 03bfd7f5): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f32a148cf374b4df54b293ff5f41ca14a87ab23c083dfa863378c244c4c9179b -> s3://niema-test/n100/r07/n100.r07.s095.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:46  <-  n100.r07.s095.Main.cp_out_file 03bfd7f5 ok   extern 0s 35.7MiB
2021/07/08 17:19:46 scheduler task 18db9c9a (flow edcaa27c): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:46 scheduler task ee486401 (flow acaec2ed): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:46 scheduler task 18db9c9a (flow edcaa27c): transferring output (try 0): started
2021/07/08 17:19:46 scheduler task ee486401 (flow acaec2ed): promoting objects (try 0): started
2021/07/08 17:19:46 scheduler task 3d2380ba (flow 90113c2d): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:46 scheduler task 3d2380ba (flow 90113c2d): unloading (try 0): started
2021/07/08 17:19:46 scheduler task 3d2380ba (flow 90113c2d): unloading list<val<.=056d9f9a 35.7MiB> 35.7MiB>
2021/07/08 17:19:46 scheduler task 3d2380ba (flow 90113c2d): unloading val<.=08bdeacb 35.4MiB>
2021/07/08 17:19:46 scheduler task 3d2380ba (flow 90113c2d): unloading val<.=2b7caeae 35.4MiB>
2021/07/08 17:19:46 scheduler task eebbb090 (flow 2cedb108): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:46 scheduler task eebbb090 (flow 2cedb108): unloading (try 0): started
2021/07/08 17:19:46 scheduler task eebbb090 (flow 2cedb108): unloading list<val<.=1e453663 35.7MiB> 35.7MiB>
2021/07/08 17:19:46 scheduler task eebbb090 (flow 2cedb108): unloading val<.=e880845f 35.4MiB>
2021/07/08 17:19:46 scheduler task eebbb090 (flow 2cedb108): unloading val<.=8d0bcd10 35.4MiB>
2021/07/08 17:19:46 scheduler task 773ca5e7 (flow 2fce4cd0): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:3e473bc2b59b464df858bd66d233f301700f15c2ad0541861788f31713063799 -> s3://niema-test/n100/r07/n100.r07.s008.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:19:46  <-  n100.r07.s008.Main.cp_out_file 2fce4cd0 ok   extern 0s 35.8MiB
2021/07/08 17:19:46 scheduler task d6a5ea9f (flow bc6da4cb): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:46 scheduler task d6a5ea9f (flow bc6da4cb): promoting objects (try 0): started
2021/07/08 17:19:46 scheduler task ee486401 (flow acaec2ed): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:46 scheduler task b79979ad (flow 627a1f3f): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:46 scheduler task ee486401 (flow acaec2ed): retrieving diagnostic output (try 0): started
2021/07/08 17:19:46 scheduler task 3d2380ba (flow 90113c2d): unloaded list<val<.=056d9f9a 35.7MiB> 35.7MiB>
2021/07/08 17:19:46 scheduler task b79979ad (flow 627a1f3f): promoting objects (try 0): started
2021/07/08 17:19:46 scheduler task 3d2380ba (flow 90113c2d): unloaded val<.=08bdeacb 35.4MiB>
2021/07/08 17:19:46 scheduler task 3d2380ba (flow 90113c2d): unloaded val<.=2b7caeae 35.4MiB>
2021/07/08 17:19:46 scheduler task 3d2380ba (flow 90113c2d): unloading (try 0): successful, next state: complete
2021/07/08 17:19:46  <-  n100.r07.s030.Main.out_file 90113c2d ok     exec 5m19s 35.7MiB
2021/07/08 17:19:46 n100.r07.s030.Main.out_file 90113c2d n100/r07/n100.r07.s030.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c64c919cb80cbbb85ad85ab18531e63e3607f34ab3edfb3c4ffb6a3a440faa06
	sha256:90113c2d4ab071f2a7820ec326b37b37d8c1f6a5c4f74f86eb1c601fc976df67
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3d2380bacf721c9635296cb0a6a1d49c4a6e9e9b332841a72b0f504d9ac9fdf4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s030_output"
	    wget -O "n100.r07.s030_output/n100.r07.s030.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s030_output/n100.r07.s030.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s030_output/n100.r07.s030.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s030_output/n100.r07.s030.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s030_output/n100.r07.s030.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s030_output/n100.r07.s030.reference.fas" "n100.r07.s030_output/n100.r07.s030.fq1.fastq" "n100.r07.s030_output/n100.r07.s030.fq2.fastq" | samtools view -bS - > "n100.r07.s030_output/n100.r07.s030.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s030_output/n100.r07.s030.untrimmed.sorted.bam" "n100.r07.s030_output/n100.r07.s030.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s030_output/n100.r07.s030.untrimmed.sorted.bam" -b "n100.r07.s030_output/n100.r07.s030.primers.bed" -p "n100.r07.s030_output/n100.r07.s030.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s030_output/n100.r07.s030.trimmed.sorted.bam" "n100.r07.s030_output/n100.r07.s030.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s030_output/n100.r07.s030.reference.fas" "n100.r07.s030_output/n100.r07.s030.trimmed.sorted.bam" > "n100.r07.s030_output/n100.r07.s030.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s030_output/n100.r07.s030.reference.fas" --call-indels "n100.r07.s030_output/n100.r07.s030.trimmed.sorted.bam" > "n100.r07.s030_output/n100.r07.s030.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s030_output/n100.r07.s030.trimmed.sorted.bam" > "n100.r07.s030_output/n100.r07.s030.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s030_output/n100.r07.s030.depth.txt" "n100.r07.s030_output/n100.r07.s030.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s030_output/n100.r07.s030.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s030_output/n100.r07.s030.reference.fas" | bcftools consensus -m "n100.r07.s030_output/n100.r07.s030.low_depth.tsv" tmp.vcf.gz > "n100.r07.s030_output/n100.r07.s030.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s030_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:056d9f9ab16aa09617067ad74a1739b50eb37783e0e3c6b71bbdddb5645d451f 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.0MiB max=126.3MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:19:46 scheduler task 7883f8be (flow 3473c064): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s030.tar.gz resources {}
2021/07/08 17:19:46  ->  n100.r07.s030.Main.cp_out_file 3473c064 exec extern s3://niema-test/n100/r07/n100.r07.s030.tar.gz 35.7MiB
2021/07/08 17:19:46 scheduler task eebbb090 (flow 2cedb108): unloaded list<val<.=1e453663 35.7MiB> 35.7MiB>
2021/07/08 17:19:46 scheduler task eebbb090 (flow 2cedb108): unloaded val<.=e880845f 35.4MiB>
2021/07/08 17:19:46 scheduler task f2bf54fd (flow d73b86a9): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:46 scheduler task eebbb090 (flow 2cedb108): unloaded val<.=8d0bcd10 35.4MiB>
2021/07/08 17:19:46 scheduler task eebbb090 (flow 2cedb108): unloading (try 0): successful, next state: complete
2021/07/08 17:19:46 scheduler task f2bf54fd (flow d73b86a9): promoting objects (try 0): started
2021/07/08 17:19:46  <-  n100.r07.s054.Main.out_file 2cedb108 ok     exec 5m1s 35.7MiB
2021/07/08 17:19:46 n100.r07.s054.Main.out_file 2cedb108 n100/r07/n100.r07.s054.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f45afddd9a1e1dfaf83bba5fd7ffb7cff807d6cee03fe0e0fcac86655caeeddc
	sha256:2cedb108b352494514cf563b0c0a18cdc4162a6046bc8a58fcede4f2e0fd8a91
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/eebbb09003863ad9852d46114745e2e3abc9e00b7ea4d5d450b323e8d49acc55
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s054_output"
	    wget -O "n100.r07.s054_output/n100.r07.s054.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s054_output/n100.r07.s054.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s054_output/n100.r07.s054.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s054_output/n100.r07.s054.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s054_output/n100.r07.s054.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s054_output/n100.r07.s054.reference.fas" "n100.r07.s054_output/n100.r07.s054.fq1.fastq" "n100.r07.s054_output/n100.r07.s054.fq2.fastq" | samtools view -bS - > "n100.r07.s054_output/n100.r07.s054.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s054_output/n100.r07.s054.untrimmed.sorted.bam" "n100.r07.s054_output/n100.r07.s054.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s054_output/n100.r07.s054.untrimmed.sorted.bam" -b "n100.r07.s054_output/n100.r07.s054.primers.bed" -p "n100.r07.s054_output/n100.r07.s054.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s054_output/n100.r07.s054.trimmed.sorted.bam" "n100.r07.s054_output/n100.r07.s054.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s054_output/n100.r07.s054.reference.fas" "n100.r07.s054_output/n100.r07.s054.trimmed.sorted.bam" > "n100.r07.s054_output/n100.r07.s054.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s054_output/n100.r07.s054.reference.fas" --call-indels "n100.r07.s054_output/n100.r07.s054.trimmed.sorted.bam" > "n100.r07.s054_output/n100.r07.s054.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s054_output/n100.r07.s054.trimmed.sorted.bam" > "n100.r07.s054_output/n100.r07.s054.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s054_output/n100.r07.s054.depth.txt" "n100.r07.s054_output/n100.r07.s054.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s054_output/n100.r07.s054.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s054_output/n100.r07.s054.reference.fas" | bcftools consensus -m "n100.r07.s054_output/n100.r07.s054.low_depth.tsv" tmp.vcf.gz > "n100.r07.s054_output/n100.r07.s054.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s054_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:1e453663b79c81eb6eebfe190da6c5058b2447ff9973775c8c67ed468883a055 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.9MiB max=128.2MiB
	    disk mean=6.3MiB max=35.7MiB
	    tmp mean=174B max=1.0KiB
2021/07/08 17:19:46 scheduler task c515e53b (flow e3550cf8): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s054.tar.gz resources {}
2021/07/08 17:19:46  ->  n100.r07.s054.Main.cp_out_file e3550cf8 exec extern s3://niema-test/n100/r07/n100.r07.s054.tar.gz 35.7MiB
2021/07/08 17:19:46 scheduler task d6a5ea9f (flow bc6da4cb): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:46 scheduler task d6a5ea9f (flow bc6da4cb): retrieving diagnostic output (try 0): started
2021/07/08 17:19:46 scheduler task ee486401 (flow acaec2ed): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:46 scheduler task ee486401 (flow acaec2ed): retrieving result (try 0): started
2021/07/08 17:19:46 scheduler task b79979ad (flow 627a1f3f): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:46 scheduler task b79979ad (flow 627a1f3f): retrieving diagnostic output (try 0): started
2021/07/08 17:19:46 scheduler task f2bf54fd (flow d73b86a9): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:46 scheduler task f2bf54fd (flow d73b86a9): retrieving diagnostic output (try 0): started
2021/07/08 17:19:46 scheduler task d6a5ea9f (flow bc6da4cb): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:46 scheduler task d6a5ea9f (flow bc6da4cb): retrieving result (try 0): started
2021/07/08 17:19:46 scheduler task ee486401 (flow acaec2ed): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:46 scheduler task ee486401 (flow acaec2ed): transferring output (try 0): started
2021/07/08 17:19:46 scheduler task b79979ad (flow 627a1f3f): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:46 scheduler task b79979ad (flow 627a1f3f): retrieving result (try 0): started
2021/07/08 17:19:46 scheduler task f2bf54fd (flow d73b86a9): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:46 scheduler task d6a5ea9f (flow bc6da4cb): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:46 scheduler task 15a1b3c8 (flow aaf0fc00): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:6657c481e5d56b8f1eb66f09e259170ebfecb9b15fb0a8af00e9831bacc3134f -> s3://niema-test/n100/r07/n100.r07.s031.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:19:46  <-  n100.r07.s031.Main.cp_out_file aaf0fc00 ok   extern 0s 35.8MiB
2021/07/08 17:19:46 scheduler task d6a5ea9f (flow bc6da4cb): transferring output (try 0): started
2021/07/08 17:19:46 scheduler task f2bf54fd (flow d73b86a9): retrieving result (try 0): started
2021/07/08 17:19:46 scheduler task b79979ad (flow 627a1f3f): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:46 scheduler task b79979ad (flow 627a1f3f): transferring output (try 0): started
2021/07/08 17:19:46 scheduler task a1216deb (flow a6081c46): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:46 scheduler task f2bf54fd (flow d73b86a9): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:46 scheduler task d497c42f (flow b591addf): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:721d8b097fc9b4e97c3bdfdb532f1d6fcf8ec630a7106dcfa7637bbb7da6457e -> s3://niema-test/n100/r07/n100.r07.s012.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:46  <-  n100.r07.s012.Main.cp_out_file b591addf ok   extern 0s 35.7MiB
2021/07/08 17:19:46 scheduler task a1216deb (flow a6081c46): unloading (try 0): started
2021/07/08 17:19:46 scheduler task a1216deb (flow a6081c46): unloading list<val<.=19b511b1 35.8MiB> 35.8MiB>
2021/07/08 17:19:46 scheduler task a1216deb (flow a6081c46): unloading val<.=44b9712f 35.4MiB>
2021/07/08 17:19:46 scheduler task a1216deb (flow a6081c46): unloading val<.=4fbd7cf7 35.4MiB>
2021/07/08 17:19:46 scheduler task f2bf54fd (flow d73b86a9): transferring output (try 0): started
2021/07/08 17:19:46 scheduler task 6f663194 (flow bb352724): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:46 scheduler task 6f663194 (flow bb352724): promoting objects (try 0): started
2021/07/08 17:19:46 scheduler task a1216deb (flow a6081c46): unloaded val<.=44b9712f 35.4MiB>
2021/07/08 17:19:46 scheduler task a1216deb (flow a6081c46): unloaded list<val<.=19b511b1 35.8MiB> 35.8MiB>
2021/07/08 17:19:46 scheduler task a1216deb (flow a6081c46): unloaded val<.=4fbd7cf7 35.4MiB>
2021/07/08 17:19:46 scheduler task a1216deb (flow a6081c46): unloading (try 0): successful, next state: complete
2021/07/08 17:19:46  <-  n100.r07.s067.Main.out_file a6081c46 ok     exec 5m11s 35.8MiB
2021/07/08 17:19:46 n100.r07.s067.Main.out_file a6081c46 n100/r07/n100.r07.s067.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b5d5cdaddb0d331352f6847d5d38a8b46fe6e45419c077515310fa2fb474c491
	sha256:a6081c46d84bbaa06027b2c3d9982895797ea82c98976a3ca8cae664f23aa599
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a1216deb143740ff1b73a6081bff26d4d32433349d68c6cb919691ced5a9956a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s067_output"
	    wget -O "n100.r07.s067_output/n100.r07.s067.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s067_output/n100.r07.s067.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s067_output/n100.r07.s067.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s067_output/n100.r07.s067.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s067_output/n100.r07.s067.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s067_output/n100.r07.s067.reference.fas" "n100.r07.s067_output/n100.r07.s067.fq1.fastq" "n100.r07.s067_output/n100.r07.s067.fq2.fastq" | samtools view -bS - > "n100.r07.s067_output/n100.r07.s067.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s067_output/n100.r07.s067.untrimmed.sorted.bam" "n100.r07.s067_output/n100.r07.s067.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s067_output/n100.r07.s067.untrimmed.sorted.bam" -b "n100.r07.s067_output/n100.r07.s067.primers.bed" -p "n100.r07.s067_output/n100.r07.s067.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s067_output/n100.r07.s067.trimmed.sorted.bam" "n100.r07.s067_output/n100.r07.s067.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s067_output/n100.r07.s067.reference.fas" "n100.r07.s067_output/n100.r07.s067.trimmed.sorted.bam" > "n100.r07.s067_output/n100.r07.s067.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s067_output/n100.r07.s067.reference.fas" --call-indels "n100.r07.s067_output/n100.r07.s067.trimmed.sorted.bam" > "n100.r07.s067_output/n100.r07.s067.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s067_output/n100.r07.s067.trimmed.sorted.bam" > "n100.r07.s067_output/n100.r07.s067.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s067_output/n100.r07.s067.depth.txt" "n100.r07.s067_output/n100.r07.s067.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s067_output/n100.r07.s067.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s067_output/n100.r07.s067.reference.fas" | bcftools consensus -m "n100.r07.s067_output/n100.r07.s067.low_depth.tsv" tmp.vcf.gz > "n100.r07.s067_output/n100.r07.s067.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s067_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:19b511b100801440fd8486fee99d71367ab58efff1f890cf854a294724312dcc 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.0MiB max=128.6MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=521B max=2.0KiB
2021/07/08 17:19:46 scheduler task 49611f71 (flow ebc7a9a0): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s067.tar.gz resources {}
2021/07/08 17:19:46  ->  n100.r07.s067.Main.cp_out_file ebc7a9a0 exec extern s3://niema-test/n100/r07/n100.r07.s067.tar.gz 35.8MiB
2021/07/08 17:19:46 scheduler task 18db9c9a (flow edcaa27c): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:46 scheduler task 18db9c9a (flow edcaa27c): unloading (try 0): started
2021/07/08 17:19:46 scheduler task 18db9c9a (flow edcaa27c): unloading list<val<.=84a84832 35.7MiB> 35.7MiB>
2021/07/08 17:19:46 scheduler task 18db9c9a (flow edcaa27c): unloading val<.=f8536a0c 35.4MiB>
2021/07/08 17:19:46 scheduler task 18db9c9a (flow edcaa27c): unloading val<.=37aad99a 35.4MiB>
2021/07/08 17:19:46 scheduler task 6f663194 (flow bb352724): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:46 scheduler task 6f663194 (flow bb352724): retrieving diagnostic output (try 0): started
2021/07/08 17:19:46 scheduler task 57b5fd3c (flow 5c77ac92): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:eb05b2e0a473d00ae64a8c471c674d291a83f05ecbeebcc1a84cf3504c577e8d -> s3://niema-test/n100/r07/n100.r07.s078.tar.gz (35.7MiB) in 5s (7.1MiB/s) 
2021/07/08 17:19:46  <-  n100.r07.s078.Main.cp_out_file 5c77ac92 ok   extern 0s 35.7MiB
2021/07/08 17:19:46 scheduler task 18db9c9a (flow edcaa27c): unloaded val<.=f8536a0c 35.4MiB>
2021/07/08 17:19:46 scheduler task 18db9c9a (flow edcaa27c): unloaded val<.=37aad99a 35.4MiB>
2021/07/08 17:19:46 scheduler task 18db9c9a (flow edcaa27c): unloaded list<val<.=84a84832 35.7MiB> 35.7MiB>
2021/07/08 17:19:46 scheduler task 18db9c9a (flow edcaa27c): unloading (try 0): successful, next state: complete
2021/07/08 17:19:46  <-  n100.r07.s046.Main.out_file edcaa27c ok     exec 5m18s 35.7MiB
2021/07/08 17:19:46 n100.r07.s046.Main.out_file edcaa27c n100/r07/n100.r07.s046.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fbb2c03508d8648f6b8c288840d1d69f8eb5aef59597d3882d6f7ca6626ead97
	sha256:edcaa27c48eabc8fd43d436cf1c8364cdcdaf06972b5cc877ec6d21314a66540
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/18db9c9a51aeda3eef6567d2984216150ef1b555f507cf1c4ffc044f3272b819
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s046_output"
	    wget -O "n100.r07.s046_output/n100.r07.s046.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s046_output/n100.r07.s046.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s046_output/n100.r07.s046.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s046_output/n100.r07.s046.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s046_output/n100.r07.s046.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s046_output/n100.r07.s046.reference.fas" "n100.r07.s046_output/n100.r07.s046.fq1.fastq" "n100.r07.s046_output/n100.r07.s046.fq2.fastq" | samtools view -bS - > "n100.r07.s046_output/n100.r07.s046.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s046_output/n100.r07.s046.untrimmed.sorted.bam" "n100.r07.s046_output/n100.r07.s046.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s046_output/n100.r07.s046.untrimmed.sorted.bam" -b "n100.r07.s046_output/n100.r07.s046.primers.bed" -p "n100.r07.s046_output/n100.r07.s046.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s046_output/n100.r07.s046.trimmed.sorted.bam" "n100.r07.s046_output/n100.r07.s046.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s046_output/n100.r07.s046.reference.fas" "n100.r07.s046_output/n100.r07.s046.trimmed.sorted.bam" > "n100.r07.s046_output/n100.r07.s046.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s046_output/n100.r07.s046.reference.fas" --call-indels "n100.r07.s046_output/n100.r07.s046.trimmed.sorted.bam" > "n100.r07.s046_output/n100.r07.s046.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s046_output/n100.r07.s046.trimmed.sorted.bam" > "n100.r07.s046_output/n100.r07.s046.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s046_output/n100.r07.s046.depth.txt" "n100.r07.s046_output/n100.r07.s046.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s046_output/n100.r07.s046.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s046_output/n100.r07.s046.reference.fas" | bcftools consensus -m "n100.r07.s046_output/n100.r07.s046.low_depth.tsv" tmp.vcf.gz > "n100.r07.s046_output/n100.r07.s046.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s046_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:84a84832f90a6aa941d0c39de5df8e21e682f73c6f0cd7202e04dd12e584cb55 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.3MiB max=130.0MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=525B max=2.1KiB
2021/07/08 17:19:46 scheduler task 42d092c1 (flow c97dc176): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s046.tar.gz resources {}
2021/07/08 17:19:46  ->  n100.r07.s046.Main.cp_out_file c97dc176 exec extern s3://niema-test/n100/r07/n100.r07.s046.tar.gz 35.7MiB
2021/07/08 17:19:46 scheduler task 6f663194 (flow bb352724): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:46 scheduler task 6f663194 (flow bb352724): retrieving result (try 0): started
2021/07/08 17:19:47 scheduler task 6f663194 (flow bb352724): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:47 scheduler task 6f663194 (flow bb352724): transferring output (try 0): started
2021/07/08 17:19:47 scheduler task 7883f8be (flow 3473c064): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:056d9f9ab16aa09617067ad74a1739b50eb37783e0e3c6b71bbdddb5645d451f -> s3://niema-test/n100/r07/n100.r07.s030.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:47  <-  n100.r07.s030.Main.cp_out_file 3473c064 ok   extern 0s 35.7MiB
2021/07/08 17:19:47 scheduler task ee486401 (flow acaec2ed): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:47 scheduler task ee486401 (flow acaec2ed): unloading (try 0): started
2021/07/08 17:19:47 scheduler task ee486401 (flow acaec2ed): unloading list<val<.=9eea4277 35.7MiB> 35.7MiB>
2021/07/08 17:19:47 scheduler task ee486401 (flow acaec2ed): unloading val<.=e1c11a2b 35.4MiB>
2021/07/08 17:19:47 scheduler task ee486401 (flow acaec2ed): unloading val<.=0a7a1be0 35.4MiB>
2021/07/08 17:19:47 scheduler task c515e53b (flow e3550cf8): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:1e453663b79c81eb6eebfe190da6c5058b2447ff9973775c8c67ed468883a055 -> s3://niema-test/n100/r07/n100.r07.s054.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:47  <-  n100.r07.s054.Main.cp_out_file e3550cf8 ok   extern 0s 35.7MiB
2021/07/08 17:19:47 scheduler task 004d43f9 (flow 51e59bfc): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:47 scheduler task 004d43f9 (flow 51e59bfc): promoting objects (try 0): started
2021/07/08 17:19:47 scheduler task d6a5ea9f (flow bc6da4cb): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:47 scheduler task ee486401 (flow acaec2ed): unloaded list<val<.=9eea4277 35.7MiB> 35.7MiB>
2021/07/08 17:19:47 scheduler task ee486401 (flow acaec2ed): unloaded val<.=0a7a1be0 35.4MiB>
2021/07/08 17:19:47 scheduler task ee486401 (flow acaec2ed): unloaded val<.=e1c11a2b 35.4MiB>
2021/07/08 17:19:47 scheduler task ee486401 (flow acaec2ed): unloading (try 0): successful, next state: complete
2021/07/08 17:19:47 scheduler task d6a5ea9f (flow bc6da4cb): unloading (try 0): started
2021/07/08 17:19:47 scheduler task d6a5ea9f (flow bc6da4cb): unloading list<val<.=1bf7e75e 35.8MiB> 35.8MiB>
2021/07/08 17:19:47 scheduler task d6a5ea9f (flow bc6da4cb): unloading val<.=01d512c5 35.4MiB>
2021/07/08 17:19:47 scheduler task d6a5ea9f (flow bc6da4cb): unloading val<.=1c77f05a 35.4MiB>
2021/07/08 17:19:47  <-  n100.r07.s058.Main.out_file acaec2ed ok     exec 5m10s 35.7MiB
2021/07/08 17:19:47 n100.r07.s058.Main.out_file acaec2ed n100/r07/n100.r07.s058.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5108ee0f30d94c904d5cd1d1d1de1f66c289c4d4d8ce83c399fbc106cb673d9b
	sha256:acaec2ed25eda4df7f9c5f8db95295590140316f94d6b29ea9a3211c0269fd01
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ee486401808c49e0084b6d26ffe89df2f1cc792e589aef350a931c6b04fc8337
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s058_output"
	    wget -O "n100.r07.s058_output/n100.r07.s058.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s058_output/n100.r07.s058.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s058_output/n100.r07.s058.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s058_output/n100.r07.s058.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s058_output/n100.r07.s058.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s058_output/n100.r07.s058.reference.fas" "n100.r07.s058_output/n100.r07.s058.fq1.fastq" "n100.r07.s058_output/n100.r07.s058.fq2.fastq" | samtools view -bS - > "n100.r07.s058_output/n100.r07.s058.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s058_output/n100.r07.s058.untrimmed.sorted.bam" "n100.r07.s058_output/n100.r07.s058.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s058_output/n100.r07.s058.untrimmed.sorted.bam" -b "n100.r07.s058_output/n100.r07.s058.primers.bed" -p "n100.r07.s058_output/n100.r07.s058.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s058_output/n100.r07.s058.trimmed.sorted.bam" "n100.r07.s058_output/n100.r07.s058.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s058_output/n100.r07.s058.reference.fas" "n100.r07.s058_output/n100.r07.s058.trimmed.sorted.bam" > "n100.r07.s058_output/n100.r07.s058.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s058_output/n100.r07.s058.reference.fas" --call-indels "n100.r07.s058_output/n100.r07.s058.trimmed.sorted.bam" > "n100.r07.s058_output/n100.r07.s058.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s058_output/n100.r07.s058.trimmed.sorted.bam" > "n100.r07.s058_output/n100.r07.s058.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s058_output/n100.r07.s058.depth.txt" "n100.r07.s058_output/n100.r07.s058.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s058_output/n100.r07.s058.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s058_output/n100.r07.s058.reference.fas" | bcftools consensus -m "n100.r07.s058_output/n100.r07.s058.low_depth.tsv" tmp.vcf.gz > "n100.r07.s058_output/n100.r07.s058.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s058_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9eea4277f630a3bff51284d86463438d666d6d7e5e35fbf039a2c7483f25c643 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=23.0MiB max=128.9MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 17:19:47 scheduler task 360a5af5 (flow 1df8fde6): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s058.tar.gz resources {}
2021/07/08 17:19:47  ->  n100.r07.s058.Main.cp_out_file 1df8fde6 exec extern s3://niema-test/n100/r07/n100.r07.s058.tar.gz 35.7MiB
2021/07/08 17:19:47 scheduler task b79979ad (flow 627a1f3f): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:47 scheduler task b79979ad (flow 627a1f3f): unloading (try 0): started
2021/07/08 17:19:47 scheduler task b79979ad (flow 627a1f3f): unloading list<val<.=29a45717 35.8MiB> 35.8MiB>
2021/07/08 17:19:47 scheduler task b79979ad (flow 627a1f3f): unloading val<.=f58e90da 35.4MiB>
2021/07/08 17:19:47 scheduler task b79979ad (flow 627a1f3f): unloading val<.=6823efd1 35.4MiB>
2021/07/08 17:19:47 scheduler task 004d43f9 (flow 51e59bfc): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:47 scheduler task 004d43f9 (flow 51e59bfc): retrieving diagnostic output (try 0): started
2021/07/08 17:19:47 scheduler task d6a5ea9f (flow bc6da4cb): unloaded list<val<.=1bf7e75e 35.8MiB> 35.8MiB>
2021/07/08 17:19:47 scheduler task d6a5ea9f (flow bc6da4cb): unloaded val<.=1c77f05a 35.4MiB>
2021/07/08 17:19:47 scheduler task d6a5ea9f (flow bc6da4cb): unloaded val<.=01d512c5 35.4MiB>
2021/07/08 17:19:47 scheduler task d6a5ea9f (flow bc6da4cb): unloading (try 0): successful, next state: complete
2021/07/08 17:19:47  <-  n100.r07.s075.Main.out_file bc6da4cb ok     exec 5m11s 35.8MiB
2021/07/08 17:19:47 n100.r07.s075.Main.out_file bc6da4cb n100/r07/n100.r07.s075.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:280b30229fe9e268d293162b2d7c0cab41877167a9fb79d57591844055ae0b8c
	sha256:bc6da4cbdebd8e8ca0647041f6e68f6980a576d0f8215f1fd700292770dc8f9a
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d6a5ea9f2354e5174a8234be7865860edf2c448715494fd5ad9b625dae565013
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s075_output"
	    wget -O "n100.r07.s075_output/n100.r07.s075.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s075_output/n100.r07.s075.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s075_output/n100.r07.s075.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s075_output/n100.r07.s075.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s075_output/n100.r07.s075.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s075_output/n100.r07.s075.reference.fas" "n100.r07.s075_output/n100.r07.s075.fq1.fastq" "n100.r07.s075_output/n100.r07.s075.fq2.fastq" | samtools view -bS - > "n100.r07.s075_output/n100.r07.s075.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s075_output/n100.r07.s075.untrimmed.sorted.bam" "n100.r07.s075_output/n100.r07.s075.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s075_output/n100.r07.s075.untrimmed.sorted.bam" -b "n100.r07.s075_output/n100.r07.s075.primers.bed" -p "n100.r07.s075_output/n100.r07.s075.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s075_output/n100.r07.s075.trimmed.sorted.bam" "n100.r07.s075_output/n100.r07.s075.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s075_output/n100.r07.s075.reference.fas" "n100.r07.s075_output/n100.r07.s075.trimmed.sorted.bam" > "n100.r07.s075_output/n100.r07.s075.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s075_output/n100.r07.s075.reference.fas" --call-indels "n100.r07.s075_output/n100.r07.s075.trimmed.sorted.bam" > "n100.r07.s075_output/n100.r07.s075.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s075_output/n100.r07.s075.trimmed.sorted.bam" > "n100.r07.s075_output/n100.r07.s075.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s075_output/n100.r07.s075.depth.txt" "n100.r07.s075_output/n100.r07.s075.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s075_output/n100.r07.s075.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s075_output/n100.r07.s075.reference.fas" | bcftools consensus -m "n100.r07.s075_output/n100.r07.s075.low_depth.tsv" tmp.vcf.gz > "n100.r07.s075_output/n100.r07.s075.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s075_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:1bf7e75ee0496837bbccffbf0eddc19709e675567e5946de074be15fdecf9579 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.2MiB max=130.0MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=522B max=2.1KiB
2021/07/08 17:19:47 scheduler task 41568525 (flow bf25d5c3): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s075.tar.gz resources {}
2021/07/08 17:19:47 scheduler task f2bf54fd (flow d73b86a9): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:47  ->  n100.r07.s075.Main.cp_out_file bf25d5c3 exec extern s3://niema-test/n100/r07/n100.r07.s075.tar.gz 35.8MiB
2021/07/08 17:19:47 scheduler task f2bf54fd (flow d73b86a9): unloading (try 0): started
2021/07/08 17:19:47 scheduler task f2bf54fd (flow d73b86a9): unloading list<val<.=59f7d662 35.7MiB> 35.7MiB>
2021/07/08 17:19:47 scheduler task f2bf54fd (flow d73b86a9): unloading val<.=a9315a7c 35.4MiB>
2021/07/08 17:19:47 scheduler task f2bf54fd (flow d73b86a9): unloading val<.=1d8f8082 35.4MiB>
2021/07/08 17:19:47 scheduler task b79979ad (flow 627a1f3f): unloaded val<.=6823efd1 35.4MiB>
2021/07/08 17:19:47 scheduler task b79979ad (flow 627a1f3f): unloaded val<.=f58e90da 35.4MiB>
2021/07/08 17:19:47 scheduler task b79979ad (flow 627a1f3f): unloaded list<val<.=29a45717 35.8MiB> 35.8MiB>
2021/07/08 17:19:47 scheduler task b79979ad (flow 627a1f3f): unloading (try 0): successful, next state: complete
2021/07/08 17:19:47 scheduler task 004d43f9 (flow 51e59bfc): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:47  <-  n100.r07.s001.Main.out_file 627a1f3f ok     exec 5m19s 35.8MiB
2021/07/08 17:19:47 n100.r07.s001.Main.out_file 627a1f3f n100/r07/n100.r07.s001.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e27326443faf54c83a89975b6d94ef6984513152fac0a1d0f0a94559bd8ed0eb
	sha256:627a1f3f11a1211494ade246bf4593ad4f1edee234cd6f5ecd9d70764a3c82ee
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b79979ad7928170032642cd4106d1ce28d7bdb81f5cd1fae71e0759cd7713c34
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s001_output"
	    wget -O "n100.r07.s001_output/n100.r07.s001.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s001_output/n100.r07.s001.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s001_output/n100.r07.s001.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s001_output/n100.r07.s001.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s001_output/n100.r07.s001.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s001_output/n100.r07.s001.reference.fas" "n100.r07.s001_output/n100.r07.s001.fq1.fastq" "n100.r07.s001_output/n100.r07.s001.fq2.fastq" | samtools view -bS - > "n100.r07.s001_output/n100.r07.s001.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s001_output/n100.r07.s001.untrimmed.sorted.bam" "n100.r07.s001_output/n100.r07.s001.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s001_output/n100.r07.s001.untrimmed.sorted.bam" -b "n100.r07.s001_output/n100.r07.s001.primers.bed" -p "n100.r07.s001_output/n100.r07.s001.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s001_output/n100.r07.s001.trimmed.sorted.bam" "n100.r07.s001_output/n100.r07.s001.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s001_output/n100.r07.s001.reference.fas" "n100.r07.s001_output/n100.r07.s001.trimmed.sorted.bam" > "n100.r07.s001_output/n100.r07.s001.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s001_output/n100.r07.s001.reference.fas" --call-indels "n100.r07.s001_output/n100.r07.s001.trimmed.sorted.bam" > "n100.r07.s001_output/n100.r07.s001.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s001_output/n100.r07.s001.trimmed.sorted.bam" > "n100.r07.s001_output/n100.r07.s001.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s001_output/n100.r07.s001.depth.txt" "n100.r07.s001_output/n100.r07.s001.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s001_output/n100.r07.s001.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s001_output/n100.r07.s001.reference.fas" | bcftools consensus -m "n100.r07.s001_output/n100.r07.s001.low_depth.tsv" tmp.vcf.gz > "n100.r07.s001_output/n100.r07.s001.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s001_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:29a45717c6abc262f051489965d72dc74ea76e9b68551a15882e72a5dbf7772c 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.5MiB max=129.6MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:19:47 scheduler task 5d4db83b (flow d2ae6ebb): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s001.tar.gz resources {}
2021/07/08 17:19:47  ->  n100.r07.s001.Main.cp_out_file d2ae6ebb exec extern s3://niema-test/n100/r07/n100.r07.s001.tar.gz 35.8MiB
2021/07/08 17:19:47 scheduler task 004d43f9 (flow 51e59bfc): retrieving result (try 0): started
2021/07/08 17:19:47 scheduler task bcd66609 (flow 365c94e8): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:47 scheduler task bcd66609 (flow 365c94e8): promoting objects (try 0): started
2021/07/08 17:19:47 scheduler task 30bfcda0 (flow 878d6e7b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:47 scheduler task f2bf54fd (flow d73b86a9): unloaded val<.=1d8f8082 35.4MiB>
2021/07/08 17:19:47 scheduler task f2bf54fd (flow d73b86a9): unloaded val<.=a9315a7c 35.4MiB>
2021/07/08 17:19:47 scheduler task f2bf54fd (flow d73b86a9): unloaded list<val<.=59f7d662 35.7MiB> 35.7MiB>
2021/07/08 17:19:47 scheduler task f2bf54fd (flow d73b86a9): unloading (try 0): successful, next state: complete
2021/07/08 17:19:47 scheduler task 30bfcda0 (flow 878d6e7b): promoting objects (try 0): started
2021/07/08 17:19:47  <-  n100.r07.s057.Main.out_file d73b86a9 ok     exec 5m11s 35.7MiB
2021/07/08 17:19:47 n100.r07.s057.Main.out_file d73b86a9 n100/r07/n100.r07.s057.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2cfd049fabcb662de1dd978c4cb2a268953c9e006a3613fe249ba9304b8fd735
	sha256:d73b86a9527655ef6347af8ab80703fef06d521a7cc566078c9dd3b5774f4f8e
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f2bf54fd2b5d140bf68f46e7f384b4184a25dc7be765b1ee0d497bb38f1eb00f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s057_output"
	    wget -O "n100.r07.s057_output/n100.r07.s057.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s057_output/n100.r07.s057.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s057_output/n100.r07.s057.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s057_output/n100.r07.s057.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s057_output/n100.r07.s057.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s057_output/n100.r07.s057.reference.fas" "n100.r07.s057_output/n100.r07.s057.fq1.fastq" "n100.r07.s057_output/n100.r07.s057.fq2.fastq" | samtools view -bS - > "n100.r07.s057_output/n100.r07.s057.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s057_output/n100.r07.s057.untrimmed.sorted.bam" "n100.r07.s057_output/n100.r07.s057.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s057_output/n100.r07.s057.untrimmed.sorted.bam" -b "n100.r07.s057_output/n100.r07.s057.primers.bed" -p "n100.r07.s057_output/n100.r07.s057.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s057_output/n100.r07.s057.trimmed.sorted.bam" "n100.r07.s057_output/n100.r07.s057.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s057_output/n100.r07.s057.reference.fas" "n100.r07.s057_output/n100.r07.s057.trimmed.sorted.bam" > "n100.r07.s057_output/n100.r07.s057.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s057_output/n100.r07.s057.reference.fas" --call-indels "n100.r07.s057_output/n100.r07.s057.trimmed.sorted.bam" > "n100.r07.s057_output/n100.r07.s057.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s057_output/n100.r07.s057.trimmed.sorted.bam" > "n100.r07.s057_output/n100.r07.s057.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s057_output/n100.r07.s057.depth.txt" "n100.r07.s057_output/n100.r07.s057.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s057_output/n100.r07.s057.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s057_output/n100.r07.s057.reference.fas" | bcftools consensus -m "n100.r07.s057_output/n100.r07.s057.low_depth.tsv" tmp.vcf.gz > "n100.r07.s057_output/n100.r07.s057.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s057_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:59f7d662220078a6b30bdd466785a4512a0efe78c17f49dde986f425a9b00d99 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.2MiB max=128.2MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.1KiB
2021/07/08 17:19:47 scheduler task 8b84a5ee (flow d2a7aa1c): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s057.tar.gz resources {}
2021/07/08 17:19:47  ->  n100.r07.s057.Main.cp_out_file d2a7aa1c exec extern s3://niema-test/n100/r07/n100.r07.s057.tar.gz 35.7MiB
2021/07/08 17:19:47 scheduler task 004d43f9 (flow 51e59bfc): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:47 scheduler task 004d43f9 (flow 51e59bfc): transferring output (try 0): started
2021/07/08 17:19:47 scheduler task 334f3996 (flow a9afc8a9): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:47 scheduler task 334f3996 (flow a9afc8a9): promoting objects (try 0): started
2021/07/08 17:19:47 scheduler task bcd66609 (flow 365c94e8): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:47 scheduler task bcd66609 (flow 365c94e8): retrieving diagnostic output (try 0): started
2021/07/08 17:19:47 scheduler task 30bfcda0 (flow 878d6e7b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:47 scheduler task 30bfcda0 (flow 878d6e7b): retrieving diagnostic output (try 0): started
2021/07/08 17:19:47 scheduler task 334f3996 (flow a9afc8a9): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:47 scheduler task bcd66609 (flow 365c94e8): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:47 scheduler task 334f3996 (flow a9afc8a9): retrieving diagnostic output (try 0): started
2021/07/08 17:19:47 scheduler task bcd66609 (flow 365c94e8): retrieving result (try 0): started
2021/07/08 17:19:47 scheduler task 30bfcda0 (flow 878d6e7b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:47 scheduler task 6f663194 (flow bb352724): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:47 scheduler task 49611f71 (flow ebc7a9a0): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:19b511b100801440fd8486fee99d71367ab58efff1f890cf854a294724312dcc -> s3://niema-test/n100/r07/n100.r07.s067.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:19:47  <-  n100.r07.s067.Main.cp_out_file ebc7a9a0 ok   extern 0s 35.8MiB
2021/07/08 17:19:47 scheduler task 30bfcda0 (flow 878d6e7b): retrieving result (try 0): started
2021/07/08 17:19:47 scheduler task 6f663194 (flow bb352724): unloading (try 0): started
2021/07/08 17:19:47 scheduler task 6f663194 (flow bb352724): unloading list<val<.=52c17d5e 35.8MiB> 35.8MiB>
2021/07/08 17:19:47 scheduler task 6f663194 (flow bb352724): unloading val<.=9eabe52d 35.4MiB>
2021/07/08 17:19:47 scheduler task 6f663194 (flow bb352724): unloading val<.=684b6610 35.4MiB>
2021/07/08 17:19:47 scheduler task 52647872 (flow 94ca2145): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:4423cafc110f61023902b82acf8245b4b3106b458cf6453bd3e7dceacb8613b3 -> s3://niema-test/n100/r07/n100.r07.s084.tar.gz (35.8MiB) in 6s (6.0MiB/s) 
2021/07/08 17:19:47  <-  n100.r07.s084.Main.cp_out_file 94ca2145 ok   extern 0s 35.8MiB
2021/07/08 17:19:47 scheduler task 334f3996 (flow a9afc8a9): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:47 scheduler task bcd66609 (flow 365c94e8): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:47 scheduler task 334f3996 (flow a9afc8a9): retrieving result (try 0): started
2021/07/08 17:19:47 scheduler task bcd66609 (flow 365c94e8): transferring output (try 0): started
2021/07/08 17:19:47 scheduler task 30bfcda0 (flow 878d6e7b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:47 scheduler task 30bfcda0 (flow 878d6e7b): transferring output (try 0): started
2021/07/08 17:19:47 scheduler task 6f663194 (flow bb352724): unloaded list<val<.=52c17d5e 35.8MiB> 35.8MiB>
2021/07/08 17:19:47 scheduler task 6f663194 (flow bb352724): unloaded val<.=684b6610 35.4MiB>
2021/07/08 17:19:47 scheduler task 6f663194 (flow bb352724): unloaded val<.=9eabe52d 35.4MiB>
2021/07/08 17:19:47 scheduler task 6f663194 (flow bb352724): unloading (try 0): successful, next state: complete
2021/07/08 17:19:47  <-  n100.r07.s071.Main.out_file bb352724 ok     exec 5m11s 35.8MiB
2021/07/08 17:19:47 n100.r07.s071.Main.out_file bb352724 n100/r07/n100.r07.s071.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:21f412e8bf1be836102eff0dddf9ac7cf3254e66851b0bc95391e308d2518870
	sha256:bb3527246b88806a434e8c685f2711ba0a0d43fe46de208cf91abb2ba983a4e6
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6f663194b0a11ad6fbafb0044cf98be6a29d26b69dde795e2a3241d6a4445c2e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s071_output"
	    wget -O "n100.r07.s071_output/n100.r07.s071.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s071_output/n100.r07.s071.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s071_output/n100.r07.s071.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s071_output/n100.r07.s071.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s071_output/n100.r07.s071.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s071_output/n100.r07.s071.reference.fas" "n100.r07.s071_output/n100.r07.s071.fq1.fastq" "n100.r07.s071_output/n100.r07.s071.fq2.fastq" | samtools view -bS - > "n100.r07.s071_output/n100.r07.s071.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s071_output/n100.r07.s071.untrimmed.sorted.bam" "n100.r07.s071_output/n100.r07.s071.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s071_output/n100.r07.s071.untrimmed.sorted.bam" -b "n100.r07.s071_output/n100.r07.s071.primers.bed" -p "n100.r07.s071_output/n100.r07.s071.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s071_output/n100.r07.s071.trimmed.sorted.bam" "n100.r07.s071_output/n100.r07.s071.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s071_output/n100.r07.s071.reference.fas" "n100.r07.s071_output/n100.r07.s071.trimmed.sorted.bam" > "n100.r07.s071_output/n100.r07.s071.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s071_output/n100.r07.s071.reference.fas" --call-indels "n100.r07.s071_output/n100.r07.s071.trimmed.sorted.bam" > "n100.r07.s071_output/n100.r07.s071.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s071_output/n100.r07.s071.trimmed.sorted.bam" > "n100.r07.s071_output/n100.r07.s071.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s071_output/n100.r07.s071.depth.txt" "n100.r07.s071_output/n100.r07.s071.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s071_output/n100.r07.s071.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s071_output/n100.r07.s071.reference.fas" | bcftools consensus -m "n100.r07.s071_output/n100.r07.s071.low_depth.tsv" tmp.vcf.gz > "n100.r07.s071_output/n100.r07.s071.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s071_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:52c17d5e169d4736ac742344f8a060f198c5ff33f49868629093d76343bfd472 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.6MiB max=130.0MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=522B max=2.1KiB
2021/07/08 17:19:47 scheduler task f536d9b6 (flow 1f6859f1): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s071.tar.gz resources {}
2021/07/08 17:19:47  ->  n100.r07.s071.Main.cp_out_file 1f6859f1 exec extern s3://niema-test/n100/r07/n100.r07.s071.tar.gz 35.8MiB
2021/07/08 17:19:47 scheduler task 334f3996 (flow a9afc8a9): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:47 scheduler task 334f3996 (flow a9afc8a9): transferring output (try 0): started
2021/07/08 17:19:47 scheduler task 360a5af5 (flow 1df8fde6): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9eea4277f630a3bff51284d86463438d666d6d7e5e35fbf039a2c7483f25c643 -> s3://niema-test/n100/r07/n100.r07.s058.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:47  <-  n100.r07.s058.Main.cp_out_file 1df8fde6 ok   extern 0s 35.7MiB
2021/07/08 17:19:47 scheduler task 42d092c1 (flow c97dc176): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:84a84832f90a6aa941d0c39de5df8e21e682f73c6f0cd7202e04dd12e584cb55 -> s3://niema-test/n100/r07/n100.r07.s046.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:47  <-  n100.r07.s046.Main.cp_out_file c97dc176 ok   extern 0s 35.7MiB
2021/07/08 17:19:47 scheduler task 6c805c91 (flow 422def09): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:47 scheduler task 6c805c91 (flow 422def09): promoting objects (try 0): started
2021/07/08 17:19:47 scheduler task 6c805c91 (flow 422def09): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:47 scheduler task 6c805c91 (flow 422def09): retrieving diagnostic output (try 0): started
2021/07/08 17:19:48 scheduler task 004d43f9 (flow 51e59bfc): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:48 scheduler task 004d43f9 (flow 51e59bfc): unloading (try 0): started
2021/07/08 17:19:48 scheduler task 004d43f9 (flow 51e59bfc): unloading list<val<.=916ea460 35.7MiB> 35.7MiB>
2021/07/08 17:19:48 scheduler task 004d43f9 (flow 51e59bfc): unloading val<.=5b8e6a38 35.4MiB>
2021/07/08 17:19:48 scheduler task 004d43f9 (flow 51e59bfc): unloading val<.=ff7f875a 35.4MiB>
2021/07/08 17:19:48 scheduler task 6c805c91 (flow 422def09): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:48 scheduler task 6c805c91 (flow 422def09): retrieving result (try 0): started
2021/07/08 17:19:48 scheduler task 004d43f9 (flow 51e59bfc): unloaded val<.=ff7f875a 35.4MiB>
2021/07/08 17:19:48 scheduler task 41568525 (flow bf25d5c3): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:1bf7e75ee0496837bbccffbf0eddc19709e675567e5946de074be15fdecf9579 -> s3://niema-test/n100/r07/n100.r07.s075.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:19:48 scheduler task 004d43f9 (flow 51e59bfc): unloaded list<val<.=916ea460 35.7MiB> 35.7MiB>
2021/07/08 17:19:48  <-  n100.r07.s075.Main.cp_out_file bf25d5c3 ok   extern 0s 35.8MiB
2021/07/08 17:19:48 scheduler task 004d43f9 (flow 51e59bfc): unloaded val<.=5b8e6a38 35.4MiB>
2021/07/08 17:19:48 scheduler task 004d43f9 (flow 51e59bfc): unloading (try 0): successful, next state: complete
2021/07/08 17:19:48 scheduler task 30bfcda0 (flow 878d6e7b): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:48  <-  n100.r07.s023.Main.out_file 51e59bfc ok     exec 5m11s 35.7MiB
2021/07/08 17:19:48 n100.r07.s023.Main.out_file 51e59bfc n100/r07/n100.r07.s023.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b03ddfe9c0b808e507447b958fe84b8f0a88afa117d3d29c6d4e569dc48306de
	sha256:51e59bfc3a54c61e9dbfead795579179a65c281e97ee98cba759739b78ffb916
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/004d43f941e37cb369029214e15189466504ad88dbad8208bb70d82dbbdfbdd4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s023_output"
	    wget -O "n100.r07.s023_output/n100.r07.s023.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s023_output/n100.r07.s023.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s023_output/n100.r07.s023.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s023_output/n100.r07.s023.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s023_output/n100.r07.s023.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s023_output/n100.r07.s023.reference.fas" "n100.r07.s023_output/n100.r07.s023.fq1.fastq" "n100.r07.s023_output/n100.r07.s023.fq2.fastq" | samtools view -bS - > "n100.r07.s023_output/n100.r07.s023.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s023_output/n100.r07.s023.untrimmed.sorted.bam" "n100.r07.s023_output/n100.r07.s023.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s023_output/n100.r07.s023.untrimmed.sorted.bam" -b "n100.r07.s023_output/n100.r07.s023.primers.bed" -p "n100.r07.s023_output/n100.r07.s023.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s023_output/n100.r07.s023.trimmed.sorted.bam" "n100.r07.s023_output/n100.r07.s023.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s023_output/n100.r07.s023.reference.fas" "n100.r07.s023_output/n100.r07.s023.trimmed.sorted.bam" > "n100.r07.s023_output/n100.r07.s023.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s023_output/n100.r07.s023.reference.fas" --call-indels "n100.r07.s023_output/n100.r07.s023.trimmed.sorted.bam" > "n100.r07.s023_output/n100.r07.s023.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s023_output/n100.r07.s023.trimmed.sorted.bam" > "n100.r07.s023_output/n100.r07.s023.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s023_output/n100.r07.s023.depth.txt" "n100.r07.s023_output/n100.r07.s023.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s023_output/n100.r07.s023.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s023_output/n100.r07.s023.reference.fas" | bcftools consensus -m "n100.r07.s023_output/n100.r07.s023.low_depth.tsv" tmp.vcf.gz > "n100.r07.s023_output/n100.r07.s023.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s023_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:916ea460fc2be3e8f859f1da5fa315a8c630343918698c2df41cbe763f49929c 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=23.0MiB max=128.3MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 17:19:48 scheduler task 4af50e04 (flow 9b0ba7e1): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s023.tar.gz resources {}
2021/07/08 17:19:48  ->  n100.r07.s023.Main.cp_out_file 9b0ba7e1 exec extern s3://niema-test/n100/r07/n100.r07.s023.tar.gz 35.7MiB
2021/07/08 17:19:48 scheduler task 30bfcda0 (flow 878d6e7b): unloading (try 0): started
2021/07/08 17:19:48 scheduler task 30bfcda0 (flow 878d6e7b): unloading list<val<.=240099f2 35.7MiB> 35.7MiB>
2021/07/08 17:19:48 scheduler task 30bfcda0 (flow 878d6e7b): unloading val<.=8823a646 35.4MiB>
2021/07/08 17:19:48 scheduler task 30bfcda0 (flow 878d6e7b): unloading val<.=f1f23975 35.4MiB>
2021/07/08 17:19:48 scheduler task 6c805c91 (flow 422def09): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:48 scheduler task 6c805c91 (flow 422def09): transferring output (try 0): started
2021/07/08 17:19:48 scheduler task 8b84a5ee (flow d2a7aa1c): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:59f7d662220078a6b30bdd466785a4512a0efe78c17f49dde986f425a9b00d99 -> s3://niema-test/n100/r07/n100.r07.s057.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:48  <-  n100.r07.s057.Main.cp_out_file d2a7aa1c ok   extern 0s 35.7MiB
2021/07/08 17:19:48 scheduler task 30bfcda0 (flow 878d6e7b): unloaded list<val<.=240099f2 35.7MiB> 35.7MiB>
2021/07/08 17:19:48 scheduler task bcd66609 (flow 365c94e8): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:48 scheduler task 30bfcda0 (flow 878d6e7b): unloaded val<.=8823a646 35.4MiB>
2021/07/08 17:19:48 scheduler task 30bfcda0 (flow 878d6e7b): unloaded val<.=f1f23975 35.4MiB>
2021/07/08 17:19:48 scheduler task 30bfcda0 (flow 878d6e7b): unloading (try 0): successful, next state: complete
2021/07/08 17:19:48 scheduler task bcd66609 (flow 365c94e8): unloading (try 0): started
2021/07/08 17:19:48 scheduler task bcd66609 (flow 365c94e8): unloading list<val<.=aefdbb8c 35.7MiB> 35.7MiB>
2021/07/08 17:19:48 scheduler task bcd66609 (flow 365c94e8): unloading val<.=3aa7d596 35.4MiB>
2021/07/08 17:19:48 scheduler task bcd66609 (flow 365c94e8): unloading val<.=00e45036 35.4MiB>
2021/07/08 17:19:48  <-  n100.r07.s037.Main.out_file 878d6e7b ok     exec 5m12s 35.7MiB
2021/07/08 17:19:48 n100.r07.s037.Main.out_file 878d6e7b n100/r07/n100.r07.s037.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1a4e1643746ff68dee217b3d09b47b0eac3443d670db9746adfb65131469ad2f
	sha256:878d6e7be77642a6549a5222bf49983c65f13724c2521369a01bf125f3345ef6
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/30bfcda09f7007725526faeadc33ebc3b1fb998e630419755a216ef25108c30e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s037_output"
	    wget -O "n100.r07.s037_output/n100.r07.s037.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s037_output/n100.r07.s037.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s037_output/n100.r07.s037.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s037_output/n100.r07.s037.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s037_output/n100.r07.s037.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s037_output/n100.r07.s037.reference.fas" "n100.r07.s037_output/n100.r07.s037.fq1.fastq" "n100.r07.s037_output/n100.r07.s037.fq2.fastq" | samtools view -bS - > "n100.r07.s037_output/n100.r07.s037.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s037_output/n100.r07.s037.untrimmed.sorted.bam" "n100.r07.s037_output/n100.r07.s037.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s037_output/n100.r07.s037.untrimmed.sorted.bam" -b "n100.r07.s037_output/n100.r07.s037.primers.bed" -p "n100.r07.s037_output/n100.r07.s037.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s037_output/n100.r07.s037.trimmed.sorted.bam" "n100.r07.s037_output/n100.r07.s037.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s037_output/n100.r07.s037.reference.fas" "n100.r07.s037_output/n100.r07.s037.trimmed.sorted.bam" > "n100.r07.s037_output/n100.r07.s037.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s037_output/n100.r07.s037.reference.fas" --call-indels "n100.r07.s037_output/n100.r07.s037.trimmed.sorted.bam" > "n100.r07.s037_output/n100.r07.s037.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s037_output/n100.r07.s037.trimmed.sorted.bam" > "n100.r07.s037_output/n100.r07.s037.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s037_output/n100.r07.s037.depth.txt" "n100.r07.s037_output/n100.r07.s037.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s037_output/n100.r07.s037.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s037_output/n100.r07.s037.reference.fas" | bcftools consensus -m "n100.r07.s037_output/n100.r07.s037.low_depth.tsv" tmp.vcf.gz > "n100.r07.s037_output/n100.r07.s037.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s037_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:240099f2e0af64807712f08e6e936158a1a89b9f487787d7b7b8395f7781adde 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=23.9MiB max=129.1MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=521B max=2.0KiB
2021/07/08 17:19:48 scheduler task 6da21f6a (flow 405c3716): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s037.tar.gz resources {}
2021/07/08 17:19:48  ->  n100.r07.s037.Main.cp_out_file 405c3716 exec extern s3://niema-test/n100/r07/n100.r07.s037.tar.gz 35.7MiB
2021/07/08 17:19:48 scheduler task 334f3996 (flow a9afc8a9): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:48 scheduler task 334f3996 (flow a9afc8a9): unloading (try 0): started
2021/07/08 17:19:48 scheduler task 334f3996 (flow a9afc8a9): unloading list<val<.=67c884f0 35.7MiB> 35.7MiB>
2021/07/08 17:19:48 scheduler task 334f3996 (flow a9afc8a9): unloading val<.=fce026f4 35.4MiB>
2021/07/08 17:19:48 scheduler task 334f3996 (flow a9afc8a9): unloading val<.=75929da2 35.4MiB>
2021/07/08 17:19:48 scheduler task 5d4db83b (flow d2ae6ebb): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:29a45717c6abc262f051489965d72dc74ea76e9b68551a15882e72a5dbf7772c -> s3://niema-test/n100/r07/n100.r07.s001.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:19:48  <-  n100.r07.s001.Main.cp_out_file d2ae6ebb ok   extern 0s 35.8MiB
2021/07/08 17:19:48 scheduler task f536d9b6 (flow 1f6859f1): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:52c17d5e169d4736ac742344f8a060f198c5ff33f49868629093d76343bfd472 -> s3://niema-test/n100/r07/n100.r07.s071.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:19:48  <-  n100.r07.s071.Main.cp_out_file 1f6859f1 ok   extern 0s 35.8MiB
2021/07/08 17:19:48 scheduler task bcd66609 (flow 365c94e8): unloaded list<val<.=aefdbb8c 35.7MiB> 35.7MiB>
2021/07/08 17:19:48 scheduler task bcd66609 (flow 365c94e8): unloaded val<.=00e45036 35.4MiB>
2021/07/08 17:19:48 scheduler task bcd66609 (flow 365c94e8): unloaded val<.=3aa7d596 35.4MiB>
2021/07/08 17:19:48 scheduler task bcd66609 (flow 365c94e8): unloading (try 0): successful, next state: complete
2021/07/08 17:19:48  <-  n100.r07.s069.Main.out_file 365c94e8 ok     exec 5m12s 35.7MiB
2021/07/08 17:19:48 n100.r07.s069.Main.out_file 365c94e8 n100/r07/n100.r07.s069.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:15173f6fc971ee0ff40f600a36d63c95013fcaadfd8e71f337dd0dc6691b760f
	sha256:365c94e8de1185c5a89c1dc462c816e708ff1cd504466c3d22d0d5cfc9eb511c
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bcd66609f0e3df30a2d162e27eadec939fc1ae1c172d34837066fdefcabdc03b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s069_output"
	    wget -O "n100.r07.s069_output/n100.r07.s069.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s069_output/n100.r07.s069.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s069_output/n100.r07.s069.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s069_output/n100.r07.s069.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s069_output/n100.r07.s069.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s069_output/n100.r07.s069.reference.fas" "n100.r07.s069_output/n100.r07.s069.fq1.fastq" "n100.r07.s069_output/n100.r07.s069.fq2.fastq" | samtools view -bS - > "n100.r07.s069_output/n100.r07.s069.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s069_output/n100.r07.s069.untrimmed.sorted.bam" "n100.r07.s069_output/n100.r07.s069.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s069_output/n100.r07.s069.untrimmed.sorted.bam" -b "n100.r07.s069_output/n100.r07.s069.primers.bed" -p "n100.r07.s069_output/n100.r07.s069.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s069_output/n100.r07.s069.trimmed.sorted.bam" "n100.r07.s069_output/n100.r07.s069.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s069_output/n100.r07.s069.reference.fas" "n100.r07.s069_output/n100.r07.s069.trimmed.sorted.bam" > "n100.r07.s069_output/n100.r07.s069.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s069_output/n100.r07.s069.reference.fas" --call-indels "n100.r07.s069_output/n100.r07.s069.trimmed.sorted.bam" > "n100.r07.s069_output/n100.r07.s069.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s069_output/n100.r07.s069.trimmed.sorted.bam" > "n100.r07.s069_output/n100.r07.s069.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s069_output/n100.r07.s069.depth.txt" "n100.r07.s069_output/n100.r07.s069.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s069_output/n100.r07.s069.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s069_output/n100.r07.s069.reference.fas" | bcftools consensus -m "n100.r07.s069_output/n100.r07.s069.low_depth.tsv" tmp.vcf.gz > "n100.r07.s069_output/n100.r07.s069.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s069_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:aefdbb8c1702792e49542942d5b2e2a31eb45da1de812c915fb68723b351dc10 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.1MiB max=127.2MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=521B max=2.0KiB
2021/07/08 17:19:48 scheduler task f6608c7e (flow 29f2d476): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s069.tar.gz resources {}
2021/07/08 17:19:48  ->  n100.r07.s069.Main.cp_out_file 29f2d476 exec extern s3://niema-test/n100/r07/n100.r07.s069.tar.gz 35.7MiB
2021/07/08 17:19:48 scheduler task 334f3996 (flow a9afc8a9): unloaded list<val<.=67c884f0 35.7MiB> 35.7MiB>
2021/07/08 17:19:48 scheduler task 334f3996 (flow a9afc8a9): unloaded val<.=75929da2 35.4MiB>
2021/07/08 17:19:48 scheduler task 334f3996 (flow a9afc8a9): unloaded val<.=fce026f4 35.4MiB>
2021/07/08 17:19:48 scheduler task 334f3996 (flow a9afc8a9): unloading (try 0): successful, next state: complete
2021/07/08 17:19:48  <-  n100.r07.s065.Main.out_file a9afc8a9 ok     exec 5m20s 35.7MiB
2021/07/08 17:19:48 n100.r07.s065.Main.out_file a9afc8a9 n100/r07/n100.r07.s065.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:25379dab4bb2ee42701af84a8567f516d493f5e741310950618ff4d27064e542
	sha256:a9afc8a99abf0a400374ba6ea77f6161f24f005a3697039260ab59415836a5e2
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/334f39965d85fc2531b2f46d26972e2abe2f7dd062d8daea36d881c3d72a9a15
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s065_output"
	    wget -O "n100.r07.s065_output/n100.r07.s065.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s065_output/n100.r07.s065.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s065_output/n100.r07.s065.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s065_output/n100.r07.s065.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s065_output/n100.r07.s065.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s065_output/n100.r07.s065.reference.fas" "n100.r07.s065_output/n100.r07.s065.fq1.fastq" "n100.r07.s065_output/n100.r07.s065.fq2.fastq" | samtools view -bS - > "n100.r07.s065_output/n100.r07.s065.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s065_output/n100.r07.s065.untrimmed.sorted.bam" "n100.r07.s065_output/n100.r07.s065.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s065_output/n100.r07.s065.untrimmed.sorted.bam" -b "n100.r07.s065_output/n100.r07.s065.primers.bed" -p "n100.r07.s065_output/n100.r07.s065.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s065_output/n100.r07.s065.trimmed.sorted.bam" "n100.r07.s065_output/n100.r07.s065.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s065_output/n100.r07.s065.reference.fas" "n100.r07.s065_output/n100.r07.s065.trimmed.sorted.bam" > "n100.r07.s065_output/n100.r07.s065.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s065_output/n100.r07.s065.reference.fas" --call-indels "n100.r07.s065_output/n100.r07.s065.trimmed.sorted.bam" > "n100.r07.s065_output/n100.r07.s065.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s065_output/n100.r07.s065.trimmed.sorted.bam" > "n100.r07.s065_output/n100.r07.s065.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s065_output/n100.r07.s065.depth.txt" "n100.r07.s065_output/n100.r07.s065.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s065_output/n100.r07.s065.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s065_output/n100.r07.s065.reference.fas" | bcftools consensus -m "n100.r07.s065_output/n100.r07.s065.low_depth.tsv" tmp.vcf.gz > "n100.r07.s065_output/n100.r07.s065.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s065_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:67c884f0f2121d6c7c32291711be9c2fff4eb861233f0ac78c31f3176bfd6a40 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.1MiB max=128.1MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=525B max=2.1KiB
2021/07/08 17:19:48 scheduler task 69645bd9 (flow 651a8d15): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s065.tar.gz resources {}
2021/07/08 17:19:48  ->  n100.r07.s065.Main.cp_out_file 651a8d15 exec extern s3://niema-test/n100/r07/n100.r07.s065.tar.gz 35.7MiB
2021/07/08 17:19:48 scheduler task 60169fd2 (flow cd6e30ef): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:48 scheduler task 6c805c91 (flow 422def09): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:48 scheduler task 60169fd2 (flow cd6e30ef): promoting objects (try 0): started
2021/07/08 17:19:48 scheduler task 6c805c91 (flow 422def09): unloading (try 0): started
2021/07/08 17:19:48 scheduler task 6c805c91 (flow 422def09): unloading list<val<.=eb26c4f2 35.7MiB> 35.7MiB>
2021/07/08 17:19:48 scheduler task 6c805c91 (flow 422def09): unloading val<.=fedb7623 35.4MiB>
2021/07/08 17:19:48 scheduler task 6c805c91 (flow 422def09): unloading val<.=551a0d45 35.4MiB>
2021/07/08 17:19:48 scheduler task 60169fd2 (flow cd6e30ef): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:48 scheduler task 60169fd2 (flow cd6e30ef): retrieving diagnostic output (try 0): started
2021/07/08 17:19:48 scheduler task 6c805c91 (flow 422def09): unloaded val<.=551a0d45 35.4MiB>
2021/07/08 17:19:48 scheduler task 6c805c91 (flow 422def09): unloaded val<.=fedb7623 35.4MiB>
2021/07/08 17:19:48 scheduler task 6c805c91 (flow 422def09): unloaded list<val<.=eb26c4f2 35.7MiB> 35.7MiB>
2021/07/08 17:19:48 scheduler task 6c805c91 (flow 422def09): unloading (try 0): successful, next state: complete
2021/07/08 17:19:48  <-  n100.r07.s038.Main.out_file 422def09 ok     exec 5m4s 35.7MiB
2021/07/08 17:19:48 n100.r07.s038.Main.out_file 422def09 n100/r07/n100.r07.s038.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:64d69209ceffef55507bdb21e36d325234a7842d86c07d809353e847e8ab4599
	sha256:422def090f8c8c1744bd88cbae7e660f1bbe9ab699cb4d788d6a601e77ba0b70
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6c805c91a0da6ea4ed4e9c51b765f17b65bcab67e6d9ca8ec098676238095989
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s038_output"
	    wget -O "n100.r07.s038_output/n100.r07.s038.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s038_output/n100.r07.s038.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s038_output/n100.r07.s038.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s038_output/n100.r07.s038.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s038_output/n100.r07.s038.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s038_output/n100.r07.s038.reference.fas" "n100.r07.s038_output/n100.r07.s038.fq1.fastq" "n100.r07.s038_output/n100.r07.s038.fq2.fastq" | samtools view -bS - > "n100.r07.s038_output/n100.r07.s038.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s038_output/n100.r07.s038.untrimmed.sorted.bam" "n100.r07.s038_output/n100.r07.s038.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s038_output/n100.r07.s038.untrimmed.sorted.bam" -b "n100.r07.s038_output/n100.r07.s038.primers.bed" -p "n100.r07.s038_output/n100.r07.s038.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s038_output/n100.r07.s038.trimmed.sorted.bam" "n100.r07.s038_output/n100.r07.s038.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s038_output/n100.r07.s038.reference.fas" "n100.r07.s038_output/n100.r07.s038.trimmed.sorted.bam" > "n100.r07.s038_output/n100.r07.s038.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s038_output/n100.r07.s038.reference.fas" --call-indels "n100.r07.s038_output/n100.r07.s038.trimmed.sorted.bam" > "n100.r07.s038_output/n100.r07.s038.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s038_output/n100.r07.s038.trimmed.sorted.bam" > "n100.r07.s038_output/n100.r07.s038.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s038_output/n100.r07.s038.depth.txt" "n100.r07.s038_output/n100.r07.s038.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s038_output/n100.r07.s038.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s038_output/n100.r07.s038.reference.fas" | bcftools consensus -m "n100.r07.s038_output/n100.r07.s038.low_depth.tsv" tmp.vcf.gz > "n100.r07.s038_output/n100.r07.s038.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s038_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:eb26c4f2aa1727e8af8f272cbd8697195fc992ee1f6a05a791a05b7d3f2542ea 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.4MiB max=130.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=694B max=3.1KiB
2021/07/08 17:19:48 scheduler task 3f3d73a6 (flow 9dfd7b3d): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s038.tar.gz resources {}
2021/07/08 17:19:48  ->  n100.r07.s038.Main.cp_out_file 9dfd7b3d exec extern s3://niema-test/n100/r07/n100.r07.s038.tar.gz 35.7MiB
2021/07/08 17:19:48 scheduler task 60169fd2 (flow cd6e30ef): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:48 scheduler task 60169fd2 (flow cd6e30ef): retrieving result (try 0): started
2021/07/08 17:19:48 scheduler task 4af50e04 (flow 9b0ba7e1): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:916ea460fc2be3e8f859f1da5fa315a8c630343918698c2df41cbe763f49929c -> s3://niema-test/n100/r07/n100.r07.s023.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:48  <-  n100.r07.s023.Main.cp_out_file 9b0ba7e1 ok   extern 0s 35.7MiB
2021/07/08 17:19:48 scheduler task 6da21f6a (flow 405c3716): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:240099f2e0af64807712f08e6e936158a1a89b9f487787d7b7b8395f7781adde -> s3://niema-test/n100/r07/n100.r07.s037.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:48  <-  n100.r07.s037.Main.cp_out_file 405c3716 ok   extern 0s 35.7MiB
2021/07/08 17:19:48 scheduler task 60169fd2 (flow cd6e30ef): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:48 scheduler task 60169fd2 (flow cd6e30ef): transferring output (try 0): started
2021/07/08 17:19:48 scheduler task 4cf5300c (flow 9257a616): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:48 scheduler task 4cf5300c (flow 9257a616): promoting objects (try 0): started
2021/07/08 17:19:48 scheduler task 4cf5300c (flow 9257a616): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:49 scheduler task 4cf5300c (flow 9257a616): retrieving diagnostic output (try 0): started
2021/07/08 17:19:49 scheduler task 31458704 (flow 40bc41f4): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:49 scheduler task 31458704 (flow 40bc41f4): promoting objects (try 0): started
2021/07/08 17:19:49 scheduler task 18faa772 (flow 4989a6de): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:49 scheduler task 18faa772 (flow 4989a6de): promoting objects (try 0): started
2021/07/08 17:19:49 scheduler task 4cf5300c (flow 9257a616): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:49 scheduler task 4cf5300c (flow 9257a616): retrieving result (try 0): started
2021/07/08 17:19:49 scheduler task 31458704 (flow 40bc41f4): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:49 scheduler task 31458704 (flow 40bc41f4): retrieving diagnostic output (try 0): started
2021/07/08 17:19:49 scheduler task 18faa772 (flow 4989a6de): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:49 scheduler task 4cf5300c (flow 9257a616): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:49 scheduler task 18faa772 (flow 4989a6de): retrieving diagnostic output (try 0): started
2021/07/08 17:19:49 scheduler task 4cf5300c (flow 9257a616): transferring output (try 0): started
2021/07/08 17:19:49 scheduler task 95756e2e (flow 61093b34): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:49 scheduler task 31458704 (flow 40bc41f4): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:49 scheduler task 95756e2e (flow 61093b34): promoting objects (try 0): started
2021/07/08 17:19:49 scheduler task 31458704 (flow 40bc41f4): retrieving result (try 0): started
2021/07/08 17:19:49 scheduler task 18faa772 (flow 4989a6de): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:49 scheduler task 18faa772 (flow 4989a6de): retrieving result (try 0): started
2021/07/08 17:19:49 scheduler task 95756e2e (flow 61093b34): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:49 scheduler task 31458704 (flow 40bc41f4): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:49 scheduler task 95756e2e (flow 61093b34): retrieving diagnostic output (try 0): started
2021/07/08 17:19:49 scheduler task 31458704 (flow 40bc41f4): transferring output (try 0): started
2021/07/08 17:19:49 scheduler task f6608c7e (flow 29f2d476): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:aefdbb8c1702792e49542942d5b2e2a31eb45da1de812c915fb68723b351dc10 -> s3://niema-test/n100/r07/n100.r07.s069.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:49  <-  n100.r07.s069.Main.cp_out_file 29f2d476 ok   extern 0s 35.7MiB
2021/07/08 17:19:49 scheduler task 9a98392a (flow e4ffdf1c): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:49 scheduler task 9a98392a (flow e4ffdf1c): promoting objects (try 0): started
2021/07/08 17:19:49 scheduler task 69645bd9 (flow 651a8d15): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:67c884f0f2121d6c7c32291711be9c2fff4eb861233f0ac78c31f3176bfd6a40 -> s3://niema-test/n100/r07/n100.r07.s065.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:49  <-  n100.r07.s065.Main.cp_out_file 651a8d15 ok   extern 0s 35.7MiB
2021/07/08 17:19:49 scheduler task 18faa772 (flow 4989a6de): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:49 scheduler task 60169fd2 (flow cd6e30ef): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:49 scheduler task 18faa772 (flow 4989a6de): transferring output (try 0): started
2021/07/08 17:19:49 scheduler task 60169fd2 (flow cd6e30ef): unloading (try 0): started
2021/07/08 17:19:49 scheduler task 60169fd2 (flow cd6e30ef): unloading list<val<.=940232e5 35.7MiB> 35.7MiB>
2021/07/08 17:19:49 scheduler task 60169fd2 (flow cd6e30ef): unloading val<.=c039cecf 35.4MiB>
2021/07/08 17:19:49 scheduler task 60169fd2 (flow cd6e30ef): unloading val<.=bc8e034c 35.4MiB>
2021/07/08 17:19:49 scheduler task 95756e2e (flow 61093b34): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:49 scheduler task 95756e2e (flow 61093b34): retrieving result (try 0): started
2021/07/08 17:19:49 scheduler task 9a98392a (flow e4ffdf1c): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:49 scheduler task 9a98392a (flow e4ffdf1c): retrieving diagnostic output (try 0): started
2021/07/08 17:19:49 scheduler task 0d5c5330 (flow c96780e2): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:49 scheduler task 0d5c5330 (flow c96780e2): promoting objects (try 0): started
2021/07/08 17:19:49 scheduler task 60169fd2 (flow cd6e30ef): unloaded list<val<.=940232e5 35.7MiB> 35.7MiB>
2021/07/08 17:19:49 scheduler task 60169fd2 (flow cd6e30ef): unloaded val<.=bc8e034c 35.4MiB>
2021/07/08 17:19:49 scheduler task 60169fd2 (flow cd6e30ef): unloaded val<.=c039cecf 35.4MiB>
2021/07/08 17:19:49 scheduler task 60169fd2 (flow cd6e30ef): unloading (try 0): successful, next state: complete
2021/07/08 17:19:49 scheduler task 95756e2e (flow 61093b34): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:49 scheduler task 3f3d73a6 (flow 9dfd7b3d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:eb26c4f2aa1727e8af8f272cbd8697195fc992ee1f6a05a791a05b7d3f2542ea -> s3://niema-test/n100/r07/n100.r07.s038.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:49  <-  n100.r07.s038.Main.cp_out_file 9dfd7b3d ok   extern 0s 35.7MiB
2021/07/08 17:19:49  <-  n100.r07.s027.Main.out_file cd6e30ef ok     exec 5m4s 35.7MiB
2021/07/08 17:19:49 n100.r07.s027.Main.out_file cd6e30ef n100/r07/n100.r07.s027.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:947c9194b5d511b031fc0b3ed960660c25f74c828b707dcb91c11da8fb4fcb0a
	sha256:cd6e30ef376d4dc6a9a8260823b9eb67eec73793b93fa9cad7b729e77fecb3f5
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/60169fd24a4a71fbe84e0f6ff7792cbbe80294618b4f2f2333a951e896be0bbe
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s027_output"
	    wget -O "n100.r07.s027_output/n100.r07.s027.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s027_output/n100.r07.s027.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s027_output/n100.r07.s027.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s027_output/n100.r07.s027.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s027_output/n100.r07.s027.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s027_output/n100.r07.s027.reference.fas" "n100.r07.s027_output/n100.r07.s027.fq1.fastq" "n100.r07.s027_output/n100.r07.s027.fq2.fastq" | samtools view -bS - > "n100.r07.s027_output/n100.r07.s027.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s027_output/n100.r07.s027.untrimmed.sorted.bam" "n100.r07.s027_output/n100.r07.s027.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s027_output/n100.r07.s027.untrimmed.sorted.bam" -b "n100.r07.s027_output/n100.r07.s027.primers.bed" -p "n100.r07.s027_output/n100.r07.s027.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s027_output/n100.r07.s027.trimmed.sorted.bam" "n100.r07.s027_output/n100.r07.s027.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s027_output/n100.r07.s027.reference.fas" "n100.r07.s027_output/n100.r07.s027.trimmed.sorted.bam" > "n100.r07.s027_output/n100.r07.s027.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s027_output/n100.r07.s027.reference.fas" --call-indels "n100.r07.s027_output/n100.r07.s027.trimmed.sorted.bam" > "n100.r07.s027_output/n100.r07.s027.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s027_output/n100.r07.s027.trimmed.sorted.bam" > "n100.r07.s027_output/n100.r07.s027.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s027_output/n100.r07.s027.depth.txt" "n100.r07.s027_output/n100.r07.s027.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s027_output/n100.r07.s027.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s027_output/n100.r07.s027.reference.fas" | bcftools consensus -m "n100.r07.s027_output/n100.r07.s027.low_depth.tsv" tmp.vcf.gz > "n100.r07.s027_output/n100.r07.s027.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s027_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:940232e53da8a6d08f2fbced9daa1db74f4267381e622648a3ed566f270d0c3d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.6MiB max=127.9MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.1KiB
2021/07/08 17:19:49 scheduler task 2138685d (flow a9dcc3e2): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s027.tar.gz resources {}
2021/07/08 17:19:49  ->  n100.r07.s027.Main.cp_out_file a9dcc3e2 exec extern s3://niema-test/n100/r07/n100.r07.s027.tar.gz 35.7MiB
2021/07/08 17:19:49 scheduler task 95756e2e (flow 61093b34): transferring output (try 0): started
2021/07/08 17:19:49 scheduler task 9a98392a (flow e4ffdf1c): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:49 scheduler task 9a98392a (flow e4ffdf1c): retrieving result (try 0): started
2021/07/08 17:19:49 scheduler task 0d5c5330 (flow c96780e2): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:49 scheduler task 0d5c5330 (flow c96780e2): retrieving diagnostic output (try 0): started
2021/07/08 17:19:49 scheduler task 9a98392a (flow e4ffdf1c): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:49 scheduler task 9a98392a (flow e4ffdf1c): transferring output (try 0): started
2021/07/08 17:19:49 scheduler task 0d5c5330 (flow c96780e2): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:49 scheduler task 4cf5300c (flow 9257a616): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:49 scheduler task 0d5c5330 (flow c96780e2): retrieving result (try 0): started
2021/07/08 17:19:49 scheduler task 4cf5300c (flow 9257a616): unloading (try 0): started
2021/07/08 17:19:49 scheduler task 4cf5300c (flow 9257a616): unloading list<val<.=95237079 35.7MiB> 35.7MiB>
2021/07/08 17:19:49 scheduler task 4cf5300c (flow 9257a616): unloading val<.=75b9b4c5 35.4MiB>
2021/07/08 17:19:49 scheduler task 4cf5300c (flow 9257a616): unloading val<.=6769094a 35.4MiB>
2021/07/08 17:19:49 scheduler task 0d5c5330 (flow c96780e2): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:49 scheduler task 4cf5300c (flow 9257a616): unloaded val<.=75b9b4c5 35.4MiB>
2021/07/08 17:19:49 scheduler task 4cf5300c (flow 9257a616): unloaded val<.=6769094a 35.4MiB>
2021/07/08 17:19:49 scheduler task 4cf5300c (flow 9257a616): unloaded list<val<.=95237079 35.7MiB> 35.7MiB>
2021/07/08 17:19:49 scheduler task 4cf5300c (flow 9257a616): unloading (try 0): successful, next state: complete
2021/07/08 17:19:49 scheduler task 0d5c5330 (flow c96780e2): transferring output (try 0): started
2021/07/08 17:19:49  <-  n100.r07.s050.Main.out_file 9257a616 ok     exec 5m13s 35.7MiB
2021/07/08 17:19:49 n100.r07.s050.Main.out_file 9257a616 n100/r07/n100.r07.s050.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4330064cfed117cc7939ca9e3dde9d3ddda84c41f5b1cc2244578e526d916c58
	sha256:9257a616f45abe6cb828cb2b4cc5b1cb446a5546a17bebd3da55809cc8c82adc
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4cf5300c55d6ea785a045ce382f03a3dbedb50518b49ea825af5b26e3e432b02
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s050_output"
	    wget -O "n100.r07.s050_output/n100.r07.s050.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s050_output/n100.r07.s050.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s050_output/n100.r07.s050.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s050_output/n100.r07.s050.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s050_output/n100.r07.s050.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s050_output/n100.r07.s050.reference.fas" "n100.r07.s050_output/n100.r07.s050.fq1.fastq" "n100.r07.s050_output/n100.r07.s050.fq2.fastq" | samtools view -bS - > "n100.r07.s050_output/n100.r07.s050.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s050_output/n100.r07.s050.untrimmed.sorted.bam" "n100.r07.s050_output/n100.r07.s050.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s050_output/n100.r07.s050.untrimmed.sorted.bam" -b "n100.r07.s050_output/n100.r07.s050.primers.bed" -p "n100.r07.s050_output/n100.r07.s050.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s050_output/n100.r07.s050.trimmed.sorted.bam" "n100.r07.s050_output/n100.r07.s050.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s050_output/n100.r07.s050.reference.fas" "n100.r07.s050_output/n100.r07.s050.trimmed.sorted.bam" > "n100.r07.s050_output/n100.r07.s050.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s050_output/n100.r07.s050.reference.fas" --call-indels "n100.r07.s050_output/n100.r07.s050.trimmed.sorted.bam" > "n100.r07.s050_output/n100.r07.s050.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s050_output/n100.r07.s050.trimmed.sorted.bam" > "n100.r07.s050_output/n100.r07.s050.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s050_output/n100.r07.s050.depth.txt" "n100.r07.s050_output/n100.r07.s050.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s050_output/n100.r07.s050.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s050_output/n100.r07.s050.reference.fas" | bcftools consensus -m "n100.r07.s050_output/n100.r07.s050.low_depth.tsv" tmp.vcf.gz > "n100.r07.s050_output/n100.r07.s050.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s050_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:952370794c6550a42de5e69253e16dee9ce4fb2d08d34217e69f4e8b2eb40731 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.2MiB max=125.5MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 17:19:49 scheduler task a2cf3a95 (flow 7f056d71): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s050.tar.gz resources {}
2021/07/08 17:19:49  ->  n100.r07.s050.Main.cp_out_file 7f056d71 exec extern s3://niema-test/n100/r07/n100.r07.s050.tar.gz 35.7MiB
2021/07/08 17:19:49 scheduler task 31458704 (flow 40bc41f4): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:49 scheduler task 31458704 (flow 40bc41f4): unloading (try 0): started
2021/07/08 17:19:49 scheduler task 31458704 (flow 40bc41f4): unloading list<val<.=c9066e59 35.7MiB> 35.7MiB>
2021/07/08 17:19:49 scheduler task 31458704 (flow 40bc41f4): unloading val<.=3de4911f 35.4MiB>
2021/07/08 17:19:49 scheduler task 31458704 (flow 40bc41f4): unloading val<.=04977b3c 35.4MiB>
2021/07/08 17:19:49 scheduler task 18faa772 (flow 4989a6de): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:49 scheduler task 31458704 (flow 40bc41f4): unloaded list<val<.=c9066e59 35.7MiB> 35.7MiB>
2021/07/08 17:19:49 scheduler task 31458704 (flow 40bc41f4): unloaded val<.=04977b3c 35.4MiB>
2021/07/08 17:19:49 scheduler task 31458704 (flow 40bc41f4): unloaded val<.=3de4911f 35.4MiB>
2021/07/08 17:19:49 scheduler task 31458704 (flow 40bc41f4): unloading (try 0): successful, next state: complete
2021/07/08 17:19:49 scheduler task 18faa772 (flow 4989a6de): unloading (try 0): started
2021/07/08 17:19:49 scheduler task 18faa772 (flow 4989a6de): unloading list<val<.=1c7c463f 35.7MiB> 35.7MiB>
2021/07/08 17:19:49 scheduler task 18faa772 (flow 4989a6de): unloading val<.=b0b672e9 35.4MiB>
2021/07/08 17:19:49 scheduler task 18faa772 (flow 4989a6de): unloading val<.=dfac24ab 35.4MiB>
2021/07/08 17:19:49  <-  n100.r07.s006.Main.out_file 40bc41f4 ok     exec 5m13s 35.7MiB
2021/07/08 17:19:49 n100.r07.s006.Main.out_file 40bc41f4 n100/r07/n100.r07.s006.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b868fb8ddb61c7f6afc95ce0b1aac0fc8e8b44fea32e08e221e86c22bad0b148
	sha256:40bc41f486b7350f8cbb754f4a676fb142fcd8be4bd9bfa4da0da5a97d572f53
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/314587044c51b6ce6e364618fff3c779ff1d1c2531ce01e4b91a3df6970c53bb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s006_output"
	    wget -O "n100.r07.s006_output/n100.r07.s006.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s006_output/n100.r07.s006.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s006_output/n100.r07.s006.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s006_output/n100.r07.s006.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s006_output/n100.r07.s006.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s006_output/n100.r07.s006.reference.fas" "n100.r07.s006_output/n100.r07.s006.fq1.fastq" "n100.r07.s006_output/n100.r07.s006.fq2.fastq" | samtools view -bS - > "n100.r07.s006_output/n100.r07.s006.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s006_output/n100.r07.s006.untrimmed.sorted.bam" "n100.r07.s006_output/n100.r07.s006.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s006_output/n100.r07.s006.untrimmed.sorted.bam" -b "n100.r07.s006_output/n100.r07.s006.primers.bed" -p "n100.r07.s006_output/n100.r07.s006.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s006_output/n100.r07.s006.trimmed.sorted.bam" "n100.r07.s006_output/n100.r07.s006.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s006_output/n100.r07.s006.reference.fas" "n100.r07.s006_output/n100.r07.s006.trimmed.sorted.bam" > "n100.r07.s006_output/n100.r07.s006.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s006_output/n100.r07.s006.reference.fas" --call-indels "n100.r07.s006_output/n100.r07.s006.trimmed.sorted.bam" > "n100.r07.s006_output/n100.r07.s006.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s006_output/n100.r07.s006.trimmed.sorted.bam" > "n100.r07.s006_output/n100.r07.s006.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s006_output/n100.r07.s006.depth.txt" "n100.r07.s006_output/n100.r07.s006.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s006_output/n100.r07.s006.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s006_output/n100.r07.s006.reference.fas" | bcftools consensus -m "n100.r07.s006_output/n100.r07.s006.low_depth.tsv" tmp.vcf.gz > "n100.r07.s006_output/n100.r07.s006.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s006_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:c9066e59a304dc13923658363570d00ac380cdff347c2307e05ebdbbce0d063a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.3MiB max=131.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:19:49 scheduler task 54102d72 (flow b0d3f2e8): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s006.tar.gz resources {}
2021/07/08 17:19:49  ->  n100.r07.s006.Main.cp_out_file b0d3f2e8 exec extern s3://niema-test/n100/r07/n100.r07.s006.tar.gz 35.7MiB
2021/07/08 17:19:49 scheduler task 18faa772 (flow 4989a6de): unloaded val<.=dfac24ab 35.4MiB>
2021/07/08 17:19:49 scheduler task 18faa772 (flow 4989a6de): unloaded list<val<.=1c7c463f 35.7MiB> 35.7MiB>
2021/07/08 17:19:49 scheduler task 18faa772 (flow 4989a6de): unloaded val<.=b0b672e9 35.4MiB>
2021/07/08 17:19:49 scheduler task 18faa772 (flow 4989a6de): unloading (try 0): successful, next state: complete
2021/07/08 17:19:49  <-  n100.r07.s018.Main.out_file 4989a6de ok     exec 5m5s 35.7MiB
2021/07/08 17:19:49 n100.r07.s018.Main.out_file 4989a6de n100/r07/n100.r07.s018.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:53e745eb9518285fa64f0f2c9410989565010ac36955625288ef015dc8434407
	sha256:4989a6de283dd9e9a2c1bd70d79246a35c6ca2c3e7e17d581378080b73d41526
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/18faa77291d56120a9933fe1c2ad7238f32c8dd75803ecc80f1715da959763a9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s018_output"
	    wget -O "n100.r07.s018_output/n100.r07.s018.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s018_output/n100.r07.s018.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s018_output/n100.r07.s018.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s018_output/n100.r07.s018.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s018_output/n100.r07.s018.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s018_output/n100.r07.s018.reference.fas" "n100.r07.s018_output/n100.r07.s018.fq1.fastq" "n100.r07.s018_output/n100.r07.s018.fq2.fastq" | samtools view -bS - > "n100.r07.s018_output/n100.r07.s018.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s018_output/n100.r07.s018.untrimmed.sorted.bam" "n100.r07.s018_output/n100.r07.s018.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s018_output/n100.r07.s018.untrimmed.sorted.bam" -b "n100.r07.s018_output/n100.r07.s018.primers.bed" -p "n100.r07.s018_output/n100.r07.s018.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s018_output/n100.r07.s018.trimmed.sorted.bam" "n100.r07.s018_output/n100.r07.s018.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s018_output/n100.r07.s018.reference.fas" "n100.r07.s018_output/n100.r07.s018.trimmed.sorted.bam" > "n100.r07.s018_output/n100.r07.s018.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s018_output/n100.r07.s018.reference.fas" --call-indels "n100.r07.s018_output/n100.r07.s018.trimmed.sorted.bam" > "n100.r07.s018_output/n100.r07.s018.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s018_output/n100.r07.s018.trimmed.sorted.bam" > "n100.r07.s018_output/n100.r07.s018.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s018_output/n100.r07.s018.depth.txt" "n100.r07.s018_output/n100.r07.s018.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s018_output/n100.r07.s018.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s018_output/n100.r07.s018.reference.fas" | bcftools consensus -m "n100.r07.s018_output/n100.r07.s018.low_depth.tsv" tmp.vcf.gz > "n100.r07.s018_output/n100.r07.s018.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s018_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:1c7c463f431722d7e0ce294d99c6174afd9654bcd12eee009038663c8ed9b5a5 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.8MiB max=128.0MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=698B max=3.1KiB
2021/07/08 17:19:49 scheduler task 96417d52 (flow 72af5eda): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s018.tar.gz resources {}
2021/07/08 17:19:49  ->  n100.r07.s018.Main.cp_out_file 72af5eda exec extern s3://niema-test/n100/r07/n100.r07.s018.tar.gz 35.7MiB
2021/07/08 17:19:49 scheduler task 95756e2e (flow 61093b34): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:49 scheduler task 95756e2e (flow 61093b34): unloading (try 0): started
2021/07/08 17:19:49 scheduler task 95756e2e (flow 61093b34): unloading val<.=0bcd7d71 35.4MiB>
2021/07/08 17:19:49 scheduler task 95756e2e (flow 61093b34): unloading val<.=4f406fff 35.4MiB>
2021/07/08 17:19:49 scheduler task 95756e2e (flow 61093b34): unloading list<val<.=619886a2 35.7MiB> 35.7MiB>
2021/07/08 17:19:50 scheduler task 9a98392a (flow e4ffdf1c): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:50 scheduler task bdc179fc (flow c7a8d3dc): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:50 scheduler task 95756e2e (flow 61093b34): unloaded val<.=4f406fff 35.4MiB>
2021/07/08 17:19:50 scheduler task 95756e2e (flow 61093b34): unloaded val<.=0bcd7d71 35.4MiB>
2021/07/08 17:19:50 scheduler task 95756e2e (flow 61093b34): unloaded list<val<.=619886a2 35.7MiB> 35.7MiB>
2021/07/08 17:19:50 scheduler task 95756e2e (flow 61093b34): unloading (try 0): successful, next state: complete
2021/07/08 17:19:50 scheduler task 9a98392a (flow e4ffdf1c): unloading (try 0): started
2021/07/08 17:19:50 scheduler task 9a98392a (flow e4ffdf1c): unloading list<val<.=cacaeb41 35.7MiB> 35.7MiB>
2021/07/08 17:19:50 scheduler task 9a98392a (flow e4ffdf1c): unloading val<.=2c349b9e 35.4MiB>
2021/07/08 17:19:50 scheduler task 9a98392a (flow e4ffdf1c): unloading val<.=43bc4293 35.4MiB>
2021/07/08 17:19:50 scheduler task bdc179fc (flow c7a8d3dc): promoting objects (try 0): started
2021/07/08 17:19:50  <-  n100.r07.s004.Main.out_file 61093b34 ok     exec 5m5s 35.7MiB
2021/07/08 17:19:50 n100.r07.s004.Main.out_file 61093b34 n100/r07/n100.r07.s004.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:72cd730b425cc121d2a9c5e132478d38108b79b264a4bb20fbe7254e62a718c1
	sha256:61093b34bb0d7d0bec1c95bb13f414100ba59fda9569d196840676b06468075a
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/95756e2efd0449b1b5435ba633d9cc7c07cdc6a3bf037b4c817e233027e01b64
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s004_output"
	    wget -O "n100.r07.s004_output/n100.r07.s004.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s004_output/n100.r07.s004.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s004_output/n100.r07.s004.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s004_output/n100.r07.s004.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s004_output/n100.r07.s004.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s004_output/n100.r07.s004.reference.fas" "n100.r07.s004_output/n100.r07.s004.fq1.fastq" "n100.r07.s004_output/n100.r07.s004.fq2.fastq" | samtools view -bS - > "n100.r07.s004_output/n100.r07.s004.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s004_output/n100.r07.s004.untrimmed.sorted.bam" "n100.r07.s004_output/n100.r07.s004.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s004_output/n100.r07.s004.untrimmed.sorted.bam" -b "n100.r07.s004_output/n100.r07.s004.primers.bed" -p "n100.r07.s004_output/n100.r07.s004.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s004_output/n100.r07.s004.trimmed.sorted.bam" "n100.r07.s004_output/n100.r07.s004.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s004_output/n100.r07.s004.reference.fas" "n100.r07.s004_output/n100.r07.s004.trimmed.sorted.bam" > "n100.r07.s004_output/n100.r07.s004.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s004_output/n100.r07.s004.reference.fas" --call-indels "n100.r07.s004_output/n100.r07.s004.trimmed.sorted.bam" > "n100.r07.s004_output/n100.r07.s004.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s004_output/n100.r07.s004.trimmed.sorted.bam" > "n100.r07.s004_output/n100.r07.s004.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s004_output/n100.r07.s004.depth.txt" "n100.r07.s004_output/n100.r07.s004.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s004_output/n100.r07.s004.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s004_output/n100.r07.s004.reference.fas" | bcftools consensus -m "n100.r07.s004_output/n100.r07.s004.low_depth.tsv" tmp.vcf.gz > "n100.r07.s004_output/n100.r07.s004.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s004_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:619886a2728ef411d84dbe485a1b82d397283a627272d118cc5100d47a85c1e3 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.0MiB max=128.2MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=693B max=3.0KiB
2021/07/08 17:19:50 scheduler task 14ff1d2f (flow 6ac3881d): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s004.tar.gz resources {}
2021/07/08 17:19:50  ->  n100.r07.s004.Main.cp_out_file 6ac3881d exec extern s3://niema-test/n100/r07/n100.r07.s004.tar.gz 35.7MiB
2021/07/08 17:19:50 scheduler task 2138685d (flow a9dcc3e2): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:940232e53da8a6d08f2fbced9daa1db74f4267381e622648a3ed566f270d0c3d -> s3://niema-test/n100/r07/n100.r07.s027.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:50  <-  n100.r07.s027.Main.cp_out_file a9dcc3e2 ok   extern 0s 35.7MiB
2021/07/08 17:19:50 scheduler task 9a98392a (flow e4ffdf1c): unloaded val<.=43bc4293 35.4MiB>
2021/07/08 17:19:50 scheduler task 9a98392a (flow e4ffdf1c): unloaded val<.=2c349b9e 35.4MiB>
2021/07/08 17:19:50 scheduler task 9a98392a (flow e4ffdf1c): unloaded list<val<.=cacaeb41 35.7MiB> 35.7MiB>
2021/07/08 17:19:50 scheduler task 9a98392a (flow e4ffdf1c): unloading (try 0): successful, next state: complete
2021/07/08 17:19:50 scheduler task bdc179fc (flow c7a8d3dc): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:50  <-  n100.r07.s066.Main.out_file e4ffdf1c ok     exec 5m5s 35.7MiB
2021/07/08 17:19:50 n100.r07.s066.Main.out_file e4ffdf1c n100/r07/n100.r07.s066.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:694a19884358e578149fa37f16cad45536479d8a14dc02cbebf41a8624defca7
	sha256:e4ffdf1c01ee8b87b110343b6912da5fce924fe45c05dca1c15f3b149f6c7e2c
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9a98392a0e3cd7ba7c63e292f990a1c7b8d1ce48f9f1a15e204ddc8289520fa4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s066_output"
	    wget -O "n100.r07.s066_output/n100.r07.s066.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s066_output/n100.r07.s066.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s066_output/n100.r07.s066.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s066_output/n100.r07.s066.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s066_output/n100.r07.s066.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s066_output/n100.r07.s066.reference.fas" "n100.r07.s066_output/n100.r07.s066.fq1.fastq" "n100.r07.s066_output/n100.r07.s066.fq2.fastq" | samtools view -bS - > "n100.r07.s066_output/n100.r07.s066.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s066_output/n100.r07.s066.untrimmed.sorted.bam" "n100.r07.s066_output/n100.r07.s066.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s066_output/n100.r07.s066.untrimmed.sorted.bam" -b "n100.r07.s066_output/n100.r07.s066.primers.bed" -p "n100.r07.s066_output/n100.r07.s066.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s066_output/n100.r07.s066.trimmed.sorted.bam" "n100.r07.s066_output/n100.r07.s066.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s066_output/n100.r07.s066.reference.fas" "n100.r07.s066_output/n100.r07.s066.trimmed.sorted.bam" > "n100.r07.s066_output/n100.r07.s066.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s066_output/n100.r07.s066.reference.fas" --call-indels "n100.r07.s066_output/n100.r07.s066.trimmed.sorted.bam" > "n100.r07.s066_output/n100.r07.s066.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s066_output/n100.r07.s066.trimmed.sorted.bam" > "n100.r07.s066_output/n100.r07.s066.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s066_output/n100.r07.s066.depth.txt" "n100.r07.s066_output/n100.r07.s066.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s066_output/n100.r07.s066.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s066_output/n100.r07.s066.reference.fas" | bcftools consensus -m "n100.r07.s066_output/n100.r07.s066.low_depth.tsv" tmp.vcf.gz > "n100.r07.s066_output/n100.r07.s066.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s066_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:cacaeb41a4da35c5599bad3944c812b1818602cb0014ce59b1d5603c131e6727 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.6MiB max=126.8MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 17:19:50 scheduler task e8cac02f (flow 07b86210): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s066.tar.gz resources {}
2021/07/08 17:19:50  ->  n100.r07.s066.Main.cp_out_file 07b86210 exec extern s3://niema-test/n100/r07/n100.r07.s066.tar.gz 35.7MiB
2021/07/08 17:19:50 scheduler task bdc179fc (flow c7a8d3dc): retrieving diagnostic output (try 0): started
2021/07/08 17:19:50 scheduler task 450f7005 (flow 93a728de): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:50 scheduler task 88d23280 (flow bbce7a63): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:50 scheduler task 0d5c5330 (flow c96780e2): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:50 scheduler task bdc179fc (flow c7a8d3dc): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:50 scheduler task 450f7005 (flow 93a728de): promoting objects (try 0): started
2021/07/08 17:19:50 scheduler task 88d23280 (flow bbce7a63): promoting objects (try 0): started
2021/07/08 17:19:50 scheduler task 0d5c5330 (flow c96780e2): unloading (try 0): started
2021/07/08 17:19:50 scheduler task 0d5c5330 (flow c96780e2): unloading list<val<.=dc3506a3 35.8MiB> 35.8MiB>
2021/07/08 17:19:50 scheduler task 0d5c5330 (flow c96780e2): unloading val<.=cffa8d80 35.4MiB>
2021/07/08 17:19:50 scheduler task 0d5c5330 (flow c96780e2): unloading val<.=284f68c1 35.4MiB>
2021/07/08 17:19:50 scheduler task bdc179fc (flow c7a8d3dc): retrieving result (try 0): started
2021/07/08 17:19:50 scheduler task a2cf3a95 (flow 7f056d71): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:952370794c6550a42de5e69253e16dee9ce4fb2d08d34217e69f4e8b2eb40731 -> s3://niema-test/n100/r07/n100.r07.s050.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:50  <-  n100.r07.s050.Main.cp_out_file 7f056d71 ok   extern 0s 35.7MiB
2021/07/08 17:19:50 scheduler task 0d5c5330 (flow c96780e2): unloaded val<.=cffa8d80 35.4MiB>
2021/07/08 17:19:50 scheduler task 0d5c5330 (flow c96780e2): unloaded list<val<.=dc3506a3 35.8MiB> 35.8MiB>
2021/07/08 17:19:50 scheduler task 450f7005 (flow 93a728de): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:50 scheduler task 88d23280 (flow bbce7a63): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:50 scheduler task 0d5c5330 (flow c96780e2): unloaded val<.=284f68c1 35.4MiB>
2021/07/08 17:19:50 scheduler task 0d5c5330 (flow c96780e2): unloading (try 0): successful, next state: complete
2021/07/08 17:19:50 scheduler task bdc179fc (flow c7a8d3dc): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:50 scheduler task 450f7005 (flow 93a728de): retrieving diagnostic output (try 0): started
2021/07/08 17:19:50 scheduler task 88d23280 (flow bbce7a63): retrieving diagnostic output (try 0): started
2021/07/08 17:19:50  <-  n100.r07.s047.Main.out_file c96780e2 ok     exec 5m14s 35.8MiB
2021/07/08 17:19:50 n100.r07.s047.Main.out_file c96780e2 n100/r07/n100.r07.s047.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:78643578a9387babc7623a18340f3fd2bc706a6cb656e602e3f6ae7a9b2acf44
	sha256:c96780e217bb53e39c51cce8b45cf1dfa83ef7fd66aa1db53931cbc0888c1be6
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0d5c533019fc576a6a040f5cb61c97ba5f19b3faad7579b19aed6d22715b154a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s047_output"
	    wget -O "n100.r07.s047_output/n100.r07.s047.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s047_output/n100.r07.s047.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s047_output/n100.r07.s047.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s047_output/n100.r07.s047.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s047_output/n100.r07.s047.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s047_output/n100.r07.s047.reference.fas" "n100.r07.s047_output/n100.r07.s047.fq1.fastq" "n100.r07.s047_output/n100.r07.s047.fq2.fastq" | samtools view -bS - > "n100.r07.s047_output/n100.r07.s047.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s047_output/n100.r07.s047.untrimmed.sorted.bam" "n100.r07.s047_output/n100.r07.s047.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s047_output/n100.r07.s047.untrimmed.sorted.bam" -b "n100.r07.s047_output/n100.r07.s047.primers.bed" -p "n100.r07.s047_output/n100.r07.s047.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s047_output/n100.r07.s047.trimmed.sorted.bam" "n100.r07.s047_output/n100.r07.s047.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s047_output/n100.r07.s047.reference.fas" "n100.r07.s047_output/n100.r07.s047.trimmed.sorted.bam" > "n100.r07.s047_output/n100.r07.s047.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s047_output/n100.r07.s047.reference.fas" --call-indels "n100.r07.s047_output/n100.r07.s047.trimmed.sorted.bam" > "n100.r07.s047_output/n100.r07.s047.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s047_output/n100.r07.s047.trimmed.sorted.bam" > "n100.r07.s047_output/n100.r07.s047.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s047_output/n100.r07.s047.depth.txt" "n100.r07.s047_output/n100.r07.s047.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s047_output/n100.r07.s047.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s047_output/n100.r07.s047.reference.fas" | bcftools consensus -m "n100.r07.s047_output/n100.r07.s047.low_depth.tsv" tmp.vcf.gz > "n100.r07.s047_output/n100.r07.s047.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s047_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:dc3506a31e839fd817f66ed943992d0b4e5c51895795eb4b7fbebb871697a06a 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=22.0MiB max=126.2MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 17:19:50 scheduler task 91d9dec2 (flow 7913f193): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s047.tar.gz resources {}
2021/07/08 17:19:50  ->  n100.r07.s047.Main.cp_out_file 7913f193 exec extern s3://niema-test/n100/r07/n100.r07.s047.tar.gz 35.8MiB
2021/07/08 17:19:50 scheduler task bdc179fc (flow c7a8d3dc): transferring output (try 0): started
2021/07/08 17:19:50 scheduler task 415ae885 (flow abb16dca): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:50 scheduler task 415ae885 (flow abb16dca): promoting objects (try 0): started
2021/07/08 17:19:50 scheduler task 450f7005 (flow 93a728de): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:50 scheduler task 88d23280 (flow bbce7a63): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:50 scheduler task 450f7005 (flow 93a728de): retrieving result (try 0): started
2021/07/08 17:19:50 scheduler task 88d23280 (flow bbce7a63): retrieving result (try 0): started
2021/07/08 17:19:50 scheduler task 415ae885 (flow abb16dca): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:50 scheduler task 415ae885 (flow abb16dca): retrieving diagnostic output (try 0): started
2021/07/08 17:19:50 scheduler task 450f7005 (flow 93a728de): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:50 scheduler task 88d23280 (flow bbce7a63): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:50 scheduler task 450f7005 (flow 93a728de): transferring output (try 0): started
2021/07/08 17:19:50 scheduler task 54102d72 (flow b0d3f2e8): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:c9066e59a304dc13923658363570d00ac380cdff347c2307e05ebdbbce0d063a -> s3://niema-test/n100/r07/n100.r07.s006.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:50  <-  n100.r07.s006.Main.cp_out_file b0d3f2e8 ok   extern 0s 35.7MiB
2021/07/08 17:19:50 scheduler task 88d23280 (flow bbce7a63): transferring output (try 0): started
2021/07/08 17:19:50 scheduler task 4f4f4171 (flow 522bd866): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:50 scheduler task 2623b266 (flow 26192454): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:50 scheduler task 415ae885 (flow abb16dca): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:50 scheduler task 14ff1d2f (flow 6ac3881d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:619886a2728ef411d84dbe485a1b82d397283a627272d118cc5100d47a85c1e3 -> s3://niema-test/n100/r07/n100.r07.s004.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:50  <-  n100.r07.s004.Main.cp_out_file 6ac3881d ok   extern 0s 35.7MiB
2021/07/08 17:19:50 scheduler task 4f4f4171 (flow 522bd866): promoting objects (try 0): started
2021/07/08 17:19:50 scheduler task 2623b266 (flow 26192454): promoting objects (try 0): started
2021/07/08 17:19:50 scheduler task 415ae885 (flow abb16dca): retrieving result (try 0): started
2021/07/08 17:19:50 scheduler task 96417d52 (flow 72af5eda): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:1c7c463f431722d7e0ce294d99c6174afd9654bcd12eee009038663c8ed9b5a5 -> s3://niema-test/n100/r07/n100.r07.s018.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:50  <-  n100.r07.s018.Main.cp_out_file 72af5eda ok   extern 0s 35.7MiB
2021/07/08 17:19:50 scheduler task 4f4f4171 (flow 522bd866): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:50 scheduler task 4f4f4171 (flow 522bd866): retrieving diagnostic output (try 0): started
2021/07/08 17:19:50 scheduler task 2623b266 (flow 26192454): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:50 scheduler task 415ae885 (flow abb16dca): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:50 scheduler task 2623b266 (flow 26192454): retrieving diagnostic output (try 0): started
2021/07/08 17:19:50 scheduler task 415ae885 (flow abb16dca): transferring output (try 0): started
2021/07/08 17:19:50 scheduler task bdc179fc (flow c7a8d3dc): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:50 scheduler task bdc179fc (flow c7a8d3dc): unloading (try 0): started
2021/07/08 17:19:50 scheduler task bdc179fc (flow c7a8d3dc): unloading list<val<.=c87b379a 35.7MiB> 35.7MiB>
2021/07/08 17:19:50 scheduler task bdc179fc (flow c7a8d3dc): unloading val<.=b5790878 35.4MiB>
2021/07/08 17:19:50 scheduler task bdc179fc (flow c7a8d3dc): unloading val<.=7c843910 35.4MiB>
2021/07/08 17:19:50 scheduler task e8cac02f (flow 07b86210): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:cacaeb41a4da35c5599bad3944c812b1818602cb0014ce59b1d5603c131e6727 -> s3://niema-test/n100/r07/n100.r07.s066.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:50  <-  n100.r07.s066.Main.cp_out_file 07b86210 ok   extern 0s 35.7MiB
2021/07/08 17:19:50 scheduler task 2623b266 (flow 26192454): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:50 scheduler task 2623b266 (flow 26192454): retrieving result (try 0): started
2021/07/08 17:19:51 scheduler task bdc179fc (flow c7a8d3dc): unloaded list<val<.=c87b379a 35.7MiB> 35.7MiB>
2021/07/08 17:19:51 scheduler task bdc179fc (flow c7a8d3dc): unloaded val<.=b5790878 35.4MiB>
2021/07/08 17:19:51 scheduler task 4f4f4171 (flow 522bd866): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:51 scheduler task bdc179fc (flow c7a8d3dc): unloaded val<.=7c843910 35.4MiB>
2021/07/08 17:19:51 scheduler task bdc179fc (flow c7a8d3dc): unloading (try 0): successful, next state: complete
2021/07/08 17:19:51 scheduler task 4f4f4171 (flow 522bd866): retrieving result (try 0): started
2021/07/08 17:19:51 scheduler task 2623b266 (flow 26192454): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:51  <-  n100.r07.s070.Main.out_file c7a8d3dc ok     exec 5m6s 35.7MiB
2021/07/08 17:19:51 n100.r07.s070.Main.out_file c7a8d3dc n100/r07/n100.r07.s070.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b49985d208baa7ff2a4ca6106fdeb60ae01f2639cba379437327e1cc46cf9206
	sha256:c7a8d3dc5e749175bd0840d2e2bce478c91b63021d38819356b7febff13c802a
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bdc179fc15c90c099179db9235ad9f789d7d5f48c885cf5d24f13b6f4ecc594a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s070_output"
	    wget -O "n100.r07.s070_output/n100.r07.s070.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s070_output/n100.r07.s070.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s070_output/n100.r07.s070.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s070_output/n100.r07.s070.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s070_output/n100.r07.s070.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s070_output/n100.r07.s070.reference.fas" "n100.r07.s070_output/n100.r07.s070.fq1.fastq" "n100.r07.s070_output/n100.r07.s070.fq2.fastq" | samtools view -bS - > "n100.r07.s070_output/n100.r07.s070.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s070_output/n100.r07.s070.untrimmed.sorted.bam" "n100.r07.s070_output/n100.r07.s070.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s070_output/n100.r07.s070.untrimmed.sorted.bam" -b "n100.r07.s070_output/n100.r07.s070.primers.bed" -p "n100.r07.s070_output/n100.r07.s070.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s070_output/n100.r07.s070.trimmed.sorted.bam" "n100.r07.s070_output/n100.r07.s070.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s070_output/n100.r07.s070.reference.fas" "n100.r07.s070_output/n100.r07.s070.trimmed.sorted.bam" > "n100.r07.s070_output/n100.r07.s070.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s070_output/n100.r07.s070.reference.fas" --call-indels "n100.r07.s070_output/n100.r07.s070.trimmed.sorted.bam" > "n100.r07.s070_output/n100.r07.s070.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s070_output/n100.r07.s070.trimmed.sorted.bam" > "n100.r07.s070_output/n100.r07.s070.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s070_output/n100.r07.s070.depth.txt" "n100.r07.s070_output/n100.r07.s070.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s070_output/n100.r07.s070.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s070_output/n100.r07.s070.reference.fas" | bcftools consensus -m "n100.r07.s070_output/n100.r07.s070.low_depth.tsv" tmp.vcf.gz > "n100.r07.s070_output/n100.r07.s070.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s070_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:c87b379a1f83e04f533c52ce253db217630e3942842a9496d79d77e1a2099b7d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.5MiB max=130.4MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=516B max=2.0KiB
2021/07/08 17:19:51 scheduler task bb989f09 (flow 083edd69): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s070.tar.gz resources {}
2021/07/08 17:19:51  ->  n100.r07.s070.Main.cp_out_file 083edd69 exec extern s3://niema-test/n100/r07/n100.r07.s070.tar.gz 35.7MiB
2021/07/08 17:19:51 scheduler task 2623b266 (flow 26192454): transferring output (try 0): started
2021/07/08 17:19:51 scheduler task 4f4f4171 (flow 522bd866): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:51 scheduler task 4f4f4171 (flow 522bd866): transferring output (try 0): started
2021/07/08 17:19:51 scheduler task 88d23280 (flow bbce7a63): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:51 scheduler task 450f7005 (flow 93a728de): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:51 scheduler task 88d23280 (flow bbce7a63): unloading (try 0): started
2021/07/08 17:19:51 scheduler task 88d23280 (flow bbce7a63): unloading list<val<.=aac634c3 35.8MiB> 35.8MiB>
2021/07/08 17:19:51 scheduler task 88d23280 (flow bbce7a63): unloading val<.=771ce5dd 35.4MiB>
2021/07/08 17:19:51 scheduler task 88d23280 (flow bbce7a63): unloading val<.=3e78a469 35.4MiB>
2021/07/08 17:19:51 scheduler task 450f7005 (flow 93a728de): unloading (try 0): started
2021/07/08 17:19:51 scheduler task 450f7005 (flow 93a728de): unloading list<val<.=6f7e0869 35.7MiB> 35.7MiB>
2021/07/08 17:19:51 scheduler task 450f7005 (flow 93a728de): unloading val<.=54ba57b8 35.4MiB>
2021/07/08 17:19:51 scheduler task 450f7005 (flow 93a728de): unloading val<.=682b7e3f 35.4MiB>
2021/07/08 17:19:51 scheduler task 91d9dec2 (flow 7913f193): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:dc3506a31e839fd817f66ed943992d0b4e5c51895795eb4b7fbebb871697a06a -> s3://niema-test/n100/r07/n100.r07.s047.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:19:51  <-  n100.r07.s047.Main.cp_out_file 7913f193 ok   extern 0s 35.8MiB
2021/07/08 17:19:51 scheduler task 88d23280 (flow bbce7a63): unloaded val<.=771ce5dd 35.4MiB>
2021/07/08 17:19:51 scheduler task 88d23280 (flow bbce7a63): unloaded val<.=3e78a469 35.4MiB>
2021/07/08 17:19:51 scheduler task 88d23280 (flow bbce7a63): unloaded list<val<.=aac634c3 35.8MiB> 35.8MiB>
2021/07/08 17:19:51 scheduler task 88d23280 (flow bbce7a63): unloading (try 0): successful, next state: complete
2021/07/08 17:19:51  <-  n100.r07.s033.Main.out_file bbce7a63 ok     exec 5m15s 35.8MiB
2021/07/08 17:19:51 n100.r07.s033.Main.out_file bbce7a63 n100/r07/n100.r07.s033.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a6b2770b06ea8498095ffbf40a3cf29cec1ee8d85bc1aae42da9e6e75857da00
	sha256:bbce7a635c11c3c90bacaf3c37dd2f039e3e84ce3291fe05a8be7eb0dd0b3909
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/88d232805559e7444a8570b21d96964fff82c803d6070425543e8acd449dd969
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s033_output"
	    wget -O "n100.r07.s033_output/n100.r07.s033.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s033_output/n100.r07.s033.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s033_output/n100.r07.s033.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s033_output/n100.r07.s033.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s033_output/n100.r07.s033.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s033_output/n100.r07.s033.reference.fas" "n100.r07.s033_output/n100.r07.s033.fq1.fastq" "n100.r07.s033_output/n100.r07.s033.fq2.fastq" | samtools view -bS - > "n100.r07.s033_output/n100.r07.s033.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s033_output/n100.r07.s033.untrimmed.sorted.bam" "n100.r07.s033_output/n100.r07.s033.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s033_output/n100.r07.s033.untrimmed.sorted.bam" -b "n100.r07.s033_output/n100.r07.s033.primers.bed" -p "n100.r07.s033_output/n100.r07.s033.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s033_output/n100.r07.s033.trimmed.sorted.bam" "n100.r07.s033_output/n100.r07.s033.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s033_output/n100.r07.s033.reference.fas" "n100.r07.s033_output/n100.r07.s033.trimmed.sorted.bam" > "n100.r07.s033_output/n100.r07.s033.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s033_output/n100.r07.s033.reference.fas" --call-indels "n100.r07.s033_output/n100.r07.s033.trimmed.sorted.bam" > "n100.r07.s033_output/n100.r07.s033.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s033_output/n100.r07.s033.trimmed.sorted.bam" > "n100.r07.s033_output/n100.r07.s033.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s033_output/n100.r07.s033.depth.txt" "n100.r07.s033_output/n100.r07.s033.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s033_output/n100.r07.s033.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s033_output/n100.r07.s033.reference.fas" | bcftools consensus -m "n100.r07.s033_output/n100.r07.s033.low_depth.tsv" tmp.vcf.gz > "n100.r07.s033_output/n100.r07.s033.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s033_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:aac634c360763f6ef6de2c5933c3ed2f87bc600f8407d0fb7ce256806a54b8b7 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=23.0MiB max=131.8MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=521B max=2.0KiB
2021/07/08 17:19:51 scheduler task b10a28b8 (flow 99d23058): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s033.tar.gz resources {}
2021/07/08 17:19:51  ->  n100.r07.s033.Main.cp_out_file 99d23058 exec extern s3://niema-test/n100/r07/n100.r07.s033.tar.gz 35.8MiB
2021/07/08 17:19:51 scheduler task 450f7005 (flow 93a728de): unloaded val<.=682b7e3f 35.4MiB>
2021/07/08 17:19:51 scheduler task 450f7005 (flow 93a728de): unloaded list<val<.=6f7e0869 35.7MiB> 35.7MiB>
2021/07/08 17:19:51 scheduler task 450f7005 (flow 93a728de): unloaded val<.=54ba57b8 35.4MiB>
2021/07/08 17:19:51 scheduler task 450f7005 (flow 93a728de): unloading (try 0): successful, next state: complete
2021/07/08 17:19:51  <-  n100.r07.s024.Main.out_file 93a728de ok     exec 5m6s 35.7MiB
2021/07/08 17:19:51 n100.r07.s024.Main.out_file 93a728de n100/r07/n100.r07.s024.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:89d3804b7971c013e572221caada4c9225dd51f25db66133572cf6e1746b3cdb
	sha256:93a728deacbd923ee27ed5430e7c35dca77617a6bcd65ff1c8baec0577421db3
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/450f7005b29d7b1d3c13bab5af1ef1dd155dbe0db7caaf5ff0938ef2b39ddeae
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s024_output"
	    wget -O "n100.r07.s024_output/n100.r07.s024.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s024_output/n100.r07.s024.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s024_output/n100.r07.s024.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s024_output/n100.r07.s024.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s024_output/n100.r07.s024.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s024_output/n100.r07.s024.reference.fas" "n100.r07.s024_output/n100.r07.s024.fq1.fastq" "n100.r07.s024_output/n100.r07.s024.fq2.fastq" | samtools view -bS - > "n100.r07.s024_output/n100.r07.s024.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s024_output/n100.r07.s024.untrimmed.sorted.bam" "n100.r07.s024_output/n100.r07.s024.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s024_output/n100.r07.s024.untrimmed.sorted.bam" -b "n100.r07.s024_output/n100.r07.s024.primers.bed" -p "n100.r07.s024_output/n100.r07.s024.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s024_output/n100.r07.s024.trimmed.sorted.bam" "n100.r07.s024_output/n100.r07.s024.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s024_output/n100.r07.s024.reference.fas" "n100.r07.s024_output/n100.r07.s024.trimmed.sorted.bam" > "n100.r07.s024_output/n100.r07.s024.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s024_output/n100.r07.s024.reference.fas" --call-indels "n100.r07.s024_output/n100.r07.s024.trimmed.sorted.bam" > "n100.r07.s024_output/n100.r07.s024.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s024_output/n100.r07.s024.trimmed.sorted.bam" > "n100.r07.s024_output/n100.r07.s024.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s024_output/n100.r07.s024.depth.txt" "n100.r07.s024_output/n100.r07.s024.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s024_output/n100.r07.s024.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s024_output/n100.r07.s024.reference.fas" | bcftools consensus -m "n100.r07.s024_output/n100.r07.s024.low_depth.tsv" tmp.vcf.gz > "n100.r07.s024_output/n100.r07.s024.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s024_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:6f7e0869786b4138f441a0bdb34031cf98222d9f95cad77254403fe844bf2bc1 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.1MiB max=128.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:19:51 scheduler task d3a2d96e (flow 33487206): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s024.tar.gz resources {}
2021/07/08 17:19:51  ->  n100.r07.s024.Main.cp_out_file 33487206 exec extern s3://niema-test/n100/r07/n100.r07.s024.tar.gz 35.7MiB
2021/07/08 17:19:51 scheduler task 415ae885 (flow abb16dca): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:51 scheduler task 415ae885 (flow abb16dca): unloading (try 0): started
2021/07/08 17:19:51 scheduler task 415ae885 (flow abb16dca): unloading list<val<.=16107649 35.7MiB> 35.7MiB>
2021/07/08 17:19:51 scheduler task 415ae885 (flow abb16dca): unloading val<.=6cbad8a7 35.4MiB>
2021/07/08 17:19:51 scheduler task 415ae885 (flow abb16dca): unloading val<.=a6168f00 35.4MiB>
2021/07/08 17:19:51 scheduler task 415ae885 (flow abb16dca): unloaded list<val<.=16107649 35.7MiB> 35.7MiB>
2021/07/08 17:19:51 scheduler task 415ae885 (flow abb16dca): unloaded val<.=6cbad8a7 35.4MiB>
2021/07/08 17:19:51 scheduler task 415ae885 (flow abb16dca): unloaded val<.=a6168f00 35.4MiB>
2021/07/08 17:19:51 scheduler task 415ae885 (flow abb16dca): unloading (try 0): successful, next state: complete
2021/07/08 17:19:51  <-  n100.r07.s052.Main.out_file abb16dca ok     exec 5m14s 35.7MiB
2021/07/08 17:19:51 n100.r07.s052.Main.out_file abb16dca n100/r07/n100.r07.s052.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:203b0773cdffb3db392a53fa8a01a1660d6028b6995d2abd1b25f8ffd98d9734
	sha256:abb16dca7d3983ad5d787c60aab159596417e3561af29c49b5a350a2b61f5713
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/415ae885b70306ac7ef776c46880635574eb065f1708c2a983d5adde83569659
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s052_output"
	    wget -O "n100.r07.s052_output/n100.r07.s052.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s052_output/n100.r07.s052.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s052_output/n100.r07.s052.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s052_output/n100.r07.s052.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s052_output/n100.r07.s052.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s052_output/n100.r07.s052.reference.fas" "n100.r07.s052_output/n100.r07.s052.fq1.fastq" "n100.r07.s052_output/n100.r07.s052.fq2.fastq" | samtools view -bS - > "n100.r07.s052_output/n100.r07.s052.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s052_output/n100.r07.s052.untrimmed.sorted.bam" "n100.r07.s052_output/n100.r07.s052.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s052_output/n100.r07.s052.untrimmed.sorted.bam" -b "n100.r07.s052_output/n100.r07.s052.primers.bed" -p "n100.r07.s052_output/n100.r07.s052.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s052_output/n100.r07.s052.trimmed.sorted.bam" "n100.r07.s052_output/n100.r07.s052.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s052_output/n100.r07.s052.reference.fas" "n100.r07.s052_output/n100.r07.s052.trimmed.sorted.bam" > "n100.r07.s052_output/n100.r07.s052.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s052_output/n100.r07.s052.reference.fas" --call-indels "n100.r07.s052_output/n100.r07.s052.trimmed.sorted.bam" > "n100.r07.s052_output/n100.r07.s052.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s052_output/n100.r07.s052.trimmed.sorted.bam" > "n100.r07.s052_output/n100.r07.s052.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s052_output/n100.r07.s052.depth.txt" "n100.r07.s052_output/n100.r07.s052.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s052_output/n100.r07.s052.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s052_output/n100.r07.s052.reference.fas" | bcftools consensus -m "n100.r07.s052_output/n100.r07.s052.low_depth.tsv" tmp.vcf.gz > "n100.r07.s052_output/n100.r07.s052.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s052_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:16107649764e2f2eaa5d93b51b0d56a5119f122711989b16315ef4ef0c3127c0 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.7MiB max=129.6MiB
	    disk mean=5.9MiB max=35.7MiB
	    tmp mean=522B max=2.1KiB
2021/07/08 17:19:51 scheduler task ca7fa704 (flow ebede53d): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s052.tar.gz resources {}
2021/07/08 17:19:51  ->  n100.r07.s052.Main.cp_out_file ebede53d exec extern s3://niema-test/n100/r07/n100.r07.s052.tar.gz 35.7MiB
2021/07/08 17:19:51 scheduler task 2623b266 (flow 26192454): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:51 scheduler task 2623b266 (flow 26192454): unloading (try 0): started
2021/07/08 17:19:51 scheduler task 2623b266 (flow 26192454): unloading list<val<.=c2d11de4 35.7MiB> 35.7MiB>
2021/07/08 17:19:51 scheduler task 2623b266 (flow 26192454): unloading val<.=ec479eab 35.4MiB>
2021/07/08 17:19:51 scheduler task 2623b266 (flow 26192454): unloading val<.=68686f31 35.4MiB>
2021/07/08 17:19:51 scheduler task 2623b266 (flow 26192454): unloaded val<.=68686f31 35.4MiB>
2021/07/08 17:19:51 scheduler task 2623b266 (flow 26192454): unloaded list<val<.=c2d11de4 35.7MiB> 35.7MiB>
2021/07/08 17:19:51 scheduler task 2623b266 (flow 26192454): unloaded val<.=ec479eab 35.4MiB>
2021/07/08 17:19:51 scheduler task 2623b266 (flow 26192454): unloading (try 0): successful, next state: complete
2021/07/08 17:19:51  <-  n100.r07.s016.Main.out_file 26192454 ok     exec 5m6s 35.7MiB
2021/07/08 17:19:51 n100.r07.s016.Main.out_file 26192454 n100/r07/n100.r07.s016.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f4627290ab220b534f4de4bb9c29695020da21cfee6b4441322015cfb0e9b39a
	sha256:261924548a232fddb15681629c94f9d36ab6f721d271ba155c8e1e6ab0b3fd93
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2623b266f1800fb00e962754ad4da37500ac3b60456819b9028a1bdda8c159a6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s016_output"
	    wget -O "n100.r07.s016_output/n100.r07.s016.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s016_output/n100.r07.s016.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s016_output/n100.r07.s016.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s016_output/n100.r07.s016.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s016_output/n100.r07.s016.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s016_output/n100.r07.s016.reference.fas" "n100.r07.s016_output/n100.r07.s016.fq1.fastq" "n100.r07.s016_output/n100.r07.s016.fq2.fastq" | samtools view -bS - > "n100.r07.s016_output/n100.r07.s016.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s016_output/n100.r07.s016.untrimmed.sorted.bam" "n100.r07.s016_output/n100.r07.s016.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s016_output/n100.r07.s016.untrimmed.sorted.bam" -b "n100.r07.s016_output/n100.r07.s016.primers.bed" -p "n100.r07.s016_output/n100.r07.s016.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s016_output/n100.r07.s016.trimmed.sorted.bam" "n100.r07.s016_output/n100.r07.s016.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s016_output/n100.r07.s016.reference.fas" "n100.r07.s016_output/n100.r07.s016.trimmed.sorted.bam" > "n100.r07.s016_output/n100.r07.s016.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s016_output/n100.r07.s016.reference.fas" --call-indels "n100.r07.s016_output/n100.r07.s016.trimmed.sorted.bam" > "n100.r07.s016_output/n100.r07.s016.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s016_output/n100.r07.s016.trimmed.sorted.bam" > "n100.r07.s016_output/n100.r07.s016.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s016_output/n100.r07.s016.depth.txt" "n100.r07.s016_output/n100.r07.s016.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s016_output/n100.r07.s016.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s016_output/n100.r07.s016.reference.fas" | bcftools consensus -m "n100.r07.s016_output/n100.r07.s016.low_depth.tsv" tmp.vcf.gz > "n100.r07.s016_output/n100.r07.s016.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s016_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:c2d11de4069757751155aad0dd6a853c0517487b725a358331c352755edb1208 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.3MiB max=129.7MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:19:51 scheduler task 06b72bfb (flow d56ad7b9): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s016.tar.gz resources {}
2021/07/08 17:19:51  ->  n100.r07.s016.Main.cp_out_file d56ad7b9 exec extern s3://niema-test/n100/r07/n100.r07.s016.tar.gz 35.7MiB
2021/07/08 17:19:51 scheduler task 852314b6 (flow d13a1791): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:51 scheduler task 4f4f4171 (flow 522bd866): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:51 scheduler task 852314b6 (flow d13a1791): promoting objects (try 0): started
2021/07/08 17:19:51 scheduler task 4f4f4171 (flow 522bd866): unloading (try 0): started
2021/07/08 17:19:51 scheduler task 4f4f4171 (flow 522bd866): unloading list<val<.=fdca1324 35.7MiB> 35.7MiB>
2021/07/08 17:19:51 scheduler task 4f4f4171 (flow 522bd866): unloading val<.=2ca202e8 35.4MiB>
2021/07/08 17:19:51 scheduler task 4f4f4171 (flow 522bd866): unloading val<.=2b450fea 35.4MiB>
2021/07/08 17:19:51 scheduler task 852314b6 (flow d13a1791): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:51 scheduler task 852314b6 (flow d13a1791): retrieving diagnostic output (try 0): started
2021/07/08 17:19:51 scheduler task 8465c67c (flow b2a24fdd): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:51 scheduler task 8465c67c (flow b2a24fdd): promoting objects (try 0): started
2021/07/08 17:19:51 scheduler task 4f4f4171 (flow 522bd866): unloaded val<.=2ca202e8 35.4MiB>
2021/07/08 17:19:51 scheduler task 4f4f4171 (flow 522bd866): unloaded list<val<.=fdca1324 35.7MiB> 35.7MiB>
2021/07/08 17:19:51 scheduler task 4f4f4171 (flow 522bd866): unloaded val<.=2b450fea 35.4MiB>
2021/07/08 17:19:51 scheduler task 4f4f4171 (flow 522bd866): unloading (try 0): successful, next state: complete
2021/07/08 17:19:51  <-  n100.r07.s083.Main.out_file 522bd866 ok     exec 5m15s 35.7MiB
2021/07/08 17:19:51 n100.r07.s083.Main.out_file 522bd866 n100/r07/n100.r07.s083.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:91aa2eb9b632668e8e022c582f1d31298367e34297dc58f5c6a506c5f8e548e3
	sha256:522bd866569fc831a7dcfedf37917710478b412647cb0f9d385cc71997076ff7
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4f4f4171745404ac8c73bc6529921476a202f4d190b4e44d5bd0ad2e0a01eb37
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s083_output"
	    wget -O "n100.r07.s083_output/n100.r07.s083.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s083_output/n100.r07.s083.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s083_output/n100.r07.s083.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s083_output/n100.r07.s083.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s083_output/n100.r07.s083.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s083_output/n100.r07.s083.reference.fas" "n100.r07.s083_output/n100.r07.s083.fq1.fastq" "n100.r07.s083_output/n100.r07.s083.fq2.fastq" | samtools view -bS - > "n100.r07.s083_output/n100.r07.s083.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s083_output/n100.r07.s083.untrimmed.sorted.bam" "n100.r07.s083_output/n100.r07.s083.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s083_output/n100.r07.s083.untrimmed.sorted.bam" -b "n100.r07.s083_output/n100.r07.s083.primers.bed" -p "n100.r07.s083_output/n100.r07.s083.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s083_output/n100.r07.s083.trimmed.sorted.bam" "n100.r07.s083_output/n100.r07.s083.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s083_output/n100.r07.s083.reference.fas" "n100.r07.s083_output/n100.r07.s083.trimmed.sorted.bam" > "n100.r07.s083_output/n100.r07.s083.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s083_output/n100.r07.s083.reference.fas" --call-indels "n100.r07.s083_output/n100.r07.s083.trimmed.sorted.bam" > "n100.r07.s083_output/n100.r07.s083.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s083_output/n100.r07.s083.trimmed.sorted.bam" > "n100.r07.s083_output/n100.r07.s083.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s083_output/n100.r07.s083.depth.txt" "n100.r07.s083_output/n100.r07.s083.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s083_output/n100.r07.s083.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s083_output/n100.r07.s083.reference.fas" | bcftools consensus -m "n100.r07.s083_output/n100.r07.s083.low_depth.tsv" tmp.vcf.gz > "n100.r07.s083_output/n100.r07.s083.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s083_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:fdca1324aa3f612b550dd0d5f81f215f1e99ae3f3a4e9854bafd128bc67c2d47 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.5MiB max=131.4MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 17:19:51 scheduler task 7d778f81 (flow a8b844a8): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s083.tar.gz resources {}
2021/07/08 17:19:51  ->  n100.r07.s083.Main.cp_out_file a8b844a8 exec extern s3://niema-test/n100/r07/n100.r07.s083.tar.gz 35.7MiB
2021/07/08 17:19:51 scheduler task bb989f09 (flow 083edd69): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:c87b379a1f83e04f533c52ce253db217630e3942842a9496d79d77e1a2099b7d -> s3://niema-test/n100/r07/n100.r07.s070.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:51  <-  n100.r07.s070.Main.cp_out_file 083edd69 ok   extern 0s 35.7MiB
2021/07/08 17:19:51 scheduler task 852314b6 (flow d13a1791): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:51 scheduler task 8465c67c (flow b2a24fdd): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:51 scheduler task 852314b6 (flow d13a1791): retrieving result (try 0): started
2021/07/08 17:19:51 scheduler task 8465c67c (flow b2a24fdd): retrieving diagnostic output (try 0): started
2021/07/08 17:19:51 scheduler task 852314b6 (flow d13a1791): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:51 scheduler task 852314b6 (flow d13a1791): transferring output (try 0): started
2021/07/08 17:19:51 scheduler task 8465c67c (flow b2a24fdd): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:51 scheduler task 8465c67c (flow b2a24fdd): retrieving result (try 0): started
2021/07/08 17:19:51 scheduler task 8465c67c (flow b2a24fdd): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:51 scheduler task 8465c67c (flow b2a24fdd): transferring output (try 0): started
2021/07/08 17:19:52 scheduler task d3a2d96e (flow 33487206): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:6f7e0869786b4138f441a0bdb34031cf98222d9f95cad77254403fe844bf2bc1 -> s3://niema-test/n100/r07/n100.r07.s024.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:52  <-  n100.r07.s024.Main.cp_out_file 33487206 ok   extern 0s 35.7MiB
2021/07/08 17:19:52 scheduler task c5654e5c (flow ef41d477): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:19:52 scheduler task c5654e5c (flow ef41d477): promoting objects (try 0): started
2021/07/08 17:19:52 scheduler task ca7fa704 (flow ebede53d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:16107649764e2f2eaa5d93b51b0d56a5119f122711989b16315ef4ef0c3127c0 -> s3://niema-test/n100/r07/n100.r07.s052.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:52  <-  n100.r07.s052.Main.cp_out_file ebede53d ok   extern 0s 35.7MiB
2021/07/08 17:19:52 scheduler task b10a28b8 (flow 99d23058): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:aac634c360763f6ef6de2c5933c3ed2f87bc600f8407d0fb7ce256806a54b8b7 -> s3://niema-test/n100/r07/n100.r07.s033.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:19:52  <-  n100.r07.s033.Main.cp_out_file 99d23058 ok   extern 0s 35.8MiB
2021/07/08 17:19:52 scheduler task c5654e5c (flow ef41d477): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:19:52 scheduler task c5654e5c (flow ef41d477): retrieving diagnostic output (try 0): started
2021/07/08 17:19:52 scheduler task c5654e5c (flow ef41d477): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:19:52 scheduler task c5654e5c (flow ef41d477): retrieving result (try 0): started
2021/07/08 17:19:52 scheduler task 852314b6 (flow d13a1791): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:52 scheduler task 852314b6 (flow d13a1791): unloading (try 0): started
2021/07/08 17:19:52 scheduler task 852314b6 (flow d13a1791): unloading list<val<.=6b3303b7 35.7MiB> 35.7MiB>
2021/07/08 17:19:52 scheduler task 852314b6 (flow d13a1791): unloading val<.=b6c4a37a 35.4MiB>
2021/07/08 17:19:52 scheduler task 852314b6 (flow d13a1791): unloading val<.=883e6deb 35.4MiB>
2021/07/08 17:19:52 scheduler task c5654e5c (flow ef41d477): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:19:52 scheduler task c5654e5c (flow ef41d477): transferring output (try 0): started
2021/07/08 17:19:52 scheduler task 06b72bfb (flow d56ad7b9): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:c2d11de4069757751155aad0dd6a853c0517487b725a358331c352755edb1208 -> s3://niema-test/n100/r07/n100.r07.s016.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:52  <-  n100.r07.s016.Main.cp_out_file d56ad7b9 ok   extern 0s 35.7MiB
2021/07/08 17:19:52 scheduler task 8465c67c (flow b2a24fdd): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:52 scheduler task 852314b6 (flow d13a1791): unloaded val<.=b6c4a37a 35.4MiB>
2021/07/08 17:19:52 scheduler task 852314b6 (flow d13a1791): unloaded list<val<.=6b3303b7 35.7MiB> 35.7MiB>
2021/07/08 17:19:52 scheduler task 852314b6 (flow d13a1791): unloaded val<.=883e6deb 35.4MiB>
2021/07/08 17:19:52 scheduler task 852314b6 (flow d13a1791): unloading (try 0): successful, next state: complete
2021/07/08 17:19:52 scheduler task 8465c67c (flow b2a24fdd): unloading (try 0): started
2021/07/08 17:19:52 scheduler task 8465c67c (flow b2a24fdd): unloading list<val<.=084d8937 35.8MiB> 35.8MiB>
2021/07/08 17:19:52 scheduler task 8465c67c (flow b2a24fdd): unloading val<.=3e134d90 35.4MiB>
2021/07/08 17:19:52 scheduler task 8465c67c (flow b2a24fdd): unloading val<.=fa035bd3 35.4MiB>
2021/07/08 17:19:52  <-  n100.r07.s032.Main.out_file d13a1791 ok     exec 5m7s 35.7MiB
2021/07/08 17:19:52 n100.r07.s032.Main.out_file d13a1791 n100/r07/n100.r07.s032.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:82c49a6922ee8160f014c37468dde9577ba0fd6542a60e48cc6f5bc03f25b456
	sha256:d13a1791dd4ff631423f6c82fdd5fb6db9c5eed0bfd925b885909a1f5115171d
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/852314b610b70472d17788cb06c9d20e7d16e2b6294a8be591c21a2c8f56e1d5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s032_output"
	    wget -O "n100.r07.s032_output/n100.r07.s032.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s032_output/n100.r07.s032.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s032_output/n100.r07.s032.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s032_output/n100.r07.s032.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s032_output/n100.r07.s032.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s032_output/n100.r07.s032.reference.fas" "n100.r07.s032_output/n100.r07.s032.fq1.fastq" "n100.r07.s032_output/n100.r07.s032.fq2.fastq" | samtools view -bS - > "n100.r07.s032_output/n100.r07.s032.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s032_output/n100.r07.s032.untrimmed.sorted.bam" "n100.r07.s032_output/n100.r07.s032.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s032_output/n100.r07.s032.untrimmed.sorted.bam" -b "n100.r07.s032_output/n100.r07.s032.primers.bed" -p "n100.r07.s032_output/n100.r07.s032.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s032_output/n100.r07.s032.trimmed.sorted.bam" "n100.r07.s032_output/n100.r07.s032.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s032_output/n100.r07.s032.reference.fas" "n100.r07.s032_output/n100.r07.s032.trimmed.sorted.bam" > "n100.r07.s032_output/n100.r07.s032.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s032_output/n100.r07.s032.reference.fas" --call-indels "n100.r07.s032_output/n100.r07.s032.trimmed.sorted.bam" > "n100.r07.s032_output/n100.r07.s032.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s032_output/n100.r07.s032.trimmed.sorted.bam" > "n100.r07.s032_output/n100.r07.s032.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s032_output/n100.r07.s032.depth.txt" "n100.r07.s032_output/n100.r07.s032.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s032_output/n100.r07.s032.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s032_output/n100.r07.s032.reference.fas" | bcftools consensus -m "n100.r07.s032_output/n100.r07.s032.low_depth.tsv" tmp.vcf.gz > "n100.r07.s032_output/n100.r07.s032.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s032_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:6b3303b7d75d54852a6c2ede41b55c73deead85a399db64c97b6f1954db88fb9 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.7MiB max=129.9MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:19:52 scheduler task 0f98c7a7 (flow 31ee9b9d): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s032.tar.gz resources {}
2021/07/08 17:19:52  ->  n100.r07.s032.Main.cp_out_file 31ee9b9d exec extern s3://niema-test/n100/r07/n100.r07.s032.tar.gz 35.7MiB
2021/07/08 17:19:52 scheduler task 8465c67c (flow b2a24fdd): unloaded list<val<.=084d8937 35.8MiB> 35.8MiB>
2021/07/08 17:19:52 scheduler task 8465c67c (flow b2a24fdd): unloaded val<.=3e134d90 35.4MiB>
2021/07/08 17:19:52 scheduler task 8465c67c (flow b2a24fdd): unloaded val<.=fa035bd3 35.4MiB>
2021/07/08 17:19:52 scheduler task 8465c67c (flow b2a24fdd): unloading (try 0): successful, next state: complete
2021/07/08 17:19:52  <-  n100.r07.s087.Main.out_file b2a24fdd ok     exec 5m7s 35.8MiB
2021/07/08 17:19:52 n100.r07.s087.Main.out_file b2a24fdd n100/r07/n100.r07.s087.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:494d0a39299cd2e0f30e1203afc13f1a95da706cb300cb2df224113be98dd83c
	sha256:b2a24fddbf8364fba2cf9dfc249cc6f34a3f4789b9aab2d7231c441f18c56be4
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8465c67ca7e07b3cdd95d8a4d37ad731ea989edd1a654f66d3a5b3cfb2fc8851
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s087_output"
	    wget -O "n100.r07.s087_output/n100.r07.s087.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s087_output/n100.r07.s087.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s087_output/n100.r07.s087.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s087_output/n100.r07.s087.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s087_output/n100.r07.s087.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s087_output/n100.r07.s087.reference.fas" "n100.r07.s087_output/n100.r07.s087.fq1.fastq" "n100.r07.s087_output/n100.r07.s087.fq2.fastq" | samtools view -bS - > "n100.r07.s087_output/n100.r07.s087.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s087_output/n100.r07.s087.untrimmed.sorted.bam" "n100.r07.s087_output/n100.r07.s087.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s087_output/n100.r07.s087.untrimmed.sorted.bam" -b "n100.r07.s087_output/n100.r07.s087.primers.bed" -p "n100.r07.s087_output/n100.r07.s087.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s087_output/n100.r07.s087.trimmed.sorted.bam" "n100.r07.s087_output/n100.r07.s087.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s087_output/n100.r07.s087.reference.fas" "n100.r07.s087_output/n100.r07.s087.trimmed.sorted.bam" > "n100.r07.s087_output/n100.r07.s087.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s087_output/n100.r07.s087.reference.fas" --call-indels "n100.r07.s087_output/n100.r07.s087.trimmed.sorted.bam" > "n100.r07.s087_output/n100.r07.s087.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s087_output/n100.r07.s087.trimmed.sorted.bam" > "n100.r07.s087_output/n100.r07.s087.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s087_output/n100.r07.s087.depth.txt" "n100.r07.s087_output/n100.r07.s087.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s087_output/n100.r07.s087.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s087_output/n100.r07.s087.reference.fas" | bcftools consensus -m "n100.r07.s087_output/n100.r07.s087.low_depth.tsv" tmp.vcf.gz > "n100.r07.s087_output/n100.r07.s087.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s087_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:084d89372df88d20e03bd0d46fb715d31825a4f63a884de04cf48d2ef4f9b6e6 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.5MiB max=128.6MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=523B max=2.1KiB
2021/07/08 17:19:52 scheduler task 4e36fbd1 (flow ccb8474a): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s087.tar.gz resources {}
2021/07/08 17:19:52  ->  n100.r07.s087.Main.cp_out_file ccb8474a exec extern s3://niema-test/n100/r07/n100.r07.s087.tar.gz 35.8MiB
2021/07/08 17:19:52 scheduler task 7d778f81 (flow a8b844a8): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:fdca1324aa3f612b550dd0d5f81f215f1e99ae3f3a4e9854bafd128bc67c2d47 -> s3://niema-test/n100/r07/n100.r07.s083.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:52  <-  n100.r07.s083.Main.cp_out_file a8b844a8 ok   extern 0s 35.7MiB
2021/07/08 17:19:52 scheduler task c5654e5c (flow ef41d477): transferring output (try 0): successful, next state: unloading
2021/07/08 17:19:52 scheduler task c5654e5c (flow ef41d477): unloading (try 0): started
2021/07/08 17:19:52 scheduler task c5654e5c (flow ef41d477): unloading list<val<.=fd72adc7 35.7MiB> 35.7MiB>
2021/07/08 17:19:52 scheduler task c5654e5c (flow ef41d477): unloading val<.=9dd2196a 35.4MiB>
2021/07/08 17:19:52 scheduler task c5654e5c (flow ef41d477): unloading val<.=529b778b 35.4MiB>
2021/07/08 17:19:52 scheduler task c5654e5c (flow ef41d477): unloaded list<val<.=fd72adc7 35.7MiB> 35.7MiB>
2021/07/08 17:19:52 scheduler task c5654e5c (flow ef41d477): unloaded val<.=9dd2196a 35.4MiB>
2021/07/08 17:19:53 scheduler task c5654e5c (flow ef41d477): unloaded val<.=529b778b 35.4MiB>
2021/07/08 17:19:53 scheduler task c5654e5c (flow ef41d477): unloading (try 0): successful, next state: complete
2021/07/08 17:19:53  <-  n100.r07.s064.Main.out_file ef41d477 ok     exec 5m8s 35.7MiB
2021/07/08 17:19:53 n100.r07.s064.Main.out_file ef41d477 n100/r07/n100.r07.s064.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e178e93026d9f43d7518739f1d49c4d7ce3fa5b7b9cf563233c24c02443717d4
	sha256:ef41d477fa6666b38f06d6b19fef70d0b9edb7b21cb04aa19ffdfb6a6b5cfc2e
	ec2-18-218-96-152.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c5654e5c97c3d5d589757641ba4cf9e1be1850195ae8a25eaf9330285eb5bab8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r07.s064_output"
	    wget -O "n100.r07.s064_output/n100.r07.s064.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r07.s064_output/n100.r07.s064.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r07.s064_output/n100.r07.s064.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r07.s064_output/n100.r07.s064.fq1.fastq"
	    cp "{{fq2}}" "n100.r07.s064_output/n100.r07.s064.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r07.s064_output/n100.r07.s064.reference.fas" "n100.r07.s064_output/n100.r07.s064.fq1.fastq" "n100.r07.s064_output/n100.r07.s064.fq2.fastq" | samtools view -bS - > "n100.r07.s064_output/n100.r07.s064.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s064_output/n100.r07.s064.untrimmed.sorted.bam" "n100.r07.s064_output/n100.r07.s064.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r07.s064_output/n100.r07.s064.untrimmed.sorted.bam" -b "n100.r07.s064_output/n100.r07.s064.primers.bed" -p "n100.r07.s064_output/n100.r07.s064.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r07.s064_output/n100.r07.s064.trimmed.sorted.bam" "n100.r07.s064_output/n100.r07.s064.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r07.s064_output/n100.r07.s064.reference.fas" "n100.r07.s064_output/n100.r07.s064.trimmed.sorted.bam" > "n100.r07.s064_output/n100.r07.s064.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r07.s064_output/n100.r07.s064.reference.fas" --call-indels "n100.r07.s064_output/n100.r07.s064.trimmed.sorted.bam" > "n100.r07.s064_output/n100.r07.s064.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r07.s064_output/n100.r07.s064.trimmed.sorted.bam" > "n100.r07.s064_output/n100.r07.s064.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r07.s064_output/n100.r07.s064.depth.txt" "n100.r07.s064_output/n100.r07.s064.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r07.s064_output/n100.r07.s064.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r07.s064_output/n100.r07.s064.reference.fas" | bcftools consensus -m "n100.r07.s064_output/n100.r07.s064.low_depth.tsv" tmp.vcf.gz > "n100.r07.s064_output/n100.r07.s064.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r07.s064_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:fd72adc75e6a02b011f839a41ec85b91c40aa5ed81142fb8c1d8d3056d5a4198 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.8MiB max=128.8MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 17:19:53 scheduler task 105729f2 (flow 31d5dfc4): submitted with execconfig extern url s3://niema-test/n100/r07/n100.r07.s064.tar.gz resources {}
2021/07/08 17:19:53  ->  n100.r07.s064.Main.cp_out_file 31d5dfc4 exec extern s3://niema-test/n100/r07/n100.r07.s064.tar.gz 35.7MiB
2021/07/08 17:19:53 scheduler task 0f98c7a7 (flow 31ee9b9d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:6b3303b7d75d54852a6c2ede41b55c73deead85a399db64c97b6f1954db88fb9 -> s3://niema-test/n100/r07/n100.r07.s032.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:53  <-  n100.r07.s032.Main.cp_out_file 31ee9b9d ok   extern 0s 35.7MiB
2021/07/08 17:19:53 scheduler task 4e36fbd1 (flow ccb8474a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:084d89372df88d20e03bd0d46fb715d31825a4f63a884de04cf48d2ef4f9b6e6 -> s3://niema-test/n100/r07/n100.r07.s087.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:19:53  <-  n100.r07.s087.Main.cp_out_file ccb8474a ok   extern 0s 35.8MiB
2021/07/08 17:19:53 scheduler task 105729f2 (flow 31d5dfc4): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:fd72adc75e6a02b011f839a41ec85b91c40aa5ed81142fb8c1d8d3056d5a4198 -> s3://niema-test/n100/r07/n100.r07.s064.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:19:53  <-  n100.r07.s064.Main.cp_out_file 31d5dfc4 ok   extern 0s 35.7MiB
2021/07/08 17:19:53 total n=400 time=6m51s
	ident                          n   ncache transfer runtime(m) cpu         mem(GiB)    disk(GiB)   tmp(GiB) requested
	n100.r07.s001.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s001.Main.fq1         1   0      0B                                                      
	n100.r07.s001.Main.fq2         1   0      0B                                                      
	n100.r07.s001.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s002.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s002.Main.fq1         1   0      0B                                                      
	n100.r07.s002.Main.fq2         1   0      0B                                                      
	n100.r07.s002.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s003.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s003.Main.fq1         1   0      0B                                                      
	n100.r07.s003.Main.fq2         1   0      0B                                                      
	n100.r07.s003.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s004.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s004.Main.fq1         1   0      0B                                                      
	n100.r07.s004.Main.fq2         1   0      0B                                                      
	n100.r07.s004.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s005.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s005.Main.fq1         1   0      0B                                                      
	n100.r07.s005.Main.fq2         1   0      0B                                                      
	n100.r07.s005.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s006.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s006.Main.fq1         1   0      0B                                                      
	n100.r07.s006.Main.fq2         1   0      0B                                                      
	n100.r07.s006.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s007.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s007.Main.fq1         1   0      0B                                                      
	n100.r07.s007.Main.fq2         1   0      0B                                                      
	n100.r07.s007.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s008.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s008.Main.fq1         1   0      0B                                                      
	n100.r07.s008.Main.fq2         1   0      0B                                                      
	n100.r07.s008.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s009.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s009.Main.fq1         1   0      0B                                                      
	n100.r07.s009.Main.fq2         1   0      0B                                                      
	n100.r07.s009.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s010.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s010.Main.fq1         1   0      0B                                                      
	n100.r07.s010.Main.fq2         1   0      0B                                                      
	n100.r07.s010.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s011.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s011.Main.fq1         1   0      0B                                                      
	n100.r07.s011.Main.fq2         1   0      0B                                                      
	n100.r07.s011.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s012.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s012.Main.fq1         1   0      0B                                                      
	n100.r07.s012.Main.fq2         1   0      0B                                                      
	n100.r07.s012.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s013.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s013.Main.fq1         1   0      0B                                                      
	n100.r07.s013.Main.fq2         1   0      0B                                                      
	n100.r07.s013.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s014.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s014.Main.fq1         1   0      0B                                                      
	n100.r07.s014.Main.fq2         1   0      0B                                                      
	n100.r07.s014.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s015.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s015.Main.fq1         1   0      0B                                                      
	n100.r07.s015.Main.fq2         1   0      0B                                                      
	n100.r07.s015.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s016.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s016.Main.fq1         1   0      0B                                                      
	n100.r07.s016.Main.fq2         1   0      0B                                                      
	n100.r07.s016.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s017.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s017.Main.fq1         1   0      0B                                                      
	n100.r07.s017.Main.fq2         1   0      0B                                                      
	n100.r07.s017.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s018.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s018.Main.fq1         1   0      0B                                                      
	n100.r07.s018.Main.fq2         1   0      0B                                                      
	n100.r07.s018.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s019.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s019.Main.fq1         1   0      0B                                                      
	n100.r07.s019.Main.fq2         1   0      0B                                                      
	n100.r07.s019.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s020.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s020.Main.fq1         1   0      0B                                                      
	n100.r07.s020.Main.fq2         1   0      0B                                                      
	n100.r07.s020.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s021.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s021.Main.fq1         1   0      0B                                                      
	n100.r07.s021.Main.fq2         1   0      0B                                                      
	n100.r07.s021.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s022.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s022.Main.fq1         1   0      0B                                                      
	n100.r07.s022.Main.fq2         1   0      0B                                                      
	n100.r07.s022.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s023.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s023.Main.fq1         1   0      0B                                                      
	n100.r07.s023.Main.fq2         1   0      0B                                                      
	n100.r07.s023.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s024.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s024.Main.fq1         1   0      0B                                                      
	n100.r07.s024.Main.fq2         1   0      0B                                                      
	n100.r07.s024.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s025.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s025.Main.fq1         1   0      0B                                                      
	n100.r07.s025.Main.fq2         1   0      0B                                                      
	n100.r07.s025.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s026.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s026.Main.fq1         1   0      0B                                                      
	n100.r07.s026.Main.fq2         1   0      0B                                                      
	n100.r07.s026.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s027.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s027.Main.fq1         1   0      0B                                                      
	n100.r07.s027.Main.fq2         1   0      0B                                                      
	n100.r07.s027.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s028.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s028.Main.fq1         1   0      0B                                                      
	n100.r07.s028.Main.fq2         1   0      0B                                                      
	n100.r07.s028.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s029.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s029.Main.fq1         1   0      0B                                                      
	n100.r07.s029.Main.fq2         1   0      0B                                                      
	n100.r07.s029.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s030.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s030.Main.fq1         1   0      0B                                                      
	n100.r07.s030.Main.fq2         1   0      0B                                                      
	n100.r07.s030.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s031.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s031.Main.fq1         1   0      0B                                                      
	n100.r07.s031.Main.fq2         1   0      0B                                                      
	n100.r07.s031.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s032.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s032.Main.fq1         1   0      0B                                                      
	n100.r07.s032.Main.fq2         1   0      0B                                                      
	n100.r07.s032.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s033.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s033.Main.fq1         1   0      0B                                                      
	n100.r07.s033.Main.fq2         1   0      0B                                                      
	n100.r07.s033.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s034.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s034.Main.fq1         1   0      0B                                                      
	n100.r07.s034.Main.fq2         1   0      0B                                                      
	n100.r07.s034.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s035.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s035.Main.fq1         1   0      0B                                                      
	n100.r07.s035.Main.fq2         1   0      0B                                                      
	n100.r07.s035.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s036.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s036.Main.fq1         1   0      0B                                                      
	n100.r07.s036.Main.fq2         1   0      0B                                                      
	n100.r07.s036.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s037.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s037.Main.fq1         1   0      0B                                                      
	n100.r07.s037.Main.fq2         1   0      0B                                                      
	n100.r07.s037.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s038.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s038.Main.fq1         1   0      0B                                                      
	n100.r07.s038.Main.fq2         1   0      0B                                                      
	n100.r07.s038.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s039.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s039.Main.fq1         1   0      0B                                                      
	n100.r07.s039.Main.fq2         1   0      0B                                                      
	n100.r07.s039.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s040.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s040.Main.fq1         1   0      0B                                                      
	n100.r07.s040.Main.fq2         1   0      0B                                                      
	n100.r07.s040.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s041.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s041.Main.fq1         1   0      0B                                                      
	n100.r07.s041.Main.fq2         1   0      0B                                                      
	n100.r07.s041.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s042.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s042.Main.fq1         1   0      0B                                                      
	n100.r07.s042.Main.fq2         1   0      0B                                                      
	n100.r07.s042.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s043.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s043.Main.fq1         1   0      0B                                                      
	n100.r07.s043.Main.fq2         1   0      0B                                                      
	n100.r07.s043.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s044.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s044.Main.fq1         1   0      0B                                                      
	n100.r07.s044.Main.fq2         1   0      0B                                                      
	n100.r07.s044.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s045.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s045.Main.fq1         1   0      0B                                                      
	n100.r07.s045.Main.fq2         1   0      0B                                                      
	n100.r07.s045.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s046.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s046.Main.fq1         1   0      0B                                                      
	n100.r07.s046.Main.fq2         1   0      0B                                                      
	n100.r07.s046.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s047.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s047.Main.fq1         1   0      0B                                                      
	n100.r07.s047.Main.fq2         1   0      0B                                                      
	n100.r07.s047.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s048.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s048.Main.fq1         1   0      0B                                                      
	n100.r07.s048.Main.fq2         1   0      0B                                                      
	n100.r07.s048.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s049.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s049.Main.fq1         1   0      0B                                                      
	n100.r07.s049.Main.fq2         1   0      0B                                                      
	n100.r07.s049.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s050.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s050.Main.fq1         1   0      0B                                                      
	n100.r07.s050.Main.fq2         1   0      0B                                                      
	n100.r07.s050.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s051.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s051.Main.fq1         1   0      0B                                                      
	n100.r07.s051.Main.fq2         1   0      0B                                                      
	n100.r07.s051.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s052.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s052.Main.fq1         1   0      0B                                                      
	n100.r07.s052.Main.fq2         1   0      0B                                                      
	n100.r07.s052.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s053.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s053.Main.fq1         1   0      0B                                                      
	n100.r07.s053.Main.fq2         1   0      0B                                                      
	n100.r07.s053.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s054.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s054.Main.fq1         1   0      0B                                                      
	n100.r07.s054.Main.fq2         1   0      0B                                                      
	n100.r07.s054.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s055.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s055.Main.fq1         1   0      0B                                                      
	n100.r07.s055.Main.fq2         1   0      0B                                                      
	n100.r07.s055.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s056.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s056.Main.fq1         1   0      0B                                                      
	n100.r07.s056.Main.fq2         1   0      0B                                                      
	n100.r07.s056.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s057.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s057.Main.fq1         1   0      0B                                                      
	n100.r07.s057.Main.fq2         1   0      0B                                                      
	n100.r07.s057.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s058.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s058.Main.fq1         1   0      0B                                                      
	n100.r07.s058.Main.fq2         1   0      0B                                                      
	n100.r07.s058.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s059.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s059.Main.fq1         1   0      0B                                                      
	n100.r07.s059.Main.fq2         1   0      0B                                                      
	n100.r07.s059.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s060.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s060.Main.fq1         1   0      0B                                                      
	n100.r07.s060.Main.fq2         1   0      0B                                                      
	n100.r07.s060.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s061.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s061.Main.fq1         1   0      0B                                                      
	n100.r07.s061.Main.fq2         1   0      0B                                                      
	n100.r07.s061.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s062.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s062.Main.fq1         1   0      0B                                                      
	n100.r07.s062.Main.fq2         1   0      0B                                                      
	n100.r07.s062.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s063.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s063.Main.fq1         1   0      0B                                                      
	n100.r07.s063.Main.fq2         1   0      0B                                                      
	n100.r07.s063.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s064.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s064.Main.fq1         1   0      0B                                                      
	n100.r07.s064.Main.fq2         1   0      0B                                                      
	n100.r07.s064.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s065.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s065.Main.fq1         1   0      0B                                                      
	n100.r07.s065.Main.fq2         1   0      0B                                                      
	n100.r07.s065.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s066.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s066.Main.fq1         1   0      0B                                                      
	n100.r07.s066.Main.fq2         1   0      0B                                                      
	n100.r07.s066.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s067.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s067.Main.fq1         1   0      0B                                                      
	n100.r07.s067.Main.fq2         1   0      0B                                                      
	n100.r07.s067.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s068.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s068.Main.fq1         1   0      0B                                                      
	n100.r07.s068.Main.fq2         1   0      0B                                                      
	n100.r07.s068.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s069.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s069.Main.fq1         1   0      0B                                                      
	n100.r07.s069.Main.fq2         1   0      0B                                                      
	n100.r07.s069.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s070.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s070.Main.fq1         1   0      0B                                                      
	n100.r07.s070.Main.fq2         1   0      0B                                                      
	n100.r07.s070.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s071.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s071.Main.fq1         1   0      0B                                                      
	n100.r07.s071.Main.fq2         1   0      0B                                                      
	n100.r07.s071.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s072.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s072.Main.fq1         1   0      0B                                                      
	n100.r07.s072.Main.fq2         1   0      0B                                                      
	n100.r07.s072.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s073.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s073.Main.fq1         1   0      0B                                                      
	n100.r07.s073.Main.fq2         1   0      0B                                                      
	n100.r07.s073.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s074.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s074.Main.fq1         1   0      0B                                                      
	n100.r07.s074.Main.fq2         1   0      0B                                                      
	n100.r07.s074.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s075.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s075.Main.fq1         1   0      0B                                                      
	n100.r07.s075.Main.fq2         1   0      0B                                                      
	n100.r07.s075.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s076.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s076.Main.fq1         1   0      0B                                                      
	n100.r07.s076.Main.fq2         1   0      0B                                                      
	n100.r07.s076.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s077.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s077.Main.fq1         1   0      0B                                                      
	n100.r07.s077.Main.fq2         1   0      0B                                                      
	n100.r07.s077.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s078.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s078.Main.fq1         1   0      0B                                                      
	n100.r07.s078.Main.fq2         1   0      0B                                                      
	n100.r07.s078.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s079.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s079.Main.fq1         1   0      0B                                                      
	n100.r07.s079.Main.fq2         1   0      0B                                                      
	n100.r07.s079.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s080.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s080.Main.fq1         1   0      0B                                                      
	n100.r07.s080.Main.fq2         1   0      0B                                                      
	n100.r07.s080.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s081.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s081.Main.fq1         1   0      0B                                                      
	n100.r07.s081.Main.fq2         1   0      0B                                                      
	n100.r07.s081.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s082.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s082.Main.fq1         1   0      0B                                                      
	n100.r07.s082.Main.fq2         1   0      0B                                                      
	n100.r07.s082.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s083.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s083.Main.fq1         1   0      0B                                                      
	n100.r07.s083.Main.fq2         1   0      0B                                                      
	n100.r07.s083.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s084.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s084.Main.fq1         1   0      0B                                                      
	n100.r07.s084.Main.fq2         1   0      0B                                                      
	n100.r07.s084.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s085.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s085.Main.fq1         1   0      0B                                                      
	n100.r07.s085.Main.fq2         1   0      0B                                                      
	n100.r07.s085.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s086.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s086.Main.fq1         1   0      0B                                                      
	n100.r07.s086.Main.fq2         1   0      0B                                                      
	n100.r07.s086.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s087.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s087.Main.fq1         1   0      0B                                                      
	n100.r07.s087.Main.fq2         1   0      0B                                                      
	n100.r07.s087.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s088.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s088.Main.fq1         1   0      0B                                                      
	n100.r07.s088.Main.fq2         1   0      0B                                                      
	n100.r07.s088.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s089.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s089.Main.fq1         1   0      0B                                                      
	n100.r07.s089.Main.fq2         1   0      0B                                                      
	n100.r07.s089.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s090.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s090.Main.fq1         1   0      0B                                                      
	n100.r07.s090.Main.fq2         1   0      0B                                                      
	n100.r07.s090.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s091.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s091.Main.fq1         1   0      0B                                                      
	n100.r07.s091.Main.fq2         1   0      0B                                                      
	n100.r07.s091.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s092.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s092.Main.fq1         1   0      0B                                                      
	n100.r07.s092.Main.fq2         1   0      0B                                                      
	n100.r07.s092.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s093.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s093.Main.fq1         1   0      0B                                                      
	n100.r07.s093.Main.fq2         1   0      0B                                                      
	n100.r07.s093.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s094.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s094.Main.fq1         1   0      0B                                                      
	n100.r07.s094.Main.fq2         1   0      0B                                                      
	n100.r07.s094.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s095.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s095.Main.fq1         1   0      0B                                                      
	n100.r07.s095.Main.fq2         1   0      0B                                                      
	n100.r07.s095.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s096.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s096.Main.fq1         1   0      0B                                                      
	n100.r07.s096.Main.fq2         1   0      0B                                                      
	n100.r07.s096.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s097.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s097.Main.fq1         1   0      0B                                                      
	n100.r07.s097.Main.fq2         1   0      0B                                                      
	n100.r07.s097.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s098.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s098.Main.fq1         1   0      0B                                                      
	n100.r07.s098.Main.fq2         1   0      0B                                                      
	n100.r07.s098.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s099.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s099.Main.fq1         1   0      0B                                                      
	n100.r07.s099.Main.fq2         1   0      0B                                                      
	n100.r07.s099.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r07.s100.Main.cp_out_file 1   0      0B                                                      
	n100.r07.s100.Main.fq1         1   0      0B                                                      
	n100.r07.s100.Main.fq2         1   0      0B                                                      
	n100.r07.s100.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	warning: reduce memory requirements for over-allocating execs: n100.r07.s001.Main.out_file, n100.r07.s002.Main.out_file, n100.r07.s003.Main.out_file, n100.r07.s004.Main.out_file, n100.r07.s005.Main.out_file, n100.r07.s006.Main.out_file, n100.r07.s007.Main.out_file, n100.r07.s008.Main.out_file, n100.r07.s009.Main.out_file, n100.r07.s010.Main.out_file, n100.r07.s011.Main.out_file, n100.r07.s012.Main.out_file, n100.r07.s013.Main.out_file, n100.r07.s014.Main.out_file, n100.r07.s015.Main.out_file, n100.r07.s016.Main.out_file, n100.r07.s017.Main.out_file, n100.r07.s018.Main.out_file, n100.r07.s019.Main.out_file, n100.r07.s020.Main.out_file, n100.r07.s021.Main.out_file, n100.r07.s022.Main.out_file, n100.r07.s023.Main.out_file, n100.r07.s024.Main.out_file, n100.r07.s025.Main.out_file, n100.r07.s026.Main.out_file, n100.r07.s027.Main.out_file, n100.r07.s028.Main.out_file, n100.r07.s029.Main.out_file, n100.r07.s030.Main.out_file, n100.r07.s031.Main.out_file, n100.r07.s032.Main.out_file, n100.r07.s033.Main.out_file, n100.r07.s034.Main.out_file, n100.r07.s035.Main.out_file, n100.r07.s036.Main.out_file, n100.r07.s037.Main.out_file, n100.r07.s038.Main.out_file, n100.r07.s039.Main.out_file, n100.r07.s040.Main.out_file, n100.r07.s041.Main.out_file, n100.r07.s042.Main.out_file, n100.r07.s043.Main.out_file, n100.r07.s044.Main.out_file, n100.r07.s045.Main.out_file, n100.r07.s046.Main.out_file, n100.r07.s047.Main.out_file, n100.r07.s048.Main.out_file, n100.r07.s049.Main.out_file, n100.r07.s050.Main.out_file, n100.r07.s051.Main.out_file, n100.r07.s052.Main.out_file, n100.r07.s053.Main.out_file, n100.r07.s054.Main.out_file, n100.r07.s055.Main.out_file, n100.r07.s056.Main.out_file, n100.r07.s057.Main.out_file, n100.r07.s058.Main.out_file, n100.r07.s059.Main.out_file, n100.r07.s060.Main.out_file, n100.r07.s061.Main.out_file, n100.r07.s062.Main.out_file, n100.r07.s063.Main.out_file, n100.r07.s064.Main.out_file, n100.r07.s065.Main.out_file, n100.r07.s066.Main.out_file, n100.r07.s067.Main.out_file, n100.r07.s068.Main.out_file, n100.r07.s069.Main.out_file, n100.r07.s070.Main.out_file, n100.r07.s071.Main.out_file, n100.r07.s072.Main.out_file, n100.r07.s073.Main.out_file, n100.r07.s074.Main.out_file, n100.r07.s075.Main.out_file, n100.r07.s076.Main.out_file, n100.r07.s077.Main.out_file, n100.r07.s078.Main.out_file, n100.r07.s079.Main.out_file, n100.r07.s080.Main.out_file, n100.r07.s081.Main.out_file, n100.r07.s082.Main.out_file, n100.r07.s083.Main.out_file, n100.r07.s084.Main.out_file, n100.r07.s085.Main.out_file, n100.r07.s086.Main.out_file, n100.r07.s087.Main.out_file, n100.r07.s088.Main.out_file, n100.r07.s089.Main.out_file, n100.r07.s090.Main.out_file, n100.r07.s091.Main.out_file, n100.r07.s092.Main.out_file, n100.r07.s093.Main.out_file, n100.r07.s094.Main.out_file, n100.r07.s095.Main.out_file, n100.r07.s096.Main.out_file, n100.r07.s097.Main.out_file, n100.r07.s098.Main.out_file, n100.r07.s099.Main.out_file, n100.r07.s100.Main.out_file
2021/07/08 17:19:53 result: [val<.=29a45717 35.8MiB>, val<.=edae8c09 35.7MiB>, val<.=1da2ec95 35.8MiB>, val<.=619886a2 35.7MiB>, val<.=83016b3a 35.8MiB>, val<.=c9066e59 35.7MiB>, val<.=33a35d47 35.7MiB>, val<.=3e473bc2 35.8MiB>, val<.=b786354b 35.7MiB>, val<.=add95402 35.7MiB>, val<.=30c036af 35.7MiB>, val<.=721d8b09 35.7MiB>, val<.=d2f63703 35.7MiB>, val<.=66fc29ef 35.8MiB>, val<.=ca49ccdf 35.7MiB>, val<.=c2d11de4 35.7MiB>, val<.=0a715bb2 35.8MiB>, val<.=1c7c463f 35.7MiB>, val<.=63332775 35.8MiB>, val<.=36d8e039 35.7MiB>, val<.=af323edb 35.7MiB>, val<.=6269a9a1 35.8MiB>, val<.=916ea460 35.7MiB>, val<.=6f7e0869 35.7MiB>, val<.=cc9530e0 35.7MiB>, val<.=ca3bbb71 35.8MiB>, val<.=940232e5 35.7MiB>, val<.=0baa208d 35.8MiB>, val<.=3d412c19 35.7MiB>, val<.=056d9f9a 35.7MiB>, val<.=6657c481 35.8MiB>, val<.=6b3303b7 35.7MiB>, val<.=aac634c3 35.8MiB>, val<.=189180d5 35.7MiB>, val<.=bbb864de 35.7MiB>, val<.=f6b754b5 35.7MiB>, val<.=240099f2 35.7MiB>, val<.=eb26c4f2 35.7MiB>, val<.=393d74cb 35.7MiB>, val<.=1c1e7cc9 35.7MiB>, val<.=edc05ec1 35.7MiB>, val<.=4b8b83e4 35.7MiB>, val<.=76b2b4f5 35.7MiB>, val<.=3fc4899a 35.7MiB>, val<.=d02feb25 35.7MiB>, val<.=84a84832 35.7MiB>, val<.=dc3506a3 35.8MiB>, val<.=49f58351 35.7MiB>, val<.=eed7a6fb 35.7MiB>, val<.=95237079 35.7MiB>, val<.=a96b01ab 35.7MiB>, val<.=16107649 35.7MiB>, val<.=9c307698 35.7MiB>, val<.=1e453663 35.7MiB>, val<.=85b8459c 35.8MiB>, val<.=2d3b9d0b 35.8MiB>, val<.=59f7d662 35.7MiB>, val<.=9eea4277 35.7MiB>, val<.=58d66057 35.7MiB>, val<.=f40368c8 35.7MiB>, val<.=9a2c80b2 35.7MiB>, val<.=19d07c44 35.7MiB>, val<.=a7295d6f 35.7MiB>, val<.=fd72adc7 35.7MiB>, val<.=67c884f0 35.7MiB>, val<.=cacaeb41 35.7MiB>, val<.=19b511b1 35.8MiB>, val<.=5f4f4a4b 35.7MiB>, val<.=aefdbb8c 35.7MiB>, val<.=c87b379a 35.7MiB>, val<.=52c17d5e 35.8MiB>, val<.=4ef59dfe 35.7MiB>, val<.=a51b4641 35.7MiB>, val<.=9d076001 35.7MiB>, val<.=1bf7e75e 35.8MiB>, val<.=2af628ad 35.8MiB>, val<.=eaf3652d 35.7MiB>, val<.=eb05b2e0 35.7MiB>, val<.=30cbea03 35.7MiB>, val<.=019e4fa2 35.7MiB>, val<.=8b540e94 35.7MiB>, val<.=abb2820e 35.8MiB>, val<.=fdca1324 35.7MiB>, val<.=4423cafc 35.8MiB>, val<.=35cd2a83 35.7MiB>, val<.=11aed960 35.7MiB>, val<.=084d8937 35.8MiB>, val<.=64280475 35.7MiB>, val<.=b9b98a32 35.7MiB>, val<.=4bfed469 35.7MiB>, val<.=7b6373e4 35.7MiB>, val<.=85a87407 35.7MiB>, val<.=6821ee6c 35.7MiB>, val<.=1a589fc9 35.7MiB>, val<.=f32a148c 35.7MiB>, val<.=96f86c2a 35.7MiB>, val<.=f4e4baa7 35.8MiB>, val<.=33b8da70 35.7MiB>, val<.=ab8085cd 35.7MiB>, val<.=0115473b 35.7MiB>]
2021/07/08 17:19:53 waiting for 1 background tasks to complete
