2021/07/08 17:36:35 reflow version: reflow1.6.0 (go1.13.15)
2021/07/08 17:36:35 run ID: 66467316
2021/07/08 17:36:35 evaluating program /home/niema/ViReflow-Paper/data/sarscov2/n100/n100.r10.rf
	(no params)
	(no arguments)
2021/07/08 17:36:35 Trace: /home/niema/.reflow/runs/66467316dad63a10f01f69855f04be0d464df919fa2882e1bf8746b75bcc774a.trace
2021/07/08 17:36:35 evaluating with configuration: scheduler *sched.Scheduler snapshotter blob.Mux transferer *repository.Manager repository *blobrepo.Repository,url=s3://niema-test-quickstart-cache/ assoc *dydbassoc.Assoc,TableName=niema-test-quickstart flags cacheextern,nocache,nogc,norecomputeempty,topdown flowconfig hashv2 cachelookuptimeout 20m0s imagemap map[] dotwriter(*os.File)
2021/07/08 17:36:36 scheduler task 07a286b8 (flow c59eb1d7): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s029_output\"\n        wget -O \"n100.r10.s029_output/n100.r10.s029.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s029_output/n100.r10.s029.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s029_output/n100.r10.s029.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s029_output/n100.r10.s029.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s029_output/n100.r10.s029.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s029_output/n100.r10.s029.reference.fas\" \"n100.r10.s029_output/n100.r10.s029.fq1.fastq\" \"n100.r10.s029_output/n100.r10.s029.fq2.fastq\" | samtools view -bS - > \"n100.r10.s029_output/n100.r10.s029.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s029_output/n100.r10.s029.untrimmed.sorted.bam\" \"n100.r10.s029_output/n100.r10.s029.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s029_output/n100.r10.s029.untrimmed.sorted.bam\" -b \"n100.r10.s029_output/n100.r10.s029.primers.bed\" -p \"n100.r10.s029_output/n100.r10.s029.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s029_output/n100.r10.s029.trimmed.sorted.bam\" \"n100.r10.s029_output/n100.r10.s029.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s029_output/n100.r10.s029.reference.fas\" \"n100.r10.s029_output/n100.r10.s029.trimmed.sorted.bam\" > \"n100.r10.s029_output/n100.r10.s029.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s029_output/n100.r10.s029.reference.fas\" --call-indels \"n100.r10.s029_output/n100.r10.s029.trimmed.sorted.bam\" > \"n100.r10.s029_output/n100.r10.s029.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s029_output/n100.r10.s029.trimmed.sorted.bam\" > \"n100.r10.s029_output/n100.r10.s029.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s029_output/n100.r10.s029.depth.txt\" \"n100.r10.s029_output/n100.r10.s029.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s029_output/n100.r10.s029.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s029_output/n100.r10.s029.reference.fas\" | bcftools consensus -m \"n100.r10.s029_output/n100.r10.s029.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s029_output/n100.r10.s029.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s029_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s029_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s029_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 36958e06 (flow c159c17e): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s028_output\"\n        wget -O \"n100.r10.s028_output/n100.r10.s028.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s028_output/n100.r10.s028.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s028_output/n100.r10.s028.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s028_output/n100.r10.s028.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s028_output/n100.r10.s028.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s028_output/n100.r10.s028.reference.fas\" \"n100.r10.s028_output/n100.r10.s028.fq1.fastq\" \"n100.r10.s028_output/n100.r10.s028.fq2.fastq\" | samtools view -bS - > \"n100.r10.s028_output/n100.r10.s028.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s028_output/n100.r10.s028.untrimmed.sorted.bam\" \"n100.r10.s028_output/n100.r10.s028.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s028_output/n100.r10.s028.untrimmed.sorted.bam\" -b \"n100.r10.s028_output/n100.r10.s028.primers.bed\" -p \"n100.r10.s028_output/n100.r10.s028.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s028_output/n100.r10.s028.trimmed.sorted.bam\" \"n100.r10.s028_output/n100.r10.s028.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s028_output/n100.r10.s028.reference.fas\" \"n100.r10.s028_output/n100.r10.s028.trimmed.sorted.bam\" > \"n100.r10.s028_output/n100.r10.s028.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s028_output/n100.r10.s028.reference.fas\" --call-indels \"n100.r10.s028_output/n100.r10.s028.trimmed.sorted.bam\" > \"n100.r10.s028_output/n100.r10.s028.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s028_output/n100.r10.s028.trimmed.sorted.bam\" > \"n100.r10.s028_output/n100.r10.s028.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s028_output/n100.r10.s028.depth.txt\" \"n100.r10.s028_output/n100.r10.s028.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s028_output/n100.r10.s028.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s028_output/n100.r10.s028.reference.fas\" | bcftools consensus -m \"n100.r10.s028_output/n100.r10.s028.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s028_output/n100.r10.s028.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s028_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s028_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s028_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 96ccb3b6 (flow e4994f3d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s001_output\"\n        wget -O \"n100.r10.s001_output/n100.r10.s001.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s001_output/n100.r10.s001.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s001_output/n100.r10.s001.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s001_output/n100.r10.s001.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s001_output/n100.r10.s001.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s001_output/n100.r10.s001.reference.fas\" \"n100.r10.s001_output/n100.r10.s001.fq1.fastq\" \"n100.r10.s001_output/n100.r10.s001.fq2.fastq\" | samtools view -bS - > \"n100.r10.s001_output/n100.r10.s001.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s001_output/n100.r10.s001.untrimmed.sorted.bam\" \"n100.r10.s001_output/n100.r10.s001.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s001_output/n100.r10.s001.untrimmed.sorted.bam\" -b \"n100.r10.s001_output/n100.r10.s001.primers.bed\" -p \"n100.r10.s001_output/n100.r10.s001.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s001_output/n100.r10.s001.trimmed.sorted.bam\" \"n100.r10.s001_output/n100.r10.s001.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s001_output/n100.r10.s001.reference.fas\" \"n100.r10.s001_output/n100.r10.s001.trimmed.sorted.bam\" > \"n100.r10.s001_output/n100.r10.s001.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s001_output/n100.r10.s001.reference.fas\" --call-indels \"n100.r10.s001_output/n100.r10.s001.trimmed.sorted.bam\" > \"n100.r10.s001_output/n100.r10.s001.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s001_output/n100.r10.s001.trimmed.sorted.bam\" > \"n100.r10.s001_output/n100.r10.s001.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s001_output/n100.r10.s001.depth.txt\" \"n100.r10.s001_output/n100.r10.s001.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s001_output/n100.r10.s001.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s001_output/n100.r10.s001.reference.fas\" | bcftools consensus -m \"n100.r10.s001_output/n100.r10.s001.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s001_output/n100.r10.s001.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s001_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s001_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s001_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 847deec3 (flow 54b764b0): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s014_output\"\n        wget -O \"n100.r10.s014_output/n100.r10.s014.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s014_output/n100.r10.s014.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s014_output/n100.r10.s014.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s014_output/n100.r10.s014.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s014_output/n100.r10.s014.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s014_output/n100.r10.s014.reference.fas\" \"n100.r10.s014_output/n100.r10.s014.fq1.fastq\" \"n100.r10.s014_output/n100.r10.s014.fq2.fastq\" | samtools view -bS - > \"n100.r10.s014_output/n100.r10.s014.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s014_output/n100.r10.s014.untrimmed.sorted.bam\" \"n100.r10.s014_output/n100.r10.s014.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s014_output/n100.r10.s014.untrimmed.sorted.bam\" -b \"n100.r10.s014_output/n100.r10.s014.primers.bed\" -p \"n100.r10.s014_output/n100.r10.s014.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s014_output/n100.r10.s014.trimmed.sorted.bam\" \"n100.r10.s014_output/n100.r10.s014.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s014_output/n100.r10.s014.reference.fas\" \"n100.r10.s014_output/n100.r10.s014.trimmed.sorted.bam\" > \"n100.r10.s014_output/n100.r10.s014.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s014_output/n100.r10.s014.reference.fas\" --call-indels \"n100.r10.s014_output/n100.r10.s014.trimmed.sorted.bam\" > \"n100.r10.s014_output/n100.r10.s014.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s014_output/n100.r10.s014.trimmed.sorted.bam\" > \"n100.r10.s014_output/n100.r10.s014.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s014_output/n100.r10.s014.depth.txt\" \"n100.r10.s014_output/n100.r10.s014.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s014_output/n100.r10.s014.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s014_output/n100.r10.s014.reference.fas\" | bcftools consensus -m \"n100.r10.s014_output/n100.r10.s014.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s014_output/n100.r10.s014.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s014_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s014_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s014_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 26f77987 (flow 474e0149): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s064_output\"\n        wget -O \"n100.r10.s064_output/n100.r10.s064.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s064_output/n100.r10.s064.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s064_output/n100.r10.s064.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s064_output/n100.r10.s064.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s064_output/n100.r10.s064.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s064_output/n100.r10.s064.reference.fas\" \"n100.r10.s064_output/n100.r10.s064.fq1.fastq\" \"n100.r10.s064_output/n100.r10.s064.fq2.fastq\" | samtools view -bS - > \"n100.r10.s064_output/n100.r10.s064.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s064_output/n100.r10.s064.untrimmed.sorted.bam\" \"n100.r10.s064_output/n100.r10.s064.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s064_output/n100.r10.s064.untrimmed.sorted.bam\" -b \"n100.r10.s064_output/n100.r10.s064.primers.bed\" -p \"n100.r10.s064_output/n100.r10.s064.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s064_output/n100.r10.s064.trimmed.sorted.bam\" \"n100.r10.s064_output/n100.r10.s064.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s064_output/n100.r10.s064.reference.fas\" \"n100.r10.s064_output/n100.r10.s064.trimmed.sorted.bam\" > \"n100.r10.s064_output/n100.r10.s064.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s064_output/n100.r10.s064.reference.fas\" --call-indels \"n100.r10.s064_output/n100.r10.s064.trimmed.sorted.bam\" > \"n100.r10.s064_output/n100.r10.s064.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s064_output/n100.r10.s064.trimmed.sorted.bam\" > \"n100.r10.s064_output/n100.r10.s064.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s064_output/n100.r10.s064.depth.txt\" \"n100.r10.s064_output/n100.r10.s064.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s064_output/n100.r10.s064.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s064_output/n100.r10.s064.reference.fas\" | bcftools consensus -m \"n100.r10.s064_output/n100.r10.s064.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s064_output/n100.r10.s064.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s064_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s064_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s064_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 10b9639e (flow c2c3e971): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s040_output\"\n        wget -O \"n100.r10.s040_output/n100.r10.s040.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s040_output/n100.r10.s040.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s040_output/n100.r10.s040.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s040_output/n100.r10.s040.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s040_output/n100.r10.s040.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s040_output/n100.r10.s040.reference.fas\" \"n100.r10.s040_output/n100.r10.s040.fq1.fastq\" \"n100.r10.s040_output/n100.r10.s040.fq2.fastq\" | samtools view -bS - > \"n100.r10.s040_output/n100.r10.s040.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s040_output/n100.r10.s040.untrimmed.sorted.bam\" \"n100.r10.s040_output/n100.r10.s040.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s040_output/n100.r10.s040.untrimmed.sorted.bam\" -b \"n100.r10.s040_output/n100.r10.s040.primers.bed\" -p \"n100.r10.s040_output/n100.r10.s040.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s040_output/n100.r10.s040.trimmed.sorted.bam\" \"n100.r10.s040_output/n100.r10.s040.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s040_output/n100.r10.s040.reference.fas\" \"n100.r10.s040_output/n100.r10.s040.trimmed.sorted.bam\" > \"n100.r10.s040_output/n100.r10.s040.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s040_output/n100.r10.s040.reference.fas\" --call-indels \"n100.r10.s040_output/n100.r10.s040.trimmed.sorted.bam\" > \"n100.r10.s040_output/n100.r10.s040.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s040_output/n100.r10.s040.trimmed.sorted.bam\" > \"n100.r10.s040_output/n100.r10.s040.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s040_output/n100.r10.s040.depth.txt\" \"n100.r10.s040_output/n100.r10.s040.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s040_output/n100.r10.s040.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s040_output/n100.r10.s040.reference.fas\" | bcftools consensus -m \"n100.r10.s040_output/n100.r10.s040.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s040_output/n100.r10.s040.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s040_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s040_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s040_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 49b52cb8 (flow debb172b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s005_output\"\n        wget -O \"n100.r10.s005_output/n100.r10.s005.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s005_output/n100.r10.s005.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s005_output/n100.r10.s005.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s005_output/n100.r10.s005.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s005_output/n100.r10.s005.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s005_output/n100.r10.s005.reference.fas\" \"n100.r10.s005_output/n100.r10.s005.fq1.fastq\" \"n100.r10.s005_output/n100.r10.s005.fq2.fastq\" | samtools view -bS - > \"n100.r10.s005_output/n100.r10.s005.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s005_output/n100.r10.s005.untrimmed.sorted.bam\" \"n100.r10.s005_output/n100.r10.s005.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s005_output/n100.r10.s005.untrimmed.sorted.bam\" -b \"n100.r10.s005_output/n100.r10.s005.primers.bed\" -p \"n100.r10.s005_output/n100.r10.s005.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s005_output/n100.r10.s005.trimmed.sorted.bam\" \"n100.r10.s005_output/n100.r10.s005.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s005_output/n100.r10.s005.reference.fas\" \"n100.r10.s005_output/n100.r10.s005.trimmed.sorted.bam\" > \"n100.r10.s005_output/n100.r10.s005.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s005_output/n100.r10.s005.reference.fas\" --call-indels \"n100.r10.s005_output/n100.r10.s005.trimmed.sorted.bam\" > \"n100.r10.s005_output/n100.r10.s005.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s005_output/n100.r10.s005.trimmed.sorted.bam\" > \"n100.r10.s005_output/n100.r10.s005.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s005_output/n100.r10.s005.depth.txt\" \"n100.r10.s005_output/n100.r10.s005.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s005_output/n100.r10.s005.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s005_output/n100.r10.s005.reference.fas\" | bcftools consensus -m \"n100.r10.s005_output/n100.r10.s005.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s005_output/n100.r10.s005.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s005_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s005_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s005_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task a510cb24 (flow 1bfcc9a2): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s047_output\"\n        wget -O \"n100.r10.s047_output/n100.r10.s047.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s047_output/n100.r10.s047.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s047_output/n100.r10.s047.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s047_output/n100.r10.s047.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s047_output/n100.r10.s047.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s047_output/n100.r10.s047.reference.fas\" \"n100.r10.s047_output/n100.r10.s047.fq1.fastq\" \"n100.r10.s047_output/n100.r10.s047.fq2.fastq\" | samtools view -bS - > \"n100.r10.s047_output/n100.r10.s047.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s047_output/n100.r10.s047.untrimmed.sorted.bam\" \"n100.r10.s047_output/n100.r10.s047.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s047_output/n100.r10.s047.untrimmed.sorted.bam\" -b \"n100.r10.s047_output/n100.r10.s047.primers.bed\" -p \"n100.r10.s047_output/n100.r10.s047.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s047_output/n100.r10.s047.trimmed.sorted.bam\" \"n100.r10.s047_output/n100.r10.s047.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s047_output/n100.r10.s047.reference.fas\" \"n100.r10.s047_output/n100.r10.s047.trimmed.sorted.bam\" > \"n100.r10.s047_output/n100.r10.s047.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s047_output/n100.r10.s047.reference.fas\" --call-indels \"n100.r10.s047_output/n100.r10.s047.trimmed.sorted.bam\" > \"n100.r10.s047_output/n100.r10.s047.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s047_output/n100.r10.s047.trimmed.sorted.bam\" > \"n100.r10.s047_output/n100.r10.s047.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s047_output/n100.r10.s047.depth.txt\" \"n100.r10.s047_output/n100.r10.s047.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s047_output/n100.r10.s047.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s047_output/n100.r10.s047.reference.fas\" | bcftools consensus -m \"n100.r10.s047_output/n100.r10.s047.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s047_output/n100.r10.s047.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s047_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s047_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s047_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 63cda6a4 (flow 20c10487): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s037_output\"\n        wget -O \"n100.r10.s037_output/n100.r10.s037.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s037_output/n100.r10.s037.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s037_output/n100.r10.s037.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s037_output/n100.r10.s037.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s037_output/n100.r10.s037.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s037_output/n100.r10.s037.reference.fas\" \"n100.r10.s037_output/n100.r10.s037.fq1.fastq\" \"n100.r10.s037_output/n100.r10.s037.fq2.fastq\" | samtools view -bS - > \"n100.r10.s037_output/n100.r10.s037.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s037_output/n100.r10.s037.untrimmed.sorted.bam\" \"n100.r10.s037_output/n100.r10.s037.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s037_output/n100.r10.s037.untrimmed.sorted.bam\" -b \"n100.r10.s037_output/n100.r10.s037.primers.bed\" -p \"n100.r10.s037_output/n100.r10.s037.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s037_output/n100.r10.s037.trimmed.sorted.bam\" \"n100.r10.s037_output/n100.r10.s037.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s037_output/n100.r10.s037.reference.fas\" \"n100.r10.s037_output/n100.r10.s037.trimmed.sorted.bam\" > \"n100.r10.s037_output/n100.r10.s037.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s037_output/n100.r10.s037.reference.fas\" --call-indels \"n100.r10.s037_output/n100.r10.s037.trimmed.sorted.bam\" > \"n100.r10.s037_output/n100.r10.s037.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s037_output/n100.r10.s037.trimmed.sorted.bam\" > \"n100.r10.s037_output/n100.r10.s037.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s037_output/n100.r10.s037.depth.txt\" \"n100.r10.s037_output/n100.r10.s037.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s037_output/n100.r10.s037.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s037_output/n100.r10.s037.reference.fas\" | bcftools consensus -m \"n100.r10.s037_output/n100.r10.s037.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s037_output/n100.r10.s037.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s037_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s037_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s037_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 834ab569 (flow 9a69f4b2): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s087_output\"\n        wget -O \"n100.r10.s087_output/n100.r10.s087.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s087_output/n100.r10.s087.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s087_output/n100.r10.s087.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s087_output/n100.r10.s087.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s087_output/n100.r10.s087.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s087_output/n100.r10.s087.reference.fas\" \"n100.r10.s087_output/n100.r10.s087.fq1.fastq\" \"n100.r10.s087_output/n100.r10.s087.fq2.fastq\" | samtools view -bS - > \"n100.r10.s087_output/n100.r10.s087.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s087_output/n100.r10.s087.untrimmed.sorted.bam\" \"n100.r10.s087_output/n100.r10.s087.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s087_output/n100.r10.s087.untrimmed.sorted.bam\" -b \"n100.r10.s087_output/n100.r10.s087.primers.bed\" -p \"n100.r10.s087_output/n100.r10.s087.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s087_output/n100.r10.s087.trimmed.sorted.bam\" \"n100.r10.s087_output/n100.r10.s087.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s087_output/n100.r10.s087.reference.fas\" \"n100.r10.s087_output/n100.r10.s087.trimmed.sorted.bam\" > \"n100.r10.s087_output/n100.r10.s087.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s087_output/n100.r10.s087.reference.fas\" --call-indels \"n100.r10.s087_output/n100.r10.s087.trimmed.sorted.bam\" > \"n100.r10.s087_output/n100.r10.s087.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s087_output/n100.r10.s087.trimmed.sorted.bam\" > \"n100.r10.s087_output/n100.r10.s087.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s087_output/n100.r10.s087.depth.txt\" \"n100.r10.s087_output/n100.r10.s087.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s087_output/n100.r10.s087.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s087_output/n100.r10.s087.reference.fas\" | bcftools consensus -m \"n100.r10.s087_output/n100.r10.s087.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s087_output/n100.r10.s087.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s087_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s087_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s087_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 207ede7a (flow 23b67a6f): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s082_output\"\n        wget -O \"n100.r10.s082_output/n100.r10.s082.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s082_output/n100.r10.s082.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s082_output/n100.r10.s082.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s082_output/n100.r10.s082.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s082_output/n100.r10.s082.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s082_output/n100.r10.s082.reference.fas\" \"n100.r10.s082_output/n100.r10.s082.fq1.fastq\" \"n100.r10.s082_output/n100.r10.s082.fq2.fastq\" | samtools view -bS - > \"n100.r10.s082_output/n100.r10.s082.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s082_output/n100.r10.s082.untrimmed.sorted.bam\" \"n100.r10.s082_output/n100.r10.s082.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s082_output/n100.r10.s082.untrimmed.sorted.bam\" -b \"n100.r10.s082_output/n100.r10.s082.primers.bed\" -p \"n100.r10.s082_output/n100.r10.s082.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s082_output/n100.r10.s082.trimmed.sorted.bam\" \"n100.r10.s082_output/n100.r10.s082.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s082_output/n100.r10.s082.reference.fas\" \"n100.r10.s082_output/n100.r10.s082.trimmed.sorted.bam\" > \"n100.r10.s082_output/n100.r10.s082.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s082_output/n100.r10.s082.reference.fas\" --call-indels \"n100.r10.s082_output/n100.r10.s082.trimmed.sorted.bam\" > \"n100.r10.s082_output/n100.r10.s082.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s082_output/n100.r10.s082.trimmed.sorted.bam\" > \"n100.r10.s082_output/n100.r10.s082.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s082_output/n100.r10.s082.depth.txt\" \"n100.r10.s082_output/n100.r10.s082.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s082_output/n100.r10.s082.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s082_output/n100.r10.s082.reference.fas\" | bcftools consensus -m \"n100.r10.s082_output/n100.r10.s082.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s082_output/n100.r10.s082.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s082_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s082_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s082_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 3d965a50 (flow 14c2b5b4): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s031_output\"\n        wget -O \"n100.r10.s031_output/n100.r10.s031.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s031_output/n100.r10.s031.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s031_output/n100.r10.s031.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s031_output/n100.r10.s031.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s031_output/n100.r10.s031.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s031_output/n100.r10.s031.reference.fas\" \"n100.r10.s031_output/n100.r10.s031.fq1.fastq\" \"n100.r10.s031_output/n100.r10.s031.fq2.fastq\" | samtools view -bS - > \"n100.r10.s031_output/n100.r10.s031.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s031_output/n100.r10.s031.untrimmed.sorted.bam\" \"n100.r10.s031_output/n100.r10.s031.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s031_output/n100.r10.s031.untrimmed.sorted.bam\" -b \"n100.r10.s031_output/n100.r10.s031.primers.bed\" -p \"n100.r10.s031_output/n100.r10.s031.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s031_output/n100.r10.s031.trimmed.sorted.bam\" \"n100.r10.s031_output/n100.r10.s031.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s031_output/n100.r10.s031.reference.fas\" \"n100.r10.s031_output/n100.r10.s031.trimmed.sorted.bam\" > \"n100.r10.s031_output/n100.r10.s031.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s031_output/n100.r10.s031.reference.fas\" --call-indels \"n100.r10.s031_output/n100.r10.s031.trimmed.sorted.bam\" > \"n100.r10.s031_output/n100.r10.s031.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s031_output/n100.r10.s031.trimmed.sorted.bam\" > \"n100.r10.s031_output/n100.r10.s031.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s031_output/n100.r10.s031.depth.txt\" \"n100.r10.s031_output/n100.r10.s031.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s031_output/n100.r10.s031.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s031_output/n100.r10.s031.reference.fas\" | bcftools consensus -m \"n100.r10.s031_output/n100.r10.s031.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s031_output/n100.r10.s031.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s031_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s031_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s031_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task c0a2340c (flow 0d3cc969): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s026_output\"\n        wget -O \"n100.r10.s026_output/n100.r10.s026.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s026_output/n100.r10.s026.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s026_output/n100.r10.s026.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s026_output/n100.r10.s026.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s026_output/n100.r10.s026.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s026_output/n100.r10.s026.reference.fas\" \"n100.r10.s026_output/n100.r10.s026.fq1.fastq\" \"n100.r10.s026_output/n100.r10.s026.fq2.fastq\" | samtools view -bS - > \"n100.r10.s026_output/n100.r10.s026.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s026_output/n100.r10.s026.untrimmed.sorted.bam\" \"n100.r10.s026_output/n100.r10.s026.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s026_output/n100.r10.s026.untrimmed.sorted.bam\" -b \"n100.r10.s026_output/n100.r10.s026.primers.bed\" -p \"n100.r10.s026_output/n100.r10.s026.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s026_output/n100.r10.s026.trimmed.sorted.bam\" \"n100.r10.s026_output/n100.r10.s026.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s026_output/n100.r10.s026.reference.fas\" \"n100.r10.s026_output/n100.r10.s026.trimmed.sorted.bam\" > \"n100.r10.s026_output/n100.r10.s026.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s026_output/n100.r10.s026.reference.fas\" --call-indels \"n100.r10.s026_output/n100.r10.s026.trimmed.sorted.bam\" > \"n100.r10.s026_output/n100.r10.s026.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s026_output/n100.r10.s026.trimmed.sorted.bam\" > \"n100.r10.s026_output/n100.r10.s026.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s026_output/n100.r10.s026.depth.txt\" \"n100.r10.s026_output/n100.r10.s026.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s026_output/n100.r10.s026.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s026_output/n100.r10.s026.reference.fas\" | bcftools consensus -m \"n100.r10.s026_output/n100.r10.s026.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s026_output/n100.r10.s026.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s026_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s026_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s026_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 5e6ba1c1 (flow 1575ea23): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s070_output\"\n        wget -O \"n100.r10.s070_output/n100.r10.s070.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s070_output/n100.r10.s070.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s070_output/n100.r10.s070.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s070_output/n100.r10.s070.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s070_output/n100.r10.s070.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s070_output/n100.r10.s070.reference.fas\" \"n100.r10.s070_output/n100.r10.s070.fq1.fastq\" \"n100.r10.s070_output/n100.r10.s070.fq2.fastq\" | samtools view -bS - > \"n100.r10.s070_output/n100.r10.s070.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s070_output/n100.r10.s070.untrimmed.sorted.bam\" \"n100.r10.s070_output/n100.r10.s070.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s070_output/n100.r10.s070.untrimmed.sorted.bam\" -b \"n100.r10.s070_output/n100.r10.s070.primers.bed\" -p \"n100.r10.s070_output/n100.r10.s070.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s070_output/n100.r10.s070.trimmed.sorted.bam\" \"n100.r10.s070_output/n100.r10.s070.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s070_output/n100.r10.s070.reference.fas\" \"n100.r10.s070_output/n100.r10.s070.trimmed.sorted.bam\" > \"n100.r10.s070_output/n100.r10.s070.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s070_output/n100.r10.s070.reference.fas\" --call-indels \"n100.r10.s070_output/n100.r10.s070.trimmed.sorted.bam\" > \"n100.r10.s070_output/n100.r10.s070.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s070_output/n100.r10.s070.trimmed.sorted.bam\" > \"n100.r10.s070_output/n100.r10.s070.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s070_output/n100.r10.s070.depth.txt\" \"n100.r10.s070_output/n100.r10.s070.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s070_output/n100.r10.s070.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s070_output/n100.r10.s070.reference.fas\" | bcftools consensus -m \"n100.r10.s070_output/n100.r10.s070.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s070_output/n100.r10.s070.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s070_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s070_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s070_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 41e319db (flow 0f0a0edb): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s086_output\"\n        wget -O \"n100.r10.s086_output/n100.r10.s086.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s086_output/n100.r10.s086.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s086_output/n100.r10.s086.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s086_output/n100.r10.s086.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s086_output/n100.r10.s086.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s086_output/n100.r10.s086.reference.fas\" \"n100.r10.s086_output/n100.r10.s086.fq1.fastq\" \"n100.r10.s086_output/n100.r10.s086.fq2.fastq\" | samtools view -bS - > \"n100.r10.s086_output/n100.r10.s086.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s086_output/n100.r10.s086.untrimmed.sorted.bam\" \"n100.r10.s086_output/n100.r10.s086.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s086_output/n100.r10.s086.untrimmed.sorted.bam\" -b \"n100.r10.s086_output/n100.r10.s086.primers.bed\" -p \"n100.r10.s086_output/n100.r10.s086.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s086_output/n100.r10.s086.trimmed.sorted.bam\" \"n100.r10.s086_output/n100.r10.s086.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s086_output/n100.r10.s086.reference.fas\" \"n100.r10.s086_output/n100.r10.s086.trimmed.sorted.bam\" > \"n100.r10.s086_output/n100.r10.s086.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s086_output/n100.r10.s086.reference.fas\" --call-indels \"n100.r10.s086_output/n100.r10.s086.trimmed.sorted.bam\" > \"n100.r10.s086_output/n100.r10.s086.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s086_output/n100.r10.s086.trimmed.sorted.bam\" > \"n100.r10.s086_output/n100.r10.s086.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s086_output/n100.r10.s086.depth.txt\" \"n100.r10.s086_output/n100.r10.s086.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s086_output/n100.r10.s086.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s086_output/n100.r10.s086.reference.fas\" | bcftools consensus -m \"n100.r10.s086_output/n100.r10.s086.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s086_output/n100.r10.s086.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s086_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s086_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s086_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 53abe90b (flow df4d82f6): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s013_output\"\n        wget -O \"n100.r10.s013_output/n100.r10.s013.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s013_output/n100.r10.s013.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s013_output/n100.r10.s013.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s013_output/n100.r10.s013.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s013_output/n100.r10.s013.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s013_output/n100.r10.s013.reference.fas\" \"n100.r10.s013_output/n100.r10.s013.fq1.fastq\" \"n100.r10.s013_output/n100.r10.s013.fq2.fastq\" | samtools view -bS - > \"n100.r10.s013_output/n100.r10.s013.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s013_output/n100.r10.s013.untrimmed.sorted.bam\" \"n100.r10.s013_output/n100.r10.s013.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s013_output/n100.r10.s013.untrimmed.sorted.bam\" -b \"n100.r10.s013_output/n100.r10.s013.primers.bed\" -p \"n100.r10.s013_output/n100.r10.s013.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s013_output/n100.r10.s013.trimmed.sorted.bam\" \"n100.r10.s013_output/n100.r10.s013.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s013_output/n100.r10.s013.reference.fas\" \"n100.r10.s013_output/n100.r10.s013.trimmed.sorted.bam\" > \"n100.r10.s013_output/n100.r10.s013.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s013_output/n100.r10.s013.reference.fas\" --call-indels \"n100.r10.s013_output/n100.r10.s013.trimmed.sorted.bam\" > \"n100.r10.s013_output/n100.r10.s013.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s013_output/n100.r10.s013.trimmed.sorted.bam\" > \"n100.r10.s013_output/n100.r10.s013.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s013_output/n100.r10.s013.depth.txt\" \"n100.r10.s013_output/n100.r10.s013.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s013_output/n100.r10.s013.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s013_output/n100.r10.s013.reference.fas\" | bcftools consensus -m \"n100.r10.s013_output/n100.r10.s013.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s013_output/n100.r10.s013.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s013_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s013_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s013_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 8c3a26a2 (flow 63d125fa): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s017_output\"\n        wget -O \"n100.r10.s017_output/n100.r10.s017.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s017_output/n100.r10.s017.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s017_output/n100.r10.s017.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s017_output/n100.r10.s017.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s017_output/n100.r10.s017.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s017_output/n100.r10.s017.reference.fas\" \"n100.r10.s017_output/n100.r10.s017.fq1.fastq\" \"n100.r10.s017_output/n100.r10.s017.fq2.fastq\" | samtools view -bS - > \"n100.r10.s017_output/n100.r10.s017.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s017_output/n100.r10.s017.untrimmed.sorted.bam\" \"n100.r10.s017_output/n100.r10.s017.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s017_output/n100.r10.s017.untrimmed.sorted.bam\" -b \"n100.r10.s017_output/n100.r10.s017.primers.bed\" -p \"n100.r10.s017_output/n100.r10.s017.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s017_output/n100.r10.s017.trimmed.sorted.bam\" \"n100.r10.s017_output/n100.r10.s017.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s017_output/n100.r10.s017.reference.fas\" \"n100.r10.s017_output/n100.r10.s017.trimmed.sorted.bam\" > \"n100.r10.s017_output/n100.r10.s017.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s017_output/n100.r10.s017.reference.fas\" --call-indels \"n100.r10.s017_output/n100.r10.s017.trimmed.sorted.bam\" > \"n100.r10.s017_output/n100.r10.s017.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s017_output/n100.r10.s017.trimmed.sorted.bam\" > \"n100.r10.s017_output/n100.r10.s017.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s017_output/n100.r10.s017.depth.txt\" \"n100.r10.s017_output/n100.r10.s017.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s017_output/n100.r10.s017.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s017_output/n100.r10.s017.reference.fas\" | bcftools consensus -m \"n100.r10.s017_output/n100.r10.s017.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s017_output/n100.r10.s017.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s017_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s017_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s017_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 277a5fa1 (flow abe7077c): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s010_output\"\n        wget -O \"n100.r10.s010_output/n100.r10.s010.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s010_output/n100.r10.s010.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s010_output/n100.r10.s010.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s010_output/n100.r10.s010.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s010_output/n100.r10.s010.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s010_output/n100.r10.s010.reference.fas\" \"n100.r10.s010_output/n100.r10.s010.fq1.fastq\" \"n100.r10.s010_output/n100.r10.s010.fq2.fastq\" | samtools view -bS - > \"n100.r10.s010_output/n100.r10.s010.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s010_output/n100.r10.s010.untrimmed.sorted.bam\" \"n100.r10.s010_output/n100.r10.s010.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s010_output/n100.r10.s010.untrimmed.sorted.bam\" -b \"n100.r10.s010_output/n100.r10.s010.primers.bed\" -p \"n100.r10.s010_output/n100.r10.s010.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s010_output/n100.r10.s010.trimmed.sorted.bam\" \"n100.r10.s010_output/n100.r10.s010.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s010_output/n100.r10.s010.reference.fas\" \"n100.r10.s010_output/n100.r10.s010.trimmed.sorted.bam\" > \"n100.r10.s010_output/n100.r10.s010.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s010_output/n100.r10.s010.reference.fas\" --call-indels \"n100.r10.s010_output/n100.r10.s010.trimmed.sorted.bam\" > \"n100.r10.s010_output/n100.r10.s010.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s010_output/n100.r10.s010.trimmed.sorted.bam\" > \"n100.r10.s010_output/n100.r10.s010.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s010_output/n100.r10.s010.depth.txt\" \"n100.r10.s010_output/n100.r10.s010.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s010_output/n100.r10.s010.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s010_output/n100.r10.s010.reference.fas\" | bcftools consensus -m \"n100.r10.s010_output/n100.r10.s010.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s010_output/n100.r10.s010.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s010_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s010_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s010_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 0df65054 (flow 91cbe899): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s035_output\"\n        wget -O \"n100.r10.s035_output/n100.r10.s035.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s035_output/n100.r10.s035.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s035_output/n100.r10.s035.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s035_output/n100.r10.s035.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s035_output/n100.r10.s035.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s035_output/n100.r10.s035.reference.fas\" \"n100.r10.s035_output/n100.r10.s035.fq1.fastq\" \"n100.r10.s035_output/n100.r10.s035.fq2.fastq\" | samtools view -bS - > \"n100.r10.s035_output/n100.r10.s035.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s035_output/n100.r10.s035.untrimmed.sorted.bam\" \"n100.r10.s035_output/n100.r10.s035.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s035_output/n100.r10.s035.untrimmed.sorted.bam\" -b \"n100.r10.s035_output/n100.r10.s035.primers.bed\" -p \"n100.r10.s035_output/n100.r10.s035.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s035_output/n100.r10.s035.trimmed.sorted.bam\" \"n100.r10.s035_output/n100.r10.s035.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s035_output/n100.r10.s035.reference.fas\" \"n100.r10.s035_output/n100.r10.s035.trimmed.sorted.bam\" > \"n100.r10.s035_output/n100.r10.s035.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s035_output/n100.r10.s035.reference.fas\" --call-indels \"n100.r10.s035_output/n100.r10.s035.trimmed.sorted.bam\" > \"n100.r10.s035_output/n100.r10.s035.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s035_output/n100.r10.s035.trimmed.sorted.bam\" > \"n100.r10.s035_output/n100.r10.s035.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s035_output/n100.r10.s035.depth.txt\" \"n100.r10.s035_output/n100.r10.s035.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s035_output/n100.r10.s035.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s035_output/n100.r10.s035.reference.fas\" | bcftools consensus -m \"n100.r10.s035_output/n100.r10.s035.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s035_output/n100.r10.s035.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s035_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s035_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s035_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 51fe96bf (flow 1f86a397): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s066_output\"\n        wget -O \"n100.r10.s066_output/n100.r10.s066.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s066_output/n100.r10.s066.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s066_output/n100.r10.s066.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s066_output/n100.r10.s066.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s066_output/n100.r10.s066.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s066_output/n100.r10.s066.reference.fas\" \"n100.r10.s066_output/n100.r10.s066.fq1.fastq\" \"n100.r10.s066_output/n100.r10.s066.fq2.fastq\" | samtools view -bS - > \"n100.r10.s066_output/n100.r10.s066.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s066_output/n100.r10.s066.untrimmed.sorted.bam\" \"n100.r10.s066_output/n100.r10.s066.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s066_output/n100.r10.s066.untrimmed.sorted.bam\" -b \"n100.r10.s066_output/n100.r10.s066.primers.bed\" -p \"n100.r10.s066_output/n100.r10.s066.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s066_output/n100.r10.s066.trimmed.sorted.bam\" \"n100.r10.s066_output/n100.r10.s066.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s066_output/n100.r10.s066.reference.fas\" \"n100.r10.s066_output/n100.r10.s066.trimmed.sorted.bam\" > \"n100.r10.s066_output/n100.r10.s066.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s066_output/n100.r10.s066.reference.fas\" --call-indels \"n100.r10.s066_output/n100.r10.s066.trimmed.sorted.bam\" > \"n100.r10.s066_output/n100.r10.s066.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s066_output/n100.r10.s066.trimmed.sorted.bam\" > \"n100.r10.s066_output/n100.r10.s066.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s066_output/n100.r10.s066.depth.txt\" \"n100.r10.s066_output/n100.r10.s066.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s066_output/n100.r10.s066.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s066_output/n100.r10.s066.reference.fas\" | bcftools consensus -m \"n100.r10.s066_output/n100.r10.s066.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s066_output/n100.r10.s066.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s066_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s066_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s066_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 3a2d4435 (flow 8e8257f7): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s004_output\"\n        wget -O \"n100.r10.s004_output/n100.r10.s004.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s004_output/n100.r10.s004.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s004_output/n100.r10.s004.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s004_output/n100.r10.s004.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s004_output/n100.r10.s004.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s004_output/n100.r10.s004.reference.fas\" \"n100.r10.s004_output/n100.r10.s004.fq1.fastq\" \"n100.r10.s004_output/n100.r10.s004.fq2.fastq\" | samtools view -bS - > \"n100.r10.s004_output/n100.r10.s004.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s004_output/n100.r10.s004.untrimmed.sorted.bam\" \"n100.r10.s004_output/n100.r10.s004.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s004_output/n100.r10.s004.untrimmed.sorted.bam\" -b \"n100.r10.s004_output/n100.r10.s004.primers.bed\" -p \"n100.r10.s004_output/n100.r10.s004.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s004_output/n100.r10.s004.trimmed.sorted.bam\" \"n100.r10.s004_output/n100.r10.s004.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s004_output/n100.r10.s004.reference.fas\" \"n100.r10.s004_output/n100.r10.s004.trimmed.sorted.bam\" > \"n100.r10.s004_output/n100.r10.s004.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s004_output/n100.r10.s004.reference.fas\" --call-indels \"n100.r10.s004_output/n100.r10.s004.trimmed.sorted.bam\" > \"n100.r10.s004_output/n100.r10.s004.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s004_output/n100.r10.s004.trimmed.sorted.bam\" > \"n100.r10.s004_output/n100.r10.s004.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s004_output/n100.r10.s004.depth.txt\" \"n100.r10.s004_output/n100.r10.s004.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s004_output/n100.r10.s004.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s004_output/n100.r10.s004.reference.fas\" | bcftools consensus -m \"n100.r10.s004_output/n100.r10.s004.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s004_output/n100.r10.s004.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s004_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s004_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s004_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task f44a16a1 (flow d1275b24): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s095_output\"\n        wget -O \"n100.r10.s095_output/n100.r10.s095.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s095_output/n100.r10.s095.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s095_output/n100.r10.s095.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s095_output/n100.r10.s095.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s095_output/n100.r10.s095.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s095_output/n100.r10.s095.reference.fas\" \"n100.r10.s095_output/n100.r10.s095.fq1.fastq\" \"n100.r10.s095_output/n100.r10.s095.fq2.fastq\" | samtools view -bS - > \"n100.r10.s095_output/n100.r10.s095.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s095_output/n100.r10.s095.untrimmed.sorted.bam\" \"n100.r10.s095_output/n100.r10.s095.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s095_output/n100.r10.s095.untrimmed.sorted.bam\" -b \"n100.r10.s095_output/n100.r10.s095.primers.bed\" -p \"n100.r10.s095_output/n100.r10.s095.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s095_output/n100.r10.s095.trimmed.sorted.bam\" \"n100.r10.s095_output/n100.r10.s095.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s095_output/n100.r10.s095.reference.fas\" \"n100.r10.s095_output/n100.r10.s095.trimmed.sorted.bam\" > \"n100.r10.s095_output/n100.r10.s095.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s095_output/n100.r10.s095.reference.fas\" --call-indels \"n100.r10.s095_output/n100.r10.s095.trimmed.sorted.bam\" > \"n100.r10.s095_output/n100.r10.s095.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s095_output/n100.r10.s095.trimmed.sorted.bam\" > \"n100.r10.s095_output/n100.r10.s095.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s095_output/n100.r10.s095.depth.txt\" \"n100.r10.s095_output/n100.r10.s095.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s095_output/n100.r10.s095.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s095_output/n100.r10.s095.reference.fas\" | bcftools consensus -m \"n100.r10.s095_output/n100.r10.s095.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s095_output/n100.r10.s095.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s095_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s095_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s095_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 3ee5fbc0 (flow c6d532f3): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s032_output\"\n        wget -O \"n100.r10.s032_output/n100.r10.s032.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s032_output/n100.r10.s032.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s032_output/n100.r10.s032.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s032_output/n100.r10.s032.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s032_output/n100.r10.s032.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s032_output/n100.r10.s032.reference.fas\" \"n100.r10.s032_output/n100.r10.s032.fq1.fastq\" \"n100.r10.s032_output/n100.r10.s032.fq2.fastq\" | samtools view -bS - > \"n100.r10.s032_output/n100.r10.s032.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s032_output/n100.r10.s032.untrimmed.sorted.bam\" \"n100.r10.s032_output/n100.r10.s032.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s032_output/n100.r10.s032.untrimmed.sorted.bam\" -b \"n100.r10.s032_output/n100.r10.s032.primers.bed\" -p \"n100.r10.s032_output/n100.r10.s032.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s032_output/n100.r10.s032.trimmed.sorted.bam\" \"n100.r10.s032_output/n100.r10.s032.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s032_output/n100.r10.s032.reference.fas\" \"n100.r10.s032_output/n100.r10.s032.trimmed.sorted.bam\" > \"n100.r10.s032_output/n100.r10.s032.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s032_output/n100.r10.s032.reference.fas\" --call-indels \"n100.r10.s032_output/n100.r10.s032.trimmed.sorted.bam\" > \"n100.r10.s032_output/n100.r10.s032.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s032_output/n100.r10.s032.trimmed.sorted.bam\" > \"n100.r10.s032_output/n100.r10.s032.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s032_output/n100.r10.s032.depth.txt\" \"n100.r10.s032_output/n100.r10.s032.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s032_output/n100.r10.s032.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s032_output/n100.r10.s032.reference.fas\" | bcftools consensus -m \"n100.r10.s032_output/n100.r10.s032.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s032_output/n100.r10.s032.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s032_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s032_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s032_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task c33b1ab5 (flow c0e27ff9): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s030_output\"\n        wget -O \"n100.r10.s030_output/n100.r10.s030.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s030_output/n100.r10.s030.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s030_output/n100.r10.s030.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s030_output/n100.r10.s030.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s030_output/n100.r10.s030.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s030_output/n100.r10.s030.reference.fas\" \"n100.r10.s030_output/n100.r10.s030.fq1.fastq\" \"n100.r10.s030_output/n100.r10.s030.fq2.fastq\" | samtools view -bS - > \"n100.r10.s030_output/n100.r10.s030.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s030_output/n100.r10.s030.untrimmed.sorted.bam\" \"n100.r10.s030_output/n100.r10.s030.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s030_output/n100.r10.s030.untrimmed.sorted.bam\" -b \"n100.r10.s030_output/n100.r10.s030.primers.bed\" -p \"n100.r10.s030_output/n100.r10.s030.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s030_output/n100.r10.s030.trimmed.sorted.bam\" \"n100.r10.s030_output/n100.r10.s030.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s030_output/n100.r10.s030.reference.fas\" \"n100.r10.s030_output/n100.r10.s030.trimmed.sorted.bam\" > \"n100.r10.s030_output/n100.r10.s030.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s030_output/n100.r10.s030.reference.fas\" --call-indels \"n100.r10.s030_output/n100.r10.s030.trimmed.sorted.bam\" > \"n100.r10.s030_output/n100.r10.s030.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s030_output/n100.r10.s030.trimmed.sorted.bam\" > \"n100.r10.s030_output/n100.r10.s030.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s030_output/n100.r10.s030.depth.txt\" \"n100.r10.s030_output/n100.r10.s030.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s030_output/n100.r10.s030.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s030_output/n100.r10.s030.reference.fas\" | bcftools consensus -m \"n100.r10.s030_output/n100.r10.s030.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s030_output/n100.r10.s030.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s030_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s030_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s030_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task bc1a220d (flow 5b1cd59e): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s044_output\"\n        wget -O \"n100.r10.s044_output/n100.r10.s044.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s044_output/n100.r10.s044.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s044_output/n100.r10.s044.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s044_output/n100.r10.s044.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s044_output/n100.r10.s044.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s044_output/n100.r10.s044.reference.fas\" \"n100.r10.s044_output/n100.r10.s044.fq1.fastq\" \"n100.r10.s044_output/n100.r10.s044.fq2.fastq\" | samtools view -bS - > \"n100.r10.s044_output/n100.r10.s044.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s044_output/n100.r10.s044.untrimmed.sorted.bam\" \"n100.r10.s044_output/n100.r10.s044.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s044_output/n100.r10.s044.untrimmed.sorted.bam\" -b \"n100.r10.s044_output/n100.r10.s044.primers.bed\" -p \"n100.r10.s044_output/n100.r10.s044.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s044_output/n100.r10.s044.trimmed.sorted.bam\" \"n100.r10.s044_output/n100.r10.s044.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s044_output/n100.r10.s044.reference.fas\" \"n100.r10.s044_output/n100.r10.s044.trimmed.sorted.bam\" > \"n100.r10.s044_output/n100.r10.s044.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s044_output/n100.r10.s044.reference.fas\" --call-indels \"n100.r10.s044_output/n100.r10.s044.trimmed.sorted.bam\" > \"n100.r10.s044_output/n100.r10.s044.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s044_output/n100.r10.s044.trimmed.sorted.bam\" > \"n100.r10.s044_output/n100.r10.s044.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s044_output/n100.r10.s044.depth.txt\" \"n100.r10.s044_output/n100.r10.s044.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s044_output/n100.r10.s044.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s044_output/n100.r10.s044.reference.fas\" | bcftools consensus -m \"n100.r10.s044_output/n100.r10.s044.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s044_output/n100.r10.s044.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s044_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s044_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s044_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task e8c8e808 (flow 5077aef2): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s025_output\"\n        wget -O \"n100.r10.s025_output/n100.r10.s025.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s025_output/n100.r10.s025.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s025_output/n100.r10.s025.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s025_output/n100.r10.s025.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s025_output/n100.r10.s025.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s025_output/n100.r10.s025.reference.fas\" \"n100.r10.s025_output/n100.r10.s025.fq1.fastq\" \"n100.r10.s025_output/n100.r10.s025.fq2.fastq\" | samtools view -bS - > \"n100.r10.s025_output/n100.r10.s025.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s025_output/n100.r10.s025.untrimmed.sorted.bam\" \"n100.r10.s025_output/n100.r10.s025.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s025_output/n100.r10.s025.untrimmed.sorted.bam\" -b \"n100.r10.s025_output/n100.r10.s025.primers.bed\" -p \"n100.r10.s025_output/n100.r10.s025.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s025_output/n100.r10.s025.trimmed.sorted.bam\" \"n100.r10.s025_output/n100.r10.s025.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s025_output/n100.r10.s025.reference.fas\" \"n100.r10.s025_output/n100.r10.s025.trimmed.sorted.bam\" > \"n100.r10.s025_output/n100.r10.s025.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s025_output/n100.r10.s025.reference.fas\" --call-indels \"n100.r10.s025_output/n100.r10.s025.trimmed.sorted.bam\" > \"n100.r10.s025_output/n100.r10.s025.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s025_output/n100.r10.s025.trimmed.sorted.bam\" > \"n100.r10.s025_output/n100.r10.s025.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s025_output/n100.r10.s025.depth.txt\" \"n100.r10.s025_output/n100.r10.s025.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s025_output/n100.r10.s025.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s025_output/n100.r10.s025.reference.fas\" | bcftools consensus -m \"n100.r10.s025_output/n100.r10.s025.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s025_output/n100.r10.s025.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s025_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s025_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s025_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 2139bff7 (flow d781b4f4): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s034_output\"\n        wget -O \"n100.r10.s034_output/n100.r10.s034.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s034_output/n100.r10.s034.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s034_output/n100.r10.s034.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s034_output/n100.r10.s034.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s034_output/n100.r10.s034.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s034_output/n100.r10.s034.reference.fas\" \"n100.r10.s034_output/n100.r10.s034.fq1.fastq\" \"n100.r10.s034_output/n100.r10.s034.fq2.fastq\" | samtools view -bS - > \"n100.r10.s034_output/n100.r10.s034.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s034_output/n100.r10.s034.untrimmed.sorted.bam\" \"n100.r10.s034_output/n100.r10.s034.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s034_output/n100.r10.s034.untrimmed.sorted.bam\" -b \"n100.r10.s034_output/n100.r10.s034.primers.bed\" -p \"n100.r10.s034_output/n100.r10.s034.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s034_output/n100.r10.s034.trimmed.sorted.bam\" \"n100.r10.s034_output/n100.r10.s034.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s034_output/n100.r10.s034.reference.fas\" \"n100.r10.s034_output/n100.r10.s034.trimmed.sorted.bam\" > \"n100.r10.s034_output/n100.r10.s034.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s034_output/n100.r10.s034.reference.fas\" --call-indels \"n100.r10.s034_output/n100.r10.s034.trimmed.sorted.bam\" > \"n100.r10.s034_output/n100.r10.s034.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s034_output/n100.r10.s034.trimmed.sorted.bam\" > \"n100.r10.s034_output/n100.r10.s034.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s034_output/n100.r10.s034.depth.txt\" \"n100.r10.s034_output/n100.r10.s034.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s034_output/n100.r10.s034.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s034_output/n100.r10.s034.reference.fas\" | bcftools consensus -m \"n100.r10.s034_output/n100.r10.s034.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s034_output/n100.r10.s034.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s034_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s034_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s034_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 77092a02 (flow c50dce1c): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s033_output\"\n        wget -O \"n100.r10.s033_output/n100.r10.s033.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s033_output/n100.r10.s033.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s033_output/n100.r10.s033.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s033_output/n100.r10.s033.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s033_output/n100.r10.s033.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s033_output/n100.r10.s033.reference.fas\" \"n100.r10.s033_output/n100.r10.s033.fq1.fastq\" \"n100.r10.s033_output/n100.r10.s033.fq2.fastq\" | samtools view -bS - > \"n100.r10.s033_output/n100.r10.s033.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s033_output/n100.r10.s033.untrimmed.sorted.bam\" \"n100.r10.s033_output/n100.r10.s033.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s033_output/n100.r10.s033.untrimmed.sorted.bam\" -b \"n100.r10.s033_output/n100.r10.s033.primers.bed\" -p \"n100.r10.s033_output/n100.r10.s033.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s033_output/n100.r10.s033.trimmed.sorted.bam\" \"n100.r10.s033_output/n100.r10.s033.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s033_output/n100.r10.s033.reference.fas\" \"n100.r10.s033_output/n100.r10.s033.trimmed.sorted.bam\" > \"n100.r10.s033_output/n100.r10.s033.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s033_output/n100.r10.s033.reference.fas\" --call-indels \"n100.r10.s033_output/n100.r10.s033.trimmed.sorted.bam\" > \"n100.r10.s033_output/n100.r10.s033.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s033_output/n100.r10.s033.trimmed.sorted.bam\" > \"n100.r10.s033_output/n100.r10.s033.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s033_output/n100.r10.s033.depth.txt\" \"n100.r10.s033_output/n100.r10.s033.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s033_output/n100.r10.s033.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s033_output/n100.r10.s033.reference.fas\" | bcftools consensus -m \"n100.r10.s033_output/n100.r10.s033.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s033_output/n100.r10.s033.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s033_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s033_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s033_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task e996e2c5 (flow d3393061): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s027_output\"\n        wget -O \"n100.r10.s027_output/n100.r10.s027.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s027_output/n100.r10.s027.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s027_output/n100.r10.s027.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s027_output/n100.r10.s027.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s027_output/n100.r10.s027.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s027_output/n100.r10.s027.reference.fas\" \"n100.r10.s027_output/n100.r10.s027.fq1.fastq\" \"n100.r10.s027_output/n100.r10.s027.fq2.fastq\" | samtools view -bS - > \"n100.r10.s027_output/n100.r10.s027.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s027_output/n100.r10.s027.untrimmed.sorted.bam\" \"n100.r10.s027_output/n100.r10.s027.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s027_output/n100.r10.s027.untrimmed.sorted.bam\" -b \"n100.r10.s027_output/n100.r10.s027.primers.bed\" -p \"n100.r10.s027_output/n100.r10.s027.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s027_output/n100.r10.s027.trimmed.sorted.bam\" \"n100.r10.s027_output/n100.r10.s027.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s027_output/n100.r10.s027.reference.fas\" \"n100.r10.s027_output/n100.r10.s027.trimmed.sorted.bam\" > \"n100.r10.s027_output/n100.r10.s027.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s027_output/n100.r10.s027.reference.fas\" --call-indels \"n100.r10.s027_output/n100.r10.s027.trimmed.sorted.bam\" > \"n100.r10.s027_output/n100.r10.s027.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s027_output/n100.r10.s027.trimmed.sorted.bam\" > \"n100.r10.s027_output/n100.r10.s027.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s027_output/n100.r10.s027.depth.txt\" \"n100.r10.s027_output/n100.r10.s027.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s027_output/n100.r10.s027.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s027_output/n100.r10.s027.reference.fas\" | bcftools consensus -m \"n100.r10.s027_output/n100.r10.s027.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s027_output/n100.r10.s027.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s027_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s027_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s027_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 5d04b067 (flow 522f4e66): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s036_output\"\n        wget -O \"n100.r10.s036_output/n100.r10.s036.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s036_output/n100.r10.s036.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s036_output/n100.r10.s036.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s036_output/n100.r10.s036.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s036_output/n100.r10.s036.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s036_output/n100.r10.s036.reference.fas\" \"n100.r10.s036_output/n100.r10.s036.fq1.fastq\" \"n100.r10.s036_output/n100.r10.s036.fq2.fastq\" | samtools view -bS - > \"n100.r10.s036_output/n100.r10.s036.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s036_output/n100.r10.s036.untrimmed.sorted.bam\" \"n100.r10.s036_output/n100.r10.s036.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s036_output/n100.r10.s036.untrimmed.sorted.bam\" -b \"n100.r10.s036_output/n100.r10.s036.primers.bed\" -p \"n100.r10.s036_output/n100.r10.s036.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s036_output/n100.r10.s036.trimmed.sorted.bam\" \"n100.r10.s036_output/n100.r10.s036.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s036_output/n100.r10.s036.reference.fas\" \"n100.r10.s036_output/n100.r10.s036.trimmed.sorted.bam\" > \"n100.r10.s036_output/n100.r10.s036.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s036_output/n100.r10.s036.reference.fas\" --call-indels \"n100.r10.s036_output/n100.r10.s036.trimmed.sorted.bam\" > \"n100.r10.s036_output/n100.r10.s036.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s036_output/n100.r10.s036.trimmed.sorted.bam\" > \"n100.r10.s036_output/n100.r10.s036.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s036_output/n100.r10.s036.depth.txt\" \"n100.r10.s036_output/n100.r10.s036.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s036_output/n100.r10.s036.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s036_output/n100.r10.s036.reference.fas\" | bcftools consensus -m \"n100.r10.s036_output/n100.r10.s036.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s036_output/n100.r10.s036.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s036_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s036_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s036_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 8d0f47ee (flow 5e0db977): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s092_output\"\n        wget -O \"n100.r10.s092_output/n100.r10.s092.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s092_output/n100.r10.s092.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s092_output/n100.r10.s092.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s092_output/n100.r10.s092.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s092_output/n100.r10.s092.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s092_output/n100.r10.s092.reference.fas\" \"n100.r10.s092_output/n100.r10.s092.fq1.fastq\" \"n100.r10.s092_output/n100.r10.s092.fq2.fastq\" | samtools view -bS - > \"n100.r10.s092_output/n100.r10.s092.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s092_output/n100.r10.s092.untrimmed.sorted.bam\" \"n100.r10.s092_output/n100.r10.s092.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s092_output/n100.r10.s092.untrimmed.sorted.bam\" -b \"n100.r10.s092_output/n100.r10.s092.primers.bed\" -p \"n100.r10.s092_output/n100.r10.s092.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s092_output/n100.r10.s092.trimmed.sorted.bam\" \"n100.r10.s092_output/n100.r10.s092.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s092_output/n100.r10.s092.reference.fas\" \"n100.r10.s092_output/n100.r10.s092.trimmed.sorted.bam\" > \"n100.r10.s092_output/n100.r10.s092.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s092_output/n100.r10.s092.reference.fas\" --call-indels \"n100.r10.s092_output/n100.r10.s092.trimmed.sorted.bam\" > \"n100.r10.s092_output/n100.r10.s092.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s092_output/n100.r10.s092.trimmed.sorted.bam\" > \"n100.r10.s092_output/n100.r10.s092.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s092_output/n100.r10.s092.depth.txt\" \"n100.r10.s092_output/n100.r10.s092.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s092_output/n100.r10.s092.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s092_output/n100.r10.s092.reference.fas\" | bcftools consensus -m \"n100.r10.s092_output/n100.r10.s092.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s092_output/n100.r10.s092.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s092_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s092_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s092_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task c6408350 (flow 227a28ae): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s039_output\"\n        wget -O \"n100.r10.s039_output/n100.r10.s039.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s039_output/n100.r10.s039.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s039_output/n100.r10.s039.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s039_output/n100.r10.s039.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s039_output/n100.r10.s039.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s039_output/n100.r10.s039.reference.fas\" \"n100.r10.s039_output/n100.r10.s039.fq1.fastq\" \"n100.r10.s039_output/n100.r10.s039.fq2.fastq\" | samtools view -bS - > \"n100.r10.s039_output/n100.r10.s039.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s039_output/n100.r10.s039.untrimmed.sorted.bam\" \"n100.r10.s039_output/n100.r10.s039.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s039_output/n100.r10.s039.untrimmed.sorted.bam\" -b \"n100.r10.s039_output/n100.r10.s039.primers.bed\" -p \"n100.r10.s039_output/n100.r10.s039.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s039_output/n100.r10.s039.trimmed.sorted.bam\" \"n100.r10.s039_output/n100.r10.s039.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s039_output/n100.r10.s039.reference.fas\" \"n100.r10.s039_output/n100.r10.s039.trimmed.sorted.bam\" > \"n100.r10.s039_output/n100.r10.s039.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s039_output/n100.r10.s039.reference.fas\" --call-indels \"n100.r10.s039_output/n100.r10.s039.trimmed.sorted.bam\" > \"n100.r10.s039_output/n100.r10.s039.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s039_output/n100.r10.s039.trimmed.sorted.bam\" > \"n100.r10.s039_output/n100.r10.s039.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s039_output/n100.r10.s039.depth.txt\" \"n100.r10.s039_output/n100.r10.s039.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s039_output/n100.r10.s039.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s039_output/n100.r10.s039.reference.fas\" | bcftools consensus -m \"n100.r10.s039_output/n100.r10.s039.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s039_output/n100.r10.s039.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s039_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s039_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s039_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 6a4f6e23 (flow c0dbba66): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s053_output\"\n        wget -O \"n100.r10.s053_output/n100.r10.s053.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s053_output/n100.r10.s053.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s053_output/n100.r10.s053.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s053_output/n100.r10.s053.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s053_output/n100.r10.s053.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s053_output/n100.r10.s053.reference.fas\" \"n100.r10.s053_output/n100.r10.s053.fq1.fastq\" \"n100.r10.s053_output/n100.r10.s053.fq2.fastq\" | samtools view -bS - > \"n100.r10.s053_output/n100.r10.s053.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s053_output/n100.r10.s053.untrimmed.sorted.bam\" \"n100.r10.s053_output/n100.r10.s053.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s053_output/n100.r10.s053.untrimmed.sorted.bam\" -b \"n100.r10.s053_output/n100.r10.s053.primers.bed\" -p \"n100.r10.s053_output/n100.r10.s053.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s053_output/n100.r10.s053.trimmed.sorted.bam\" \"n100.r10.s053_output/n100.r10.s053.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s053_output/n100.r10.s053.reference.fas\" \"n100.r10.s053_output/n100.r10.s053.trimmed.sorted.bam\" > \"n100.r10.s053_output/n100.r10.s053.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s053_output/n100.r10.s053.reference.fas\" --call-indels \"n100.r10.s053_output/n100.r10.s053.trimmed.sorted.bam\" > \"n100.r10.s053_output/n100.r10.s053.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s053_output/n100.r10.s053.trimmed.sorted.bam\" > \"n100.r10.s053_output/n100.r10.s053.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s053_output/n100.r10.s053.depth.txt\" \"n100.r10.s053_output/n100.r10.s053.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s053_output/n100.r10.s053.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s053_output/n100.r10.s053.reference.fas\" | bcftools consensus -m \"n100.r10.s053_output/n100.r10.s053.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s053_output/n100.r10.s053.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s053_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s053_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s053_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 3c2c1b67 (flow 9bbddc57): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s042_output\"\n        wget -O \"n100.r10.s042_output/n100.r10.s042.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s042_output/n100.r10.s042.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s042_output/n100.r10.s042.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s042_output/n100.r10.s042.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s042_output/n100.r10.s042.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s042_output/n100.r10.s042.reference.fas\" \"n100.r10.s042_output/n100.r10.s042.fq1.fastq\" \"n100.r10.s042_output/n100.r10.s042.fq2.fastq\" | samtools view -bS - > \"n100.r10.s042_output/n100.r10.s042.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s042_output/n100.r10.s042.untrimmed.sorted.bam\" \"n100.r10.s042_output/n100.r10.s042.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s042_output/n100.r10.s042.untrimmed.sorted.bam\" -b \"n100.r10.s042_output/n100.r10.s042.primers.bed\" -p \"n100.r10.s042_output/n100.r10.s042.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s042_output/n100.r10.s042.trimmed.sorted.bam\" \"n100.r10.s042_output/n100.r10.s042.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s042_output/n100.r10.s042.reference.fas\" \"n100.r10.s042_output/n100.r10.s042.trimmed.sorted.bam\" > \"n100.r10.s042_output/n100.r10.s042.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s042_output/n100.r10.s042.reference.fas\" --call-indels \"n100.r10.s042_output/n100.r10.s042.trimmed.sorted.bam\" > \"n100.r10.s042_output/n100.r10.s042.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s042_output/n100.r10.s042.trimmed.sorted.bam\" > \"n100.r10.s042_output/n100.r10.s042.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s042_output/n100.r10.s042.depth.txt\" \"n100.r10.s042_output/n100.r10.s042.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s042_output/n100.r10.s042.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s042_output/n100.r10.s042.reference.fas\" | bcftools consensus -m \"n100.r10.s042_output/n100.r10.s042.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s042_output/n100.r10.s042.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s042_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s042_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s042_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 0de34bc3 (flow d01db40b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s038_output\"\n        wget -O \"n100.r10.s038_output/n100.r10.s038.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s038_output/n100.r10.s038.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s038_output/n100.r10.s038.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s038_output/n100.r10.s038.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s038_output/n100.r10.s038.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s038_output/n100.r10.s038.reference.fas\" \"n100.r10.s038_output/n100.r10.s038.fq1.fastq\" \"n100.r10.s038_output/n100.r10.s038.fq2.fastq\" | samtools view -bS - > \"n100.r10.s038_output/n100.r10.s038.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s038_output/n100.r10.s038.untrimmed.sorted.bam\" \"n100.r10.s038_output/n100.r10.s038.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s038_output/n100.r10.s038.untrimmed.sorted.bam\" -b \"n100.r10.s038_output/n100.r10.s038.primers.bed\" -p \"n100.r10.s038_output/n100.r10.s038.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s038_output/n100.r10.s038.trimmed.sorted.bam\" \"n100.r10.s038_output/n100.r10.s038.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s038_output/n100.r10.s038.reference.fas\" \"n100.r10.s038_output/n100.r10.s038.trimmed.sorted.bam\" > \"n100.r10.s038_output/n100.r10.s038.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s038_output/n100.r10.s038.reference.fas\" --call-indels \"n100.r10.s038_output/n100.r10.s038.trimmed.sorted.bam\" > \"n100.r10.s038_output/n100.r10.s038.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s038_output/n100.r10.s038.trimmed.sorted.bam\" > \"n100.r10.s038_output/n100.r10.s038.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s038_output/n100.r10.s038.depth.txt\" \"n100.r10.s038_output/n100.r10.s038.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s038_output/n100.r10.s038.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s038_output/n100.r10.s038.reference.fas\" | bcftools consensus -m \"n100.r10.s038_output/n100.r10.s038.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s038_output/n100.r10.s038.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s038_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s038_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s038_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 0727dd15 (flow afe00438): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s043_output\"\n        wget -O \"n100.r10.s043_output/n100.r10.s043.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s043_output/n100.r10.s043.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s043_output/n100.r10.s043.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s043_output/n100.r10.s043.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s043_output/n100.r10.s043.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s043_output/n100.r10.s043.reference.fas\" \"n100.r10.s043_output/n100.r10.s043.fq1.fastq\" \"n100.r10.s043_output/n100.r10.s043.fq2.fastq\" | samtools view -bS - > \"n100.r10.s043_output/n100.r10.s043.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s043_output/n100.r10.s043.untrimmed.sorted.bam\" \"n100.r10.s043_output/n100.r10.s043.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s043_output/n100.r10.s043.untrimmed.sorted.bam\" -b \"n100.r10.s043_output/n100.r10.s043.primers.bed\" -p \"n100.r10.s043_output/n100.r10.s043.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s043_output/n100.r10.s043.trimmed.sorted.bam\" \"n100.r10.s043_output/n100.r10.s043.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s043_output/n100.r10.s043.reference.fas\" \"n100.r10.s043_output/n100.r10.s043.trimmed.sorted.bam\" > \"n100.r10.s043_output/n100.r10.s043.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s043_output/n100.r10.s043.reference.fas\" --call-indels \"n100.r10.s043_output/n100.r10.s043.trimmed.sorted.bam\" > \"n100.r10.s043_output/n100.r10.s043.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s043_output/n100.r10.s043.trimmed.sorted.bam\" > \"n100.r10.s043_output/n100.r10.s043.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s043_output/n100.r10.s043.depth.txt\" \"n100.r10.s043_output/n100.r10.s043.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s043_output/n100.r10.s043.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s043_output/n100.r10.s043.reference.fas\" | bcftools consensus -m \"n100.r10.s043_output/n100.r10.s043.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s043_output/n100.r10.s043.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s043_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s043_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s043_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 42735b19 (flow c3a76ea0): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s048_output\"\n        wget -O \"n100.r10.s048_output/n100.r10.s048.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s048_output/n100.r10.s048.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s048_output/n100.r10.s048.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s048_output/n100.r10.s048.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s048_output/n100.r10.s048.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s048_output/n100.r10.s048.reference.fas\" \"n100.r10.s048_output/n100.r10.s048.fq1.fastq\" \"n100.r10.s048_output/n100.r10.s048.fq2.fastq\" | samtools view -bS - > \"n100.r10.s048_output/n100.r10.s048.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s048_output/n100.r10.s048.untrimmed.sorted.bam\" \"n100.r10.s048_output/n100.r10.s048.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s048_output/n100.r10.s048.untrimmed.sorted.bam\" -b \"n100.r10.s048_output/n100.r10.s048.primers.bed\" -p \"n100.r10.s048_output/n100.r10.s048.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s048_output/n100.r10.s048.trimmed.sorted.bam\" \"n100.r10.s048_output/n100.r10.s048.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s048_output/n100.r10.s048.reference.fas\" \"n100.r10.s048_output/n100.r10.s048.trimmed.sorted.bam\" > \"n100.r10.s048_output/n100.r10.s048.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s048_output/n100.r10.s048.reference.fas\" --call-indels \"n100.r10.s048_output/n100.r10.s048.trimmed.sorted.bam\" > \"n100.r10.s048_output/n100.r10.s048.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s048_output/n100.r10.s048.trimmed.sorted.bam\" > \"n100.r10.s048_output/n100.r10.s048.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s048_output/n100.r10.s048.depth.txt\" \"n100.r10.s048_output/n100.r10.s048.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s048_output/n100.r10.s048.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s048_output/n100.r10.s048.reference.fas\" | bcftools consensus -m \"n100.r10.s048_output/n100.r10.s048.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s048_output/n100.r10.s048.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s048_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s048_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s048_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 2f95f0eb (flow 9906f8c4): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s074_output\"\n        wget -O \"n100.r10.s074_output/n100.r10.s074.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s074_output/n100.r10.s074.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s074_output/n100.r10.s074.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s074_output/n100.r10.s074.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s074_output/n100.r10.s074.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s074_output/n100.r10.s074.reference.fas\" \"n100.r10.s074_output/n100.r10.s074.fq1.fastq\" \"n100.r10.s074_output/n100.r10.s074.fq2.fastq\" | samtools view -bS - > \"n100.r10.s074_output/n100.r10.s074.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s074_output/n100.r10.s074.untrimmed.sorted.bam\" \"n100.r10.s074_output/n100.r10.s074.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s074_output/n100.r10.s074.untrimmed.sorted.bam\" -b \"n100.r10.s074_output/n100.r10.s074.primers.bed\" -p \"n100.r10.s074_output/n100.r10.s074.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s074_output/n100.r10.s074.trimmed.sorted.bam\" \"n100.r10.s074_output/n100.r10.s074.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s074_output/n100.r10.s074.reference.fas\" \"n100.r10.s074_output/n100.r10.s074.trimmed.sorted.bam\" > \"n100.r10.s074_output/n100.r10.s074.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s074_output/n100.r10.s074.reference.fas\" --call-indels \"n100.r10.s074_output/n100.r10.s074.trimmed.sorted.bam\" > \"n100.r10.s074_output/n100.r10.s074.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s074_output/n100.r10.s074.trimmed.sorted.bam\" > \"n100.r10.s074_output/n100.r10.s074.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s074_output/n100.r10.s074.depth.txt\" \"n100.r10.s074_output/n100.r10.s074.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s074_output/n100.r10.s074.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s074_output/n100.r10.s074.reference.fas\" | bcftools consensus -m \"n100.r10.s074_output/n100.r10.s074.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s074_output/n100.r10.s074.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s074_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s074_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s074_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 9cd8433e (flow 8ff82b53): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s067_output\"\n        wget -O \"n100.r10.s067_output/n100.r10.s067.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s067_output/n100.r10.s067.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s067_output/n100.r10.s067.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s067_output/n100.r10.s067.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s067_output/n100.r10.s067.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s067_output/n100.r10.s067.reference.fas\" \"n100.r10.s067_output/n100.r10.s067.fq1.fastq\" \"n100.r10.s067_output/n100.r10.s067.fq2.fastq\" | samtools view -bS - > \"n100.r10.s067_output/n100.r10.s067.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s067_output/n100.r10.s067.untrimmed.sorted.bam\" \"n100.r10.s067_output/n100.r10.s067.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s067_output/n100.r10.s067.untrimmed.sorted.bam\" -b \"n100.r10.s067_output/n100.r10.s067.primers.bed\" -p \"n100.r10.s067_output/n100.r10.s067.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s067_output/n100.r10.s067.trimmed.sorted.bam\" \"n100.r10.s067_output/n100.r10.s067.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s067_output/n100.r10.s067.reference.fas\" \"n100.r10.s067_output/n100.r10.s067.trimmed.sorted.bam\" > \"n100.r10.s067_output/n100.r10.s067.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s067_output/n100.r10.s067.reference.fas\" --call-indels \"n100.r10.s067_output/n100.r10.s067.trimmed.sorted.bam\" > \"n100.r10.s067_output/n100.r10.s067.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s067_output/n100.r10.s067.trimmed.sorted.bam\" > \"n100.r10.s067_output/n100.r10.s067.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s067_output/n100.r10.s067.depth.txt\" \"n100.r10.s067_output/n100.r10.s067.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s067_output/n100.r10.s067.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s067_output/n100.r10.s067.reference.fas\" | bcftools consensus -m \"n100.r10.s067_output/n100.r10.s067.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s067_output/n100.r10.s067.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s067_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s067_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s067_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 768ad499 (flow 88f35ec0): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s041_output\"\n        wget -O \"n100.r10.s041_output/n100.r10.s041.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s041_output/n100.r10.s041.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s041_output/n100.r10.s041.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s041_output/n100.r10.s041.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s041_output/n100.r10.s041.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s041_output/n100.r10.s041.reference.fas\" \"n100.r10.s041_output/n100.r10.s041.fq1.fastq\" \"n100.r10.s041_output/n100.r10.s041.fq2.fastq\" | samtools view -bS - > \"n100.r10.s041_output/n100.r10.s041.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s041_output/n100.r10.s041.untrimmed.sorted.bam\" \"n100.r10.s041_output/n100.r10.s041.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s041_output/n100.r10.s041.untrimmed.sorted.bam\" -b \"n100.r10.s041_output/n100.r10.s041.primers.bed\" -p \"n100.r10.s041_output/n100.r10.s041.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s041_output/n100.r10.s041.trimmed.sorted.bam\" \"n100.r10.s041_output/n100.r10.s041.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s041_output/n100.r10.s041.reference.fas\" \"n100.r10.s041_output/n100.r10.s041.trimmed.sorted.bam\" > \"n100.r10.s041_output/n100.r10.s041.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s041_output/n100.r10.s041.reference.fas\" --call-indels \"n100.r10.s041_output/n100.r10.s041.trimmed.sorted.bam\" > \"n100.r10.s041_output/n100.r10.s041.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s041_output/n100.r10.s041.trimmed.sorted.bam\" > \"n100.r10.s041_output/n100.r10.s041.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s041_output/n100.r10.s041.depth.txt\" \"n100.r10.s041_output/n100.r10.s041.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s041_output/n100.r10.s041.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s041_output/n100.r10.s041.reference.fas\" | bcftools consensus -m \"n100.r10.s041_output/n100.r10.s041.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s041_output/n100.r10.s041.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s041_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s041_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s041_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 2e8ecf12 (flow 1925ed71): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s063_output\"\n        wget -O \"n100.r10.s063_output/n100.r10.s063.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s063_output/n100.r10.s063.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s063_output/n100.r10.s063.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s063_output/n100.r10.s063.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s063_output/n100.r10.s063.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s063_output/n100.r10.s063.reference.fas\" \"n100.r10.s063_output/n100.r10.s063.fq1.fastq\" \"n100.r10.s063_output/n100.r10.s063.fq2.fastq\" | samtools view -bS - > \"n100.r10.s063_output/n100.r10.s063.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s063_output/n100.r10.s063.untrimmed.sorted.bam\" \"n100.r10.s063_output/n100.r10.s063.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s063_output/n100.r10.s063.untrimmed.sorted.bam\" -b \"n100.r10.s063_output/n100.r10.s063.primers.bed\" -p \"n100.r10.s063_output/n100.r10.s063.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s063_output/n100.r10.s063.trimmed.sorted.bam\" \"n100.r10.s063_output/n100.r10.s063.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s063_output/n100.r10.s063.reference.fas\" \"n100.r10.s063_output/n100.r10.s063.trimmed.sorted.bam\" > \"n100.r10.s063_output/n100.r10.s063.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s063_output/n100.r10.s063.reference.fas\" --call-indels \"n100.r10.s063_output/n100.r10.s063.trimmed.sorted.bam\" > \"n100.r10.s063_output/n100.r10.s063.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s063_output/n100.r10.s063.trimmed.sorted.bam\" > \"n100.r10.s063_output/n100.r10.s063.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s063_output/n100.r10.s063.depth.txt\" \"n100.r10.s063_output/n100.r10.s063.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s063_output/n100.r10.s063.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s063_output/n100.r10.s063.reference.fas\" | bcftools consensus -m \"n100.r10.s063_output/n100.r10.s063.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s063_output/n100.r10.s063.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s063_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s063_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s063_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 10b2ee98 (flow 7eb303f0): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s061_output\"\n        wget -O \"n100.r10.s061_output/n100.r10.s061.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s061_output/n100.r10.s061.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s061_output/n100.r10.s061.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s061_output/n100.r10.s061.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s061_output/n100.r10.s061.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s061_output/n100.r10.s061.reference.fas\" \"n100.r10.s061_output/n100.r10.s061.fq1.fastq\" \"n100.r10.s061_output/n100.r10.s061.fq2.fastq\" | samtools view -bS - > \"n100.r10.s061_output/n100.r10.s061.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s061_output/n100.r10.s061.untrimmed.sorted.bam\" \"n100.r10.s061_output/n100.r10.s061.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s061_output/n100.r10.s061.untrimmed.sorted.bam\" -b \"n100.r10.s061_output/n100.r10.s061.primers.bed\" -p \"n100.r10.s061_output/n100.r10.s061.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s061_output/n100.r10.s061.trimmed.sorted.bam\" \"n100.r10.s061_output/n100.r10.s061.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s061_output/n100.r10.s061.reference.fas\" \"n100.r10.s061_output/n100.r10.s061.trimmed.sorted.bam\" > \"n100.r10.s061_output/n100.r10.s061.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s061_output/n100.r10.s061.reference.fas\" --call-indels \"n100.r10.s061_output/n100.r10.s061.trimmed.sorted.bam\" > \"n100.r10.s061_output/n100.r10.s061.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s061_output/n100.r10.s061.trimmed.sorted.bam\" > \"n100.r10.s061_output/n100.r10.s061.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s061_output/n100.r10.s061.depth.txt\" \"n100.r10.s061_output/n100.r10.s061.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s061_output/n100.r10.s061.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s061_output/n100.r10.s061.reference.fas\" | bcftools consensus -m \"n100.r10.s061_output/n100.r10.s061.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s061_output/n100.r10.s061.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s061_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s061_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s061_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task b3e5b82e (flow e295ae85): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s019_output\"\n        wget -O \"n100.r10.s019_output/n100.r10.s019.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s019_output/n100.r10.s019.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s019_output/n100.r10.s019.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s019_output/n100.r10.s019.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s019_output/n100.r10.s019.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s019_output/n100.r10.s019.reference.fas\" \"n100.r10.s019_output/n100.r10.s019.fq1.fastq\" \"n100.r10.s019_output/n100.r10.s019.fq2.fastq\" | samtools view -bS - > \"n100.r10.s019_output/n100.r10.s019.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s019_output/n100.r10.s019.untrimmed.sorted.bam\" \"n100.r10.s019_output/n100.r10.s019.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s019_output/n100.r10.s019.untrimmed.sorted.bam\" -b \"n100.r10.s019_output/n100.r10.s019.primers.bed\" -p \"n100.r10.s019_output/n100.r10.s019.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s019_output/n100.r10.s019.trimmed.sorted.bam\" \"n100.r10.s019_output/n100.r10.s019.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s019_output/n100.r10.s019.reference.fas\" \"n100.r10.s019_output/n100.r10.s019.trimmed.sorted.bam\" > \"n100.r10.s019_output/n100.r10.s019.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s019_output/n100.r10.s019.reference.fas\" --call-indels \"n100.r10.s019_output/n100.r10.s019.trimmed.sorted.bam\" > \"n100.r10.s019_output/n100.r10.s019.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s019_output/n100.r10.s019.trimmed.sorted.bam\" > \"n100.r10.s019_output/n100.r10.s019.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s019_output/n100.r10.s019.depth.txt\" \"n100.r10.s019_output/n100.r10.s019.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s019_output/n100.r10.s019.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s019_output/n100.r10.s019.reference.fas\" | bcftools consensus -m \"n100.r10.s019_output/n100.r10.s019.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s019_output/n100.r10.s019.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s019_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s019_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s019_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task a99fe358 (flow 025791ae): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s045_output\"\n        wget -O \"n100.r10.s045_output/n100.r10.s045.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s045_output/n100.r10.s045.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s045_output/n100.r10.s045.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s045_output/n100.r10.s045.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s045_output/n100.r10.s045.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s045_output/n100.r10.s045.reference.fas\" \"n100.r10.s045_output/n100.r10.s045.fq1.fastq\" \"n100.r10.s045_output/n100.r10.s045.fq2.fastq\" | samtools view -bS - > \"n100.r10.s045_output/n100.r10.s045.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s045_output/n100.r10.s045.untrimmed.sorted.bam\" \"n100.r10.s045_output/n100.r10.s045.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s045_output/n100.r10.s045.untrimmed.sorted.bam\" -b \"n100.r10.s045_output/n100.r10.s045.primers.bed\" -p \"n100.r10.s045_output/n100.r10.s045.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s045_output/n100.r10.s045.trimmed.sorted.bam\" \"n100.r10.s045_output/n100.r10.s045.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s045_output/n100.r10.s045.reference.fas\" \"n100.r10.s045_output/n100.r10.s045.trimmed.sorted.bam\" > \"n100.r10.s045_output/n100.r10.s045.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s045_output/n100.r10.s045.reference.fas\" --call-indels \"n100.r10.s045_output/n100.r10.s045.trimmed.sorted.bam\" > \"n100.r10.s045_output/n100.r10.s045.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s045_output/n100.r10.s045.trimmed.sorted.bam\" > \"n100.r10.s045_output/n100.r10.s045.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s045_output/n100.r10.s045.depth.txt\" \"n100.r10.s045_output/n100.r10.s045.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s045_output/n100.r10.s045.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s045_output/n100.r10.s045.reference.fas\" | bcftools consensus -m \"n100.r10.s045_output/n100.r10.s045.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s045_output/n100.r10.s045.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s045_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s045_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s045_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 62273247 (flow 40aecf6e): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s058_output\"\n        wget -O \"n100.r10.s058_output/n100.r10.s058.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s058_output/n100.r10.s058.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s058_output/n100.r10.s058.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s058_output/n100.r10.s058.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s058_output/n100.r10.s058.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s058_output/n100.r10.s058.reference.fas\" \"n100.r10.s058_output/n100.r10.s058.fq1.fastq\" \"n100.r10.s058_output/n100.r10.s058.fq2.fastq\" | samtools view -bS - > \"n100.r10.s058_output/n100.r10.s058.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s058_output/n100.r10.s058.untrimmed.sorted.bam\" \"n100.r10.s058_output/n100.r10.s058.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s058_output/n100.r10.s058.untrimmed.sorted.bam\" -b \"n100.r10.s058_output/n100.r10.s058.primers.bed\" -p \"n100.r10.s058_output/n100.r10.s058.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s058_output/n100.r10.s058.trimmed.sorted.bam\" \"n100.r10.s058_output/n100.r10.s058.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s058_output/n100.r10.s058.reference.fas\" \"n100.r10.s058_output/n100.r10.s058.trimmed.sorted.bam\" > \"n100.r10.s058_output/n100.r10.s058.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s058_output/n100.r10.s058.reference.fas\" --call-indels \"n100.r10.s058_output/n100.r10.s058.trimmed.sorted.bam\" > \"n100.r10.s058_output/n100.r10.s058.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s058_output/n100.r10.s058.trimmed.sorted.bam\" > \"n100.r10.s058_output/n100.r10.s058.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s058_output/n100.r10.s058.depth.txt\" \"n100.r10.s058_output/n100.r10.s058.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s058_output/n100.r10.s058.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s058_output/n100.r10.s058.reference.fas\" | bcftools consensus -m \"n100.r10.s058_output/n100.r10.s058.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s058_output/n100.r10.s058.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s058_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s058_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s058_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 49c1b19d (flow 31d04bff): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s088_output\"\n        wget -O \"n100.r10.s088_output/n100.r10.s088.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s088_output/n100.r10.s088.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s088_output/n100.r10.s088.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s088_output/n100.r10.s088.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s088_output/n100.r10.s088.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s088_output/n100.r10.s088.reference.fas\" \"n100.r10.s088_output/n100.r10.s088.fq1.fastq\" \"n100.r10.s088_output/n100.r10.s088.fq2.fastq\" | samtools view -bS - > \"n100.r10.s088_output/n100.r10.s088.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s088_output/n100.r10.s088.untrimmed.sorted.bam\" \"n100.r10.s088_output/n100.r10.s088.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s088_output/n100.r10.s088.untrimmed.sorted.bam\" -b \"n100.r10.s088_output/n100.r10.s088.primers.bed\" -p \"n100.r10.s088_output/n100.r10.s088.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s088_output/n100.r10.s088.trimmed.sorted.bam\" \"n100.r10.s088_output/n100.r10.s088.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s088_output/n100.r10.s088.reference.fas\" \"n100.r10.s088_output/n100.r10.s088.trimmed.sorted.bam\" > \"n100.r10.s088_output/n100.r10.s088.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s088_output/n100.r10.s088.reference.fas\" --call-indels \"n100.r10.s088_output/n100.r10.s088.trimmed.sorted.bam\" > \"n100.r10.s088_output/n100.r10.s088.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s088_output/n100.r10.s088.trimmed.sorted.bam\" > \"n100.r10.s088_output/n100.r10.s088.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s088_output/n100.r10.s088.depth.txt\" \"n100.r10.s088_output/n100.r10.s088.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s088_output/n100.r10.s088.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s088_output/n100.r10.s088.reference.fas\" | bcftools consensus -m \"n100.r10.s088_output/n100.r10.s088.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s088_output/n100.r10.s088.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s088_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s088_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s088_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 61d86a19 (flow ee1e5c5f): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s046_output\"\n        wget -O \"n100.r10.s046_output/n100.r10.s046.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s046_output/n100.r10.s046.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s046_output/n100.r10.s046.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s046_output/n100.r10.s046.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s046_output/n100.r10.s046.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s046_output/n100.r10.s046.reference.fas\" \"n100.r10.s046_output/n100.r10.s046.fq1.fastq\" \"n100.r10.s046_output/n100.r10.s046.fq2.fastq\" | samtools view -bS - > \"n100.r10.s046_output/n100.r10.s046.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s046_output/n100.r10.s046.untrimmed.sorted.bam\" \"n100.r10.s046_output/n100.r10.s046.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s046_output/n100.r10.s046.untrimmed.sorted.bam\" -b \"n100.r10.s046_output/n100.r10.s046.primers.bed\" -p \"n100.r10.s046_output/n100.r10.s046.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s046_output/n100.r10.s046.trimmed.sorted.bam\" \"n100.r10.s046_output/n100.r10.s046.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s046_output/n100.r10.s046.reference.fas\" \"n100.r10.s046_output/n100.r10.s046.trimmed.sorted.bam\" > \"n100.r10.s046_output/n100.r10.s046.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s046_output/n100.r10.s046.reference.fas\" --call-indels \"n100.r10.s046_output/n100.r10.s046.trimmed.sorted.bam\" > \"n100.r10.s046_output/n100.r10.s046.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s046_output/n100.r10.s046.trimmed.sorted.bam\" > \"n100.r10.s046_output/n100.r10.s046.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s046_output/n100.r10.s046.depth.txt\" \"n100.r10.s046_output/n100.r10.s046.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s046_output/n100.r10.s046.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s046_output/n100.r10.s046.reference.fas\" | bcftools consensus -m \"n100.r10.s046_output/n100.r10.s046.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s046_output/n100.r10.s046.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s046_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s046_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s046_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 11521559 (flow aee712fe): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s009_output\"\n        wget -O \"n100.r10.s009_output/n100.r10.s009.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s009_output/n100.r10.s009.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s009_output/n100.r10.s009.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s009_output/n100.r10.s009.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s009_output/n100.r10.s009.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s009_output/n100.r10.s009.reference.fas\" \"n100.r10.s009_output/n100.r10.s009.fq1.fastq\" \"n100.r10.s009_output/n100.r10.s009.fq2.fastq\" | samtools view -bS - > \"n100.r10.s009_output/n100.r10.s009.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s009_output/n100.r10.s009.untrimmed.sorted.bam\" \"n100.r10.s009_output/n100.r10.s009.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s009_output/n100.r10.s009.untrimmed.sorted.bam\" -b \"n100.r10.s009_output/n100.r10.s009.primers.bed\" -p \"n100.r10.s009_output/n100.r10.s009.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s009_output/n100.r10.s009.trimmed.sorted.bam\" \"n100.r10.s009_output/n100.r10.s009.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s009_output/n100.r10.s009.reference.fas\" \"n100.r10.s009_output/n100.r10.s009.trimmed.sorted.bam\" > \"n100.r10.s009_output/n100.r10.s009.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s009_output/n100.r10.s009.reference.fas\" --call-indels \"n100.r10.s009_output/n100.r10.s009.trimmed.sorted.bam\" > \"n100.r10.s009_output/n100.r10.s009.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s009_output/n100.r10.s009.trimmed.sorted.bam\" > \"n100.r10.s009_output/n100.r10.s009.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s009_output/n100.r10.s009.depth.txt\" \"n100.r10.s009_output/n100.r10.s009.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s009_output/n100.r10.s009.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s009_output/n100.r10.s009.reference.fas\" | bcftools consensus -m \"n100.r10.s009_output/n100.r10.s009.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s009_output/n100.r10.s009.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s009_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s009_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s009_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task d78f5d37 (flow 88a0cdd2): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s096_output\"\n        wget -O \"n100.r10.s096_output/n100.r10.s096.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s096_output/n100.r10.s096.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s096_output/n100.r10.s096.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s096_output/n100.r10.s096.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s096_output/n100.r10.s096.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s096_output/n100.r10.s096.reference.fas\" \"n100.r10.s096_output/n100.r10.s096.fq1.fastq\" \"n100.r10.s096_output/n100.r10.s096.fq2.fastq\" | samtools view -bS - > \"n100.r10.s096_output/n100.r10.s096.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s096_output/n100.r10.s096.untrimmed.sorted.bam\" \"n100.r10.s096_output/n100.r10.s096.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s096_output/n100.r10.s096.untrimmed.sorted.bam\" -b \"n100.r10.s096_output/n100.r10.s096.primers.bed\" -p \"n100.r10.s096_output/n100.r10.s096.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s096_output/n100.r10.s096.trimmed.sorted.bam\" \"n100.r10.s096_output/n100.r10.s096.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s096_output/n100.r10.s096.reference.fas\" \"n100.r10.s096_output/n100.r10.s096.trimmed.sorted.bam\" > \"n100.r10.s096_output/n100.r10.s096.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s096_output/n100.r10.s096.reference.fas\" --call-indels \"n100.r10.s096_output/n100.r10.s096.trimmed.sorted.bam\" > \"n100.r10.s096_output/n100.r10.s096.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s096_output/n100.r10.s096.trimmed.sorted.bam\" > \"n100.r10.s096_output/n100.r10.s096.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s096_output/n100.r10.s096.depth.txt\" \"n100.r10.s096_output/n100.r10.s096.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s096_output/n100.r10.s096.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s096_output/n100.r10.s096.reference.fas\" | bcftools consensus -m \"n100.r10.s096_output/n100.r10.s096.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s096_output/n100.r10.s096.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s096_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s096_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s096_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 400a7920 (flow a4d00c52): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s090_output\"\n        wget -O \"n100.r10.s090_output/n100.r10.s090.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s090_output/n100.r10.s090.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s090_output/n100.r10.s090.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s090_output/n100.r10.s090.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s090_output/n100.r10.s090.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s090_output/n100.r10.s090.reference.fas\" \"n100.r10.s090_output/n100.r10.s090.fq1.fastq\" \"n100.r10.s090_output/n100.r10.s090.fq2.fastq\" | samtools view -bS - > \"n100.r10.s090_output/n100.r10.s090.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s090_output/n100.r10.s090.untrimmed.sorted.bam\" \"n100.r10.s090_output/n100.r10.s090.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s090_output/n100.r10.s090.untrimmed.sorted.bam\" -b \"n100.r10.s090_output/n100.r10.s090.primers.bed\" -p \"n100.r10.s090_output/n100.r10.s090.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s090_output/n100.r10.s090.trimmed.sorted.bam\" \"n100.r10.s090_output/n100.r10.s090.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s090_output/n100.r10.s090.reference.fas\" \"n100.r10.s090_output/n100.r10.s090.trimmed.sorted.bam\" > \"n100.r10.s090_output/n100.r10.s090.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s090_output/n100.r10.s090.reference.fas\" --call-indels \"n100.r10.s090_output/n100.r10.s090.trimmed.sorted.bam\" > \"n100.r10.s090_output/n100.r10.s090.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s090_output/n100.r10.s090.trimmed.sorted.bam\" > \"n100.r10.s090_output/n100.r10.s090.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s090_output/n100.r10.s090.depth.txt\" \"n100.r10.s090_output/n100.r10.s090.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s090_output/n100.r10.s090.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s090_output/n100.r10.s090.reference.fas\" | bcftools consensus -m \"n100.r10.s090_output/n100.r10.s090.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s090_output/n100.r10.s090.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s090_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s090_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s090_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 6020e9b3 (flow 50fe0d18): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s094_output\"\n        wget -O \"n100.r10.s094_output/n100.r10.s094.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s094_output/n100.r10.s094.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s094_output/n100.r10.s094.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s094_output/n100.r10.s094.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s094_output/n100.r10.s094.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s094_output/n100.r10.s094.reference.fas\" \"n100.r10.s094_output/n100.r10.s094.fq1.fastq\" \"n100.r10.s094_output/n100.r10.s094.fq2.fastq\" | samtools view -bS - > \"n100.r10.s094_output/n100.r10.s094.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s094_output/n100.r10.s094.untrimmed.sorted.bam\" \"n100.r10.s094_output/n100.r10.s094.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s094_output/n100.r10.s094.untrimmed.sorted.bam\" -b \"n100.r10.s094_output/n100.r10.s094.primers.bed\" -p \"n100.r10.s094_output/n100.r10.s094.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s094_output/n100.r10.s094.trimmed.sorted.bam\" \"n100.r10.s094_output/n100.r10.s094.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s094_output/n100.r10.s094.reference.fas\" \"n100.r10.s094_output/n100.r10.s094.trimmed.sorted.bam\" > \"n100.r10.s094_output/n100.r10.s094.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s094_output/n100.r10.s094.reference.fas\" --call-indels \"n100.r10.s094_output/n100.r10.s094.trimmed.sorted.bam\" > \"n100.r10.s094_output/n100.r10.s094.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s094_output/n100.r10.s094.trimmed.sorted.bam\" > \"n100.r10.s094_output/n100.r10.s094.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s094_output/n100.r10.s094.depth.txt\" \"n100.r10.s094_output/n100.r10.s094.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s094_output/n100.r10.s094.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s094_output/n100.r10.s094.reference.fas\" | bcftools consensus -m \"n100.r10.s094_output/n100.r10.s094.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s094_output/n100.r10.s094.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s094_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s094_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s094_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 8132d6a4 (flow 3012d03f): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s085_output\"\n        wget -O \"n100.r10.s085_output/n100.r10.s085.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s085_output/n100.r10.s085.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s085_output/n100.r10.s085.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s085_output/n100.r10.s085.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s085_output/n100.r10.s085.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s085_output/n100.r10.s085.reference.fas\" \"n100.r10.s085_output/n100.r10.s085.fq1.fastq\" \"n100.r10.s085_output/n100.r10.s085.fq2.fastq\" | samtools view -bS - > \"n100.r10.s085_output/n100.r10.s085.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s085_output/n100.r10.s085.untrimmed.sorted.bam\" \"n100.r10.s085_output/n100.r10.s085.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s085_output/n100.r10.s085.untrimmed.sorted.bam\" -b \"n100.r10.s085_output/n100.r10.s085.primers.bed\" -p \"n100.r10.s085_output/n100.r10.s085.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s085_output/n100.r10.s085.trimmed.sorted.bam\" \"n100.r10.s085_output/n100.r10.s085.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s085_output/n100.r10.s085.reference.fas\" \"n100.r10.s085_output/n100.r10.s085.trimmed.sorted.bam\" > \"n100.r10.s085_output/n100.r10.s085.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s085_output/n100.r10.s085.reference.fas\" --call-indels \"n100.r10.s085_output/n100.r10.s085.trimmed.sorted.bam\" > \"n100.r10.s085_output/n100.r10.s085.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s085_output/n100.r10.s085.trimmed.sorted.bam\" > \"n100.r10.s085_output/n100.r10.s085.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s085_output/n100.r10.s085.depth.txt\" \"n100.r10.s085_output/n100.r10.s085.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s085_output/n100.r10.s085.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s085_output/n100.r10.s085.reference.fas\" | bcftools consensus -m \"n100.r10.s085_output/n100.r10.s085.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s085_output/n100.r10.s085.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s085_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s085_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s085_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task d7c574d6 (flow d719cd29): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s049_output\"\n        wget -O \"n100.r10.s049_output/n100.r10.s049.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s049_output/n100.r10.s049.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s049_output/n100.r10.s049.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s049_output/n100.r10.s049.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s049_output/n100.r10.s049.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s049_output/n100.r10.s049.reference.fas\" \"n100.r10.s049_output/n100.r10.s049.fq1.fastq\" \"n100.r10.s049_output/n100.r10.s049.fq2.fastq\" | samtools view -bS - > \"n100.r10.s049_output/n100.r10.s049.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s049_output/n100.r10.s049.untrimmed.sorted.bam\" \"n100.r10.s049_output/n100.r10.s049.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s049_output/n100.r10.s049.untrimmed.sorted.bam\" -b \"n100.r10.s049_output/n100.r10.s049.primers.bed\" -p \"n100.r10.s049_output/n100.r10.s049.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s049_output/n100.r10.s049.trimmed.sorted.bam\" \"n100.r10.s049_output/n100.r10.s049.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s049_output/n100.r10.s049.reference.fas\" \"n100.r10.s049_output/n100.r10.s049.trimmed.sorted.bam\" > \"n100.r10.s049_output/n100.r10.s049.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s049_output/n100.r10.s049.reference.fas\" --call-indels \"n100.r10.s049_output/n100.r10.s049.trimmed.sorted.bam\" > \"n100.r10.s049_output/n100.r10.s049.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s049_output/n100.r10.s049.trimmed.sorted.bam\" > \"n100.r10.s049_output/n100.r10.s049.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s049_output/n100.r10.s049.depth.txt\" \"n100.r10.s049_output/n100.r10.s049.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s049_output/n100.r10.s049.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s049_output/n100.r10.s049.reference.fas\" | bcftools consensus -m \"n100.r10.s049_output/n100.r10.s049.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s049_output/n100.r10.s049.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s049_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s049_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s049_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 5916483e (flow 38a4c1e8): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s093_output\"\n        wget -O \"n100.r10.s093_output/n100.r10.s093.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s093_output/n100.r10.s093.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s093_output/n100.r10.s093.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s093_output/n100.r10.s093.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s093_output/n100.r10.s093.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s093_output/n100.r10.s093.reference.fas\" \"n100.r10.s093_output/n100.r10.s093.fq1.fastq\" \"n100.r10.s093_output/n100.r10.s093.fq2.fastq\" | samtools view -bS - > \"n100.r10.s093_output/n100.r10.s093.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s093_output/n100.r10.s093.untrimmed.sorted.bam\" \"n100.r10.s093_output/n100.r10.s093.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s093_output/n100.r10.s093.untrimmed.sorted.bam\" -b \"n100.r10.s093_output/n100.r10.s093.primers.bed\" -p \"n100.r10.s093_output/n100.r10.s093.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s093_output/n100.r10.s093.trimmed.sorted.bam\" \"n100.r10.s093_output/n100.r10.s093.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s093_output/n100.r10.s093.reference.fas\" \"n100.r10.s093_output/n100.r10.s093.trimmed.sorted.bam\" > \"n100.r10.s093_output/n100.r10.s093.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s093_output/n100.r10.s093.reference.fas\" --call-indels \"n100.r10.s093_output/n100.r10.s093.trimmed.sorted.bam\" > \"n100.r10.s093_output/n100.r10.s093.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s093_output/n100.r10.s093.trimmed.sorted.bam\" > \"n100.r10.s093_output/n100.r10.s093.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s093_output/n100.r10.s093.depth.txt\" \"n100.r10.s093_output/n100.r10.s093.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s093_output/n100.r10.s093.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s093_output/n100.r10.s093.reference.fas\" | bcftools consensus -m \"n100.r10.s093_output/n100.r10.s093.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s093_output/n100.r10.s093.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s093_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s093_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s093_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task d1d46b3d (flow 21dcc181): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s011_output\"\n        wget -O \"n100.r10.s011_output/n100.r10.s011.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s011_output/n100.r10.s011.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s011_output/n100.r10.s011.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s011_output/n100.r10.s011.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s011_output/n100.r10.s011.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s011_output/n100.r10.s011.reference.fas\" \"n100.r10.s011_output/n100.r10.s011.fq1.fastq\" \"n100.r10.s011_output/n100.r10.s011.fq2.fastq\" | samtools view -bS - > \"n100.r10.s011_output/n100.r10.s011.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s011_output/n100.r10.s011.untrimmed.sorted.bam\" \"n100.r10.s011_output/n100.r10.s011.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s011_output/n100.r10.s011.untrimmed.sorted.bam\" -b \"n100.r10.s011_output/n100.r10.s011.primers.bed\" -p \"n100.r10.s011_output/n100.r10.s011.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s011_output/n100.r10.s011.trimmed.sorted.bam\" \"n100.r10.s011_output/n100.r10.s011.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s011_output/n100.r10.s011.reference.fas\" \"n100.r10.s011_output/n100.r10.s011.trimmed.sorted.bam\" > \"n100.r10.s011_output/n100.r10.s011.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s011_output/n100.r10.s011.reference.fas\" --call-indels \"n100.r10.s011_output/n100.r10.s011.trimmed.sorted.bam\" > \"n100.r10.s011_output/n100.r10.s011.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s011_output/n100.r10.s011.trimmed.sorted.bam\" > \"n100.r10.s011_output/n100.r10.s011.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s011_output/n100.r10.s011.depth.txt\" \"n100.r10.s011_output/n100.r10.s011.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s011_output/n100.r10.s011.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s011_output/n100.r10.s011.reference.fas\" | bcftools consensus -m \"n100.r10.s011_output/n100.r10.s011.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s011_output/n100.r10.s011.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s011_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s011_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s011_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 6f235a83 (flow 3c6bdf5b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s076_output\"\n        wget -O \"n100.r10.s076_output/n100.r10.s076.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s076_output/n100.r10.s076.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s076_output/n100.r10.s076.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s076_output/n100.r10.s076.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s076_output/n100.r10.s076.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s076_output/n100.r10.s076.reference.fas\" \"n100.r10.s076_output/n100.r10.s076.fq1.fastq\" \"n100.r10.s076_output/n100.r10.s076.fq2.fastq\" | samtools view -bS - > \"n100.r10.s076_output/n100.r10.s076.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s076_output/n100.r10.s076.untrimmed.sorted.bam\" \"n100.r10.s076_output/n100.r10.s076.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s076_output/n100.r10.s076.untrimmed.sorted.bam\" -b \"n100.r10.s076_output/n100.r10.s076.primers.bed\" -p \"n100.r10.s076_output/n100.r10.s076.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s076_output/n100.r10.s076.trimmed.sorted.bam\" \"n100.r10.s076_output/n100.r10.s076.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s076_output/n100.r10.s076.reference.fas\" \"n100.r10.s076_output/n100.r10.s076.trimmed.sorted.bam\" > \"n100.r10.s076_output/n100.r10.s076.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s076_output/n100.r10.s076.reference.fas\" --call-indels \"n100.r10.s076_output/n100.r10.s076.trimmed.sorted.bam\" > \"n100.r10.s076_output/n100.r10.s076.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s076_output/n100.r10.s076.trimmed.sorted.bam\" > \"n100.r10.s076_output/n100.r10.s076.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s076_output/n100.r10.s076.depth.txt\" \"n100.r10.s076_output/n100.r10.s076.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s076_output/n100.r10.s076.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s076_output/n100.r10.s076.reference.fas\" | bcftools consensus -m \"n100.r10.s076_output/n100.r10.s076.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s076_output/n100.r10.s076.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s076_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s076_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s076_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 0a72f984 (flow 0210f1d8): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s078_output\"\n        wget -O \"n100.r10.s078_output/n100.r10.s078.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s078_output/n100.r10.s078.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s078_output/n100.r10.s078.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s078_output/n100.r10.s078.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s078_output/n100.r10.s078.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s078_output/n100.r10.s078.reference.fas\" \"n100.r10.s078_output/n100.r10.s078.fq1.fastq\" \"n100.r10.s078_output/n100.r10.s078.fq2.fastq\" | samtools view -bS - > \"n100.r10.s078_output/n100.r10.s078.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s078_output/n100.r10.s078.untrimmed.sorted.bam\" \"n100.r10.s078_output/n100.r10.s078.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s078_output/n100.r10.s078.untrimmed.sorted.bam\" -b \"n100.r10.s078_output/n100.r10.s078.primers.bed\" -p \"n100.r10.s078_output/n100.r10.s078.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s078_output/n100.r10.s078.trimmed.sorted.bam\" \"n100.r10.s078_output/n100.r10.s078.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s078_output/n100.r10.s078.reference.fas\" \"n100.r10.s078_output/n100.r10.s078.trimmed.sorted.bam\" > \"n100.r10.s078_output/n100.r10.s078.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s078_output/n100.r10.s078.reference.fas\" --call-indels \"n100.r10.s078_output/n100.r10.s078.trimmed.sorted.bam\" > \"n100.r10.s078_output/n100.r10.s078.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s078_output/n100.r10.s078.trimmed.sorted.bam\" > \"n100.r10.s078_output/n100.r10.s078.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s078_output/n100.r10.s078.depth.txt\" \"n100.r10.s078_output/n100.r10.s078.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s078_output/n100.r10.s078.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s078_output/n100.r10.s078.reference.fas\" | bcftools consensus -m \"n100.r10.s078_output/n100.r10.s078.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s078_output/n100.r10.s078.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s078_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s078_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s078_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 9741371c (flow 26a00bb9): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s050_output\"\n        wget -O \"n100.r10.s050_output/n100.r10.s050.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s050_output/n100.r10.s050.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s050_output/n100.r10.s050.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s050_output/n100.r10.s050.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s050_output/n100.r10.s050.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s050_output/n100.r10.s050.reference.fas\" \"n100.r10.s050_output/n100.r10.s050.fq1.fastq\" \"n100.r10.s050_output/n100.r10.s050.fq2.fastq\" | samtools view -bS - > \"n100.r10.s050_output/n100.r10.s050.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s050_output/n100.r10.s050.untrimmed.sorted.bam\" \"n100.r10.s050_output/n100.r10.s050.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s050_output/n100.r10.s050.untrimmed.sorted.bam\" -b \"n100.r10.s050_output/n100.r10.s050.primers.bed\" -p \"n100.r10.s050_output/n100.r10.s050.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s050_output/n100.r10.s050.trimmed.sorted.bam\" \"n100.r10.s050_output/n100.r10.s050.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s050_output/n100.r10.s050.reference.fas\" \"n100.r10.s050_output/n100.r10.s050.trimmed.sorted.bam\" > \"n100.r10.s050_output/n100.r10.s050.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s050_output/n100.r10.s050.reference.fas\" --call-indels \"n100.r10.s050_output/n100.r10.s050.trimmed.sorted.bam\" > \"n100.r10.s050_output/n100.r10.s050.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s050_output/n100.r10.s050.trimmed.sorted.bam\" > \"n100.r10.s050_output/n100.r10.s050.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s050_output/n100.r10.s050.depth.txt\" \"n100.r10.s050_output/n100.r10.s050.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s050_output/n100.r10.s050.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s050_output/n100.r10.s050.reference.fas\" | bcftools consensus -m \"n100.r10.s050_output/n100.r10.s050.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s050_output/n100.r10.s050.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s050_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s050_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s050_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task daf95962 (flow 7c29b38a): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s002_output\"\n        wget -O \"n100.r10.s002_output/n100.r10.s002.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s002_output/n100.r10.s002.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s002_output/n100.r10.s002.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s002_output/n100.r10.s002.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s002_output/n100.r10.s002.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s002_output/n100.r10.s002.reference.fas\" \"n100.r10.s002_output/n100.r10.s002.fq1.fastq\" \"n100.r10.s002_output/n100.r10.s002.fq2.fastq\" | samtools view -bS - > \"n100.r10.s002_output/n100.r10.s002.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s002_output/n100.r10.s002.untrimmed.sorted.bam\" \"n100.r10.s002_output/n100.r10.s002.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s002_output/n100.r10.s002.untrimmed.sorted.bam\" -b \"n100.r10.s002_output/n100.r10.s002.primers.bed\" -p \"n100.r10.s002_output/n100.r10.s002.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s002_output/n100.r10.s002.trimmed.sorted.bam\" \"n100.r10.s002_output/n100.r10.s002.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s002_output/n100.r10.s002.reference.fas\" \"n100.r10.s002_output/n100.r10.s002.trimmed.sorted.bam\" > \"n100.r10.s002_output/n100.r10.s002.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s002_output/n100.r10.s002.reference.fas\" --call-indels \"n100.r10.s002_output/n100.r10.s002.trimmed.sorted.bam\" > \"n100.r10.s002_output/n100.r10.s002.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s002_output/n100.r10.s002.trimmed.sorted.bam\" > \"n100.r10.s002_output/n100.r10.s002.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s002_output/n100.r10.s002.depth.txt\" \"n100.r10.s002_output/n100.r10.s002.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s002_output/n100.r10.s002.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s002_output/n100.r10.s002.reference.fas\" | bcftools consensus -m \"n100.r10.s002_output/n100.r10.s002.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s002_output/n100.r10.s002.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s002_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s002_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s002_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 5bc25bd3 (flow 8edca96d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s081_output\"\n        wget -O \"n100.r10.s081_output/n100.r10.s081.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s081_output/n100.r10.s081.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s081_output/n100.r10.s081.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s081_output/n100.r10.s081.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s081_output/n100.r10.s081.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s081_output/n100.r10.s081.reference.fas\" \"n100.r10.s081_output/n100.r10.s081.fq1.fastq\" \"n100.r10.s081_output/n100.r10.s081.fq2.fastq\" | samtools view -bS - > \"n100.r10.s081_output/n100.r10.s081.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s081_output/n100.r10.s081.untrimmed.sorted.bam\" \"n100.r10.s081_output/n100.r10.s081.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s081_output/n100.r10.s081.untrimmed.sorted.bam\" -b \"n100.r10.s081_output/n100.r10.s081.primers.bed\" -p \"n100.r10.s081_output/n100.r10.s081.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s081_output/n100.r10.s081.trimmed.sorted.bam\" \"n100.r10.s081_output/n100.r10.s081.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s081_output/n100.r10.s081.reference.fas\" \"n100.r10.s081_output/n100.r10.s081.trimmed.sorted.bam\" > \"n100.r10.s081_output/n100.r10.s081.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s081_output/n100.r10.s081.reference.fas\" --call-indels \"n100.r10.s081_output/n100.r10.s081.trimmed.sorted.bam\" > \"n100.r10.s081_output/n100.r10.s081.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s081_output/n100.r10.s081.trimmed.sorted.bam\" > \"n100.r10.s081_output/n100.r10.s081.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s081_output/n100.r10.s081.depth.txt\" \"n100.r10.s081_output/n100.r10.s081.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s081_output/n100.r10.s081.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s081_output/n100.r10.s081.reference.fas\" | bcftools consensus -m \"n100.r10.s081_output/n100.r10.s081.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s081_output/n100.r10.s081.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s081_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s081_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s081_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task eb87e42f (flow 399f20da): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s062_output\"\n        wget -O \"n100.r10.s062_output/n100.r10.s062.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s062_output/n100.r10.s062.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s062_output/n100.r10.s062.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s062_output/n100.r10.s062.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s062_output/n100.r10.s062.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s062_output/n100.r10.s062.reference.fas\" \"n100.r10.s062_output/n100.r10.s062.fq1.fastq\" \"n100.r10.s062_output/n100.r10.s062.fq2.fastq\" | samtools view -bS - > \"n100.r10.s062_output/n100.r10.s062.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s062_output/n100.r10.s062.untrimmed.sorted.bam\" \"n100.r10.s062_output/n100.r10.s062.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s062_output/n100.r10.s062.untrimmed.sorted.bam\" -b \"n100.r10.s062_output/n100.r10.s062.primers.bed\" -p \"n100.r10.s062_output/n100.r10.s062.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s062_output/n100.r10.s062.trimmed.sorted.bam\" \"n100.r10.s062_output/n100.r10.s062.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s062_output/n100.r10.s062.reference.fas\" \"n100.r10.s062_output/n100.r10.s062.trimmed.sorted.bam\" > \"n100.r10.s062_output/n100.r10.s062.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s062_output/n100.r10.s062.reference.fas\" --call-indels \"n100.r10.s062_output/n100.r10.s062.trimmed.sorted.bam\" > \"n100.r10.s062_output/n100.r10.s062.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s062_output/n100.r10.s062.trimmed.sorted.bam\" > \"n100.r10.s062_output/n100.r10.s062.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s062_output/n100.r10.s062.depth.txt\" \"n100.r10.s062_output/n100.r10.s062.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s062_output/n100.r10.s062.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s062_output/n100.r10.s062.reference.fas\" | bcftools consensus -m \"n100.r10.s062_output/n100.r10.s062.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s062_output/n100.r10.s062.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s062_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s062_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s062_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task cc4d6c79 (flow a27124a9): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s024_output\"\n        wget -O \"n100.r10.s024_output/n100.r10.s024.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s024_output/n100.r10.s024.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s024_output/n100.r10.s024.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s024_output/n100.r10.s024.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s024_output/n100.r10.s024.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s024_output/n100.r10.s024.reference.fas\" \"n100.r10.s024_output/n100.r10.s024.fq1.fastq\" \"n100.r10.s024_output/n100.r10.s024.fq2.fastq\" | samtools view -bS - > \"n100.r10.s024_output/n100.r10.s024.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s024_output/n100.r10.s024.untrimmed.sorted.bam\" \"n100.r10.s024_output/n100.r10.s024.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s024_output/n100.r10.s024.untrimmed.sorted.bam\" -b \"n100.r10.s024_output/n100.r10.s024.primers.bed\" -p \"n100.r10.s024_output/n100.r10.s024.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s024_output/n100.r10.s024.trimmed.sorted.bam\" \"n100.r10.s024_output/n100.r10.s024.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s024_output/n100.r10.s024.reference.fas\" \"n100.r10.s024_output/n100.r10.s024.trimmed.sorted.bam\" > \"n100.r10.s024_output/n100.r10.s024.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s024_output/n100.r10.s024.reference.fas\" --call-indels \"n100.r10.s024_output/n100.r10.s024.trimmed.sorted.bam\" > \"n100.r10.s024_output/n100.r10.s024.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s024_output/n100.r10.s024.trimmed.sorted.bam\" > \"n100.r10.s024_output/n100.r10.s024.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s024_output/n100.r10.s024.depth.txt\" \"n100.r10.s024_output/n100.r10.s024.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s024_output/n100.r10.s024.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s024_output/n100.r10.s024.reference.fas\" | bcftools consensus -m \"n100.r10.s024_output/n100.r10.s024.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s024_output/n100.r10.s024.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s024_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s024_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s024_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 8e195244 (flow 62a7eeea): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s071_output\"\n        wget -O \"n100.r10.s071_output/n100.r10.s071.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s071_output/n100.r10.s071.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s071_output/n100.r10.s071.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s071_output/n100.r10.s071.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s071_output/n100.r10.s071.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s071_output/n100.r10.s071.reference.fas\" \"n100.r10.s071_output/n100.r10.s071.fq1.fastq\" \"n100.r10.s071_output/n100.r10.s071.fq2.fastq\" | samtools view -bS - > \"n100.r10.s071_output/n100.r10.s071.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s071_output/n100.r10.s071.untrimmed.sorted.bam\" \"n100.r10.s071_output/n100.r10.s071.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s071_output/n100.r10.s071.untrimmed.sorted.bam\" -b \"n100.r10.s071_output/n100.r10.s071.primers.bed\" -p \"n100.r10.s071_output/n100.r10.s071.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s071_output/n100.r10.s071.trimmed.sorted.bam\" \"n100.r10.s071_output/n100.r10.s071.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s071_output/n100.r10.s071.reference.fas\" \"n100.r10.s071_output/n100.r10.s071.trimmed.sorted.bam\" > \"n100.r10.s071_output/n100.r10.s071.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s071_output/n100.r10.s071.reference.fas\" --call-indels \"n100.r10.s071_output/n100.r10.s071.trimmed.sorted.bam\" > \"n100.r10.s071_output/n100.r10.s071.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s071_output/n100.r10.s071.trimmed.sorted.bam\" > \"n100.r10.s071_output/n100.r10.s071.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s071_output/n100.r10.s071.depth.txt\" \"n100.r10.s071_output/n100.r10.s071.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s071_output/n100.r10.s071.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s071_output/n100.r10.s071.reference.fas\" | bcftools consensus -m \"n100.r10.s071_output/n100.r10.s071.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s071_output/n100.r10.s071.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s071_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s071_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s071_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 9b005cb6 (flow 4e0c766c): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s097_output\"\n        wget -O \"n100.r10.s097_output/n100.r10.s097.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s097_output/n100.r10.s097.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s097_output/n100.r10.s097.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s097_output/n100.r10.s097.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s097_output/n100.r10.s097.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s097_output/n100.r10.s097.reference.fas\" \"n100.r10.s097_output/n100.r10.s097.fq1.fastq\" \"n100.r10.s097_output/n100.r10.s097.fq2.fastq\" | samtools view -bS - > \"n100.r10.s097_output/n100.r10.s097.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s097_output/n100.r10.s097.untrimmed.sorted.bam\" \"n100.r10.s097_output/n100.r10.s097.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s097_output/n100.r10.s097.untrimmed.sorted.bam\" -b \"n100.r10.s097_output/n100.r10.s097.primers.bed\" -p \"n100.r10.s097_output/n100.r10.s097.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s097_output/n100.r10.s097.trimmed.sorted.bam\" \"n100.r10.s097_output/n100.r10.s097.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s097_output/n100.r10.s097.reference.fas\" \"n100.r10.s097_output/n100.r10.s097.trimmed.sorted.bam\" > \"n100.r10.s097_output/n100.r10.s097.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s097_output/n100.r10.s097.reference.fas\" --call-indels \"n100.r10.s097_output/n100.r10.s097.trimmed.sorted.bam\" > \"n100.r10.s097_output/n100.r10.s097.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s097_output/n100.r10.s097.trimmed.sorted.bam\" > \"n100.r10.s097_output/n100.r10.s097.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s097_output/n100.r10.s097.depth.txt\" \"n100.r10.s097_output/n100.r10.s097.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s097_output/n100.r10.s097.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s097_output/n100.r10.s097.reference.fas\" | bcftools consensus -m \"n100.r10.s097_output/n100.r10.s097.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s097_output/n100.r10.s097.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s097_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s097_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s097_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task a74afbde (flow 76734b91): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s051_output\"\n        wget -O \"n100.r10.s051_output/n100.r10.s051.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s051_output/n100.r10.s051.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s051_output/n100.r10.s051.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s051_output/n100.r10.s051.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s051_output/n100.r10.s051.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s051_output/n100.r10.s051.reference.fas\" \"n100.r10.s051_output/n100.r10.s051.fq1.fastq\" \"n100.r10.s051_output/n100.r10.s051.fq2.fastq\" | samtools view -bS - > \"n100.r10.s051_output/n100.r10.s051.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s051_output/n100.r10.s051.untrimmed.sorted.bam\" \"n100.r10.s051_output/n100.r10.s051.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s051_output/n100.r10.s051.untrimmed.sorted.bam\" -b \"n100.r10.s051_output/n100.r10.s051.primers.bed\" -p \"n100.r10.s051_output/n100.r10.s051.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s051_output/n100.r10.s051.trimmed.sorted.bam\" \"n100.r10.s051_output/n100.r10.s051.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s051_output/n100.r10.s051.reference.fas\" \"n100.r10.s051_output/n100.r10.s051.trimmed.sorted.bam\" > \"n100.r10.s051_output/n100.r10.s051.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s051_output/n100.r10.s051.reference.fas\" --call-indels \"n100.r10.s051_output/n100.r10.s051.trimmed.sorted.bam\" > \"n100.r10.s051_output/n100.r10.s051.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s051_output/n100.r10.s051.trimmed.sorted.bam\" > \"n100.r10.s051_output/n100.r10.s051.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s051_output/n100.r10.s051.depth.txt\" \"n100.r10.s051_output/n100.r10.s051.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s051_output/n100.r10.s051.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s051_output/n100.r10.s051.reference.fas\" | bcftools consensus -m \"n100.r10.s051_output/n100.r10.s051.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s051_output/n100.r10.s051.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s051_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s051_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s051_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 44a25b37 (flow 39b5a1ee): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s052_output\"\n        wget -O \"n100.r10.s052_output/n100.r10.s052.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s052_output/n100.r10.s052.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s052_output/n100.r10.s052.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s052_output/n100.r10.s052.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s052_output/n100.r10.s052.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s052_output/n100.r10.s052.reference.fas\" \"n100.r10.s052_output/n100.r10.s052.fq1.fastq\" \"n100.r10.s052_output/n100.r10.s052.fq2.fastq\" | samtools view -bS - > \"n100.r10.s052_output/n100.r10.s052.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s052_output/n100.r10.s052.untrimmed.sorted.bam\" \"n100.r10.s052_output/n100.r10.s052.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s052_output/n100.r10.s052.untrimmed.sorted.bam\" -b \"n100.r10.s052_output/n100.r10.s052.primers.bed\" -p \"n100.r10.s052_output/n100.r10.s052.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s052_output/n100.r10.s052.trimmed.sorted.bam\" \"n100.r10.s052_output/n100.r10.s052.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s052_output/n100.r10.s052.reference.fas\" \"n100.r10.s052_output/n100.r10.s052.trimmed.sorted.bam\" > \"n100.r10.s052_output/n100.r10.s052.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s052_output/n100.r10.s052.reference.fas\" --call-indels \"n100.r10.s052_output/n100.r10.s052.trimmed.sorted.bam\" > \"n100.r10.s052_output/n100.r10.s052.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s052_output/n100.r10.s052.trimmed.sorted.bam\" > \"n100.r10.s052_output/n100.r10.s052.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s052_output/n100.r10.s052.depth.txt\" \"n100.r10.s052_output/n100.r10.s052.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s052_output/n100.r10.s052.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s052_output/n100.r10.s052.reference.fas\" | bcftools consensus -m \"n100.r10.s052_output/n100.r10.s052.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s052_output/n100.r10.s052.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s052_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s052_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s052_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 54c398c1 (flow 43de8083): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s080_output\"\n        wget -O \"n100.r10.s080_output/n100.r10.s080.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s080_output/n100.r10.s080.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s080_output/n100.r10.s080.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s080_output/n100.r10.s080.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s080_output/n100.r10.s080.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s080_output/n100.r10.s080.reference.fas\" \"n100.r10.s080_output/n100.r10.s080.fq1.fastq\" \"n100.r10.s080_output/n100.r10.s080.fq2.fastq\" | samtools view -bS - > \"n100.r10.s080_output/n100.r10.s080.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s080_output/n100.r10.s080.untrimmed.sorted.bam\" \"n100.r10.s080_output/n100.r10.s080.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s080_output/n100.r10.s080.untrimmed.sorted.bam\" -b \"n100.r10.s080_output/n100.r10.s080.primers.bed\" -p \"n100.r10.s080_output/n100.r10.s080.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s080_output/n100.r10.s080.trimmed.sorted.bam\" \"n100.r10.s080_output/n100.r10.s080.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s080_output/n100.r10.s080.reference.fas\" \"n100.r10.s080_output/n100.r10.s080.trimmed.sorted.bam\" > \"n100.r10.s080_output/n100.r10.s080.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s080_output/n100.r10.s080.reference.fas\" --call-indels \"n100.r10.s080_output/n100.r10.s080.trimmed.sorted.bam\" > \"n100.r10.s080_output/n100.r10.s080.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s080_output/n100.r10.s080.trimmed.sorted.bam\" > \"n100.r10.s080_output/n100.r10.s080.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s080_output/n100.r10.s080.depth.txt\" \"n100.r10.s080_output/n100.r10.s080.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s080_output/n100.r10.s080.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s080_output/n100.r10.s080.reference.fas\" | bcftools consensus -m \"n100.r10.s080_output/n100.r10.s080.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s080_output/n100.r10.s080.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s080_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s080_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s080_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 922533fe (flow 9b575067): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s072_output\"\n        wget -O \"n100.r10.s072_output/n100.r10.s072.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s072_output/n100.r10.s072.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s072_output/n100.r10.s072.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s072_output/n100.r10.s072.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s072_output/n100.r10.s072.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s072_output/n100.r10.s072.reference.fas\" \"n100.r10.s072_output/n100.r10.s072.fq1.fastq\" \"n100.r10.s072_output/n100.r10.s072.fq2.fastq\" | samtools view -bS - > \"n100.r10.s072_output/n100.r10.s072.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s072_output/n100.r10.s072.untrimmed.sorted.bam\" \"n100.r10.s072_output/n100.r10.s072.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s072_output/n100.r10.s072.untrimmed.sorted.bam\" -b \"n100.r10.s072_output/n100.r10.s072.primers.bed\" -p \"n100.r10.s072_output/n100.r10.s072.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s072_output/n100.r10.s072.trimmed.sorted.bam\" \"n100.r10.s072_output/n100.r10.s072.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s072_output/n100.r10.s072.reference.fas\" \"n100.r10.s072_output/n100.r10.s072.trimmed.sorted.bam\" > \"n100.r10.s072_output/n100.r10.s072.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s072_output/n100.r10.s072.reference.fas\" --call-indels \"n100.r10.s072_output/n100.r10.s072.trimmed.sorted.bam\" > \"n100.r10.s072_output/n100.r10.s072.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s072_output/n100.r10.s072.trimmed.sorted.bam\" > \"n100.r10.s072_output/n100.r10.s072.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s072_output/n100.r10.s072.depth.txt\" \"n100.r10.s072_output/n100.r10.s072.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s072_output/n100.r10.s072.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s072_output/n100.r10.s072.reference.fas\" | bcftools consensus -m \"n100.r10.s072_output/n100.r10.s072.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s072_output/n100.r10.s072.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s072_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s072_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s072_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 974bd136 (flow 7368f9bf): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s099_output\"\n        wget -O \"n100.r10.s099_output/n100.r10.s099.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s099_output/n100.r10.s099.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s099_output/n100.r10.s099.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s099_output/n100.r10.s099.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s099_output/n100.r10.s099.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s099_output/n100.r10.s099.reference.fas\" \"n100.r10.s099_output/n100.r10.s099.fq1.fastq\" \"n100.r10.s099_output/n100.r10.s099.fq2.fastq\" | samtools view -bS - > \"n100.r10.s099_output/n100.r10.s099.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s099_output/n100.r10.s099.untrimmed.sorted.bam\" \"n100.r10.s099_output/n100.r10.s099.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s099_output/n100.r10.s099.untrimmed.sorted.bam\" -b \"n100.r10.s099_output/n100.r10.s099.primers.bed\" -p \"n100.r10.s099_output/n100.r10.s099.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s099_output/n100.r10.s099.trimmed.sorted.bam\" \"n100.r10.s099_output/n100.r10.s099.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s099_output/n100.r10.s099.reference.fas\" \"n100.r10.s099_output/n100.r10.s099.trimmed.sorted.bam\" > \"n100.r10.s099_output/n100.r10.s099.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s099_output/n100.r10.s099.reference.fas\" --call-indels \"n100.r10.s099_output/n100.r10.s099.trimmed.sorted.bam\" > \"n100.r10.s099_output/n100.r10.s099.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s099_output/n100.r10.s099.trimmed.sorted.bam\" > \"n100.r10.s099_output/n100.r10.s099.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s099_output/n100.r10.s099.depth.txt\" \"n100.r10.s099_output/n100.r10.s099.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s099_output/n100.r10.s099.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s099_output/n100.r10.s099.reference.fas\" | bcftools consensus -m \"n100.r10.s099_output/n100.r10.s099.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s099_output/n100.r10.s099.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s099_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s099_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s099_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task b00ef45e (flow 62acfe5d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s055_output\"\n        wget -O \"n100.r10.s055_output/n100.r10.s055.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s055_output/n100.r10.s055.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s055_output/n100.r10.s055.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s055_output/n100.r10.s055.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s055_output/n100.r10.s055.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s055_output/n100.r10.s055.reference.fas\" \"n100.r10.s055_output/n100.r10.s055.fq1.fastq\" \"n100.r10.s055_output/n100.r10.s055.fq2.fastq\" | samtools view -bS - > \"n100.r10.s055_output/n100.r10.s055.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s055_output/n100.r10.s055.untrimmed.sorted.bam\" \"n100.r10.s055_output/n100.r10.s055.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s055_output/n100.r10.s055.untrimmed.sorted.bam\" -b \"n100.r10.s055_output/n100.r10.s055.primers.bed\" -p \"n100.r10.s055_output/n100.r10.s055.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s055_output/n100.r10.s055.trimmed.sorted.bam\" \"n100.r10.s055_output/n100.r10.s055.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s055_output/n100.r10.s055.reference.fas\" \"n100.r10.s055_output/n100.r10.s055.trimmed.sorted.bam\" > \"n100.r10.s055_output/n100.r10.s055.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s055_output/n100.r10.s055.reference.fas\" --call-indels \"n100.r10.s055_output/n100.r10.s055.trimmed.sorted.bam\" > \"n100.r10.s055_output/n100.r10.s055.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s055_output/n100.r10.s055.trimmed.sorted.bam\" > \"n100.r10.s055_output/n100.r10.s055.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s055_output/n100.r10.s055.depth.txt\" \"n100.r10.s055_output/n100.r10.s055.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s055_output/n100.r10.s055.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s055_output/n100.r10.s055.reference.fas\" | bcftools consensus -m \"n100.r10.s055_output/n100.r10.s055.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s055_output/n100.r10.s055.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s055_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s055_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s055_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task da1aa7bb (flow f919f347): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s068_output\"\n        wget -O \"n100.r10.s068_output/n100.r10.s068.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s068_output/n100.r10.s068.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s068_output/n100.r10.s068.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s068_output/n100.r10.s068.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s068_output/n100.r10.s068.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s068_output/n100.r10.s068.reference.fas\" \"n100.r10.s068_output/n100.r10.s068.fq1.fastq\" \"n100.r10.s068_output/n100.r10.s068.fq2.fastq\" | samtools view -bS - > \"n100.r10.s068_output/n100.r10.s068.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s068_output/n100.r10.s068.untrimmed.sorted.bam\" \"n100.r10.s068_output/n100.r10.s068.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s068_output/n100.r10.s068.untrimmed.sorted.bam\" -b \"n100.r10.s068_output/n100.r10.s068.primers.bed\" -p \"n100.r10.s068_output/n100.r10.s068.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s068_output/n100.r10.s068.trimmed.sorted.bam\" \"n100.r10.s068_output/n100.r10.s068.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s068_output/n100.r10.s068.reference.fas\" \"n100.r10.s068_output/n100.r10.s068.trimmed.sorted.bam\" > \"n100.r10.s068_output/n100.r10.s068.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s068_output/n100.r10.s068.reference.fas\" --call-indels \"n100.r10.s068_output/n100.r10.s068.trimmed.sorted.bam\" > \"n100.r10.s068_output/n100.r10.s068.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s068_output/n100.r10.s068.trimmed.sorted.bam\" > \"n100.r10.s068_output/n100.r10.s068.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s068_output/n100.r10.s068.depth.txt\" \"n100.r10.s068_output/n100.r10.s068.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s068_output/n100.r10.s068.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s068_output/n100.r10.s068.reference.fas\" | bcftools consensus -m \"n100.r10.s068_output/n100.r10.s068.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s068_output/n100.r10.s068.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s068_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s068_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s068_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 09c401c4 (flow 22954720): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s018_output\"\n        wget -O \"n100.r10.s018_output/n100.r10.s018.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s018_output/n100.r10.s018.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s018_output/n100.r10.s018.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s018_output/n100.r10.s018.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s018_output/n100.r10.s018.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s018_output/n100.r10.s018.reference.fas\" \"n100.r10.s018_output/n100.r10.s018.fq1.fastq\" \"n100.r10.s018_output/n100.r10.s018.fq2.fastq\" | samtools view -bS - > \"n100.r10.s018_output/n100.r10.s018.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s018_output/n100.r10.s018.untrimmed.sorted.bam\" \"n100.r10.s018_output/n100.r10.s018.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s018_output/n100.r10.s018.untrimmed.sorted.bam\" -b \"n100.r10.s018_output/n100.r10.s018.primers.bed\" -p \"n100.r10.s018_output/n100.r10.s018.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s018_output/n100.r10.s018.trimmed.sorted.bam\" \"n100.r10.s018_output/n100.r10.s018.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s018_output/n100.r10.s018.reference.fas\" \"n100.r10.s018_output/n100.r10.s018.trimmed.sorted.bam\" > \"n100.r10.s018_output/n100.r10.s018.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s018_output/n100.r10.s018.reference.fas\" --call-indels \"n100.r10.s018_output/n100.r10.s018.trimmed.sorted.bam\" > \"n100.r10.s018_output/n100.r10.s018.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s018_output/n100.r10.s018.trimmed.sorted.bam\" > \"n100.r10.s018_output/n100.r10.s018.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s018_output/n100.r10.s018.depth.txt\" \"n100.r10.s018_output/n100.r10.s018.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s018_output/n100.r10.s018.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s018_output/n100.r10.s018.reference.fas\" | bcftools consensus -m \"n100.r10.s018_output/n100.r10.s018.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s018_output/n100.r10.s018.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s018_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s018_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s018_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task f24dd117 (flow d06527d9): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s084_output\"\n        wget -O \"n100.r10.s084_output/n100.r10.s084.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s084_output/n100.r10.s084.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s084_output/n100.r10.s084.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s084_output/n100.r10.s084.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s084_output/n100.r10.s084.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s084_output/n100.r10.s084.reference.fas\" \"n100.r10.s084_output/n100.r10.s084.fq1.fastq\" \"n100.r10.s084_output/n100.r10.s084.fq2.fastq\" | samtools view -bS - > \"n100.r10.s084_output/n100.r10.s084.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s084_output/n100.r10.s084.untrimmed.sorted.bam\" \"n100.r10.s084_output/n100.r10.s084.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s084_output/n100.r10.s084.untrimmed.sorted.bam\" -b \"n100.r10.s084_output/n100.r10.s084.primers.bed\" -p \"n100.r10.s084_output/n100.r10.s084.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s084_output/n100.r10.s084.trimmed.sorted.bam\" \"n100.r10.s084_output/n100.r10.s084.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s084_output/n100.r10.s084.reference.fas\" \"n100.r10.s084_output/n100.r10.s084.trimmed.sorted.bam\" > \"n100.r10.s084_output/n100.r10.s084.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s084_output/n100.r10.s084.reference.fas\" --call-indels \"n100.r10.s084_output/n100.r10.s084.trimmed.sorted.bam\" > \"n100.r10.s084_output/n100.r10.s084.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s084_output/n100.r10.s084.trimmed.sorted.bam\" > \"n100.r10.s084_output/n100.r10.s084.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s084_output/n100.r10.s084.depth.txt\" \"n100.r10.s084_output/n100.r10.s084.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s084_output/n100.r10.s084.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s084_output/n100.r10.s084.reference.fas\" | bcftools consensus -m \"n100.r10.s084_output/n100.r10.s084.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s084_output/n100.r10.s084.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s084_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s084_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s084_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task b4908e4d (flow 735398ea): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s075_output\"\n        wget -O \"n100.r10.s075_output/n100.r10.s075.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s075_output/n100.r10.s075.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s075_output/n100.r10.s075.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s075_output/n100.r10.s075.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s075_output/n100.r10.s075.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s075_output/n100.r10.s075.reference.fas\" \"n100.r10.s075_output/n100.r10.s075.fq1.fastq\" \"n100.r10.s075_output/n100.r10.s075.fq2.fastq\" | samtools view -bS - > \"n100.r10.s075_output/n100.r10.s075.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s075_output/n100.r10.s075.untrimmed.sorted.bam\" \"n100.r10.s075_output/n100.r10.s075.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s075_output/n100.r10.s075.untrimmed.sorted.bam\" -b \"n100.r10.s075_output/n100.r10.s075.primers.bed\" -p \"n100.r10.s075_output/n100.r10.s075.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s075_output/n100.r10.s075.trimmed.sorted.bam\" \"n100.r10.s075_output/n100.r10.s075.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s075_output/n100.r10.s075.reference.fas\" \"n100.r10.s075_output/n100.r10.s075.trimmed.sorted.bam\" > \"n100.r10.s075_output/n100.r10.s075.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s075_output/n100.r10.s075.reference.fas\" --call-indels \"n100.r10.s075_output/n100.r10.s075.trimmed.sorted.bam\" > \"n100.r10.s075_output/n100.r10.s075.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s075_output/n100.r10.s075.trimmed.sorted.bam\" > \"n100.r10.s075_output/n100.r10.s075.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s075_output/n100.r10.s075.depth.txt\" \"n100.r10.s075_output/n100.r10.s075.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s075_output/n100.r10.s075.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s075_output/n100.r10.s075.reference.fas\" | bcftools consensus -m \"n100.r10.s075_output/n100.r10.s075.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s075_output/n100.r10.s075.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s075_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s075_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s075_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 600bf6cf (flow 21732518): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s012_output\"\n        wget -O \"n100.r10.s012_output/n100.r10.s012.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s012_output/n100.r10.s012.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s012_output/n100.r10.s012.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s012_output/n100.r10.s012.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s012_output/n100.r10.s012.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s012_output/n100.r10.s012.reference.fas\" \"n100.r10.s012_output/n100.r10.s012.fq1.fastq\" \"n100.r10.s012_output/n100.r10.s012.fq2.fastq\" | samtools view -bS - > \"n100.r10.s012_output/n100.r10.s012.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s012_output/n100.r10.s012.untrimmed.sorted.bam\" \"n100.r10.s012_output/n100.r10.s012.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s012_output/n100.r10.s012.untrimmed.sorted.bam\" -b \"n100.r10.s012_output/n100.r10.s012.primers.bed\" -p \"n100.r10.s012_output/n100.r10.s012.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s012_output/n100.r10.s012.trimmed.sorted.bam\" \"n100.r10.s012_output/n100.r10.s012.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s012_output/n100.r10.s012.reference.fas\" \"n100.r10.s012_output/n100.r10.s012.trimmed.sorted.bam\" > \"n100.r10.s012_output/n100.r10.s012.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s012_output/n100.r10.s012.reference.fas\" --call-indels \"n100.r10.s012_output/n100.r10.s012.trimmed.sorted.bam\" > \"n100.r10.s012_output/n100.r10.s012.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s012_output/n100.r10.s012.trimmed.sorted.bam\" > \"n100.r10.s012_output/n100.r10.s012.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s012_output/n100.r10.s012.depth.txt\" \"n100.r10.s012_output/n100.r10.s012.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s012_output/n100.r10.s012.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s012_output/n100.r10.s012.reference.fas\" | bcftools consensus -m \"n100.r10.s012_output/n100.r10.s012.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s012_output/n100.r10.s012.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s012_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s012_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s012_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task bd8d9d6a (flow 94edc653): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s089_output\"\n        wget -O \"n100.r10.s089_output/n100.r10.s089.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s089_output/n100.r10.s089.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s089_output/n100.r10.s089.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s089_output/n100.r10.s089.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s089_output/n100.r10.s089.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s089_output/n100.r10.s089.reference.fas\" \"n100.r10.s089_output/n100.r10.s089.fq1.fastq\" \"n100.r10.s089_output/n100.r10.s089.fq2.fastq\" | samtools view -bS - > \"n100.r10.s089_output/n100.r10.s089.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s089_output/n100.r10.s089.untrimmed.sorted.bam\" \"n100.r10.s089_output/n100.r10.s089.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s089_output/n100.r10.s089.untrimmed.sorted.bam\" -b \"n100.r10.s089_output/n100.r10.s089.primers.bed\" -p \"n100.r10.s089_output/n100.r10.s089.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s089_output/n100.r10.s089.trimmed.sorted.bam\" \"n100.r10.s089_output/n100.r10.s089.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s089_output/n100.r10.s089.reference.fas\" \"n100.r10.s089_output/n100.r10.s089.trimmed.sorted.bam\" > \"n100.r10.s089_output/n100.r10.s089.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s089_output/n100.r10.s089.reference.fas\" --call-indels \"n100.r10.s089_output/n100.r10.s089.trimmed.sorted.bam\" > \"n100.r10.s089_output/n100.r10.s089.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s089_output/n100.r10.s089.trimmed.sorted.bam\" > \"n100.r10.s089_output/n100.r10.s089.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s089_output/n100.r10.s089.depth.txt\" \"n100.r10.s089_output/n100.r10.s089.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s089_output/n100.r10.s089.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s089_output/n100.r10.s089.reference.fas\" | bcftools consensus -m \"n100.r10.s089_output/n100.r10.s089.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s089_output/n100.r10.s089.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s089_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s089_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s089_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task f070a1d7 (flow 943fd4e3): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s079_output\"\n        wget -O \"n100.r10.s079_output/n100.r10.s079.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s079_output/n100.r10.s079.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s079_output/n100.r10.s079.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s079_output/n100.r10.s079.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s079_output/n100.r10.s079.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s079_output/n100.r10.s079.reference.fas\" \"n100.r10.s079_output/n100.r10.s079.fq1.fastq\" \"n100.r10.s079_output/n100.r10.s079.fq2.fastq\" | samtools view -bS - > \"n100.r10.s079_output/n100.r10.s079.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s079_output/n100.r10.s079.untrimmed.sorted.bam\" \"n100.r10.s079_output/n100.r10.s079.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s079_output/n100.r10.s079.untrimmed.sorted.bam\" -b \"n100.r10.s079_output/n100.r10.s079.primers.bed\" -p \"n100.r10.s079_output/n100.r10.s079.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s079_output/n100.r10.s079.trimmed.sorted.bam\" \"n100.r10.s079_output/n100.r10.s079.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s079_output/n100.r10.s079.reference.fas\" \"n100.r10.s079_output/n100.r10.s079.trimmed.sorted.bam\" > \"n100.r10.s079_output/n100.r10.s079.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s079_output/n100.r10.s079.reference.fas\" --call-indels \"n100.r10.s079_output/n100.r10.s079.trimmed.sorted.bam\" > \"n100.r10.s079_output/n100.r10.s079.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s079_output/n100.r10.s079.trimmed.sorted.bam\" > \"n100.r10.s079_output/n100.r10.s079.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s079_output/n100.r10.s079.depth.txt\" \"n100.r10.s079_output/n100.r10.s079.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s079_output/n100.r10.s079.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s079_output/n100.r10.s079.reference.fas\" | bcftools consensus -m \"n100.r10.s079_output/n100.r10.s079.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s079_output/n100.r10.s079.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s079_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s079_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s079_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 74420576 (flow eaea6f09): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s065_output\"\n        wget -O \"n100.r10.s065_output/n100.r10.s065.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s065_output/n100.r10.s065.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s065_output/n100.r10.s065.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s065_output/n100.r10.s065.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s065_output/n100.r10.s065.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s065_output/n100.r10.s065.reference.fas\" \"n100.r10.s065_output/n100.r10.s065.fq1.fastq\" \"n100.r10.s065_output/n100.r10.s065.fq2.fastq\" | samtools view -bS - > \"n100.r10.s065_output/n100.r10.s065.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s065_output/n100.r10.s065.untrimmed.sorted.bam\" \"n100.r10.s065_output/n100.r10.s065.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s065_output/n100.r10.s065.untrimmed.sorted.bam\" -b \"n100.r10.s065_output/n100.r10.s065.primers.bed\" -p \"n100.r10.s065_output/n100.r10.s065.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s065_output/n100.r10.s065.trimmed.sorted.bam\" \"n100.r10.s065_output/n100.r10.s065.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s065_output/n100.r10.s065.reference.fas\" \"n100.r10.s065_output/n100.r10.s065.trimmed.sorted.bam\" > \"n100.r10.s065_output/n100.r10.s065.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s065_output/n100.r10.s065.reference.fas\" --call-indels \"n100.r10.s065_output/n100.r10.s065.trimmed.sorted.bam\" > \"n100.r10.s065_output/n100.r10.s065.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s065_output/n100.r10.s065.trimmed.sorted.bam\" > \"n100.r10.s065_output/n100.r10.s065.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s065_output/n100.r10.s065.depth.txt\" \"n100.r10.s065_output/n100.r10.s065.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s065_output/n100.r10.s065.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s065_output/n100.r10.s065.reference.fas\" | bcftools consensus -m \"n100.r10.s065_output/n100.r10.s065.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s065_output/n100.r10.s065.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s065_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s065_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s065_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 74962e85 (flow 82727c77): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s098_output\"\n        wget -O \"n100.r10.s098_output/n100.r10.s098.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s098_output/n100.r10.s098.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s098_output/n100.r10.s098.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s098_output/n100.r10.s098.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s098_output/n100.r10.s098.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s098_output/n100.r10.s098.reference.fas\" \"n100.r10.s098_output/n100.r10.s098.fq1.fastq\" \"n100.r10.s098_output/n100.r10.s098.fq2.fastq\" | samtools view -bS - > \"n100.r10.s098_output/n100.r10.s098.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s098_output/n100.r10.s098.untrimmed.sorted.bam\" \"n100.r10.s098_output/n100.r10.s098.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s098_output/n100.r10.s098.untrimmed.sorted.bam\" -b \"n100.r10.s098_output/n100.r10.s098.primers.bed\" -p \"n100.r10.s098_output/n100.r10.s098.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s098_output/n100.r10.s098.trimmed.sorted.bam\" \"n100.r10.s098_output/n100.r10.s098.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s098_output/n100.r10.s098.reference.fas\" \"n100.r10.s098_output/n100.r10.s098.trimmed.sorted.bam\" > \"n100.r10.s098_output/n100.r10.s098.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s098_output/n100.r10.s098.reference.fas\" --call-indels \"n100.r10.s098_output/n100.r10.s098.trimmed.sorted.bam\" > \"n100.r10.s098_output/n100.r10.s098.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s098_output/n100.r10.s098.trimmed.sorted.bam\" > \"n100.r10.s098_output/n100.r10.s098.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s098_output/n100.r10.s098.depth.txt\" \"n100.r10.s098_output/n100.r10.s098.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s098_output/n100.r10.s098.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s098_output/n100.r10.s098.reference.fas\" | bcftools consensus -m \"n100.r10.s098_output/n100.r10.s098.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s098_output/n100.r10.s098.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s098_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s098_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s098_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 59e7f390 (flow 8552db05): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s059_output\"\n        wget -O \"n100.r10.s059_output/n100.r10.s059.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s059_output/n100.r10.s059.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s059_output/n100.r10.s059.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s059_output/n100.r10.s059.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s059_output/n100.r10.s059.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s059_output/n100.r10.s059.reference.fas\" \"n100.r10.s059_output/n100.r10.s059.fq1.fastq\" \"n100.r10.s059_output/n100.r10.s059.fq2.fastq\" | samtools view -bS - > \"n100.r10.s059_output/n100.r10.s059.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s059_output/n100.r10.s059.untrimmed.sorted.bam\" \"n100.r10.s059_output/n100.r10.s059.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s059_output/n100.r10.s059.untrimmed.sorted.bam\" -b \"n100.r10.s059_output/n100.r10.s059.primers.bed\" -p \"n100.r10.s059_output/n100.r10.s059.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s059_output/n100.r10.s059.trimmed.sorted.bam\" \"n100.r10.s059_output/n100.r10.s059.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s059_output/n100.r10.s059.reference.fas\" \"n100.r10.s059_output/n100.r10.s059.trimmed.sorted.bam\" > \"n100.r10.s059_output/n100.r10.s059.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s059_output/n100.r10.s059.reference.fas\" --call-indels \"n100.r10.s059_output/n100.r10.s059.trimmed.sorted.bam\" > \"n100.r10.s059_output/n100.r10.s059.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s059_output/n100.r10.s059.trimmed.sorted.bam\" > \"n100.r10.s059_output/n100.r10.s059.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s059_output/n100.r10.s059.depth.txt\" \"n100.r10.s059_output/n100.r10.s059.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s059_output/n100.r10.s059.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s059_output/n100.r10.s059.reference.fas\" | bcftools consensus -m \"n100.r10.s059_output/n100.r10.s059.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s059_output/n100.r10.s059.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s059_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s059_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s059_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 592f7c63 (flow a4c9f908): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s054_output\"\n        wget -O \"n100.r10.s054_output/n100.r10.s054.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s054_output/n100.r10.s054.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s054_output/n100.r10.s054.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s054_output/n100.r10.s054.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s054_output/n100.r10.s054.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s054_output/n100.r10.s054.reference.fas\" \"n100.r10.s054_output/n100.r10.s054.fq1.fastq\" \"n100.r10.s054_output/n100.r10.s054.fq2.fastq\" | samtools view -bS - > \"n100.r10.s054_output/n100.r10.s054.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s054_output/n100.r10.s054.untrimmed.sorted.bam\" \"n100.r10.s054_output/n100.r10.s054.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s054_output/n100.r10.s054.untrimmed.sorted.bam\" -b \"n100.r10.s054_output/n100.r10.s054.primers.bed\" -p \"n100.r10.s054_output/n100.r10.s054.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s054_output/n100.r10.s054.trimmed.sorted.bam\" \"n100.r10.s054_output/n100.r10.s054.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s054_output/n100.r10.s054.reference.fas\" \"n100.r10.s054_output/n100.r10.s054.trimmed.sorted.bam\" > \"n100.r10.s054_output/n100.r10.s054.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s054_output/n100.r10.s054.reference.fas\" --call-indels \"n100.r10.s054_output/n100.r10.s054.trimmed.sorted.bam\" > \"n100.r10.s054_output/n100.r10.s054.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s054_output/n100.r10.s054.trimmed.sorted.bam\" > \"n100.r10.s054_output/n100.r10.s054.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s054_output/n100.r10.s054.depth.txt\" \"n100.r10.s054_output/n100.r10.s054.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s054_output/n100.r10.s054.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s054_output/n100.r10.s054.reference.fas\" | bcftools consensus -m \"n100.r10.s054_output/n100.r10.s054.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s054_output/n100.r10.s054.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s054_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s054_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s054_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 9d2f7e82 (flow a018bf83): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s021_output\"\n        wget -O \"n100.r10.s021_output/n100.r10.s021.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s021_output/n100.r10.s021.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s021_output/n100.r10.s021.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s021_output/n100.r10.s021.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s021_output/n100.r10.s021.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s021_output/n100.r10.s021.reference.fas\" \"n100.r10.s021_output/n100.r10.s021.fq1.fastq\" \"n100.r10.s021_output/n100.r10.s021.fq2.fastq\" | samtools view -bS - > \"n100.r10.s021_output/n100.r10.s021.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s021_output/n100.r10.s021.untrimmed.sorted.bam\" \"n100.r10.s021_output/n100.r10.s021.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s021_output/n100.r10.s021.untrimmed.sorted.bam\" -b \"n100.r10.s021_output/n100.r10.s021.primers.bed\" -p \"n100.r10.s021_output/n100.r10.s021.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s021_output/n100.r10.s021.trimmed.sorted.bam\" \"n100.r10.s021_output/n100.r10.s021.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s021_output/n100.r10.s021.reference.fas\" \"n100.r10.s021_output/n100.r10.s021.trimmed.sorted.bam\" > \"n100.r10.s021_output/n100.r10.s021.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s021_output/n100.r10.s021.reference.fas\" --call-indels \"n100.r10.s021_output/n100.r10.s021.trimmed.sorted.bam\" > \"n100.r10.s021_output/n100.r10.s021.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s021_output/n100.r10.s021.trimmed.sorted.bam\" > \"n100.r10.s021_output/n100.r10.s021.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s021_output/n100.r10.s021.depth.txt\" \"n100.r10.s021_output/n100.r10.s021.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s021_output/n100.r10.s021.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s021_output/n100.r10.s021.reference.fas\" | bcftools consensus -m \"n100.r10.s021_output/n100.r10.s021.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s021_output/n100.r10.s021.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s021_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s021_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s021_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 0a2b5832 (flow c7221f94): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s056_output\"\n        wget -O \"n100.r10.s056_output/n100.r10.s056.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s056_output/n100.r10.s056.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s056_output/n100.r10.s056.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s056_output/n100.r10.s056.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s056_output/n100.r10.s056.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s056_output/n100.r10.s056.reference.fas\" \"n100.r10.s056_output/n100.r10.s056.fq1.fastq\" \"n100.r10.s056_output/n100.r10.s056.fq2.fastq\" | samtools view -bS - > \"n100.r10.s056_output/n100.r10.s056.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s056_output/n100.r10.s056.untrimmed.sorted.bam\" \"n100.r10.s056_output/n100.r10.s056.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s056_output/n100.r10.s056.untrimmed.sorted.bam\" -b \"n100.r10.s056_output/n100.r10.s056.primers.bed\" -p \"n100.r10.s056_output/n100.r10.s056.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s056_output/n100.r10.s056.trimmed.sorted.bam\" \"n100.r10.s056_output/n100.r10.s056.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s056_output/n100.r10.s056.reference.fas\" \"n100.r10.s056_output/n100.r10.s056.trimmed.sorted.bam\" > \"n100.r10.s056_output/n100.r10.s056.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s056_output/n100.r10.s056.reference.fas\" --call-indels \"n100.r10.s056_output/n100.r10.s056.trimmed.sorted.bam\" > \"n100.r10.s056_output/n100.r10.s056.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s056_output/n100.r10.s056.trimmed.sorted.bam\" > \"n100.r10.s056_output/n100.r10.s056.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s056_output/n100.r10.s056.depth.txt\" \"n100.r10.s056_output/n100.r10.s056.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s056_output/n100.r10.s056.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s056_output/n100.r10.s056.reference.fas\" | bcftools consensus -m \"n100.r10.s056_output/n100.r10.s056.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s056_output/n100.r10.s056.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s056_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s056_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s056_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 7ddd1093 (flow a692e162): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s073_output\"\n        wget -O \"n100.r10.s073_output/n100.r10.s073.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s073_output/n100.r10.s073.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s073_output/n100.r10.s073.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s073_output/n100.r10.s073.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s073_output/n100.r10.s073.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s073_output/n100.r10.s073.reference.fas\" \"n100.r10.s073_output/n100.r10.s073.fq1.fastq\" \"n100.r10.s073_output/n100.r10.s073.fq2.fastq\" | samtools view -bS - > \"n100.r10.s073_output/n100.r10.s073.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s073_output/n100.r10.s073.untrimmed.sorted.bam\" \"n100.r10.s073_output/n100.r10.s073.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s073_output/n100.r10.s073.untrimmed.sorted.bam\" -b \"n100.r10.s073_output/n100.r10.s073.primers.bed\" -p \"n100.r10.s073_output/n100.r10.s073.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s073_output/n100.r10.s073.trimmed.sorted.bam\" \"n100.r10.s073_output/n100.r10.s073.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s073_output/n100.r10.s073.reference.fas\" \"n100.r10.s073_output/n100.r10.s073.trimmed.sorted.bam\" > \"n100.r10.s073_output/n100.r10.s073.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s073_output/n100.r10.s073.reference.fas\" --call-indels \"n100.r10.s073_output/n100.r10.s073.trimmed.sorted.bam\" > \"n100.r10.s073_output/n100.r10.s073.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s073_output/n100.r10.s073.trimmed.sorted.bam\" > \"n100.r10.s073_output/n100.r10.s073.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s073_output/n100.r10.s073.depth.txt\" \"n100.r10.s073_output/n100.r10.s073.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s073_output/n100.r10.s073.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s073_output/n100.r10.s073.reference.fas\" | bcftools consensus -m \"n100.r10.s073_output/n100.r10.s073.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s073_output/n100.r10.s073.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s073_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s073_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s073_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 1038d1a1 (flow bef79a94): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s100_output\"\n        wget -O \"n100.r10.s100_output/n100.r10.s100.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s100_output/n100.r10.s100.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s100_output/n100.r10.s100.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s100_output/n100.r10.s100.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s100_output/n100.r10.s100.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s100_output/n100.r10.s100.reference.fas\" \"n100.r10.s100_output/n100.r10.s100.fq1.fastq\" \"n100.r10.s100_output/n100.r10.s100.fq2.fastq\" | samtools view -bS - > \"n100.r10.s100_output/n100.r10.s100.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s100_output/n100.r10.s100.untrimmed.sorted.bam\" \"n100.r10.s100_output/n100.r10.s100.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s100_output/n100.r10.s100.untrimmed.sorted.bam\" -b \"n100.r10.s100_output/n100.r10.s100.primers.bed\" -p \"n100.r10.s100_output/n100.r10.s100.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s100_output/n100.r10.s100.trimmed.sorted.bam\" \"n100.r10.s100_output/n100.r10.s100.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s100_output/n100.r10.s100.reference.fas\" \"n100.r10.s100_output/n100.r10.s100.trimmed.sorted.bam\" > \"n100.r10.s100_output/n100.r10.s100.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s100_output/n100.r10.s100.reference.fas\" --call-indels \"n100.r10.s100_output/n100.r10.s100.trimmed.sorted.bam\" > \"n100.r10.s100_output/n100.r10.s100.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s100_output/n100.r10.s100.trimmed.sorted.bam\" > \"n100.r10.s100_output/n100.r10.s100.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s100_output/n100.r10.s100.depth.txt\" \"n100.r10.s100_output/n100.r10.s100.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s100_output/n100.r10.s100.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s100_output/n100.r10.s100.reference.fas\" | bcftools consensus -m \"n100.r10.s100_output/n100.r10.s100.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s100_output/n100.r10.s100.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s100_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s100_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s100_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task b498cd4e (flow fe03b18e): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s083_output\"\n        wget -O \"n100.r10.s083_output/n100.r10.s083.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s083_output/n100.r10.s083.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s083_output/n100.r10.s083.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s083_output/n100.r10.s083.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s083_output/n100.r10.s083.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s083_output/n100.r10.s083.reference.fas\" \"n100.r10.s083_output/n100.r10.s083.fq1.fastq\" \"n100.r10.s083_output/n100.r10.s083.fq2.fastq\" | samtools view -bS - > \"n100.r10.s083_output/n100.r10.s083.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s083_output/n100.r10.s083.untrimmed.sorted.bam\" \"n100.r10.s083_output/n100.r10.s083.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s083_output/n100.r10.s083.untrimmed.sorted.bam\" -b \"n100.r10.s083_output/n100.r10.s083.primers.bed\" -p \"n100.r10.s083_output/n100.r10.s083.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s083_output/n100.r10.s083.trimmed.sorted.bam\" \"n100.r10.s083_output/n100.r10.s083.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s083_output/n100.r10.s083.reference.fas\" \"n100.r10.s083_output/n100.r10.s083.trimmed.sorted.bam\" > \"n100.r10.s083_output/n100.r10.s083.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s083_output/n100.r10.s083.reference.fas\" --call-indels \"n100.r10.s083_output/n100.r10.s083.trimmed.sorted.bam\" > \"n100.r10.s083_output/n100.r10.s083.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s083_output/n100.r10.s083.trimmed.sorted.bam\" > \"n100.r10.s083_output/n100.r10.s083.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s083_output/n100.r10.s083.depth.txt\" \"n100.r10.s083_output/n100.r10.s083.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s083_output/n100.r10.s083.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s083_output/n100.r10.s083.reference.fas\" | bcftools consensus -m \"n100.r10.s083_output/n100.r10.s083.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s083_output/n100.r10.s083.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s083_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s083_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s083_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 404ec61a (flow 5ae42756): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s077_output\"\n        wget -O \"n100.r10.s077_output/n100.r10.s077.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s077_output/n100.r10.s077.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s077_output/n100.r10.s077.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s077_output/n100.r10.s077.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s077_output/n100.r10.s077.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s077_output/n100.r10.s077.reference.fas\" \"n100.r10.s077_output/n100.r10.s077.fq1.fastq\" \"n100.r10.s077_output/n100.r10.s077.fq2.fastq\" | samtools view -bS - > \"n100.r10.s077_output/n100.r10.s077.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s077_output/n100.r10.s077.untrimmed.sorted.bam\" \"n100.r10.s077_output/n100.r10.s077.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s077_output/n100.r10.s077.untrimmed.sorted.bam\" -b \"n100.r10.s077_output/n100.r10.s077.primers.bed\" -p \"n100.r10.s077_output/n100.r10.s077.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s077_output/n100.r10.s077.trimmed.sorted.bam\" \"n100.r10.s077_output/n100.r10.s077.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s077_output/n100.r10.s077.reference.fas\" \"n100.r10.s077_output/n100.r10.s077.trimmed.sorted.bam\" > \"n100.r10.s077_output/n100.r10.s077.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s077_output/n100.r10.s077.reference.fas\" --call-indels \"n100.r10.s077_output/n100.r10.s077.trimmed.sorted.bam\" > \"n100.r10.s077_output/n100.r10.s077.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s077_output/n100.r10.s077.trimmed.sorted.bam\" > \"n100.r10.s077_output/n100.r10.s077.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s077_output/n100.r10.s077.depth.txt\" \"n100.r10.s077_output/n100.r10.s077.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s077_output/n100.r10.s077.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s077_output/n100.r10.s077.reference.fas\" | bcftools consensus -m \"n100.r10.s077_output/n100.r10.s077.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s077_output/n100.r10.s077.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s077_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s077_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s077_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 1400e0ee (flow 3bf338dc): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s003_output\"\n        wget -O \"n100.r10.s003_output/n100.r10.s003.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s003_output/n100.r10.s003.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s003_output/n100.r10.s003.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s003_output/n100.r10.s003.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s003_output/n100.r10.s003.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s003_output/n100.r10.s003.reference.fas\" \"n100.r10.s003_output/n100.r10.s003.fq1.fastq\" \"n100.r10.s003_output/n100.r10.s003.fq2.fastq\" | samtools view -bS - > \"n100.r10.s003_output/n100.r10.s003.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s003_output/n100.r10.s003.untrimmed.sorted.bam\" \"n100.r10.s003_output/n100.r10.s003.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s003_output/n100.r10.s003.untrimmed.sorted.bam\" -b \"n100.r10.s003_output/n100.r10.s003.primers.bed\" -p \"n100.r10.s003_output/n100.r10.s003.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s003_output/n100.r10.s003.trimmed.sorted.bam\" \"n100.r10.s003_output/n100.r10.s003.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s003_output/n100.r10.s003.reference.fas\" \"n100.r10.s003_output/n100.r10.s003.trimmed.sorted.bam\" > \"n100.r10.s003_output/n100.r10.s003.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s003_output/n100.r10.s003.reference.fas\" --call-indels \"n100.r10.s003_output/n100.r10.s003.trimmed.sorted.bam\" > \"n100.r10.s003_output/n100.r10.s003.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s003_output/n100.r10.s003.trimmed.sorted.bam\" > \"n100.r10.s003_output/n100.r10.s003.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s003_output/n100.r10.s003.depth.txt\" \"n100.r10.s003_output/n100.r10.s003.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s003_output/n100.r10.s003.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s003_output/n100.r10.s003.reference.fas\" | bcftools consensus -m \"n100.r10.s003_output/n100.r10.s003.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s003_output/n100.r10.s003.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s003_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s003_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s003_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 9a1d8533 (flow 60012892): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s016_output\"\n        wget -O \"n100.r10.s016_output/n100.r10.s016.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s016_output/n100.r10.s016.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s016_output/n100.r10.s016.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s016_output/n100.r10.s016.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s016_output/n100.r10.s016.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s016_output/n100.r10.s016.reference.fas\" \"n100.r10.s016_output/n100.r10.s016.fq1.fastq\" \"n100.r10.s016_output/n100.r10.s016.fq2.fastq\" | samtools view -bS - > \"n100.r10.s016_output/n100.r10.s016.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s016_output/n100.r10.s016.untrimmed.sorted.bam\" \"n100.r10.s016_output/n100.r10.s016.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s016_output/n100.r10.s016.untrimmed.sorted.bam\" -b \"n100.r10.s016_output/n100.r10.s016.primers.bed\" -p \"n100.r10.s016_output/n100.r10.s016.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s016_output/n100.r10.s016.trimmed.sorted.bam\" \"n100.r10.s016_output/n100.r10.s016.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s016_output/n100.r10.s016.reference.fas\" \"n100.r10.s016_output/n100.r10.s016.trimmed.sorted.bam\" > \"n100.r10.s016_output/n100.r10.s016.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s016_output/n100.r10.s016.reference.fas\" --call-indels \"n100.r10.s016_output/n100.r10.s016.trimmed.sorted.bam\" > \"n100.r10.s016_output/n100.r10.s016.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s016_output/n100.r10.s016.trimmed.sorted.bam\" > \"n100.r10.s016_output/n100.r10.s016.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s016_output/n100.r10.s016.depth.txt\" \"n100.r10.s016_output/n100.r10.s016.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s016_output/n100.r10.s016.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s016_output/n100.r10.s016.reference.fas\" | bcftools consensus -m \"n100.r10.s016_output/n100.r10.s016.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s016_output/n100.r10.s016.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s016_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s016_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s016_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 3134442c (flow c17adea7): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s069_output\"\n        wget -O \"n100.r10.s069_output/n100.r10.s069.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s069_output/n100.r10.s069.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s069_output/n100.r10.s069.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s069_output/n100.r10.s069.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s069_output/n100.r10.s069.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s069_output/n100.r10.s069.reference.fas\" \"n100.r10.s069_output/n100.r10.s069.fq1.fastq\" \"n100.r10.s069_output/n100.r10.s069.fq2.fastq\" | samtools view -bS - > \"n100.r10.s069_output/n100.r10.s069.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s069_output/n100.r10.s069.untrimmed.sorted.bam\" \"n100.r10.s069_output/n100.r10.s069.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s069_output/n100.r10.s069.untrimmed.sorted.bam\" -b \"n100.r10.s069_output/n100.r10.s069.primers.bed\" -p \"n100.r10.s069_output/n100.r10.s069.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s069_output/n100.r10.s069.trimmed.sorted.bam\" \"n100.r10.s069_output/n100.r10.s069.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s069_output/n100.r10.s069.reference.fas\" \"n100.r10.s069_output/n100.r10.s069.trimmed.sorted.bam\" > \"n100.r10.s069_output/n100.r10.s069.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s069_output/n100.r10.s069.reference.fas\" --call-indels \"n100.r10.s069_output/n100.r10.s069.trimmed.sorted.bam\" > \"n100.r10.s069_output/n100.r10.s069.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s069_output/n100.r10.s069.trimmed.sorted.bam\" > \"n100.r10.s069_output/n100.r10.s069.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s069_output/n100.r10.s069.depth.txt\" \"n100.r10.s069_output/n100.r10.s069.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s069_output/n100.r10.s069.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s069_output/n100.r10.s069.reference.fas\" | bcftools consensus -m \"n100.r10.s069_output/n100.r10.s069.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s069_output/n100.r10.s069.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s069_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s069_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s069_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 28aacb8b (flow 5c83df52): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s023_output\"\n        wget -O \"n100.r10.s023_output/n100.r10.s023.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s023_output/n100.r10.s023.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s023_output/n100.r10.s023.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s023_output/n100.r10.s023.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s023_output/n100.r10.s023.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s023_output/n100.r10.s023.reference.fas\" \"n100.r10.s023_output/n100.r10.s023.fq1.fastq\" \"n100.r10.s023_output/n100.r10.s023.fq2.fastq\" | samtools view -bS - > \"n100.r10.s023_output/n100.r10.s023.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s023_output/n100.r10.s023.untrimmed.sorted.bam\" \"n100.r10.s023_output/n100.r10.s023.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s023_output/n100.r10.s023.untrimmed.sorted.bam\" -b \"n100.r10.s023_output/n100.r10.s023.primers.bed\" -p \"n100.r10.s023_output/n100.r10.s023.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s023_output/n100.r10.s023.trimmed.sorted.bam\" \"n100.r10.s023_output/n100.r10.s023.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s023_output/n100.r10.s023.reference.fas\" \"n100.r10.s023_output/n100.r10.s023.trimmed.sorted.bam\" > \"n100.r10.s023_output/n100.r10.s023.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s023_output/n100.r10.s023.reference.fas\" --call-indels \"n100.r10.s023_output/n100.r10.s023.trimmed.sorted.bam\" > \"n100.r10.s023_output/n100.r10.s023.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s023_output/n100.r10.s023.trimmed.sorted.bam\" > \"n100.r10.s023_output/n100.r10.s023.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s023_output/n100.r10.s023.depth.txt\" \"n100.r10.s023_output/n100.r10.s023.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s023_output/n100.r10.s023.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s023_output/n100.r10.s023.reference.fas\" | bcftools consensus -m \"n100.r10.s023_output/n100.r10.s023.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s023_output/n100.r10.s023.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s023_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s023_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s023_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 215d2c98 (flow f5b79134): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s020_output\"\n        wget -O \"n100.r10.s020_output/n100.r10.s020.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s020_output/n100.r10.s020.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s020_output/n100.r10.s020.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s020_output/n100.r10.s020.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s020_output/n100.r10.s020.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s020_output/n100.r10.s020.reference.fas\" \"n100.r10.s020_output/n100.r10.s020.fq1.fastq\" \"n100.r10.s020_output/n100.r10.s020.fq2.fastq\" | samtools view -bS - > \"n100.r10.s020_output/n100.r10.s020.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s020_output/n100.r10.s020.untrimmed.sorted.bam\" \"n100.r10.s020_output/n100.r10.s020.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s020_output/n100.r10.s020.untrimmed.sorted.bam\" -b \"n100.r10.s020_output/n100.r10.s020.primers.bed\" -p \"n100.r10.s020_output/n100.r10.s020.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s020_output/n100.r10.s020.trimmed.sorted.bam\" \"n100.r10.s020_output/n100.r10.s020.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s020_output/n100.r10.s020.reference.fas\" \"n100.r10.s020_output/n100.r10.s020.trimmed.sorted.bam\" > \"n100.r10.s020_output/n100.r10.s020.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s020_output/n100.r10.s020.reference.fas\" --call-indels \"n100.r10.s020_output/n100.r10.s020.trimmed.sorted.bam\" > \"n100.r10.s020_output/n100.r10.s020.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s020_output/n100.r10.s020.trimmed.sorted.bam\" > \"n100.r10.s020_output/n100.r10.s020.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s020_output/n100.r10.s020.depth.txt\" \"n100.r10.s020_output/n100.r10.s020.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s020_output/n100.r10.s020.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s020_output/n100.r10.s020.reference.fas\" | bcftools consensus -m \"n100.r10.s020_output/n100.r10.s020.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s020_output/n100.r10.s020.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s020_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s020_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s020_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 9bbf3998 (flow a707041f): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s022_output\"\n        wget -O \"n100.r10.s022_output/n100.r10.s022.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s022_output/n100.r10.s022.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s022_output/n100.r10.s022.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s022_output/n100.r10.s022.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s022_output/n100.r10.s022.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s022_output/n100.r10.s022.reference.fas\" \"n100.r10.s022_output/n100.r10.s022.fq1.fastq\" \"n100.r10.s022_output/n100.r10.s022.fq2.fastq\" | samtools view -bS - > \"n100.r10.s022_output/n100.r10.s022.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s022_output/n100.r10.s022.untrimmed.sorted.bam\" \"n100.r10.s022_output/n100.r10.s022.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s022_output/n100.r10.s022.untrimmed.sorted.bam\" -b \"n100.r10.s022_output/n100.r10.s022.primers.bed\" -p \"n100.r10.s022_output/n100.r10.s022.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s022_output/n100.r10.s022.trimmed.sorted.bam\" \"n100.r10.s022_output/n100.r10.s022.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s022_output/n100.r10.s022.reference.fas\" \"n100.r10.s022_output/n100.r10.s022.trimmed.sorted.bam\" > \"n100.r10.s022_output/n100.r10.s022.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s022_output/n100.r10.s022.reference.fas\" --call-indels \"n100.r10.s022_output/n100.r10.s022.trimmed.sorted.bam\" > \"n100.r10.s022_output/n100.r10.s022.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s022_output/n100.r10.s022.trimmed.sorted.bam\" > \"n100.r10.s022_output/n100.r10.s022.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s022_output/n100.r10.s022.depth.txt\" \"n100.r10.s022_output/n100.r10.s022.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s022_output/n100.r10.s022.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s022_output/n100.r10.s022.reference.fas\" | bcftools consensus -m \"n100.r10.s022_output/n100.r10.s022.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s022_output/n100.r10.s022.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s022_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s022_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s022_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 99e381d1 (flow 9f4cf67f): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s060_output\"\n        wget -O \"n100.r10.s060_output/n100.r10.s060.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s060_output/n100.r10.s060.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s060_output/n100.r10.s060.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s060_output/n100.r10.s060.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s060_output/n100.r10.s060.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s060_output/n100.r10.s060.reference.fas\" \"n100.r10.s060_output/n100.r10.s060.fq1.fastq\" \"n100.r10.s060_output/n100.r10.s060.fq2.fastq\" | samtools view -bS - > \"n100.r10.s060_output/n100.r10.s060.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s060_output/n100.r10.s060.untrimmed.sorted.bam\" \"n100.r10.s060_output/n100.r10.s060.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s060_output/n100.r10.s060.untrimmed.sorted.bam\" -b \"n100.r10.s060_output/n100.r10.s060.primers.bed\" -p \"n100.r10.s060_output/n100.r10.s060.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s060_output/n100.r10.s060.trimmed.sorted.bam\" \"n100.r10.s060_output/n100.r10.s060.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s060_output/n100.r10.s060.reference.fas\" \"n100.r10.s060_output/n100.r10.s060.trimmed.sorted.bam\" > \"n100.r10.s060_output/n100.r10.s060.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s060_output/n100.r10.s060.reference.fas\" --call-indels \"n100.r10.s060_output/n100.r10.s060.trimmed.sorted.bam\" > \"n100.r10.s060_output/n100.r10.s060.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s060_output/n100.r10.s060.trimmed.sorted.bam\" > \"n100.r10.s060_output/n100.r10.s060.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s060_output/n100.r10.s060.depth.txt\" \"n100.r10.s060_output/n100.r10.s060.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s060_output/n100.r10.s060.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s060_output/n100.r10.s060.reference.fas\" | bcftools consensus -m \"n100.r10.s060_output/n100.r10.s060.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s060_output/n100.r10.s060.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s060_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s060_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s060_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task c8a4ff5c (flow 9bc6f146): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s008_output\"\n        wget -O \"n100.r10.s008_output/n100.r10.s008.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s008_output/n100.r10.s008.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s008_output/n100.r10.s008.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s008_output/n100.r10.s008.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s008_output/n100.r10.s008.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s008_output/n100.r10.s008.reference.fas\" \"n100.r10.s008_output/n100.r10.s008.fq1.fastq\" \"n100.r10.s008_output/n100.r10.s008.fq2.fastq\" | samtools view -bS - > \"n100.r10.s008_output/n100.r10.s008.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s008_output/n100.r10.s008.untrimmed.sorted.bam\" \"n100.r10.s008_output/n100.r10.s008.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s008_output/n100.r10.s008.untrimmed.sorted.bam\" -b \"n100.r10.s008_output/n100.r10.s008.primers.bed\" -p \"n100.r10.s008_output/n100.r10.s008.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s008_output/n100.r10.s008.trimmed.sorted.bam\" \"n100.r10.s008_output/n100.r10.s008.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s008_output/n100.r10.s008.reference.fas\" \"n100.r10.s008_output/n100.r10.s008.trimmed.sorted.bam\" > \"n100.r10.s008_output/n100.r10.s008.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s008_output/n100.r10.s008.reference.fas\" --call-indels \"n100.r10.s008_output/n100.r10.s008.trimmed.sorted.bam\" > \"n100.r10.s008_output/n100.r10.s008.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s008_output/n100.r10.s008.trimmed.sorted.bam\" > \"n100.r10.s008_output/n100.r10.s008.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s008_output/n100.r10.s008.depth.txt\" \"n100.r10.s008_output/n100.r10.s008.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s008_output/n100.r10.s008.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s008_output/n100.r10.s008.reference.fas\" | bcftools consensus -m \"n100.r10.s008_output/n100.r10.s008.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s008_output/n100.r10.s008.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s008_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s008_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s008_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 32946189 (flow 2b9c6b67): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s091_output\"\n        wget -O \"n100.r10.s091_output/n100.r10.s091.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s091_output/n100.r10.s091.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s091_output/n100.r10.s091.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s091_output/n100.r10.s091.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s091_output/n100.r10.s091.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s091_output/n100.r10.s091.reference.fas\" \"n100.r10.s091_output/n100.r10.s091.fq1.fastq\" \"n100.r10.s091_output/n100.r10.s091.fq2.fastq\" | samtools view -bS - > \"n100.r10.s091_output/n100.r10.s091.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s091_output/n100.r10.s091.untrimmed.sorted.bam\" \"n100.r10.s091_output/n100.r10.s091.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s091_output/n100.r10.s091.untrimmed.sorted.bam\" -b \"n100.r10.s091_output/n100.r10.s091.primers.bed\" -p \"n100.r10.s091_output/n100.r10.s091.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s091_output/n100.r10.s091.trimmed.sorted.bam\" \"n100.r10.s091_output/n100.r10.s091.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s091_output/n100.r10.s091.reference.fas\" \"n100.r10.s091_output/n100.r10.s091.trimmed.sorted.bam\" > \"n100.r10.s091_output/n100.r10.s091.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s091_output/n100.r10.s091.reference.fas\" --call-indels \"n100.r10.s091_output/n100.r10.s091.trimmed.sorted.bam\" > \"n100.r10.s091_output/n100.r10.s091.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s091_output/n100.r10.s091.trimmed.sorted.bam\" > \"n100.r10.s091_output/n100.r10.s091.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s091_output/n100.r10.s091.depth.txt\" \"n100.r10.s091_output/n100.r10.s091.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s091_output/n100.r10.s091.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s091_output/n100.r10.s091.reference.fas\" | bcftools consensus -m \"n100.r10.s091_output/n100.r10.s091.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s091_output/n100.r10.s091.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s091_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s091_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s091_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task f18684ae (flow 8fab09ce): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s015_output\"\n        wget -O \"n100.r10.s015_output/n100.r10.s015.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s015_output/n100.r10.s015.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s015_output/n100.r10.s015.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s015_output/n100.r10.s015.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s015_output/n100.r10.s015.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s015_output/n100.r10.s015.reference.fas\" \"n100.r10.s015_output/n100.r10.s015.fq1.fastq\" \"n100.r10.s015_output/n100.r10.s015.fq2.fastq\" | samtools view -bS - > \"n100.r10.s015_output/n100.r10.s015.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s015_output/n100.r10.s015.untrimmed.sorted.bam\" \"n100.r10.s015_output/n100.r10.s015.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s015_output/n100.r10.s015.untrimmed.sorted.bam\" -b \"n100.r10.s015_output/n100.r10.s015.primers.bed\" -p \"n100.r10.s015_output/n100.r10.s015.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s015_output/n100.r10.s015.trimmed.sorted.bam\" \"n100.r10.s015_output/n100.r10.s015.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s015_output/n100.r10.s015.reference.fas\" \"n100.r10.s015_output/n100.r10.s015.trimmed.sorted.bam\" > \"n100.r10.s015_output/n100.r10.s015.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s015_output/n100.r10.s015.reference.fas\" --call-indels \"n100.r10.s015_output/n100.r10.s015.trimmed.sorted.bam\" > \"n100.r10.s015_output/n100.r10.s015.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s015_output/n100.r10.s015.trimmed.sorted.bam\" > \"n100.r10.s015_output/n100.r10.s015.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s015_output/n100.r10.s015.depth.txt\" \"n100.r10.s015_output/n100.r10.s015.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s015_output/n100.r10.s015.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s015_output/n100.r10.s015.reference.fas\" | bcftools consensus -m \"n100.r10.s015_output/n100.r10.s015.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s015_output/n100.r10.s015.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s015_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s015_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s015_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task afc69f69 (flow 27efc78a): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s007_output\"\n        wget -O \"n100.r10.s007_output/n100.r10.s007.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s007_output/n100.r10.s007.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s007_output/n100.r10.s007.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s007_output/n100.r10.s007.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s007_output/n100.r10.s007.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s007_output/n100.r10.s007.reference.fas\" \"n100.r10.s007_output/n100.r10.s007.fq1.fastq\" \"n100.r10.s007_output/n100.r10.s007.fq2.fastq\" | samtools view -bS - > \"n100.r10.s007_output/n100.r10.s007.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s007_output/n100.r10.s007.untrimmed.sorted.bam\" \"n100.r10.s007_output/n100.r10.s007.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s007_output/n100.r10.s007.untrimmed.sorted.bam\" -b \"n100.r10.s007_output/n100.r10.s007.primers.bed\" -p \"n100.r10.s007_output/n100.r10.s007.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s007_output/n100.r10.s007.trimmed.sorted.bam\" \"n100.r10.s007_output/n100.r10.s007.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s007_output/n100.r10.s007.reference.fas\" \"n100.r10.s007_output/n100.r10.s007.trimmed.sorted.bam\" > \"n100.r10.s007_output/n100.r10.s007.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s007_output/n100.r10.s007.reference.fas\" --call-indels \"n100.r10.s007_output/n100.r10.s007.trimmed.sorted.bam\" > \"n100.r10.s007_output/n100.r10.s007.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s007_output/n100.r10.s007.trimmed.sorted.bam\" > \"n100.r10.s007_output/n100.r10.s007.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s007_output/n100.r10.s007.depth.txt\" \"n100.r10.s007_output/n100.r10.s007.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s007_output/n100.r10.s007.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s007_output/n100.r10.s007.reference.fas\" | bcftools consensus -m \"n100.r10.s007_output/n100.r10.s007.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s007_output/n100.r10.s007.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s007_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s007_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s007_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task fff01a1f (flow a2254fff): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s006_output\"\n        wget -O \"n100.r10.s006_output/n100.r10.s006.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s006_output/n100.r10.s006.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s006_output/n100.r10.s006.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s006_output/n100.r10.s006.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s006_output/n100.r10.s006.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s006_output/n100.r10.s006.reference.fas\" \"n100.r10.s006_output/n100.r10.s006.fq1.fastq\" \"n100.r10.s006_output/n100.r10.s006.fq2.fastq\" | samtools view -bS - > \"n100.r10.s006_output/n100.r10.s006.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s006_output/n100.r10.s006.untrimmed.sorted.bam\" \"n100.r10.s006_output/n100.r10.s006.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s006_output/n100.r10.s006.untrimmed.sorted.bam\" -b \"n100.r10.s006_output/n100.r10.s006.primers.bed\" -p \"n100.r10.s006_output/n100.r10.s006.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s006_output/n100.r10.s006.trimmed.sorted.bam\" \"n100.r10.s006_output/n100.r10.s006.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s006_output/n100.r10.s006.reference.fas\" \"n100.r10.s006_output/n100.r10.s006.trimmed.sorted.bam\" > \"n100.r10.s006_output/n100.r10.s006.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s006_output/n100.r10.s006.reference.fas\" --call-indels \"n100.r10.s006_output/n100.r10.s006.trimmed.sorted.bam\" > \"n100.r10.s006_output/n100.r10.s006.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s006_output/n100.r10.s006.trimmed.sorted.bam\" > \"n100.r10.s006_output/n100.r10.s006.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s006_output/n100.r10.s006.depth.txt\" \"n100.r10.s006_output/n100.r10.s006.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s006_output/n100.r10.s006.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s006_output/n100.r10.s006.reference.fas\" | bcftools consensus -m \"n100.r10.s006_output/n100.r10.s006.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s006_output/n100.r10.s006.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s006_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s006_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s006_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:36:36 scheduler task 4bad225b (flow d1003e88): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r10.s057_output\"\n        wget -O \"n100.r10.s057_output/n100.r10.s057.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r10.s057_output/n100.r10.s057.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r10.s057_output/n100.r10.s057.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r10.s057_output/n100.r10.s057.fq1.fastq\"\n        cp \"%s\" \"n100.r10.s057_output/n100.r10.s057.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r10.s057_output/n100.r10.s057.reference.fas\" \"n100.r10.s057_output/n100.r10.s057.fq1.fastq\" \"n100.r10.s057_output/n100.r10.s057.fq2.fastq\" | samtools view -bS - > \"n100.r10.s057_output/n100.r10.s057.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s057_output/n100.r10.s057.untrimmed.sorted.bam\" \"n100.r10.s057_output/n100.r10.s057.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r10.s057_output/n100.r10.s057.untrimmed.sorted.bam\" -b \"n100.r10.s057_output/n100.r10.s057.primers.bed\" -p \"n100.r10.s057_output/n100.r10.s057.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r10.s057_output/n100.r10.s057.trimmed.sorted.bam\" \"n100.r10.s057_output/n100.r10.s057.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r10.s057_output/n100.r10.s057.reference.fas\" \"n100.r10.s057_output/n100.r10.s057.trimmed.sorted.bam\" > \"n100.r10.s057_output/n100.r10.s057.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r10.s057_output/n100.r10.s057.reference.fas\" --call-indels \"n100.r10.s057_output/n100.r10.s057.trimmed.sorted.bam\" > \"n100.r10.s057_output/n100.r10.s057.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r10.s057_output/n100.r10.s057.trimmed.sorted.bam\" > \"n100.r10.s057_output/n100.r10.s057.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r10.s057_output/n100.r10.s057.depth.txt\" \"n100.r10.s057_output/n100.r10.s057.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r10.s057_output/n100.r10.s057.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r10.s057_output/n100.r10.s057.reference.fas\" | bcftools consensus -m \"n100.r10.s057_output/n100.r10.s057.low_depth.tsv\" tmp.vcf.gz > \"n100.r10.s057_output/n100.r10.s057.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r10.s057_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r10/n100.r10.s057_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r10/n100.r10.s057_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 17:37:24 scheduler task 07a286b8 (flow c59eb1d7): assigning to alloc ec2-3-16-66-179.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 17:37:24 scheduler task 4bad225b (flow d1003e88): assigning to alloc ec2-3-16-66-179.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 17:37:24 scheduler task fff01a1f (flow a2254fff): assigning to alloc ec2-3-16-66-179.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 17:37:24 scheduler task afc69f69 (flow 27efc78a): assigning to alloc ec2-3-16-66-179.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 17:37:24 scheduler task 07a286b8 (flow c59eb1d7): loading (try 0): started
2021/07/08 17:37:24 scheduler task 4bad225b (flow d1003e88): loading (try 0): started
2021/07/08 17:37:24 scheduler task fff01a1f (flow a2254fff): loading (try 0): started
2021/07/08 17:37:24 scheduler task 4bad225b (flow d1003e88): loading val<.=s3://niema-test/n100/r10/n100.r10.s057_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task fff01a1f (flow a2254fff): loading val<.=s3://niema-test/n100/r10/n100.r10.s006_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 07a286b8 (flow c59eb1d7): loading val<.=s3://niema-test/n100/r10/n100.r10.s029_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 07a286b8 (flow c59eb1d7): loading val<.=s3://niema-test/n100/r10/n100.r10.s029_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task fff01a1f (flow a2254fff): loading val<.=s3://niema-test/n100/r10/n100.r10.s006_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task afc69f69 (flow 27efc78a): loading (try 0): started
2021/07/08 17:37:24 scheduler task afc69f69 (flow 27efc78a): loading val<.=s3://niema-test/n100/r10/n100.r10.s007_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 4bad225b (flow d1003e88): loading val<.=s3://niema-test/n100/r10/n100.r10.s057_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task afc69f69 (flow 27efc78a): loading val<.=s3://niema-test/n100/r10/n100.r10.s007_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task f18684ae (flow 8fab09ce): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 32946189 (flow 2b9c6b67): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task c8a4ff5c (flow 9bc6f146): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 99e381d1 (flow 9f4cf67f): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 9bbf3998 (flow a707041f): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 215d2c98 (flow f5b79134): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 28aacb8b (flow 5c83df52): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 3134442c (flow c17adea7): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 32946189 (flow 2b9c6b67): loading (try 0): started
2021/07/08 17:37:24 scheduler task c8a4ff5c (flow 9bc6f146): loading (try 0): started
2021/07/08 17:37:24 scheduler task 32946189 (flow 2b9c6b67): loading val<.=s3://niema-test/n100/r10/n100.r10.s091_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 99e381d1 (flow 9f4cf67f): loading (try 0): started
2021/07/08 17:37:24 scheduler task 99e381d1 (flow 9f4cf67f): loading val<.=s3://niema-test/n100/r10/n100.r10.s060_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task f18684ae (flow 8fab09ce): loading (try 0): started
2021/07/08 17:37:24 scheduler task 9bbf3998 (flow a707041f): loading (try 0): started
2021/07/08 17:37:24 scheduler task 215d2c98 (flow f5b79134): loading (try 0): started
2021/07/08 17:37:24 scheduler task c8a4ff5c (flow 9bc6f146): loading val<.=s3://niema-test/n100/r10/n100.r10.s008_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 215d2c98 (flow f5b79134): loading val<.=s3://niema-test/n100/r10/n100.r10.s020_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task c8a4ff5c (flow 9bc6f146): loading val<.=s3://niema-test/n100/r10/n100.r10.s008_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 9a1d8533 (flow 60012892): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 1400e0ee (flow 3bf338dc): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 404ec61a (flow 5ae42756): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task b498cd4e (flow fe03b18e): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 1038d1a1 (flow bef79a94): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 7ddd1093 (flow a692e162): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 0a2b5832 (flow c7221f94): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 9d2f7e82 (flow a018bf83): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 592f7c63 (flow a4c9f908): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 59e7f390 (flow 8552db05): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 74962e85 (flow 82727c77): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 74420576 (flow eaea6f09): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task f070a1d7 (flow 943fd4e3): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task bd8d9d6a (flow 94edc653): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 600bf6cf (flow 21732518): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task b4908e4d (flow 735398ea): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task f24dd117 (flow d06527d9): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 09c401c4 (flow 22954720): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task da1aa7bb (flow f919f347): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 9d2f7e82 (flow a018bf83): loading (try 0): started
2021/07/08 17:37:24 scheduler task 592f7c63 (flow a4c9f908): loading (try 0): started
2021/07/08 17:37:24 scheduler task 09c401c4 (flow 22954720): loading (try 0): started
2021/07/08 17:37:24 scheduler task 1400e0ee (flow 3bf338dc): loading (try 0): started
2021/07/08 17:37:24 scheduler task 600bf6cf (flow 21732518): loading (try 0): started
2021/07/08 17:37:24 scheduler task 09c401c4 (flow 22954720): loading val<.=s3://niema-test/n100/r10/n100.r10.s018_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 74420576 (flow eaea6f09): loading (try 0): started
2021/07/08 17:37:24 scheduler task 0a2b5832 (flow c7221f94): loading (try 0): started
2021/07/08 17:37:24 scheduler task 74420576 (flow eaea6f09): loading val<.=s3://niema-test/n100/r10/n100.r10.s065_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 0a2b5832 (flow c7221f94): loading val<.=s3://niema-test/n100/r10/n100.r10.s056_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 74420576 (flow eaea6f09): loading val<.=s3://niema-test/n100/r10/n100.r10.s065_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 600bf6cf (flow 21732518): loading val<.=s3://niema-test/n100/r10/n100.r10.s012_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 0a2b5832 (flow c7221f94): loading val<.=s3://niema-test/n100/r10/n100.r10.s056_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task f070a1d7 (flow 943fd4e3): loading (try 0): started
2021/07/08 17:37:24 scheduler task f070a1d7 (flow 943fd4e3): loading val<.=s3://niema-test/n100/r10/n100.r10.s079_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task b498cd4e (flow fe03b18e): loading (try 0): started
2021/07/08 17:37:24 scheduler task f18684ae (flow 8fab09ce): loading val<.=s3://niema-test/n100/r10/n100.r10.s015_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task f070a1d7 (flow 943fd4e3): loading val<.=s3://niema-test/n100/r10/n100.r10.s079_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task b498cd4e (flow fe03b18e): loading val<.=s3://niema-test/n100/r10/n100.r10.s083_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task b498cd4e (flow fe03b18e): loading val<.=s3://niema-test/n100/r10/n100.r10.s083_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task da1aa7bb (flow f919f347): loading (try 0): started
2021/07/08 17:37:24 scheduler task 3134442c (flow c17adea7): loading (try 0): started
2021/07/08 17:37:24 scheduler task da1aa7bb (flow f919f347): loading val<.=s3://niema-test/n100/r10/n100.r10.s068_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 3134442c (flow c17adea7): loading val<.=s3://niema-test/n100/r10/n100.r10.s069_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task da1aa7bb (flow f919f347): loading val<.=s3://niema-test/n100/r10/n100.r10.s068_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 9bbf3998 (flow a707041f): loading val<.=s3://niema-test/n100/r10/n100.r10.s022_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task f18684ae (flow 8fab09ce): loading val<.=s3://niema-test/n100/r10/n100.r10.s015_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 99e381d1 (flow 9f4cf67f): loading val<.=s3://niema-test/n100/r10/n100.r10.s060_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 32946189 (flow 2b9c6b67): loading val<.=s3://niema-test/n100/r10/n100.r10.s091_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 9bbf3998 (flow a707041f): loading val<.=s3://niema-test/n100/r10/n100.r10.s022_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 28aacb8b (flow 5c83df52): loading (try 0): started
2021/07/08 17:37:24 scheduler task 215d2c98 (flow f5b79134): loading val<.=s3://niema-test/n100/r10/n100.r10.s020_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task b00ef45e (flow 62acfe5d): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task f24dd117 (flow d06527d9): loading (try 0): started
2021/07/08 17:37:24 scheduler task 9d2f7e82 (flow a018bf83): loading val<.=s3://niema-test/n100/r10/n100.r10.s021_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 9a1d8533 (flow 60012892): loading (try 0): started
2021/07/08 17:37:24 scheduler task b4908e4d (flow 735398ea): loading (try 0): started
2021/07/08 17:37:24 scheduler task 74962e85 (flow 82727c77): loading (try 0): started
2021/07/08 17:37:24 scheduler task 592f7c63 (flow a4c9f908): loading val<.=s3://niema-test/n100/r10/n100.r10.s054_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 59e7f390 (flow 8552db05): loading (try 0): started
2021/07/08 17:37:24 scheduler task 592f7c63 (flow a4c9f908): loading val<.=s3://niema-test/n100/r10/n100.r10.s054_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 09c401c4 (flow 22954720): loading val<.=s3://niema-test/n100/r10/n100.r10.s018_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 1400e0ee (flow 3bf338dc): loading val<.=s3://niema-test/n100/r10/n100.r10.s003_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task bd8d9d6a (flow 94edc653): loading (try 0): started
2021/07/08 17:37:24 scheduler task 1400e0ee (flow 3bf338dc): loading val<.=s3://niema-test/n100/r10/n100.r10.s003_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 9d2f7e82 (flow a018bf83): loading val<.=s3://niema-test/n100/r10/n100.r10.s021_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 404ec61a (flow 5ae42756): loading (try 0): started
2021/07/08 17:37:24 scheduler task 1038d1a1 (flow bef79a94): loading (try 0): started
2021/07/08 17:37:24 scheduler task 600bf6cf (flow 21732518): loading val<.=s3://niema-test/n100/r10/n100.r10.s012_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 7ddd1093 (flow a692e162): loading (try 0): started
2021/07/08 17:37:24 scheduler task 3134442c (flow c17adea7): loading val<.=s3://niema-test/n100/r10/n100.r10.s069_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 28aacb8b (flow 5c83df52): loading val<.=s3://niema-test/n100/r10/n100.r10.s023_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 974bd136 (flow 7368f9bf): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task b00ef45e (flow 62acfe5d): loading (try 0): started
2021/07/08 17:37:24 scheduler task 28aacb8b (flow 5c83df52): loading val<.=s3://niema-test/n100/r10/n100.r10.s023_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task f24dd117 (flow d06527d9): loading val<.=s3://niema-test/n100/r10/n100.r10.s084_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 9a1d8533 (flow 60012892): loading val<.=s3://niema-test/n100/r10/n100.r10.s016_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task f24dd117 (flow d06527d9): loading val<.=s3://niema-test/n100/r10/n100.r10.s084_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task b4908e4d (flow 735398ea): loading val<.=s3://niema-test/n100/r10/n100.r10.s075_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 9a1d8533 (flow 60012892): loading val<.=s3://niema-test/n100/r10/n100.r10.s016_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 74962e85 (flow 82727c77): loading val<.=s3://niema-test/n100/r10/n100.r10.s098_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task b4908e4d (flow 735398ea): loading val<.=s3://niema-test/n100/r10/n100.r10.s075_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 59e7f390 (flow 8552db05): loading val<.=s3://niema-test/n100/r10/n100.r10.s059_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 74962e85 (flow 82727c77): loading val<.=s3://niema-test/n100/r10/n100.r10.s098_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 59e7f390 (flow 8552db05): loading val<.=s3://niema-test/n100/r10/n100.r10.s059_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task bd8d9d6a (flow 94edc653): loading val<.=s3://niema-test/n100/r10/n100.r10.s089_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task bd8d9d6a (flow 94edc653): loading val<.=s3://niema-test/n100/r10/n100.r10.s089_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 404ec61a (flow 5ae42756): loading val<.=s3://niema-test/n100/r10/n100.r10.s077_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 1038d1a1 (flow bef79a94): loading val<.=s3://niema-test/n100/r10/n100.r10.s100_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 404ec61a (flow 5ae42756): loading val<.=s3://niema-test/n100/r10/n100.r10.s077_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 1038d1a1 (flow bef79a94): loading val<.=s3://niema-test/n100/r10/n100.r10.s100_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 7ddd1093 (flow a692e162): loading val<.=s3://niema-test/n100/r10/n100.r10.s073_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 7ddd1093 (flow a692e162): loading val<.=s3://niema-test/n100/r10/n100.r10.s073_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 922533fe (flow 9b575067): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 54c398c1 (flow 43de8083): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 44a25b37 (flow 39b5a1ee): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task a74afbde (flow 76734b91): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 9b005cb6 (flow 4e0c766c): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 8e195244 (flow 62a7eeea): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task cc4d6c79 (flow a27124a9): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task eb87e42f (flow 399f20da): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 5bc25bd3 (flow 8edca96d): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task daf95962 (flow 7c29b38a): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 9741371c (flow 26a00bb9): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 0a72f984 (flow 0210f1d8): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 6f235a83 (flow 3c6bdf5b): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task d1d46b3d (flow 21dcc181): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 5916483e (flow 38a4c1e8): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task d7c574d6 (flow d719cd29): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 8132d6a4 (flow 3012d03f): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 6020e9b3 (flow 50fe0d18): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 400a7920 (flow a4d00c52): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task d78f5d37 (flow 88a0cdd2): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 11521559 (flow aee712fe): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 61d86a19 (flow ee1e5c5f): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 49c1b19d (flow 31d04bff): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 62273247 (flow 40aecf6e): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task a99fe358 (flow 025791ae): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task b3e5b82e (flow e295ae85): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 10b2ee98 (flow 7eb303f0): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 2e8ecf12 (flow 1925ed71): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 768ad499 (flow 88f35ec0): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 9cd8433e (flow 8ff82b53): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 6f235a83 (flow 3c6bdf5b): loading (try 0): started
2021/07/08 17:37:24 scheduler task d1d46b3d (flow 21dcc181): loading (try 0): started
2021/07/08 17:37:24 scheduler task 974bd136 (flow 7368f9bf): loading (try 0): started
2021/07/08 17:37:24 scheduler task 49c1b19d (flow 31d04bff): loading (try 0): started
2021/07/08 17:37:24 scheduler task d1d46b3d (flow 21dcc181): loading val<.=s3://niema-test/n100/r10/n100.r10.s011_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 6f235a83 (flow 3c6bdf5b): loading val<.=s3://niema-test/n100/r10/n100.r10.s076_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task a74afbde (flow 76734b91): loading (try 0): started
2021/07/08 17:37:24 scheduler task d78f5d37 (flow 88a0cdd2): loading (try 0): started
2021/07/08 17:37:24 scheduler task 8e195244 (flow 62a7eeea): loading (try 0): started
2021/07/08 17:37:24 scheduler task a99fe358 (flow 025791ae): loading (try 0): started
2021/07/08 17:37:24 scheduler task d78f5d37 (flow 88a0cdd2): loading val<.=s3://niema-test/n100/r10/n100.r10.s096_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task daf95962 (flow 7c29b38a): loading (try 0): started
2021/07/08 17:37:24 scheduler task a74afbde (flow 76734b91): loading val<.=s3://niema-test/n100/r10/n100.r10.s051_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 8e195244 (flow 62a7eeea): loading val<.=s3://niema-test/n100/r10/n100.r10.s071_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 9741371c (flow 26a00bb9): loading (try 0): started
2021/07/08 17:37:24 scheduler task a99fe358 (flow 025791ae): loading val<.=s3://niema-test/n100/r10/n100.r10.s045_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 44a25b37 (flow 39b5a1ee): loading (try 0): started
2021/07/08 17:37:24 scheduler task daf95962 (flow 7c29b38a): loading val<.=s3://niema-test/n100/r10/n100.r10.s002_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 44a25b37 (flow 39b5a1ee): loading val<.=s3://niema-test/n100/r10/n100.r10.s052_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 9741371c (flow 26a00bb9): loading val<.=s3://niema-test/n100/r10/n100.r10.s050_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 44a25b37 (flow 39b5a1ee): loading val<.=s3://niema-test/n100/r10/n100.r10.s052_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 0a72f984 (flow 0210f1d8): loading (try 0): started
2021/07/08 17:37:24 scheduler task 49c1b19d (flow 31d04bff): loading val<.=s3://niema-test/n100/r10/n100.r10.s088_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 0a72f984 (flow 0210f1d8): loading val<.=s3://niema-test/n100/r10/n100.r10.s078_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 10b2ee98 (flow 7eb303f0): loading (try 0): started
2021/07/08 17:37:24 scheduler task 10b2ee98 (flow 7eb303f0): loading val<.=s3://niema-test/n100/r10/n100.r10.s061_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 974bd136 (flow 7368f9bf): loading val<.=s3://niema-test/n100/r10/n100.r10.s099_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 2f95f0eb (flow 9906f8c4): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 42735b19 (flow c3a76ea0): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 0727dd15 (flow afe00438): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 0de34bc3 (flow d01db40b): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 3c2c1b67 (flow 9bbddc57): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 6a4f6e23 (flow c0dbba66): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task c6408350 (flow 227a28ae): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 8d0f47ee (flow 5e0db977): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 5d04b067 (flow 522f4e66): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 2f95f0eb (flow 9906f8c4): loading (try 0): started
2021/07/08 17:37:24 scheduler task 5d04b067 (flow 522f4e66): loading (try 0): started
2021/07/08 17:37:24 scheduler task 2f95f0eb (flow 9906f8c4): loading val<.=s3://niema-test/n100/r10/n100.r10.s074_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 5d04b067 (flow 522f4e66): loading val<.=s3://niema-test/n100/r10/n100.r10.s036_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 0727dd15 (flow afe00438): loading (try 0): started
2021/07/08 17:37:24 scheduler task e996e2c5 (flow d3393061): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 3c2c1b67 (flow 9bbddc57): loading (try 0): started
2021/07/08 17:37:24 scheduler task 77092a02 (flow c50dce1c): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 3c2c1b67 (flow 9bbddc57): loading val<.=s3://niema-test/n100/r10/n100.r10.s042_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 2139bff7 (flow d781b4f4): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task e8c8e808 (flow 5077aef2): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task c6408350 (flow 227a28ae): loading (try 0): started
2021/07/08 17:37:24 scheduler task bc1a220d (flow 5b1cd59e): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task c6408350 (flow 227a28ae): loading val<.=s3://niema-test/n100/r10/n100.r10.s039_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task c33b1ab5 (flow c0e27ff9): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 8e195244 (flow 62a7eeea): loading val<.=s3://niema-test/n100/r10/n100.r10.s071_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 61d86a19 (flow ee1e5c5f): loading (try 0): started
2021/07/08 17:37:24 scheduler task 61d86a19 (flow ee1e5c5f): loading val<.=s3://niema-test/n100/r10/n100.r10.s046_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 2f95f0eb (flow 9906f8c4): loading val<.=s3://niema-test/n100/r10/n100.r10.s074_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 42735b19 (flow c3a76ea0): loading (try 0): started
2021/07/08 17:37:24 scheduler task 8d0f47ee (flow 5e0db977): loading (try 0): started
2021/07/08 17:37:24 scheduler task 42735b19 (flow c3a76ea0): loading val<.=s3://niema-test/n100/r10/n100.r10.s048_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 5d04b067 (flow 522f4e66): loading val<.=s3://niema-test/n100/r10/n100.r10.s036_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 8d0f47ee (flow 5e0db977): loading val<.=s3://niema-test/n100/r10/n100.r10.s092_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 0727dd15 (flow afe00438): loading val<.=s3://niema-test/n100/r10/n100.r10.s043_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 974bd136 (flow 7368f9bf): loading val<.=s3://niema-test/n100/r10/n100.r10.s099_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 3c2c1b67 (flow 9bbddc57): loading val<.=s3://niema-test/n100/r10/n100.r10.s042_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 922533fe (flow 9b575067): loading (try 0): started
2021/07/08 17:37:24 scheduler task c6408350 (flow 227a28ae): loading val<.=s3://niema-test/n100/r10/n100.r10.s039_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 922533fe (flow 9b575067): loading val<.=s3://niema-test/n100/r10/n100.r10.s072_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 61d86a19 (flow ee1e5c5f): loading val<.=s3://niema-test/n100/r10/n100.r10.s046_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 9b005cb6 (flow 4e0c766c): loading (try 0): started
2021/07/08 17:37:24 scheduler task 8d0f47ee (flow 5e0db977): loading val<.=s3://niema-test/n100/r10/n100.r10.s092_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 9b005cb6 (flow 4e0c766c): loading val<.=s3://niema-test/n100/r10/n100.r10.s097_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task e996e2c5 (flow d3393061): loading (try 0): started
2021/07/08 17:37:24 scheduler task 9cd8433e (flow 8ff82b53): loading (try 0): started
2021/07/08 17:37:24 scheduler task 77092a02 (flow c50dce1c): loading (try 0): started
2021/07/08 17:37:24 scheduler task 9cd8433e (flow 8ff82b53): loading val<.=s3://niema-test/n100/r10/n100.r10.s067_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 2139bff7 (flow d781b4f4): loading (try 0): started
2021/07/08 17:37:24 scheduler task 2139bff7 (flow d781b4f4): loading val<.=s3://niema-test/n100/r10/n100.r10.s034_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 42735b19 (flow c3a76ea0): loading val<.=s3://niema-test/n100/r10/n100.r10.s048_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task bc1a220d (flow 5b1cd59e): loading (try 0): started
2021/07/08 17:37:24 scheduler task 49c1b19d (flow 31d04bff): loading val<.=s3://niema-test/n100/r10/n100.r10.s088_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 6a4f6e23 (flow c0dbba66): loading (try 0): started
2021/07/08 17:37:24 scheduler task bc1a220d (flow 5b1cd59e): loading val<.=s3://niema-test/n100/r10/n100.r10.s044_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 2139bff7 (flow d781b4f4): loading val<.=s3://niema-test/n100/r10/n100.r10.s034_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 9b005cb6 (flow 4e0c766c): loading val<.=s3://niema-test/n100/r10/n100.r10.s097_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 5916483e (flow 38a4c1e8): loading (try 0): started
2021/07/08 17:37:24 scheduler task e996e2c5 (flow d3393061): loading val<.=s3://niema-test/n100/r10/n100.r10.s027_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 5916483e (flow 38a4c1e8): loading val<.=s3://niema-test/n100/r10/n100.r10.s093_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 77092a02 (flow c50dce1c): loading val<.=s3://niema-test/n100/r10/n100.r10.s033_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 6a4f6e23 (flow c0dbba66): loading val<.=s3://niema-test/n100/r10/n100.r10.s053_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 77092a02 (flow c50dce1c): loading val<.=s3://niema-test/n100/r10/n100.r10.s033_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 922533fe (flow 9b575067): loading val<.=s3://niema-test/n100/r10/n100.r10.s072_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task d1d46b3d (flow 21dcc181): loading val<.=s3://niema-test/n100/r10/n100.r10.s011_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 400a7920 (flow a4d00c52): loading (try 0): started
2021/07/08 17:37:24 scheduler task 400a7920 (flow a4d00c52): loading val<.=s3://niema-test/n100/r10/n100.r10.s090_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task a74afbde (flow 76734b91): loading val<.=s3://niema-test/n100/r10/n100.r10.s051_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task cc4d6c79 (flow a27124a9): loading (try 0): started
2021/07/08 17:37:24 scheduler task cc4d6c79 (flow a27124a9): loading val<.=s3://niema-test/n100/r10/n100.r10.s024_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 400a7920 (flow a4d00c52): loading val<.=s3://niema-test/n100/r10/n100.r10.s090_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 6020e9b3 (flow 50fe0d18): loading (try 0): started
2021/07/08 17:37:24 scheduler task 6020e9b3 (flow 50fe0d18): loading val<.=s3://niema-test/n100/r10/n100.r10.s094_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task cc4d6c79 (flow a27124a9): loading val<.=s3://niema-test/n100/r10/n100.r10.s024_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task eb87e42f (flow 399f20da): loading (try 0): started
2021/07/08 17:37:24 scheduler task eb87e42f (flow 399f20da): loading val<.=s3://niema-test/n100/r10/n100.r10.s062_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 6020e9b3 (flow 50fe0d18): loading val<.=s3://niema-test/n100/r10/n100.r10.s094_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task b3e5b82e (flow e295ae85): loading (try 0): started
2021/07/08 17:37:24 scheduler task b3e5b82e (flow e295ae85): loading val<.=s3://niema-test/n100/r10/n100.r10.s019_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task eb87e42f (flow 399f20da): loading val<.=s3://niema-test/n100/r10/n100.r10.s062_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 5bc25bd3 (flow 8edca96d): loading (try 0): started
2021/07/08 17:37:24 scheduler task 5bc25bd3 (flow 8edca96d): loading val<.=s3://niema-test/n100/r10/n100.r10.s081_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 2e8ecf12 (flow 1925ed71): loading (try 0): started
2021/07/08 17:37:24 scheduler task a99fe358 (flow 025791ae): loading val<.=s3://niema-test/n100/r10/n100.r10.s045_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 2e8ecf12 (flow 1925ed71): loading val<.=s3://niema-test/n100/r10/n100.r10.s063_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 768ad499 (flow 88f35ec0): loading (try 0): started
2021/07/08 17:37:24 scheduler task 768ad499 (flow 88f35ec0): loading val<.=s3://niema-test/n100/r10/n100.r10.s041_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task b00ef45e (flow 62acfe5d): loading val<.=s3://niema-test/n100/r10/n100.r10.s055_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task daf95962 (flow 7c29b38a): loading val<.=s3://niema-test/n100/r10/n100.r10.s002_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 6f235a83 (flow 3c6bdf5b): loading val<.=s3://niema-test/n100/r10/n100.r10.s076_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 11521559 (flow aee712fe): loading (try 0): started
2021/07/08 17:37:24 scheduler task 11521559 (flow aee712fe): loading val<.=s3://niema-test/n100/r10/n100.r10.s009_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 768ad499 (flow 88f35ec0): loading val<.=s3://niema-test/n100/r10/n100.r10.s041_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 9741371c (flow 26a00bb9): loading val<.=s3://niema-test/n100/r10/n100.r10.s050_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 11521559 (flow aee712fe): loading val<.=s3://niema-test/n100/r10/n100.r10.s009_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task d78f5d37 (flow 88a0cdd2): loading val<.=s3://niema-test/n100/r10/n100.r10.s096_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 0a72f984 (flow 0210f1d8): loading val<.=s3://niema-test/n100/r10/n100.r10.s078_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 10b2ee98 (flow 7eb303f0): loading val<.=s3://niema-test/n100/r10/n100.r10.s061_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 0727dd15 (flow afe00438): loading val<.=s3://niema-test/n100/r10/n100.r10.s043_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 0de34bc3 (flow d01db40b): loading (try 0): started
2021/07/08 17:37:24 scheduler task 0de34bc3 (flow d01db40b): loading val<.=s3://niema-test/n100/r10/n100.r10.s038_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 3ee5fbc0 (flow c6d532f3): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task f44a16a1 (flow d1275b24): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 3a2d4435 (flow 8e8257f7): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 51fe96bf (flow 1f86a397): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 0df65054 (flow 91cbe899): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 277a5fa1 (flow abe7077c): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 8c3a26a2 (flow 63d125fa): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 53abe90b (flow df4d82f6): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 41e319db (flow 0f0a0edb): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 5e6ba1c1 (flow 1575ea23): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task c0a2340c (flow 0d3cc969): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 3d965a50 (flow 14c2b5b4): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 207ede7a (flow 23b67a6f): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 834ab569 (flow 9a69f4b2): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task c33b1ab5 (flow c0e27ff9): loading (try 0): started
2021/07/08 17:37:24 scheduler task b00ef45e (flow 62acfe5d): loading val<.=s3://niema-test/n100/r10/n100.r10.s055_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task e996e2c5 (flow d3393061): loading val<.=s3://niema-test/n100/r10/n100.r10.s027_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task e8c8e808 (flow 5077aef2): loading (try 0): started
2021/07/08 17:37:24 scheduler task bc1a220d (flow 5b1cd59e): loading val<.=s3://niema-test/n100/r10/n100.r10.s044_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 54c398c1 (flow 43de8083): loading (try 0): started
2021/07/08 17:37:24 scheduler task 62273247 (flow 40aecf6e): loading (try 0): started
2021/07/08 17:37:24 scheduler task 5916483e (flow 38a4c1e8): loading val<.=s3://niema-test/n100/r10/n100.r10.s093_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task d7c574d6 (flow d719cd29): loading (try 0): started
2021/07/08 17:37:24 scheduler task 9cd8433e (flow 8ff82b53): loading val<.=s3://niema-test/n100/r10/n100.r10.s067_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 6a4f6e23 (flow c0dbba66): loading val<.=s3://niema-test/n100/r10/n100.r10.s053_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 8132d6a4 (flow 3012d03f): loading (try 0): started
2021/07/08 17:37:24 scheduler task b3e5b82e (flow e295ae85): loading val<.=s3://niema-test/n100/r10/n100.r10.s019_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 8132d6a4 (flow 3012d03f): loading val<.=s3://niema-test/n100/r10/n100.r10.s085_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 5bc25bd3 (flow 8edca96d): loading val<.=s3://niema-test/n100/r10/n100.r10.s081_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 2e8ecf12 (flow 1925ed71): loading val<.=s3://niema-test/n100/r10/n100.r10.s063_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 51fe96bf (flow 1f86a397): loading (try 0): started
2021/07/08 17:37:24 scheduler task 51fe96bf (flow 1f86a397): loading val<.=s3://niema-test/n100/r10/n100.r10.s066_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 63cda6a4 (flow 20c10487): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task a510cb24 (flow 1bfcc9a2): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 49b52cb8 (flow debb172b): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 10b9639e (flow c2c3e971): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 26f77987 (flow 474e0149): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 847deec3 (flow 54b764b0): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 96ccb3b6 (flow e4994f3d): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 36958e06 (flow c159c17e): assigning to alloc ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 17:37:24 scheduler task 36958e06 (flow c159c17e): loading (try 0): started
2021/07/08 17:37:24 scheduler task 36958e06 (flow c159c17e): loading val<.=s3://niema-test/n100/r10/n100.r10.s028_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 51fe96bf (flow 1f86a397): loading val<.=s3://niema-test/n100/r10/n100.r10.s066_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 3ee5fbc0 (flow c6d532f3): loading (try 0): started
2021/07/08 17:37:24 scheduler task 3ee5fbc0 (flow c6d532f3): loading val<.=s3://niema-test/n100/r10/n100.r10.s032_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 63cda6a4 (flow 20c10487): loading (try 0): started
2021/07/08 17:37:24 scheduler task 63cda6a4 (flow 20c10487): loading val<.=s3://niema-test/n100/r10/n100.r10.s037_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task a510cb24 (flow 1bfcc9a2): loading (try 0): started
2021/07/08 17:37:24 scheduler task a510cb24 (flow 1bfcc9a2): loading val<.=s3://niema-test/n100/r10/n100.r10.s047_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 0de34bc3 (flow d01db40b): loading val<.=s3://niema-test/n100/r10/n100.r10.s038_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 49b52cb8 (flow debb172b): loading (try 0): started
2021/07/08 17:37:24 scheduler task 49b52cb8 (flow debb172b): loading val<.=s3://niema-test/n100/r10/n100.r10.s005_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 63cda6a4 (flow 20c10487): loading val<.=s3://niema-test/n100/r10/n100.r10.s037_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 3ee5fbc0 (flow c6d532f3): loading val<.=s3://niema-test/n100/r10/n100.r10.s032_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task a510cb24 (flow 1bfcc9a2): loading val<.=s3://niema-test/n100/r10/n100.r10.s047_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 10b9639e (flow c2c3e971): loading (try 0): started
2021/07/08 17:37:24 scheduler task 26f77987 (flow 474e0149): loading (try 0): started
2021/07/08 17:37:24 scheduler task 96ccb3b6 (flow e4994f3d): loading (try 0): started
2021/07/08 17:37:24 scheduler task 26f77987 (flow 474e0149): loading val<.=s3://niema-test/n100/r10/n100.r10.s064_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 26f77987 (flow 474e0149): loading val<.=s3://niema-test/n100/r10/n100.r10.s064_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 96ccb3b6 (flow e4994f3d): loading val<.=s3://niema-test/n100/r10/n100.r10.s001_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 96ccb3b6 (flow e4994f3d): loading val<.=s3://niema-test/n100/r10/n100.r10.s001_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 834ab569 (flow 9a69f4b2): loading (try 0): started
2021/07/08 17:37:24 scheduler task 834ab569 (flow 9a69f4b2): loading val<.=s3://niema-test/n100/r10/n100.r10.s087_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 10b9639e (flow c2c3e971): loading val<.=s3://niema-test/n100/r10/n100.r10.s040_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 834ab569 (flow 9a69f4b2): loading val<.=s3://niema-test/n100/r10/n100.r10.s087_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 3a2d4435 (flow 8e8257f7): loading (try 0): started
2021/07/08 17:37:24 scheduler task 3a2d4435 (flow 8e8257f7): loading val<.=s3://niema-test/n100/r10/n100.r10.s004_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 41e319db (flow 0f0a0edb): loading (try 0): started
2021/07/08 17:37:24 scheduler task 41e319db (flow 0f0a0edb): loading val<.=s3://niema-test/n100/r10/n100.r10.s086_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 3a2d4435 (flow 8e8257f7): loading val<.=s3://niema-test/n100/r10/n100.r10.s004_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 0df65054 (flow 91cbe899): loading (try 0): started
2021/07/08 17:37:24 scheduler task 0df65054 (flow 91cbe899): loading val<.=s3://niema-test/n100/r10/n100.r10.s035_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 41e319db (flow 0f0a0edb): loading val<.=s3://niema-test/n100/r10/n100.r10.s086_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 5e6ba1c1 (flow 1575ea23): loading (try 0): started
2021/07/08 17:37:24 scheduler task 5e6ba1c1 (flow 1575ea23): loading val<.=s3://niema-test/n100/r10/n100.r10.s070_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 0df65054 (flow 91cbe899): loading val<.=s3://niema-test/n100/r10/n100.r10.s035_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 8c3a26a2 (flow 63d125fa): loading (try 0): started
2021/07/08 17:37:24 scheduler task 8c3a26a2 (flow 63d125fa): loading val<.=s3://niema-test/n100/r10/n100.r10.s017_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 5e6ba1c1 (flow 1575ea23): loading val<.=s3://niema-test/n100/r10/n100.r10.s070_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 277a5fa1 (flow abe7077c): loading (try 0): started
2021/07/08 17:37:24 scheduler task 277a5fa1 (flow abe7077c): loading val<.=s3://niema-test/n100/r10/n100.r10.s010_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 53abe90b (flow df4d82f6): loading (try 0): started
2021/07/08 17:37:24 scheduler task 8c3a26a2 (flow 63d125fa): loading val<.=s3://niema-test/n100/r10/n100.r10.s017_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 53abe90b (flow df4d82f6): loading val<.=s3://niema-test/n100/r10/n100.r10.s013_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task c0a2340c (flow 0d3cc969): loading (try 0): started
2021/07/08 17:37:24 scheduler task 207ede7a (flow 23b67a6f): loading (try 0): started
2021/07/08 17:37:24 scheduler task c0a2340c (flow 0d3cc969): loading val<.=s3://niema-test/n100/r10/n100.r10.s026_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 207ede7a (flow 23b67a6f): loading val<.=s3://niema-test/n100/r10/n100.r10.s082_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 3d965a50 (flow 14c2b5b4): loading (try 0): started
2021/07/08 17:37:24 scheduler task 207ede7a (flow 23b67a6f): loading val<.=s3://niema-test/n100/r10/n100.r10.s082_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task c33b1ab5 (flow c0e27ff9): loading val<.=s3://niema-test/n100/r10/n100.r10.s030_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 3d965a50 (flow 14c2b5b4): loading val<.=s3://niema-test/n100/r10/n100.r10.s031_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task c33b1ab5 (flow c0e27ff9): loading val<.=s3://niema-test/n100/r10/n100.r10.s030_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 3d965a50 (flow 14c2b5b4): loading val<.=s3://niema-test/n100/r10/n100.r10.s031_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task e8c8e808 (flow 5077aef2): loading val<.=s3://niema-test/n100/r10/n100.r10.s025_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 54c398c1 (flow 43de8083): loading val<.=s3://niema-test/n100/r10/n100.r10.s080_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task e8c8e808 (flow 5077aef2): loading val<.=s3://niema-test/n100/r10/n100.r10.s025_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 62273247 (flow 40aecf6e): loading val<.=s3://niema-test/n100/r10/n100.r10.s058_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 54c398c1 (flow 43de8083): loading val<.=s3://niema-test/n100/r10/n100.r10.s080_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 62273247 (flow 40aecf6e): loading val<.=s3://niema-test/n100/r10/n100.r10.s058_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task d7c574d6 (flow d719cd29): loading val<.=s3://niema-test/n100/r10/n100.r10.s049_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task d7c574d6 (flow d719cd29): loading val<.=s3://niema-test/n100/r10/n100.r10.s049_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 8132d6a4 (flow 3012d03f): loading val<.=s3://niema-test/n100/r10/n100.r10.s085_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 36958e06 (flow c159c17e): loading val<.=s3://niema-test/n100/r10/n100.r10.s028_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task f44a16a1 (flow d1275b24): loading (try 0): started
2021/07/08 17:37:24 scheduler task 847deec3 (flow 54b764b0): loading (try 0): started
2021/07/08 17:37:24 scheduler task 847deec3 (flow 54b764b0): loading val<.=s3://niema-test/n100/r10/n100.r10.s014_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task f44a16a1 (flow d1275b24): loading val<.=s3://niema-test/n100/r10/n100.r10.s095_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 10b9639e (flow c2c3e971): loading val<.=s3://niema-test/n100/r10/n100.r10.s040_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 847deec3 (flow 54b764b0): loading val<.=s3://niema-test/n100/r10/n100.r10.s014_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 49b52cb8 (flow debb172b): loading val<.=s3://niema-test/n100/r10/n100.r10.s005_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 277a5fa1 (flow abe7077c): loading val<.=s3://niema-test/n100/r10/n100.r10.s010_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task 53abe90b (flow df4d82f6): loading val<.=s3://niema-test/n100/r10/n100.r10.s013_R1.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task c0a2340c (flow 0d3cc969): loading val<.=s3://niema-test/n100/r10/n100.r10.s026_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task f44a16a1 (flow d1275b24): loading val<.=s3://niema-test/n100/r10/n100.r10.s095_R2.fastq 35.4MiB>
2021/07/08 17:37:24 scheduler task fff01a1f (flow a2254fff): loaded val<.=db880bf6 35.4MiB>
2021/07/08 17:37:24 scheduler task 4bad225b (flow d1003e88): loaded val<.=e4a44068 35.4MiB>
2021/07/08 17:37:24 scheduler task fff01a1f (flow a2254fff): loaded val<.=27a911d1 35.4MiB>
2021/07/08 17:37:24 scheduler task fff01a1f (flow a2254fff): loading (try 0): successful, next state: submitting
2021/07/08 17:37:24 scheduler task fff01a1f (flow a2254fff): submitting (try 0): started
2021/07/08 17:37:24 scheduler task afc69f69 (flow 27efc78a): loaded val<.=f89d2dc1 35.4MiB>
2021/07/08 17:37:24 scheduler task 4bad225b (flow d1003e88): loaded val<.=62dd7043 35.4MiB>
2021/07/08 17:37:24 scheduler task 4bad225b (flow d1003e88): loading (try 0): successful, next state: submitting
2021/07/08 17:37:24 scheduler task 4bad225b (flow d1003e88): submitting (try 0): started
2021/07/08 17:37:25 scheduler task 07a286b8 (flow c59eb1d7): loaded val<.=6bc5eaec 35.4MiB>
2021/07/08 17:37:25 scheduler task 07a286b8 (flow c59eb1d7): loaded val<.=2093bb6e 35.4MiB>
2021/07/08 17:37:25 scheduler task 07a286b8 (flow c59eb1d7): loading (try 0): successful, next state: submitting
2021/07/08 17:37:25 scheduler task 07a286b8 (flow c59eb1d7): submitting (try 0): started
2021/07/08 17:37:25 scheduler task afc69f69 (flow 27efc78a): loaded val<.=12dddcc7 35.4MiB>
2021/07/08 17:37:25 scheduler task afc69f69 (flow 27efc78a): loading (try 0): successful, next state: submitting
2021/07/08 17:37:25 scheduler task afc69f69 (flow 27efc78a): submitting (try 0): started
2021/07/08 17:37:25 scheduler task fff01a1f (flow a2254fff): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:25 scheduler task fff01a1f (flow a2254fff): waiting for completion (try 0): started
2021/07/08 17:37:25  ->  n100.r10.s006.Main.out_file a2254fff exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:25 n100.r10.s006.Main.out_file a2254fff n100/r10/n100.r10.s006.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:097c2f458a1e1a848fdde9c30a1d3c487125f91251a541bddfbdf96bfb77cb8f
	sha256:a2254fff658a2d16b797e002fabf78095bcf6c9b8d85b2977db5216a721334d5
	ec2-3-16-66-179.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fff01a1f2d0a73e9180569f37a060543645979fc4358b3c26e5bfa9cbc56336f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s006_output"
	    wget -O "n100.r10.s006_output/n100.r10.s006.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s006_output/n100.r10.s006.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s006_output/n100.r10.s006.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s006_output/n100.r10.s006.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s006_output/n100.r10.s006.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s006_output/n100.r10.s006.reference.fas" "n100.r10.s006_output/n100.r10.s006.fq1.fastq" "n100.r10.s006_output/n100.r10.s006.fq2.fastq" | samtools view -bS - > "n100.r10.s006_output/n100.r10.s006.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s006_output/n100.r10.s006.untrimmed.sorted.bam" "n100.r10.s006_output/n100.r10.s006.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s006_output/n100.r10.s006.untrimmed.sorted.bam" -b "n100.r10.s006_output/n100.r10.s006.primers.bed" -p "n100.r10.s006_output/n100.r10.s006.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s006_output/n100.r10.s006.trimmed.sorted.bam" "n100.r10.s006_output/n100.r10.s006.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s006_output/n100.r10.s006.reference.fas" "n100.r10.s006_output/n100.r10.s006.trimmed.sorted.bam" > "n100.r10.s006_output/n100.r10.s006.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s006_output/n100.r10.s006.reference.fas" --call-indels "n100.r10.s006_output/n100.r10.s006.trimmed.sorted.bam" > "n100.r10.s006_output/n100.r10.s006.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s006_output/n100.r10.s006.trimmed.sorted.bam" > "n100.r10.s006_output/n100.r10.s006.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s006_output/n100.r10.s006.depth.txt" "n100.r10.s006_output/n100.r10.s006.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s006_output/n100.r10.s006.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s006_output/n100.r10.s006.reference.fas" | bcftools consensus -m "n100.r10.s006_output/n100.r10.s006.low_depth.tsv" tmp.vcf.gz > "n100.r10.s006_output/n100.r10.s006.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s006_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:25 scheduler task 4bad225b (flow d1003e88): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:25 scheduler task 4bad225b (flow d1003e88): waiting for completion (try 0): started
2021/07/08 17:37:25  ->  n100.r10.s057.Main.out_file d1003e88 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:25 n100.r10.s057.Main.out_file d1003e88 n100/r10/n100.r10.s057.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:df229e2c9385c75fc8e6a5d21a120c1bef50968e2abd97312c70c9d50dadda21
	sha256:d1003e88429eeb806e285bbe63de9c648efba20026271ff9c27b0d9d87ce115f
	ec2-3-16-66-179.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4bad225b7f8bbb218bb8544a24f7cdc892a5097edaed4c22e5afffdaa445624c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s057_output"
	    wget -O "n100.r10.s057_output/n100.r10.s057.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s057_output/n100.r10.s057.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s057_output/n100.r10.s057.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s057_output/n100.r10.s057.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s057_output/n100.r10.s057.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s057_output/n100.r10.s057.reference.fas" "n100.r10.s057_output/n100.r10.s057.fq1.fastq" "n100.r10.s057_output/n100.r10.s057.fq2.fastq" | samtools view -bS - > "n100.r10.s057_output/n100.r10.s057.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s057_output/n100.r10.s057.untrimmed.sorted.bam" "n100.r10.s057_output/n100.r10.s057.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s057_output/n100.r10.s057.untrimmed.sorted.bam" -b "n100.r10.s057_output/n100.r10.s057.primers.bed" -p "n100.r10.s057_output/n100.r10.s057.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s057_output/n100.r10.s057.trimmed.sorted.bam" "n100.r10.s057_output/n100.r10.s057.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s057_output/n100.r10.s057.reference.fas" "n100.r10.s057_output/n100.r10.s057.trimmed.sorted.bam" > "n100.r10.s057_output/n100.r10.s057.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s057_output/n100.r10.s057.reference.fas" --call-indels "n100.r10.s057_output/n100.r10.s057.trimmed.sorted.bam" > "n100.r10.s057_output/n100.r10.s057.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s057_output/n100.r10.s057.trimmed.sorted.bam" > "n100.r10.s057_output/n100.r10.s057.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s057_output/n100.r10.s057.depth.txt" "n100.r10.s057_output/n100.r10.s057.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s057_output/n100.r10.s057.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s057_output/n100.r10.s057.reference.fas" | bcftools consensus -m "n100.r10.s057_output/n100.r10.s057.low_depth.tsv" tmp.vcf.gz > "n100.r10.s057_output/n100.r10.s057.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s057_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:25 scheduler task 07a286b8 (flow c59eb1d7): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:25 scheduler task 07a286b8 (flow c59eb1d7): waiting for completion (try 0): started
2021/07/08 17:37:25  ->  n100.r10.s029.Main.out_file c59eb1d7 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:25 n100.r10.s029.Main.out_file c59eb1d7 n100/r10/n100.r10.s029.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:37cc336a16333fa5dd97b858f646ffe990a011ac4a397cc3d38fade1924e0b60
	sha256:c59eb1d7c71e87e49f55f2733eb2846214b1ad05acec36ecaac24ed0023b51ec
	ec2-3-16-66-179.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/07a286b85d320d9a9d113d154f5f1a653b291f968a021c24304414cf468b3003
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s029_output"
	    wget -O "n100.r10.s029_output/n100.r10.s029.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s029_output/n100.r10.s029.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s029_output/n100.r10.s029.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s029_output/n100.r10.s029.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s029_output/n100.r10.s029.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s029_output/n100.r10.s029.reference.fas" "n100.r10.s029_output/n100.r10.s029.fq1.fastq" "n100.r10.s029_output/n100.r10.s029.fq2.fastq" | samtools view -bS - > "n100.r10.s029_output/n100.r10.s029.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s029_output/n100.r10.s029.untrimmed.sorted.bam" "n100.r10.s029_output/n100.r10.s029.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s029_output/n100.r10.s029.untrimmed.sorted.bam" -b "n100.r10.s029_output/n100.r10.s029.primers.bed" -p "n100.r10.s029_output/n100.r10.s029.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s029_output/n100.r10.s029.trimmed.sorted.bam" "n100.r10.s029_output/n100.r10.s029.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s029_output/n100.r10.s029.reference.fas" "n100.r10.s029_output/n100.r10.s029.trimmed.sorted.bam" > "n100.r10.s029_output/n100.r10.s029.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s029_output/n100.r10.s029.reference.fas" --call-indels "n100.r10.s029_output/n100.r10.s029.trimmed.sorted.bam" > "n100.r10.s029_output/n100.r10.s029.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s029_output/n100.r10.s029.trimmed.sorted.bam" > "n100.r10.s029_output/n100.r10.s029.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s029_output/n100.r10.s029.depth.txt" "n100.r10.s029_output/n100.r10.s029.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s029_output/n100.r10.s029.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s029_output/n100.r10.s029.reference.fas" | bcftools consensus -m "n100.r10.s029_output/n100.r10.s029.low_depth.tsv" tmp.vcf.gz > "n100.r10.s029_output/n100.r10.s029.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s029_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:25 scheduler task 600bf6cf (flow 21732518): loaded val<.=df436ce9 35.4MiB>
2021/07/08 17:37:25 scheduler task afc69f69 (flow 27efc78a): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:25 scheduler task afc69f69 (flow 27efc78a): waiting for completion (try 0): started
2021/07/08 17:37:25  ->  n100.r10.s007.Main.out_file 27efc78a exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:25 n100.r10.s007.Main.out_file 27efc78a n100/r10/n100.r10.s007.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9594de9a45908a64cdf76dedd9470008aae4db0dc517be8e5017e7335b1ce078
	sha256:27efc78abbe3af9a6b249d665f316deaffc9ab4f704d912b098a620f2660199c
	ec2-3-16-66-179.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/afc69f69e8ef8254472a9114b9282afdf7cff00b63a07d7c4f09f7d71bde7ef9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s007_output"
	    wget -O "n100.r10.s007_output/n100.r10.s007.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s007_output/n100.r10.s007.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s007_output/n100.r10.s007.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s007_output/n100.r10.s007.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s007_output/n100.r10.s007.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s007_output/n100.r10.s007.reference.fas" "n100.r10.s007_output/n100.r10.s007.fq1.fastq" "n100.r10.s007_output/n100.r10.s007.fq2.fastq" | samtools view -bS - > "n100.r10.s007_output/n100.r10.s007.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s007_output/n100.r10.s007.untrimmed.sorted.bam" "n100.r10.s007_output/n100.r10.s007.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s007_output/n100.r10.s007.untrimmed.sorted.bam" -b "n100.r10.s007_output/n100.r10.s007.primers.bed" -p "n100.r10.s007_output/n100.r10.s007.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s007_output/n100.r10.s007.trimmed.sorted.bam" "n100.r10.s007_output/n100.r10.s007.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s007_output/n100.r10.s007.reference.fas" "n100.r10.s007_output/n100.r10.s007.trimmed.sorted.bam" > "n100.r10.s007_output/n100.r10.s007.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s007_output/n100.r10.s007.reference.fas" --call-indels "n100.r10.s007_output/n100.r10.s007.trimmed.sorted.bam" > "n100.r10.s007_output/n100.r10.s007.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s007_output/n100.r10.s007.trimmed.sorted.bam" > "n100.r10.s007_output/n100.r10.s007.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s007_output/n100.r10.s007.depth.txt" "n100.r10.s007_output/n100.r10.s007.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s007_output/n100.r10.s007.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s007_output/n100.r10.s007.reference.fas" | bcftools consensus -m "n100.r10.s007_output/n100.r10.s007.low_depth.tsv" tmp.vcf.gz > "n100.r10.s007_output/n100.r10.s007.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s007_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:25 scheduler task 1400e0ee (flow 3bf338dc): loaded val<.=419cd21b 35.4MiB>
2021/07/08 17:37:25 scheduler task 09c401c4 (flow 22954720): loaded val<.=8b16cfb4 35.4MiB>
2021/07/08 17:37:25 scheduler task f070a1d7 (flow 943fd4e3): loaded val<.=54706610 35.4MiB>
2021/07/08 17:37:25 scheduler task 9d2f7e82 (flow a018bf83): loaded val<.=e5bb04ee 35.4MiB>
2021/07/08 17:37:25 scheduler task 9bbf3998 (flow a707041f): loaded val<.=a3a0cb8c 35.4MiB>
2021/07/08 17:37:25 scheduler task 32946189 (flow 2b9c6b67): loaded val<.=3859861c 35.4MiB>
2021/07/08 17:37:25 scheduler task 3134442c (flow c17adea7): loaded val<.=6560d2e2 35.4MiB>
2021/07/08 17:37:25 scheduler task da1aa7bb (flow f919f347): loaded val<.=8c2278d1 35.4MiB>
2021/07/08 17:37:25 scheduler task 592f7c63 (flow a4c9f908): loaded val<.=20f2fc6e 35.4MiB>
2021/07/08 17:37:25 scheduler task 32946189 (flow 2b9c6b67): loaded val<.=68313c14 35.4MiB>
2021/07/08 17:37:25 scheduler task da1aa7bb (flow f919f347): loaded val<.=5e0d560f 35.4MiB>
2021/07/08 17:37:25 scheduler task 600bf6cf (flow 21732518): loaded val<.=987ef7ae 35.4MiB>
2021/07/08 17:37:25 scheduler task 600bf6cf (flow 21732518): loading (try 0): successful, next state: submitting
2021/07/08 17:37:25 scheduler task 32946189 (flow 2b9c6b67): loading (try 0): successful, next state: submitting
2021/07/08 17:37:25 scheduler task 9bbf3998 (flow a707041f): loaded val<.=089b578f 35.4MiB>
2021/07/08 17:37:25 scheduler task 9bbf3998 (flow a707041f): loading (try 0): successful, next state: submitting
2021/07/08 17:37:25 scheduler task 3134442c (flow c17adea7): loaded val<.=74a4e841 35.4MiB>
2021/07/08 17:37:25 scheduler task 3134442c (flow c17adea7): loading (try 0): successful, next state: submitting
2021/07/08 17:37:25 scheduler task f18684ae (flow 8fab09ce): loaded val<.=3bcdf3b8 35.4MiB>
2021/07/08 17:37:25 scheduler task 74420576 (flow eaea6f09): loaded val<.=a1be5ef2 35.4MiB>
2021/07/08 17:37:25 scheduler task da1aa7bb (flow f919f347): loading (try 0): successful, next state: submitting
2021/07/08 17:37:25 scheduler task 600bf6cf (flow 21732518): submitting (try 0): started
2021/07/08 17:37:25 scheduler task 8e195244 (flow 62a7eeea): loaded val<.=94ff22af 35.4MiB>
2021/07/08 17:37:25 scheduler task 0a2b5832 (flow c7221f94): loaded val<.=1fa12ab7 35.4MiB>
2021/07/08 17:37:25 scheduler task 32946189 (flow 2b9c6b67): submitting (try 0): started
2021/07/08 17:37:25 scheduler task 9a1d8533 (flow 60012892): loaded val<.=3e616b82 35.4MiB>
2021/07/08 17:37:25 scheduler task 9bbf3998 (flow a707041f): submitting (try 0): started
2021/07/08 17:37:25 scheduler task 3134442c (flow c17adea7): submitting (try 0): started
2021/07/08 17:37:25 scheduler task 09c401c4 (flow 22954720): loaded val<.=c3f918f0 35.4MiB>
2021/07/08 17:37:25 scheduler task 09c401c4 (flow 22954720): loading (try 0): successful, next state: submitting
2021/07/08 17:37:25 scheduler task da1aa7bb (flow f919f347): submitting (try 0): started
2021/07/08 17:37:25 scheduler task 09c401c4 (flow 22954720): submitting (try 0): started
2021/07/08 17:37:25 scheduler task 99e381d1 (flow 9f4cf67f): loaded val<.=083dcc8f 35.4MiB>
2021/07/08 17:37:25 scheduler task 1400e0ee (flow 3bf338dc): loaded val<.=574c82ba 35.4MiB>
2021/07/08 17:37:25 scheduler task 0a2b5832 (flow c7221f94): loaded val<.=a86f30b0 35.4MiB>
2021/07/08 17:37:25 scheduler task 1400e0ee (flow 3bf338dc): loading (try 0): successful, next state: submitting
2021/07/08 17:37:25 scheduler task 215d2c98 (flow f5b79134): loaded val<.=b9c92bdb 35.4MiB>
2021/07/08 17:37:25 scheduler task a99fe358 (flow 025791ae): loaded val<.=dbb00916 35.4MiB>
2021/07/08 17:37:25 scheduler task 0a2b5832 (flow c7221f94): loading (try 0): successful, next state: submitting
2021/07/08 17:37:25 scheduler task f070a1d7 (flow 943fd4e3): loaded val<.=8931639b 35.4MiB>
2021/07/08 17:37:25 scheduler task f070a1d7 (flow 943fd4e3): loading (try 0): successful, next state: submitting
2021/07/08 17:37:25 scheduler task 9d2f7e82 (flow a018bf83): loaded val<.=d7d4a4e0 35.4MiB>
2021/07/08 17:37:25 scheduler task 9d2f7e82 (flow a018bf83): loading (try 0): successful, next state: submitting
2021/07/08 17:37:25 scheduler task 1400e0ee (flow 3bf338dc): submitting (try 0): started
2021/07/08 17:37:25 scheduler task f24dd117 (flow d06527d9): loaded val<.=3639bd1e 35.4MiB>
2021/07/08 17:37:25 scheduler task 215d2c98 (flow f5b79134): loaded val<.=270b5701 35.4MiB>
2021/07/08 17:37:25 scheduler task 215d2c98 (flow f5b79134): loading (try 0): successful, next state: submitting
2021/07/08 17:37:25 scheduler task 0a2b5832 (flow c7221f94): submitting (try 0): started
2021/07/08 17:37:25 scheduler task f18684ae (flow 8fab09ce): loaded val<.=6a1a839c 35.4MiB>
2021/07/08 17:37:25 scheduler task f18684ae (flow 8fab09ce): loading (try 0): successful, next state: submitting
2021/07/08 17:37:26 scheduler task f070a1d7 (flow 943fd4e3): submitting (try 0): started
2021/07/08 17:37:26 scheduler task 9d2f7e82 (flow a018bf83): submitting (try 0): started
2021/07/08 17:37:26 scheduler task 215d2c98 (flow f5b79134): submitting (try 0): started
2021/07/08 17:37:26 scheduler task f18684ae (flow 8fab09ce): submitting (try 0): started
2021/07/08 17:37:26 scheduler task 74420576 (flow eaea6f09): loaded val<.=030d8f1f 35.4MiB>
2021/07/08 17:37:26 scheduler task 74420576 (flow eaea6f09): loading (try 0): successful, next state: submitting
2021/07/08 17:37:26 scheduler task b498cd4e (flow fe03b18e): loaded val<.=8e6bd968 35.4MiB>
2021/07/08 17:37:26 scheduler task b4908e4d (flow 735398ea): loaded val<.=d9bb6905 35.4MiB>
2021/07/08 17:37:26 scheduler task c8a4ff5c (flow 9bc6f146): loaded val<.=5b2a3e53 35.4MiB>
2021/07/08 17:37:26 scheduler task 7ddd1093 (flow a692e162): loaded val<.=e0642836 35.4MiB>
2021/07/08 17:37:26 scheduler task 99e381d1 (flow 9f4cf67f): loaded val<.=93897893 35.4MiB>
2021/07/08 17:37:26 scheduler task 99e381d1 (flow 9f4cf67f): loading (try 0): successful, next state: submitting
2021/07/08 17:37:26 scheduler task d1d46b3d (flow 21dcc181): loaded val<.=5276486f 35.4MiB>
2021/07/08 17:37:26 scheduler task 404ec61a (flow 5ae42756): loaded val<.=ef8b8c11 35.4MiB>
2021/07/08 17:37:26 scheduler task b498cd4e (flow fe03b18e): loaded val<.=a246f171 35.4MiB>
2021/07/08 17:37:26 scheduler task b498cd4e (flow fe03b18e): loading (try 0): successful, next state: submitting
2021/07/08 17:37:26 scheduler task 6f235a83 (flow 3c6bdf5b): loaded val<.=cc2cb302 35.4MiB>
2021/07/08 17:37:26 scheduler task 592f7c63 (flow a4c9f908): loaded val<.=44fe0f67 35.4MiB>
2021/07/08 17:37:26 scheduler task 592f7c63 (flow a4c9f908): loading (try 0): successful, next state: submitting
2021/07/08 17:37:26 scheduler task 28aacb8b (flow 5c83df52): loaded val<.=42e45d84 35.4MiB>
2021/07/08 17:37:26 scheduler task 1038d1a1 (flow bef79a94): loaded val<.=1c22776b 35.4MiB>
2021/07/08 17:37:26 scheduler task 74420576 (flow eaea6f09): submitting (try 0): started
2021/07/08 17:37:26 scheduler task 99e381d1 (flow 9f4cf67f): submitting (try 0): started
2021/07/08 17:37:26 scheduler task b498cd4e (flow fe03b18e): submitting (try 0): started
2021/07/08 17:37:26 scheduler task 9741371c (flow 26a00bb9): loaded val<.=be4ceebd 35.4MiB>
2021/07/08 17:37:26 scheduler task 1038d1a1 (flow bef79a94): loaded val<.=17481ecf 35.4MiB>
2021/07/08 17:37:26 scheduler task 1038d1a1 (flow bef79a94): loading (try 0): successful, next state: submitting
2021/07/08 17:37:26 scheduler task 592f7c63 (flow a4c9f908): submitting (try 0): started
2021/07/08 17:37:26 scheduler task 1038d1a1 (flow bef79a94): submitting (try 0): started
2021/07/08 17:37:26 scheduler task 9a1d8533 (flow 60012892): loaded val<.=6b53ffa1 35.4MiB>
2021/07/08 17:37:26 scheduler task 9a1d8533 (flow 60012892): loading (try 0): successful, next state: submitting
2021/07/08 17:37:26 scheduler task 59e7f390 (flow 8552db05): loaded val<.=12a6d16e 35.4MiB>
2021/07/08 17:37:26 scheduler task 28aacb8b (flow 5c83df52): loaded val<.=146803c4 35.4MiB>
2021/07/08 17:37:26 scheduler task 28aacb8b (flow 5c83df52): loading (try 0): successful, next state: submitting
2021/07/08 17:37:26 scheduler task c8a4ff5c (flow 9bc6f146): loaded val<.=7279dbf8 35.4MiB>
2021/07/08 17:37:26 scheduler task c8a4ff5c (flow 9bc6f146): loading (try 0): successful, next state: submitting
2021/07/08 17:37:26 scheduler task 404ec61a (flow 5ae42756): loaded val<.=4a62269c 35.4MiB>
2021/07/08 17:37:26 scheduler task 404ec61a (flow 5ae42756): loading (try 0): successful, next state: submitting
2021/07/08 17:37:26 scheduler task 9a1d8533 (flow 60012892): submitting (try 0): started
2021/07/08 17:37:26 scheduler task 28aacb8b (flow 5c83df52): submitting (try 0): started
2021/07/08 17:37:26 scheduler task c8a4ff5c (flow 9bc6f146): submitting (try 0): started
2021/07/08 17:37:26 scheduler task 44a25b37 (flow 39b5a1ee): loaded val<.=bbd9568e 35.4MiB>
2021/07/08 17:37:26 scheduler task a74afbde (flow 76734b91): loaded val<.=c558fc4e 35.4MiB>
2021/07/08 17:37:26 scheduler task 59e7f390 (flow 8552db05): loaded val<.=7cf8c430 35.4MiB>
2021/07/08 17:37:26 scheduler task d78f5d37 (flow 88a0cdd2): loaded val<.=41cfd06b 35.4MiB>
2021/07/08 17:37:26 scheduler task 59e7f390 (flow 8552db05): loading (try 0): successful, next state: submitting
2021/07/08 17:37:26 scheduler task 74962e85 (flow 82727c77): loaded val<.=4c9100d2 35.4MiB>
2021/07/08 17:37:26 scheduler task 74962e85 (flow 82727c77): loaded val<.=f8f47ef4 35.4MiB>
2021/07/08 17:37:26 scheduler task 74962e85 (flow 82727c77): loading (try 0): successful, next state: submitting
2021/07/08 17:37:26 scheduler task 404ec61a (flow 5ae42756): submitting (try 0): started
2021/07/08 17:37:26 scheduler task 59e7f390 (flow 8552db05): submitting (try 0): started
2021/07/08 17:37:26 scheduler task 74962e85 (flow 82727c77): submitting (try 0): started
2021/07/08 17:37:26 scheduler task 7ddd1093 (flow a692e162): loaded val<.=b09a7d5b 35.4MiB>
2021/07/08 17:37:26 scheduler task 7ddd1093 (flow a692e162): loading (try 0): successful, next state: submitting
2021/07/08 17:37:26 scheduler task 7ddd1093 (flow a692e162): submitting (try 0): started
2021/07/08 17:37:26 scheduler task b4908e4d (flow 735398ea): loaded val<.=f13c4316 35.4MiB>
2021/07/08 17:37:26 scheduler task b4908e4d (flow 735398ea): loading (try 0): successful, next state: submitting
2021/07/08 17:37:26 scheduler task b4908e4d (flow 735398ea): submitting (try 0): started
2021/07/08 17:37:26 scheduler task 847deec3 (flow 54b764b0): loaded val<.=8bbd482f 35.4MiB>
2021/07/08 17:37:26 scheduler task f24dd117 (flow d06527d9): loaded val<.=3636cd25 35.4MiB>
2021/07/08 17:37:26 scheduler task f24dd117 (flow d06527d9): loading (try 0): successful, next state: submitting
2021/07/08 17:37:26 scheduler task f24dd117 (flow d06527d9): submitting (try 0): started
2021/07/08 17:37:26 scheduler task 600bf6cf (flow 21732518): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:26 scheduler task 600bf6cf (flow 21732518): waiting for completion (try 0): started
2021/07/08 17:37:26  ->  n100.r10.s012.Main.out_file 21732518 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:26 n100.r10.s012.Main.out_file 21732518 n100/r10/n100.r10.s012.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4a18e557a41b2daddf8c761d7d4d24094d0ccb5e6d7c9590b1bb275eb0a88547
	sha256:217325182ddf318ea4103c2d2f611a85b2c038ea5b184f66c33f0b36bb314683
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/600bf6cfdc7cf1b0af67d839b23093afd7db91f0b03def27cd52f1bf170a8222
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s012_output"
	    wget -O "n100.r10.s012_output/n100.r10.s012.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s012_output/n100.r10.s012.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s012_output/n100.r10.s012.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s012_output/n100.r10.s012.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s012_output/n100.r10.s012.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s012_output/n100.r10.s012.reference.fas" "n100.r10.s012_output/n100.r10.s012.fq1.fastq" "n100.r10.s012_output/n100.r10.s012.fq2.fastq" | samtools view -bS - > "n100.r10.s012_output/n100.r10.s012.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s012_output/n100.r10.s012.untrimmed.sorted.bam" "n100.r10.s012_output/n100.r10.s012.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s012_output/n100.r10.s012.untrimmed.sorted.bam" -b "n100.r10.s012_output/n100.r10.s012.primers.bed" -p "n100.r10.s012_output/n100.r10.s012.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s012_output/n100.r10.s012.trimmed.sorted.bam" "n100.r10.s012_output/n100.r10.s012.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s012_output/n100.r10.s012.reference.fas" "n100.r10.s012_output/n100.r10.s012.trimmed.sorted.bam" > "n100.r10.s012_output/n100.r10.s012.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s012_output/n100.r10.s012.reference.fas" --call-indels "n100.r10.s012_output/n100.r10.s012.trimmed.sorted.bam" > "n100.r10.s012_output/n100.r10.s012.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s012_output/n100.r10.s012.trimmed.sorted.bam" > "n100.r10.s012_output/n100.r10.s012.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s012_output/n100.r10.s012.depth.txt" "n100.r10.s012_output/n100.r10.s012.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s012_output/n100.r10.s012.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s012_output/n100.r10.s012.reference.fas" | bcftools consensus -m "n100.r10.s012_output/n100.r10.s012.low_depth.tsv" tmp.vcf.gz > "n100.r10.s012_output/n100.r10.s012.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s012_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:26 scheduler task bd8d9d6a (flow 94edc653): loaded val<.=e1fe607e 35.4MiB>
2021/07/08 17:37:26 scheduler task bd8d9d6a (flow 94edc653): loaded val<.=4f960598 35.4MiB>
2021/07/08 17:37:26 scheduler task bd8d9d6a (flow 94edc653): loading (try 0): successful, next state: submitting
2021/07/08 17:37:26 scheduler task bd8d9d6a (flow 94edc653): submitting (try 0): started
2021/07/08 17:37:26 scheduler task 32946189 (flow 2b9c6b67): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:26 scheduler task 32946189 (flow 2b9c6b67): waiting for completion (try 0): started
2021/07/08 17:37:26  ->  n100.r10.s091.Main.out_file 2b9c6b67 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:26 n100.r10.s091.Main.out_file 2b9c6b67 n100/r10/n100.r10.s091.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:692ea2ffb12363ee99cc4ed24ad772299ef5c4842f6bf57a5cb63bbbe6951c78
	sha256:2b9c6b67e356bf6eef28ded2027410bb1dbcd3346295d2b41fd798306e04754a
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/329461898043c208ab707f44a0da5f549248a0df2e78ae97f8bf30c139490ad2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s091_output"
	    wget -O "n100.r10.s091_output/n100.r10.s091.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s091_output/n100.r10.s091.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s091_output/n100.r10.s091.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s091_output/n100.r10.s091.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s091_output/n100.r10.s091.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s091_output/n100.r10.s091.reference.fas" "n100.r10.s091_output/n100.r10.s091.fq1.fastq" "n100.r10.s091_output/n100.r10.s091.fq2.fastq" | samtools view -bS - > "n100.r10.s091_output/n100.r10.s091.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s091_output/n100.r10.s091.untrimmed.sorted.bam" "n100.r10.s091_output/n100.r10.s091.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s091_output/n100.r10.s091.untrimmed.sorted.bam" -b "n100.r10.s091_output/n100.r10.s091.primers.bed" -p "n100.r10.s091_output/n100.r10.s091.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s091_output/n100.r10.s091.trimmed.sorted.bam" "n100.r10.s091_output/n100.r10.s091.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s091_output/n100.r10.s091.reference.fas" "n100.r10.s091_output/n100.r10.s091.trimmed.sorted.bam" > "n100.r10.s091_output/n100.r10.s091.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s091_output/n100.r10.s091.reference.fas" --call-indels "n100.r10.s091_output/n100.r10.s091.trimmed.sorted.bam" > "n100.r10.s091_output/n100.r10.s091.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s091_output/n100.r10.s091.trimmed.sorted.bam" > "n100.r10.s091_output/n100.r10.s091.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s091_output/n100.r10.s091.depth.txt" "n100.r10.s091_output/n100.r10.s091.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s091_output/n100.r10.s091.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s091_output/n100.r10.s091.reference.fas" | bcftools consensus -m "n100.r10.s091_output/n100.r10.s091.low_depth.tsv" tmp.vcf.gz > "n100.r10.s091_output/n100.r10.s091.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s091_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:26 scheduler task 3a2d4435 (flow 8e8257f7): loaded val<.=8fcddf63 35.4MiB>
2021/07/08 17:37:26 scheduler task 0a72f984 (flow 0210f1d8): loaded val<.=8ddf2909 35.4MiB>
2021/07/08 17:37:26 scheduler task 922533fe (flow 9b575067): loaded val<.=6fcca372 35.4MiB>
2021/07/08 17:37:26 scheduler task 61d86a19 (flow ee1e5c5f): loaded val<.=d722ebb7 35.4MiB>
2021/07/08 17:37:26 scheduler task 36958e06 (flow c159c17e): loaded val<.=0600be40 35.4MiB>
2021/07/08 17:37:26 scheduler task 42735b19 (flow c3a76ea0): loaded val<.=fdfe5a8f 35.4MiB>
2021/07/08 17:37:26 scheduler task 61d86a19 (flow ee1e5c5f): loaded val<.=80ccb185 35.4MiB>
2021/07/08 17:37:26 scheduler task 61d86a19 (flow ee1e5c5f): loading (try 0): successful, next state: submitting
2021/07/08 17:37:26 scheduler task 61d86a19 (flow ee1e5c5f): submitting (try 0): started
2021/07/08 17:37:26 scheduler task 10b2ee98 (flow 7eb303f0): loaded val<.=d66ffb9f 35.4MiB>
2021/07/08 17:37:26 scheduler task a510cb24 (flow 1bfcc9a2): loaded val<.=c0fda625 35.4MiB>
2021/07/08 17:37:26 scheduler task 8d0f47ee (flow 5e0db977): loaded val<.=fbbe9ae4 35.4MiB>
2021/07/08 17:37:26 scheduler task 11521559 (flow aee712fe): loaded val<.=720252a9 35.4MiB>
2021/07/08 17:37:26 scheduler task 63cda6a4 (flow 20c10487): loaded val<.=2984e354 35.4MiB>
2021/07/08 17:37:26 scheduler task 62273247 (flow 40aecf6e): loaded val<.=da169ef4 35.4MiB>
2021/07/08 17:37:26 scheduler task 41e319db (flow 0f0a0edb): loaded val<.=f433c929 35.4MiB>
2021/07/08 17:37:26 scheduler task 96ccb3b6 (flow e4994f3d): loaded val<.=267af535 35.4MiB>
2021/07/08 17:37:26 scheduler task bc1a220d (flow 5b1cd59e): loaded val<.=fbe10159 35.4MiB>
2021/07/08 17:37:26 scheduler task 3d965a50 (flow 14c2b5b4): loaded val<.=dec601b4 35.4MiB>
2021/07/08 17:37:26 scheduler task 0a72f984 (flow 0210f1d8): loaded val<.=0c7e2f6c 35.4MiB>
2021/07/08 17:37:26 scheduler task 0a72f984 (flow 0210f1d8): loading (try 0): successful, next state: submitting
2021/07/08 17:37:26 scheduler task 49b52cb8 (flow debb172b): loaded val<.=4ea0627d 35.4MiB>
2021/07/08 17:37:26 scheduler task 0a72f984 (flow 0210f1d8): submitting (try 0): started
2021/07/08 17:37:26 scheduler task f44a16a1 (flow d1275b24): loaded val<.=98acb485 35.4MiB>
2021/07/08 17:37:26 scheduler task 8c3a26a2 (flow 63d125fa): loaded val<.=b807bd87 35.4MiB>
2021/07/08 17:37:26 scheduler task 3ee5fbc0 (flow c6d532f3): loaded val<.=567d4273 35.4MiB>
2021/07/08 17:37:26 scheduler task 207ede7a (flow 23b67a6f): loaded val<.=f8efcb81 35.4MiB>
2021/07/08 17:37:26 scheduler task 277a5fa1 (flow abe7077c): loaded val<.=58b8b7f4 35.4MiB>
2021/07/08 17:37:26 scheduler task 9741371c (flow 26a00bb9): loaded val<.=bcd9005d 35.4MiB>
2021/07/08 17:37:26 scheduler task 9741371c (flow 26a00bb9): loading (try 0): successful, next state: submitting
2021/07/08 17:37:26 scheduler task 9bbf3998 (flow a707041f): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:26 scheduler task 9741371c (flow 26a00bb9): submitting (try 0): started
2021/07/08 17:37:26 scheduler task 9bbf3998 (flow a707041f): waiting for completion (try 0): started
2021/07/08 17:37:26  ->  n100.r10.s022.Main.out_file a707041f exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:26 n100.r10.s022.Main.out_file a707041f n100/r10/n100.r10.s022.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1a6674fe50b228138dec0c7efdba9b8c3372e19e0cdb5cff177add49dcf79db7
	sha256:a707041ffa61c2ea081eb293f9f84982140bf44f5d989180cfa47fc88911de91
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9bbf3998656587d7a9a2a39381bb1dc18bb273e2777aeaeb3bc39e4bb4d1a17f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s022_output"
	    wget -O "n100.r10.s022_output/n100.r10.s022.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s022_output/n100.r10.s022.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s022_output/n100.r10.s022.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s022_output/n100.r10.s022.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s022_output/n100.r10.s022.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s022_output/n100.r10.s022.reference.fas" "n100.r10.s022_output/n100.r10.s022.fq1.fastq" "n100.r10.s022_output/n100.r10.s022.fq2.fastq" | samtools view -bS - > "n100.r10.s022_output/n100.r10.s022.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s022_output/n100.r10.s022.untrimmed.sorted.bam" "n100.r10.s022_output/n100.r10.s022.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s022_output/n100.r10.s022.untrimmed.sorted.bam" -b "n100.r10.s022_output/n100.r10.s022.primers.bed" -p "n100.r10.s022_output/n100.r10.s022.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s022_output/n100.r10.s022.trimmed.sorted.bam" "n100.r10.s022_output/n100.r10.s022.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s022_output/n100.r10.s022.reference.fas" "n100.r10.s022_output/n100.r10.s022.trimmed.sorted.bam" > "n100.r10.s022_output/n100.r10.s022.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s022_output/n100.r10.s022.reference.fas" --call-indels "n100.r10.s022_output/n100.r10.s022.trimmed.sorted.bam" > "n100.r10.s022_output/n100.r10.s022.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s022_output/n100.r10.s022.trimmed.sorted.bam" > "n100.r10.s022_output/n100.r10.s022.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s022_output/n100.r10.s022.depth.txt" "n100.r10.s022_output/n100.r10.s022.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s022_output/n100.r10.s022.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s022_output/n100.r10.s022.reference.fas" | bcftools consensus -m "n100.r10.s022_output/n100.r10.s022.low_depth.tsv" tmp.vcf.gz > "n100.r10.s022_output/n100.r10.s022.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s022_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:26 scheduler task 8132d6a4 (flow 3012d03f): loaded val<.=c20dbf1c 35.4MiB>
2021/07/08 17:37:26 scheduler task a99fe358 (flow 025791ae): loaded val<.=c798e19c 35.4MiB>
2021/07/08 17:37:26 scheduler task a99fe358 (flow 025791ae): loading (try 0): successful, next state: submitting
2021/07/08 17:37:26 scheduler task 51fe96bf (flow 1f86a397): loaded val<.=76f38d66 35.4MiB>
2021/07/08 17:37:26 scheduler task a99fe358 (flow 025791ae): submitting (try 0): started
2021/07/08 17:37:26 scheduler task 11521559 (flow aee712fe): loaded val<.=f1d08633 35.4MiB>
2021/07/08 17:37:26 scheduler task 11521559 (flow aee712fe): loading (try 0): successful, next state: submitting
2021/07/08 17:37:26 scheduler task 42735b19 (flow c3a76ea0): loaded val<.=a1c1c32f 35.4MiB>
2021/07/08 17:37:26 scheduler task 42735b19 (flow c3a76ea0): loading (try 0): successful, next state: submitting
2021/07/08 17:37:26 scheduler task 11521559 (flow aee712fe): submitting (try 0): started
2021/07/08 17:37:26 scheduler task 42735b19 (flow c3a76ea0): submitting (try 0): started
2021/07/08 17:37:26 scheduler task 2e8ecf12 (flow 1925ed71): loaded val<.=c5df1348 35.4MiB>
2021/07/08 17:37:26 scheduler task 8132d6a4 (flow 3012d03f): loaded val<.=aa9f990e 35.4MiB>
2021/07/08 17:37:26 scheduler task 8132d6a4 (flow 3012d03f): loading (try 0): successful, next state: submitting
2021/07/08 17:37:26 scheduler task 8132d6a4 (flow 3012d03f): submitting (try 0): started
2021/07/08 17:37:26 scheduler task 0de34bc3 (flow d01db40b): loaded val<.=4511214f 35.4MiB>
2021/07/08 17:37:26 scheduler task 974bd136 (flow 7368f9bf): loaded val<.=0b6a4188 35.4MiB>
2021/07/08 17:37:26 scheduler task 2139bff7 (flow d781b4f4): loaded val<.=72624098 35.4MiB>
2021/07/08 17:37:26 scheduler task 5916483e (flow 38a4c1e8): loaded val<.=5a0f4a5b 35.4MiB>
2021/07/08 17:37:26 scheduler task 44a25b37 (flow 39b5a1ee): loaded val<.=fa11b88d 35.4MiB>
2021/07/08 17:37:26 scheduler task 44a25b37 (flow 39b5a1ee): loading (try 0): successful, next state: submitting
2021/07/08 17:37:26 scheduler task 44a25b37 (flow 39b5a1ee): submitting (try 0): started
2021/07/08 17:37:26 scheduler task cc4d6c79 (flow a27124a9): loaded val<.=a2ef1111 35.4MiB>
2021/07/08 17:37:26 scheduler task 0727dd15 (flow afe00438): loaded val<.=e17b71a0 35.4MiB>
2021/07/08 17:37:26 scheduler task 53abe90b (flow df4d82f6): loaded val<.=f9b3ed4f 35.4MiB>
2021/07/08 17:37:26 scheduler task 400a7920 (flow a4d00c52): loaded val<.=1bda201d 35.4MiB>
2021/07/08 17:37:26 scheduler task daf95962 (flow 7c29b38a): loaded val<.=7a4cde0f 35.4MiB>
2021/07/08 17:37:26 scheduler task 0727dd15 (flow afe00438): loaded val<.=318150a0 35.4MiB>
2021/07/08 17:37:26 scheduler task 0727dd15 (flow afe00438): loading (try 0): successful, next state: submitting
2021/07/08 17:37:26 scheduler task 3134442c (flow c17adea7): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:26 scheduler task 8c3a26a2 (flow 63d125fa): loaded val<.=2a4cdf26 35.4MiB>
2021/07/08 17:37:26 scheduler task 8c3a26a2 (flow 63d125fa): loading (try 0): successful, next state: submitting
2021/07/08 17:37:26 scheduler task 6020e9b3 (flow 50fe0d18): loaded val<.=0a83ad80 35.4MiB>
2021/07/08 17:37:26 scheduler task daf95962 (flow 7c29b38a): loaded val<.=3d68f01d 35.4MiB>
2021/07/08 17:37:26 scheduler task daf95962 (flow 7c29b38a): loading (try 0): successful, next state: submitting
2021/07/08 17:37:26 scheduler task 2e8ecf12 (flow 1925ed71): loaded val<.=d178af12 35.4MiB>
2021/07/08 17:37:26 scheduler task 2e8ecf12 (flow 1925ed71): loading (try 0): successful, next state: submitting
2021/07/08 17:37:26 scheduler task 847deec3 (flow 54b764b0): loaded val<.=a5ad1ded 35.4MiB>
2021/07/08 17:37:26 scheduler task 2f95f0eb (flow 9906f8c4): loaded val<.=1c080009 35.4MiB>
2021/07/08 17:37:26 scheduler task 847deec3 (flow 54b764b0): loading (try 0): successful, next state: submitting
2021/07/08 17:37:26 scheduler task d7c574d6 (flow d719cd29): loaded val<.=ef88c4c5 35.4MiB>
2021/07/08 17:37:26 scheduler task 26f77987 (flow 474e0149): loaded val<.=75f14a28 35.4MiB>
2021/07/08 17:37:26 scheduler task c6408350 (flow 227a28ae): loaded val<.=2131137a 35.4MiB>
2021/07/08 17:37:26 scheduler task 400a7920 (flow a4d00c52): loaded val<.=9036677b 35.4MiB>
2021/07/08 17:37:26 scheduler task 400a7920 (flow a4d00c52): loading (try 0): successful, next state: submitting
2021/07/08 17:37:26 scheduler task d7c574d6 (flow d719cd29): loaded val<.=ac0d3b7d 35.4MiB>
2021/07/08 17:37:26 scheduler task d7c574d6 (flow d719cd29): loading (try 0): successful, next state: submitting
2021/07/08 17:37:26 scheduler task e8c8e808 (flow 5077aef2): loaded val<.=2522226f 35.4MiB>
2021/07/08 17:37:27 scheduler task 0727dd15 (flow afe00438): submitting (try 0): started
2021/07/08 17:37:27 scheduler task 3134442c (flow c17adea7): waiting for completion (try 0): started
2021/07/08 17:37:27  ->  n100.r10.s069.Main.out_file c17adea7 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:27 n100.r10.s069.Main.out_file c17adea7 n100/r10/n100.r10.s069.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:515135672bee7864868c83d1fd199e26c56417a93fbe7c94fa42202e5a2cfd20
	sha256:c17adea75b96a6cc330221bb1ce5f326a126167a447c571a443eed3b7a56a86e
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3134442c34971b2ab8d04fdafbac332b4d19ee373de84f3f94be09663da2e337
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s069_output"
	    wget -O "n100.r10.s069_output/n100.r10.s069.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s069_output/n100.r10.s069.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s069_output/n100.r10.s069.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s069_output/n100.r10.s069.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s069_output/n100.r10.s069.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s069_output/n100.r10.s069.reference.fas" "n100.r10.s069_output/n100.r10.s069.fq1.fastq" "n100.r10.s069_output/n100.r10.s069.fq2.fastq" | samtools view -bS - > "n100.r10.s069_output/n100.r10.s069.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s069_output/n100.r10.s069.untrimmed.sorted.bam" "n100.r10.s069_output/n100.r10.s069.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s069_output/n100.r10.s069.untrimmed.sorted.bam" -b "n100.r10.s069_output/n100.r10.s069.primers.bed" -p "n100.r10.s069_output/n100.r10.s069.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s069_output/n100.r10.s069.trimmed.sorted.bam" "n100.r10.s069_output/n100.r10.s069.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s069_output/n100.r10.s069.reference.fas" "n100.r10.s069_output/n100.r10.s069.trimmed.sorted.bam" > "n100.r10.s069_output/n100.r10.s069.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s069_output/n100.r10.s069.reference.fas" --call-indels "n100.r10.s069_output/n100.r10.s069.trimmed.sorted.bam" > "n100.r10.s069_output/n100.r10.s069.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s069_output/n100.r10.s069.trimmed.sorted.bam" > "n100.r10.s069_output/n100.r10.s069.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s069_output/n100.r10.s069.depth.txt" "n100.r10.s069_output/n100.r10.s069.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s069_output/n100.r10.s069.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s069_output/n100.r10.s069.reference.fas" | bcftools consensus -m "n100.r10.s069_output/n100.r10.s069.low_depth.tsv" tmp.vcf.gz > "n100.r10.s069_output/n100.r10.s069.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s069_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:27 scheduler task 8c3a26a2 (flow 63d125fa): submitting (try 0): started
2021/07/08 17:37:27 scheduler task daf95962 (flow 7c29b38a): submitting (try 0): started
2021/07/08 17:37:27 scheduler task 2e8ecf12 (flow 1925ed71): submitting (try 0): started
2021/07/08 17:37:27 scheduler task 847deec3 (flow 54b764b0): submitting (try 0): started
2021/07/08 17:37:27 scheduler task 5e6ba1c1 (flow 1575ea23): loaded val<.=fb5561b6 35.4MiB>
2021/07/08 17:37:27 scheduler task 400a7920 (flow a4d00c52): submitting (try 0): started
2021/07/08 17:37:27 scheduler task d7c574d6 (flow d719cd29): submitting (try 0): started
2021/07/08 17:37:27 scheduler task da1aa7bb (flow f919f347): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:27 scheduler task 77092a02 (flow c50dce1c): loaded val<.=de86a377 35.4MiB>
2021/07/08 17:37:27 scheduler task da1aa7bb (flow f919f347): waiting for completion (try 0): started
2021/07/08 17:37:27  ->  n100.r10.s068.Main.out_file f919f347 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:27 n100.r10.s068.Main.out_file f919f347 n100/r10/n100.r10.s068.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:46a26bb0b8d3422710abbcf25ae38c0940642fc57cb000773e7a2b1de97821ff
	sha256:f919f347e551eb90e6a459eccd3dfb476bf442b9476eafd079293a0d2f195093
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/da1aa7bbf4ccd406000415e8549aaf94cb0eaf97d46f4401904c5ce4f548d2b7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s068_output"
	    wget -O "n100.r10.s068_output/n100.r10.s068.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s068_output/n100.r10.s068.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s068_output/n100.r10.s068.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s068_output/n100.r10.s068.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s068_output/n100.r10.s068.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s068_output/n100.r10.s068.reference.fas" "n100.r10.s068_output/n100.r10.s068.fq1.fastq" "n100.r10.s068_output/n100.r10.s068.fq2.fastq" | samtools view -bS - > "n100.r10.s068_output/n100.r10.s068.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s068_output/n100.r10.s068.untrimmed.sorted.bam" "n100.r10.s068_output/n100.r10.s068.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s068_output/n100.r10.s068.untrimmed.sorted.bam" -b "n100.r10.s068_output/n100.r10.s068.primers.bed" -p "n100.r10.s068_output/n100.r10.s068.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s068_output/n100.r10.s068.trimmed.sorted.bam" "n100.r10.s068_output/n100.r10.s068.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s068_output/n100.r10.s068.reference.fas" "n100.r10.s068_output/n100.r10.s068.trimmed.sorted.bam" > "n100.r10.s068_output/n100.r10.s068.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s068_output/n100.r10.s068.reference.fas" --call-indels "n100.r10.s068_output/n100.r10.s068.trimmed.sorted.bam" > "n100.r10.s068_output/n100.r10.s068.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s068_output/n100.r10.s068.trimmed.sorted.bam" > "n100.r10.s068_output/n100.r10.s068.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s068_output/n100.r10.s068.depth.txt" "n100.r10.s068_output/n100.r10.s068.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s068_output/n100.r10.s068.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s068_output/n100.r10.s068.reference.fas" | bcftools consensus -m "n100.r10.s068_output/n100.r10.s068.low_depth.tsv" tmp.vcf.gz > "n100.r10.s068_output/n100.r10.s068.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s068_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:27 scheduler task 9b005cb6 (flow 4e0c766c): loaded val<.=044f3aaa 35.4MiB>
2021/07/08 17:37:27 scheduler task 96ccb3b6 (flow e4994f3d): loaded val<.=5fbb84f3 35.4MiB>
2021/07/08 17:37:27 scheduler task 96ccb3b6 (flow e4994f3d): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 96ccb3b6 (flow e4994f3d): submitting (try 0): started
2021/07/08 17:37:27 scheduler task b00ef45e (flow 62acfe5d): loaded val<.=957d558f 35.4MiB>
2021/07/08 17:37:27 scheduler task 09c401c4 (flow 22954720): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:27 scheduler task 09c401c4 (flow 22954720): waiting for completion (try 0): started
2021/07/08 17:37:27  ->  n100.r10.s018.Main.out_file 22954720 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:27 n100.r10.s018.Main.out_file 22954720 n100/r10/n100.r10.s018.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e07984b9a187fc257182f2ffac22be1471c21b5d94af6c26c8a2a47fc52e553a
	sha256:2295472073adc80918f32c1c8c2a077d1e4a924b5adeff9ac3faa7a405cd2b8f
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/09c401c4920a53a74df6a05fc3ac254046505d8a1257b96c2200517f2f773d3b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s018_output"
	    wget -O "n100.r10.s018_output/n100.r10.s018.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s018_output/n100.r10.s018.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s018_output/n100.r10.s018.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s018_output/n100.r10.s018.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s018_output/n100.r10.s018.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s018_output/n100.r10.s018.reference.fas" "n100.r10.s018_output/n100.r10.s018.fq1.fastq" "n100.r10.s018_output/n100.r10.s018.fq2.fastq" | samtools view -bS - > "n100.r10.s018_output/n100.r10.s018.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s018_output/n100.r10.s018.untrimmed.sorted.bam" "n100.r10.s018_output/n100.r10.s018.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s018_output/n100.r10.s018.untrimmed.sorted.bam" -b "n100.r10.s018_output/n100.r10.s018.primers.bed" -p "n100.r10.s018_output/n100.r10.s018.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s018_output/n100.r10.s018.trimmed.sorted.bam" "n100.r10.s018_output/n100.r10.s018.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s018_output/n100.r10.s018.reference.fas" "n100.r10.s018_output/n100.r10.s018.trimmed.sorted.bam" > "n100.r10.s018_output/n100.r10.s018.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s018_output/n100.r10.s018.reference.fas" --call-indels "n100.r10.s018_output/n100.r10.s018.trimmed.sorted.bam" > "n100.r10.s018_output/n100.r10.s018.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s018_output/n100.r10.s018.trimmed.sorted.bam" > "n100.r10.s018_output/n100.r10.s018.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s018_output/n100.r10.s018.depth.txt" "n100.r10.s018_output/n100.r10.s018.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s018_output/n100.r10.s018.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s018_output/n100.r10.s018.reference.fas" | bcftools consensus -m "n100.r10.s018_output/n100.r10.s018.low_depth.tsv" tmp.vcf.gz > "n100.r10.s018_output/n100.r10.s018.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s018_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:27 scheduler task 0df65054 (flow 91cbe899): loaded val<.=cc316222 35.4MiB>
2021/07/08 17:37:27 scheduler task e996e2c5 (flow d3393061): loaded val<.=7f705794 35.4MiB>
2021/07/08 17:37:27 scheduler task 6f235a83 (flow 3c6bdf5b): loaded val<.=a6b1f05e 35.4MiB>
2021/07/08 17:37:27 scheduler task 6f235a83 (flow 3c6bdf5b): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 6f235a83 (flow 3c6bdf5b): submitting (try 0): started
2021/07/08 17:37:27 scheduler task 9cd8433e (flow 8ff82b53): loaded val<.=132f0fc8 35.4MiB>
2021/07/08 17:37:27 scheduler task 9b005cb6 (flow 4e0c766c): loaded val<.=9c6d7234 35.4MiB>
2021/07/08 17:37:27 scheduler task 9b005cb6 (flow 4e0c766c): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 9b005cb6 (flow 4e0c766c): submitting (try 0): started
2021/07/08 17:37:27 scheduler task 1400e0ee (flow 3bf338dc): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:27 scheduler task 1400e0ee (flow 3bf338dc): waiting for completion (try 0): started
2021/07/08 17:37:27  ->  n100.r10.s003.Main.out_file 3bf338dc exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:27 n100.r10.s003.Main.out_file 3bf338dc n100/r10/n100.r10.s003.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f97891f1fcf8e4ded7deb6e5ccd5aecead431fb65d3bf2b815f636fd1593ce1b
	sha256:3bf338dc4eb2a6e804b6c397618c106caba8c9e9bb1195e2ba8b848a4599c00f
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1400e0eee96bd896281a476ae14311bd4584d457a2882d7164595df3f261336c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s003_output"
	    wget -O "n100.r10.s003_output/n100.r10.s003.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s003_output/n100.r10.s003.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s003_output/n100.r10.s003.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s003_output/n100.r10.s003.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s003_output/n100.r10.s003.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s003_output/n100.r10.s003.reference.fas" "n100.r10.s003_output/n100.r10.s003.fq1.fastq" "n100.r10.s003_output/n100.r10.s003.fq2.fastq" | samtools view -bS - > "n100.r10.s003_output/n100.r10.s003.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s003_output/n100.r10.s003.untrimmed.sorted.bam" "n100.r10.s003_output/n100.r10.s003.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s003_output/n100.r10.s003.untrimmed.sorted.bam" -b "n100.r10.s003_output/n100.r10.s003.primers.bed" -p "n100.r10.s003_output/n100.r10.s003.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s003_output/n100.r10.s003.trimmed.sorted.bam" "n100.r10.s003_output/n100.r10.s003.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s003_output/n100.r10.s003.reference.fas" "n100.r10.s003_output/n100.r10.s003.trimmed.sorted.bam" > "n100.r10.s003_output/n100.r10.s003.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s003_output/n100.r10.s003.reference.fas" --call-indels "n100.r10.s003_output/n100.r10.s003.trimmed.sorted.bam" > "n100.r10.s003_output/n100.r10.s003.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s003_output/n100.r10.s003.trimmed.sorted.bam" > "n100.r10.s003_output/n100.r10.s003.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s003_output/n100.r10.s003.depth.txt" "n100.r10.s003_output/n100.r10.s003.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s003_output/n100.r10.s003.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s003_output/n100.r10.s003.reference.fas" | bcftools consensus -m "n100.r10.s003_output/n100.r10.s003.low_depth.tsv" tmp.vcf.gz > "n100.r10.s003_output/n100.r10.s003.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s003_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:27 scheduler task eb87e42f (flow 399f20da): loaded val<.=4580de54 35.4MiB>
2021/07/08 17:37:27 scheduler task 0de34bc3 (flow d01db40b): loaded val<.=a2d24de3 35.4MiB>
2021/07/08 17:37:27 scheduler task 0de34bc3 (flow d01db40b): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 0de34bc3 (flow d01db40b): submitting (try 0): started
2021/07/08 17:37:27 scheduler task 5d04b067 (flow 522f4e66): loaded val<.=ec2739d6 35.4MiB>
2021/07/08 17:37:27 scheduler task 5bc25bd3 (flow 8edca96d): loaded val<.=6279f6ec 35.4MiB>
2021/07/08 17:37:27 scheduler task 5bc25bd3 (flow 8edca96d): loaded val<.=e575e3f8 35.4MiB>
2021/07/08 17:37:27 scheduler task 5bc25bd3 (flow 8edca96d): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 834ab569 (flow 9a69f4b2): loaded val<.=ea4e5843 35.4MiB>
2021/07/08 17:37:27 scheduler task 0df65054 (flow 91cbe899): loaded val<.=9701b9bc 35.4MiB>
2021/07/08 17:37:27 scheduler task 0df65054 (flow 91cbe899): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 5bc25bd3 (flow 8edca96d): submitting (try 0): started
2021/07/08 17:37:27 scheduler task 0df65054 (flow 91cbe899): submitting (try 0): started
2021/07/08 17:37:27 scheduler task 3c2c1b67 (flow 9bbddc57): loaded val<.=3f6414f0 35.4MiB>
2021/07/08 17:37:27 scheduler task 10b9639e (flow c2c3e971): loaded val<.=50acdb82 35.4MiB>
2021/07/08 17:37:27 scheduler task 49b52cb8 (flow debb172b): loaded val<.=55f5f296 35.4MiB>
2021/07/08 17:37:27 scheduler task 49b52cb8 (flow debb172b): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 49b52cb8 (flow debb172b): submitting (try 0): started
2021/07/08 17:37:27 scheduler task 49c1b19d (flow 31d04bff): loaded val<.=781cad3f 35.4MiB>
2021/07/08 17:37:27 scheduler task a510cb24 (flow 1bfcc9a2): loaded val<.=5db513fc 35.4MiB>
2021/07/08 17:37:27 scheduler task a510cb24 (flow 1bfcc9a2): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 0a2b5832 (flow c7221f94): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:27 scheduler task 9cd8433e (flow 8ff82b53): loaded val<.=5102d45c 35.4MiB>
2021/07/08 17:37:27 scheduler task 9cd8433e (flow 8ff82b53): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 207ede7a (flow 23b67a6f): loaded val<.=37c6798c 35.4MiB>
2021/07/08 17:37:27 scheduler task 207ede7a (flow 23b67a6f): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task a510cb24 (flow 1bfcc9a2): submitting (try 0): started
2021/07/08 17:37:27 scheduler task f44a16a1 (flow d1275b24): loaded val<.=8a07cf68 35.4MiB>
2021/07/08 17:37:27 scheduler task f44a16a1 (flow d1275b24): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 0a2b5832 (flow c7221f94): waiting for completion (try 0): started
2021/07/08 17:37:27  ->  n100.r10.s056.Main.out_file c7221f94 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:27 n100.r10.s056.Main.out_file c7221f94 n100/r10/n100.r10.s056.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0be66675e1560f0f37dba768da18fb70479693a034c39d3a3ae47e306309af6c
	sha256:c7221f945f6110e77e7a368c38b316c82682e475843b2babcf19297b8985d974
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0a2b5832391eaea126b677108f22a21fd5b45033871e9167a602843de859adc1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s056_output"
	    wget -O "n100.r10.s056_output/n100.r10.s056.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s056_output/n100.r10.s056.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s056_output/n100.r10.s056.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s056_output/n100.r10.s056.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s056_output/n100.r10.s056.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s056_output/n100.r10.s056.reference.fas" "n100.r10.s056_output/n100.r10.s056.fq1.fastq" "n100.r10.s056_output/n100.r10.s056.fq2.fastq" | samtools view -bS - > "n100.r10.s056_output/n100.r10.s056.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s056_output/n100.r10.s056.untrimmed.sorted.bam" "n100.r10.s056_output/n100.r10.s056.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s056_output/n100.r10.s056.untrimmed.sorted.bam" -b "n100.r10.s056_output/n100.r10.s056.primers.bed" -p "n100.r10.s056_output/n100.r10.s056.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s056_output/n100.r10.s056.trimmed.sorted.bam" "n100.r10.s056_output/n100.r10.s056.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s056_output/n100.r10.s056.reference.fas" "n100.r10.s056_output/n100.r10.s056.trimmed.sorted.bam" > "n100.r10.s056_output/n100.r10.s056.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s056_output/n100.r10.s056.reference.fas" --call-indels "n100.r10.s056_output/n100.r10.s056.trimmed.sorted.bam" > "n100.r10.s056_output/n100.r10.s056.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s056_output/n100.r10.s056.trimmed.sorted.bam" > "n100.r10.s056_output/n100.r10.s056.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s056_output/n100.r10.s056.depth.txt" "n100.r10.s056_output/n100.r10.s056.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s056_output/n100.r10.s056.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s056_output/n100.r10.s056.reference.fas" | bcftools consensus -m "n100.r10.s056_output/n100.r10.s056.low_depth.tsv" tmp.vcf.gz > "n100.r10.s056_output/n100.r10.s056.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s056_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:27 scheduler task 9cd8433e (flow 8ff82b53): submitting (try 0): started
2021/07/08 17:37:27 scheduler task 207ede7a (flow 23b67a6f): submitting (try 0): started
2021/07/08 17:37:27 scheduler task f44a16a1 (flow d1275b24): submitting (try 0): started
2021/07/08 17:37:27 scheduler task 77092a02 (flow c50dce1c): loaded val<.=20e10e5e 35.4MiB>
2021/07/08 17:37:27 scheduler task 49c1b19d (flow 31d04bff): loaded val<.=5ad11b36 35.4MiB>
2021/07/08 17:37:27 scheduler task 49c1b19d (flow 31d04bff): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 77092a02 (flow c50dce1c): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 62273247 (flow 40aecf6e): loaded val<.=64e7d9d3 35.4MiB>
2021/07/08 17:37:27 scheduler task 62273247 (flow 40aecf6e): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 49c1b19d (flow 31d04bff): submitting (try 0): started
2021/07/08 17:37:27 scheduler task 77092a02 (flow c50dce1c): submitting (try 0): started
2021/07/08 17:37:27 scheduler task 62273247 (flow 40aecf6e): submitting (try 0): started
2021/07/08 17:37:27 scheduler task e8c8e808 (flow 5077aef2): loaded val<.=5c93d810 35.4MiB>
2021/07/08 17:37:27 scheduler task 3ee5fbc0 (flow c6d532f3): loaded val<.=2499b602 35.4MiB>
2021/07/08 17:37:27 scheduler task e8c8e808 (flow 5077aef2): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 3ee5fbc0 (flow c6d532f3): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task e8c8e808 (flow 5077aef2): submitting (try 0): started
2021/07/08 17:37:27 scheduler task 3ee5fbc0 (flow c6d532f3): submitting (try 0): started
2021/07/08 17:37:27 scheduler task b3e5b82e (flow e295ae85): loaded val<.=8dc8f452 35.4MiB>
2021/07/08 17:37:27 scheduler task 41e319db (flow 0f0a0edb): loaded val<.=5fa7f413 35.4MiB>
2021/07/08 17:37:27 scheduler task 41e319db (flow 0f0a0edb): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 41e319db (flow 0f0a0edb): submitting (try 0): started
2021/07/08 17:37:27 scheduler task 10b9639e (flow c2c3e971): loaded val<.=00160137 35.4MiB>
2021/07/08 17:37:27 scheduler task 6020e9b3 (flow 50fe0d18): loaded val<.=b3c28f15 35.4MiB>
2021/07/08 17:37:27 scheduler task 6020e9b3 (flow 50fe0d18): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 10b9639e (flow c2c3e971): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 6020e9b3 (flow 50fe0d18): submitting (try 0): started
2021/07/08 17:37:27 scheduler task 10b9639e (flow c2c3e971): submitting (try 0): started
2021/07/08 17:37:27 scheduler task a74afbde (flow 76734b91): loaded val<.=ed5f6a92 35.4MiB>
2021/07/08 17:37:27 scheduler task a74afbde (flow 76734b91): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task b3e5b82e (flow e295ae85): loaded val<.=354c5907 35.4MiB>
2021/07/08 17:37:27 scheduler task b3e5b82e (flow e295ae85): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task a74afbde (flow 76734b91): submitting (try 0): started
2021/07/08 17:37:27 scheduler task 5d04b067 (flow 522f4e66): loaded val<.=bd8cdf86 35.4MiB>
2021/07/08 17:37:27 scheduler task 5d04b067 (flow 522f4e66): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task b3e5b82e (flow e295ae85): submitting (try 0): started
2021/07/08 17:37:27 scheduler task d78f5d37 (flow 88a0cdd2): loaded val<.=1074a1b2 35.4MiB>
2021/07/08 17:37:27 scheduler task d78f5d37 (flow 88a0cdd2): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 5d04b067 (flow 522f4e66): submitting (try 0): started
2021/07/08 17:37:27 scheduler task d78f5d37 (flow 88a0cdd2): submitting (try 0): started
2021/07/08 17:37:27 scheduler task eb87e42f (flow 399f20da): loaded val<.=a1d209f5 35.4MiB>
2021/07/08 17:37:27 scheduler task 3d965a50 (flow 14c2b5b4): loaded val<.=fcedf51c 35.4MiB>
2021/07/08 17:37:27 scheduler task 3d965a50 (flow 14c2b5b4): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task eb87e42f (flow 399f20da): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 3c2c1b67 (flow 9bbddc57): loaded val<.=5c809dad 35.4MiB>
2021/07/08 17:37:27 scheduler task 3c2c1b67 (flow 9bbddc57): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 3d965a50 (flow 14c2b5b4): submitting (try 0): started
2021/07/08 17:37:27 scheduler task f070a1d7 (flow 943fd4e3): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:27 scheduler task b00ef45e (flow 62acfe5d): loaded val<.=c03e0f38 35.4MiB>
2021/07/08 17:37:27 scheduler task b00ef45e (flow 62acfe5d): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task eb87e42f (flow 399f20da): submitting (try 0): started
2021/07/08 17:37:27 scheduler task 26f77987 (flow 474e0149): loaded val<.=f859f1c8 35.4MiB>
2021/07/08 17:37:27 scheduler task 26f77987 (flow 474e0149): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 3c2c1b67 (flow 9bbddc57): submitting (try 0): started
2021/07/08 17:37:27 scheduler task f070a1d7 (flow 943fd4e3): waiting for completion (try 0): started
2021/07/08 17:37:27  ->  n100.r10.s079.Main.out_file 943fd4e3 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:27 n100.r10.s079.Main.out_file 943fd4e3 n100/r10/n100.r10.s079.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a64c886b8c314f91614acf18345add5ca60c2d30ddb315e495fe0bde1643f8c8
	sha256:943fd4e3cb4edbb0f005188e84cefee5435c86610c540ec7aefbfc6881bd6c61
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f070a1d7a15b53d1ef66dc45baa7bed7ba1187628b9ab6e1fccc226c96599bf3
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s079_output"
	    wget -O "n100.r10.s079_output/n100.r10.s079.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s079_output/n100.r10.s079.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s079_output/n100.r10.s079.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s079_output/n100.r10.s079.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s079_output/n100.r10.s079.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s079_output/n100.r10.s079.reference.fas" "n100.r10.s079_output/n100.r10.s079.fq1.fastq" "n100.r10.s079_output/n100.r10.s079.fq2.fastq" | samtools view -bS - > "n100.r10.s079_output/n100.r10.s079.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s079_output/n100.r10.s079.untrimmed.sorted.bam" "n100.r10.s079_output/n100.r10.s079.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s079_output/n100.r10.s079.untrimmed.sorted.bam" -b "n100.r10.s079_output/n100.r10.s079.primers.bed" -p "n100.r10.s079_output/n100.r10.s079.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s079_output/n100.r10.s079.trimmed.sorted.bam" "n100.r10.s079_output/n100.r10.s079.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s079_output/n100.r10.s079.reference.fas" "n100.r10.s079_output/n100.r10.s079.trimmed.sorted.bam" > "n100.r10.s079_output/n100.r10.s079.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s079_output/n100.r10.s079.reference.fas" --call-indels "n100.r10.s079_output/n100.r10.s079.trimmed.sorted.bam" > "n100.r10.s079_output/n100.r10.s079.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s079_output/n100.r10.s079.trimmed.sorted.bam" > "n100.r10.s079_output/n100.r10.s079.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s079_output/n100.r10.s079.depth.txt" "n100.r10.s079_output/n100.r10.s079.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s079_output/n100.r10.s079.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s079_output/n100.r10.s079.reference.fas" | bcftools consensus -m "n100.r10.s079_output/n100.r10.s079.low_depth.tsv" tmp.vcf.gz > "n100.r10.s079_output/n100.r10.s079.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s079_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:27 scheduler task b00ef45e (flow 62acfe5d): submitting (try 0): started
2021/07/08 17:37:27 scheduler task 6a4f6e23 (flow c0dbba66): loaded val<.=a94a20d6 35.4MiB>
2021/07/08 17:37:27 scheduler task 54c398c1 (flow 43de8083): loaded val<.=f5c5e214 35.4MiB>
2021/07/08 17:37:27 scheduler task 26f77987 (flow 474e0149): submitting (try 0): started
2021/07/08 17:37:27 scheduler task 53abe90b (flow df4d82f6): loaded val<.=750a204d 35.4MiB>
2021/07/08 17:37:27 scheduler task 53abe90b (flow df4d82f6): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 53abe90b (flow df4d82f6): submitting (try 0): started
2021/07/08 17:37:27 scheduler task 6a4f6e23 (flow c0dbba66): loaded val<.=5c447fd6 35.4MiB>
2021/07/08 17:37:27 scheduler task 6a4f6e23 (flow c0dbba66): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 5e6ba1c1 (flow 1575ea23): loaded val<.=68171cb5 35.4MiB>
2021/07/08 17:37:27 scheduler task 5e6ba1c1 (flow 1575ea23): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 54c398c1 (flow 43de8083): loaded val<.=aa435c1d 35.4MiB>
2021/07/08 17:37:27 scheduler task 54c398c1 (flow 43de8083): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 10b2ee98 (flow 7eb303f0): loaded val<.=2ddb341a 35.4MiB>
2021/07/08 17:37:27 scheduler task 10b2ee98 (flow 7eb303f0): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task e996e2c5 (flow d3393061): loaded val<.=58c3f0fa 35.4MiB>
2021/07/08 17:37:27 scheduler task e996e2c5 (flow d3393061): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task c0a2340c (flow 0d3cc969): loaded val<.=2b27ca39 35.4MiB>
2021/07/08 17:37:27 scheduler task 277a5fa1 (flow abe7077c): loaded val<.=03d84d00 35.4MiB>
2021/07/08 17:37:27 scheduler task 277a5fa1 (flow abe7077c): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 6a4f6e23 (flow c0dbba66): submitting (try 0): started
2021/07/08 17:37:27 scheduler task c0a2340c (flow 0d3cc969): loaded val<.=7237d65e 35.4MiB>
2021/07/08 17:37:27 scheduler task c0a2340c (flow 0d3cc969): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 768ad499 (flow 88f35ec0): loaded val<.=5ff54494 35.4MiB>
2021/07/08 17:37:27 scheduler task 63cda6a4 (flow 20c10487): loaded val<.=e2802967 35.4MiB>
2021/07/08 17:37:27 scheduler task 63cda6a4 (flow 20c10487): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 5e6ba1c1 (flow 1575ea23): submitting (try 0): started
2021/07/08 17:37:27 scheduler task 54c398c1 (flow 43de8083): submitting (try 0): started
2021/07/08 17:37:27 scheduler task 10b2ee98 (flow 7eb303f0): submitting (try 0): started
2021/07/08 17:37:27 scheduler task cc4d6c79 (flow a27124a9): loaded val<.=9dbc36f2 35.4MiB>
2021/07/08 17:37:27 scheduler task cc4d6c79 (flow a27124a9): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task e996e2c5 (flow d3393061): submitting (try 0): started
2021/07/08 17:37:27 scheduler task 768ad499 (flow 88f35ec0): loaded val<.=40d181f5 35.4MiB>
2021/07/08 17:37:27 scheduler task 768ad499 (flow 88f35ec0): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 277a5fa1 (flow abe7077c): submitting (try 0): started
2021/07/08 17:37:27 scheduler task c0a2340c (flow 0d3cc969): submitting (try 0): started
2021/07/08 17:37:27 scheduler task 63cda6a4 (flow 20c10487): submitting (try 0): started
2021/07/08 17:37:27 scheduler task cc4d6c79 (flow a27124a9): submitting (try 0): started
2021/07/08 17:37:27 scheduler task 768ad499 (flow 88f35ec0): submitting (try 0): started
2021/07/08 17:37:27 scheduler task 2139bff7 (flow d781b4f4): loaded val<.=67f166b6 35.4MiB>
2021/07/08 17:37:27 scheduler task 2139bff7 (flow d781b4f4): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 2139bff7 (flow d781b4f4): submitting (try 0): started
2021/07/08 17:37:27 scheduler task c6408350 (flow 227a28ae): loaded val<.=cadb056b 35.4MiB>
2021/07/08 17:37:27 scheduler task c6408350 (flow 227a28ae): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task c6408350 (flow 227a28ae): submitting (try 0): started
2021/07/08 17:37:27 scheduler task d1d46b3d (flow 21dcc181): loaded val<.=97828f97 35.4MiB>
2021/07/08 17:37:27 scheduler task d1d46b3d (flow 21dcc181): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 9d2f7e82 (flow a018bf83): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:27 scheduler task d1d46b3d (flow 21dcc181): submitting (try 0): started
2021/07/08 17:37:27 scheduler task 9d2f7e82 (flow a018bf83): waiting for completion (try 0): started
2021/07/08 17:37:27  ->  n100.r10.s021.Main.out_file a018bf83 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:27 n100.r10.s021.Main.out_file a018bf83 n100/r10/n100.r10.s021.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:97dc78cab714407714ca498f25a6e9d1c20cfb823ad28da32f8b030e24a92ff7
	sha256:a018bf83a675acdc2db544a4defb439cb49b0f00753770af5a2430eeb49cf27f
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9d2f7e82b0dee71c5a181b419862049f397ba0ca4174e84c84f618bd64df626a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s021_output"
	    wget -O "n100.r10.s021_output/n100.r10.s021.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s021_output/n100.r10.s021.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s021_output/n100.r10.s021.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s021_output/n100.r10.s021.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s021_output/n100.r10.s021.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s021_output/n100.r10.s021.reference.fas" "n100.r10.s021_output/n100.r10.s021.fq1.fastq" "n100.r10.s021_output/n100.r10.s021.fq2.fastq" | samtools view -bS - > "n100.r10.s021_output/n100.r10.s021.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s021_output/n100.r10.s021.untrimmed.sorted.bam" "n100.r10.s021_output/n100.r10.s021.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s021_output/n100.r10.s021.untrimmed.sorted.bam" -b "n100.r10.s021_output/n100.r10.s021.primers.bed" -p "n100.r10.s021_output/n100.r10.s021.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s021_output/n100.r10.s021.trimmed.sorted.bam" "n100.r10.s021_output/n100.r10.s021.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s021_output/n100.r10.s021.reference.fas" "n100.r10.s021_output/n100.r10.s021.trimmed.sorted.bam" > "n100.r10.s021_output/n100.r10.s021.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s021_output/n100.r10.s021.reference.fas" --call-indels "n100.r10.s021_output/n100.r10.s021.trimmed.sorted.bam" > "n100.r10.s021_output/n100.r10.s021.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s021_output/n100.r10.s021.trimmed.sorted.bam" > "n100.r10.s021_output/n100.r10.s021.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s021_output/n100.r10.s021.depth.txt" "n100.r10.s021_output/n100.r10.s021.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s021_output/n100.r10.s021.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s021_output/n100.r10.s021.reference.fas" | bcftools consensus -m "n100.r10.s021_output/n100.r10.s021.low_depth.tsv" tmp.vcf.gz > "n100.r10.s021_output/n100.r10.s021.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s021_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:27 scheduler task 8d0f47ee (flow 5e0db977): loaded val<.=60ac96c7 35.4MiB>
2021/07/08 17:37:27 scheduler task 8d0f47ee (flow 5e0db977): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 8d0f47ee (flow 5e0db977): submitting (try 0): started
2021/07/08 17:37:27 scheduler task c33b1ab5 (flow c0e27ff9): loaded val<.=6a8ae68d 35.4MiB>
2021/07/08 17:37:27 scheduler task 834ab569 (flow 9a69f4b2): loaded val<.=aa441f3d 35.4MiB>
2021/07/08 17:37:27 scheduler task 834ab569 (flow 9a69f4b2): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 834ab569 (flow 9a69f4b2): submitting (try 0): started
2021/07/08 17:37:27 scheduler task 51fe96bf (flow 1f86a397): loaded val<.=df17a5f4 35.4MiB>
2021/07/08 17:37:27 scheduler task 51fe96bf (flow 1f86a397): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 2f95f0eb (flow 9906f8c4): loaded val<.=6a4a6cf6 35.4MiB>
2021/07/08 17:37:27 scheduler task 2f95f0eb (flow 9906f8c4): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 51fe96bf (flow 1f86a397): submitting (try 0): started
2021/07/08 17:37:27 scheduler task 922533fe (flow 9b575067): loaded val<.=397f758a 35.4MiB>
2021/07/08 17:37:27 scheduler task 922533fe (flow 9b575067): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 2f95f0eb (flow 9906f8c4): submitting (try 0): started
2021/07/08 17:37:27 scheduler task 922533fe (flow 9b575067): submitting (try 0): started
2021/07/08 17:37:27 scheduler task c33b1ab5 (flow c0e27ff9): loaded val<.=e8fc04fc 35.4MiB>
2021/07/08 17:37:27 scheduler task c33b1ab5 (flow c0e27ff9): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 8e195244 (flow 62a7eeea): loaded val<.=3009aeb7 35.4MiB>
2021/07/08 17:37:27 scheduler task 8e195244 (flow 62a7eeea): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task c33b1ab5 (flow c0e27ff9): submitting (try 0): started
2021/07/08 17:37:27 scheduler task 8e195244 (flow 62a7eeea): submitting (try 0): started
2021/07/08 17:37:27 scheduler task 3a2d4435 (flow 8e8257f7): loaded val<.=96f7ecad 35.4MiB>
2021/07/08 17:37:27 scheduler task 3a2d4435 (flow 8e8257f7): loading (try 0): successful, next state: submitting
2021/07/08 17:37:27 scheduler task 3a2d4435 (flow 8e8257f7): submitting (try 0): started
2021/07/08 17:37:27 scheduler task bc1a220d (flow 5b1cd59e): loaded val<.=42243999 35.4MiB>
2021/07/08 17:37:27 scheduler task bc1a220d (flow 5b1cd59e): loading (try 0): successful, next state: submitting
2021/07/08 17:37:28 scheduler task bc1a220d (flow 5b1cd59e): submitting (try 0): started
2021/07/08 17:37:28 scheduler task 215d2c98 (flow f5b79134): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:28 scheduler task 5916483e (flow 38a4c1e8): loaded val<.=6c302403 35.4MiB>
2021/07/08 17:37:28 scheduler task 5916483e (flow 38a4c1e8): loading (try 0): successful, next state: submitting
2021/07/08 17:37:28 scheduler task 215d2c98 (flow f5b79134): waiting for completion (try 0): started
2021/07/08 17:37:28  ->  n100.r10.s020.Main.out_file f5b79134 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:28 n100.r10.s020.Main.out_file f5b79134 n100/r10/n100.r10.s020.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7bf3d577904eeac1f6548317ca6eddc49f59cf75fcaad4e10e1da136a867ff7e
	sha256:f5b791348e6b1a3c81901df3e352fd4b422808db6bd8e8b340e9eff2de8730e9
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/215d2c988a6305cad47c780e07b1032bdc85ecc089fbdacefcfeba8d65c08dcd
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s020_output"
	    wget -O "n100.r10.s020_output/n100.r10.s020.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s020_output/n100.r10.s020.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s020_output/n100.r10.s020.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s020_output/n100.r10.s020.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s020_output/n100.r10.s020.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s020_output/n100.r10.s020.reference.fas" "n100.r10.s020_output/n100.r10.s020.fq1.fastq" "n100.r10.s020_output/n100.r10.s020.fq2.fastq" | samtools view -bS - > "n100.r10.s020_output/n100.r10.s020.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s020_output/n100.r10.s020.untrimmed.sorted.bam" "n100.r10.s020_output/n100.r10.s020.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s020_output/n100.r10.s020.untrimmed.sorted.bam" -b "n100.r10.s020_output/n100.r10.s020.primers.bed" -p "n100.r10.s020_output/n100.r10.s020.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s020_output/n100.r10.s020.trimmed.sorted.bam" "n100.r10.s020_output/n100.r10.s020.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s020_output/n100.r10.s020.reference.fas" "n100.r10.s020_output/n100.r10.s020.trimmed.sorted.bam" > "n100.r10.s020_output/n100.r10.s020.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s020_output/n100.r10.s020.reference.fas" --call-indels "n100.r10.s020_output/n100.r10.s020.trimmed.sorted.bam" > "n100.r10.s020_output/n100.r10.s020.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s020_output/n100.r10.s020.trimmed.sorted.bam" > "n100.r10.s020_output/n100.r10.s020.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s020_output/n100.r10.s020.depth.txt" "n100.r10.s020_output/n100.r10.s020.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s020_output/n100.r10.s020.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s020_output/n100.r10.s020.reference.fas" | bcftools consensus -m "n100.r10.s020_output/n100.r10.s020.low_depth.tsv" tmp.vcf.gz > "n100.r10.s020_output/n100.r10.s020.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s020_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:28 scheduler task 5916483e (flow 38a4c1e8): submitting (try 0): started
2021/07/08 17:37:28 scheduler task 974bd136 (flow 7368f9bf): loaded val<.=53f54049 35.4MiB>
2021/07/08 17:37:28 scheduler task 974bd136 (flow 7368f9bf): loading (try 0): successful, next state: submitting
2021/07/08 17:37:28 scheduler task 974bd136 (flow 7368f9bf): submitting (try 0): started
2021/07/08 17:37:28 scheduler task 36958e06 (flow c159c17e): loaded val<.=b61d69ee 35.4MiB>
2021/07/08 17:37:28 scheduler task 36958e06 (flow c159c17e): loading (try 0): successful, next state: submitting
2021/07/08 17:37:28 scheduler task 36958e06 (flow c159c17e): submitting (try 0): started
2021/07/08 17:37:28 scheduler task f18684ae (flow 8fab09ce): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:28 scheduler task f18684ae (flow 8fab09ce): waiting for completion (try 0): started
2021/07/08 17:37:28  ->  n100.r10.s015.Main.out_file 8fab09ce exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:28 n100.r10.s015.Main.out_file 8fab09ce n100/r10/n100.r10.s015.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fb8abc4c32205c6b938ff47319342d05e99eec5881a2f1f60f37991a4253d705
	sha256:8fab09cee1fa8e996d9f5c50002558cbf9283f7c3080a208d1b657603f213ad2
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f18684ae39a37402e9d5ccfa564edeba19805a93407d609baabe9d0de8962fe1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s015_output"
	    wget -O "n100.r10.s015_output/n100.r10.s015.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s015_output/n100.r10.s015.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s015_output/n100.r10.s015.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s015_output/n100.r10.s015.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s015_output/n100.r10.s015.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s015_output/n100.r10.s015.reference.fas" "n100.r10.s015_output/n100.r10.s015.fq1.fastq" "n100.r10.s015_output/n100.r10.s015.fq2.fastq" | samtools view -bS - > "n100.r10.s015_output/n100.r10.s015.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s015_output/n100.r10.s015.untrimmed.sorted.bam" "n100.r10.s015_output/n100.r10.s015.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s015_output/n100.r10.s015.untrimmed.sorted.bam" -b "n100.r10.s015_output/n100.r10.s015.primers.bed" -p "n100.r10.s015_output/n100.r10.s015.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s015_output/n100.r10.s015.trimmed.sorted.bam" "n100.r10.s015_output/n100.r10.s015.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s015_output/n100.r10.s015.reference.fas" "n100.r10.s015_output/n100.r10.s015.trimmed.sorted.bam" > "n100.r10.s015_output/n100.r10.s015.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s015_output/n100.r10.s015.reference.fas" --call-indels "n100.r10.s015_output/n100.r10.s015.trimmed.sorted.bam" > "n100.r10.s015_output/n100.r10.s015.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s015_output/n100.r10.s015.trimmed.sorted.bam" > "n100.r10.s015_output/n100.r10.s015.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s015_output/n100.r10.s015.depth.txt" "n100.r10.s015_output/n100.r10.s015.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s015_output/n100.r10.s015.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s015_output/n100.r10.s015.reference.fas" | bcftools consensus -m "n100.r10.s015_output/n100.r10.s015.low_depth.tsv" tmp.vcf.gz > "n100.r10.s015_output/n100.r10.s015.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s015_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:28 scheduler task 74420576 (flow eaea6f09): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:28 scheduler task 74420576 (flow eaea6f09): waiting for completion (try 0): started
2021/07/08 17:37:28  ->  n100.r10.s065.Main.out_file eaea6f09 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:28 n100.r10.s065.Main.out_file eaea6f09 n100/r10/n100.r10.s065.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a220aae276c8aaf1cfdbc67dbae41ab9b3e10b75e9af469059b7008fcbbf6e47
	sha256:eaea6f092408244f31ecd0abf21113091d46dac0e3616850a341c23bcd4bffcf
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/744205766793614fb49d6ea9114914a60578dbcbe1a9bff26c1f90a6ffdc44ef
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s065_output"
	    wget -O "n100.r10.s065_output/n100.r10.s065.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s065_output/n100.r10.s065.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s065_output/n100.r10.s065.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s065_output/n100.r10.s065.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s065_output/n100.r10.s065.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s065_output/n100.r10.s065.reference.fas" "n100.r10.s065_output/n100.r10.s065.fq1.fastq" "n100.r10.s065_output/n100.r10.s065.fq2.fastq" | samtools view -bS - > "n100.r10.s065_output/n100.r10.s065.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s065_output/n100.r10.s065.untrimmed.sorted.bam" "n100.r10.s065_output/n100.r10.s065.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s065_output/n100.r10.s065.untrimmed.sorted.bam" -b "n100.r10.s065_output/n100.r10.s065.primers.bed" -p "n100.r10.s065_output/n100.r10.s065.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s065_output/n100.r10.s065.trimmed.sorted.bam" "n100.r10.s065_output/n100.r10.s065.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s065_output/n100.r10.s065.reference.fas" "n100.r10.s065_output/n100.r10.s065.trimmed.sorted.bam" > "n100.r10.s065_output/n100.r10.s065.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s065_output/n100.r10.s065.reference.fas" --call-indels "n100.r10.s065_output/n100.r10.s065.trimmed.sorted.bam" > "n100.r10.s065_output/n100.r10.s065.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s065_output/n100.r10.s065.trimmed.sorted.bam" > "n100.r10.s065_output/n100.r10.s065.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s065_output/n100.r10.s065.depth.txt" "n100.r10.s065_output/n100.r10.s065.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s065_output/n100.r10.s065.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s065_output/n100.r10.s065.reference.fas" | bcftools consensus -m "n100.r10.s065_output/n100.r10.s065.low_depth.tsv" tmp.vcf.gz > "n100.r10.s065_output/n100.r10.s065.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s065_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:28 scheduler task 99e381d1 (flow 9f4cf67f): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:28 scheduler task 99e381d1 (flow 9f4cf67f): waiting for completion (try 0): started
2021/07/08 17:37:28  ->  n100.r10.s060.Main.out_file 9f4cf67f exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:28 n100.r10.s060.Main.out_file 9f4cf67f n100/r10/n100.r10.s060.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1af44e15aa55bde45d1d9183cb4f6cc36c2d48242ab526f36612981cd5e28f4a
	sha256:9f4cf67f20b73fe17a9c6f1c067a8059995fd1360fcd054a0912de447cd083b2
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/99e381d184a5778c6c2d3d61346225aa5a27ea84d04b33e5da8d018a918a4aa2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s060_output"
	    wget -O "n100.r10.s060_output/n100.r10.s060.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s060_output/n100.r10.s060.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s060_output/n100.r10.s060.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s060_output/n100.r10.s060.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s060_output/n100.r10.s060.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s060_output/n100.r10.s060.reference.fas" "n100.r10.s060_output/n100.r10.s060.fq1.fastq" "n100.r10.s060_output/n100.r10.s060.fq2.fastq" | samtools view -bS - > "n100.r10.s060_output/n100.r10.s060.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s060_output/n100.r10.s060.untrimmed.sorted.bam" "n100.r10.s060_output/n100.r10.s060.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s060_output/n100.r10.s060.untrimmed.sorted.bam" -b "n100.r10.s060_output/n100.r10.s060.primers.bed" -p "n100.r10.s060_output/n100.r10.s060.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s060_output/n100.r10.s060.trimmed.sorted.bam" "n100.r10.s060_output/n100.r10.s060.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s060_output/n100.r10.s060.reference.fas" "n100.r10.s060_output/n100.r10.s060.trimmed.sorted.bam" > "n100.r10.s060_output/n100.r10.s060.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s060_output/n100.r10.s060.reference.fas" --call-indels "n100.r10.s060_output/n100.r10.s060.trimmed.sorted.bam" > "n100.r10.s060_output/n100.r10.s060.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s060_output/n100.r10.s060.trimmed.sorted.bam" > "n100.r10.s060_output/n100.r10.s060.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s060_output/n100.r10.s060.depth.txt" "n100.r10.s060_output/n100.r10.s060.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s060_output/n100.r10.s060.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s060_output/n100.r10.s060.reference.fas" | bcftools consensus -m "n100.r10.s060_output/n100.r10.s060.low_depth.tsv" tmp.vcf.gz > "n100.r10.s060_output/n100.r10.s060.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s060_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:28 scheduler task b498cd4e (flow fe03b18e): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:28 scheduler task b498cd4e (flow fe03b18e): waiting for completion (try 0): started
2021/07/08 17:37:28  ->  n100.r10.s083.Main.out_file fe03b18e exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:28 n100.r10.s083.Main.out_file fe03b18e n100/r10/n100.r10.s083.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:867fa10c5c651bd8812aa6f4bdcc30a04d67abac55dc0a69d5366ca461933d1a
	sha256:fe03b18eba1c7ab5f47b9ac24c8bb2cbadbc7b89db817e2335b4defd85e8fbac
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b498cd4ed119513cfa86def1214b54965d429fb234b696214ee629ade619a6fc
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s083_output"
	    wget -O "n100.r10.s083_output/n100.r10.s083.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s083_output/n100.r10.s083.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s083_output/n100.r10.s083.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s083_output/n100.r10.s083.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s083_output/n100.r10.s083.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s083_output/n100.r10.s083.reference.fas" "n100.r10.s083_output/n100.r10.s083.fq1.fastq" "n100.r10.s083_output/n100.r10.s083.fq2.fastq" | samtools view -bS - > "n100.r10.s083_output/n100.r10.s083.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s083_output/n100.r10.s083.untrimmed.sorted.bam" "n100.r10.s083_output/n100.r10.s083.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s083_output/n100.r10.s083.untrimmed.sorted.bam" -b "n100.r10.s083_output/n100.r10.s083.primers.bed" -p "n100.r10.s083_output/n100.r10.s083.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s083_output/n100.r10.s083.trimmed.sorted.bam" "n100.r10.s083_output/n100.r10.s083.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s083_output/n100.r10.s083.reference.fas" "n100.r10.s083_output/n100.r10.s083.trimmed.sorted.bam" > "n100.r10.s083_output/n100.r10.s083.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s083_output/n100.r10.s083.reference.fas" --call-indels "n100.r10.s083_output/n100.r10.s083.trimmed.sorted.bam" > "n100.r10.s083_output/n100.r10.s083.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s083_output/n100.r10.s083.trimmed.sorted.bam" > "n100.r10.s083_output/n100.r10.s083.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s083_output/n100.r10.s083.depth.txt" "n100.r10.s083_output/n100.r10.s083.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s083_output/n100.r10.s083.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s083_output/n100.r10.s083.reference.fas" | bcftools consensus -m "n100.r10.s083_output/n100.r10.s083.low_depth.tsv" tmp.vcf.gz > "n100.r10.s083_output/n100.r10.s083.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s083_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:28 scheduler task 592f7c63 (flow a4c9f908): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:28 scheduler task 592f7c63 (flow a4c9f908): waiting for completion (try 0): started
2021/07/08 17:37:28  ->  n100.r10.s054.Main.out_file a4c9f908 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:28 n100.r10.s054.Main.out_file a4c9f908 n100/r10/n100.r10.s054.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c3e6c21b9092067c821a062653673417de05884a1f1d1b181a722ceab438b146
	sha256:a4c9f9081400d9bb5b2601ad6e646a1eff2c4139472ec2d50805208365c0f755
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/592f7c633aa9df0719980ab444a0f0a04f4796ed01247dea10bafc79bc73b334
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s054_output"
	    wget -O "n100.r10.s054_output/n100.r10.s054.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s054_output/n100.r10.s054.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s054_output/n100.r10.s054.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s054_output/n100.r10.s054.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s054_output/n100.r10.s054.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s054_output/n100.r10.s054.reference.fas" "n100.r10.s054_output/n100.r10.s054.fq1.fastq" "n100.r10.s054_output/n100.r10.s054.fq2.fastq" | samtools view -bS - > "n100.r10.s054_output/n100.r10.s054.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s054_output/n100.r10.s054.untrimmed.sorted.bam" "n100.r10.s054_output/n100.r10.s054.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s054_output/n100.r10.s054.untrimmed.sorted.bam" -b "n100.r10.s054_output/n100.r10.s054.primers.bed" -p "n100.r10.s054_output/n100.r10.s054.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s054_output/n100.r10.s054.trimmed.sorted.bam" "n100.r10.s054_output/n100.r10.s054.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s054_output/n100.r10.s054.reference.fas" "n100.r10.s054_output/n100.r10.s054.trimmed.sorted.bam" > "n100.r10.s054_output/n100.r10.s054.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s054_output/n100.r10.s054.reference.fas" --call-indels "n100.r10.s054_output/n100.r10.s054.trimmed.sorted.bam" > "n100.r10.s054_output/n100.r10.s054.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s054_output/n100.r10.s054.trimmed.sorted.bam" > "n100.r10.s054_output/n100.r10.s054.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s054_output/n100.r10.s054.depth.txt" "n100.r10.s054_output/n100.r10.s054.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s054_output/n100.r10.s054.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s054_output/n100.r10.s054.reference.fas" | bcftools consensus -m "n100.r10.s054_output/n100.r10.s054.low_depth.tsv" tmp.vcf.gz > "n100.r10.s054_output/n100.r10.s054.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s054_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:28 scheduler task 1038d1a1 (flow bef79a94): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:28 scheduler task 1038d1a1 (flow bef79a94): waiting for completion (try 0): started
2021/07/08 17:37:28  ->  n100.r10.s100.Main.out_file bef79a94 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:28 n100.r10.s100.Main.out_file bef79a94 n100/r10/n100.r10.s100.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1ef23bc55451144ed860c322e6960b468464c111742dac40cca4c70e61a5f315
	sha256:bef79a946581e53918e39aa12dfdd29aefc33f3cd3b416d814e97bdf5e1e964a
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1038d1a111a698bfce53c7ddd3d30e7a531ab925b2af7e2430f838f4262984fc
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s100_output"
	    wget -O "n100.r10.s100_output/n100.r10.s100.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s100_output/n100.r10.s100.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s100_output/n100.r10.s100.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s100_output/n100.r10.s100.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s100_output/n100.r10.s100.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s100_output/n100.r10.s100.reference.fas" "n100.r10.s100_output/n100.r10.s100.fq1.fastq" "n100.r10.s100_output/n100.r10.s100.fq2.fastq" | samtools view -bS - > "n100.r10.s100_output/n100.r10.s100.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s100_output/n100.r10.s100.untrimmed.sorted.bam" "n100.r10.s100_output/n100.r10.s100.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s100_output/n100.r10.s100.untrimmed.sorted.bam" -b "n100.r10.s100_output/n100.r10.s100.primers.bed" -p "n100.r10.s100_output/n100.r10.s100.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s100_output/n100.r10.s100.trimmed.sorted.bam" "n100.r10.s100_output/n100.r10.s100.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s100_output/n100.r10.s100.reference.fas" "n100.r10.s100_output/n100.r10.s100.trimmed.sorted.bam" > "n100.r10.s100_output/n100.r10.s100.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s100_output/n100.r10.s100.reference.fas" --call-indels "n100.r10.s100_output/n100.r10.s100.trimmed.sorted.bam" > "n100.r10.s100_output/n100.r10.s100.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s100_output/n100.r10.s100.trimmed.sorted.bam" > "n100.r10.s100_output/n100.r10.s100.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s100_output/n100.r10.s100.depth.txt" "n100.r10.s100_output/n100.r10.s100.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s100_output/n100.r10.s100.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s100_output/n100.r10.s100.reference.fas" | bcftools consensus -m "n100.r10.s100_output/n100.r10.s100.low_depth.tsv" tmp.vcf.gz > "n100.r10.s100_output/n100.r10.s100.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s100_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:29 scheduler task 9a1d8533 (flow 60012892): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:29 scheduler task 9a1d8533 (flow 60012892): waiting for completion (try 0): started
2021/07/08 17:37:29  ->  n100.r10.s016.Main.out_file 60012892 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:29 n100.r10.s016.Main.out_file 60012892 n100/r10/n100.r10.s016.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4f2f3ba8fc3f4d0b6ccb14f168e783147531f9bfe1e06783769306af1278a969
	sha256:60012892b81be94d9e48ea5c4ff6676b727290afc646bdd868161495e1ad2c73
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9a1d8533eeb7e1918739e759485a099db5dc55786aafd1290f5e2c966ada6c36
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s016_output"
	    wget -O "n100.r10.s016_output/n100.r10.s016.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s016_output/n100.r10.s016.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s016_output/n100.r10.s016.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s016_output/n100.r10.s016.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s016_output/n100.r10.s016.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s016_output/n100.r10.s016.reference.fas" "n100.r10.s016_output/n100.r10.s016.fq1.fastq" "n100.r10.s016_output/n100.r10.s016.fq2.fastq" | samtools view -bS - > "n100.r10.s016_output/n100.r10.s016.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s016_output/n100.r10.s016.untrimmed.sorted.bam" "n100.r10.s016_output/n100.r10.s016.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s016_output/n100.r10.s016.untrimmed.sorted.bam" -b "n100.r10.s016_output/n100.r10.s016.primers.bed" -p "n100.r10.s016_output/n100.r10.s016.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s016_output/n100.r10.s016.trimmed.sorted.bam" "n100.r10.s016_output/n100.r10.s016.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s016_output/n100.r10.s016.reference.fas" "n100.r10.s016_output/n100.r10.s016.trimmed.sorted.bam" > "n100.r10.s016_output/n100.r10.s016.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s016_output/n100.r10.s016.reference.fas" --call-indels "n100.r10.s016_output/n100.r10.s016.trimmed.sorted.bam" > "n100.r10.s016_output/n100.r10.s016.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s016_output/n100.r10.s016.trimmed.sorted.bam" > "n100.r10.s016_output/n100.r10.s016.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s016_output/n100.r10.s016.depth.txt" "n100.r10.s016_output/n100.r10.s016.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s016_output/n100.r10.s016.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s016_output/n100.r10.s016.reference.fas" | bcftools consensus -m "n100.r10.s016_output/n100.r10.s016.low_depth.tsv" tmp.vcf.gz > "n100.r10.s016_output/n100.r10.s016.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s016_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:29 scheduler task 28aacb8b (flow 5c83df52): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:29 scheduler task 28aacb8b (flow 5c83df52): waiting for completion (try 0): started
2021/07/08 17:37:29  ->  n100.r10.s023.Main.out_file 5c83df52 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:29 n100.r10.s023.Main.out_file 5c83df52 n100/r10/n100.r10.s023.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:43914e78e83da1b00d25c311a33197d90d183eeb683f829d4a7005fb578c6c48
	sha256:5c83df5210fdbea65d4d1916d3d370ec1f75ccafd1ed90ea36227498ffd598a6
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/28aacb8b4fffd8382726175ff372d118f71a9be70ccf47f4c47ba9a6adee0ae7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s023_output"
	    wget -O "n100.r10.s023_output/n100.r10.s023.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s023_output/n100.r10.s023.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s023_output/n100.r10.s023.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s023_output/n100.r10.s023.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s023_output/n100.r10.s023.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s023_output/n100.r10.s023.reference.fas" "n100.r10.s023_output/n100.r10.s023.fq1.fastq" "n100.r10.s023_output/n100.r10.s023.fq2.fastq" | samtools view -bS - > "n100.r10.s023_output/n100.r10.s023.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s023_output/n100.r10.s023.untrimmed.sorted.bam" "n100.r10.s023_output/n100.r10.s023.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s023_output/n100.r10.s023.untrimmed.sorted.bam" -b "n100.r10.s023_output/n100.r10.s023.primers.bed" -p "n100.r10.s023_output/n100.r10.s023.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s023_output/n100.r10.s023.trimmed.sorted.bam" "n100.r10.s023_output/n100.r10.s023.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s023_output/n100.r10.s023.reference.fas" "n100.r10.s023_output/n100.r10.s023.trimmed.sorted.bam" > "n100.r10.s023_output/n100.r10.s023.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s023_output/n100.r10.s023.reference.fas" --call-indels "n100.r10.s023_output/n100.r10.s023.trimmed.sorted.bam" > "n100.r10.s023_output/n100.r10.s023.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s023_output/n100.r10.s023.trimmed.sorted.bam" > "n100.r10.s023_output/n100.r10.s023.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s023_output/n100.r10.s023.depth.txt" "n100.r10.s023_output/n100.r10.s023.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s023_output/n100.r10.s023.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s023_output/n100.r10.s023.reference.fas" | bcftools consensus -m "n100.r10.s023_output/n100.r10.s023.low_depth.tsv" tmp.vcf.gz > "n100.r10.s023_output/n100.r10.s023.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s023_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:29 scheduler task c8a4ff5c (flow 9bc6f146): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:29 scheduler task c8a4ff5c (flow 9bc6f146): waiting for completion (try 0): started
2021/07/08 17:37:29  ->  n100.r10.s008.Main.out_file 9bc6f146 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:29 n100.r10.s008.Main.out_file 9bc6f146 n100/r10/n100.r10.s008.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:72ed3abfceda342438ace4dd5f894729593ca3a835176339aa7c09db941704a5
	sha256:9bc6f1466a47a1d67fe113f91b5882108aed16f49a1079cda492e0cbb41134bd
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c8a4ff5c96eeea4dc93199528f686dedfafd1d45be59ebc1443c36121ca078e4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s008_output"
	    wget -O "n100.r10.s008_output/n100.r10.s008.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s008_output/n100.r10.s008.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s008_output/n100.r10.s008.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s008_output/n100.r10.s008.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s008_output/n100.r10.s008.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s008_output/n100.r10.s008.reference.fas" "n100.r10.s008_output/n100.r10.s008.fq1.fastq" "n100.r10.s008_output/n100.r10.s008.fq2.fastq" | samtools view -bS - > "n100.r10.s008_output/n100.r10.s008.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s008_output/n100.r10.s008.untrimmed.sorted.bam" "n100.r10.s008_output/n100.r10.s008.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s008_output/n100.r10.s008.untrimmed.sorted.bam" -b "n100.r10.s008_output/n100.r10.s008.primers.bed" -p "n100.r10.s008_output/n100.r10.s008.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s008_output/n100.r10.s008.trimmed.sorted.bam" "n100.r10.s008_output/n100.r10.s008.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s008_output/n100.r10.s008.reference.fas" "n100.r10.s008_output/n100.r10.s008.trimmed.sorted.bam" > "n100.r10.s008_output/n100.r10.s008.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s008_output/n100.r10.s008.reference.fas" --call-indels "n100.r10.s008_output/n100.r10.s008.trimmed.sorted.bam" > "n100.r10.s008_output/n100.r10.s008.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s008_output/n100.r10.s008.trimmed.sorted.bam" > "n100.r10.s008_output/n100.r10.s008.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s008_output/n100.r10.s008.depth.txt" "n100.r10.s008_output/n100.r10.s008.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s008_output/n100.r10.s008.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s008_output/n100.r10.s008.reference.fas" | bcftools consensus -m "n100.r10.s008_output/n100.r10.s008.low_depth.tsv" tmp.vcf.gz > "n100.r10.s008_output/n100.r10.s008.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s008_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:29 scheduler task 404ec61a (flow 5ae42756): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:29 scheduler task 404ec61a (flow 5ae42756): waiting for completion (try 0): started
2021/07/08 17:37:29  ->  n100.r10.s077.Main.out_file 5ae42756 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:29 n100.r10.s077.Main.out_file 5ae42756 n100/r10/n100.r10.s077.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:bb2321d3def4158fc09331682c52c72fce42767ca217bdc6e091b7dc0ab1a555
	sha256:5ae427569f0a76fccd6eeddd5ff9e6ad63103e7e8e517c93db36c5769d4dd797
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/404ec61a6468969f4ef70fc044602afca089d27ed83807682bafdda79f162b06
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s077_output"
	    wget -O "n100.r10.s077_output/n100.r10.s077.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s077_output/n100.r10.s077.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s077_output/n100.r10.s077.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s077_output/n100.r10.s077.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s077_output/n100.r10.s077.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s077_output/n100.r10.s077.reference.fas" "n100.r10.s077_output/n100.r10.s077.fq1.fastq" "n100.r10.s077_output/n100.r10.s077.fq2.fastq" | samtools view -bS - > "n100.r10.s077_output/n100.r10.s077.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s077_output/n100.r10.s077.untrimmed.sorted.bam" "n100.r10.s077_output/n100.r10.s077.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s077_output/n100.r10.s077.untrimmed.sorted.bam" -b "n100.r10.s077_output/n100.r10.s077.primers.bed" -p "n100.r10.s077_output/n100.r10.s077.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s077_output/n100.r10.s077.trimmed.sorted.bam" "n100.r10.s077_output/n100.r10.s077.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s077_output/n100.r10.s077.reference.fas" "n100.r10.s077_output/n100.r10.s077.trimmed.sorted.bam" > "n100.r10.s077_output/n100.r10.s077.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s077_output/n100.r10.s077.reference.fas" --call-indels "n100.r10.s077_output/n100.r10.s077.trimmed.sorted.bam" > "n100.r10.s077_output/n100.r10.s077.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s077_output/n100.r10.s077.trimmed.sorted.bam" > "n100.r10.s077_output/n100.r10.s077.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s077_output/n100.r10.s077.depth.txt" "n100.r10.s077_output/n100.r10.s077.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s077_output/n100.r10.s077.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s077_output/n100.r10.s077.reference.fas" | bcftools consensus -m "n100.r10.s077_output/n100.r10.s077.low_depth.tsv" tmp.vcf.gz > "n100.r10.s077_output/n100.r10.s077.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s077_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:29 scheduler task 59e7f390 (flow 8552db05): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:29 scheduler task 59e7f390 (flow 8552db05): waiting for completion (try 0): started
2021/07/08 17:37:29  ->  n100.r10.s059.Main.out_file 8552db05 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:29 n100.r10.s059.Main.out_file 8552db05 n100/r10/n100.r10.s059.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:637222aa574d09d66af032039f1dc6bb8772cb7bd8d1e983d22815f3e36decb3
	sha256:8552db053e6c9f0d9465d46d83b590c253af4d2008435b3616e69131774dcbe6
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/59e7f3903b3e000f48b393ccfe328e6d20269947ce0b8e33b7556e54167e4d27
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s059_output"
	    wget -O "n100.r10.s059_output/n100.r10.s059.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s059_output/n100.r10.s059.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s059_output/n100.r10.s059.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s059_output/n100.r10.s059.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s059_output/n100.r10.s059.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s059_output/n100.r10.s059.reference.fas" "n100.r10.s059_output/n100.r10.s059.fq1.fastq" "n100.r10.s059_output/n100.r10.s059.fq2.fastq" | samtools view -bS - > "n100.r10.s059_output/n100.r10.s059.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s059_output/n100.r10.s059.untrimmed.sorted.bam" "n100.r10.s059_output/n100.r10.s059.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s059_output/n100.r10.s059.untrimmed.sorted.bam" -b "n100.r10.s059_output/n100.r10.s059.primers.bed" -p "n100.r10.s059_output/n100.r10.s059.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s059_output/n100.r10.s059.trimmed.sorted.bam" "n100.r10.s059_output/n100.r10.s059.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s059_output/n100.r10.s059.reference.fas" "n100.r10.s059_output/n100.r10.s059.trimmed.sorted.bam" > "n100.r10.s059_output/n100.r10.s059.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s059_output/n100.r10.s059.reference.fas" --call-indels "n100.r10.s059_output/n100.r10.s059.trimmed.sorted.bam" > "n100.r10.s059_output/n100.r10.s059.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s059_output/n100.r10.s059.trimmed.sorted.bam" > "n100.r10.s059_output/n100.r10.s059.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s059_output/n100.r10.s059.depth.txt" "n100.r10.s059_output/n100.r10.s059.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s059_output/n100.r10.s059.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s059_output/n100.r10.s059.reference.fas" | bcftools consensus -m "n100.r10.s059_output/n100.r10.s059.low_depth.tsv" tmp.vcf.gz > "n100.r10.s059_output/n100.r10.s059.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s059_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:29 scheduler task 74962e85 (flow 82727c77): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:29 scheduler task 74962e85 (flow 82727c77): waiting for completion (try 0): started
2021/07/08 17:37:29  ->  n100.r10.s098.Main.out_file 82727c77 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:29 n100.r10.s098.Main.out_file 82727c77 n100/r10/n100.r10.s098.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:77cfd4432575475efe3819aadb2b882e526db411b76fd9a588208fa3b8364a3f
	sha256:82727c77cfbfceae90dfad571de33a21c0f5767a5e943b58243aee68a476bc3c
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/74962e85d5e299f11e74a1ca66471c4a6fc24eb764a91a3d364c062cadf89a27
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s098_output"
	    wget -O "n100.r10.s098_output/n100.r10.s098.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s098_output/n100.r10.s098.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s098_output/n100.r10.s098.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s098_output/n100.r10.s098.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s098_output/n100.r10.s098.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s098_output/n100.r10.s098.reference.fas" "n100.r10.s098_output/n100.r10.s098.fq1.fastq" "n100.r10.s098_output/n100.r10.s098.fq2.fastq" | samtools view -bS - > "n100.r10.s098_output/n100.r10.s098.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s098_output/n100.r10.s098.untrimmed.sorted.bam" "n100.r10.s098_output/n100.r10.s098.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s098_output/n100.r10.s098.untrimmed.sorted.bam" -b "n100.r10.s098_output/n100.r10.s098.primers.bed" -p "n100.r10.s098_output/n100.r10.s098.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s098_output/n100.r10.s098.trimmed.sorted.bam" "n100.r10.s098_output/n100.r10.s098.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s098_output/n100.r10.s098.reference.fas" "n100.r10.s098_output/n100.r10.s098.trimmed.sorted.bam" > "n100.r10.s098_output/n100.r10.s098.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s098_output/n100.r10.s098.reference.fas" --call-indels "n100.r10.s098_output/n100.r10.s098.trimmed.sorted.bam" > "n100.r10.s098_output/n100.r10.s098.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s098_output/n100.r10.s098.trimmed.sorted.bam" > "n100.r10.s098_output/n100.r10.s098.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s098_output/n100.r10.s098.depth.txt" "n100.r10.s098_output/n100.r10.s098.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s098_output/n100.r10.s098.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s098_output/n100.r10.s098.reference.fas" | bcftools consensus -m "n100.r10.s098_output/n100.r10.s098.low_depth.tsv" tmp.vcf.gz > "n100.r10.s098_output/n100.r10.s098.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s098_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:30 scheduler task 7ddd1093 (flow a692e162): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:30 scheduler task 7ddd1093 (flow a692e162): waiting for completion (try 0): started
2021/07/08 17:37:30  ->  n100.r10.s073.Main.out_file a692e162 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:30 n100.r10.s073.Main.out_file a692e162 n100/r10/n100.r10.s073.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:790be1e6d744f05d4dd7510c41c63e7dc0d694a23bb9bf83c02463626d13b672
	sha256:a692e162744171abdb3e24884f14806d0be03ed7a3bc30f5293afa073ec3e635
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7ddd1093212818eff9fa66e5eb9c2250b4ae41bfebec492b9a9e16cc1827f57b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s073_output"
	    wget -O "n100.r10.s073_output/n100.r10.s073.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s073_output/n100.r10.s073.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s073_output/n100.r10.s073.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s073_output/n100.r10.s073.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s073_output/n100.r10.s073.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s073_output/n100.r10.s073.reference.fas" "n100.r10.s073_output/n100.r10.s073.fq1.fastq" "n100.r10.s073_output/n100.r10.s073.fq2.fastq" | samtools view -bS - > "n100.r10.s073_output/n100.r10.s073.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s073_output/n100.r10.s073.untrimmed.sorted.bam" "n100.r10.s073_output/n100.r10.s073.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s073_output/n100.r10.s073.untrimmed.sorted.bam" -b "n100.r10.s073_output/n100.r10.s073.primers.bed" -p "n100.r10.s073_output/n100.r10.s073.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s073_output/n100.r10.s073.trimmed.sorted.bam" "n100.r10.s073_output/n100.r10.s073.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s073_output/n100.r10.s073.reference.fas" "n100.r10.s073_output/n100.r10.s073.trimmed.sorted.bam" > "n100.r10.s073_output/n100.r10.s073.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s073_output/n100.r10.s073.reference.fas" --call-indels "n100.r10.s073_output/n100.r10.s073.trimmed.sorted.bam" > "n100.r10.s073_output/n100.r10.s073.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s073_output/n100.r10.s073.trimmed.sorted.bam" > "n100.r10.s073_output/n100.r10.s073.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s073_output/n100.r10.s073.depth.txt" "n100.r10.s073_output/n100.r10.s073.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s073_output/n100.r10.s073.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s073_output/n100.r10.s073.reference.fas" | bcftools consensus -m "n100.r10.s073_output/n100.r10.s073.low_depth.tsv" tmp.vcf.gz > "n100.r10.s073_output/n100.r10.s073.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s073_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:30 scheduler task b4908e4d (flow 735398ea): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:30 scheduler task b4908e4d (flow 735398ea): waiting for completion (try 0): started
2021/07/08 17:37:30  ->  n100.r10.s075.Main.out_file 735398ea exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:30 n100.r10.s075.Main.out_file 735398ea n100/r10/n100.r10.s075.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:218e9820f3dbb0cd6b26cc4d253218d4f2f3819f5b39c2bcd53d6365cdd7f966
	sha256:735398ea3af999027c1b6f19020381280cea5075948cbe1d380b58e6639cdb29
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b4908e4de6bce379ffbcdd7b11e322a78f59ca94f4f468a8e887c06140475b0f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s075_output"
	    wget -O "n100.r10.s075_output/n100.r10.s075.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s075_output/n100.r10.s075.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s075_output/n100.r10.s075.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s075_output/n100.r10.s075.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s075_output/n100.r10.s075.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s075_output/n100.r10.s075.reference.fas" "n100.r10.s075_output/n100.r10.s075.fq1.fastq" "n100.r10.s075_output/n100.r10.s075.fq2.fastq" | samtools view -bS - > "n100.r10.s075_output/n100.r10.s075.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s075_output/n100.r10.s075.untrimmed.sorted.bam" "n100.r10.s075_output/n100.r10.s075.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s075_output/n100.r10.s075.untrimmed.sorted.bam" -b "n100.r10.s075_output/n100.r10.s075.primers.bed" -p "n100.r10.s075_output/n100.r10.s075.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s075_output/n100.r10.s075.trimmed.sorted.bam" "n100.r10.s075_output/n100.r10.s075.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s075_output/n100.r10.s075.reference.fas" "n100.r10.s075_output/n100.r10.s075.trimmed.sorted.bam" > "n100.r10.s075_output/n100.r10.s075.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s075_output/n100.r10.s075.reference.fas" --call-indels "n100.r10.s075_output/n100.r10.s075.trimmed.sorted.bam" > "n100.r10.s075_output/n100.r10.s075.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s075_output/n100.r10.s075.trimmed.sorted.bam" > "n100.r10.s075_output/n100.r10.s075.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s075_output/n100.r10.s075.depth.txt" "n100.r10.s075_output/n100.r10.s075.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s075_output/n100.r10.s075.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s075_output/n100.r10.s075.reference.fas" | bcftools consensus -m "n100.r10.s075_output/n100.r10.s075.low_depth.tsv" tmp.vcf.gz > "n100.r10.s075_output/n100.r10.s075.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s075_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:30 scheduler task f24dd117 (flow d06527d9): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:30 scheduler task f24dd117 (flow d06527d9): waiting for completion (try 0): started
2021/07/08 17:37:30  ->  n100.r10.s084.Main.out_file d06527d9 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:30 n100.r10.s084.Main.out_file d06527d9 n100/r10/n100.r10.s084.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:74bb9f0982427cf10d37ad07b675662a00936ec26ccfca0ca3314e01d5fe6904
	sha256:d06527d97b515d2da09abab02ff02f7658c807f9f9fc857905e32add889e56ef
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f24dd1178ed656318b99cc42be67896d2c5fcb770b281b750dab9a35ce35fd0e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s084_output"
	    wget -O "n100.r10.s084_output/n100.r10.s084.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s084_output/n100.r10.s084.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s084_output/n100.r10.s084.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s084_output/n100.r10.s084.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s084_output/n100.r10.s084.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s084_output/n100.r10.s084.reference.fas" "n100.r10.s084_output/n100.r10.s084.fq1.fastq" "n100.r10.s084_output/n100.r10.s084.fq2.fastq" | samtools view -bS - > "n100.r10.s084_output/n100.r10.s084.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s084_output/n100.r10.s084.untrimmed.sorted.bam" "n100.r10.s084_output/n100.r10.s084.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s084_output/n100.r10.s084.untrimmed.sorted.bam" -b "n100.r10.s084_output/n100.r10.s084.primers.bed" -p "n100.r10.s084_output/n100.r10.s084.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s084_output/n100.r10.s084.trimmed.sorted.bam" "n100.r10.s084_output/n100.r10.s084.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s084_output/n100.r10.s084.reference.fas" "n100.r10.s084_output/n100.r10.s084.trimmed.sorted.bam" > "n100.r10.s084_output/n100.r10.s084.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s084_output/n100.r10.s084.reference.fas" --call-indels "n100.r10.s084_output/n100.r10.s084.trimmed.sorted.bam" > "n100.r10.s084_output/n100.r10.s084.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s084_output/n100.r10.s084.trimmed.sorted.bam" > "n100.r10.s084_output/n100.r10.s084.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s084_output/n100.r10.s084.depth.txt" "n100.r10.s084_output/n100.r10.s084.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s084_output/n100.r10.s084.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s084_output/n100.r10.s084.reference.fas" | bcftools consensus -m "n100.r10.s084_output/n100.r10.s084.low_depth.tsv" tmp.vcf.gz > "n100.r10.s084_output/n100.r10.s084.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s084_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:30 scheduler task bd8d9d6a (flow 94edc653): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:30 scheduler task bd8d9d6a (flow 94edc653): waiting for completion (try 0): started
2021/07/08 17:37:30  ->  n100.r10.s089.Main.out_file 94edc653 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:30 n100.r10.s089.Main.out_file 94edc653 n100/r10/n100.r10.s089.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fc7b49d8d9a85f4524eed6e6b23897f885ef322652957ba0a8764c929bbd9ec7
	sha256:94edc653bfab3bc0ef82ab9ef7ea66b1b7e84e111f4b2bdf802d9bf1c5f1c93b
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bd8d9d6aa5d8fe3fedb1de0b00c73490a492adeeee22b2da6ba8e3d0c1e03e81
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s089_output"
	    wget -O "n100.r10.s089_output/n100.r10.s089.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s089_output/n100.r10.s089.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s089_output/n100.r10.s089.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s089_output/n100.r10.s089.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s089_output/n100.r10.s089.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s089_output/n100.r10.s089.reference.fas" "n100.r10.s089_output/n100.r10.s089.fq1.fastq" "n100.r10.s089_output/n100.r10.s089.fq2.fastq" | samtools view -bS - > "n100.r10.s089_output/n100.r10.s089.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s089_output/n100.r10.s089.untrimmed.sorted.bam" "n100.r10.s089_output/n100.r10.s089.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s089_output/n100.r10.s089.untrimmed.sorted.bam" -b "n100.r10.s089_output/n100.r10.s089.primers.bed" -p "n100.r10.s089_output/n100.r10.s089.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s089_output/n100.r10.s089.trimmed.sorted.bam" "n100.r10.s089_output/n100.r10.s089.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s089_output/n100.r10.s089.reference.fas" "n100.r10.s089_output/n100.r10.s089.trimmed.sorted.bam" > "n100.r10.s089_output/n100.r10.s089.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s089_output/n100.r10.s089.reference.fas" --call-indels "n100.r10.s089_output/n100.r10.s089.trimmed.sorted.bam" > "n100.r10.s089_output/n100.r10.s089.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s089_output/n100.r10.s089.trimmed.sorted.bam" > "n100.r10.s089_output/n100.r10.s089.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s089_output/n100.r10.s089.depth.txt" "n100.r10.s089_output/n100.r10.s089.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s089_output/n100.r10.s089.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s089_output/n100.r10.s089.reference.fas" | bcftools consensus -m "n100.r10.s089_output/n100.r10.s089.low_depth.tsv" tmp.vcf.gz > "n100.r10.s089_output/n100.r10.s089.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s089_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:30 scheduler task 61d86a19 (flow ee1e5c5f): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:30 scheduler task 61d86a19 (flow ee1e5c5f): waiting for completion (try 0): started
2021/07/08 17:37:30  ->  n100.r10.s046.Main.out_file ee1e5c5f exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:30 n100.r10.s046.Main.out_file ee1e5c5f n100/r10/n100.r10.s046.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:103a532fbd7a7efca8d8920ab9f33bc53ec3c42ccee4eab535b7be0ae3f23b66
	sha256:ee1e5c5ff2cd20c3f666eaa5b9a6b58734220ade86fe9e719ff9632df09a890e
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/61d86a198bea4f0448c31a3a1bf415f0d5f7bbd249e2fff6af5a5b6f80123333
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s046_output"
	    wget -O "n100.r10.s046_output/n100.r10.s046.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s046_output/n100.r10.s046.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s046_output/n100.r10.s046.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s046_output/n100.r10.s046.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s046_output/n100.r10.s046.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s046_output/n100.r10.s046.reference.fas" "n100.r10.s046_output/n100.r10.s046.fq1.fastq" "n100.r10.s046_output/n100.r10.s046.fq2.fastq" | samtools view -bS - > "n100.r10.s046_output/n100.r10.s046.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s046_output/n100.r10.s046.untrimmed.sorted.bam" "n100.r10.s046_output/n100.r10.s046.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s046_output/n100.r10.s046.untrimmed.sorted.bam" -b "n100.r10.s046_output/n100.r10.s046.primers.bed" -p "n100.r10.s046_output/n100.r10.s046.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s046_output/n100.r10.s046.trimmed.sorted.bam" "n100.r10.s046_output/n100.r10.s046.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s046_output/n100.r10.s046.reference.fas" "n100.r10.s046_output/n100.r10.s046.trimmed.sorted.bam" > "n100.r10.s046_output/n100.r10.s046.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s046_output/n100.r10.s046.reference.fas" --call-indels "n100.r10.s046_output/n100.r10.s046.trimmed.sorted.bam" > "n100.r10.s046_output/n100.r10.s046.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s046_output/n100.r10.s046.trimmed.sorted.bam" > "n100.r10.s046_output/n100.r10.s046.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s046_output/n100.r10.s046.depth.txt" "n100.r10.s046_output/n100.r10.s046.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s046_output/n100.r10.s046.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s046_output/n100.r10.s046.reference.fas" | bcftools consensus -m "n100.r10.s046_output/n100.r10.s046.low_depth.tsv" tmp.vcf.gz > "n100.r10.s046_output/n100.r10.s046.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s046_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:31 scheduler task 0a72f984 (flow 0210f1d8): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:31 scheduler task 0a72f984 (flow 0210f1d8): waiting for completion (try 0): started
2021/07/08 17:37:31  ->  n100.r10.s078.Main.out_file 0210f1d8 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:31 n100.r10.s078.Main.out_file 0210f1d8 n100/r10/n100.r10.s078.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:839838155f1038e666be588a6141e0badf27775b42741c535bba610ba09d4ef9
	sha256:0210f1d8ed3b5b85d6e72a0cee425a986f4968caeecfae3f5b1a1f7f9a294a2d
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0a72f98437145bb9d0d6fc08ff27c155eadb36f2b61e8b9538e2bbcee26a8828
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s078_output"
	    wget -O "n100.r10.s078_output/n100.r10.s078.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s078_output/n100.r10.s078.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s078_output/n100.r10.s078.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s078_output/n100.r10.s078.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s078_output/n100.r10.s078.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s078_output/n100.r10.s078.reference.fas" "n100.r10.s078_output/n100.r10.s078.fq1.fastq" "n100.r10.s078_output/n100.r10.s078.fq2.fastq" | samtools view -bS - > "n100.r10.s078_output/n100.r10.s078.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s078_output/n100.r10.s078.untrimmed.sorted.bam" "n100.r10.s078_output/n100.r10.s078.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s078_output/n100.r10.s078.untrimmed.sorted.bam" -b "n100.r10.s078_output/n100.r10.s078.primers.bed" -p "n100.r10.s078_output/n100.r10.s078.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s078_output/n100.r10.s078.trimmed.sorted.bam" "n100.r10.s078_output/n100.r10.s078.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s078_output/n100.r10.s078.reference.fas" "n100.r10.s078_output/n100.r10.s078.trimmed.sorted.bam" > "n100.r10.s078_output/n100.r10.s078.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s078_output/n100.r10.s078.reference.fas" --call-indels "n100.r10.s078_output/n100.r10.s078.trimmed.sorted.bam" > "n100.r10.s078_output/n100.r10.s078.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s078_output/n100.r10.s078.trimmed.sorted.bam" > "n100.r10.s078_output/n100.r10.s078.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s078_output/n100.r10.s078.depth.txt" "n100.r10.s078_output/n100.r10.s078.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s078_output/n100.r10.s078.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s078_output/n100.r10.s078.reference.fas" | bcftools consensus -m "n100.r10.s078_output/n100.r10.s078.low_depth.tsv" tmp.vcf.gz > "n100.r10.s078_output/n100.r10.s078.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s078_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:31 scheduler task 9741371c (flow 26a00bb9): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:31 scheduler task 9741371c (flow 26a00bb9): waiting for completion (try 0): started
2021/07/08 17:37:31  ->  n100.r10.s050.Main.out_file 26a00bb9 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:31 n100.r10.s050.Main.out_file 26a00bb9 n100/r10/n100.r10.s050.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5d80b059dfdb5c7d75d2648c42cb5bf758b453fff594436ca0fd5e559869dfd2
	sha256:26a00bb91ddeac9c4dd121c3fe3d2210c22169ff561852f6b39c273d1fd37931
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9741371cdda3d32f64cc6a8de8118dd9106e1a898f62eee1a42393ff32ce2983
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s050_output"
	    wget -O "n100.r10.s050_output/n100.r10.s050.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s050_output/n100.r10.s050.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s050_output/n100.r10.s050.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s050_output/n100.r10.s050.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s050_output/n100.r10.s050.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s050_output/n100.r10.s050.reference.fas" "n100.r10.s050_output/n100.r10.s050.fq1.fastq" "n100.r10.s050_output/n100.r10.s050.fq2.fastq" | samtools view -bS - > "n100.r10.s050_output/n100.r10.s050.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s050_output/n100.r10.s050.untrimmed.sorted.bam" "n100.r10.s050_output/n100.r10.s050.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s050_output/n100.r10.s050.untrimmed.sorted.bam" -b "n100.r10.s050_output/n100.r10.s050.primers.bed" -p "n100.r10.s050_output/n100.r10.s050.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s050_output/n100.r10.s050.trimmed.sorted.bam" "n100.r10.s050_output/n100.r10.s050.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s050_output/n100.r10.s050.reference.fas" "n100.r10.s050_output/n100.r10.s050.trimmed.sorted.bam" > "n100.r10.s050_output/n100.r10.s050.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s050_output/n100.r10.s050.reference.fas" --call-indels "n100.r10.s050_output/n100.r10.s050.trimmed.sorted.bam" > "n100.r10.s050_output/n100.r10.s050.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s050_output/n100.r10.s050.trimmed.sorted.bam" > "n100.r10.s050_output/n100.r10.s050.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s050_output/n100.r10.s050.depth.txt" "n100.r10.s050_output/n100.r10.s050.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s050_output/n100.r10.s050.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s050_output/n100.r10.s050.reference.fas" | bcftools consensus -m "n100.r10.s050_output/n100.r10.s050.low_depth.tsv" tmp.vcf.gz > "n100.r10.s050_output/n100.r10.s050.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s050_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:31 scheduler task a99fe358 (flow 025791ae): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:31 scheduler task a99fe358 (flow 025791ae): waiting for completion (try 0): started
2021/07/08 17:37:31  ->  n100.r10.s045.Main.out_file 025791ae exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:31 n100.r10.s045.Main.out_file 025791ae n100/r10/n100.r10.s045.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3d0164b42fb99899a4ae203b21ca9fbd9f5609c4695dd3ac8729d44e1b9970e0
	sha256:025791aeaa50de7271e4bce65cb88fc910d5e960354593ba5feacbb583e3f37c
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a99fe3581af3fb66a5434738dc53812b7d09c8c2c65ed9d16c0d6731d4bd447a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s045_output"
	    wget -O "n100.r10.s045_output/n100.r10.s045.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s045_output/n100.r10.s045.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s045_output/n100.r10.s045.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s045_output/n100.r10.s045.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s045_output/n100.r10.s045.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s045_output/n100.r10.s045.reference.fas" "n100.r10.s045_output/n100.r10.s045.fq1.fastq" "n100.r10.s045_output/n100.r10.s045.fq2.fastq" | samtools view -bS - > "n100.r10.s045_output/n100.r10.s045.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s045_output/n100.r10.s045.untrimmed.sorted.bam" "n100.r10.s045_output/n100.r10.s045.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s045_output/n100.r10.s045.untrimmed.sorted.bam" -b "n100.r10.s045_output/n100.r10.s045.primers.bed" -p "n100.r10.s045_output/n100.r10.s045.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s045_output/n100.r10.s045.trimmed.sorted.bam" "n100.r10.s045_output/n100.r10.s045.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s045_output/n100.r10.s045.reference.fas" "n100.r10.s045_output/n100.r10.s045.trimmed.sorted.bam" > "n100.r10.s045_output/n100.r10.s045.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s045_output/n100.r10.s045.reference.fas" --call-indels "n100.r10.s045_output/n100.r10.s045.trimmed.sorted.bam" > "n100.r10.s045_output/n100.r10.s045.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s045_output/n100.r10.s045.trimmed.sorted.bam" > "n100.r10.s045_output/n100.r10.s045.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s045_output/n100.r10.s045.depth.txt" "n100.r10.s045_output/n100.r10.s045.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s045_output/n100.r10.s045.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s045_output/n100.r10.s045.reference.fas" | bcftools consensus -m "n100.r10.s045_output/n100.r10.s045.low_depth.tsv" tmp.vcf.gz > "n100.r10.s045_output/n100.r10.s045.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s045_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:31 scheduler task 11521559 (flow aee712fe): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:31 scheduler task 11521559 (flow aee712fe): waiting for completion (try 0): started
2021/07/08 17:37:31  ->  n100.r10.s009.Main.out_file aee712fe exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:31 n100.r10.s009.Main.out_file aee712fe n100/r10/n100.r10.s009.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:42f6522a1f75d8b69a335ddb3a67440d0d7cafa97b9af9f75166c77d4e8c4995
	sha256:aee712fe978d426084cca0bbb128efee951a34b3c165fe113de99c7911e358a2
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/11521559e899ed75c88d3ece6865973b05fb0ed4ff63f66ab379554f6616eb0b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s009_output"
	    wget -O "n100.r10.s009_output/n100.r10.s009.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s009_output/n100.r10.s009.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s009_output/n100.r10.s009.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s009_output/n100.r10.s009.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s009_output/n100.r10.s009.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s009_output/n100.r10.s009.reference.fas" "n100.r10.s009_output/n100.r10.s009.fq1.fastq" "n100.r10.s009_output/n100.r10.s009.fq2.fastq" | samtools view -bS - > "n100.r10.s009_output/n100.r10.s009.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s009_output/n100.r10.s009.untrimmed.sorted.bam" "n100.r10.s009_output/n100.r10.s009.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s009_output/n100.r10.s009.untrimmed.sorted.bam" -b "n100.r10.s009_output/n100.r10.s009.primers.bed" -p "n100.r10.s009_output/n100.r10.s009.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s009_output/n100.r10.s009.trimmed.sorted.bam" "n100.r10.s009_output/n100.r10.s009.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s009_output/n100.r10.s009.reference.fas" "n100.r10.s009_output/n100.r10.s009.trimmed.sorted.bam" > "n100.r10.s009_output/n100.r10.s009.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s009_output/n100.r10.s009.reference.fas" --call-indels "n100.r10.s009_output/n100.r10.s009.trimmed.sorted.bam" > "n100.r10.s009_output/n100.r10.s009.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s009_output/n100.r10.s009.trimmed.sorted.bam" > "n100.r10.s009_output/n100.r10.s009.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s009_output/n100.r10.s009.depth.txt" "n100.r10.s009_output/n100.r10.s009.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s009_output/n100.r10.s009.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s009_output/n100.r10.s009.reference.fas" | bcftools consensus -m "n100.r10.s009_output/n100.r10.s009.low_depth.tsv" tmp.vcf.gz > "n100.r10.s009_output/n100.r10.s009.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s009_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:31 scheduler task 42735b19 (flow c3a76ea0): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:31 scheduler task 42735b19 (flow c3a76ea0): waiting for completion (try 0): started
2021/07/08 17:37:31  ->  n100.r10.s048.Main.out_file c3a76ea0 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:31 n100.r10.s048.Main.out_file c3a76ea0 n100/r10/n100.r10.s048.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b810d622c736c606a58aca6151f464c04b863d38785c51a23fcd5c225005cc1a
	sha256:c3a76ea02ad7769b8e8ae2cf3faab3a2cdf0f6b0c0b29e60d1aebac15d87b715
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/42735b194307902828fdebdf3ab18d9efd32fa481f3ecf77988191fba766e8c8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s048_output"
	    wget -O "n100.r10.s048_output/n100.r10.s048.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s048_output/n100.r10.s048.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s048_output/n100.r10.s048.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s048_output/n100.r10.s048.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s048_output/n100.r10.s048.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s048_output/n100.r10.s048.reference.fas" "n100.r10.s048_output/n100.r10.s048.fq1.fastq" "n100.r10.s048_output/n100.r10.s048.fq2.fastq" | samtools view -bS - > "n100.r10.s048_output/n100.r10.s048.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s048_output/n100.r10.s048.untrimmed.sorted.bam" "n100.r10.s048_output/n100.r10.s048.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s048_output/n100.r10.s048.untrimmed.sorted.bam" -b "n100.r10.s048_output/n100.r10.s048.primers.bed" -p "n100.r10.s048_output/n100.r10.s048.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s048_output/n100.r10.s048.trimmed.sorted.bam" "n100.r10.s048_output/n100.r10.s048.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s048_output/n100.r10.s048.reference.fas" "n100.r10.s048_output/n100.r10.s048.trimmed.sorted.bam" > "n100.r10.s048_output/n100.r10.s048.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s048_output/n100.r10.s048.reference.fas" --call-indels "n100.r10.s048_output/n100.r10.s048.trimmed.sorted.bam" > "n100.r10.s048_output/n100.r10.s048.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s048_output/n100.r10.s048.trimmed.sorted.bam" > "n100.r10.s048_output/n100.r10.s048.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s048_output/n100.r10.s048.depth.txt" "n100.r10.s048_output/n100.r10.s048.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s048_output/n100.r10.s048.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s048_output/n100.r10.s048.reference.fas" | bcftools consensus -m "n100.r10.s048_output/n100.r10.s048.low_depth.tsv" tmp.vcf.gz > "n100.r10.s048_output/n100.r10.s048.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s048_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:31 scheduler task 8132d6a4 (flow 3012d03f): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:31 scheduler task 8132d6a4 (flow 3012d03f): waiting for completion (try 0): started
2021/07/08 17:37:31  ->  n100.r10.s085.Main.out_file 3012d03f exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:31 n100.r10.s085.Main.out_file 3012d03f n100/r10/n100.r10.s085.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0dd015d3033f4316db91ee98d5e454d05144feda7aef64fcd6ed56372dfe7655
	sha256:3012d03fc6949adb7b9156e84d34fcb9cfccb049a310fc8c37f031b0a74b95db
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8132d6a4f859b360980eafa8fbb0e80e262e7db5fc5c48c64c943e638a53dd2b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s085_output"
	    wget -O "n100.r10.s085_output/n100.r10.s085.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s085_output/n100.r10.s085.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s085_output/n100.r10.s085.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s085_output/n100.r10.s085.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s085_output/n100.r10.s085.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s085_output/n100.r10.s085.reference.fas" "n100.r10.s085_output/n100.r10.s085.fq1.fastq" "n100.r10.s085_output/n100.r10.s085.fq2.fastq" | samtools view -bS - > "n100.r10.s085_output/n100.r10.s085.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s085_output/n100.r10.s085.untrimmed.sorted.bam" "n100.r10.s085_output/n100.r10.s085.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s085_output/n100.r10.s085.untrimmed.sorted.bam" -b "n100.r10.s085_output/n100.r10.s085.primers.bed" -p "n100.r10.s085_output/n100.r10.s085.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s085_output/n100.r10.s085.trimmed.sorted.bam" "n100.r10.s085_output/n100.r10.s085.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s085_output/n100.r10.s085.reference.fas" "n100.r10.s085_output/n100.r10.s085.trimmed.sorted.bam" > "n100.r10.s085_output/n100.r10.s085.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s085_output/n100.r10.s085.reference.fas" --call-indels "n100.r10.s085_output/n100.r10.s085.trimmed.sorted.bam" > "n100.r10.s085_output/n100.r10.s085.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s085_output/n100.r10.s085.trimmed.sorted.bam" > "n100.r10.s085_output/n100.r10.s085.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s085_output/n100.r10.s085.depth.txt" "n100.r10.s085_output/n100.r10.s085.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s085_output/n100.r10.s085.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s085_output/n100.r10.s085.reference.fas" | bcftools consensus -m "n100.r10.s085_output/n100.r10.s085.low_depth.tsv" tmp.vcf.gz > "n100.r10.s085_output/n100.r10.s085.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s085_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:32 scheduler task 44a25b37 (flow 39b5a1ee): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:32 scheduler task 44a25b37 (flow 39b5a1ee): waiting for completion (try 0): started
2021/07/08 17:37:32  ->  n100.r10.s052.Main.out_file 39b5a1ee exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:32 n100.r10.s052.Main.out_file 39b5a1ee n100/r10/n100.r10.s052.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:38133b12ece73248c97272984f48ec6133e3d6c177de71967220a230a0c6e9f9
	sha256:39b5a1eeb5ea757c920275a929713a0d79ddc960a83392cc42c7af2c99c364af
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/44a25b374f0380685786b4a6d54463749e0d9dedfe780dc535cc16c6a626401b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s052_output"
	    wget -O "n100.r10.s052_output/n100.r10.s052.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s052_output/n100.r10.s052.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s052_output/n100.r10.s052.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s052_output/n100.r10.s052.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s052_output/n100.r10.s052.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s052_output/n100.r10.s052.reference.fas" "n100.r10.s052_output/n100.r10.s052.fq1.fastq" "n100.r10.s052_output/n100.r10.s052.fq2.fastq" | samtools view -bS - > "n100.r10.s052_output/n100.r10.s052.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s052_output/n100.r10.s052.untrimmed.sorted.bam" "n100.r10.s052_output/n100.r10.s052.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s052_output/n100.r10.s052.untrimmed.sorted.bam" -b "n100.r10.s052_output/n100.r10.s052.primers.bed" -p "n100.r10.s052_output/n100.r10.s052.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s052_output/n100.r10.s052.trimmed.sorted.bam" "n100.r10.s052_output/n100.r10.s052.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s052_output/n100.r10.s052.reference.fas" "n100.r10.s052_output/n100.r10.s052.trimmed.sorted.bam" > "n100.r10.s052_output/n100.r10.s052.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s052_output/n100.r10.s052.reference.fas" --call-indels "n100.r10.s052_output/n100.r10.s052.trimmed.sorted.bam" > "n100.r10.s052_output/n100.r10.s052.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s052_output/n100.r10.s052.trimmed.sorted.bam" > "n100.r10.s052_output/n100.r10.s052.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s052_output/n100.r10.s052.depth.txt" "n100.r10.s052_output/n100.r10.s052.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s052_output/n100.r10.s052.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s052_output/n100.r10.s052.reference.fas" | bcftools consensus -m "n100.r10.s052_output/n100.r10.s052.low_depth.tsv" tmp.vcf.gz > "n100.r10.s052_output/n100.r10.s052.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s052_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:32 scheduler task 0727dd15 (flow afe00438): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:32 scheduler task 0727dd15 (flow afe00438): waiting for completion (try 0): started
2021/07/08 17:37:32  ->  n100.r10.s043.Main.out_file afe00438 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:32 n100.r10.s043.Main.out_file afe00438 n100/r10/n100.r10.s043.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b55507dc46adb3c5d23c2a40a2baf6b679aaae9b920765dcc7e8d8d9cbdb7683
	sha256:afe004389e7ab99cf4edcfb062152901892a3f2f9cb9dcb8b87898aa2f4b5f62
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0727dd157847eeb50e20d961ac68ddd27fd898093e368f7f6fd42ceb7001674d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s043_output"
	    wget -O "n100.r10.s043_output/n100.r10.s043.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s043_output/n100.r10.s043.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s043_output/n100.r10.s043.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s043_output/n100.r10.s043.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s043_output/n100.r10.s043.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s043_output/n100.r10.s043.reference.fas" "n100.r10.s043_output/n100.r10.s043.fq1.fastq" "n100.r10.s043_output/n100.r10.s043.fq2.fastq" | samtools view -bS - > "n100.r10.s043_output/n100.r10.s043.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s043_output/n100.r10.s043.untrimmed.sorted.bam" "n100.r10.s043_output/n100.r10.s043.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s043_output/n100.r10.s043.untrimmed.sorted.bam" -b "n100.r10.s043_output/n100.r10.s043.primers.bed" -p "n100.r10.s043_output/n100.r10.s043.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s043_output/n100.r10.s043.trimmed.sorted.bam" "n100.r10.s043_output/n100.r10.s043.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s043_output/n100.r10.s043.reference.fas" "n100.r10.s043_output/n100.r10.s043.trimmed.sorted.bam" > "n100.r10.s043_output/n100.r10.s043.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s043_output/n100.r10.s043.reference.fas" --call-indels "n100.r10.s043_output/n100.r10.s043.trimmed.sorted.bam" > "n100.r10.s043_output/n100.r10.s043.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s043_output/n100.r10.s043.trimmed.sorted.bam" > "n100.r10.s043_output/n100.r10.s043.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s043_output/n100.r10.s043.depth.txt" "n100.r10.s043_output/n100.r10.s043.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s043_output/n100.r10.s043.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s043_output/n100.r10.s043.reference.fas" | bcftools consensus -m "n100.r10.s043_output/n100.r10.s043.low_depth.tsv" tmp.vcf.gz > "n100.r10.s043_output/n100.r10.s043.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s043_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:32 scheduler task 8c3a26a2 (flow 63d125fa): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:32 scheduler task 8c3a26a2 (flow 63d125fa): waiting for completion (try 0): started
2021/07/08 17:37:32  ->  n100.r10.s017.Main.out_file 63d125fa exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:32 n100.r10.s017.Main.out_file 63d125fa n100/r10/n100.r10.s017.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b835e4fbf04a734df5aaedb298dc199a45f129c11d4c6e0e5c0498d2936239a8
	sha256:63d125fa7ca84e746690330caf95c343897ec695e5dad7e75dd718653109f7f8
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8c3a26a22105229ccbc7adf6c4e66d046387d115f3e61a44fb7f3dedc7e2e241
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s017_output"
	    wget -O "n100.r10.s017_output/n100.r10.s017.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s017_output/n100.r10.s017.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s017_output/n100.r10.s017.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s017_output/n100.r10.s017.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s017_output/n100.r10.s017.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s017_output/n100.r10.s017.reference.fas" "n100.r10.s017_output/n100.r10.s017.fq1.fastq" "n100.r10.s017_output/n100.r10.s017.fq2.fastq" | samtools view -bS - > "n100.r10.s017_output/n100.r10.s017.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s017_output/n100.r10.s017.untrimmed.sorted.bam" "n100.r10.s017_output/n100.r10.s017.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s017_output/n100.r10.s017.untrimmed.sorted.bam" -b "n100.r10.s017_output/n100.r10.s017.primers.bed" -p "n100.r10.s017_output/n100.r10.s017.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s017_output/n100.r10.s017.trimmed.sorted.bam" "n100.r10.s017_output/n100.r10.s017.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s017_output/n100.r10.s017.reference.fas" "n100.r10.s017_output/n100.r10.s017.trimmed.sorted.bam" > "n100.r10.s017_output/n100.r10.s017.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s017_output/n100.r10.s017.reference.fas" --call-indels "n100.r10.s017_output/n100.r10.s017.trimmed.sorted.bam" > "n100.r10.s017_output/n100.r10.s017.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s017_output/n100.r10.s017.trimmed.sorted.bam" > "n100.r10.s017_output/n100.r10.s017.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s017_output/n100.r10.s017.depth.txt" "n100.r10.s017_output/n100.r10.s017.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s017_output/n100.r10.s017.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s017_output/n100.r10.s017.reference.fas" | bcftools consensus -m "n100.r10.s017_output/n100.r10.s017.low_depth.tsv" tmp.vcf.gz > "n100.r10.s017_output/n100.r10.s017.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s017_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:32 scheduler task daf95962 (flow 7c29b38a): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:32 scheduler task daf95962 (flow 7c29b38a): waiting for completion (try 0): started
2021/07/08 17:37:32  ->  n100.r10.s002.Main.out_file 7c29b38a exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:32 n100.r10.s002.Main.out_file 7c29b38a n100/r10/n100.r10.s002.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2c930809f7fcb189a3df0b602a5252c77c366f065f849a634daef2ae7c093797
	sha256:7c29b38a5fe5625796ec8045fb6ad19c58c5b8875b0accf43303cbf3ba87d38f
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/daf95962c522f30962704c4812142c6166d554c27c93274f6594d7d61996887e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s002_output"
	    wget -O "n100.r10.s002_output/n100.r10.s002.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s002_output/n100.r10.s002.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s002_output/n100.r10.s002.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s002_output/n100.r10.s002.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s002_output/n100.r10.s002.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s002_output/n100.r10.s002.reference.fas" "n100.r10.s002_output/n100.r10.s002.fq1.fastq" "n100.r10.s002_output/n100.r10.s002.fq2.fastq" | samtools view -bS - > "n100.r10.s002_output/n100.r10.s002.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s002_output/n100.r10.s002.untrimmed.sorted.bam" "n100.r10.s002_output/n100.r10.s002.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s002_output/n100.r10.s002.untrimmed.sorted.bam" -b "n100.r10.s002_output/n100.r10.s002.primers.bed" -p "n100.r10.s002_output/n100.r10.s002.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s002_output/n100.r10.s002.trimmed.sorted.bam" "n100.r10.s002_output/n100.r10.s002.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s002_output/n100.r10.s002.reference.fas" "n100.r10.s002_output/n100.r10.s002.trimmed.sorted.bam" > "n100.r10.s002_output/n100.r10.s002.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s002_output/n100.r10.s002.reference.fas" --call-indels "n100.r10.s002_output/n100.r10.s002.trimmed.sorted.bam" > "n100.r10.s002_output/n100.r10.s002.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s002_output/n100.r10.s002.trimmed.sorted.bam" > "n100.r10.s002_output/n100.r10.s002.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s002_output/n100.r10.s002.depth.txt" "n100.r10.s002_output/n100.r10.s002.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s002_output/n100.r10.s002.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s002_output/n100.r10.s002.reference.fas" | bcftools consensus -m "n100.r10.s002_output/n100.r10.s002.low_depth.tsv" tmp.vcf.gz > "n100.r10.s002_output/n100.r10.s002.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s002_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:32 scheduler task 2e8ecf12 (flow 1925ed71): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:32 scheduler task 2e8ecf12 (flow 1925ed71): waiting for completion (try 0): started
2021/07/08 17:37:32  ->  n100.r10.s063.Main.out_file 1925ed71 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:32 n100.r10.s063.Main.out_file 1925ed71 n100/r10/n100.r10.s063.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3dac571cba8e573a09ffd6f270bfc57d06cb7ca60d532f2be71625a8c2d80702
	sha256:1925ed717d5d5db7996e38b037b6e927a182e8aa8fb9926088145bf0b1268435
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2e8ecf12ab5240c59c9f40456e688f431bbb90fa99721398eeb4496edbc4a9a5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s063_output"
	    wget -O "n100.r10.s063_output/n100.r10.s063.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s063_output/n100.r10.s063.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s063_output/n100.r10.s063.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s063_output/n100.r10.s063.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s063_output/n100.r10.s063.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s063_output/n100.r10.s063.reference.fas" "n100.r10.s063_output/n100.r10.s063.fq1.fastq" "n100.r10.s063_output/n100.r10.s063.fq2.fastq" | samtools view -bS - > "n100.r10.s063_output/n100.r10.s063.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s063_output/n100.r10.s063.untrimmed.sorted.bam" "n100.r10.s063_output/n100.r10.s063.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s063_output/n100.r10.s063.untrimmed.sorted.bam" -b "n100.r10.s063_output/n100.r10.s063.primers.bed" -p "n100.r10.s063_output/n100.r10.s063.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s063_output/n100.r10.s063.trimmed.sorted.bam" "n100.r10.s063_output/n100.r10.s063.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s063_output/n100.r10.s063.reference.fas" "n100.r10.s063_output/n100.r10.s063.trimmed.sorted.bam" > "n100.r10.s063_output/n100.r10.s063.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s063_output/n100.r10.s063.reference.fas" --call-indels "n100.r10.s063_output/n100.r10.s063.trimmed.sorted.bam" > "n100.r10.s063_output/n100.r10.s063.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s063_output/n100.r10.s063.trimmed.sorted.bam" > "n100.r10.s063_output/n100.r10.s063.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s063_output/n100.r10.s063.depth.txt" "n100.r10.s063_output/n100.r10.s063.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s063_output/n100.r10.s063.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s063_output/n100.r10.s063.reference.fas" | bcftools consensus -m "n100.r10.s063_output/n100.r10.s063.low_depth.tsv" tmp.vcf.gz > "n100.r10.s063_output/n100.r10.s063.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s063_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:32 scheduler task 847deec3 (flow 54b764b0): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:32 scheduler task 847deec3 (flow 54b764b0): waiting for completion (try 0): started
2021/07/08 17:37:32  ->  n100.r10.s014.Main.out_file 54b764b0 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:32 n100.r10.s014.Main.out_file 54b764b0 n100/r10/n100.r10.s014.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9055756ef52438ee91e696daaeff9972dc28bbca8eaac63c7c29147e35b957c0
	sha256:54b764b0fee2dd7b0f4b3f2c99f9c00bd8f3b551ddb5d6dc3ddf710ea3f33eac
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/847deec353e8a12c5b7070288e817145b485fce525156a69b278a8fe1dcfbf10
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s014_output"
	    wget -O "n100.r10.s014_output/n100.r10.s014.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s014_output/n100.r10.s014.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s014_output/n100.r10.s014.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s014_output/n100.r10.s014.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s014_output/n100.r10.s014.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s014_output/n100.r10.s014.reference.fas" "n100.r10.s014_output/n100.r10.s014.fq1.fastq" "n100.r10.s014_output/n100.r10.s014.fq2.fastq" | samtools view -bS - > "n100.r10.s014_output/n100.r10.s014.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s014_output/n100.r10.s014.untrimmed.sorted.bam" "n100.r10.s014_output/n100.r10.s014.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s014_output/n100.r10.s014.untrimmed.sorted.bam" -b "n100.r10.s014_output/n100.r10.s014.primers.bed" -p "n100.r10.s014_output/n100.r10.s014.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s014_output/n100.r10.s014.trimmed.sorted.bam" "n100.r10.s014_output/n100.r10.s014.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s014_output/n100.r10.s014.reference.fas" "n100.r10.s014_output/n100.r10.s014.trimmed.sorted.bam" > "n100.r10.s014_output/n100.r10.s014.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s014_output/n100.r10.s014.reference.fas" --call-indels "n100.r10.s014_output/n100.r10.s014.trimmed.sorted.bam" > "n100.r10.s014_output/n100.r10.s014.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s014_output/n100.r10.s014.trimmed.sorted.bam" > "n100.r10.s014_output/n100.r10.s014.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s014_output/n100.r10.s014.depth.txt" "n100.r10.s014_output/n100.r10.s014.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s014_output/n100.r10.s014.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s014_output/n100.r10.s014.reference.fas" | bcftools consensus -m "n100.r10.s014_output/n100.r10.s014.low_depth.tsv" tmp.vcf.gz > "n100.r10.s014_output/n100.r10.s014.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s014_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:32 scheduler task 400a7920 (flow a4d00c52): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:32 scheduler task 400a7920 (flow a4d00c52): waiting for completion (try 0): started
2021/07/08 17:37:32  ->  n100.r10.s090.Main.out_file a4d00c52 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:32 n100.r10.s090.Main.out_file a4d00c52 n100/r10/n100.r10.s090.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e37701031c135224d6bf44f9d485ddf580ae893e0e08d0c542e450542643e42e
	sha256:a4d00c524b2eb577f9bbaa2faddbe364d1921ec2997bdb3afb8a1411e5e908d8
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/400a79208fb1a1a93e67a205a5a1cec931e9b65ff8e97f7f7b8a9cacbcd18781
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s090_output"
	    wget -O "n100.r10.s090_output/n100.r10.s090.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s090_output/n100.r10.s090.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s090_output/n100.r10.s090.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s090_output/n100.r10.s090.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s090_output/n100.r10.s090.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s090_output/n100.r10.s090.reference.fas" "n100.r10.s090_output/n100.r10.s090.fq1.fastq" "n100.r10.s090_output/n100.r10.s090.fq2.fastq" | samtools view -bS - > "n100.r10.s090_output/n100.r10.s090.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s090_output/n100.r10.s090.untrimmed.sorted.bam" "n100.r10.s090_output/n100.r10.s090.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s090_output/n100.r10.s090.untrimmed.sorted.bam" -b "n100.r10.s090_output/n100.r10.s090.primers.bed" -p "n100.r10.s090_output/n100.r10.s090.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s090_output/n100.r10.s090.trimmed.sorted.bam" "n100.r10.s090_output/n100.r10.s090.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s090_output/n100.r10.s090.reference.fas" "n100.r10.s090_output/n100.r10.s090.trimmed.sorted.bam" > "n100.r10.s090_output/n100.r10.s090.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s090_output/n100.r10.s090.reference.fas" --call-indels "n100.r10.s090_output/n100.r10.s090.trimmed.sorted.bam" > "n100.r10.s090_output/n100.r10.s090.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s090_output/n100.r10.s090.trimmed.sorted.bam" > "n100.r10.s090_output/n100.r10.s090.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s090_output/n100.r10.s090.depth.txt" "n100.r10.s090_output/n100.r10.s090.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s090_output/n100.r10.s090.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s090_output/n100.r10.s090.reference.fas" | bcftools consensus -m "n100.r10.s090_output/n100.r10.s090.low_depth.tsv" tmp.vcf.gz > "n100.r10.s090_output/n100.r10.s090.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s090_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:33 scheduler task d7c574d6 (flow d719cd29): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:33 scheduler task d7c574d6 (flow d719cd29): waiting for completion (try 0): started
2021/07/08 17:37:33  ->  n100.r10.s049.Main.out_file d719cd29 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:33 n100.r10.s049.Main.out_file d719cd29 n100/r10/n100.r10.s049.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c7e0b5120da6edf1f9b8a5151de9d6655ec0f1a963eb07785b7bafa8654270ff
	sha256:d719cd2933bc316268e4ea3899d8e4624e8585fa414de751e57b5922837bc569
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d7c574d6f31ab4e4ebb7e022eb8f9a2114193f3847f070ca0efb2d6aa4db699b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s049_output"
	    wget -O "n100.r10.s049_output/n100.r10.s049.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s049_output/n100.r10.s049.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s049_output/n100.r10.s049.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s049_output/n100.r10.s049.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s049_output/n100.r10.s049.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s049_output/n100.r10.s049.reference.fas" "n100.r10.s049_output/n100.r10.s049.fq1.fastq" "n100.r10.s049_output/n100.r10.s049.fq2.fastq" | samtools view -bS - > "n100.r10.s049_output/n100.r10.s049.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s049_output/n100.r10.s049.untrimmed.sorted.bam" "n100.r10.s049_output/n100.r10.s049.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s049_output/n100.r10.s049.untrimmed.sorted.bam" -b "n100.r10.s049_output/n100.r10.s049.primers.bed" -p "n100.r10.s049_output/n100.r10.s049.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s049_output/n100.r10.s049.trimmed.sorted.bam" "n100.r10.s049_output/n100.r10.s049.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s049_output/n100.r10.s049.reference.fas" "n100.r10.s049_output/n100.r10.s049.trimmed.sorted.bam" > "n100.r10.s049_output/n100.r10.s049.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s049_output/n100.r10.s049.reference.fas" --call-indels "n100.r10.s049_output/n100.r10.s049.trimmed.sorted.bam" > "n100.r10.s049_output/n100.r10.s049.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s049_output/n100.r10.s049.trimmed.sorted.bam" > "n100.r10.s049_output/n100.r10.s049.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s049_output/n100.r10.s049.depth.txt" "n100.r10.s049_output/n100.r10.s049.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s049_output/n100.r10.s049.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s049_output/n100.r10.s049.reference.fas" | bcftools consensus -m "n100.r10.s049_output/n100.r10.s049.low_depth.tsv" tmp.vcf.gz > "n100.r10.s049_output/n100.r10.s049.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s049_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:33 scheduler task 96ccb3b6 (flow e4994f3d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:33 scheduler task 96ccb3b6 (flow e4994f3d): waiting for completion (try 0): started
2021/07/08 17:37:33  ->  n100.r10.s001.Main.out_file e4994f3d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:33 n100.r10.s001.Main.out_file e4994f3d n100/r10/n100.r10.s001.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:06356bb39d505be558b221fd8201e55fa5c61c0873c8ebf276df5aaf9a11eb71
	sha256:e4994f3d0f23df6b3d955aa5540a3d6196bc1c7adbf8896e43a10c903cea617b
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/96ccb3b63988da099cdb47ab75ab473db229f4a18f2e193d379b964e38aba49e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s001_output"
	    wget -O "n100.r10.s001_output/n100.r10.s001.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s001_output/n100.r10.s001.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s001_output/n100.r10.s001.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s001_output/n100.r10.s001.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s001_output/n100.r10.s001.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s001_output/n100.r10.s001.reference.fas" "n100.r10.s001_output/n100.r10.s001.fq1.fastq" "n100.r10.s001_output/n100.r10.s001.fq2.fastq" | samtools view -bS - > "n100.r10.s001_output/n100.r10.s001.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s001_output/n100.r10.s001.untrimmed.sorted.bam" "n100.r10.s001_output/n100.r10.s001.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s001_output/n100.r10.s001.untrimmed.sorted.bam" -b "n100.r10.s001_output/n100.r10.s001.primers.bed" -p "n100.r10.s001_output/n100.r10.s001.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s001_output/n100.r10.s001.trimmed.sorted.bam" "n100.r10.s001_output/n100.r10.s001.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s001_output/n100.r10.s001.reference.fas" "n100.r10.s001_output/n100.r10.s001.trimmed.sorted.bam" > "n100.r10.s001_output/n100.r10.s001.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s001_output/n100.r10.s001.reference.fas" --call-indels "n100.r10.s001_output/n100.r10.s001.trimmed.sorted.bam" > "n100.r10.s001_output/n100.r10.s001.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s001_output/n100.r10.s001.trimmed.sorted.bam" > "n100.r10.s001_output/n100.r10.s001.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s001_output/n100.r10.s001.depth.txt" "n100.r10.s001_output/n100.r10.s001.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s001_output/n100.r10.s001.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s001_output/n100.r10.s001.reference.fas" | bcftools consensus -m "n100.r10.s001_output/n100.r10.s001.low_depth.tsv" tmp.vcf.gz > "n100.r10.s001_output/n100.r10.s001.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s001_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:33 scheduler task 6f235a83 (flow 3c6bdf5b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:33 scheduler task 6f235a83 (flow 3c6bdf5b): waiting for completion (try 0): started
2021/07/08 17:37:33  ->  n100.r10.s076.Main.out_file 3c6bdf5b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:33 n100.r10.s076.Main.out_file 3c6bdf5b n100/r10/n100.r10.s076.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e88e88c68dc9644b956034a7df5f7b07e3d4f309c63497a6bef228182a25f93a
	sha256:3c6bdf5badd79855b94974a42a6add04a6650c071be373b6beea717c6221357d
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6f235a83143524bd5e4baa74fbb83bb1acb8a5ba22f5a8fbd3d2d43065280715
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s076_output"
	    wget -O "n100.r10.s076_output/n100.r10.s076.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s076_output/n100.r10.s076.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s076_output/n100.r10.s076.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s076_output/n100.r10.s076.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s076_output/n100.r10.s076.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s076_output/n100.r10.s076.reference.fas" "n100.r10.s076_output/n100.r10.s076.fq1.fastq" "n100.r10.s076_output/n100.r10.s076.fq2.fastq" | samtools view -bS - > "n100.r10.s076_output/n100.r10.s076.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s076_output/n100.r10.s076.untrimmed.sorted.bam" "n100.r10.s076_output/n100.r10.s076.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s076_output/n100.r10.s076.untrimmed.sorted.bam" -b "n100.r10.s076_output/n100.r10.s076.primers.bed" -p "n100.r10.s076_output/n100.r10.s076.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s076_output/n100.r10.s076.trimmed.sorted.bam" "n100.r10.s076_output/n100.r10.s076.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s076_output/n100.r10.s076.reference.fas" "n100.r10.s076_output/n100.r10.s076.trimmed.sorted.bam" > "n100.r10.s076_output/n100.r10.s076.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s076_output/n100.r10.s076.reference.fas" --call-indels "n100.r10.s076_output/n100.r10.s076.trimmed.sorted.bam" > "n100.r10.s076_output/n100.r10.s076.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s076_output/n100.r10.s076.trimmed.sorted.bam" > "n100.r10.s076_output/n100.r10.s076.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s076_output/n100.r10.s076.depth.txt" "n100.r10.s076_output/n100.r10.s076.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s076_output/n100.r10.s076.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s076_output/n100.r10.s076.reference.fas" | bcftools consensus -m "n100.r10.s076_output/n100.r10.s076.low_depth.tsv" tmp.vcf.gz > "n100.r10.s076_output/n100.r10.s076.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s076_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:33 scheduler task 9b005cb6 (flow 4e0c766c): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:33 scheduler task 9b005cb6 (flow 4e0c766c): waiting for completion (try 0): started
2021/07/08 17:37:33  ->  n100.r10.s097.Main.out_file 4e0c766c exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:33 n100.r10.s097.Main.out_file 4e0c766c n100/r10/n100.r10.s097.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:79341fc67f80530eae66c0d7e21f30eba64072046fe8ad98c2f4997f93584c98
	sha256:4e0c766c5612c2933567b6b04a7acbdab963365b6dde04c5449ecd4e6d776fa3
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9b005cb67ed5b5360882037e2bc098c34824731c1c8606c8e8181fccd33ad5c0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s097_output"
	    wget -O "n100.r10.s097_output/n100.r10.s097.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s097_output/n100.r10.s097.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s097_output/n100.r10.s097.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s097_output/n100.r10.s097.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s097_output/n100.r10.s097.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s097_output/n100.r10.s097.reference.fas" "n100.r10.s097_output/n100.r10.s097.fq1.fastq" "n100.r10.s097_output/n100.r10.s097.fq2.fastq" | samtools view -bS - > "n100.r10.s097_output/n100.r10.s097.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s097_output/n100.r10.s097.untrimmed.sorted.bam" "n100.r10.s097_output/n100.r10.s097.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s097_output/n100.r10.s097.untrimmed.sorted.bam" -b "n100.r10.s097_output/n100.r10.s097.primers.bed" -p "n100.r10.s097_output/n100.r10.s097.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s097_output/n100.r10.s097.trimmed.sorted.bam" "n100.r10.s097_output/n100.r10.s097.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s097_output/n100.r10.s097.reference.fas" "n100.r10.s097_output/n100.r10.s097.trimmed.sorted.bam" > "n100.r10.s097_output/n100.r10.s097.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s097_output/n100.r10.s097.reference.fas" --call-indels "n100.r10.s097_output/n100.r10.s097.trimmed.sorted.bam" > "n100.r10.s097_output/n100.r10.s097.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s097_output/n100.r10.s097.trimmed.sorted.bam" > "n100.r10.s097_output/n100.r10.s097.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s097_output/n100.r10.s097.depth.txt" "n100.r10.s097_output/n100.r10.s097.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s097_output/n100.r10.s097.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s097_output/n100.r10.s097.reference.fas" | bcftools consensus -m "n100.r10.s097_output/n100.r10.s097.low_depth.tsv" tmp.vcf.gz > "n100.r10.s097_output/n100.r10.s097.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s097_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:33 scheduler task 0de34bc3 (flow d01db40b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:33 scheduler task 0de34bc3 (flow d01db40b): waiting for completion (try 0): started
2021/07/08 17:37:33  ->  n100.r10.s038.Main.out_file d01db40b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:33 n100.r10.s038.Main.out_file d01db40b n100/r10/n100.r10.s038.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e8f8ddce18987e78659e397adbe8c7d3087f4cf2b58068bafd40ebe0d2cb5875
	sha256:d01db40ba1ba618f8baa1dff2fea28a2bac964a55927630ccbe4de8f80c3576a
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0de34bc3337fdb9c4f7e9e89c1b68d849422dbebba36e496bfbd261d5fa11e6c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s038_output"
	    wget -O "n100.r10.s038_output/n100.r10.s038.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s038_output/n100.r10.s038.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s038_output/n100.r10.s038.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s038_output/n100.r10.s038.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s038_output/n100.r10.s038.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s038_output/n100.r10.s038.reference.fas" "n100.r10.s038_output/n100.r10.s038.fq1.fastq" "n100.r10.s038_output/n100.r10.s038.fq2.fastq" | samtools view -bS - > "n100.r10.s038_output/n100.r10.s038.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s038_output/n100.r10.s038.untrimmed.sorted.bam" "n100.r10.s038_output/n100.r10.s038.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s038_output/n100.r10.s038.untrimmed.sorted.bam" -b "n100.r10.s038_output/n100.r10.s038.primers.bed" -p "n100.r10.s038_output/n100.r10.s038.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s038_output/n100.r10.s038.trimmed.sorted.bam" "n100.r10.s038_output/n100.r10.s038.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s038_output/n100.r10.s038.reference.fas" "n100.r10.s038_output/n100.r10.s038.trimmed.sorted.bam" > "n100.r10.s038_output/n100.r10.s038.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s038_output/n100.r10.s038.reference.fas" --call-indels "n100.r10.s038_output/n100.r10.s038.trimmed.sorted.bam" > "n100.r10.s038_output/n100.r10.s038.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s038_output/n100.r10.s038.trimmed.sorted.bam" > "n100.r10.s038_output/n100.r10.s038.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s038_output/n100.r10.s038.depth.txt" "n100.r10.s038_output/n100.r10.s038.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s038_output/n100.r10.s038.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s038_output/n100.r10.s038.reference.fas" | bcftools consensus -m "n100.r10.s038_output/n100.r10.s038.low_depth.tsv" tmp.vcf.gz > "n100.r10.s038_output/n100.r10.s038.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s038_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:33 scheduler task 5bc25bd3 (flow 8edca96d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:33 scheduler task 5bc25bd3 (flow 8edca96d): waiting for completion (try 0): started
2021/07/08 17:37:33  ->  n100.r10.s081.Main.out_file 8edca96d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:33 n100.r10.s081.Main.out_file 8edca96d n100/r10/n100.r10.s081.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fdd40d5764dbc11fa3c7fc55634b23bfdcb7a35aa4a59284bc548aedb2860b01
	sha256:8edca96d1655620a59b362f3160e94265c44934f9123f7b4e6bec748b8518ce5
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5bc25bd383489a5063ad39329dba7d5f2d5798dcf8bc1b54f2a8a3fb646b469b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s081_output"
	    wget -O "n100.r10.s081_output/n100.r10.s081.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s081_output/n100.r10.s081.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s081_output/n100.r10.s081.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s081_output/n100.r10.s081.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s081_output/n100.r10.s081.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s081_output/n100.r10.s081.reference.fas" "n100.r10.s081_output/n100.r10.s081.fq1.fastq" "n100.r10.s081_output/n100.r10.s081.fq2.fastq" | samtools view -bS - > "n100.r10.s081_output/n100.r10.s081.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s081_output/n100.r10.s081.untrimmed.sorted.bam" "n100.r10.s081_output/n100.r10.s081.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s081_output/n100.r10.s081.untrimmed.sorted.bam" -b "n100.r10.s081_output/n100.r10.s081.primers.bed" -p "n100.r10.s081_output/n100.r10.s081.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s081_output/n100.r10.s081.trimmed.sorted.bam" "n100.r10.s081_output/n100.r10.s081.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s081_output/n100.r10.s081.reference.fas" "n100.r10.s081_output/n100.r10.s081.trimmed.sorted.bam" > "n100.r10.s081_output/n100.r10.s081.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s081_output/n100.r10.s081.reference.fas" --call-indels "n100.r10.s081_output/n100.r10.s081.trimmed.sorted.bam" > "n100.r10.s081_output/n100.r10.s081.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s081_output/n100.r10.s081.trimmed.sorted.bam" > "n100.r10.s081_output/n100.r10.s081.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s081_output/n100.r10.s081.depth.txt" "n100.r10.s081_output/n100.r10.s081.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s081_output/n100.r10.s081.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s081_output/n100.r10.s081.reference.fas" | bcftools consensus -m "n100.r10.s081_output/n100.r10.s081.low_depth.tsv" tmp.vcf.gz > "n100.r10.s081_output/n100.r10.s081.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s081_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:33 scheduler task 0df65054 (flow 91cbe899): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:34 scheduler task 0df65054 (flow 91cbe899): waiting for completion (try 0): started
2021/07/08 17:37:34  ->  n100.r10.s035.Main.out_file 91cbe899 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:34 n100.r10.s035.Main.out_file 91cbe899 n100/r10/n100.r10.s035.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5ed11b2f11233fdaba419133ba2a9ef5794e687e0459c3d8b7ee19030ac2890c
	sha256:91cbe8993dda53cde0f444d9d5d4cf99cda47c9d006c4aa5fae817d3084dcc5c
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0df650545e83ef82b449c20776ca2a3c754bbac66518b389c8c463b80650de9e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s035_output"
	    wget -O "n100.r10.s035_output/n100.r10.s035.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s035_output/n100.r10.s035.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s035_output/n100.r10.s035.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s035_output/n100.r10.s035.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s035_output/n100.r10.s035.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s035_output/n100.r10.s035.reference.fas" "n100.r10.s035_output/n100.r10.s035.fq1.fastq" "n100.r10.s035_output/n100.r10.s035.fq2.fastq" | samtools view -bS - > "n100.r10.s035_output/n100.r10.s035.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s035_output/n100.r10.s035.untrimmed.sorted.bam" "n100.r10.s035_output/n100.r10.s035.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s035_output/n100.r10.s035.untrimmed.sorted.bam" -b "n100.r10.s035_output/n100.r10.s035.primers.bed" -p "n100.r10.s035_output/n100.r10.s035.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s035_output/n100.r10.s035.trimmed.sorted.bam" "n100.r10.s035_output/n100.r10.s035.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s035_output/n100.r10.s035.reference.fas" "n100.r10.s035_output/n100.r10.s035.trimmed.sorted.bam" > "n100.r10.s035_output/n100.r10.s035.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s035_output/n100.r10.s035.reference.fas" --call-indels "n100.r10.s035_output/n100.r10.s035.trimmed.sorted.bam" > "n100.r10.s035_output/n100.r10.s035.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s035_output/n100.r10.s035.trimmed.sorted.bam" > "n100.r10.s035_output/n100.r10.s035.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s035_output/n100.r10.s035.depth.txt" "n100.r10.s035_output/n100.r10.s035.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s035_output/n100.r10.s035.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s035_output/n100.r10.s035.reference.fas" | bcftools consensus -m "n100.r10.s035_output/n100.r10.s035.low_depth.tsv" tmp.vcf.gz > "n100.r10.s035_output/n100.r10.s035.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s035_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:34 scheduler task 49b52cb8 (flow debb172b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:34 scheduler task 49b52cb8 (flow debb172b): waiting for completion (try 0): started
2021/07/08 17:37:34  ->  n100.r10.s005.Main.out_file debb172b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:34 n100.r10.s005.Main.out_file debb172b n100/r10/n100.r10.s005.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f402680ddc0a242433ddec254ef423d465d0459a6753354f35409c503ca690e7
	sha256:debb172b8339e96aa5205a9a0f3c594a3205f018dc2d62349e655a341a4e8acf
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/49b52cb83a7f71a74a195a24d74056b56c2e47006ab50acf9abcc2087570ee7a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s005_output"
	    wget -O "n100.r10.s005_output/n100.r10.s005.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s005_output/n100.r10.s005.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s005_output/n100.r10.s005.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s005_output/n100.r10.s005.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s005_output/n100.r10.s005.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s005_output/n100.r10.s005.reference.fas" "n100.r10.s005_output/n100.r10.s005.fq1.fastq" "n100.r10.s005_output/n100.r10.s005.fq2.fastq" | samtools view -bS - > "n100.r10.s005_output/n100.r10.s005.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s005_output/n100.r10.s005.untrimmed.sorted.bam" "n100.r10.s005_output/n100.r10.s005.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s005_output/n100.r10.s005.untrimmed.sorted.bam" -b "n100.r10.s005_output/n100.r10.s005.primers.bed" -p "n100.r10.s005_output/n100.r10.s005.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s005_output/n100.r10.s005.trimmed.sorted.bam" "n100.r10.s005_output/n100.r10.s005.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s005_output/n100.r10.s005.reference.fas" "n100.r10.s005_output/n100.r10.s005.trimmed.sorted.bam" > "n100.r10.s005_output/n100.r10.s005.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s005_output/n100.r10.s005.reference.fas" --call-indels "n100.r10.s005_output/n100.r10.s005.trimmed.sorted.bam" > "n100.r10.s005_output/n100.r10.s005.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s005_output/n100.r10.s005.trimmed.sorted.bam" > "n100.r10.s005_output/n100.r10.s005.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s005_output/n100.r10.s005.depth.txt" "n100.r10.s005_output/n100.r10.s005.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s005_output/n100.r10.s005.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s005_output/n100.r10.s005.reference.fas" | bcftools consensus -m "n100.r10.s005_output/n100.r10.s005.low_depth.tsv" tmp.vcf.gz > "n100.r10.s005_output/n100.r10.s005.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s005_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:34 scheduler task a510cb24 (flow 1bfcc9a2): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:34 scheduler task a510cb24 (flow 1bfcc9a2): waiting for completion (try 0): started
2021/07/08 17:37:34  ->  n100.r10.s047.Main.out_file 1bfcc9a2 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:34 n100.r10.s047.Main.out_file 1bfcc9a2 n100/r10/n100.r10.s047.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:466e109e5ae189aa84a69568bcf18f7344049c0bdbd9c235f0c42a59a04fffa1
	sha256:1bfcc9a2de43a162207fa306ba9f3fa11fbab8404ecd57df81b7058964cdd7fb
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a510cb24316b90b5726a561f0a4d4b5fc659de8455dacd4e577de767b494490b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s047_output"
	    wget -O "n100.r10.s047_output/n100.r10.s047.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s047_output/n100.r10.s047.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s047_output/n100.r10.s047.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s047_output/n100.r10.s047.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s047_output/n100.r10.s047.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s047_output/n100.r10.s047.reference.fas" "n100.r10.s047_output/n100.r10.s047.fq1.fastq" "n100.r10.s047_output/n100.r10.s047.fq2.fastq" | samtools view -bS - > "n100.r10.s047_output/n100.r10.s047.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s047_output/n100.r10.s047.untrimmed.sorted.bam" "n100.r10.s047_output/n100.r10.s047.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s047_output/n100.r10.s047.untrimmed.sorted.bam" -b "n100.r10.s047_output/n100.r10.s047.primers.bed" -p "n100.r10.s047_output/n100.r10.s047.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s047_output/n100.r10.s047.trimmed.sorted.bam" "n100.r10.s047_output/n100.r10.s047.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s047_output/n100.r10.s047.reference.fas" "n100.r10.s047_output/n100.r10.s047.trimmed.sorted.bam" > "n100.r10.s047_output/n100.r10.s047.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s047_output/n100.r10.s047.reference.fas" --call-indels "n100.r10.s047_output/n100.r10.s047.trimmed.sorted.bam" > "n100.r10.s047_output/n100.r10.s047.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s047_output/n100.r10.s047.trimmed.sorted.bam" > "n100.r10.s047_output/n100.r10.s047.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s047_output/n100.r10.s047.depth.txt" "n100.r10.s047_output/n100.r10.s047.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s047_output/n100.r10.s047.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s047_output/n100.r10.s047.reference.fas" | bcftools consensus -m "n100.r10.s047_output/n100.r10.s047.low_depth.tsv" tmp.vcf.gz > "n100.r10.s047_output/n100.r10.s047.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s047_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:34 scheduler task 9cd8433e (flow 8ff82b53): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:34 scheduler task 9cd8433e (flow 8ff82b53): waiting for completion (try 0): started
2021/07/08 17:37:34  ->  n100.r10.s067.Main.out_file 8ff82b53 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:34 n100.r10.s067.Main.out_file 8ff82b53 n100/r10/n100.r10.s067.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8c279e96331a669ee3b7bbcf4a06613b92f5a039802cdf67fca5b93411c47a04
	sha256:8ff82b5341a3e817c0ef79613fd3db37dadc798452dd2df54064882cc1a55a3b
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9cd8433e870903d354ca9362a779d2f797baa2a26d619c6d02d5a9420f16a64a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s067_output"
	    wget -O "n100.r10.s067_output/n100.r10.s067.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s067_output/n100.r10.s067.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s067_output/n100.r10.s067.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s067_output/n100.r10.s067.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s067_output/n100.r10.s067.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s067_output/n100.r10.s067.reference.fas" "n100.r10.s067_output/n100.r10.s067.fq1.fastq" "n100.r10.s067_output/n100.r10.s067.fq2.fastq" | samtools view -bS - > "n100.r10.s067_output/n100.r10.s067.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s067_output/n100.r10.s067.untrimmed.sorted.bam" "n100.r10.s067_output/n100.r10.s067.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s067_output/n100.r10.s067.untrimmed.sorted.bam" -b "n100.r10.s067_output/n100.r10.s067.primers.bed" -p "n100.r10.s067_output/n100.r10.s067.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s067_output/n100.r10.s067.trimmed.sorted.bam" "n100.r10.s067_output/n100.r10.s067.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s067_output/n100.r10.s067.reference.fas" "n100.r10.s067_output/n100.r10.s067.trimmed.sorted.bam" > "n100.r10.s067_output/n100.r10.s067.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s067_output/n100.r10.s067.reference.fas" --call-indels "n100.r10.s067_output/n100.r10.s067.trimmed.sorted.bam" > "n100.r10.s067_output/n100.r10.s067.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s067_output/n100.r10.s067.trimmed.sorted.bam" > "n100.r10.s067_output/n100.r10.s067.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s067_output/n100.r10.s067.depth.txt" "n100.r10.s067_output/n100.r10.s067.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s067_output/n100.r10.s067.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s067_output/n100.r10.s067.reference.fas" | bcftools consensus -m "n100.r10.s067_output/n100.r10.s067.low_depth.tsv" tmp.vcf.gz > "n100.r10.s067_output/n100.r10.s067.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s067_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:34 scheduler task 207ede7a (flow 23b67a6f): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:34 scheduler task 207ede7a (flow 23b67a6f): waiting for completion (try 0): started
2021/07/08 17:37:34  ->  n100.r10.s082.Main.out_file 23b67a6f exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:34 n100.r10.s082.Main.out_file 23b67a6f n100/r10/n100.r10.s082.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:972f42d0942b69a75dff4a0d43346ab65ffa6337ee415b55ed8219ebf154cbd9
	sha256:23b67a6f10e7b93c9543d95c44df6f17f183b7b71d32842bbefd31b9638bbd30
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/207ede7a8ab3c35143a94c7e2f7426e2fd5d2dc1216b50cf96e90886975a846a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s082_output"
	    wget -O "n100.r10.s082_output/n100.r10.s082.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s082_output/n100.r10.s082.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s082_output/n100.r10.s082.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s082_output/n100.r10.s082.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s082_output/n100.r10.s082.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s082_output/n100.r10.s082.reference.fas" "n100.r10.s082_output/n100.r10.s082.fq1.fastq" "n100.r10.s082_output/n100.r10.s082.fq2.fastq" | samtools view -bS - > "n100.r10.s082_output/n100.r10.s082.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s082_output/n100.r10.s082.untrimmed.sorted.bam" "n100.r10.s082_output/n100.r10.s082.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s082_output/n100.r10.s082.untrimmed.sorted.bam" -b "n100.r10.s082_output/n100.r10.s082.primers.bed" -p "n100.r10.s082_output/n100.r10.s082.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s082_output/n100.r10.s082.trimmed.sorted.bam" "n100.r10.s082_output/n100.r10.s082.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s082_output/n100.r10.s082.reference.fas" "n100.r10.s082_output/n100.r10.s082.trimmed.sorted.bam" > "n100.r10.s082_output/n100.r10.s082.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s082_output/n100.r10.s082.reference.fas" --call-indels "n100.r10.s082_output/n100.r10.s082.trimmed.sorted.bam" > "n100.r10.s082_output/n100.r10.s082.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s082_output/n100.r10.s082.trimmed.sorted.bam" > "n100.r10.s082_output/n100.r10.s082.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s082_output/n100.r10.s082.depth.txt" "n100.r10.s082_output/n100.r10.s082.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s082_output/n100.r10.s082.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s082_output/n100.r10.s082.reference.fas" | bcftools consensus -m "n100.r10.s082_output/n100.r10.s082.low_depth.tsv" tmp.vcf.gz > "n100.r10.s082_output/n100.r10.s082.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s082_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:34 scheduler task f44a16a1 (flow d1275b24): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:34 scheduler task f44a16a1 (flow d1275b24): waiting for completion (try 0): started
2021/07/08 17:37:34  ->  n100.r10.s095.Main.out_file d1275b24 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:34 n100.r10.s095.Main.out_file d1275b24 n100/r10/n100.r10.s095.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:03f6f9d8c415433ab8236d483420b99d579e4137132c5eeedc6356c2cce0a433
	sha256:d1275b24b495eb56efb8adae84959ff4475977ae1040d6d3ac7e0776c3fd5295
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f44a16a1b2f862441d380ca7646240843e6745642a78c63596ab631297ea7efe
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s095_output"
	    wget -O "n100.r10.s095_output/n100.r10.s095.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s095_output/n100.r10.s095.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s095_output/n100.r10.s095.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s095_output/n100.r10.s095.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s095_output/n100.r10.s095.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s095_output/n100.r10.s095.reference.fas" "n100.r10.s095_output/n100.r10.s095.fq1.fastq" "n100.r10.s095_output/n100.r10.s095.fq2.fastq" | samtools view -bS - > "n100.r10.s095_output/n100.r10.s095.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s095_output/n100.r10.s095.untrimmed.sorted.bam" "n100.r10.s095_output/n100.r10.s095.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s095_output/n100.r10.s095.untrimmed.sorted.bam" -b "n100.r10.s095_output/n100.r10.s095.primers.bed" -p "n100.r10.s095_output/n100.r10.s095.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s095_output/n100.r10.s095.trimmed.sorted.bam" "n100.r10.s095_output/n100.r10.s095.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s095_output/n100.r10.s095.reference.fas" "n100.r10.s095_output/n100.r10.s095.trimmed.sorted.bam" > "n100.r10.s095_output/n100.r10.s095.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s095_output/n100.r10.s095.reference.fas" --call-indels "n100.r10.s095_output/n100.r10.s095.trimmed.sorted.bam" > "n100.r10.s095_output/n100.r10.s095.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s095_output/n100.r10.s095.trimmed.sorted.bam" > "n100.r10.s095_output/n100.r10.s095.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s095_output/n100.r10.s095.depth.txt" "n100.r10.s095_output/n100.r10.s095.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s095_output/n100.r10.s095.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s095_output/n100.r10.s095.reference.fas" | bcftools consensus -m "n100.r10.s095_output/n100.r10.s095.low_depth.tsv" tmp.vcf.gz > "n100.r10.s095_output/n100.r10.s095.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s095_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:35 scheduler task 49c1b19d (flow 31d04bff): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:35 scheduler task 49c1b19d (flow 31d04bff): waiting for completion (try 0): started
2021/07/08 17:37:35  ->  n100.r10.s088.Main.out_file 31d04bff exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:35 n100.r10.s088.Main.out_file 31d04bff n100/r10/n100.r10.s088.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0aa2bb81cb003988891d84b968be5ea01b1bf8016359e01c84838ed8ac61d315
	sha256:31d04bff2775914d612ce96ce9539fc6be525eca6e9191354b714c4a0c8003a4
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/49c1b19dd4072efa2dbb0e9a1a4587f3e5d09fc003bb5d742232b181199910b2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s088_output"
	    wget -O "n100.r10.s088_output/n100.r10.s088.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s088_output/n100.r10.s088.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s088_output/n100.r10.s088.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s088_output/n100.r10.s088.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s088_output/n100.r10.s088.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s088_output/n100.r10.s088.reference.fas" "n100.r10.s088_output/n100.r10.s088.fq1.fastq" "n100.r10.s088_output/n100.r10.s088.fq2.fastq" | samtools view -bS - > "n100.r10.s088_output/n100.r10.s088.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s088_output/n100.r10.s088.untrimmed.sorted.bam" "n100.r10.s088_output/n100.r10.s088.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s088_output/n100.r10.s088.untrimmed.sorted.bam" -b "n100.r10.s088_output/n100.r10.s088.primers.bed" -p "n100.r10.s088_output/n100.r10.s088.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s088_output/n100.r10.s088.trimmed.sorted.bam" "n100.r10.s088_output/n100.r10.s088.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s088_output/n100.r10.s088.reference.fas" "n100.r10.s088_output/n100.r10.s088.trimmed.sorted.bam" > "n100.r10.s088_output/n100.r10.s088.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s088_output/n100.r10.s088.reference.fas" --call-indels "n100.r10.s088_output/n100.r10.s088.trimmed.sorted.bam" > "n100.r10.s088_output/n100.r10.s088.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s088_output/n100.r10.s088.trimmed.sorted.bam" > "n100.r10.s088_output/n100.r10.s088.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s088_output/n100.r10.s088.depth.txt" "n100.r10.s088_output/n100.r10.s088.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s088_output/n100.r10.s088.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s088_output/n100.r10.s088.reference.fas" | bcftools consensus -m "n100.r10.s088_output/n100.r10.s088.low_depth.tsv" tmp.vcf.gz > "n100.r10.s088_output/n100.r10.s088.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s088_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:35 scheduler task 62273247 (flow 40aecf6e): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:35 scheduler task 62273247 (flow 40aecf6e): waiting for completion (try 0): started
2021/07/08 17:37:35  ->  n100.r10.s058.Main.out_file 40aecf6e exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:35 n100.r10.s058.Main.out_file 40aecf6e n100/r10/n100.r10.s058.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f7ac412614695b0b9de53bf766040486ee6d81eebb4b36fe88de03385028ed39
	sha256:40aecf6e7cee2793dbceff2395339f249132615e4747f409ae9a8b7ba1d94449
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/62273247403c82dbd04abfb1842539318cd5471629d29bcd65c869c96241ed2d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s058_output"
	    wget -O "n100.r10.s058_output/n100.r10.s058.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s058_output/n100.r10.s058.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s058_output/n100.r10.s058.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s058_output/n100.r10.s058.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s058_output/n100.r10.s058.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s058_output/n100.r10.s058.reference.fas" "n100.r10.s058_output/n100.r10.s058.fq1.fastq" "n100.r10.s058_output/n100.r10.s058.fq2.fastq" | samtools view -bS - > "n100.r10.s058_output/n100.r10.s058.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s058_output/n100.r10.s058.untrimmed.sorted.bam" "n100.r10.s058_output/n100.r10.s058.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s058_output/n100.r10.s058.untrimmed.sorted.bam" -b "n100.r10.s058_output/n100.r10.s058.primers.bed" -p "n100.r10.s058_output/n100.r10.s058.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s058_output/n100.r10.s058.trimmed.sorted.bam" "n100.r10.s058_output/n100.r10.s058.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s058_output/n100.r10.s058.reference.fas" "n100.r10.s058_output/n100.r10.s058.trimmed.sorted.bam" > "n100.r10.s058_output/n100.r10.s058.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s058_output/n100.r10.s058.reference.fas" --call-indels "n100.r10.s058_output/n100.r10.s058.trimmed.sorted.bam" > "n100.r10.s058_output/n100.r10.s058.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s058_output/n100.r10.s058.trimmed.sorted.bam" > "n100.r10.s058_output/n100.r10.s058.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s058_output/n100.r10.s058.depth.txt" "n100.r10.s058_output/n100.r10.s058.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s058_output/n100.r10.s058.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s058_output/n100.r10.s058.reference.fas" | bcftools consensus -m "n100.r10.s058_output/n100.r10.s058.low_depth.tsv" tmp.vcf.gz > "n100.r10.s058_output/n100.r10.s058.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s058_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:35 scheduler task 77092a02 (flow c50dce1c): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:35 scheduler task 77092a02 (flow c50dce1c): waiting for completion (try 0): started
2021/07/08 17:37:35  ->  n100.r10.s033.Main.out_file c50dce1c exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:35 n100.r10.s033.Main.out_file c50dce1c n100/r10/n100.r10.s033.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:604c5e1aaa61c9b8461260b32d782e8f1ddbf1f522bfc99a342319c9bcba112a
	sha256:c50dce1c38b7dcf5ce0e7b0c3e199d1589865a3c4fe4549bf741c5bbe4fd8092
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/77092a023a08d3c8e30785bc105d4f50a8b960842374863dd35eecdff4e12ce5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s033_output"
	    wget -O "n100.r10.s033_output/n100.r10.s033.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s033_output/n100.r10.s033.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s033_output/n100.r10.s033.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s033_output/n100.r10.s033.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s033_output/n100.r10.s033.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s033_output/n100.r10.s033.reference.fas" "n100.r10.s033_output/n100.r10.s033.fq1.fastq" "n100.r10.s033_output/n100.r10.s033.fq2.fastq" | samtools view -bS - > "n100.r10.s033_output/n100.r10.s033.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s033_output/n100.r10.s033.untrimmed.sorted.bam" "n100.r10.s033_output/n100.r10.s033.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s033_output/n100.r10.s033.untrimmed.sorted.bam" -b "n100.r10.s033_output/n100.r10.s033.primers.bed" -p "n100.r10.s033_output/n100.r10.s033.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s033_output/n100.r10.s033.trimmed.sorted.bam" "n100.r10.s033_output/n100.r10.s033.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s033_output/n100.r10.s033.reference.fas" "n100.r10.s033_output/n100.r10.s033.trimmed.sorted.bam" > "n100.r10.s033_output/n100.r10.s033.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s033_output/n100.r10.s033.reference.fas" --call-indels "n100.r10.s033_output/n100.r10.s033.trimmed.sorted.bam" > "n100.r10.s033_output/n100.r10.s033.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s033_output/n100.r10.s033.trimmed.sorted.bam" > "n100.r10.s033_output/n100.r10.s033.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s033_output/n100.r10.s033.depth.txt" "n100.r10.s033_output/n100.r10.s033.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s033_output/n100.r10.s033.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s033_output/n100.r10.s033.reference.fas" | bcftools consensus -m "n100.r10.s033_output/n100.r10.s033.low_depth.tsv" tmp.vcf.gz > "n100.r10.s033_output/n100.r10.s033.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s033_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:35 scheduler task 3ee5fbc0 (flow c6d532f3): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:35 scheduler task 3ee5fbc0 (flow c6d532f3): waiting for completion (try 0): started
2021/07/08 17:37:35  ->  n100.r10.s032.Main.out_file c6d532f3 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:35 n100.r10.s032.Main.out_file c6d532f3 n100/r10/n100.r10.s032.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:52e9f5c52d7f9153dc1c696ad2654e935efaa5b7ec4beb93b0ce40dfd738553c
	sha256:c6d532f3536cfae5a1c8583d49d9ef40c16f137d20f95ffb33f5ebe42831a757
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3ee5fbc0a9faa918436d00494aa99d617f592f3f7f164ed8135ef968735d2c7c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s032_output"
	    wget -O "n100.r10.s032_output/n100.r10.s032.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s032_output/n100.r10.s032.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s032_output/n100.r10.s032.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s032_output/n100.r10.s032.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s032_output/n100.r10.s032.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s032_output/n100.r10.s032.reference.fas" "n100.r10.s032_output/n100.r10.s032.fq1.fastq" "n100.r10.s032_output/n100.r10.s032.fq2.fastq" | samtools view -bS - > "n100.r10.s032_output/n100.r10.s032.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s032_output/n100.r10.s032.untrimmed.sorted.bam" "n100.r10.s032_output/n100.r10.s032.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s032_output/n100.r10.s032.untrimmed.sorted.bam" -b "n100.r10.s032_output/n100.r10.s032.primers.bed" -p "n100.r10.s032_output/n100.r10.s032.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s032_output/n100.r10.s032.trimmed.sorted.bam" "n100.r10.s032_output/n100.r10.s032.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s032_output/n100.r10.s032.reference.fas" "n100.r10.s032_output/n100.r10.s032.trimmed.sorted.bam" > "n100.r10.s032_output/n100.r10.s032.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s032_output/n100.r10.s032.reference.fas" --call-indels "n100.r10.s032_output/n100.r10.s032.trimmed.sorted.bam" > "n100.r10.s032_output/n100.r10.s032.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s032_output/n100.r10.s032.trimmed.sorted.bam" > "n100.r10.s032_output/n100.r10.s032.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s032_output/n100.r10.s032.depth.txt" "n100.r10.s032_output/n100.r10.s032.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s032_output/n100.r10.s032.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s032_output/n100.r10.s032.reference.fas" | bcftools consensus -m "n100.r10.s032_output/n100.r10.s032.low_depth.tsv" tmp.vcf.gz > "n100.r10.s032_output/n100.r10.s032.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s032_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:35 scheduler task e8c8e808 (flow 5077aef2): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:35 scheduler task e8c8e808 (flow 5077aef2): waiting for completion (try 0): started
2021/07/08 17:37:35  ->  n100.r10.s025.Main.out_file 5077aef2 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:35 n100.r10.s025.Main.out_file 5077aef2 n100/r10/n100.r10.s025.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6d1d19826881b33355fa806b6b2eebd11696559afc3b1532d2f11a3bbc466058
	sha256:5077aef253d859f57e30b0f1dacf0834513fdfc7834c95cfa94c8e785532a9ea
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e8c8e80857ff7d82e3d447098d24c8015180431fd5512d7ccb1aac50122a939f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s025_output"
	    wget -O "n100.r10.s025_output/n100.r10.s025.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s025_output/n100.r10.s025.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s025_output/n100.r10.s025.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s025_output/n100.r10.s025.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s025_output/n100.r10.s025.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s025_output/n100.r10.s025.reference.fas" "n100.r10.s025_output/n100.r10.s025.fq1.fastq" "n100.r10.s025_output/n100.r10.s025.fq2.fastq" | samtools view -bS - > "n100.r10.s025_output/n100.r10.s025.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s025_output/n100.r10.s025.untrimmed.sorted.bam" "n100.r10.s025_output/n100.r10.s025.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s025_output/n100.r10.s025.untrimmed.sorted.bam" -b "n100.r10.s025_output/n100.r10.s025.primers.bed" -p "n100.r10.s025_output/n100.r10.s025.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s025_output/n100.r10.s025.trimmed.sorted.bam" "n100.r10.s025_output/n100.r10.s025.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s025_output/n100.r10.s025.reference.fas" "n100.r10.s025_output/n100.r10.s025.trimmed.sorted.bam" > "n100.r10.s025_output/n100.r10.s025.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s025_output/n100.r10.s025.reference.fas" --call-indels "n100.r10.s025_output/n100.r10.s025.trimmed.sorted.bam" > "n100.r10.s025_output/n100.r10.s025.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s025_output/n100.r10.s025.trimmed.sorted.bam" > "n100.r10.s025_output/n100.r10.s025.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s025_output/n100.r10.s025.depth.txt" "n100.r10.s025_output/n100.r10.s025.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s025_output/n100.r10.s025.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s025_output/n100.r10.s025.reference.fas" | bcftools consensus -m "n100.r10.s025_output/n100.r10.s025.low_depth.tsv" tmp.vcf.gz > "n100.r10.s025_output/n100.r10.s025.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s025_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:35 scheduler task 41e319db (flow 0f0a0edb): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:35 scheduler task 41e319db (flow 0f0a0edb): waiting for completion (try 0): started
2021/07/08 17:37:35  ->  n100.r10.s086.Main.out_file 0f0a0edb exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:35 n100.r10.s086.Main.out_file 0f0a0edb n100/r10/n100.r10.s086.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:df1f4595a9afd13b9c06ee6f701914c8f10b0f461b77cfff4f7ce61daf860262
	sha256:0f0a0edba156352a1ab3563141df6c393e0d80c0bec4d9c273cbd3aca4976b7b
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/41e319db1dfcf507f2b3d6043d127dd9c79ed9246199b951ed941bd21eb9c20a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s086_output"
	    wget -O "n100.r10.s086_output/n100.r10.s086.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s086_output/n100.r10.s086.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s086_output/n100.r10.s086.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s086_output/n100.r10.s086.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s086_output/n100.r10.s086.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s086_output/n100.r10.s086.reference.fas" "n100.r10.s086_output/n100.r10.s086.fq1.fastq" "n100.r10.s086_output/n100.r10.s086.fq2.fastq" | samtools view -bS - > "n100.r10.s086_output/n100.r10.s086.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s086_output/n100.r10.s086.untrimmed.sorted.bam" "n100.r10.s086_output/n100.r10.s086.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s086_output/n100.r10.s086.untrimmed.sorted.bam" -b "n100.r10.s086_output/n100.r10.s086.primers.bed" -p "n100.r10.s086_output/n100.r10.s086.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s086_output/n100.r10.s086.trimmed.sorted.bam" "n100.r10.s086_output/n100.r10.s086.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s086_output/n100.r10.s086.reference.fas" "n100.r10.s086_output/n100.r10.s086.trimmed.sorted.bam" > "n100.r10.s086_output/n100.r10.s086.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s086_output/n100.r10.s086.reference.fas" --call-indels "n100.r10.s086_output/n100.r10.s086.trimmed.sorted.bam" > "n100.r10.s086_output/n100.r10.s086.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s086_output/n100.r10.s086.trimmed.sorted.bam" > "n100.r10.s086_output/n100.r10.s086.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s086_output/n100.r10.s086.depth.txt" "n100.r10.s086_output/n100.r10.s086.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s086_output/n100.r10.s086.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s086_output/n100.r10.s086.reference.fas" | bcftools consensus -m "n100.r10.s086_output/n100.r10.s086.low_depth.tsv" tmp.vcf.gz > "n100.r10.s086_output/n100.r10.s086.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s086_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:36 scheduler task 6020e9b3 (flow 50fe0d18): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:36 scheduler task 6020e9b3 (flow 50fe0d18): waiting for completion (try 0): started
2021/07/08 17:37:36  ->  n100.r10.s094.Main.out_file 50fe0d18 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:36 n100.r10.s094.Main.out_file 50fe0d18 n100/r10/n100.r10.s094.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6cf72baaab7d5ec2930509458d7055b583979fdfb462dd1988b3797e691873b1
	sha256:50fe0d181863a5f781838c66a0f38f34b838db01a082498003fca980f4198fcf
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6020e9b3cf1d2bcb9c68b31bf9ad0acbf3ddec06870ab8835ca06444f6a987a8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s094_output"
	    wget -O "n100.r10.s094_output/n100.r10.s094.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s094_output/n100.r10.s094.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s094_output/n100.r10.s094.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s094_output/n100.r10.s094.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s094_output/n100.r10.s094.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s094_output/n100.r10.s094.reference.fas" "n100.r10.s094_output/n100.r10.s094.fq1.fastq" "n100.r10.s094_output/n100.r10.s094.fq2.fastq" | samtools view -bS - > "n100.r10.s094_output/n100.r10.s094.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s094_output/n100.r10.s094.untrimmed.sorted.bam" "n100.r10.s094_output/n100.r10.s094.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s094_output/n100.r10.s094.untrimmed.sorted.bam" -b "n100.r10.s094_output/n100.r10.s094.primers.bed" -p "n100.r10.s094_output/n100.r10.s094.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s094_output/n100.r10.s094.trimmed.sorted.bam" "n100.r10.s094_output/n100.r10.s094.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s094_output/n100.r10.s094.reference.fas" "n100.r10.s094_output/n100.r10.s094.trimmed.sorted.bam" > "n100.r10.s094_output/n100.r10.s094.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s094_output/n100.r10.s094.reference.fas" --call-indels "n100.r10.s094_output/n100.r10.s094.trimmed.sorted.bam" > "n100.r10.s094_output/n100.r10.s094.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s094_output/n100.r10.s094.trimmed.sorted.bam" > "n100.r10.s094_output/n100.r10.s094.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s094_output/n100.r10.s094.depth.txt" "n100.r10.s094_output/n100.r10.s094.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s094_output/n100.r10.s094.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s094_output/n100.r10.s094.reference.fas" | bcftools consensus -m "n100.r10.s094_output/n100.r10.s094.low_depth.tsv" tmp.vcf.gz > "n100.r10.s094_output/n100.r10.s094.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s094_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:36 scheduler task 10b9639e (flow c2c3e971): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:36 scheduler task 10b9639e (flow c2c3e971): waiting for completion (try 0): started
2021/07/08 17:37:36  ->  n100.r10.s040.Main.out_file c2c3e971 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:36 n100.r10.s040.Main.out_file c2c3e971 n100/r10/n100.r10.s040.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9442d3ba6d8923133cc0fd3f9f392c4269731a76190b3fd7fa3cb6eda1e62b0d
	sha256:c2c3e971f1bb7bd97d4ad8a95d003f6d9cf32226548e5962df3ec5582d1cd28b
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/10b9639e7f2345236c5f4714f6f51f3b0dae1ecbcda137e4a528792176f9ba40
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s040_output"
	    wget -O "n100.r10.s040_output/n100.r10.s040.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s040_output/n100.r10.s040.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s040_output/n100.r10.s040.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s040_output/n100.r10.s040.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s040_output/n100.r10.s040.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s040_output/n100.r10.s040.reference.fas" "n100.r10.s040_output/n100.r10.s040.fq1.fastq" "n100.r10.s040_output/n100.r10.s040.fq2.fastq" | samtools view -bS - > "n100.r10.s040_output/n100.r10.s040.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s040_output/n100.r10.s040.untrimmed.sorted.bam" "n100.r10.s040_output/n100.r10.s040.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s040_output/n100.r10.s040.untrimmed.sorted.bam" -b "n100.r10.s040_output/n100.r10.s040.primers.bed" -p "n100.r10.s040_output/n100.r10.s040.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s040_output/n100.r10.s040.trimmed.sorted.bam" "n100.r10.s040_output/n100.r10.s040.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s040_output/n100.r10.s040.reference.fas" "n100.r10.s040_output/n100.r10.s040.trimmed.sorted.bam" > "n100.r10.s040_output/n100.r10.s040.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s040_output/n100.r10.s040.reference.fas" --call-indels "n100.r10.s040_output/n100.r10.s040.trimmed.sorted.bam" > "n100.r10.s040_output/n100.r10.s040.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s040_output/n100.r10.s040.trimmed.sorted.bam" > "n100.r10.s040_output/n100.r10.s040.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s040_output/n100.r10.s040.depth.txt" "n100.r10.s040_output/n100.r10.s040.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s040_output/n100.r10.s040.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s040_output/n100.r10.s040.reference.fas" | bcftools consensus -m "n100.r10.s040_output/n100.r10.s040.low_depth.tsv" tmp.vcf.gz > "n100.r10.s040_output/n100.r10.s040.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s040_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:36 scheduler task a74afbde (flow 76734b91): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:36 scheduler task a74afbde (flow 76734b91): waiting for completion (try 0): started
2021/07/08 17:37:36  ->  n100.r10.s051.Main.out_file 76734b91 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:36 n100.r10.s051.Main.out_file 76734b91 n100/r10/n100.r10.s051.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:34702a046003975e83de6da69586629aaeb342827512632701f24156775bbbe4
	sha256:76734b910902514638c21f9096d8d1defeb014c76edd03e91ab2e10fbca31718
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a74afbdeaf149be1a9a581d03450aa1f7e07914bffae26339bc7e21d74ce6dd6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s051_output"
	    wget -O "n100.r10.s051_output/n100.r10.s051.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s051_output/n100.r10.s051.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s051_output/n100.r10.s051.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s051_output/n100.r10.s051.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s051_output/n100.r10.s051.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s051_output/n100.r10.s051.reference.fas" "n100.r10.s051_output/n100.r10.s051.fq1.fastq" "n100.r10.s051_output/n100.r10.s051.fq2.fastq" | samtools view -bS - > "n100.r10.s051_output/n100.r10.s051.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s051_output/n100.r10.s051.untrimmed.sorted.bam" "n100.r10.s051_output/n100.r10.s051.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s051_output/n100.r10.s051.untrimmed.sorted.bam" -b "n100.r10.s051_output/n100.r10.s051.primers.bed" -p "n100.r10.s051_output/n100.r10.s051.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s051_output/n100.r10.s051.trimmed.sorted.bam" "n100.r10.s051_output/n100.r10.s051.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s051_output/n100.r10.s051.reference.fas" "n100.r10.s051_output/n100.r10.s051.trimmed.sorted.bam" > "n100.r10.s051_output/n100.r10.s051.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s051_output/n100.r10.s051.reference.fas" --call-indels "n100.r10.s051_output/n100.r10.s051.trimmed.sorted.bam" > "n100.r10.s051_output/n100.r10.s051.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s051_output/n100.r10.s051.trimmed.sorted.bam" > "n100.r10.s051_output/n100.r10.s051.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s051_output/n100.r10.s051.depth.txt" "n100.r10.s051_output/n100.r10.s051.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s051_output/n100.r10.s051.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s051_output/n100.r10.s051.reference.fas" | bcftools consensus -m "n100.r10.s051_output/n100.r10.s051.low_depth.tsv" tmp.vcf.gz > "n100.r10.s051_output/n100.r10.s051.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s051_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:36 scheduler task d78f5d37 (flow 88a0cdd2): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:36 scheduler task d78f5d37 (flow 88a0cdd2): waiting for completion (try 0): started
2021/07/08 17:37:36  ->  n100.r10.s096.Main.out_file 88a0cdd2 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:36 n100.r10.s096.Main.out_file 88a0cdd2 n100/r10/n100.r10.s096.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:dcd1fa3cf6ad4463fcb2cfff6deee527a86622cd3202047582f86667f735f0b0
	sha256:88a0cdd2e61e19e5ea2f72ae56b8bdf1b39cb294e60a8f06a846dd28cd8ad5ab
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d78f5d37c6b75edc28c6268096df6cbc3faed62074b79c3b25385de4c5156cd0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s096_output"
	    wget -O "n100.r10.s096_output/n100.r10.s096.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s096_output/n100.r10.s096.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s096_output/n100.r10.s096.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s096_output/n100.r10.s096.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s096_output/n100.r10.s096.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s096_output/n100.r10.s096.reference.fas" "n100.r10.s096_output/n100.r10.s096.fq1.fastq" "n100.r10.s096_output/n100.r10.s096.fq2.fastq" | samtools view -bS - > "n100.r10.s096_output/n100.r10.s096.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s096_output/n100.r10.s096.untrimmed.sorted.bam" "n100.r10.s096_output/n100.r10.s096.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s096_output/n100.r10.s096.untrimmed.sorted.bam" -b "n100.r10.s096_output/n100.r10.s096.primers.bed" -p "n100.r10.s096_output/n100.r10.s096.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s096_output/n100.r10.s096.trimmed.sorted.bam" "n100.r10.s096_output/n100.r10.s096.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s096_output/n100.r10.s096.reference.fas" "n100.r10.s096_output/n100.r10.s096.trimmed.sorted.bam" > "n100.r10.s096_output/n100.r10.s096.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s096_output/n100.r10.s096.reference.fas" --call-indels "n100.r10.s096_output/n100.r10.s096.trimmed.sorted.bam" > "n100.r10.s096_output/n100.r10.s096.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s096_output/n100.r10.s096.trimmed.sorted.bam" > "n100.r10.s096_output/n100.r10.s096.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s096_output/n100.r10.s096.depth.txt" "n100.r10.s096_output/n100.r10.s096.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s096_output/n100.r10.s096.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s096_output/n100.r10.s096.reference.fas" | bcftools consensus -m "n100.r10.s096_output/n100.r10.s096.low_depth.tsv" tmp.vcf.gz > "n100.r10.s096_output/n100.r10.s096.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s096_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:36 scheduler task 5d04b067 (flow 522f4e66): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:36 scheduler task 5d04b067 (flow 522f4e66): waiting for completion (try 0): started
2021/07/08 17:37:36  ->  n100.r10.s036.Main.out_file 522f4e66 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:36 n100.r10.s036.Main.out_file 522f4e66 n100/r10/n100.r10.s036.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ae5525bebf79a803b2529e42f16c1ab18fe5b894f589ac432b83982b8ce78f5a
	sha256:522f4e66195fd1c9b950ad8cefe7aa5a942e7611656045a7d103ddc79c633ebe
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5d04b0674b1f38b14277ca096580cb5691d563effbeb6f4c8ebebbb1b4444790
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s036_output"
	    wget -O "n100.r10.s036_output/n100.r10.s036.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s036_output/n100.r10.s036.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s036_output/n100.r10.s036.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s036_output/n100.r10.s036.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s036_output/n100.r10.s036.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s036_output/n100.r10.s036.reference.fas" "n100.r10.s036_output/n100.r10.s036.fq1.fastq" "n100.r10.s036_output/n100.r10.s036.fq2.fastq" | samtools view -bS - > "n100.r10.s036_output/n100.r10.s036.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s036_output/n100.r10.s036.untrimmed.sorted.bam" "n100.r10.s036_output/n100.r10.s036.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s036_output/n100.r10.s036.untrimmed.sorted.bam" -b "n100.r10.s036_output/n100.r10.s036.primers.bed" -p "n100.r10.s036_output/n100.r10.s036.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s036_output/n100.r10.s036.trimmed.sorted.bam" "n100.r10.s036_output/n100.r10.s036.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s036_output/n100.r10.s036.reference.fas" "n100.r10.s036_output/n100.r10.s036.trimmed.sorted.bam" > "n100.r10.s036_output/n100.r10.s036.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s036_output/n100.r10.s036.reference.fas" --call-indels "n100.r10.s036_output/n100.r10.s036.trimmed.sorted.bam" > "n100.r10.s036_output/n100.r10.s036.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s036_output/n100.r10.s036.trimmed.sorted.bam" > "n100.r10.s036_output/n100.r10.s036.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s036_output/n100.r10.s036.depth.txt" "n100.r10.s036_output/n100.r10.s036.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s036_output/n100.r10.s036.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s036_output/n100.r10.s036.reference.fas" | bcftools consensus -m "n100.r10.s036_output/n100.r10.s036.low_depth.tsv" tmp.vcf.gz > "n100.r10.s036_output/n100.r10.s036.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s036_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:36 scheduler task b3e5b82e (flow e295ae85): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:36 scheduler task b3e5b82e (flow e295ae85): waiting for completion (try 0): started
2021/07/08 17:37:36  ->  n100.r10.s019.Main.out_file e295ae85 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:36 n100.r10.s019.Main.out_file e295ae85 n100/r10/n100.r10.s019.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:571f6c3887275ac9928509f4941145b0580afe72b1c7a3d84d0e7c346f0e8736
	sha256:e295ae85df7658316d68c5854ab3b2434ee9659dd57f5fae5fe8076740447fe5
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b3e5b82e314162eb1ef53381d67be0cf911c7a22cced55faf5b8c858ec8fbc54
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s019_output"
	    wget -O "n100.r10.s019_output/n100.r10.s019.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s019_output/n100.r10.s019.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s019_output/n100.r10.s019.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s019_output/n100.r10.s019.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s019_output/n100.r10.s019.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s019_output/n100.r10.s019.reference.fas" "n100.r10.s019_output/n100.r10.s019.fq1.fastq" "n100.r10.s019_output/n100.r10.s019.fq2.fastq" | samtools view -bS - > "n100.r10.s019_output/n100.r10.s019.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s019_output/n100.r10.s019.untrimmed.sorted.bam" "n100.r10.s019_output/n100.r10.s019.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s019_output/n100.r10.s019.untrimmed.sorted.bam" -b "n100.r10.s019_output/n100.r10.s019.primers.bed" -p "n100.r10.s019_output/n100.r10.s019.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s019_output/n100.r10.s019.trimmed.sorted.bam" "n100.r10.s019_output/n100.r10.s019.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s019_output/n100.r10.s019.reference.fas" "n100.r10.s019_output/n100.r10.s019.trimmed.sorted.bam" > "n100.r10.s019_output/n100.r10.s019.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s019_output/n100.r10.s019.reference.fas" --call-indels "n100.r10.s019_output/n100.r10.s019.trimmed.sorted.bam" > "n100.r10.s019_output/n100.r10.s019.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s019_output/n100.r10.s019.trimmed.sorted.bam" > "n100.r10.s019_output/n100.r10.s019.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s019_output/n100.r10.s019.depth.txt" "n100.r10.s019_output/n100.r10.s019.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s019_output/n100.r10.s019.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s019_output/n100.r10.s019.reference.fas" | bcftools consensus -m "n100.r10.s019_output/n100.r10.s019.low_depth.tsv" tmp.vcf.gz > "n100.r10.s019_output/n100.r10.s019.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s019_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:36 scheduler task 3d965a50 (flow 14c2b5b4): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:36 scheduler task 3d965a50 (flow 14c2b5b4): waiting for completion (try 0): started
2021/07/08 17:37:36  ->  n100.r10.s031.Main.out_file 14c2b5b4 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:36 n100.r10.s031.Main.out_file 14c2b5b4 n100/r10/n100.r10.s031.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:894136fa3ce1caa128e503f0fea392af1de228d5af8c1f37d6b0ce2348de0b37
	sha256:14c2b5b4ef39890a5c7b765250779118c989671d8e2a321f66af10df8579cbac
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3d965a50179d12bf03ecbf4a4202033b909d26e3a5a50e175e500f33c3e52524
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s031_output"
	    wget -O "n100.r10.s031_output/n100.r10.s031.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s031_output/n100.r10.s031.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s031_output/n100.r10.s031.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s031_output/n100.r10.s031.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s031_output/n100.r10.s031.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s031_output/n100.r10.s031.reference.fas" "n100.r10.s031_output/n100.r10.s031.fq1.fastq" "n100.r10.s031_output/n100.r10.s031.fq2.fastq" | samtools view -bS - > "n100.r10.s031_output/n100.r10.s031.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s031_output/n100.r10.s031.untrimmed.sorted.bam" "n100.r10.s031_output/n100.r10.s031.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s031_output/n100.r10.s031.untrimmed.sorted.bam" -b "n100.r10.s031_output/n100.r10.s031.primers.bed" -p "n100.r10.s031_output/n100.r10.s031.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s031_output/n100.r10.s031.trimmed.sorted.bam" "n100.r10.s031_output/n100.r10.s031.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s031_output/n100.r10.s031.reference.fas" "n100.r10.s031_output/n100.r10.s031.trimmed.sorted.bam" > "n100.r10.s031_output/n100.r10.s031.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s031_output/n100.r10.s031.reference.fas" --call-indels "n100.r10.s031_output/n100.r10.s031.trimmed.sorted.bam" > "n100.r10.s031_output/n100.r10.s031.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s031_output/n100.r10.s031.trimmed.sorted.bam" > "n100.r10.s031_output/n100.r10.s031.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s031_output/n100.r10.s031.depth.txt" "n100.r10.s031_output/n100.r10.s031.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s031_output/n100.r10.s031.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s031_output/n100.r10.s031.reference.fas" | bcftools consensus -m "n100.r10.s031_output/n100.r10.s031.low_depth.tsv" tmp.vcf.gz > "n100.r10.s031_output/n100.r10.s031.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s031_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:37 scheduler task eb87e42f (flow 399f20da): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:37 scheduler task eb87e42f (flow 399f20da): waiting for completion (try 0): started
2021/07/08 17:37:37  ->  n100.r10.s062.Main.out_file 399f20da exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:37 n100.r10.s062.Main.out_file 399f20da n100/r10/n100.r10.s062.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0402b5945e6cd314ac11fe9180db8b36fc0fe69c12657005b2e1f2fb42282ed6
	sha256:399f20da3cb7c4e2c2f68e5f57166c010d1c3abd4c6b624e310d750e264f1c4a
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/eb87e42f77f099ce07b4cbf2c44e85ba9d45e33311c486fabb43584142e5eabf
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s062_output"
	    wget -O "n100.r10.s062_output/n100.r10.s062.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s062_output/n100.r10.s062.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s062_output/n100.r10.s062.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s062_output/n100.r10.s062.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s062_output/n100.r10.s062.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s062_output/n100.r10.s062.reference.fas" "n100.r10.s062_output/n100.r10.s062.fq1.fastq" "n100.r10.s062_output/n100.r10.s062.fq2.fastq" | samtools view -bS - > "n100.r10.s062_output/n100.r10.s062.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s062_output/n100.r10.s062.untrimmed.sorted.bam" "n100.r10.s062_output/n100.r10.s062.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s062_output/n100.r10.s062.untrimmed.sorted.bam" -b "n100.r10.s062_output/n100.r10.s062.primers.bed" -p "n100.r10.s062_output/n100.r10.s062.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s062_output/n100.r10.s062.trimmed.sorted.bam" "n100.r10.s062_output/n100.r10.s062.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s062_output/n100.r10.s062.reference.fas" "n100.r10.s062_output/n100.r10.s062.trimmed.sorted.bam" > "n100.r10.s062_output/n100.r10.s062.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s062_output/n100.r10.s062.reference.fas" --call-indels "n100.r10.s062_output/n100.r10.s062.trimmed.sorted.bam" > "n100.r10.s062_output/n100.r10.s062.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s062_output/n100.r10.s062.trimmed.sorted.bam" > "n100.r10.s062_output/n100.r10.s062.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s062_output/n100.r10.s062.depth.txt" "n100.r10.s062_output/n100.r10.s062.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s062_output/n100.r10.s062.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s062_output/n100.r10.s062.reference.fas" | bcftools consensus -m "n100.r10.s062_output/n100.r10.s062.low_depth.tsv" tmp.vcf.gz > "n100.r10.s062_output/n100.r10.s062.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s062_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:37 scheduler task b00ef45e (flow 62acfe5d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:37 scheduler task b00ef45e (flow 62acfe5d): waiting for completion (try 0): started
2021/07/08 17:37:37  ->  n100.r10.s055.Main.out_file 62acfe5d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:37 n100.r10.s055.Main.out_file 62acfe5d n100/r10/n100.r10.s055.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b7d2a15cd90d3a423fc5ee7e0af6351c12d3f39cb34352da8b202731fa97f194
	sha256:62acfe5dc28897fefb7becee824e0665281bce2a2f09a7463d8edd0fa4c657be
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b00ef45eeb34f8227cc2ae8430c733f47bf2d2a6617eb4713a7999bbbe7f7126
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s055_output"
	    wget -O "n100.r10.s055_output/n100.r10.s055.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s055_output/n100.r10.s055.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s055_output/n100.r10.s055.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s055_output/n100.r10.s055.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s055_output/n100.r10.s055.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s055_output/n100.r10.s055.reference.fas" "n100.r10.s055_output/n100.r10.s055.fq1.fastq" "n100.r10.s055_output/n100.r10.s055.fq2.fastq" | samtools view -bS - > "n100.r10.s055_output/n100.r10.s055.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s055_output/n100.r10.s055.untrimmed.sorted.bam" "n100.r10.s055_output/n100.r10.s055.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s055_output/n100.r10.s055.untrimmed.sorted.bam" -b "n100.r10.s055_output/n100.r10.s055.primers.bed" -p "n100.r10.s055_output/n100.r10.s055.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s055_output/n100.r10.s055.trimmed.sorted.bam" "n100.r10.s055_output/n100.r10.s055.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s055_output/n100.r10.s055.reference.fas" "n100.r10.s055_output/n100.r10.s055.trimmed.sorted.bam" > "n100.r10.s055_output/n100.r10.s055.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s055_output/n100.r10.s055.reference.fas" --call-indels "n100.r10.s055_output/n100.r10.s055.trimmed.sorted.bam" > "n100.r10.s055_output/n100.r10.s055.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s055_output/n100.r10.s055.trimmed.sorted.bam" > "n100.r10.s055_output/n100.r10.s055.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s055_output/n100.r10.s055.depth.txt" "n100.r10.s055_output/n100.r10.s055.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s055_output/n100.r10.s055.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s055_output/n100.r10.s055.reference.fas" | bcftools consensus -m "n100.r10.s055_output/n100.r10.s055.low_depth.tsv" tmp.vcf.gz > "n100.r10.s055_output/n100.r10.s055.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s055_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:37 scheduler task 3c2c1b67 (flow 9bbddc57): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:37 scheduler task 3c2c1b67 (flow 9bbddc57): waiting for completion (try 0): started
2021/07/08 17:37:37  ->  n100.r10.s042.Main.out_file 9bbddc57 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:37 n100.r10.s042.Main.out_file 9bbddc57 n100/r10/n100.r10.s042.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:92dec8bab667cf9e730f07ba4101645c4072edc9aae4bad0c192bc674f4bb1cc
	sha256:9bbddc57e55f5b61be2e37a51de65412133f7caf91fe098bd7ba5ad6854dfae3
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3c2c1b672a9e8f567ecac85937ba56a2d5299c9c2413777eb374c116fc5d527b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s042_output"
	    wget -O "n100.r10.s042_output/n100.r10.s042.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s042_output/n100.r10.s042.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s042_output/n100.r10.s042.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s042_output/n100.r10.s042.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s042_output/n100.r10.s042.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s042_output/n100.r10.s042.reference.fas" "n100.r10.s042_output/n100.r10.s042.fq1.fastq" "n100.r10.s042_output/n100.r10.s042.fq2.fastq" | samtools view -bS - > "n100.r10.s042_output/n100.r10.s042.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s042_output/n100.r10.s042.untrimmed.sorted.bam" "n100.r10.s042_output/n100.r10.s042.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s042_output/n100.r10.s042.untrimmed.sorted.bam" -b "n100.r10.s042_output/n100.r10.s042.primers.bed" -p "n100.r10.s042_output/n100.r10.s042.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s042_output/n100.r10.s042.trimmed.sorted.bam" "n100.r10.s042_output/n100.r10.s042.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s042_output/n100.r10.s042.reference.fas" "n100.r10.s042_output/n100.r10.s042.trimmed.sorted.bam" > "n100.r10.s042_output/n100.r10.s042.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s042_output/n100.r10.s042.reference.fas" --call-indels "n100.r10.s042_output/n100.r10.s042.trimmed.sorted.bam" > "n100.r10.s042_output/n100.r10.s042.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s042_output/n100.r10.s042.trimmed.sorted.bam" > "n100.r10.s042_output/n100.r10.s042.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s042_output/n100.r10.s042.depth.txt" "n100.r10.s042_output/n100.r10.s042.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s042_output/n100.r10.s042.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s042_output/n100.r10.s042.reference.fas" | bcftools consensus -m "n100.r10.s042_output/n100.r10.s042.low_depth.tsv" tmp.vcf.gz > "n100.r10.s042_output/n100.r10.s042.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s042_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:37 scheduler task 26f77987 (flow 474e0149): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:37 scheduler task 26f77987 (flow 474e0149): waiting for completion (try 0): started
2021/07/08 17:37:37  ->  n100.r10.s064.Main.out_file 474e0149 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:37 n100.r10.s064.Main.out_file 474e0149 n100/r10/n100.r10.s064.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6687145d5ea1cdb3a257d44d1a2fcb8f42a11e3a8cc992de3907922d9373b3b0
	sha256:474e014946ddc4e289515769ca344ede75868356339ce71a0c8bd8a010b49fde
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/26f7798716695a8cb6437e85c6d382d012f7be49edaf65f2ec8002b52894c5cf
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s064_output"
	    wget -O "n100.r10.s064_output/n100.r10.s064.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s064_output/n100.r10.s064.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s064_output/n100.r10.s064.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s064_output/n100.r10.s064.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s064_output/n100.r10.s064.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s064_output/n100.r10.s064.reference.fas" "n100.r10.s064_output/n100.r10.s064.fq1.fastq" "n100.r10.s064_output/n100.r10.s064.fq2.fastq" | samtools view -bS - > "n100.r10.s064_output/n100.r10.s064.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s064_output/n100.r10.s064.untrimmed.sorted.bam" "n100.r10.s064_output/n100.r10.s064.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s064_output/n100.r10.s064.untrimmed.sorted.bam" -b "n100.r10.s064_output/n100.r10.s064.primers.bed" -p "n100.r10.s064_output/n100.r10.s064.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s064_output/n100.r10.s064.trimmed.sorted.bam" "n100.r10.s064_output/n100.r10.s064.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s064_output/n100.r10.s064.reference.fas" "n100.r10.s064_output/n100.r10.s064.trimmed.sorted.bam" > "n100.r10.s064_output/n100.r10.s064.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s064_output/n100.r10.s064.reference.fas" --call-indels "n100.r10.s064_output/n100.r10.s064.trimmed.sorted.bam" > "n100.r10.s064_output/n100.r10.s064.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s064_output/n100.r10.s064.trimmed.sorted.bam" > "n100.r10.s064_output/n100.r10.s064.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s064_output/n100.r10.s064.depth.txt" "n100.r10.s064_output/n100.r10.s064.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s064_output/n100.r10.s064.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s064_output/n100.r10.s064.reference.fas" | bcftools consensus -m "n100.r10.s064_output/n100.r10.s064.low_depth.tsv" tmp.vcf.gz > "n100.r10.s064_output/n100.r10.s064.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s064_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:37 scheduler task 53abe90b (flow df4d82f6): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:37 scheduler task 53abe90b (flow df4d82f6): waiting for completion (try 0): started
2021/07/08 17:37:37  ->  n100.r10.s013.Main.out_file df4d82f6 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:37 n100.r10.s013.Main.out_file df4d82f6 n100/r10/n100.r10.s013.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8384ac4a242aaa8db0a4dd8ebfe5e97669a2fd7a4880bd4442db33582a874b25
	sha256:df4d82f623f037374b998150b2112bde0860b50082f91058a4b9d11235ee1837
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/53abe90b202aad24dbbdf93ba6fb627eeb9999756ee5e2bda696a44daaf975b1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s013_output"
	    wget -O "n100.r10.s013_output/n100.r10.s013.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s013_output/n100.r10.s013.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s013_output/n100.r10.s013.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s013_output/n100.r10.s013.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s013_output/n100.r10.s013.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s013_output/n100.r10.s013.reference.fas" "n100.r10.s013_output/n100.r10.s013.fq1.fastq" "n100.r10.s013_output/n100.r10.s013.fq2.fastq" | samtools view -bS - > "n100.r10.s013_output/n100.r10.s013.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s013_output/n100.r10.s013.untrimmed.sorted.bam" "n100.r10.s013_output/n100.r10.s013.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s013_output/n100.r10.s013.untrimmed.sorted.bam" -b "n100.r10.s013_output/n100.r10.s013.primers.bed" -p "n100.r10.s013_output/n100.r10.s013.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s013_output/n100.r10.s013.trimmed.sorted.bam" "n100.r10.s013_output/n100.r10.s013.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s013_output/n100.r10.s013.reference.fas" "n100.r10.s013_output/n100.r10.s013.trimmed.sorted.bam" > "n100.r10.s013_output/n100.r10.s013.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s013_output/n100.r10.s013.reference.fas" --call-indels "n100.r10.s013_output/n100.r10.s013.trimmed.sorted.bam" > "n100.r10.s013_output/n100.r10.s013.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s013_output/n100.r10.s013.trimmed.sorted.bam" > "n100.r10.s013_output/n100.r10.s013.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s013_output/n100.r10.s013.depth.txt" "n100.r10.s013_output/n100.r10.s013.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s013_output/n100.r10.s013.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s013_output/n100.r10.s013.reference.fas" | bcftools consensus -m "n100.r10.s013_output/n100.r10.s013.low_depth.tsv" tmp.vcf.gz > "n100.r10.s013_output/n100.r10.s013.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s013_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:37 scheduler task 6a4f6e23 (flow c0dbba66): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:37 scheduler task 6a4f6e23 (flow c0dbba66): waiting for completion (try 0): started
2021/07/08 17:37:37  ->  n100.r10.s053.Main.out_file c0dbba66 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:37 n100.r10.s053.Main.out_file c0dbba66 n100/r10/n100.r10.s053.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0d2d7674d0773e8a603bbed89aa4130956c158288c5e0dd038255b1e228639a7
	sha256:c0dbba668e9025a360f75f4892b5d7292c7b9149cb67c09b983619021dd4a94d
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6a4f6e23ecd9a0385014042560202ae369f76cfc62bf3d84dc38f2d1e102b8c9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s053_output"
	    wget -O "n100.r10.s053_output/n100.r10.s053.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s053_output/n100.r10.s053.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s053_output/n100.r10.s053.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s053_output/n100.r10.s053.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s053_output/n100.r10.s053.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s053_output/n100.r10.s053.reference.fas" "n100.r10.s053_output/n100.r10.s053.fq1.fastq" "n100.r10.s053_output/n100.r10.s053.fq2.fastq" | samtools view -bS - > "n100.r10.s053_output/n100.r10.s053.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s053_output/n100.r10.s053.untrimmed.sorted.bam" "n100.r10.s053_output/n100.r10.s053.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s053_output/n100.r10.s053.untrimmed.sorted.bam" -b "n100.r10.s053_output/n100.r10.s053.primers.bed" -p "n100.r10.s053_output/n100.r10.s053.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s053_output/n100.r10.s053.trimmed.sorted.bam" "n100.r10.s053_output/n100.r10.s053.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s053_output/n100.r10.s053.reference.fas" "n100.r10.s053_output/n100.r10.s053.trimmed.sorted.bam" > "n100.r10.s053_output/n100.r10.s053.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s053_output/n100.r10.s053.reference.fas" --call-indels "n100.r10.s053_output/n100.r10.s053.trimmed.sorted.bam" > "n100.r10.s053_output/n100.r10.s053.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s053_output/n100.r10.s053.trimmed.sorted.bam" > "n100.r10.s053_output/n100.r10.s053.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s053_output/n100.r10.s053.depth.txt" "n100.r10.s053_output/n100.r10.s053.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s053_output/n100.r10.s053.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s053_output/n100.r10.s053.reference.fas" | bcftools consensus -m "n100.r10.s053_output/n100.r10.s053.low_depth.tsv" tmp.vcf.gz > "n100.r10.s053_output/n100.r10.s053.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s053_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:38 scheduler task 5e6ba1c1 (flow 1575ea23): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:38 scheduler task 5e6ba1c1 (flow 1575ea23): waiting for completion (try 0): started
2021/07/08 17:37:38  ->  n100.r10.s070.Main.out_file 1575ea23 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:38 n100.r10.s070.Main.out_file 1575ea23 n100/r10/n100.r10.s070.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:62c18b04e167934bd72c3b3fe373381bda162bbef1666a0eb016f01d99e4f0dc
	sha256:1575ea2312dd6fa2ab8a027dd1a1b2fcfd72d6244ff435f4d8ac63acaf4f83e2
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5e6ba1c1d9eea6590ff690ad82a4dfff3b922cecb6cc8c92798cc1b65718b1d5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s070_output"
	    wget -O "n100.r10.s070_output/n100.r10.s070.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s070_output/n100.r10.s070.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s070_output/n100.r10.s070.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s070_output/n100.r10.s070.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s070_output/n100.r10.s070.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s070_output/n100.r10.s070.reference.fas" "n100.r10.s070_output/n100.r10.s070.fq1.fastq" "n100.r10.s070_output/n100.r10.s070.fq2.fastq" | samtools view -bS - > "n100.r10.s070_output/n100.r10.s070.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s070_output/n100.r10.s070.untrimmed.sorted.bam" "n100.r10.s070_output/n100.r10.s070.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s070_output/n100.r10.s070.untrimmed.sorted.bam" -b "n100.r10.s070_output/n100.r10.s070.primers.bed" -p "n100.r10.s070_output/n100.r10.s070.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s070_output/n100.r10.s070.trimmed.sorted.bam" "n100.r10.s070_output/n100.r10.s070.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s070_output/n100.r10.s070.reference.fas" "n100.r10.s070_output/n100.r10.s070.trimmed.sorted.bam" > "n100.r10.s070_output/n100.r10.s070.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s070_output/n100.r10.s070.reference.fas" --call-indels "n100.r10.s070_output/n100.r10.s070.trimmed.sorted.bam" > "n100.r10.s070_output/n100.r10.s070.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s070_output/n100.r10.s070.trimmed.sorted.bam" > "n100.r10.s070_output/n100.r10.s070.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s070_output/n100.r10.s070.depth.txt" "n100.r10.s070_output/n100.r10.s070.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s070_output/n100.r10.s070.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s070_output/n100.r10.s070.reference.fas" | bcftools consensus -m "n100.r10.s070_output/n100.r10.s070.low_depth.tsv" tmp.vcf.gz > "n100.r10.s070_output/n100.r10.s070.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s070_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:38 scheduler task 54c398c1 (flow 43de8083): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:38 scheduler task 54c398c1 (flow 43de8083): waiting for completion (try 0): started
2021/07/08 17:37:38  ->  n100.r10.s080.Main.out_file 43de8083 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:38 n100.r10.s080.Main.out_file 43de8083 n100/r10/n100.r10.s080.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c1f900a644ce16aa3eaa380821a4676848535bda180821b4475108a1d4b8849a
	sha256:43de8083e3b36bde02cc7ce98c86e67f2d09f85b7ad4837c68f03ee3ff577a23
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/54c398c177a181cb47d945fc43333c58c950400ba91091d996dbc5244a9d137b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s080_output"
	    wget -O "n100.r10.s080_output/n100.r10.s080.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s080_output/n100.r10.s080.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s080_output/n100.r10.s080.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s080_output/n100.r10.s080.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s080_output/n100.r10.s080.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s080_output/n100.r10.s080.reference.fas" "n100.r10.s080_output/n100.r10.s080.fq1.fastq" "n100.r10.s080_output/n100.r10.s080.fq2.fastq" | samtools view -bS - > "n100.r10.s080_output/n100.r10.s080.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s080_output/n100.r10.s080.untrimmed.sorted.bam" "n100.r10.s080_output/n100.r10.s080.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s080_output/n100.r10.s080.untrimmed.sorted.bam" -b "n100.r10.s080_output/n100.r10.s080.primers.bed" -p "n100.r10.s080_output/n100.r10.s080.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s080_output/n100.r10.s080.trimmed.sorted.bam" "n100.r10.s080_output/n100.r10.s080.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s080_output/n100.r10.s080.reference.fas" "n100.r10.s080_output/n100.r10.s080.trimmed.sorted.bam" > "n100.r10.s080_output/n100.r10.s080.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s080_output/n100.r10.s080.reference.fas" --call-indels "n100.r10.s080_output/n100.r10.s080.trimmed.sorted.bam" > "n100.r10.s080_output/n100.r10.s080.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s080_output/n100.r10.s080.trimmed.sorted.bam" > "n100.r10.s080_output/n100.r10.s080.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s080_output/n100.r10.s080.depth.txt" "n100.r10.s080_output/n100.r10.s080.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s080_output/n100.r10.s080.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s080_output/n100.r10.s080.reference.fas" | bcftools consensus -m "n100.r10.s080_output/n100.r10.s080.low_depth.tsv" tmp.vcf.gz > "n100.r10.s080_output/n100.r10.s080.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s080_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:38 scheduler task 10b2ee98 (flow 7eb303f0): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:38 scheduler task 10b2ee98 (flow 7eb303f0): waiting for completion (try 0): started
2021/07/08 17:37:38  ->  n100.r10.s061.Main.out_file 7eb303f0 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:38 n100.r10.s061.Main.out_file 7eb303f0 n100/r10/n100.r10.s061.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f084ad53b10e6f658171ddf846f0dd172d8480fafd4e716fd7a67031a09b76bc
	sha256:7eb303f08b4c906c8786a3dfb246fba45baef7550934fd11cd7a911f976986c5
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/10b2ee98227e7ecbed52cdff8c28e1bd8bc4f4c1e0052901d20684838b36f36a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s061_output"
	    wget -O "n100.r10.s061_output/n100.r10.s061.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s061_output/n100.r10.s061.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s061_output/n100.r10.s061.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s061_output/n100.r10.s061.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s061_output/n100.r10.s061.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s061_output/n100.r10.s061.reference.fas" "n100.r10.s061_output/n100.r10.s061.fq1.fastq" "n100.r10.s061_output/n100.r10.s061.fq2.fastq" | samtools view -bS - > "n100.r10.s061_output/n100.r10.s061.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s061_output/n100.r10.s061.untrimmed.sorted.bam" "n100.r10.s061_output/n100.r10.s061.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s061_output/n100.r10.s061.untrimmed.sorted.bam" -b "n100.r10.s061_output/n100.r10.s061.primers.bed" -p "n100.r10.s061_output/n100.r10.s061.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s061_output/n100.r10.s061.trimmed.sorted.bam" "n100.r10.s061_output/n100.r10.s061.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s061_output/n100.r10.s061.reference.fas" "n100.r10.s061_output/n100.r10.s061.trimmed.sorted.bam" > "n100.r10.s061_output/n100.r10.s061.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s061_output/n100.r10.s061.reference.fas" --call-indels "n100.r10.s061_output/n100.r10.s061.trimmed.sorted.bam" > "n100.r10.s061_output/n100.r10.s061.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s061_output/n100.r10.s061.trimmed.sorted.bam" > "n100.r10.s061_output/n100.r10.s061.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s061_output/n100.r10.s061.depth.txt" "n100.r10.s061_output/n100.r10.s061.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s061_output/n100.r10.s061.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s061_output/n100.r10.s061.reference.fas" | bcftools consensus -m "n100.r10.s061_output/n100.r10.s061.low_depth.tsv" tmp.vcf.gz > "n100.r10.s061_output/n100.r10.s061.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s061_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:38 scheduler task e996e2c5 (flow d3393061): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:38 scheduler task e996e2c5 (flow d3393061): waiting for completion (try 0): started
2021/07/08 17:37:38  ->  n100.r10.s027.Main.out_file d3393061 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:38 n100.r10.s027.Main.out_file d3393061 n100/r10/n100.r10.s027.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:92700754701120d474ed086b1b530b046b804021ba5a4a95586d12515dd2e674
	sha256:d3393061139544e61f7090b88021f6a4ff8c17fb2a9b9916fc01ec7182c41457
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e996e2c5b6ad13131fda218effb3815bc7f6ae58ba0bc080d1623cdffd87a0f3
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s027_output"
	    wget -O "n100.r10.s027_output/n100.r10.s027.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s027_output/n100.r10.s027.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s027_output/n100.r10.s027.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s027_output/n100.r10.s027.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s027_output/n100.r10.s027.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s027_output/n100.r10.s027.reference.fas" "n100.r10.s027_output/n100.r10.s027.fq1.fastq" "n100.r10.s027_output/n100.r10.s027.fq2.fastq" | samtools view -bS - > "n100.r10.s027_output/n100.r10.s027.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s027_output/n100.r10.s027.untrimmed.sorted.bam" "n100.r10.s027_output/n100.r10.s027.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s027_output/n100.r10.s027.untrimmed.sorted.bam" -b "n100.r10.s027_output/n100.r10.s027.primers.bed" -p "n100.r10.s027_output/n100.r10.s027.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s027_output/n100.r10.s027.trimmed.sorted.bam" "n100.r10.s027_output/n100.r10.s027.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s027_output/n100.r10.s027.reference.fas" "n100.r10.s027_output/n100.r10.s027.trimmed.sorted.bam" > "n100.r10.s027_output/n100.r10.s027.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s027_output/n100.r10.s027.reference.fas" --call-indels "n100.r10.s027_output/n100.r10.s027.trimmed.sorted.bam" > "n100.r10.s027_output/n100.r10.s027.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s027_output/n100.r10.s027.trimmed.sorted.bam" > "n100.r10.s027_output/n100.r10.s027.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s027_output/n100.r10.s027.depth.txt" "n100.r10.s027_output/n100.r10.s027.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s027_output/n100.r10.s027.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s027_output/n100.r10.s027.reference.fas" | bcftools consensus -m "n100.r10.s027_output/n100.r10.s027.low_depth.tsv" tmp.vcf.gz > "n100.r10.s027_output/n100.r10.s027.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s027_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:38 scheduler task 277a5fa1 (flow abe7077c): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:38 scheduler task 277a5fa1 (flow abe7077c): waiting for completion (try 0): started
2021/07/08 17:37:38  ->  n100.r10.s010.Main.out_file abe7077c exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:38 n100.r10.s010.Main.out_file abe7077c n100/r10/n100.r10.s010.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f18b5afd28b63bf462ff60b9daf6a1617cbf30ee5f669272ea13ead0300f6980
	sha256:abe7077c29873dadf27670bc84f45aa32d8a6dbe9e712d8bb55bba98fca0b6c0
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/277a5fa111f71cf39ca8050c74ddecb3b609a7857f1600e96325b0d6350f83a1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s010_output"
	    wget -O "n100.r10.s010_output/n100.r10.s010.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s010_output/n100.r10.s010.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s010_output/n100.r10.s010.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s010_output/n100.r10.s010.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s010_output/n100.r10.s010.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s010_output/n100.r10.s010.reference.fas" "n100.r10.s010_output/n100.r10.s010.fq1.fastq" "n100.r10.s010_output/n100.r10.s010.fq2.fastq" | samtools view -bS - > "n100.r10.s010_output/n100.r10.s010.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s010_output/n100.r10.s010.untrimmed.sorted.bam" "n100.r10.s010_output/n100.r10.s010.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s010_output/n100.r10.s010.untrimmed.sorted.bam" -b "n100.r10.s010_output/n100.r10.s010.primers.bed" -p "n100.r10.s010_output/n100.r10.s010.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s010_output/n100.r10.s010.trimmed.sorted.bam" "n100.r10.s010_output/n100.r10.s010.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s010_output/n100.r10.s010.reference.fas" "n100.r10.s010_output/n100.r10.s010.trimmed.sorted.bam" > "n100.r10.s010_output/n100.r10.s010.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s010_output/n100.r10.s010.reference.fas" --call-indels "n100.r10.s010_output/n100.r10.s010.trimmed.sorted.bam" > "n100.r10.s010_output/n100.r10.s010.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s010_output/n100.r10.s010.trimmed.sorted.bam" > "n100.r10.s010_output/n100.r10.s010.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s010_output/n100.r10.s010.depth.txt" "n100.r10.s010_output/n100.r10.s010.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s010_output/n100.r10.s010.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s010_output/n100.r10.s010.reference.fas" | bcftools consensus -m "n100.r10.s010_output/n100.r10.s010.low_depth.tsv" tmp.vcf.gz > "n100.r10.s010_output/n100.r10.s010.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s010_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:39 scheduler task c0a2340c (flow 0d3cc969): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:39 scheduler task c0a2340c (flow 0d3cc969): waiting for completion (try 0): started
2021/07/08 17:37:39  ->  n100.r10.s026.Main.out_file 0d3cc969 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:39 n100.r10.s026.Main.out_file 0d3cc969 n100/r10/n100.r10.s026.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e59e243608a1c5f9d6120993421fa4ce17d847ae7b5e15f4520dc97b475a787d
	sha256:0d3cc9694b983a3cb946680bdb19ef4a512f0a5140c76a208dca1382f19e2973
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c0a2340c2cbb717563c36247b70cfb541d8287679101f04e47875090204e8ff0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s026_output"
	    wget -O "n100.r10.s026_output/n100.r10.s026.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s026_output/n100.r10.s026.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s026_output/n100.r10.s026.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s026_output/n100.r10.s026.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s026_output/n100.r10.s026.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s026_output/n100.r10.s026.reference.fas" "n100.r10.s026_output/n100.r10.s026.fq1.fastq" "n100.r10.s026_output/n100.r10.s026.fq2.fastq" | samtools view -bS - > "n100.r10.s026_output/n100.r10.s026.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s026_output/n100.r10.s026.untrimmed.sorted.bam" "n100.r10.s026_output/n100.r10.s026.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s026_output/n100.r10.s026.untrimmed.sorted.bam" -b "n100.r10.s026_output/n100.r10.s026.primers.bed" -p "n100.r10.s026_output/n100.r10.s026.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s026_output/n100.r10.s026.trimmed.sorted.bam" "n100.r10.s026_output/n100.r10.s026.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s026_output/n100.r10.s026.reference.fas" "n100.r10.s026_output/n100.r10.s026.trimmed.sorted.bam" > "n100.r10.s026_output/n100.r10.s026.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s026_output/n100.r10.s026.reference.fas" --call-indels "n100.r10.s026_output/n100.r10.s026.trimmed.sorted.bam" > "n100.r10.s026_output/n100.r10.s026.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s026_output/n100.r10.s026.trimmed.sorted.bam" > "n100.r10.s026_output/n100.r10.s026.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s026_output/n100.r10.s026.depth.txt" "n100.r10.s026_output/n100.r10.s026.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s026_output/n100.r10.s026.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s026_output/n100.r10.s026.reference.fas" | bcftools consensus -m "n100.r10.s026_output/n100.r10.s026.low_depth.tsv" tmp.vcf.gz > "n100.r10.s026_output/n100.r10.s026.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s026_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:39 scheduler task 63cda6a4 (flow 20c10487): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:39 scheduler task 63cda6a4 (flow 20c10487): waiting for completion (try 0): started
2021/07/08 17:37:39  ->  n100.r10.s037.Main.out_file 20c10487 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:39 n100.r10.s037.Main.out_file 20c10487 n100/r10/n100.r10.s037.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b0ab6dfc3e416869281c926ea8b220d3f0e3b8bc5360717e00c06b735fa6ab28
	sha256:20c10487f2588897d0737dded5b925c366a5818d0e79b25d3b1cfd20c371709c
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/63cda6a40c40d605fc4da1317f89fc535199ba1698152a9c23328e8f17156b8a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s037_output"
	    wget -O "n100.r10.s037_output/n100.r10.s037.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s037_output/n100.r10.s037.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s037_output/n100.r10.s037.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s037_output/n100.r10.s037.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s037_output/n100.r10.s037.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s037_output/n100.r10.s037.reference.fas" "n100.r10.s037_output/n100.r10.s037.fq1.fastq" "n100.r10.s037_output/n100.r10.s037.fq2.fastq" | samtools view -bS - > "n100.r10.s037_output/n100.r10.s037.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s037_output/n100.r10.s037.untrimmed.sorted.bam" "n100.r10.s037_output/n100.r10.s037.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s037_output/n100.r10.s037.untrimmed.sorted.bam" -b "n100.r10.s037_output/n100.r10.s037.primers.bed" -p "n100.r10.s037_output/n100.r10.s037.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s037_output/n100.r10.s037.trimmed.sorted.bam" "n100.r10.s037_output/n100.r10.s037.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s037_output/n100.r10.s037.reference.fas" "n100.r10.s037_output/n100.r10.s037.trimmed.sorted.bam" > "n100.r10.s037_output/n100.r10.s037.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s037_output/n100.r10.s037.reference.fas" --call-indels "n100.r10.s037_output/n100.r10.s037.trimmed.sorted.bam" > "n100.r10.s037_output/n100.r10.s037.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s037_output/n100.r10.s037.trimmed.sorted.bam" > "n100.r10.s037_output/n100.r10.s037.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s037_output/n100.r10.s037.depth.txt" "n100.r10.s037_output/n100.r10.s037.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s037_output/n100.r10.s037.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s037_output/n100.r10.s037.reference.fas" | bcftools consensus -m "n100.r10.s037_output/n100.r10.s037.low_depth.tsv" tmp.vcf.gz > "n100.r10.s037_output/n100.r10.s037.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s037_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:39 scheduler task cc4d6c79 (flow a27124a9): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:39 scheduler task cc4d6c79 (flow a27124a9): waiting for completion (try 0): started
2021/07/08 17:37:39  ->  n100.r10.s024.Main.out_file a27124a9 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:39 n100.r10.s024.Main.out_file a27124a9 n100/r10/n100.r10.s024.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d6e2847bb65f81517093390b96dc1066a41f23ae0ac386c643712ce1079264ae
	sha256:a27124a9934b201d01cefc0dd960232e764555372d66541266f77bf5b6b8fbfc
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cc4d6c794d652579700bac0309d2d4658a777c3219df52a7121250c056d155ce
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s024_output"
	    wget -O "n100.r10.s024_output/n100.r10.s024.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s024_output/n100.r10.s024.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s024_output/n100.r10.s024.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s024_output/n100.r10.s024.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s024_output/n100.r10.s024.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s024_output/n100.r10.s024.reference.fas" "n100.r10.s024_output/n100.r10.s024.fq1.fastq" "n100.r10.s024_output/n100.r10.s024.fq2.fastq" | samtools view -bS - > "n100.r10.s024_output/n100.r10.s024.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s024_output/n100.r10.s024.untrimmed.sorted.bam" "n100.r10.s024_output/n100.r10.s024.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s024_output/n100.r10.s024.untrimmed.sorted.bam" -b "n100.r10.s024_output/n100.r10.s024.primers.bed" -p "n100.r10.s024_output/n100.r10.s024.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s024_output/n100.r10.s024.trimmed.sorted.bam" "n100.r10.s024_output/n100.r10.s024.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s024_output/n100.r10.s024.reference.fas" "n100.r10.s024_output/n100.r10.s024.trimmed.sorted.bam" > "n100.r10.s024_output/n100.r10.s024.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s024_output/n100.r10.s024.reference.fas" --call-indels "n100.r10.s024_output/n100.r10.s024.trimmed.sorted.bam" > "n100.r10.s024_output/n100.r10.s024.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s024_output/n100.r10.s024.trimmed.sorted.bam" > "n100.r10.s024_output/n100.r10.s024.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s024_output/n100.r10.s024.depth.txt" "n100.r10.s024_output/n100.r10.s024.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s024_output/n100.r10.s024.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s024_output/n100.r10.s024.reference.fas" | bcftools consensus -m "n100.r10.s024_output/n100.r10.s024.low_depth.tsv" tmp.vcf.gz > "n100.r10.s024_output/n100.r10.s024.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s024_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:39 scheduler task 768ad499 (flow 88f35ec0): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:39 scheduler task 768ad499 (flow 88f35ec0): waiting for completion (try 0): started
2021/07/08 17:37:39  ->  n100.r10.s041.Main.out_file 88f35ec0 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:39 n100.r10.s041.Main.out_file 88f35ec0 n100/r10/n100.r10.s041.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f765b3082ecd5615139d08f060843134e9238236496fbd0e708887110d6a4582
	sha256:88f35ec0e44378348d1a1491e44346711a2c092fec02028608c29fc3fa0d184e
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/768ad499eedd3ee0ecba0ad28d54dea047375e68e633cb1adf152557183867c7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s041_output"
	    wget -O "n100.r10.s041_output/n100.r10.s041.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s041_output/n100.r10.s041.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s041_output/n100.r10.s041.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s041_output/n100.r10.s041.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s041_output/n100.r10.s041.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s041_output/n100.r10.s041.reference.fas" "n100.r10.s041_output/n100.r10.s041.fq1.fastq" "n100.r10.s041_output/n100.r10.s041.fq2.fastq" | samtools view -bS - > "n100.r10.s041_output/n100.r10.s041.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s041_output/n100.r10.s041.untrimmed.sorted.bam" "n100.r10.s041_output/n100.r10.s041.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s041_output/n100.r10.s041.untrimmed.sorted.bam" -b "n100.r10.s041_output/n100.r10.s041.primers.bed" -p "n100.r10.s041_output/n100.r10.s041.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s041_output/n100.r10.s041.trimmed.sorted.bam" "n100.r10.s041_output/n100.r10.s041.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s041_output/n100.r10.s041.reference.fas" "n100.r10.s041_output/n100.r10.s041.trimmed.sorted.bam" > "n100.r10.s041_output/n100.r10.s041.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s041_output/n100.r10.s041.reference.fas" --call-indels "n100.r10.s041_output/n100.r10.s041.trimmed.sorted.bam" > "n100.r10.s041_output/n100.r10.s041.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s041_output/n100.r10.s041.trimmed.sorted.bam" > "n100.r10.s041_output/n100.r10.s041.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s041_output/n100.r10.s041.depth.txt" "n100.r10.s041_output/n100.r10.s041.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s041_output/n100.r10.s041.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s041_output/n100.r10.s041.reference.fas" | bcftools consensus -m "n100.r10.s041_output/n100.r10.s041.low_depth.tsv" tmp.vcf.gz > "n100.r10.s041_output/n100.r10.s041.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s041_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:39 scheduler task 2139bff7 (flow d781b4f4): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:39 scheduler task 2139bff7 (flow d781b4f4): waiting for completion (try 0): started
2021/07/08 17:37:39  ->  n100.r10.s034.Main.out_file d781b4f4 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:39 n100.r10.s034.Main.out_file d781b4f4 n100/r10/n100.r10.s034.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ec161fce7d5aca1963f3485556851189bf032c7163edd07cdcc2a80e1dfcafe5
	sha256:d781b4f4a8a4a6bca3092795f3992230871c10f4c0b77f3b2c53590f9d8d3633
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2139bff721a04c6cfda94d526f225633814cb0352c9e5edb04492bbe470909a6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s034_output"
	    wget -O "n100.r10.s034_output/n100.r10.s034.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s034_output/n100.r10.s034.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s034_output/n100.r10.s034.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s034_output/n100.r10.s034.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s034_output/n100.r10.s034.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s034_output/n100.r10.s034.reference.fas" "n100.r10.s034_output/n100.r10.s034.fq1.fastq" "n100.r10.s034_output/n100.r10.s034.fq2.fastq" | samtools view -bS - > "n100.r10.s034_output/n100.r10.s034.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s034_output/n100.r10.s034.untrimmed.sorted.bam" "n100.r10.s034_output/n100.r10.s034.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s034_output/n100.r10.s034.untrimmed.sorted.bam" -b "n100.r10.s034_output/n100.r10.s034.primers.bed" -p "n100.r10.s034_output/n100.r10.s034.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s034_output/n100.r10.s034.trimmed.sorted.bam" "n100.r10.s034_output/n100.r10.s034.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s034_output/n100.r10.s034.reference.fas" "n100.r10.s034_output/n100.r10.s034.trimmed.sorted.bam" > "n100.r10.s034_output/n100.r10.s034.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s034_output/n100.r10.s034.reference.fas" --call-indels "n100.r10.s034_output/n100.r10.s034.trimmed.sorted.bam" > "n100.r10.s034_output/n100.r10.s034.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s034_output/n100.r10.s034.trimmed.sorted.bam" > "n100.r10.s034_output/n100.r10.s034.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s034_output/n100.r10.s034.depth.txt" "n100.r10.s034_output/n100.r10.s034.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s034_output/n100.r10.s034.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s034_output/n100.r10.s034.reference.fas" | bcftools consensus -m "n100.r10.s034_output/n100.r10.s034.low_depth.tsv" tmp.vcf.gz > "n100.r10.s034_output/n100.r10.s034.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s034_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:39 scheduler task c6408350 (flow 227a28ae): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:39 scheduler task c6408350 (flow 227a28ae): waiting for completion (try 0): started
2021/07/08 17:37:39  ->  n100.r10.s039.Main.out_file 227a28ae exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:39 n100.r10.s039.Main.out_file 227a28ae n100/r10/n100.r10.s039.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a3d71afed52fb1e6cbfa1c35a921d40545b3f972a1b92fbb86690fb25ceb493b
	sha256:227a28aec4157109e449a7d3b3ee020ca35607f17846f3b432766b976b41d0de
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c6408350084140c2808bc47fde267bb5aee743f71a882e550d2f45808e1136c8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s039_output"
	    wget -O "n100.r10.s039_output/n100.r10.s039.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s039_output/n100.r10.s039.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s039_output/n100.r10.s039.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s039_output/n100.r10.s039.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s039_output/n100.r10.s039.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s039_output/n100.r10.s039.reference.fas" "n100.r10.s039_output/n100.r10.s039.fq1.fastq" "n100.r10.s039_output/n100.r10.s039.fq2.fastq" | samtools view -bS - > "n100.r10.s039_output/n100.r10.s039.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s039_output/n100.r10.s039.untrimmed.sorted.bam" "n100.r10.s039_output/n100.r10.s039.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s039_output/n100.r10.s039.untrimmed.sorted.bam" -b "n100.r10.s039_output/n100.r10.s039.primers.bed" -p "n100.r10.s039_output/n100.r10.s039.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s039_output/n100.r10.s039.trimmed.sorted.bam" "n100.r10.s039_output/n100.r10.s039.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s039_output/n100.r10.s039.reference.fas" "n100.r10.s039_output/n100.r10.s039.trimmed.sorted.bam" > "n100.r10.s039_output/n100.r10.s039.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s039_output/n100.r10.s039.reference.fas" --call-indels "n100.r10.s039_output/n100.r10.s039.trimmed.sorted.bam" > "n100.r10.s039_output/n100.r10.s039.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s039_output/n100.r10.s039.trimmed.sorted.bam" > "n100.r10.s039_output/n100.r10.s039.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s039_output/n100.r10.s039.depth.txt" "n100.r10.s039_output/n100.r10.s039.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s039_output/n100.r10.s039.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s039_output/n100.r10.s039.reference.fas" | bcftools consensus -m "n100.r10.s039_output/n100.r10.s039.low_depth.tsv" tmp.vcf.gz > "n100.r10.s039_output/n100.r10.s039.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s039_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:39 scheduler task d1d46b3d (flow 21dcc181): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:40 scheduler task d1d46b3d (flow 21dcc181): waiting for completion (try 0): started
2021/07/08 17:37:40  ->  n100.r10.s011.Main.out_file 21dcc181 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:40 n100.r10.s011.Main.out_file 21dcc181 n100/r10/n100.r10.s011.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9dae0ac4cc33d77c496024b28e489d5861852226fc41253c48696dcbb9f67257
	sha256:21dcc181382d61c279bcd1c322e49c0b62c1b0c21e5b932307d33d1f82762fb8
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d1d46b3d5fa8eda35c88a9f93df02ce9c2b5b85d391e284a89f3bfa0a9420927
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s011_output"
	    wget -O "n100.r10.s011_output/n100.r10.s011.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s011_output/n100.r10.s011.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s011_output/n100.r10.s011.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s011_output/n100.r10.s011.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s011_output/n100.r10.s011.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s011_output/n100.r10.s011.reference.fas" "n100.r10.s011_output/n100.r10.s011.fq1.fastq" "n100.r10.s011_output/n100.r10.s011.fq2.fastq" | samtools view -bS - > "n100.r10.s011_output/n100.r10.s011.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s011_output/n100.r10.s011.untrimmed.sorted.bam" "n100.r10.s011_output/n100.r10.s011.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s011_output/n100.r10.s011.untrimmed.sorted.bam" -b "n100.r10.s011_output/n100.r10.s011.primers.bed" -p "n100.r10.s011_output/n100.r10.s011.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s011_output/n100.r10.s011.trimmed.sorted.bam" "n100.r10.s011_output/n100.r10.s011.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s011_output/n100.r10.s011.reference.fas" "n100.r10.s011_output/n100.r10.s011.trimmed.sorted.bam" > "n100.r10.s011_output/n100.r10.s011.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s011_output/n100.r10.s011.reference.fas" --call-indels "n100.r10.s011_output/n100.r10.s011.trimmed.sorted.bam" > "n100.r10.s011_output/n100.r10.s011.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s011_output/n100.r10.s011.trimmed.sorted.bam" > "n100.r10.s011_output/n100.r10.s011.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s011_output/n100.r10.s011.depth.txt" "n100.r10.s011_output/n100.r10.s011.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s011_output/n100.r10.s011.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s011_output/n100.r10.s011.reference.fas" | bcftools consensus -m "n100.r10.s011_output/n100.r10.s011.low_depth.tsv" tmp.vcf.gz > "n100.r10.s011_output/n100.r10.s011.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s011_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:40 scheduler task 8d0f47ee (flow 5e0db977): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:40 scheduler task 8d0f47ee (flow 5e0db977): waiting for completion (try 0): started
2021/07/08 17:37:40  ->  n100.r10.s092.Main.out_file 5e0db977 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:40 n100.r10.s092.Main.out_file 5e0db977 n100/r10/n100.r10.s092.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a1799ea60025ee812540ac5576805c1d9180017acd60a18150d55e43643c86f9
	sha256:5e0db9775087595b23eccc53aa200edd983a42fc75a871d8eaf10c871c899f67
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8d0f47ee3dba2f6f1b2467f75d661806dd8b9f599c85ec347c48988f471544d0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s092_output"
	    wget -O "n100.r10.s092_output/n100.r10.s092.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s092_output/n100.r10.s092.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s092_output/n100.r10.s092.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s092_output/n100.r10.s092.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s092_output/n100.r10.s092.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s092_output/n100.r10.s092.reference.fas" "n100.r10.s092_output/n100.r10.s092.fq1.fastq" "n100.r10.s092_output/n100.r10.s092.fq2.fastq" | samtools view -bS - > "n100.r10.s092_output/n100.r10.s092.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s092_output/n100.r10.s092.untrimmed.sorted.bam" "n100.r10.s092_output/n100.r10.s092.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s092_output/n100.r10.s092.untrimmed.sorted.bam" -b "n100.r10.s092_output/n100.r10.s092.primers.bed" -p "n100.r10.s092_output/n100.r10.s092.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s092_output/n100.r10.s092.trimmed.sorted.bam" "n100.r10.s092_output/n100.r10.s092.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s092_output/n100.r10.s092.reference.fas" "n100.r10.s092_output/n100.r10.s092.trimmed.sorted.bam" > "n100.r10.s092_output/n100.r10.s092.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s092_output/n100.r10.s092.reference.fas" --call-indels "n100.r10.s092_output/n100.r10.s092.trimmed.sorted.bam" > "n100.r10.s092_output/n100.r10.s092.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s092_output/n100.r10.s092.trimmed.sorted.bam" > "n100.r10.s092_output/n100.r10.s092.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s092_output/n100.r10.s092.depth.txt" "n100.r10.s092_output/n100.r10.s092.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s092_output/n100.r10.s092.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s092_output/n100.r10.s092.reference.fas" | bcftools consensus -m "n100.r10.s092_output/n100.r10.s092.low_depth.tsv" tmp.vcf.gz > "n100.r10.s092_output/n100.r10.s092.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s092_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:40 scheduler task 834ab569 (flow 9a69f4b2): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:40 scheduler task 834ab569 (flow 9a69f4b2): waiting for completion (try 0): started
2021/07/08 17:37:40  ->  n100.r10.s087.Main.out_file 9a69f4b2 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:40 n100.r10.s087.Main.out_file 9a69f4b2 n100/r10/n100.r10.s087.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5611cefc0cc1099ad263164faf3b8608ad2d4af12b4c2fdecab6dc14e894db21
	sha256:9a69f4b2f78f4acd934e16756e9ee17c144592709b5287172fad4399a42f3b61
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/834ab5692b7cc901d20a026de501048c10cfc80a55eed8c61ff223d390abe834
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s087_output"
	    wget -O "n100.r10.s087_output/n100.r10.s087.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s087_output/n100.r10.s087.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s087_output/n100.r10.s087.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s087_output/n100.r10.s087.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s087_output/n100.r10.s087.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s087_output/n100.r10.s087.reference.fas" "n100.r10.s087_output/n100.r10.s087.fq1.fastq" "n100.r10.s087_output/n100.r10.s087.fq2.fastq" | samtools view -bS - > "n100.r10.s087_output/n100.r10.s087.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s087_output/n100.r10.s087.untrimmed.sorted.bam" "n100.r10.s087_output/n100.r10.s087.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s087_output/n100.r10.s087.untrimmed.sorted.bam" -b "n100.r10.s087_output/n100.r10.s087.primers.bed" -p "n100.r10.s087_output/n100.r10.s087.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s087_output/n100.r10.s087.trimmed.sorted.bam" "n100.r10.s087_output/n100.r10.s087.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s087_output/n100.r10.s087.reference.fas" "n100.r10.s087_output/n100.r10.s087.trimmed.sorted.bam" > "n100.r10.s087_output/n100.r10.s087.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s087_output/n100.r10.s087.reference.fas" --call-indels "n100.r10.s087_output/n100.r10.s087.trimmed.sorted.bam" > "n100.r10.s087_output/n100.r10.s087.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s087_output/n100.r10.s087.trimmed.sorted.bam" > "n100.r10.s087_output/n100.r10.s087.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s087_output/n100.r10.s087.depth.txt" "n100.r10.s087_output/n100.r10.s087.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s087_output/n100.r10.s087.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s087_output/n100.r10.s087.reference.fas" | bcftools consensus -m "n100.r10.s087_output/n100.r10.s087.low_depth.tsv" tmp.vcf.gz > "n100.r10.s087_output/n100.r10.s087.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s087_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:40 scheduler task 51fe96bf (flow 1f86a397): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:40 scheduler task 51fe96bf (flow 1f86a397): waiting for completion (try 0): started
2021/07/08 17:37:40  ->  n100.r10.s066.Main.out_file 1f86a397 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:40 n100.r10.s066.Main.out_file 1f86a397 n100/r10/n100.r10.s066.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:931bde406f9eb7b2c44cc0ca1dcab2c4f8d7cafe85f82a8aab216993fe9a6846
	sha256:1f86a3974bdc467856e88fe824ce82b3c25ab55a32b88797852460a0bfef3bb8
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/51fe96bfde6f00d2457d68e59b14701cae16a5eb9ab1dbdf5d8002cd784734e2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s066_output"
	    wget -O "n100.r10.s066_output/n100.r10.s066.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s066_output/n100.r10.s066.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s066_output/n100.r10.s066.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s066_output/n100.r10.s066.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s066_output/n100.r10.s066.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s066_output/n100.r10.s066.reference.fas" "n100.r10.s066_output/n100.r10.s066.fq1.fastq" "n100.r10.s066_output/n100.r10.s066.fq2.fastq" | samtools view -bS - > "n100.r10.s066_output/n100.r10.s066.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s066_output/n100.r10.s066.untrimmed.sorted.bam" "n100.r10.s066_output/n100.r10.s066.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s066_output/n100.r10.s066.untrimmed.sorted.bam" -b "n100.r10.s066_output/n100.r10.s066.primers.bed" -p "n100.r10.s066_output/n100.r10.s066.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s066_output/n100.r10.s066.trimmed.sorted.bam" "n100.r10.s066_output/n100.r10.s066.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s066_output/n100.r10.s066.reference.fas" "n100.r10.s066_output/n100.r10.s066.trimmed.sorted.bam" > "n100.r10.s066_output/n100.r10.s066.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s066_output/n100.r10.s066.reference.fas" --call-indels "n100.r10.s066_output/n100.r10.s066.trimmed.sorted.bam" > "n100.r10.s066_output/n100.r10.s066.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s066_output/n100.r10.s066.trimmed.sorted.bam" > "n100.r10.s066_output/n100.r10.s066.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s066_output/n100.r10.s066.depth.txt" "n100.r10.s066_output/n100.r10.s066.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s066_output/n100.r10.s066.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s066_output/n100.r10.s066.reference.fas" | bcftools consensus -m "n100.r10.s066_output/n100.r10.s066.low_depth.tsv" tmp.vcf.gz > "n100.r10.s066_output/n100.r10.s066.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s066_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:40 scheduler task 2f95f0eb (flow 9906f8c4): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:40 scheduler task 2f95f0eb (flow 9906f8c4): waiting for completion (try 0): started
2021/07/08 17:37:40  ->  n100.r10.s074.Main.out_file 9906f8c4 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:40 n100.r10.s074.Main.out_file 9906f8c4 n100/r10/n100.r10.s074.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3cf5b2ab7317465f441091400034c38064202c50bdc1b4d0d4ff3dcf7d36b0c8
	sha256:9906f8c4775a1f24b08dbbfdf0346118a9ff64837d68808f000b135a7e8ee009
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2f95f0eb5fc28bb123434032b788fdebc54f8def8a11097c3ab33a601836b892
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s074_output"
	    wget -O "n100.r10.s074_output/n100.r10.s074.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s074_output/n100.r10.s074.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s074_output/n100.r10.s074.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s074_output/n100.r10.s074.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s074_output/n100.r10.s074.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s074_output/n100.r10.s074.reference.fas" "n100.r10.s074_output/n100.r10.s074.fq1.fastq" "n100.r10.s074_output/n100.r10.s074.fq2.fastq" | samtools view -bS - > "n100.r10.s074_output/n100.r10.s074.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s074_output/n100.r10.s074.untrimmed.sorted.bam" "n100.r10.s074_output/n100.r10.s074.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s074_output/n100.r10.s074.untrimmed.sorted.bam" -b "n100.r10.s074_output/n100.r10.s074.primers.bed" -p "n100.r10.s074_output/n100.r10.s074.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s074_output/n100.r10.s074.trimmed.sorted.bam" "n100.r10.s074_output/n100.r10.s074.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s074_output/n100.r10.s074.reference.fas" "n100.r10.s074_output/n100.r10.s074.trimmed.sorted.bam" > "n100.r10.s074_output/n100.r10.s074.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s074_output/n100.r10.s074.reference.fas" --call-indels "n100.r10.s074_output/n100.r10.s074.trimmed.sorted.bam" > "n100.r10.s074_output/n100.r10.s074.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s074_output/n100.r10.s074.trimmed.sorted.bam" > "n100.r10.s074_output/n100.r10.s074.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s074_output/n100.r10.s074.depth.txt" "n100.r10.s074_output/n100.r10.s074.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s074_output/n100.r10.s074.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s074_output/n100.r10.s074.reference.fas" | bcftools consensus -m "n100.r10.s074_output/n100.r10.s074.low_depth.tsv" tmp.vcf.gz > "n100.r10.s074_output/n100.r10.s074.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s074_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:40 scheduler task 922533fe (flow 9b575067): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:40 scheduler task 922533fe (flow 9b575067): waiting for completion (try 0): started
2021/07/08 17:37:40  ->  n100.r10.s072.Main.out_file 9b575067 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:40 n100.r10.s072.Main.out_file 9b575067 n100/r10/n100.r10.s072.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:544312b048f445272fc06348f974787a2463937918cb647a21d3948c554f7685
	sha256:9b5750671ecfda971ceb0d351ace2daa125f1b33b0bd28e747b473d26e30de50
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/922533fecf7f94a4baf8328dfd69022d9611893f5f75fc2f48431078f5ee4404
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s072_output"
	    wget -O "n100.r10.s072_output/n100.r10.s072.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s072_output/n100.r10.s072.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s072_output/n100.r10.s072.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s072_output/n100.r10.s072.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s072_output/n100.r10.s072.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s072_output/n100.r10.s072.reference.fas" "n100.r10.s072_output/n100.r10.s072.fq1.fastq" "n100.r10.s072_output/n100.r10.s072.fq2.fastq" | samtools view -bS - > "n100.r10.s072_output/n100.r10.s072.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s072_output/n100.r10.s072.untrimmed.sorted.bam" "n100.r10.s072_output/n100.r10.s072.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s072_output/n100.r10.s072.untrimmed.sorted.bam" -b "n100.r10.s072_output/n100.r10.s072.primers.bed" -p "n100.r10.s072_output/n100.r10.s072.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s072_output/n100.r10.s072.trimmed.sorted.bam" "n100.r10.s072_output/n100.r10.s072.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s072_output/n100.r10.s072.reference.fas" "n100.r10.s072_output/n100.r10.s072.trimmed.sorted.bam" > "n100.r10.s072_output/n100.r10.s072.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s072_output/n100.r10.s072.reference.fas" --call-indels "n100.r10.s072_output/n100.r10.s072.trimmed.sorted.bam" > "n100.r10.s072_output/n100.r10.s072.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s072_output/n100.r10.s072.trimmed.sorted.bam" > "n100.r10.s072_output/n100.r10.s072.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s072_output/n100.r10.s072.depth.txt" "n100.r10.s072_output/n100.r10.s072.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s072_output/n100.r10.s072.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s072_output/n100.r10.s072.reference.fas" | bcftools consensus -m "n100.r10.s072_output/n100.r10.s072.low_depth.tsv" tmp.vcf.gz > "n100.r10.s072_output/n100.r10.s072.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s072_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:40 scheduler task c33b1ab5 (flow c0e27ff9): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:40 scheduler task c33b1ab5 (flow c0e27ff9): waiting for completion (try 0): started
2021/07/08 17:37:40  ->  n100.r10.s030.Main.out_file c0e27ff9 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:40 n100.r10.s030.Main.out_file c0e27ff9 n100/r10/n100.r10.s030.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5602cf96d065d9e2685b8ede0cac8c476aa639a745fa704abf27030f640bd536
	sha256:c0e27ff9bbc44749e2303904e3c724b831c7a129a97b5fcecf471422ee8b6a71
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c33b1ab5daec2ff526fc7da0d3ae74fbca22448c4a6c851c3d63686e3eb16da7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s030_output"
	    wget -O "n100.r10.s030_output/n100.r10.s030.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s030_output/n100.r10.s030.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s030_output/n100.r10.s030.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s030_output/n100.r10.s030.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s030_output/n100.r10.s030.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s030_output/n100.r10.s030.reference.fas" "n100.r10.s030_output/n100.r10.s030.fq1.fastq" "n100.r10.s030_output/n100.r10.s030.fq2.fastq" | samtools view -bS - > "n100.r10.s030_output/n100.r10.s030.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s030_output/n100.r10.s030.untrimmed.sorted.bam" "n100.r10.s030_output/n100.r10.s030.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s030_output/n100.r10.s030.untrimmed.sorted.bam" -b "n100.r10.s030_output/n100.r10.s030.primers.bed" -p "n100.r10.s030_output/n100.r10.s030.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s030_output/n100.r10.s030.trimmed.sorted.bam" "n100.r10.s030_output/n100.r10.s030.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s030_output/n100.r10.s030.reference.fas" "n100.r10.s030_output/n100.r10.s030.trimmed.sorted.bam" > "n100.r10.s030_output/n100.r10.s030.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s030_output/n100.r10.s030.reference.fas" --call-indels "n100.r10.s030_output/n100.r10.s030.trimmed.sorted.bam" > "n100.r10.s030_output/n100.r10.s030.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s030_output/n100.r10.s030.trimmed.sorted.bam" > "n100.r10.s030_output/n100.r10.s030.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s030_output/n100.r10.s030.depth.txt" "n100.r10.s030_output/n100.r10.s030.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s030_output/n100.r10.s030.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s030_output/n100.r10.s030.reference.fas" | bcftools consensus -m "n100.r10.s030_output/n100.r10.s030.low_depth.tsv" tmp.vcf.gz > "n100.r10.s030_output/n100.r10.s030.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s030_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:41 scheduler task 8e195244 (flow 62a7eeea): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:41 scheduler task 8e195244 (flow 62a7eeea): waiting for completion (try 0): started
2021/07/08 17:37:41  ->  n100.r10.s071.Main.out_file 62a7eeea exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:41 n100.r10.s071.Main.out_file 62a7eeea n100/r10/n100.r10.s071.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4eecd2851b4bcd27e2c316c00f77efca780536395ae85aa0511ef5ac8c54cc0c
	sha256:62a7eeeae2f4e2dbc372d6081d463eacdc84674c159b0b8bb489866f78ad49e7
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8e195244cd72c84316dcb1ca459140b588ba97bf2677b1f7817b58c3e9dbaf1d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s071_output"
	    wget -O "n100.r10.s071_output/n100.r10.s071.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s071_output/n100.r10.s071.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s071_output/n100.r10.s071.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s071_output/n100.r10.s071.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s071_output/n100.r10.s071.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s071_output/n100.r10.s071.reference.fas" "n100.r10.s071_output/n100.r10.s071.fq1.fastq" "n100.r10.s071_output/n100.r10.s071.fq2.fastq" | samtools view -bS - > "n100.r10.s071_output/n100.r10.s071.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s071_output/n100.r10.s071.untrimmed.sorted.bam" "n100.r10.s071_output/n100.r10.s071.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s071_output/n100.r10.s071.untrimmed.sorted.bam" -b "n100.r10.s071_output/n100.r10.s071.primers.bed" -p "n100.r10.s071_output/n100.r10.s071.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s071_output/n100.r10.s071.trimmed.sorted.bam" "n100.r10.s071_output/n100.r10.s071.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s071_output/n100.r10.s071.reference.fas" "n100.r10.s071_output/n100.r10.s071.trimmed.sorted.bam" > "n100.r10.s071_output/n100.r10.s071.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s071_output/n100.r10.s071.reference.fas" --call-indels "n100.r10.s071_output/n100.r10.s071.trimmed.sorted.bam" > "n100.r10.s071_output/n100.r10.s071.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s071_output/n100.r10.s071.trimmed.sorted.bam" > "n100.r10.s071_output/n100.r10.s071.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s071_output/n100.r10.s071.depth.txt" "n100.r10.s071_output/n100.r10.s071.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s071_output/n100.r10.s071.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s071_output/n100.r10.s071.reference.fas" | bcftools consensus -m "n100.r10.s071_output/n100.r10.s071.low_depth.tsv" tmp.vcf.gz > "n100.r10.s071_output/n100.r10.s071.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s071_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:41 scheduler task 3a2d4435 (flow 8e8257f7): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:41 scheduler task 3a2d4435 (flow 8e8257f7): waiting for completion (try 0): started
2021/07/08 17:37:41  ->  n100.r10.s004.Main.out_file 8e8257f7 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:41 n100.r10.s004.Main.out_file 8e8257f7 n100/r10/n100.r10.s004.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d33af64f2151f09488a5e81855c50f6d3575d4d55848413d5553b6cdf1f99921
	sha256:8e8257f7fb133e65330c0c3d1b03d0898c365f9e42494e788d58a4ea0abf788e
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3a2d4435b32c9fe8c7783226ccb71704bd663b98156e6a67847cbaa52e8d6a6b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s004_output"
	    wget -O "n100.r10.s004_output/n100.r10.s004.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s004_output/n100.r10.s004.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s004_output/n100.r10.s004.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s004_output/n100.r10.s004.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s004_output/n100.r10.s004.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s004_output/n100.r10.s004.reference.fas" "n100.r10.s004_output/n100.r10.s004.fq1.fastq" "n100.r10.s004_output/n100.r10.s004.fq2.fastq" | samtools view -bS - > "n100.r10.s004_output/n100.r10.s004.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s004_output/n100.r10.s004.untrimmed.sorted.bam" "n100.r10.s004_output/n100.r10.s004.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s004_output/n100.r10.s004.untrimmed.sorted.bam" -b "n100.r10.s004_output/n100.r10.s004.primers.bed" -p "n100.r10.s004_output/n100.r10.s004.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s004_output/n100.r10.s004.trimmed.sorted.bam" "n100.r10.s004_output/n100.r10.s004.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s004_output/n100.r10.s004.reference.fas" "n100.r10.s004_output/n100.r10.s004.trimmed.sorted.bam" > "n100.r10.s004_output/n100.r10.s004.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s004_output/n100.r10.s004.reference.fas" --call-indels "n100.r10.s004_output/n100.r10.s004.trimmed.sorted.bam" > "n100.r10.s004_output/n100.r10.s004.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s004_output/n100.r10.s004.trimmed.sorted.bam" > "n100.r10.s004_output/n100.r10.s004.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s004_output/n100.r10.s004.depth.txt" "n100.r10.s004_output/n100.r10.s004.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s004_output/n100.r10.s004.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s004_output/n100.r10.s004.reference.fas" | bcftools consensus -m "n100.r10.s004_output/n100.r10.s004.low_depth.tsv" tmp.vcf.gz > "n100.r10.s004_output/n100.r10.s004.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s004_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:41 scheduler task bc1a220d (flow 5b1cd59e): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:41 scheduler task bc1a220d (flow 5b1cd59e): waiting for completion (try 0): started
2021/07/08 17:37:41  ->  n100.r10.s044.Main.out_file 5b1cd59e exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:41 n100.r10.s044.Main.out_file 5b1cd59e n100/r10/n100.r10.s044.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5dd4b6e5a0f300634a1623356ae0ee45d18bd9942f39c81f1af0b1ad99158d22
	sha256:5b1cd59e26de0e555841e3190891e3eff27520721ff758421eedb57e4b32e56e
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bc1a220d00d522a199f7f9f01e4c77bf81519ef0e8e436ed14cb7ef961f2ae15
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s044_output"
	    wget -O "n100.r10.s044_output/n100.r10.s044.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s044_output/n100.r10.s044.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s044_output/n100.r10.s044.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s044_output/n100.r10.s044.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s044_output/n100.r10.s044.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s044_output/n100.r10.s044.reference.fas" "n100.r10.s044_output/n100.r10.s044.fq1.fastq" "n100.r10.s044_output/n100.r10.s044.fq2.fastq" | samtools view -bS - > "n100.r10.s044_output/n100.r10.s044.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s044_output/n100.r10.s044.untrimmed.sorted.bam" "n100.r10.s044_output/n100.r10.s044.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s044_output/n100.r10.s044.untrimmed.sorted.bam" -b "n100.r10.s044_output/n100.r10.s044.primers.bed" -p "n100.r10.s044_output/n100.r10.s044.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s044_output/n100.r10.s044.trimmed.sorted.bam" "n100.r10.s044_output/n100.r10.s044.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s044_output/n100.r10.s044.reference.fas" "n100.r10.s044_output/n100.r10.s044.trimmed.sorted.bam" > "n100.r10.s044_output/n100.r10.s044.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s044_output/n100.r10.s044.reference.fas" --call-indels "n100.r10.s044_output/n100.r10.s044.trimmed.sorted.bam" > "n100.r10.s044_output/n100.r10.s044.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s044_output/n100.r10.s044.trimmed.sorted.bam" > "n100.r10.s044_output/n100.r10.s044.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s044_output/n100.r10.s044.depth.txt" "n100.r10.s044_output/n100.r10.s044.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s044_output/n100.r10.s044.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s044_output/n100.r10.s044.reference.fas" | bcftools consensus -m "n100.r10.s044_output/n100.r10.s044.low_depth.tsv" tmp.vcf.gz > "n100.r10.s044_output/n100.r10.s044.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s044_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:41 scheduler task 5916483e (flow 38a4c1e8): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:41 scheduler task 5916483e (flow 38a4c1e8): waiting for completion (try 0): started
2021/07/08 17:37:41  ->  n100.r10.s093.Main.out_file 38a4c1e8 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:41 n100.r10.s093.Main.out_file 38a4c1e8 n100/r10/n100.r10.s093.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b12d22ad0707d620de9859ab11511e8db2fa5f89c6722ec36b1dfddb98760762
	sha256:38a4c1e817ab162ee350cc72542832802a6ba1be1eb2d4a5ca55a52e9d06163b
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5916483ed751b6db7d0e05e4531a24bd2f7acdd6b9ced13cadbbad7097973539
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s093_output"
	    wget -O "n100.r10.s093_output/n100.r10.s093.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s093_output/n100.r10.s093.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s093_output/n100.r10.s093.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s093_output/n100.r10.s093.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s093_output/n100.r10.s093.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s093_output/n100.r10.s093.reference.fas" "n100.r10.s093_output/n100.r10.s093.fq1.fastq" "n100.r10.s093_output/n100.r10.s093.fq2.fastq" | samtools view -bS - > "n100.r10.s093_output/n100.r10.s093.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s093_output/n100.r10.s093.untrimmed.sorted.bam" "n100.r10.s093_output/n100.r10.s093.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s093_output/n100.r10.s093.untrimmed.sorted.bam" -b "n100.r10.s093_output/n100.r10.s093.primers.bed" -p "n100.r10.s093_output/n100.r10.s093.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s093_output/n100.r10.s093.trimmed.sorted.bam" "n100.r10.s093_output/n100.r10.s093.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s093_output/n100.r10.s093.reference.fas" "n100.r10.s093_output/n100.r10.s093.trimmed.sorted.bam" > "n100.r10.s093_output/n100.r10.s093.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s093_output/n100.r10.s093.reference.fas" --call-indels "n100.r10.s093_output/n100.r10.s093.trimmed.sorted.bam" > "n100.r10.s093_output/n100.r10.s093.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s093_output/n100.r10.s093.trimmed.sorted.bam" > "n100.r10.s093_output/n100.r10.s093.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s093_output/n100.r10.s093.depth.txt" "n100.r10.s093_output/n100.r10.s093.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s093_output/n100.r10.s093.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s093_output/n100.r10.s093.reference.fas" | bcftools consensus -m "n100.r10.s093_output/n100.r10.s093.low_depth.tsv" tmp.vcf.gz > "n100.r10.s093_output/n100.r10.s093.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s093_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:41 scheduler task 974bd136 (flow 7368f9bf): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:41 scheduler task 974bd136 (flow 7368f9bf): waiting for completion (try 0): started
2021/07/08 17:37:41  ->  n100.r10.s099.Main.out_file 7368f9bf exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:41 n100.r10.s099.Main.out_file 7368f9bf n100/r10/n100.r10.s099.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6f2ec32173ba199cc1af57f3f4614095e1b683638b1d16e63d6522da28eefbcb
	sha256:7368f9bfa28df67f77e228efa8a688d48997f2b8c4c8af5253572caa16686009
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/974bd13603dad5b1449888311bc5baecc8135c52cf9b0c95a60d40c0b2ff69c7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s099_output"
	    wget -O "n100.r10.s099_output/n100.r10.s099.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s099_output/n100.r10.s099.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s099_output/n100.r10.s099.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s099_output/n100.r10.s099.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s099_output/n100.r10.s099.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s099_output/n100.r10.s099.reference.fas" "n100.r10.s099_output/n100.r10.s099.fq1.fastq" "n100.r10.s099_output/n100.r10.s099.fq2.fastq" | samtools view -bS - > "n100.r10.s099_output/n100.r10.s099.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s099_output/n100.r10.s099.untrimmed.sorted.bam" "n100.r10.s099_output/n100.r10.s099.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s099_output/n100.r10.s099.untrimmed.sorted.bam" -b "n100.r10.s099_output/n100.r10.s099.primers.bed" -p "n100.r10.s099_output/n100.r10.s099.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s099_output/n100.r10.s099.trimmed.sorted.bam" "n100.r10.s099_output/n100.r10.s099.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s099_output/n100.r10.s099.reference.fas" "n100.r10.s099_output/n100.r10.s099.trimmed.sorted.bam" > "n100.r10.s099_output/n100.r10.s099.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s099_output/n100.r10.s099.reference.fas" --call-indels "n100.r10.s099_output/n100.r10.s099.trimmed.sorted.bam" > "n100.r10.s099_output/n100.r10.s099.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s099_output/n100.r10.s099.trimmed.sorted.bam" > "n100.r10.s099_output/n100.r10.s099.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s099_output/n100.r10.s099.depth.txt" "n100.r10.s099_output/n100.r10.s099.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s099_output/n100.r10.s099.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s099_output/n100.r10.s099.reference.fas" | bcftools consensus -m "n100.r10.s099_output/n100.r10.s099.low_depth.tsv" tmp.vcf.gz > "n100.r10.s099_output/n100.r10.s099.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s099_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:37:41 scheduler task 36958e06 (flow c159c17e): submitting (try 0): successful, next state: waiting for completion
2021/07/08 17:37:41 scheduler task 36958e06 (flow c159c17e): waiting for completion (try 0): started
2021/07/08 17:37:41  ->  n100.r10.s028.Main.out_file c159c17e exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 17:37:41 n100.r10.s028.Main.out_file c159c17e n100/r10/n100.r10.s028.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:71542303c03d9145b2538e13302d1b2e90c3c4af0bb165e3a98fa99c31ebd49f
	sha256:c159c17ea9b2ce3f571419c51552c07761890e0b93e25927e3d090db115edadb
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/36958e06c70f71b457f4d0221fb7c81a840ece39de5f62cb2aed13ce9b4f3266
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s028_output"
	    wget -O "n100.r10.s028_output/n100.r10.s028.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s028_output/n100.r10.s028.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s028_output/n100.r10.s028.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s028_output/n100.r10.s028.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s028_output/n100.r10.s028.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s028_output/n100.r10.s028.reference.fas" "n100.r10.s028_output/n100.r10.s028.fq1.fastq" "n100.r10.s028_output/n100.r10.s028.fq2.fastq" | samtools view -bS - > "n100.r10.s028_output/n100.r10.s028.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s028_output/n100.r10.s028.untrimmed.sorted.bam" "n100.r10.s028_output/n100.r10.s028.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s028_output/n100.r10.s028.untrimmed.sorted.bam" -b "n100.r10.s028_output/n100.r10.s028.primers.bed" -p "n100.r10.s028_output/n100.r10.s028.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s028_output/n100.r10.s028.trimmed.sorted.bam" "n100.r10.s028_output/n100.r10.s028.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s028_output/n100.r10.s028.reference.fas" "n100.r10.s028_output/n100.r10.s028.trimmed.sorted.bam" > "n100.r10.s028_output/n100.r10.s028.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s028_output/n100.r10.s028.reference.fas" --call-indels "n100.r10.s028_output/n100.r10.s028.trimmed.sorted.bam" > "n100.r10.s028_output/n100.r10.s028.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s028_output/n100.r10.s028.trimmed.sorted.bam" > "n100.r10.s028_output/n100.r10.s028.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s028_output/n100.r10.s028.depth.txt" "n100.r10.s028_output/n100.r10.s028.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s028_output/n100.r10.s028.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s028_output/n100.r10.s028.reference.fas" | bcftools consensus -m "n100.r10.s028_output/n100.r10.s028.low_depth.tsv" tmp.vcf.gz > "n100.r10.s028_output/n100.r10.s028.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s028_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 17:41:40 scheduler task fff01a1f (flow a2254fff): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:41:40 scheduler task fff01a1f (flow a2254fff): promoting objects (try 0): started
2021/07/08 17:41:40 scheduler task fff01a1f (flow a2254fff): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:41:40 scheduler task fff01a1f (flow a2254fff): retrieving diagnostic output (try 0): started
2021/07/08 17:41:40 scheduler task fff01a1f (flow a2254fff): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:41:40 scheduler task fff01a1f (flow a2254fff): retrieving result (try 0): started
2021/07/08 17:41:40 scheduler task fff01a1f (flow a2254fff): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:41:40 scheduler task fff01a1f (flow a2254fff): transferring output (try 0): started
2021/07/08 17:41:40 scheduler task 07a286b8 (flow c59eb1d7): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:41:40 scheduler task 07a286b8 (flow c59eb1d7): promoting objects (try 0): started
2021/07/08 17:41:41 scheduler task 07a286b8 (flow c59eb1d7): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:41:41 scheduler task 07a286b8 (flow c59eb1d7): retrieving diagnostic output (try 0): started
2021/07/08 17:41:41 scheduler task 07a286b8 (flow c59eb1d7): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:41:41 scheduler task afc69f69 (flow 27efc78a): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:41:41 scheduler task 07a286b8 (flow c59eb1d7): retrieving result (try 0): started
2021/07/08 17:41:41 scheduler task afc69f69 (flow 27efc78a): promoting objects (try 0): started
2021/07/08 17:41:41 scheduler task afc69f69 (flow 27efc78a): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:41:41 scheduler task 07a286b8 (flow c59eb1d7): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:41:41 scheduler task afc69f69 (flow 27efc78a): retrieving diagnostic output (try 0): started
2021/07/08 17:41:41 scheduler task 07a286b8 (flow c59eb1d7): transferring output (try 0): started
2021/07/08 17:41:41 scheduler task afc69f69 (flow 27efc78a): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:41:41 scheduler task afc69f69 (flow 27efc78a): retrieving result (try 0): started
2021/07/08 17:41:41 scheduler task afc69f69 (flow 27efc78a): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:41:41 scheduler task afc69f69 (flow 27efc78a): transferring output (try 0): started
2021/07/08 17:41:41 scheduler task fff01a1f (flow a2254fff): transferring output (try 0): successful, next state: unloading
2021/07/08 17:41:41 scheduler task fff01a1f (flow a2254fff): unloading (try 0): started
2021/07/08 17:41:41 scheduler task fff01a1f (flow a2254fff): unloading list<val<.=5f3e6a05 35.8MiB> 35.8MiB>
2021/07/08 17:41:41 scheduler task fff01a1f (flow a2254fff): unloading val<.=27a911d1 35.4MiB>
2021/07/08 17:41:41 scheduler task fff01a1f (flow a2254fff): unloading val<.=db880bf6 35.4MiB>
2021/07/08 17:41:41 scheduler task fff01a1f (flow a2254fff): unloaded val<.=27a911d1 35.4MiB>
2021/07/08 17:41:41 scheduler task fff01a1f (flow a2254fff): unloaded list<val<.=5f3e6a05 35.8MiB> 35.8MiB>
2021/07/08 17:41:41 scheduler task fff01a1f (flow a2254fff): unloaded val<.=db880bf6 35.4MiB>
2021/07/08 17:41:41 scheduler task fff01a1f (flow a2254fff): unloading (try 0): successful, next state: complete
2021/07/08 17:41:41  <-  n100.r10.s006.Main.out_file a2254fff ok     exec 3m58s 35.8MiB
2021/07/08 17:41:41 n100.r10.s006.Main.out_file a2254fff n100/r10/n100.r10.s006.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:097c2f458a1e1a848fdde9c30a1d3c487125f91251a541bddfbdf96bfb77cb8f
	sha256:a2254fff658a2d16b797e002fabf78095bcf6c9b8d85b2977db5216a721334d5
	ec2-3-16-66-179.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/fff01a1f2d0a73e9180569f37a060543645979fc4358b3c26e5bfa9cbc56336f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s006_output"
	    wget -O "n100.r10.s006_output/n100.r10.s006.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s006_output/n100.r10.s006.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s006_output/n100.r10.s006.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s006_output/n100.r10.s006.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s006_output/n100.r10.s006.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s006_output/n100.r10.s006.reference.fas" "n100.r10.s006_output/n100.r10.s006.fq1.fastq" "n100.r10.s006_output/n100.r10.s006.fq2.fastq" | samtools view -bS - > "n100.r10.s006_output/n100.r10.s006.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s006_output/n100.r10.s006.untrimmed.sorted.bam" "n100.r10.s006_output/n100.r10.s006.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s006_output/n100.r10.s006.untrimmed.sorted.bam" -b "n100.r10.s006_output/n100.r10.s006.primers.bed" -p "n100.r10.s006_output/n100.r10.s006.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s006_output/n100.r10.s006.trimmed.sorted.bam" "n100.r10.s006_output/n100.r10.s006.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s006_output/n100.r10.s006.reference.fas" "n100.r10.s006_output/n100.r10.s006.trimmed.sorted.bam" > "n100.r10.s006_output/n100.r10.s006.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s006_output/n100.r10.s006.reference.fas" --call-indels "n100.r10.s006_output/n100.r10.s006.trimmed.sorted.bam" > "n100.r10.s006_output/n100.r10.s006.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s006_output/n100.r10.s006.trimmed.sorted.bam" > "n100.r10.s006_output/n100.r10.s006.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s006_output/n100.r10.s006.depth.txt" "n100.r10.s006_output/n100.r10.s006.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s006_output/n100.r10.s006.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s006_output/n100.r10.s006.reference.fas" | bcftools consensus -m "n100.r10.s006_output/n100.r10.s006.low_depth.tsv" tmp.vcf.gz > "n100.r10.s006_output/n100.r10.s006.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s006_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:5f3e6a0574f0e45723b64fcd273bd3a96fe088ccceb29c437c83f7e9dc5cca56 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=17.0MiB max=124.9MiB
	    disk mean=8.9MiB max=35.8MiB
	    tmp mean=259B max=1.0KiB
2021/07/08 17:41:41 scheduler task a50d16b6 (flow 2d1690f8): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s006.tar.gz resources {}
2021/07/08 17:41:41  ->  n100.r10.s006.Main.cp_out_file 2d1690f8 exec extern s3://niema-test/n100/r10/n100.r10.s006.tar.gz 35.8MiB
2021/07/08 17:41:41 scheduler task 07a286b8 (flow c59eb1d7): transferring output (try 0): successful, next state: unloading
2021/07/08 17:41:41 scheduler task 07a286b8 (flow c59eb1d7): unloading (try 0): started
2021/07/08 17:41:41 scheduler task 07a286b8 (flow c59eb1d7): unloading list<val<.=13892ec2 35.7MiB> 35.7MiB>
2021/07/08 17:41:41 scheduler task 07a286b8 (flow c59eb1d7): unloading val<.=6bc5eaec 35.4MiB>
2021/07/08 17:41:41 scheduler task 07a286b8 (flow c59eb1d7): unloading val<.=2093bb6e 35.4MiB>
2021/07/08 17:41:41 scheduler task 07a286b8 (flow c59eb1d7): unloaded list<val<.=13892ec2 35.7MiB> 35.7MiB>
2021/07/08 17:41:41 scheduler task afc69f69 (flow 27efc78a): transferring output (try 0): successful, next state: unloading
2021/07/08 17:41:41 scheduler task 07a286b8 (flow c59eb1d7): unloaded val<.=2093bb6e 35.4MiB>
2021/07/08 17:41:41 scheduler task 07a286b8 (flow c59eb1d7): unloaded val<.=6bc5eaec 35.4MiB>
2021/07/08 17:41:41 scheduler task 07a286b8 (flow c59eb1d7): unloading (try 0): successful, next state: complete
2021/07/08 17:41:41 scheduler task afc69f69 (flow 27efc78a): unloading (try 0): started
2021/07/08 17:41:41 scheduler task afc69f69 (flow 27efc78a): unloading list<val<.=ce4ba5cf 35.7MiB> 35.7MiB>
2021/07/08 17:41:41 scheduler task afc69f69 (flow 27efc78a): unloading val<.=12dddcc7 35.4MiB>
2021/07/08 17:41:41 scheduler task afc69f69 (flow 27efc78a): unloading val<.=f89d2dc1 35.4MiB>
2021/07/08 17:41:41  <-  n100.r10.s029.Main.out_file c59eb1d7 ok     exec 3m58s 35.7MiB
2021/07/08 17:41:41 n100.r10.s029.Main.out_file c59eb1d7 n100/r10/n100.r10.s029.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:37cc336a16333fa5dd97b858f646ffe990a011ac4a397cc3d38fade1924e0b60
	sha256:c59eb1d7c71e87e49f55f2733eb2846214b1ad05acec36ecaac24ed0023b51ec
	ec2-3-16-66-179.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/07a286b85d320d9a9d113d154f5f1a653b291f968a021c24304414cf468b3003
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s029_output"
	    wget -O "n100.r10.s029_output/n100.r10.s029.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s029_output/n100.r10.s029.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s029_output/n100.r10.s029.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s029_output/n100.r10.s029.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s029_output/n100.r10.s029.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s029_output/n100.r10.s029.reference.fas" "n100.r10.s029_output/n100.r10.s029.fq1.fastq" "n100.r10.s029_output/n100.r10.s029.fq2.fastq" | samtools view -bS - > "n100.r10.s029_output/n100.r10.s029.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s029_output/n100.r10.s029.untrimmed.sorted.bam" "n100.r10.s029_output/n100.r10.s029.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s029_output/n100.r10.s029.untrimmed.sorted.bam" -b "n100.r10.s029_output/n100.r10.s029.primers.bed" -p "n100.r10.s029_output/n100.r10.s029.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s029_output/n100.r10.s029.trimmed.sorted.bam" "n100.r10.s029_output/n100.r10.s029.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s029_output/n100.r10.s029.reference.fas" "n100.r10.s029_output/n100.r10.s029.trimmed.sorted.bam" > "n100.r10.s029_output/n100.r10.s029.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s029_output/n100.r10.s029.reference.fas" --call-indels "n100.r10.s029_output/n100.r10.s029.trimmed.sorted.bam" > "n100.r10.s029_output/n100.r10.s029.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s029_output/n100.r10.s029.trimmed.sorted.bam" > "n100.r10.s029_output/n100.r10.s029.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s029_output/n100.r10.s029.depth.txt" "n100.r10.s029_output/n100.r10.s029.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s029_output/n100.r10.s029.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s029_output/n100.r10.s029.reference.fas" | bcftools consensus -m "n100.r10.s029_output/n100.r10.s029.low_depth.tsv" tmp.vcf.gz > "n100.r10.s029_output/n100.r10.s029.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s029_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:13892ec24bbccca50d94f57c0516fb3ab1be8902488563af74c07e1f1e8d2e86 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=17.1MiB max=124.8MiB
	    disk mean=8.9MiB max=35.7MiB
	    tmp mean=259B max=1.0KiB
2021/07/08 17:41:41 scheduler task 8b83b158 (flow f38283e6): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s029.tar.gz resources {}
2021/07/08 17:41:41  ->  n100.r10.s029.Main.cp_out_file f38283e6 exec extern s3://niema-test/n100/r10/n100.r10.s029.tar.gz 35.7MiB
2021/07/08 17:41:42 scheduler task afc69f69 (flow 27efc78a): unloaded val<.=12dddcc7 35.4MiB>
2021/07/08 17:41:42 scheduler task afc69f69 (flow 27efc78a): unloaded list<val<.=ce4ba5cf 35.7MiB> 35.7MiB>
2021/07/08 17:41:42 scheduler task afc69f69 (flow 27efc78a): unloaded val<.=f89d2dc1 35.4MiB>
2021/07/08 17:41:42 scheduler task afc69f69 (flow 27efc78a): unloading (try 0): successful, next state: complete
2021/07/08 17:41:42  <-  n100.r10.s007.Main.out_file 27efc78a ok     exec 3m58s 35.7MiB
2021/07/08 17:41:42 n100.r10.s007.Main.out_file 27efc78a n100/r10/n100.r10.s007.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9594de9a45908a64cdf76dedd9470008aae4db0dc517be8e5017e7335b1ce078
	sha256:27efc78abbe3af9a6b249d665f316deaffc9ab4f704d912b098a620f2660199c
	ec2-3-16-66-179.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/afc69f69e8ef8254472a9114b9282afdf7cff00b63a07d7c4f09f7d71bde7ef9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s007_output"
	    wget -O "n100.r10.s007_output/n100.r10.s007.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s007_output/n100.r10.s007.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s007_output/n100.r10.s007.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s007_output/n100.r10.s007.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s007_output/n100.r10.s007.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s007_output/n100.r10.s007.reference.fas" "n100.r10.s007_output/n100.r10.s007.fq1.fastq" "n100.r10.s007_output/n100.r10.s007.fq2.fastq" | samtools view -bS - > "n100.r10.s007_output/n100.r10.s007.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s007_output/n100.r10.s007.untrimmed.sorted.bam" "n100.r10.s007_output/n100.r10.s007.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s007_output/n100.r10.s007.untrimmed.sorted.bam" -b "n100.r10.s007_output/n100.r10.s007.primers.bed" -p "n100.r10.s007_output/n100.r10.s007.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s007_output/n100.r10.s007.trimmed.sorted.bam" "n100.r10.s007_output/n100.r10.s007.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s007_output/n100.r10.s007.reference.fas" "n100.r10.s007_output/n100.r10.s007.trimmed.sorted.bam" > "n100.r10.s007_output/n100.r10.s007.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s007_output/n100.r10.s007.reference.fas" --call-indels "n100.r10.s007_output/n100.r10.s007.trimmed.sorted.bam" > "n100.r10.s007_output/n100.r10.s007.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s007_output/n100.r10.s007.trimmed.sorted.bam" > "n100.r10.s007_output/n100.r10.s007.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s007_output/n100.r10.s007.depth.txt" "n100.r10.s007_output/n100.r10.s007.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s007_output/n100.r10.s007.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s007_output/n100.r10.s007.reference.fas" | bcftools consensus -m "n100.r10.s007_output/n100.r10.s007.low_depth.tsv" tmp.vcf.gz > "n100.r10.s007_output/n100.r10.s007.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s007_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:ce4ba5cf1c7f6a4f458b58444f7d6d253d7210fa6dfcd189c30f578c1cc1249e 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=17.3MiB max=124.5MiB
	    disk mean=8.9MiB max=35.7MiB
	    tmp mean=262B max=1.0KiB
2021/07/08 17:41:42 scheduler task 0a3fcdad (flow e7903573): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s007.tar.gz resources {}
2021/07/08 17:41:42  ->  n100.r10.s007.Main.cp_out_file e7903573 exec extern s3://niema-test/n100/r10/n100.r10.s007.tar.gz 35.7MiB
2021/07/08 17:41:42 scheduler task 4bad225b (flow d1003e88): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:41:42 scheduler task 4bad225b (flow d1003e88): promoting objects (try 0): started
2021/07/08 17:41:42 scheduler task 4bad225b (flow d1003e88): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:41:42 scheduler task 4bad225b (flow d1003e88): retrieving diagnostic output (try 0): started
2021/07/08 17:41:42 scheduler task 4bad225b (flow d1003e88): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:41:42 scheduler task 4bad225b (flow d1003e88): retrieving result (try 0): started
2021/07/08 17:41:42 scheduler task 4bad225b (flow d1003e88): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:41:42 scheduler task 4bad225b (flow d1003e88): transferring output (try 0): started
2021/07/08 17:41:43 scheduler task 0a3fcdad (flow e7903573): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:ce4ba5cf1c7f6a4f458b58444f7d6d253d7210fa6dfcd189c30f578c1cc1249e -> s3://niema-test/n100/r10/n100.r10.s007.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:41:43  <-  n100.r10.s007.Main.cp_out_file e7903573 ok   extern 0s 35.7MiB
2021/07/08 17:41:43 scheduler task a50d16b6 (flow 2d1690f8): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:5f3e6a0574f0e45723b64fcd273bd3a96fe088ccceb29c437c83f7e9dc5cca56 -> s3://niema-test/n100/r10/n100.r10.s006.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:41:43  <-  n100.r10.s006.Main.cp_out_file 2d1690f8 ok   extern 0s 35.8MiB
2021/07/08 17:41:43 scheduler task 4bad225b (flow d1003e88): transferring output (try 0): successful, next state: unloading
2021/07/08 17:41:43 scheduler task 4bad225b (flow d1003e88): unloading (try 0): started
2021/07/08 17:41:43 scheduler task 4bad225b (flow d1003e88): unloading list<val<.=eec0ffe0 35.7MiB> 35.7MiB>
2021/07/08 17:41:43 scheduler task 4bad225b (flow d1003e88): unloading val<.=e4a44068 35.4MiB>
2021/07/08 17:41:43 scheduler task 4bad225b (flow d1003e88): unloading val<.=62dd7043 35.4MiB>
2021/07/08 17:41:43 scheduler task 4bad225b (flow d1003e88): unloaded list<val<.=eec0ffe0 35.7MiB> 35.7MiB>
2021/07/08 17:41:43 scheduler task 4bad225b (flow d1003e88): unloaded val<.=62dd7043 35.4MiB>
2021/07/08 17:41:43 scheduler task 4bad225b (flow d1003e88): unloaded val<.=e4a44068 35.4MiB>
2021/07/08 17:41:43 scheduler task 4bad225b (flow d1003e88): unloading (try 0): successful, next state: complete
2021/07/08 17:41:43  <-  n100.r10.s057.Main.out_file d1003e88 ok     exec 4m0s 35.7MiB
2021/07/08 17:41:43 n100.r10.s057.Main.out_file d1003e88 n100/r10/n100.r10.s057.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:df229e2c9385c75fc8e6a5d21a120c1bef50968e2abd97312c70c9d50dadda21
	sha256:d1003e88429eeb806e285bbe63de9c648efba20026271ff9c27b0d9d87ce115f
	ec2-3-16-66-179.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4bad225b7f8bbb218bb8544a24f7cdc892a5097edaed4c22e5afffdaa445624c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s057_output"
	    wget -O "n100.r10.s057_output/n100.r10.s057.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s057_output/n100.r10.s057.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s057_output/n100.r10.s057.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s057_output/n100.r10.s057.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s057_output/n100.r10.s057.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s057_output/n100.r10.s057.reference.fas" "n100.r10.s057_output/n100.r10.s057.fq1.fastq" "n100.r10.s057_output/n100.r10.s057.fq2.fastq" | samtools view -bS - > "n100.r10.s057_output/n100.r10.s057.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s057_output/n100.r10.s057.untrimmed.sorted.bam" "n100.r10.s057_output/n100.r10.s057.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s057_output/n100.r10.s057.untrimmed.sorted.bam" -b "n100.r10.s057_output/n100.r10.s057.primers.bed" -p "n100.r10.s057_output/n100.r10.s057.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s057_output/n100.r10.s057.trimmed.sorted.bam" "n100.r10.s057_output/n100.r10.s057.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s057_output/n100.r10.s057.reference.fas" "n100.r10.s057_output/n100.r10.s057.trimmed.sorted.bam" > "n100.r10.s057_output/n100.r10.s057.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s057_output/n100.r10.s057.reference.fas" --call-indels "n100.r10.s057_output/n100.r10.s057.trimmed.sorted.bam" > "n100.r10.s057_output/n100.r10.s057.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s057_output/n100.r10.s057.trimmed.sorted.bam" > "n100.r10.s057_output/n100.r10.s057.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s057_output/n100.r10.s057.depth.txt" "n100.r10.s057_output/n100.r10.s057.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s057_output/n100.r10.s057.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s057_output/n100.r10.s057.reference.fas" | bcftools consensus -m "n100.r10.s057_output/n100.r10.s057.low_depth.tsv" tmp.vcf.gz > "n100.r10.s057_output/n100.r10.s057.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s057_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:eec0ffe0fea09d6a15d6e6c0ec2aa0e8edae35bce9ee4302cc24354663ff938e 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=17.0MiB max=126.8MiB
	    disk mean=13.2MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:41:43 scheduler task f3ad4176 (flow 87355b19): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s057.tar.gz resources {}
2021/07/08 17:41:43  ->  n100.r10.s057.Main.cp_out_file 87355b19 exec extern s3://niema-test/n100/r10/n100.r10.s057.tar.gz 35.7MiB
2021/07/08 17:41:43 scheduler task 8b83b158 (flow f38283e6): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:13892ec24bbccca50d94f57c0516fb3ab1be8902488563af74c07e1f1e8d2e86 -> s3://niema-test/n100/r10/n100.r10.s029.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:41:43  <-  n100.r10.s029.Main.cp_out_file f38283e6 ok   extern 0s 35.7MiB
2021/07/08 17:41:44 scheduler task f3ad4176 (flow 87355b19): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:eec0ffe0fea09d6a15d6e6c0ec2aa0e8edae35bce9ee4302cc24354663ff938e -> s3://niema-test/n100/r10/n100.r10.s057.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:41:44  <-  n100.r10.s057.Main.cp_out_file 87355b19 ok   extern 0s 35.7MiB
2021/07/08 17:42:25 scheduler task 404ec61a (flow 5ae42756): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:25 scheduler task 404ec61a (flow 5ae42756): promoting objects (try 0): started
2021/07/08 17:42:26 scheduler task 404ec61a (flow 5ae42756): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:26 scheduler task 404ec61a (flow 5ae42756): retrieving diagnostic output (try 0): started
2021/07/08 17:42:26 scheduler task 404ec61a (flow 5ae42756): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:26 scheduler task 404ec61a (flow 5ae42756): retrieving result (try 0): started
2021/07/08 17:42:26 scheduler task 404ec61a (flow 5ae42756): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:26 scheduler task 404ec61a (flow 5ae42756): transferring output (try 0): started
2021/07/08 17:42:26 scheduler task 277a5fa1 (flow abe7077c): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:26 scheduler task 277a5fa1 (flow abe7077c): promoting objects (try 0): started
2021/07/08 17:42:26 scheduler task 277a5fa1 (flow abe7077c): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:26 scheduler task 277a5fa1 (flow abe7077c): retrieving diagnostic output (try 0): started
2021/07/08 17:42:26 scheduler task 277a5fa1 (flow abe7077c): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:26 scheduler task 277a5fa1 (flow abe7077c): retrieving result (try 0): started
2021/07/08 17:42:26 scheduler task 277a5fa1 (flow abe7077c): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:26 scheduler task 277a5fa1 (flow abe7077c): transferring output (try 0): started
2021/07/08 17:42:27 scheduler task 404ec61a (flow 5ae42756): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:27 scheduler task 404ec61a (flow 5ae42756): unloading (try 0): started
2021/07/08 17:42:27 scheduler task 404ec61a (flow 5ae42756): unloading list<val<.=01e7f8c5 35.7MiB> 35.7MiB>
2021/07/08 17:42:27 scheduler task 404ec61a (flow 5ae42756): unloading val<.=4a62269c 35.4MiB>
2021/07/08 17:42:27 scheduler task 404ec61a (flow 5ae42756): unloading val<.=ef8b8c11 35.4MiB>
2021/07/08 17:42:27 scheduler task 404ec61a (flow 5ae42756): unloaded val<.=ef8b8c11 35.4MiB>
2021/07/08 17:42:27 scheduler task 404ec61a (flow 5ae42756): unloaded list<val<.=01e7f8c5 35.7MiB> 35.7MiB>
2021/07/08 17:42:27 scheduler task 404ec61a (flow 5ae42756): unloaded val<.=4a62269c 35.4MiB>
2021/07/08 17:42:27 scheduler task 404ec61a (flow 5ae42756): unloading (try 0): successful, next state: complete
2021/07/08 17:42:27  <-  n100.r10.s077.Main.out_file 5ae42756 ok     exec 4m40s 35.7MiB
2021/07/08 17:42:27 n100.r10.s077.Main.out_file 5ae42756 n100/r10/n100.r10.s077.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:bb2321d3def4158fc09331682c52c72fce42767ca217bdc6e091b7dc0ab1a555
	sha256:5ae427569f0a76fccd6eeddd5ff9e6ad63103e7e8e517c93db36c5769d4dd797
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/404ec61a6468969f4ef70fc044602afca089d27ed83807682bafdda79f162b06
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s077_output"
	    wget -O "n100.r10.s077_output/n100.r10.s077.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s077_output/n100.r10.s077.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s077_output/n100.r10.s077.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s077_output/n100.r10.s077.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s077_output/n100.r10.s077.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s077_output/n100.r10.s077.reference.fas" "n100.r10.s077_output/n100.r10.s077.fq1.fastq" "n100.r10.s077_output/n100.r10.s077.fq2.fastq" | samtools view -bS - > "n100.r10.s077_output/n100.r10.s077.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s077_output/n100.r10.s077.untrimmed.sorted.bam" "n100.r10.s077_output/n100.r10.s077.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s077_output/n100.r10.s077.untrimmed.sorted.bam" -b "n100.r10.s077_output/n100.r10.s077.primers.bed" -p "n100.r10.s077_output/n100.r10.s077.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s077_output/n100.r10.s077.trimmed.sorted.bam" "n100.r10.s077_output/n100.r10.s077.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s077_output/n100.r10.s077.reference.fas" "n100.r10.s077_output/n100.r10.s077.trimmed.sorted.bam" > "n100.r10.s077_output/n100.r10.s077.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s077_output/n100.r10.s077.reference.fas" --call-indels "n100.r10.s077_output/n100.r10.s077.trimmed.sorted.bam" > "n100.r10.s077_output/n100.r10.s077.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s077_output/n100.r10.s077.trimmed.sorted.bam" > "n100.r10.s077_output/n100.r10.s077.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s077_output/n100.r10.s077.depth.txt" "n100.r10.s077_output/n100.r10.s077.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s077_output/n100.r10.s077.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s077_output/n100.r10.s077.reference.fas" | bcftools consensus -m "n100.r10.s077_output/n100.r10.s077.low_depth.tsv" tmp.vcf.gz > "n100.r10.s077_output/n100.r10.s077.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s077_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:01e7f8c50f6b05d0497787697c0bf9694a3ff182d6769e778755d09470019831 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=19.4MiB max=130.4MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=619B max=2.0KiB
2021/07/08 17:42:27 scheduler task a710ff62 (flow e2de7fea): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s077.tar.gz resources {}
2021/07/08 17:42:27  ->  n100.r10.s077.Main.cp_out_file e2de7fea exec extern s3://niema-test/n100/r10/n100.r10.s077.tar.gz 35.7MiB
2021/07/08 17:42:27 scheduler task 277a5fa1 (flow abe7077c): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:27 scheduler task 277a5fa1 (flow abe7077c): unloading (try 0): started
2021/07/08 17:42:27 scheduler task 277a5fa1 (flow abe7077c): unloading list<val<.=519c9ad7 35.7MiB> 35.7MiB>
2021/07/08 17:42:27 scheduler task 277a5fa1 (flow abe7077c): unloading val<.=58b8b7f4 35.4MiB>
2021/07/08 17:42:27 scheduler task 277a5fa1 (flow abe7077c): unloading val<.=03d84d00 35.4MiB>
2021/07/08 17:42:27 scheduler task 277a5fa1 (flow abe7077c): unloaded val<.=58b8b7f4 35.4MiB>
2021/07/08 17:42:27 scheduler task 277a5fa1 (flow abe7077c): unloaded list<val<.=519c9ad7 35.7MiB> 35.7MiB>
2021/07/08 17:42:27 scheduler task 277a5fa1 (flow abe7077c): unloaded val<.=03d84d00 35.4MiB>
2021/07/08 17:42:27 scheduler task 277a5fa1 (flow abe7077c): unloading (try 0): successful, next state: complete
2021/07/08 17:42:27  <-  n100.r10.s010.Main.out_file abe7077c ok     exec 4m41s 35.7MiB
2021/07/08 17:42:27 n100.r10.s010.Main.out_file abe7077c n100/r10/n100.r10.s010.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f18b5afd28b63bf462ff60b9daf6a1617cbf30ee5f669272ea13ead0300f6980
	sha256:abe7077c29873dadf27670bc84f45aa32d8a6dbe9e712d8bb55bba98fca0b6c0
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/277a5fa111f71cf39ca8050c74ddecb3b609a7857f1600e96325b0d6350f83a1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s010_output"
	    wget -O "n100.r10.s010_output/n100.r10.s010.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s010_output/n100.r10.s010.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s010_output/n100.r10.s010.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s010_output/n100.r10.s010.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s010_output/n100.r10.s010.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s010_output/n100.r10.s010.reference.fas" "n100.r10.s010_output/n100.r10.s010.fq1.fastq" "n100.r10.s010_output/n100.r10.s010.fq2.fastq" | samtools view -bS - > "n100.r10.s010_output/n100.r10.s010.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s010_output/n100.r10.s010.untrimmed.sorted.bam" "n100.r10.s010_output/n100.r10.s010.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s010_output/n100.r10.s010.untrimmed.sorted.bam" -b "n100.r10.s010_output/n100.r10.s010.primers.bed" -p "n100.r10.s010_output/n100.r10.s010.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s010_output/n100.r10.s010.trimmed.sorted.bam" "n100.r10.s010_output/n100.r10.s010.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s010_output/n100.r10.s010.reference.fas" "n100.r10.s010_output/n100.r10.s010.trimmed.sorted.bam" > "n100.r10.s010_output/n100.r10.s010.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s010_output/n100.r10.s010.reference.fas" --call-indels "n100.r10.s010_output/n100.r10.s010.trimmed.sorted.bam" > "n100.r10.s010_output/n100.r10.s010.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s010_output/n100.r10.s010.trimmed.sorted.bam" > "n100.r10.s010_output/n100.r10.s010.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s010_output/n100.r10.s010.depth.txt" "n100.r10.s010_output/n100.r10.s010.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s010_output/n100.r10.s010.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s010_output/n100.r10.s010.reference.fas" | bcftools consensus -m "n100.r10.s010_output/n100.r10.s010.low_depth.tsv" tmp.vcf.gz > "n100.r10.s010_output/n100.r10.s010.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s010_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:519c9ad70d2e4431cefa6debfaf13ab7f94af0d689259c99b0a6858a3c65053e 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.1MiB max=127.7MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=628B max=2.1KiB
2021/07/08 17:42:27 scheduler task 7520c148 (flow 9b7270b4): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s010.tar.gz resources {}
2021/07/08 17:42:27  ->  n100.r10.s010.Main.cp_out_file 9b7270b4 exec extern s3://niema-test/n100/r10/n100.r10.s010.tar.gz 35.7MiB
2021/07/08 17:42:28 scheduler task a710ff62 (flow e2de7fea): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:01e7f8c50f6b05d0497787697c0bf9694a3ff182d6769e778755d09470019831 -> s3://niema-test/n100/r10/n100.r10.s077.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:42:28  <-  n100.r10.s077.Main.cp_out_file e2de7fea ok   extern 0s 35.7MiB
2021/07/08 17:42:28 scheduler task 7520c148 (flow 9b7270b4): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:519c9ad70d2e4431cefa6debfaf13ab7f94af0d689259c99b0a6858a3c65053e -> s3://niema-test/n100/r10/n100.r10.s010.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:42:28  <-  n100.r10.s010.Main.cp_out_file 9b7270b4 ok   extern 0s 35.7MiB
2021/07/08 17:42:29 scheduler task 600bf6cf (flow 21732518): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:29 scheduler task 600bf6cf (flow 21732518): promoting objects (try 0): started
2021/07/08 17:42:29 scheduler task 600bf6cf (flow 21732518): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:29 scheduler task 600bf6cf (flow 21732518): retrieving diagnostic output (try 0): started
2021/07/08 17:42:29 scheduler task 600bf6cf (flow 21732518): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:29 scheduler task 600bf6cf (flow 21732518): retrieving result (try 0): started
2021/07/08 17:42:29 scheduler task 600bf6cf (flow 21732518): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:29 scheduler task 600bf6cf (flow 21732518): transferring output (try 0): started
2021/07/08 17:42:29 scheduler task e996e2c5 (flow d3393061): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:29 scheduler task e996e2c5 (flow d3393061): promoting objects (try 0): started
2021/07/08 17:42:29 scheduler task e996e2c5 (flow d3393061): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:29 scheduler task e996e2c5 (flow d3393061): retrieving diagnostic output (try 0): started
2021/07/08 17:42:29 scheduler task e996e2c5 (flow d3393061): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:29 scheduler task e996e2c5 (flow d3393061): retrieving result (try 0): started
2021/07/08 17:42:29 scheduler task 600bf6cf (flow 21732518): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:29 scheduler task 600bf6cf (flow 21732518): unloading (try 0): started
2021/07/08 17:42:29 scheduler task 600bf6cf (flow 21732518): unloading list<val<.=43689972 35.7MiB> 35.7MiB>
2021/07/08 17:42:29 scheduler task 600bf6cf (flow 21732518): unloading val<.=df436ce9 35.4MiB>
2021/07/08 17:42:29 scheduler task 600bf6cf (flow 21732518): unloading val<.=987ef7ae 35.4MiB>
2021/07/08 17:42:29 scheduler task e996e2c5 (flow d3393061): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:29 scheduler task e996e2c5 (flow d3393061): transferring output (try 0): started
2021/07/08 17:42:29 scheduler task 600bf6cf (flow 21732518): unloaded val<.=df436ce9 35.4MiB>
2021/07/08 17:42:29 scheduler task 600bf6cf (flow 21732518): unloaded list<val<.=43689972 35.7MiB> 35.7MiB>
2021/07/08 17:42:30 scheduler task 600bf6cf (flow 21732518): unloaded val<.=987ef7ae 35.4MiB>
2021/07/08 17:42:30 scheduler task 600bf6cf (flow 21732518): unloading (try 0): successful, next state: complete
2021/07/08 17:42:30  <-  n100.r10.s012.Main.out_file 21732518 ok     exec 4m44s 35.7MiB
2021/07/08 17:42:30 n100.r10.s012.Main.out_file 21732518 n100/r10/n100.r10.s012.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4a18e557a41b2daddf8c761d7d4d24094d0ccb5e6d7c9590b1bb275eb0a88547
	sha256:217325182ddf318ea4103c2d2f611a85b2c038ea5b184f66c33f0b36bb314683
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/600bf6cfdc7cf1b0af67d839b23093afd7db91f0b03def27cd52f1bf170a8222
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s012_output"
	    wget -O "n100.r10.s012_output/n100.r10.s012.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s012_output/n100.r10.s012.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s012_output/n100.r10.s012.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s012_output/n100.r10.s012.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s012_output/n100.r10.s012.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s012_output/n100.r10.s012.reference.fas" "n100.r10.s012_output/n100.r10.s012.fq1.fastq" "n100.r10.s012_output/n100.r10.s012.fq2.fastq" | samtools view -bS - > "n100.r10.s012_output/n100.r10.s012.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s012_output/n100.r10.s012.untrimmed.sorted.bam" "n100.r10.s012_output/n100.r10.s012.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s012_output/n100.r10.s012.untrimmed.sorted.bam" -b "n100.r10.s012_output/n100.r10.s012.primers.bed" -p "n100.r10.s012_output/n100.r10.s012.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s012_output/n100.r10.s012.trimmed.sorted.bam" "n100.r10.s012_output/n100.r10.s012.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s012_output/n100.r10.s012.reference.fas" "n100.r10.s012_output/n100.r10.s012.trimmed.sorted.bam" > "n100.r10.s012_output/n100.r10.s012.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s012_output/n100.r10.s012.reference.fas" --call-indels "n100.r10.s012_output/n100.r10.s012.trimmed.sorted.bam" > "n100.r10.s012_output/n100.r10.s012.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s012_output/n100.r10.s012.trimmed.sorted.bam" > "n100.r10.s012_output/n100.r10.s012.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s012_output/n100.r10.s012.depth.txt" "n100.r10.s012_output/n100.r10.s012.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s012_output/n100.r10.s012.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s012_output/n100.r10.s012.reference.fas" | bcftools consensus -m "n100.r10.s012_output/n100.r10.s012.low_depth.tsv" tmp.vcf.gz > "n100.r10.s012_output/n100.r10.s012.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s012_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:43689972a70e6aa0321b05df7122b7cd8953ddd986913c5e37d3d617640f2d6a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.1MiB max=124.8MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=625B max=2.0KiB
2021/07/08 17:42:30 scheduler task da2f171f (flow db118f6e): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s012.tar.gz resources {}
2021/07/08 17:42:30  ->  n100.r10.s012.Main.cp_out_file db118f6e exec extern s3://niema-test/n100/r10/n100.r10.s012.tar.gz 35.7MiB
2021/07/08 17:42:30 scheduler task 26f77987 (flow 474e0149): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:30 scheduler task 26f77987 (flow 474e0149): promoting objects (try 0): started
2021/07/08 17:42:30 scheduler task e996e2c5 (flow d3393061): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:30 scheduler task 26f77987 (flow 474e0149): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:30 scheduler task e996e2c5 (flow d3393061): unloading (try 0): started
2021/07/08 17:42:30 scheduler task e996e2c5 (flow d3393061): unloading list<val<.=94ea765a 35.8MiB> 35.8MiB>
2021/07/08 17:42:30 scheduler task e996e2c5 (flow d3393061): unloading val<.=7f705794 35.4MiB>
2021/07/08 17:42:30 scheduler task e996e2c5 (flow d3393061): unloading val<.=58c3f0fa 35.4MiB>
2021/07/08 17:42:30 scheduler task 26f77987 (flow 474e0149): retrieving diagnostic output (try 0): started
2021/07/08 17:42:30 scheduler task e996e2c5 (flow d3393061): unloaded val<.=58c3f0fa 35.4MiB>
2021/07/08 17:42:30 scheduler task e996e2c5 (flow d3393061): unloaded list<val<.=94ea765a 35.8MiB> 35.8MiB>
2021/07/08 17:42:30 scheduler task e996e2c5 (flow d3393061): unloaded val<.=7f705794 35.4MiB>
2021/07/08 17:42:30 scheduler task e996e2c5 (flow d3393061): unloading (try 0): successful, next state: complete
2021/07/08 17:42:30  <-  n100.r10.s027.Main.out_file d3393061 ok     exec 4m44s 35.8MiB
2021/07/08 17:42:30 n100.r10.s027.Main.out_file d3393061 n100/r10/n100.r10.s027.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:92700754701120d474ed086b1b530b046b804021ba5a4a95586d12515dd2e674
	sha256:d3393061139544e61f7090b88021f6a4ff8c17fb2a9b9916fc01ec7182c41457
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e996e2c5b6ad13131fda218effb3815bc7f6ae58ba0bc080d1623cdffd87a0f3
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s027_output"
	    wget -O "n100.r10.s027_output/n100.r10.s027.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s027_output/n100.r10.s027.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s027_output/n100.r10.s027.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s027_output/n100.r10.s027.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s027_output/n100.r10.s027.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s027_output/n100.r10.s027.reference.fas" "n100.r10.s027_output/n100.r10.s027.fq1.fastq" "n100.r10.s027_output/n100.r10.s027.fq2.fastq" | samtools view -bS - > "n100.r10.s027_output/n100.r10.s027.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s027_output/n100.r10.s027.untrimmed.sorted.bam" "n100.r10.s027_output/n100.r10.s027.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s027_output/n100.r10.s027.untrimmed.sorted.bam" -b "n100.r10.s027_output/n100.r10.s027.primers.bed" -p "n100.r10.s027_output/n100.r10.s027.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s027_output/n100.r10.s027.trimmed.sorted.bam" "n100.r10.s027_output/n100.r10.s027.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s027_output/n100.r10.s027.reference.fas" "n100.r10.s027_output/n100.r10.s027.trimmed.sorted.bam" > "n100.r10.s027_output/n100.r10.s027.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s027_output/n100.r10.s027.reference.fas" --call-indels "n100.r10.s027_output/n100.r10.s027.trimmed.sorted.bam" > "n100.r10.s027_output/n100.r10.s027.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s027_output/n100.r10.s027.trimmed.sorted.bam" > "n100.r10.s027_output/n100.r10.s027.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s027_output/n100.r10.s027.depth.txt" "n100.r10.s027_output/n100.r10.s027.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s027_output/n100.r10.s027.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s027_output/n100.r10.s027.reference.fas" | bcftools consensus -m "n100.r10.s027_output/n100.r10.s027.low_depth.tsv" tmp.vcf.gz > "n100.r10.s027_output/n100.r10.s027.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s027_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:94ea765a7ef6e06b2b37bbfc8e4a7f1fa388cd6903d82cb5c4bc7bdba7b03043 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.3MiB max=123.9MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=632B max=2.1KiB
2021/07/08 17:42:30 scheduler task 5596e59d (flow a3155c04): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s027.tar.gz resources {}
2021/07/08 17:42:30  ->  n100.r10.s027.Main.cp_out_file a3155c04 exec extern s3://niema-test/n100/r10/n100.r10.s027.tar.gz 35.8MiB
2021/07/08 17:42:30 scheduler task 26f77987 (flow 474e0149): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:30 scheduler task 26f77987 (flow 474e0149): retrieving result (try 0): started
2021/07/08 17:42:30 scheduler task 26f77987 (flow 474e0149): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:30 scheduler task 26f77987 (flow 474e0149): transferring output (try 0): started
2021/07/08 17:42:30 scheduler task da2f171f (flow db118f6e): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:43689972a70e6aa0321b05df7122b7cd8953ddd986913c5e37d3d617640f2d6a -> s3://niema-test/n100/r10/n100.r10.s012.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:42:30  <-  n100.r10.s012.Main.cp_out_file db118f6e ok   extern 0s 35.7MiB
2021/07/08 17:42:31 scheduler task 26f77987 (flow 474e0149): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:31 scheduler task 26f77987 (flow 474e0149): unloading (try 0): started
2021/07/08 17:42:31 scheduler task 26f77987 (flow 474e0149): unloading list<val<.=74c4252b 35.7MiB> 35.7MiB>
2021/07/08 17:42:31 scheduler task 26f77987 (flow 474e0149): unloading val<.=f859f1c8 35.4MiB>
2021/07/08 17:42:31 scheduler task 26f77987 (flow 474e0149): unloading val<.=75f14a28 35.4MiB>
2021/07/08 17:42:31 scheduler task 26f77987 (flow 474e0149): unloaded val<.=75f14a28 35.4MiB>
2021/07/08 17:42:31 scheduler task 26f77987 (flow 474e0149): unloaded list<val<.=74c4252b 35.7MiB> 35.7MiB>
2021/07/08 17:42:31 scheduler task 26f77987 (flow 474e0149): unloaded val<.=f859f1c8 35.4MiB>
2021/07/08 17:42:31 scheduler task 26f77987 (flow 474e0149): unloading (try 0): successful, next state: complete
2021/07/08 17:42:31  <-  n100.r10.s064.Main.out_file 474e0149 ok     exec 4m45s 35.7MiB
2021/07/08 17:42:31 n100.r10.s064.Main.out_file 474e0149 n100/r10/n100.r10.s064.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6687145d5ea1cdb3a257d44d1a2fcb8f42a11e3a8cc992de3907922d9373b3b0
	sha256:474e014946ddc4e289515769ca344ede75868356339ce71a0c8bd8a010b49fde
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/26f7798716695a8cb6437e85c6d382d012f7be49edaf65f2ec8002b52894c5cf
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s064_output"
	    wget -O "n100.r10.s064_output/n100.r10.s064.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s064_output/n100.r10.s064.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s064_output/n100.r10.s064.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s064_output/n100.r10.s064.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s064_output/n100.r10.s064.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s064_output/n100.r10.s064.reference.fas" "n100.r10.s064_output/n100.r10.s064.fq1.fastq" "n100.r10.s064_output/n100.r10.s064.fq2.fastq" | samtools view -bS - > "n100.r10.s064_output/n100.r10.s064.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s064_output/n100.r10.s064.untrimmed.sorted.bam" "n100.r10.s064_output/n100.r10.s064.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s064_output/n100.r10.s064.untrimmed.sorted.bam" -b "n100.r10.s064_output/n100.r10.s064.primers.bed" -p "n100.r10.s064_output/n100.r10.s064.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s064_output/n100.r10.s064.trimmed.sorted.bam" "n100.r10.s064_output/n100.r10.s064.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s064_output/n100.r10.s064.reference.fas" "n100.r10.s064_output/n100.r10.s064.trimmed.sorted.bam" > "n100.r10.s064_output/n100.r10.s064.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s064_output/n100.r10.s064.reference.fas" --call-indels "n100.r10.s064_output/n100.r10.s064.trimmed.sorted.bam" > "n100.r10.s064_output/n100.r10.s064.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s064_output/n100.r10.s064.trimmed.sorted.bam" > "n100.r10.s064_output/n100.r10.s064.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s064_output/n100.r10.s064.depth.txt" "n100.r10.s064_output/n100.r10.s064.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s064_output/n100.r10.s064.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s064_output/n100.r10.s064.reference.fas" | bcftools consensus -m "n100.r10.s064_output/n100.r10.s064.low_depth.tsv" tmp.vcf.gz > "n100.r10.s064_output/n100.r10.s064.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s064_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:74c4252b820679f50b82d0697b8bc7012202bcbb2546b0e56c644688acd7e39e 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=19.8MiB max=123.0MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=629B max=2.1KiB
2021/07/08 17:42:31 scheduler task e8706cb1 (flow 250be723): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s064.tar.gz resources {}
2021/07/08 17:42:31  ->  n100.r10.s064.Main.cp_out_file 250be723 exec extern s3://niema-test/n100/r10/n100.r10.s064.tar.gz 35.7MiB
2021/07/08 17:42:31 scheduler task 5596e59d (flow a3155c04): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:94ea765a7ef6e06b2b37bbfc8e4a7f1fa388cd6903d82cb5c4bc7bdba7b03043 -> s3://niema-test/n100/r10/n100.r10.s027.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:42:31  <-  n100.r10.s027.Main.cp_out_file a3155c04 ok   extern 0s 35.8MiB
2021/07/08 17:42:31 scheduler task b00ef45e (flow 62acfe5d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:31 scheduler task b00ef45e (flow 62acfe5d): promoting objects (try 0): started
2021/07/08 17:42:31 scheduler task e8706cb1 (flow 250be723): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:74c4252b820679f50b82d0697b8bc7012202bcbb2546b0e56c644688acd7e39e -> s3://niema-test/n100/r10/n100.r10.s064.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:42:31  <-  n100.r10.s064.Main.cp_out_file 250be723 ok   extern 0s 35.7MiB
2021/07/08 17:42:32 scheduler task b00ef45e (flow 62acfe5d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:32 scheduler task b00ef45e (flow 62acfe5d): retrieving diagnostic output (try 0): started
2021/07/08 17:42:32 scheduler task b00ef45e (flow 62acfe5d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:32 scheduler task b00ef45e (flow 62acfe5d): retrieving result (try 0): started
2021/07/08 17:42:32 scheduler task 0de34bc3 (flow d01db40b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:32 scheduler task 0de34bc3 (flow d01db40b): promoting objects (try 0): started
2021/07/08 17:42:32 scheduler task b00ef45e (flow 62acfe5d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:32 scheduler task b00ef45e (flow 62acfe5d): transferring output (try 0): started
2021/07/08 17:42:32 scheduler task 0de34bc3 (flow d01db40b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:32 scheduler task 0de34bc3 (flow d01db40b): retrieving diagnostic output (try 0): started
2021/07/08 17:42:32 scheduler task 0de34bc3 (flow d01db40b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:32 scheduler task 0de34bc3 (flow d01db40b): retrieving result (try 0): started
2021/07/08 17:42:32 scheduler task 0de34bc3 (flow d01db40b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:32 scheduler task 0de34bc3 (flow d01db40b): transferring output (try 0): started
2021/07/08 17:42:32 scheduler task 3134442c (flow c17adea7): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:32 scheduler task 3134442c (flow c17adea7): promoting objects (try 0): started
2021/07/08 17:42:32 scheduler task 8e195244 (flow 62a7eeea): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:32 scheduler task 3134442c (flow c17adea7): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:32 scheduler task 8e195244 (flow 62a7eeea): promoting objects (try 0): started
2021/07/08 17:42:32 scheduler task 3134442c (flow c17adea7): retrieving diagnostic output (try 0): started
2021/07/08 17:42:32 scheduler task 8e195244 (flow 62a7eeea): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:32 scheduler task 3134442c (flow c17adea7): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:32 scheduler task 8e195244 (flow 62a7eeea): retrieving diagnostic output (try 0): started
2021/07/08 17:42:32 scheduler task 3134442c (flow c17adea7): retrieving result (try 0): started
2021/07/08 17:42:32 scheduler task b00ef45e (flow 62acfe5d): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:32 scheduler task b00ef45e (flow 62acfe5d): unloading (try 0): started
2021/07/08 17:42:32 scheduler task b00ef45e (flow 62acfe5d): unloading list<val<.=c7de9a4a 35.8MiB> 35.8MiB>
2021/07/08 17:42:32 scheduler task b00ef45e (flow 62acfe5d): unloading val<.=c03e0f38 35.4MiB>
2021/07/08 17:42:32 scheduler task b00ef45e (flow 62acfe5d): unloading val<.=957d558f 35.4MiB>
2021/07/08 17:42:32 scheduler task 8e195244 (flow 62a7eeea): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:32 scheduler task 8e195244 (flow 62a7eeea): retrieving result (try 0): started
2021/07/08 17:42:32 scheduler task 3134442c (flow c17adea7): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:32 scheduler task 3134442c (flow c17adea7): transferring output (try 0): started
2021/07/08 17:42:32 scheduler task b00ef45e (flow 62acfe5d): unloaded val<.=957d558f 35.4MiB>
2021/07/08 17:42:32 scheduler task b00ef45e (flow 62acfe5d): unloaded val<.=c03e0f38 35.4MiB>
2021/07/08 17:42:32 scheduler task b00ef45e (flow 62acfe5d): unloaded list<val<.=c7de9a4a 35.8MiB> 35.8MiB>
2021/07/08 17:42:32 scheduler task b00ef45e (flow 62acfe5d): unloading (try 0): successful, next state: complete
2021/07/08 17:42:32  <-  n100.r10.s055.Main.out_file 62acfe5d ok     exec 4m46s 35.8MiB
2021/07/08 17:42:32 n100.r10.s055.Main.out_file 62acfe5d n100/r10/n100.r10.s055.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b7d2a15cd90d3a423fc5ee7e0af6351c12d3f39cb34352da8b202731fa97f194
	sha256:62acfe5dc28897fefb7becee824e0665281bce2a2f09a7463d8edd0fa4c657be
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b00ef45eeb34f8227cc2ae8430c733f47bf2d2a6617eb4713a7999bbbe7f7126
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s055_output"
	    wget -O "n100.r10.s055_output/n100.r10.s055.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s055_output/n100.r10.s055.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s055_output/n100.r10.s055.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s055_output/n100.r10.s055.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s055_output/n100.r10.s055.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s055_output/n100.r10.s055.reference.fas" "n100.r10.s055_output/n100.r10.s055.fq1.fastq" "n100.r10.s055_output/n100.r10.s055.fq2.fastq" | samtools view -bS - > "n100.r10.s055_output/n100.r10.s055.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s055_output/n100.r10.s055.untrimmed.sorted.bam" "n100.r10.s055_output/n100.r10.s055.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s055_output/n100.r10.s055.untrimmed.sorted.bam" -b "n100.r10.s055_output/n100.r10.s055.primers.bed" -p "n100.r10.s055_output/n100.r10.s055.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s055_output/n100.r10.s055.trimmed.sorted.bam" "n100.r10.s055_output/n100.r10.s055.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s055_output/n100.r10.s055.reference.fas" "n100.r10.s055_output/n100.r10.s055.trimmed.sorted.bam" > "n100.r10.s055_output/n100.r10.s055.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s055_output/n100.r10.s055.reference.fas" --call-indels "n100.r10.s055_output/n100.r10.s055.trimmed.sorted.bam" > "n100.r10.s055_output/n100.r10.s055.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s055_output/n100.r10.s055.trimmed.sorted.bam" > "n100.r10.s055_output/n100.r10.s055.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s055_output/n100.r10.s055.depth.txt" "n100.r10.s055_output/n100.r10.s055.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s055_output/n100.r10.s055.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s055_output/n100.r10.s055.reference.fas" | bcftools consensus -m "n100.r10.s055_output/n100.r10.s055.low_depth.tsv" tmp.vcf.gz > "n100.r10.s055_output/n100.r10.s055.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s055_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:c7de9a4a4252c44a518a0a7d979c23b99f39d0291735acfee14d861ba51ca651 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=19.8MiB max=127.7MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=630B max=2.1KiB
2021/07/08 17:42:32 scheduler task 349a827b (flow 89a42e69): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s055.tar.gz resources {}
2021/07/08 17:42:32  ->  n100.r10.s055.Main.cp_out_file 89a42e69 exec extern s3://niema-test/n100/r10/n100.r10.s055.tar.gz 35.8MiB
2021/07/08 17:42:32 scheduler task 8e195244 (flow 62a7eeea): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:32 scheduler task 8c3a26a2 (flow 63d125fa): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:32 scheduler task 8e195244 (flow 62a7eeea): transferring output (try 0): started
2021/07/08 17:42:32 scheduler task 8c3a26a2 (flow 63d125fa): promoting objects (try 0): started
2021/07/08 17:42:32 scheduler task 8c3a26a2 (flow 63d125fa): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:32 scheduler task 8c3a26a2 (flow 63d125fa): retrieving diagnostic output (try 0): started
2021/07/08 17:42:33 scheduler task 0de34bc3 (flow d01db40b): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:33 scheduler task 0de34bc3 (flow d01db40b): unloading (try 0): started
2021/07/08 17:42:33 scheduler task 0de34bc3 (flow d01db40b): unloading list<val<.=92469ab6 35.7MiB> 35.7MiB>
2021/07/08 17:42:33 scheduler task 0de34bc3 (flow d01db40b): unloading val<.=a2d24de3 35.4MiB>
2021/07/08 17:42:33 scheduler task 0de34bc3 (flow d01db40b): unloading val<.=4511214f 35.4MiB>
2021/07/08 17:42:33 scheduler task 8c3a26a2 (flow 63d125fa): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:33 scheduler task 8c3a26a2 (flow 63d125fa): retrieving result (try 0): started
2021/07/08 17:42:33 scheduler task 0de34bc3 (flow d01db40b): unloaded list<val<.=92469ab6 35.7MiB> 35.7MiB>
2021/07/08 17:42:33 scheduler task 0de34bc3 (flow d01db40b): unloaded val<.=a2d24de3 35.4MiB>
2021/07/08 17:42:33 scheduler task 0de34bc3 (flow d01db40b): unloaded val<.=4511214f 35.4MiB>
2021/07/08 17:42:33 scheduler task 0de34bc3 (flow d01db40b): unloading (try 0): successful, next state: complete
2021/07/08 17:42:33  <-  n100.r10.s038.Main.out_file d01db40b ok     exec 4m47s 35.7MiB
2021/07/08 17:42:33 n100.r10.s038.Main.out_file d01db40b n100/r10/n100.r10.s038.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e8f8ddce18987e78659e397adbe8c7d3087f4cf2b58068bafd40ebe0d2cb5875
	sha256:d01db40ba1ba618f8baa1dff2fea28a2bac964a55927630ccbe4de8f80c3576a
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0de34bc3337fdb9c4f7e9e89c1b68d849422dbebba36e496bfbd261d5fa11e6c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s038_output"
	    wget -O "n100.r10.s038_output/n100.r10.s038.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s038_output/n100.r10.s038.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s038_output/n100.r10.s038.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s038_output/n100.r10.s038.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s038_output/n100.r10.s038.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s038_output/n100.r10.s038.reference.fas" "n100.r10.s038_output/n100.r10.s038.fq1.fastq" "n100.r10.s038_output/n100.r10.s038.fq2.fastq" | samtools view -bS - > "n100.r10.s038_output/n100.r10.s038.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s038_output/n100.r10.s038.untrimmed.sorted.bam" "n100.r10.s038_output/n100.r10.s038.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s038_output/n100.r10.s038.untrimmed.sorted.bam" -b "n100.r10.s038_output/n100.r10.s038.primers.bed" -p "n100.r10.s038_output/n100.r10.s038.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s038_output/n100.r10.s038.trimmed.sorted.bam" "n100.r10.s038_output/n100.r10.s038.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s038_output/n100.r10.s038.reference.fas" "n100.r10.s038_output/n100.r10.s038.trimmed.sorted.bam" > "n100.r10.s038_output/n100.r10.s038.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s038_output/n100.r10.s038.reference.fas" --call-indels "n100.r10.s038_output/n100.r10.s038.trimmed.sorted.bam" > "n100.r10.s038_output/n100.r10.s038.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s038_output/n100.r10.s038.trimmed.sorted.bam" > "n100.r10.s038_output/n100.r10.s038.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s038_output/n100.r10.s038.depth.txt" "n100.r10.s038_output/n100.r10.s038.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s038_output/n100.r10.s038.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s038_output/n100.r10.s038.reference.fas" | bcftools consensus -m "n100.r10.s038_output/n100.r10.s038.low_depth.tsv" tmp.vcf.gz > "n100.r10.s038_output/n100.r10.s038.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s038_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:92469ab66de4e6ff2c50b0a178eba4a89f6526b17c138cc85e6e16e33a9f549a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.0MiB max=125.8MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 17:42:33 scheduler task c35eee9c (flow 3764a01d): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s038.tar.gz resources {}
2021/07/08 17:42:33  ->  n100.r10.s038.Main.cp_out_file 3764a01d exec extern s3://niema-test/n100/r10/n100.r10.s038.tar.gz 35.7MiB
2021/07/08 17:42:33 scheduler task 8c3a26a2 (flow 63d125fa): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:33 scheduler task 8c3a26a2 (flow 63d125fa): transferring output (try 0): started
2021/07/08 17:42:33 scheduler task b3e5b82e (flow e295ae85): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:33 scheduler task b3e5b82e (flow e295ae85): promoting objects (try 0): started
2021/07/08 17:42:33 scheduler task 3134442c (flow c17adea7): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:33 scheduler task 3134442c (flow c17adea7): unloading (try 0): started
2021/07/08 17:42:33 scheduler task 3134442c (flow c17adea7): unloading list<val<.=484b2bd0 35.7MiB> 35.7MiB>
2021/07/08 17:42:33 scheduler task 3134442c (flow c17adea7): unloading val<.=6560d2e2 35.4MiB>
2021/07/08 17:42:33 scheduler task 3134442c (flow c17adea7): unloading val<.=74a4e841 35.4MiB>
2021/07/08 17:42:33 scheduler task b3e5b82e (flow e295ae85): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:33 scheduler task b3e5b82e (flow e295ae85): retrieving diagnostic output (try 0): started
2021/07/08 17:42:33 scheduler task 8e195244 (flow 62a7eeea): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:33 scheduler task 3134442c (flow c17adea7): unloaded val<.=6560d2e2 35.4MiB>
2021/07/08 17:42:33 scheduler task 3134442c (flow c17adea7): unloaded list<val<.=484b2bd0 35.7MiB> 35.7MiB>
2021/07/08 17:42:33 scheduler task 3134442c (flow c17adea7): unloaded val<.=74a4e841 35.4MiB>
2021/07/08 17:42:33 scheduler task 3134442c (flow c17adea7): unloading (try 0): successful, next state: complete
2021/07/08 17:42:33 scheduler task 8e195244 (flow 62a7eeea): unloading (try 0): started
2021/07/08 17:42:33 scheduler task 8e195244 (flow 62a7eeea): unloading list<val<.=798a9201 35.7MiB> 35.7MiB>
2021/07/08 17:42:33 scheduler task 8e195244 (flow 62a7eeea): unloading val<.=3009aeb7 35.4MiB>
2021/07/08 17:42:33 scheduler task 8e195244 (flow 62a7eeea): unloading val<.=94ff22af 35.4MiB>
2021/07/08 17:42:33  <-  n100.r10.s069.Main.out_file c17adea7 ok     exec 4m47s 35.7MiB
2021/07/08 17:42:33 n100.r10.s069.Main.out_file c17adea7 n100/r10/n100.r10.s069.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:515135672bee7864868c83d1fd199e26c56417a93fbe7c94fa42202e5a2cfd20
	sha256:c17adea75b96a6cc330221bb1ce5f326a126167a447c571a443eed3b7a56a86e
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3134442c34971b2ab8d04fdafbac332b4d19ee373de84f3f94be09663da2e337
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s069_output"
	    wget -O "n100.r10.s069_output/n100.r10.s069.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s069_output/n100.r10.s069.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s069_output/n100.r10.s069.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s069_output/n100.r10.s069.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s069_output/n100.r10.s069.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s069_output/n100.r10.s069.reference.fas" "n100.r10.s069_output/n100.r10.s069.fq1.fastq" "n100.r10.s069_output/n100.r10.s069.fq2.fastq" | samtools view -bS - > "n100.r10.s069_output/n100.r10.s069.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s069_output/n100.r10.s069.untrimmed.sorted.bam" "n100.r10.s069_output/n100.r10.s069.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s069_output/n100.r10.s069.untrimmed.sorted.bam" -b "n100.r10.s069_output/n100.r10.s069.primers.bed" -p "n100.r10.s069_output/n100.r10.s069.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s069_output/n100.r10.s069.trimmed.sorted.bam" "n100.r10.s069_output/n100.r10.s069.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s069_output/n100.r10.s069.reference.fas" "n100.r10.s069_output/n100.r10.s069.trimmed.sorted.bam" > "n100.r10.s069_output/n100.r10.s069.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s069_output/n100.r10.s069.reference.fas" --call-indels "n100.r10.s069_output/n100.r10.s069.trimmed.sorted.bam" > "n100.r10.s069_output/n100.r10.s069.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s069_output/n100.r10.s069.trimmed.sorted.bam" > "n100.r10.s069_output/n100.r10.s069.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s069_output/n100.r10.s069.depth.txt" "n100.r10.s069_output/n100.r10.s069.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s069_output/n100.r10.s069.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s069_output/n100.r10.s069.reference.fas" | bcftools consensus -m "n100.r10.s069_output/n100.r10.s069.low_depth.tsv" tmp.vcf.gz > "n100.r10.s069_output/n100.r10.s069.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s069_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:484b2bd0d786dcc8fbaa7d835b7494c888ed2de5008e6cd78bf2cd1400671070 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.8MiB max=124.7MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=627B max=2.0KiB
2021/07/08 17:42:33 scheduler task 35d9463a (flow fd5655a2): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s069.tar.gz resources {}
2021/07/08 17:42:33  ->  n100.r10.s069.Main.cp_out_file fd5655a2 exec extern s3://niema-test/n100/r10/n100.r10.s069.tar.gz 35.7MiB
2021/07/08 17:42:33 scheduler task b3e5b82e (flow e295ae85): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:33 scheduler task 349a827b (flow 89a42e69): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:c7de9a4a4252c44a518a0a7d979c23b99f39d0291735acfee14d861ba51ca651 -> s3://niema-test/n100/r10/n100.r10.s055.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:42:33  <-  n100.r10.s055.Main.cp_out_file 89a42e69 ok   extern 0s 35.8MiB
2021/07/08 17:42:33 scheduler task b3e5b82e (flow e295ae85): retrieving result (try 0): started
2021/07/08 17:42:33 scheduler task 8e195244 (flow 62a7eeea): unloaded val<.=3009aeb7 35.4MiB>
2021/07/08 17:42:33 scheduler task 8e195244 (flow 62a7eeea): unloaded list<val<.=798a9201 35.7MiB> 35.7MiB>
2021/07/08 17:42:33 scheduler task 8e195244 (flow 62a7eeea): unloaded val<.=94ff22af 35.4MiB>
2021/07/08 17:42:33 scheduler task 8e195244 (flow 62a7eeea): unloading (try 0): successful, next state: complete
2021/07/08 17:42:33  <-  n100.r10.s071.Main.out_file 62a7eeea ok     exec 4m47s 35.7MiB
2021/07/08 17:42:33 n100.r10.s071.Main.out_file 62a7eeea n100/r10/n100.r10.s071.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4eecd2851b4bcd27e2c316c00f77efca780536395ae85aa0511ef5ac8c54cc0c
	sha256:62a7eeeae2f4e2dbc372d6081d463eacdc84674c159b0b8bb489866f78ad49e7
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8e195244cd72c84316dcb1ca459140b588ba97bf2677b1f7817b58c3e9dbaf1d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s071_output"
	    wget -O "n100.r10.s071_output/n100.r10.s071.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s071_output/n100.r10.s071.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s071_output/n100.r10.s071.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s071_output/n100.r10.s071.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s071_output/n100.r10.s071.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s071_output/n100.r10.s071.reference.fas" "n100.r10.s071_output/n100.r10.s071.fq1.fastq" "n100.r10.s071_output/n100.r10.s071.fq2.fastq" | samtools view -bS - > "n100.r10.s071_output/n100.r10.s071.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s071_output/n100.r10.s071.untrimmed.sorted.bam" "n100.r10.s071_output/n100.r10.s071.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s071_output/n100.r10.s071.untrimmed.sorted.bam" -b "n100.r10.s071_output/n100.r10.s071.primers.bed" -p "n100.r10.s071_output/n100.r10.s071.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s071_output/n100.r10.s071.trimmed.sorted.bam" "n100.r10.s071_output/n100.r10.s071.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s071_output/n100.r10.s071.reference.fas" "n100.r10.s071_output/n100.r10.s071.trimmed.sorted.bam" > "n100.r10.s071_output/n100.r10.s071.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s071_output/n100.r10.s071.reference.fas" --call-indels "n100.r10.s071_output/n100.r10.s071.trimmed.sorted.bam" > "n100.r10.s071_output/n100.r10.s071.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s071_output/n100.r10.s071.trimmed.sorted.bam" > "n100.r10.s071_output/n100.r10.s071.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s071_output/n100.r10.s071.depth.txt" "n100.r10.s071_output/n100.r10.s071.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s071_output/n100.r10.s071.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s071_output/n100.r10.s071.reference.fas" | bcftools consensus -m "n100.r10.s071_output/n100.r10.s071.low_depth.tsv" tmp.vcf.gz > "n100.r10.s071_output/n100.r10.s071.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s071_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:798a920174b1e65ccc68b463cfadea4e755621363ea920bc496b44dcd9a698cc 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.3MiB max=130.9MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=632B max=2.1KiB
2021/07/08 17:42:33 scheduler task c6dddb08 (flow 99162733): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s071.tar.gz resources {}
2021/07/08 17:42:33  ->  n100.r10.s071.Main.cp_out_file 99162733 exec extern s3://niema-test/n100/r10/n100.r10.s071.tar.gz 35.7MiB
2021/07/08 17:42:33 scheduler task b3e5b82e (flow e295ae85): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:33 scheduler task b3e5b82e (flow e295ae85): transferring output (try 0): started
2021/07/08 17:42:33 scheduler task 8c3a26a2 (flow 63d125fa): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:33 scheduler task 8c3a26a2 (flow 63d125fa): unloading (try 0): started
2021/07/08 17:42:33 scheduler task 8c3a26a2 (flow 63d125fa): unloading list<val<.=22a47e69 35.7MiB> 35.7MiB>
2021/07/08 17:42:33 scheduler task 8c3a26a2 (flow 63d125fa): unloading val<.=b807bd87 35.4MiB>
2021/07/08 17:42:33 scheduler task 8c3a26a2 (flow 63d125fa): unloading val<.=2a4cdf26 35.4MiB>
2021/07/08 17:42:33 scheduler task 8c3a26a2 (flow 63d125fa): unloaded val<.=b807bd87 35.4MiB>
2021/07/08 17:42:33 scheduler task 8c3a26a2 (flow 63d125fa): unloaded val<.=2a4cdf26 35.4MiB>
2021/07/08 17:42:33 scheduler task 8c3a26a2 (flow 63d125fa): unloaded list<val<.=22a47e69 35.7MiB> 35.7MiB>
2021/07/08 17:42:33 scheduler task 8c3a26a2 (flow 63d125fa): unloading (try 0): successful, next state: complete
2021/07/08 17:42:33  <-  n100.r10.s017.Main.out_file 63d125fa ok     exec 4m47s 35.7MiB
2021/07/08 17:42:33 n100.r10.s017.Main.out_file 63d125fa n100/r10/n100.r10.s017.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b835e4fbf04a734df5aaedb298dc199a45f129c11d4c6e0e5c0498d2936239a8
	sha256:63d125fa7ca84e746690330caf95c343897ec695e5dad7e75dd718653109f7f8
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8c3a26a22105229ccbc7adf6c4e66d046387d115f3e61a44fb7f3dedc7e2e241
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s017_output"
	    wget -O "n100.r10.s017_output/n100.r10.s017.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s017_output/n100.r10.s017.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s017_output/n100.r10.s017.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s017_output/n100.r10.s017.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s017_output/n100.r10.s017.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s017_output/n100.r10.s017.reference.fas" "n100.r10.s017_output/n100.r10.s017.fq1.fastq" "n100.r10.s017_output/n100.r10.s017.fq2.fastq" | samtools view -bS - > "n100.r10.s017_output/n100.r10.s017.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s017_output/n100.r10.s017.untrimmed.sorted.bam" "n100.r10.s017_output/n100.r10.s017.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s017_output/n100.r10.s017.untrimmed.sorted.bam" -b "n100.r10.s017_output/n100.r10.s017.primers.bed" -p "n100.r10.s017_output/n100.r10.s017.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s017_output/n100.r10.s017.trimmed.sorted.bam" "n100.r10.s017_output/n100.r10.s017.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s017_output/n100.r10.s017.reference.fas" "n100.r10.s017_output/n100.r10.s017.trimmed.sorted.bam" > "n100.r10.s017_output/n100.r10.s017.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s017_output/n100.r10.s017.reference.fas" --call-indels "n100.r10.s017_output/n100.r10.s017.trimmed.sorted.bam" > "n100.r10.s017_output/n100.r10.s017.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s017_output/n100.r10.s017.trimmed.sorted.bam" > "n100.r10.s017_output/n100.r10.s017.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s017_output/n100.r10.s017.depth.txt" "n100.r10.s017_output/n100.r10.s017.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s017_output/n100.r10.s017.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s017_output/n100.r10.s017.reference.fas" | bcftools consensus -m "n100.r10.s017_output/n100.r10.s017.low_depth.tsv" tmp.vcf.gz > "n100.r10.s017_output/n100.r10.s017.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s017_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:22a47e69fce5abd4e5fed1990001aa42b4a611632270bab64c75b98a86cc7a1f 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.4MiB max=130.2MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=625B max=2.0KiB
2021/07/08 17:42:33 scheduler task 99de4f73 (flow c21876eb): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s017.tar.gz resources {}
2021/07/08 17:42:33  ->  n100.r10.s017.Main.cp_out_file c21876eb exec extern s3://niema-test/n100/r10/n100.r10.s017.tar.gz 35.7MiB
2021/07/08 17:42:33 scheduler task c35eee9c (flow 3764a01d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:92469ab66de4e6ff2c50b0a178eba4a89f6526b17c138cc85e6e16e33a9f549a -> s3://niema-test/n100/r10/n100.r10.s038.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:42:33  <-  n100.r10.s038.Main.cp_out_file 3764a01d ok   extern 0s 35.7MiB
2021/07/08 17:42:34 scheduler task d7c574d6 (flow d719cd29): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:34 scheduler task d7c574d6 (flow d719cd29): promoting objects (try 0): started
2021/07/08 17:42:34 scheduler task 9b005cb6 (flow 4e0c766c): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:34 scheduler task 9b005cb6 (flow 4e0c766c): promoting objects (try 0): started
2021/07/08 17:42:34 scheduler task 0a72f984 (flow 0210f1d8): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:34 scheduler task 0a72f984 (flow 0210f1d8): promoting objects (try 0): started
2021/07/08 17:42:34 scheduler task d7c574d6 (flow d719cd29): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:34 scheduler task d7c574d6 (flow d719cd29): retrieving diagnostic output (try 0): started
2021/07/08 17:42:34 scheduler task 9b005cb6 (flow 4e0c766c): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:34 scheduler task 9b005cb6 (flow 4e0c766c): retrieving diagnostic output (try 0): started
2021/07/08 17:42:34 scheduler task b3e5b82e (flow e295ae85): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:34 scheduler task b3e5b82e (flow e295ae85): unloading (try 0): started
2021/07/08 17:42:34 scheduler task b3e5b82e (flow e295ae85): unloading list<val<.=a195c807 35.7MiB> 35.7MiB>
2021/07/08 17:42:34 scheduler task b3e5b82e (flow e295ae85): unloading val<.=8dc8f452 35.4MiB>
2021/07/08 17:42:34 scheduler task b3e5b82e (flow e295ae85): unloading val<.=354c5907 35.4MiB>
2021/07/08 17:42:34 scheduler task 0a72f984 (flow 0210f1d8): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:34 scheduler task 35d9463a (flow fd5655a2): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:484b2bd0d786dcc8fbaa7d835b7494c888ed2de5008e6cd78bf2cd1400671070 -> s3://niema-test/n100/r10/n100.r10.s069.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:42:34  <-  n100.r10.s069.Main.cp_out_file fd5655a2 ok   extern 0s 35.7MiB
2021/07/08 17:42:34 scheduler task 0a72f984 (flow 0210f1d8): retrieving diagnostic output (try 0): started
2021/07/08 17:42:34 scheduler task d7c574d6 (flow d719cd29): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:34 scheduler task d7c574d6 (flow d719cd29): retrieving result (try 0): started
2021/07/08 17:42:34 scheduler task c6dddb08 (flow 99162733): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:798a920174b1e65ccc68b463cfadea4e755621363ea920bc496b44dcd9a698cc -> s3://niema-test/n100/r10/n100.r10.s071.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:42:34  <-  n100.r10.s071.Main.cp_out_file 99162733 ok   extern 0s 35.7MiB
2021/07/08 17:42:34 scheduler task b3e5b82e (flow e295ae85): unloaded val<.=8dc8f452 35.4MiB>
2021/07/08 17:42:34 scheduler task b3e5b82e (flow e295ae85): unloaded list<val<.=a195c807 35.7MiB> 35.7MiB>
2021/07/08 17:42:34 scheduler task 9b005cb6 (flow 4e0c766c): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:34 scheduler task b3e5b82e (flow e295ae85): unloaded val<.=354c5907 35.4MiB>
2021/07/08 17:42:34 scheduler task b3e5b82e (flow e295ae85): unloading (try 0): successful, next state: complete
2021/07/08 17:42:34 scheduler task 9b005cb6 (flow 4e0c766c): retrieving result (try 0): started
2021/07/08 17:42:34  <-  n100.r10.s019.Main.out_file e295ae85 ok     exec 4m48s 35.7MiB
2021/07/08 17:42:34 n100.r10.s019.Main.out_file e295ae85 n100/r10/n100.r10.s019.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:571f6c3887275ac9928509f4941145b0580afe72b1c7a3d84d0e7c346f0e8736
	sha256:e295ae85df7658316d68c5854ab3b2434ee9659dd57f5fae5fe8076740447fe5
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b3e5b82e314162eb1ef53381d67be0cf911c7a22cced55faf5b8c858ec8fbc54
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s019_output"
	    wget -O "n100.r10.s019_output/n100.r10.s019.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s019_output/n100.r10.s019.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s019_output/n100.r10.s019.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s019_output/n100.r10.s019.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s019_output/n100.r10.s019.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s019_output/n100.r10.s019.reference.fas" "n100.r10.s019_output/n100.r10.s019.fq1.fastq" "n100.r10.s019_output/n100.r10.s019.fq2.fastq" | samtools view -bS - > "n100.r10.s019_output/n100.r10.s019.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s019_output/n100.r10.s019.untrimmed.sorted.bam" "n100.r10.s019_output/n100.r10.s019.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s019_output/n100.r10.s019.untrimmed.sorted.bam" -b "n100.r10.s019_output/n100.r10.s019.primers.bed" -p "n100.r10.s019_output/n100.r10.s019.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s019_output/n100.r10.s019.trimmed.sorted.bam" "n100.r10.s019_output/n100.r10.s019.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s019_output/n100.r10.s019.reference.fas" "n100.r10.s019_output/n100.r10.s019.trimmed.sorted.bam" > "n100.r10.s019_output/n100.r10.s019.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s019_output/n100.r10.s019.reference.fas" --call-indels "n100.r10.s019_output/n100.r10.s019.trimmed.sorted.bam" > "n100.r10.s019_output/n100.r10.s019.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s019_output/n100.r10.s019.trimmed.sorted.bam" > "n100.r10.s019_output/n100.r10.s019.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s019_output/n100.r10.s019.depth.txt" "n100.r10.s019_output/n100.r10.s019.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s019_output/n100.r10.s019.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s019_output/n100.r10.s019.reference.fas" | bcftools consensus -m "n100.r10.s019_output/n100.r10.s019.low_depth.tsv" tmp.vcf.gz > "n100.r10.s019_output/n100.r10.s019.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s019_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a195c8070006a8b01f219d436afe145e3a6d15a72d65fdec57006fe23ebaba86 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.2MiB max=126.5MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=628B max=2.1KiB
2021/07/08 17:42:34 scheduler task 46e3eb9d (flow 4c3aee34): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s019.tar.gz resources {}
2021/07/08 17:42:34  ->  n100.r10.s019.Main.cp_out_file 4c3aee34 exec extern s3://niema-test/n100/r10/n100.r10.s019.tar.gz 35.7MiB
2021/07/08 17:42:34 scheduler task 0a72f984 (flow 0210f1d8): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:34 scheduler task d7c574d6 (flow d719cd29): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:34 scheduler task 0a72f984 (flow 0210f1d8): retrieving result (try 0): started
2021/07/08 17:42:34 scheduler task 9b005cb6 (flow 4e0c766c): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:34 scheduler task d7c574d6 (flow d719cd29): transferring output (try 0): started
2021/07/08 17:42:34 scheduler task 9b005cb6 (flow 4e0c766c): transferring output (try 0): started
2021/07/08 17:42:34 scheduler task 0a72f984 (flow 0210f1d8): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:34 scheduler task 0a72f984 (flow 0210f1d8): transferring output (try 0): started
2021/07/08 17:42:34 scheduler task 99de4f73 (flow c21876eb): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:22a47e69fce5abd4e5fed1990001aa42b4a611632270bab64c75b98a86cc7a1f -> s3://niema-test/n100/r10/n100.r10.s017.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:42:34  <-  n100.r10.s017.Main.cp_out_file c21876eb ok   extern 0s 35.7MiB
2021/07/08 17:42:34 scheduler task f24dd117 (flow d06527d9): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:34 scheduler task f24dd117 (flow d06527d9): promoting objects (try 0): started
2021/07/08 17:42:34 scheduler task f24dd117 (flow d06527d9): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:34 scheduler task f24dd117 (flow d06527d9): retrieving diagnostic output (try 0): started
2021/07/08 17:42:34 scheduler task 9b005cb6 (flow 4e0c766c): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:34 scheduler task f24dd117 (flow d06527d9): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:34 scheduler task 9b005cb6 (flow 4e0c766c): unloading (try 0): started
2021/07/08 17:42:34 scheduler task 9b005cb6 (flow 4e0c766c): unloading list<val<.=626cd066 35.8MiB> 35.8MiB>
2021/07/08 17:42:34 scheduler task 9b005cb6 (flow 4e0c766c): unloading val<.=9c6d7234 35.4MiB>
2021/07/08 17:42:34 scheduler task 9b005cb6 (flow 4e0c766c): unloading val<.=044f3aaa 35.4MiB>
2021/07/08 17:42:34 scheduler task f24dd117 (flow d06527d9): retrieving result (try 0): started
2021/07/08 17:42:35 scheduler task 0a72f984 (flow 0210f1d8): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:35 scheduler task 9b005cb6 (flow 4e0c766c): unloaded list<val<.=626cd066 35.8MiB> 35.8MiB>
2021/07/08 17:42:35 scheduler task 9b005cb6 (flow 4e0c766c): unloaded val<.=044f3aaa 35.4MiB>
2021/07/08 17:42:35 scheduler task 9b005cb6 (flow 4e0c766c): unloaded val<.=9c6d7234 35.4MiB>
2021/07/08 17:42:35 scheduler task 9b005cb6 (flow 4e0c766c): unloading (try 0): successful, next state: complete
2021/07/08 17:42:35 scheduler task 46e3eb9d (flow 4c3aee34): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a195c8070006a8b01f219d436afe145e3a6d15a72d65fdec57006fe23ebaba86 -> s3://niema-test/n100/r10/n100.r10.s019.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:42:35  <-  n100.r10.s019.Main.cp_out_file 4c3aee34 ok   extern 0s 35.7MiB
2021/07/08 17:42:35 scheduler task 0a72f984 (flow 0210f1d8): unloading (try 0): started
2021/07/08 17:42:35 scheduler task 0a72f984 (flow 0210f1d8): unloading list<val<.=0bc81b38 35.8MiB> 35.8MiB>
2021/07/08 17:42:35 scheduler task 0a72f984 (flow 0210f1d8): unloading val<.=0c7e2f6c 35.4MiB>
2021/07/08 17:42:35 scheduler task 0a72f984 (flow 0210f1d8): unloading val<.=8ddf2909 35.4MiB>
2021/07/08 17:42:35  <-  n100.r10.s097.Main.out_file 4e0c766c ok     exec 4m49s 35.8MiB
2021/07/08 17:42:35 n100.r10.s097.Main.out_file 4e0c766c n100/r10/n100.r10.s097.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:79341fc67f80530eae66c0d7e21f30eba64072046fe8ad98c2f4997f93584c98
	sha256:4e0c766c5612c2933567b6b04a7acbdab963365b6dde04c5449ecd4e6d776fa3
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9b005cb67ed5b5360882037e2bc098c34824731c1c8606c8e8181fccd33ad5c0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s097_output"
	    wget -O "n100.r10.s097_output/n100.r10.s097.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s097_output/n100.r10.s097.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s097_output/n100.r10.s097.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s097_output/n100.r10.s097.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s097_output/n100.r10.s097.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s097_output/n100.r10.s097.reference.fas" "n100.r10.s097_output/n100.r10.s097.fq1.fastq" "n100.r10.s097_output/n100.r10.s097.fq2.fastq" | samtools view -bS - > "n100.r10.s097_output/n100.r10.s097.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s097_output/n100.r10.s097.untrimmed.sorted.bam" "n100.r10.s097_output/n100.r10.s097.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s097_output/n100.r10.s097.untrimmed.sorted.bam" -b "n100.r10.s097_output/n100.r10.s097.primers.bed" -p "n100.r10.s097_output/n100.r10.s097.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s097_output/n100.r10.s097.trimmed.sorted.bam" "n100.r10.s097_output/n100.r10.s097.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s097_output/n100.r10.s097.reference.fas" "n100.r10.s097_output/n100.r10.s097.trimmed.sorted.bam" > "n100.r10.s097_output/n100.r10.s097.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s097_output/n100.r10.s097.reference.fas" --call-indels "n100.r10.s097_output/n100.r10.s097.trimmed.sorted.bam" > "n100.r10.s097_output/n100.r10.s097.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s097_output/n100.r10.s097.trimmed.sorted.bam" > "n100.r10.s097_output/n100.r10.s097.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s097_output/n100.r10.s097.depth.txt" "n100.r10.s097_output/n100.r10.s097.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s097_output/n100.r10.s097.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s097_output/n100.r10.s097.reference.fas" | bcftools consensus -m "n100.r10.s097_output/n100.r10.s097.low_depth.tsv" tmp.vcf.gz > "n100.r10.s097_output/n100.r10.s097.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s097_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:626cd066dc550df21bd6c3fbef6fbfca40b3ac2bbaa13b959be5ed7dfd73d9de 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.3MiB max=129.1MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 17:42:35 scheduler task 28f7cc90 (flow 7a4cdbd1): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s097.tar.gz resources {}
2021/07/08 17:42:35  ->  n100.r10.s097.Main.cp_out_file 7a4cdbd1 exec extern s3://niema-test/n100/r10/n100.r10.s097.tar.gz 35.8MiB
2021/07/08 17:42:35 scheduler task f24dd117 (flow d06527d9): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:35 scheduler task f24dd117 (flow d06527d9): transferring output (try 0): started
2021/07/08 17:42:35 scheduler task d7c574d6 (flow d719cd29): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:35 scheduler task d7c574d6 (flow d719cd29): unloading (try 0): started
2021/07/08 17:42:35 scheduler task d7c574d6 (flow d719cd29): unloading list<val<.=d70d45e4 35.8MiB> 35.8MiB>
2021/07/08 17:42:35 scheduler task d7c574d6 (flow d719cd29): unloading val<.=ef88c4c5 35.4MiB>
2021/07/08 17:42:35 scheduler task d7c574d6 (flow d719cd29): unloading val<.=ac0d3b7d 35.4MiB>
2021/07/08 17:42:35 scheduler task 0a72f984 (flow 0210f1d8): unloaded val<.=0c7e2f6c 35.4MiB>
2021/07/08 17:42:35 scheduler task 0a72f984 (flow 0210f1d8): unloaded val<.=8ddf2909 35.4MiB>
2021/07/08 17:42:35 scheduler task 0a72f984 (flow 0210f1d8): unloaded list<val<.=0bc81b38 35.8MiB> 35.8MiB>
2021/07/08 17:42:35 scheduler task 0a72f984 (flow 0210f1d8): unloading (try 0): successful, next state: complete
2021/07/08 17:42:35  <-  n100.r10.s078.Main.out_file 0210f1d8 ok     exec 4m49s 35.8MiB
2021/07/08 17:42:35 n100.r10.s078.Main.out_file 0210f1d8 n100/r10/n100.r10.s078.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:839838155f1038e666be588a6141e0badf27775b42741c535bba610ba09d4ef9
	sha256:0210f1d8ed3b5b85d6e72a0cee425a986f4968caeecfae3f5b1a1f7f9a294a2d
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0a72f98437145bb9d0d6fc08ff27c155eadb36f2b61e8b9538e2bbcee26a8828
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s078_output"
	    wget -O "n100.r10.s078_output/n100.r10.s078.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s078_output/n100.r10.s078.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s078_output/n100.r10.s078.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s078_output/n100.r10.s078.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s078_output/n100.r10.s078.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s078_output/n100.r10.s078.reference.fas" "n100.r10.s078_output/n100.r10.s078.fq1.fastq" "n100.r10.s078_output/n100.r10.s078.fq2.fastq" | samtools view -bS - > "n100.r10.s078_output/n100.r10.s078.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s078_output/n100.r10.s078.untrimmed.sorted.bam" "n100.r10.s078_output/n100.r10.s078.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s078_output/n100.r10.s078.untrimmed.sorted.bam" -b "n100.r10.s078_output/n100.r10.s078.primers.bed" -p "n100.r10.s078_output/n100.r10.s078.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s078_output/n100.r10.s078.trimmed.sorted.bam" "n100.r10.s078_output/n100.r10.s078.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s078_output/n100.r10.s078.reference.fas" "n100.r10.s078_output/n100.r10.s078.trimmed.sorted.bam" > "n100.r10.s078_output/n100.r10.s078.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s078_output/n100.r10.s078.reference.fas" --call-indels "n100.r10.s078_output/n100.r10.s078.trimmed.sorted.bam" > "n100.r10.s078_output/n100.r10.s078.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s078_output/n100.r10.s078.trimmed.sorted.bam" > "n100.r10.s078_output/n100.r10.s078.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s078_output/n100.r10.s078.depth.txt" "n100.r10.s078_output/n100.r10.s078.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s078_output/n100.r10.s078.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s078_output/n100.r10.s078.reference.fas" | bcftools consensus -m "n100.r10.s078_output/n100.r10.s078.low_depth.tsv" tmp.vcf.gz > "n100.r10.s078_output/n100.r10.s078.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s078_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:0bc81b38511f6ddbdbf51b71280bc7f4b09b79846f59a58aed64daaa8230ce35 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.1MiB max=130.9MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 17:42:35 scheduler task c5d7b475 (flow 3efbd6fe): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s078.tar.gz resources {}
2021/07/08 17:42:35  ->  n100.r10.s078.Main.cp_out_file 3efbd6fe exec extern s3://niema-test/n100/r10/n100.r10.s078.tar.gz 35.8MiB
2021/07/08 17:42:35 scheduler task d7c574d6 (flow d719cd29): unloaded list<val<.=d70d45e4 35.8MiB> 35.8MiB>
2021/07/08 17:42:35 scheduler task d7c574d6 (flow d719cd29): unloaded val<.=ef88c4c5 35.4MiB>
2021/07/08 17:42:35 scheduler task d7c574d6 (flow d719cd29): unloaded val<.=ac0d3b7d 35.4MiB>
2021/07/08 17:42:35 scheduler task d7c574d6 (flow d719cd29): unloading (try 0): successful, next state: complete
2021/07/08 17:42:35  <-  n100.r10.s049.Main.out_file d719cd29 ok     exec 4m49s 35.8MiB
2021/07/08 17:42:35 n100.r10.s049.Main.out_file d719cd29 n100/r10/n100.r10.s049.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c7e0b5120da6edf1f9b8a5151de9d6655ec0f1a963eb07785b7bafa8654270ff
	sha256:d719cd2933bc316268e4ea3899d8e4624e8585fa414de751e57b5922837bc569
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d7c574d6f31ab4e4ebb7e022eb8f9a2114193f3847f070ca0efb2d6aa4db699b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s049_output"
	    wget -O "n100.r10.s049_output/n100.r10.s049.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s049_output/n100.r10.s049.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s049_output/n100.r10.s049.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s049_output/n100.r10.s049.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s049_output/n100.r10.s049.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s049_output/n100.r10.s049.reference.fas" "n100.r10.s049_output/n100.r10.s049.fq1.fastq" "n100.r10.s049_output/n100.r10.s049.fq2.fastq" | samtools view -bS - > "n100.r10.s049_output/n100.r10.s049.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s049_output/n100.r10.s049.untrimmed.sorted.bam" "n100.r10.s049_output/n100.r10.s049.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s049_output/n100.r10.s049.untrimmed.sorted.bam" -b "n100.r10.s049_output/n100.r10.s049.primers.bed" -p "n100.r10.s049_output/n100.r10.s049.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s049_output/n100.r10.s049.trimmed.sorted.bam" "n100.r10.s049_output/n100.r10.s049.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s049_output/n100.r10.s049.reference.fas" "n100.r10.s049_output/n100.r10.s049.trimmed.sorted.bam" > "n100.r10.s049_output/n100.r10.s049.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s049_output/n100.r10.s049.reference.fas" --call-indels "n100.r10.s049_output/n100.r10.s049.trimmed.sorted.bam" > "n100.r10.s049_output/n100.r10.s049.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s049_output/n100.r10.s049.trimmed.sorted.bam" > "n100.r10.s049_output/n100.r10.s049.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s049_output/n100.r10.s049.depth.txt" "n100.r10.s049_output/n100.r10.s049.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s049_output/n100.r10.s049.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s049_output/n100.r10.s049.reference.fas" | bcftools consensus -m "n100.r10.s049_output/n100.r10.s049.low_depth.tsv" tmp.vcf.gz > "n100.r10.s049_output/n100.r10.s049.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s049_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d70d45e47d0e2eafc47e9efb8e831fe58d3e9a00c9f4e2f0fd41b07edcb80c6a 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.3MiB max=128.8MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=631B max=2.1KiB
2021/07/08 17:42:35 scheduler task 35cd60e7 (flow f0d8a8e5): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s049.tar.gz resources {}
2021/07/08 17:42:35  ->  n100.r10.s049.Main.cp_out_file f0d8a8e5 exec extern s3://niema-test/n100/r10/n100.r10.s049.tar.gz 35.8MiB
2021/07/08 17:42:35 scheduler task f24dd117 (flow d06527d9): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:35 scheduler task f24dd117 (flow d06527d9): unloading (try 0): started
2021/07/08 17:42:35 scheduler task f24dd117 (flow d06527d9): unloading list<val<.=40ef1c71 35.8MiB> 35.8MiB>
2021/07/08 17:42:35 scheduler task f24dd117 (flow d06527d9): unloading val<.=3636cd25 35.4MiB>
2021/07/08 17:42:35 scheduler task f24dd117 (flow d06527d9): unloading val<.=3639bd1e 35.4MiB>
2021/07/08 17:42:35 scheduler task 28f7cc90 (flow 7a4cdbd1): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:626cd066dc550df21bd6c3fbef6fbfca40b3ac2bbaa13b959be5ed7dfd73d9de -> s3://niema-test/n100/r10/n100.r10.s097.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:42:35  <-  n100.r10.s097.Main.cp_out_file 7a4cdbd1 ok   extern 0s 35.8MiB
2021/07/08 17:42:35 scheduler task f24dd117 (flow d06527d9): unloaded val<.=3639bd1e 35.4MiB>
2021/07/08 17:42:35 scheduler task f24dd117 (flow d06527d9): unloaded list<val<.=40ef1c71 35.8MiB> 35.8MiB>
2021/07/08 17:42:35 scheduler task f24dd117 (flow d06527d9): unloaded val<.=3636cd25 35.4MiB>
2021/07/08 17:42:35 scheduler task f24dd117 (flow d06527d9): unloading (try 0): successful, next state: complete
2021/07/08 17:42:35  <-  n100.r10.s084.Main.out_file d06527d9 ok     exec 4m48s 35.8MiB
2021/07/08 17:42:35 n100.r10.s084.Main.out_file d06527d9 n100/r10/n100.r10.s084.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:74bb9f0982427cf10d37ad07b675662a00936ec26ccfca0ca3314e01d5fe6904
	sha256:d06527d97b515d2da09abab02ff02f7658c807f9f9fc857905e32add889e56ef
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f24dd1178ed656318b99cc42be67896d2c5fcb770b281b750dab9a35ce35fd0e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s084_output"
	    wget -O "n100.r10.s084_output/n100.r10.s084.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s084_output/n100.r10.s084.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s084_output/n100.r10.s084.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s084_output/n100.r10.s084.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s084_output/n100.r10.s084.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s084_output/n100.r10.s084.reference.fas" "n100.r10.s084_output/n100.r10.s084.fq1.fastq" "n100.r10.s084_output/n100.r10.s084.fq2.fastq" | samtools view -bS - > "n100.r10.s084_output/n100.r10.s084.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s084_output/n100.r10.s084.untrimmed.sorted.bam" "n100.r10.s084_output/n100.r10.s084.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s084_output/n100.r10.s084.untrimmed.sorted.bam" -b "n100.r10.s084_output/n100.r10.s084.primers.bed" -p "n100.r10.s084_output/n100.r10.s084.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s084_output/n100.r10.s084.trimmed.sorted.bam" "n100.r10.s084_output/n100.r10.s084.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s084_output/n100.r10.s084.reference.fas" "n100.r10.s084_output/n100.r10.s084.trimmed.sorted.bam" > "n100.r10.s084_output/n100.r10.s084.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s084_output/n100.r10.s084.reference.fas" --call-indels "n100.r10.s084_output/n100.r10.s084.trimmed.sorted.bam" > "n100.r10.s084_output/n100.r10.s084.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s084_output/n100.r10.s084.trimmed.sorted.bam" > "n100.r10.s084_output/n100.r10.s084.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s084_output/n100.r10.s084.depth.txt" "n100.r10.s084_output/n100.r10.s084.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s084_output/n100.r10.s084.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s084_output/n100.r10.s084.reference.fas" | bcftools consensus -m "n100.r10.s084_output/n100.r10.s084.low_depth.tsv" tmp.vcf.gz > "n100.r10.s084_output/n100.r10.s084.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s084_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:40ef1c7198b664dfb3fc9f390cb17bed7e4871f844222fcf1a478aad2df5a44a 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=19.9MiB max=128.2MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 17:42:35 scheduler task 903fb8bd (flow 0abf74cc): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s084.tar.gz resources {}
2021/07/08 17:42:35  ->  n100.r10.s084.Main.cp_out_file 0abf74cc exec extern s3://niema-test/n100/r10/n100.r10.s084.tar.gz 35.8MiB
2021/07/08 17:42:35 scheduler task e8c8e808 (flow 5077aef2): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:35 scheduler task e8c8e808 (flow 5077aef2): promoting objects (try 0): started
2021/07/08 17:42:35 scheduler task 6f235a83 (flow 3c6bdf5b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:35 scheduler task 6f235a83 (flow 3c6bdf5b): promoting objects (try 0): started
2021/07/08 17:42:35 scheduler task e8c8e808 (flow 5077aef2): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:36 scheduler task e8c8e808 (flow 5077aef2): retrieving diagnostic output (try 0): started
2021/07/08 17:42:36 scheduler task 6f235a83 (flow 3c6bdf5b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:36 scheduler task 6f235a83 (flow 3c6bdf5b): retrieving diagnostic output (try 0): started
2021/07/08 17:42:36 scheduler task e8c8e808 (flow 5077aef2): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:36 scheduler task e8c8e808 (flow 5077aef2): retrieving result (try 0): started
2021/07/08 17:42:36 scheduler task 35cd60e7 (flow f0d8a8e5): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d70d45e47d0e2eafc47e9efb8e831fe58d3e9a00c9f4e2f0fd41b07edcb80c6a -> s3://niema-test/n100/r10/n100.r10.s049.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:42:36  <-  n100.r10.s049.Main.cp_out_file f0d8a8e5 ok   extern 0s 35.8MiB
2021/07/08 17:42:36 scheduler task 6f235a83 (flow 3c6bdf5b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:36 scheduler task 6f235a83 (flow 3c6bdf5b): retrieving result (try 0): started
2021/07/08 17:42:36 scheduler task e8c8e808 (flow 5077aef2): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:36 scheduler task e8c8e808 (flow 5077aef2): transferring output (try 0): started
2021/07/08 17:42:36 scheduler task 6f235a83 (flow 3c6bdf5b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:36 scheduler task 6f235a83 (flow 3c6bdf5b): transferring output (try 0): started
2021/07/08 17:42:36 scheduler task 63cda6a4 (flow 20c10487): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:36 scheduler task 63cda6a4 (flow 20c10487): promoting objects (try 0): started
2021/07/08 17:42:36 scheduler task 63cda6a4 (flow 20c10487): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:36 scheduler task 63cda6a4 (flow 20c10487): retrieving diagnostic output (try 0): started
2021/07/08 17:42:36 scheduler task 903fb8bd (flow 0abf74cc): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:40ef1c7198b664dfb3fc9f390cb17bed7e4871f844222fcf1a478aad2df5a44a -> s3://niema-test/n100/r10/n100.r10.s084.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:42:36  <-  n100.r10.s084.Main.cp_out_file 0abf74cc ok   extern 0s 35.8MiB
2021/07/08 17:42:36 scheduler task 63cda6a4 (flow 20c10487): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:36 scheduler task 63cda6a4 (flow 20c10487): retrieving result (try 0): started
2021/07/08 17:42:36 scheduler task e8c8e808 (flow 5077aef2): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:36 scheduler task e8c8e808 (flow 5077aef2): unloading (try 0): started
2021/07/08 17:42:36 scheduler task e8c8e808 (flow 5077aef2): unloading list<val<.=bbcdd51b 35.7MiB> 35.7MiB>
2021/07/08 17:42:36 scheduler task e8c8e808 (flow 5077aef2): unloading val<.=2522226f 35.4MiB>
2021/07/08 17:42:36 scheduler task e8c8e808 (flow 5077aef2): unloading val<.=5c93d810 35.4MiB>
2021/07/08 17:42:36 scheduler task 215d2c98 (flow f5b79134): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:36 scheduler task 215d2c98 (flow f5b79134): promoting objects (try 0): started
2021/07/08 17:42:36 scheduler task 63cda6a4 (flow 20c10487): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:36 scheduler task 6f235a83 (flow 3c6bdf5b): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:36 scheduler task 63cda6a4 (flow 20c10487): transferring output (try 0): started
2021/07/08 17:42:36 scheduler task 6f235a83 (flow 3c6bdf5b): unloading (try 0): started
2021/07/08 17:42:36 scheduler task 6f235a83 (flow 3c6bdf5b): unloading val<.=a6b1f05e 35.4MiB>
2021/07/08 17:42:36 scheduler task 6f235a83 (flow 3c6bdf5b): unloading val<.=cc2cb302 35.4MiB>
2021/07/08 17:42:36 scheduler task 6f235a83 (flow 3c6bdf5b): unloading list<val<.=11cf9f32 35.8MiB> 35.8MiB>
2021/07/08 17:42:36 scheduler task e8c8e808 (flow 5077aef2): unloaded val<.=2522226f 35.4MiB>
2021/07/08 17:42:36 scheduler task e8c8e808 (flow 5077aef2): unloaded list<val<.=bbcdd51b 35.7MiB> 35.7MiB>
2021/07/08 17:42:36 scheduler task e8c8e808 (flow 5077aef2): unloaded val<.=5c93d810 35.4MiB>
2021/07/08 17:42:36 scheduler task e8c8e808 (flow 5077aef2): unloading (try 0): successful, next state: complete
2021/07/08 17:42:36  <-  n100.r10.s025.Main.out_file 5077aef2 ok     exec 4m50s 35.7MiB
2021/07/08 17:42:36 n100.r10.s025.Main.out_file 5077aef2 n100/r10/n100.r10.s025.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6d1d19826881b33355fa806b6b2eebd11696559afc3b1532d2f11a3bbc466058
	sha256:5077aef253d859f57e30b0f1dacf0834513fdfc7834c95cfa94c8e785532a9ea
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e8c8e80857ff7d82e3d447098d24c8015180431fd5512d7ccb1aac50122a939f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s025_output"
	    wget -O "n100.r10.s025_output/n100.r10.s025.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s025_output/n100.r10.s025.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s025_output/n100.r10.s025.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s025_output/n100.r10.s025.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s025_output/n100.r10.s025.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s025_output/n100.r10.s025.reference.fas" "n100.r10.s025_output/n100.r10.s025.fq1.fastq" "n100.r10.s025_output/n100.r10.s025.fq2.fastq" | samtools view -bS - > "n100.r10.s025_output/n100.r10.s025.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s025_output/n100.r10.s025.untrimmed.sorted.bam" "n100.r10.s025_output/n100.r10.s025.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s025_output/n100.r10.s025.untrimmed.sorted.bam" -b "n100.r10.s025_output/n100.r10.s025.primers.bed" -p "n100.r10.s025_output/n100.r10.s025.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s025_output/n100.r10.s025.trimmed.sorted.bam" "n100.r10.s025_output/n100.r10.s025.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s025_output/n100.r10.s025.reference.fas" "n100.r10.s025_output/n100.r10.s025.trimmed.sorted.bam" > "n100.r10.s025_output/n100.r10.s025.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s025_output/n100.r10.s025.reference.fas" --call-indels "n100.r10.s025_output/n100.r10.s025.trimmed.sorted.bam" > "n100.r10.s025_output/n100.r10.s025.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s025_output/n100.r10.s025.trimmed.sorted.bam" > "n100.r10.s025_output/n100.r10.s025.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s025_output/n100.r10.s025.depth.txt" "n100.r10.s025_output/n100.r10.s025.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s025_output/n100.r10.s025.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s025_output/n100.r10.s025.reference.fas" | bcftools consensus -m "n100.r10.s025_output/n100.r10.s025.low_depth.tsv" tmp.vcf.gz > "n100.r10.s025_output/n100.r10.s025.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s025_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:bbcdd51bf20c9c65be232fe9caf13877801fedf0c1174ab4394713c0d903ff29 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=19.7MiB max=127.8MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=627B max=2.0KiB
2021/07/08 17:42:36 scheduler task d714bcb1 (flow 8e1aaf60): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s025.tar.gz resources {}
2021/07/08 17:42:36  ->  n100.r10.s025.Main.cp_out_file 8e1aaf60 exec extern s3://niema-test/n100/r10/n100.r10.s025.tar.gz 35.7MiB
2021/07/08 17:42:36 scheduler task 6f235a83 (flow 3c6bdf5b): unloaded val<.=cc2cb302 35.4MiB>
2021/07/08 17:42:36 scheduler task 6f235a83 (flow 3c6bdf5b): unloaded val<.=a6b1f05e 35.4MiB>
2021/07/08 17:42:36 scheduler task 215d2c98 (flow f5b79134): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:36 scheduler task 6f235a83 (flow 3c6bdf5b): unloaded list<val<.=11cf9f32 35.8MiB> 35.8MiB>
2021/07/08 17:42:36 scheduler task 6f235a83 (flow 3c6bdf5b): unloading (try 0): successful, next state: complete
2021/07/08 17:42:36 scheduler task 215d2c98 (flow f5b79134): retrieving diagnostic output (try 0): started
2021/07/08 17:42:36  <-  n100.r10.s076.Main.out_file 3c6bdf5b ok     exec 4m51s 35.8MiB
2021/07/08 17:42:36 n100.r10.s076.Main.out_file 3c6bdf5b n100/r10/n100.r10.s076.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e88e88c68dc9644b956034a7df5f7b07e3d4f309c63497a6bef228182a25f93a
	sha256:3c6bdf5badd79855b94974a42a6add04a6650c071be373b6beea717c6221357d
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6f235a83143524bd5e4baa74fbb83bb1acb8a5ba22f5a8fbd3d2d43065280715
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s076_output"
	    wget -O "n100.r10.s076_output/n100.r10.s076.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s076_output/n100.r10.s076.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s076_output/n100.r10.s076.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s076_output/n100.r10.s076.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s076_output/n100.r10.s076.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s076_output/n100.r10.s076.reference.fas" "n100.r10.s076_output/n100.r10.s076.fq1.fastq" "n100.r10.s076_output/n100.r10.s076.fq2.fastq" | samtools view -bS - > "n100.r10.s076_output/n100.r10.s076.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s076_output/n100.r10.s076.untrimmed.sorted.bam" "n100.r10.s076_output/n100.r10.s076.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s076_output/n100.r10.s076.untrimmed.sorted.bam" -b "n100.r10.s076_output/n100.r10.s076.primers.bed" -p "n100.r10.s076_output/n100.r10.s076.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s076_output/n100.r10.s076.trimmed.sorted.bam" "n100.r10.s076_output/n100.r10.s076.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s076_output/n100.r10.s076.reference.fas" "n100.r10.s076_output/n100.r10.s076.trimmed.sorted.bam" > "n100.r10.s076_output/n100.r10.s076.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s076_output/n100.r10.s076.reference.fas" --call-indels "n100.r10.s076_output/n100.r10.s076.trimmed.sorted.bam" > "n100.r10.s076_output/n100.r10.s076.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s076_output/n100.r10.s076.trimmed.sorted.bam" > "n100.r10.s076_output/n100.r10.s076.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s076_output/n100.r10.s076.depth.txt" "n100.r10.s076_output/n100.r10.s076.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s076_output/n100.r10.s076.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s076_output/n100.r10.s076.reference.fas" | bcftools consensus -m "n100.r10.s076_output/n100.r10.s076.low_depth.tsv" tmp.vcf.gz > "n100.r10.s076_output/n100.r10.s076.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s076_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:11cf9f32c5714c669fea23fe07d20063ae95d4815ada33eb5e3e3a8f903bcd47 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.3MiB max=129.4MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 17:42:36 scheduler task a9ca391b (flow 3a116c9d): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s076.tar.gz resources {}
2021/07/08 17:42:36  ->  n100.r10.s076.Main.cp_out_file 3a116c9d exec extern s3://niema-test/n100/r10/n100.r10.s076.tar.gz 35.8MiB
2021/07/08 17:42:37 scheduler task 215d2c98 (flow f5b79134): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:37 scheduler task 215d2c98 (flow f5b79134): retrieving result (try 0): started
2021/07/08 17:42:37 scheduler task 215d2c98 (flow f5b79134): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:37 scheduler task 215d2c98 (flow f5b79134): transferring output (try 0): started
2021/07/08 17:42:37 scheduler task 63cda6a4 (flow 20c10487): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:37 scheduler task 63cda6a4 (flow 20c10487): unloading (try 0): started
2021/07/08 17:42:37 scheduler task 63cda6a4 (flow 20c10487): unloading list<val<.=46ba608b 35.8MiB> 35.8MiB>
2021/07/08 17:42:37 scheduler task 63cda6a4 (flow 20c10487): unloading val<.=2984e354 35.4MiB>
2021/07/08 17:42:37 scheduler task 63cda6a4 (flow 20c10487): unloading val<.=e2802967 35.4MiB>
2021/07/08 17:42:37 scheduler task 63cda6a4 (flow 20c10487): unloaded val<.=2984e354 35.4MiB>
2021/07/08 17:42:37 scheduler task 63cda6a4 (flow 20c10487): unloaded list<val<.=46ba608b 35.8MiB> 35.8MiB>
2021/07/08 17:42:37 scheduler task 63cda6a4 (flow 20c10487): unloaded val<.=e2802967 35.4MiB>
2021/07/08 17:42:37 scheduler task 63cda6a4 (flow 20c10487): unloading (try 0): successful, next state: complete
2021/07/08 17:42:37  <-  n100.r10.s037.Main.out_file 20c10487 ok     exec 4m50s 35.8MiB
2021/07/08 17:42:37 n100.r10.s037.Main.out_file 20c10487 n100/r10/n100.r10.s037.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b0ab6dfc3e416869281c926ea8b220d3f0e3b8bc5360717e00c06b735fa6ab28
	sha256:20c10487f2588897d0737dded5b925c366a5818d0e79b25d3b1cfd20c371709c
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/63cda6a40c40d605fc4da1317f89fc535199ba1698152a9c23328e8f17156b8a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s037_output"
	    wget -O "n100.r10.s037_output/n100.r10.s037.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s037_output/n100.r10.s037.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s037_output/n100.r10.s037.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s037_output/n100.r10.s037.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s037_output/n100.r10.s037.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s037_output/n100.r10.s037.reference.fas" "n100.r10.s037_output/n100.r10.s037.fq1.fastq" "n100.r10.s037_output/n100.r10.s037.fq2.fastq" | samtools view -bS - > "n100.r10.s037_output/n100.r10.s037.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s037_output/n100.r10.s037.untrimmed.sorted.bam" "n100.r10.s037_output/n100.r10.s037.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s037_output/n100.r10.s037.untrimmed.sorted.bam" -b "n100.r10.s037_output/n100.r10.s037.primers.bed" -p "n100.r10.s037_output/n100.r10.s037.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s037_output/n100.r10.s037.trimmed.sorted.bam" "n100.r10.s037_output/n100.r10.s037.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s037_output/n100.r10.s037.reference.fas" "n100.r10.s037_output/n100.r10.s037.trimmed.sorted.bam" > "n100.r10.s037_output/n100.r10.s037.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s037_output/n100.r10.s037.reference.fas" --call-indels "n100.r10.s037_output/n100.r10.s037.trimmed.sorted.bam" > "n100.r10.s037_output/n100.r10.s037.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s037_output/n100.r10.s037.trimmed.sorted.bam" > "n100.r10.s037_output/n100.r10.s037.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s037_output/n100.r10.s037.depth.txt" "n100.r10.s037_output/n100.r10.s037.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s037_output/n100.r10.s037.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s037_output/n100.r10.s037.reference.fas" | bcftools consensus -m "n100.r10.s037_output/n100.r10.s037.low_depth.tsv" tmp.vcf.gz > "n100.r10.s037_output/n100.r10.s037.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s037_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:46ba608b36508242b9a30e86a465b72af40f69dd94bbbacb5ec9613e0ecd1062 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=19.5MiB max=124.2MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 17:42:37 scheduler task e3c4888a (flow 98b1e70c): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s037.tar.gz resources {}
2021/07/08 17:42:37  ->  n100.r10.s037.Main.cp_out_file 98b1e70c exec extern s3://niema-test/n100/r10/n100.r10.s037.tar.gz 35.8MiB
2021/07/08 17:42:37 scheduler task a9ca391b (flow 3a116c9d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:11cf9f32c5714c669fea23fe07d20063ae95d4815ada33eb5e3e3a8f903bcd47 -> s3://niema-test/n100/r10/n100.r10.s076.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:42:37  <-  n100.r10.s076.Main.cp_out_file 3a116c9d ok   extern 0s 35.8MiB
2021/07/08 17:42:37 scheduler task 215d2c98 (flow f5b79134): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:37 scheduler task 215d2c98 (flow f5b79134): unloading (try 0): started
2021/07/08 17:42:37 scheduler task 215d2c98 (flow f5b79134): unloading list<val<.=6b051734 35.8MiB> 35.8MiB>
2021/07/08 17:42:37 scheduler task 215d2c98 (flow f5b79134): unloading val<.=270b5701 35.4MiB>
2021/07/08 17:42:37 scheduler task 215d2c98 (flow f5b79134): unloading val<.=b9c92bdb 35.4MiB>
2021/07/08 17:42:37 scheduler task d714bcb1 (flow 8e1aaf60): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:bbcdd51bf20c9c65be232fe9caf13877801fedf0c1174ab4394713c0d903ff29 -> s3://niema-test/n100/r10/n100.r10.s025.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:42:37  <-  n100.r10.s025.Main.cp_out_file 8e1aaf60 ok   extern 0s 35.7MiB
2021/07/08 17:42:37 scheduler task 215d2c98 (flow f5b79134): unloaded val<.=270b5701 35.4MiB>
2021/07/08 17:42:37 scheduler task 215d2c98 (flow f5b79134): unloaded list<val<.=6b051734 35.8MiB> 35.8MiB>
2021/07/08 17:42:37 scheduler task 215d2c98 (flow f5b79134): unloaded val<.=b9c92bdb 35.4MiB>
2021/07/08 17:42:37 scheduler task 215d2c98 (flow f5b79134): unloading (try 0): successful, next state: complete
2021/07/08 17:42:37  <-  n100.r10.s020.Main.out_file f5b79134 ok     exec 4m52s 35.8MiB
2021/07/08 17:42:37 n100.r10.s020.Main.out_file f5b79134 n100/r10/n100.r10.s020.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7bf3d577904eeac1f6548317ca6eddc49f59cf75fcaad4e10e1da136a867ff7e
	sha256:f5b791348e6b1a3c81901df3e352fd4b422808db6bd8e8b340e9eff2de8730e9
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/215d2c988a6305cad47c780e07b1032bdc85ecc089fbdacefcfeba8d65c08dcd
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s020_output"
	    wget -O "n100.r10.s020_output/n100.r10.s020.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s020_output/n100.r10.s020.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s020_output/n100.r10.s020.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s020_output/n100.r10.s020.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s020_output/n100.r10.s020.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s020_output/n100.r10.s020.reference.fas" "n100.r10.s020_output/n100.r10.s020.fq1.fastq" "n100.r10.s020_output/n100.r10.s020.fq2.fastq" | samtools view -bS - > "n100.r10.s020_output/n100.r10.s020.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s020_output/n100.r10.s020.untrimmed.sorted.bam" "n100.r10.s020_output/n100.r10.s020.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s020_output/n100.r10.s020.untrimmed.sorted.bam" -b "n100.r10.s020_output/n100.r10.s020.primers.bed" -p "n100.r10.s020_output/n100.r10.s020.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s020_output/n100.r10.s020.trimmed.sorted.bam" "n100.r10.s020_output/n100.r10.s020.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s020_output/n100.r10.s020.reference.fas" "n100.r10.s020_output/n100.r10.s020.trimmed.sorted.bam" > "n100.r10.s020_output/n100.r10.s020.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s020_output/n100.r10.s020.reference.fas" --call-indels "n100.r10.s020_output/n100.r10.s020.trimmed.sorted.bam" > "n100.r10.s020_output/n100.r10.s020.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s020_output/n100.r10.s020.trimmed.sorted.bam" > "n100.r10.s020_output/n100.r10.s020.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s020_output/n100.r10.s020.depth.txt" "n100.r10.s020_output/n100.r10.s020.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s020_output/n100.r10.s020.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s020_output/n100.r10.s020.reference.fas" | bcftools consensus -m "n100.r10.s020_output/n100.r10.s020.low_depth.tsv" tmp.vcf.gz > "n100.r10.s020_output/n100.r10.s020.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s020_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:6b051734f2abaef376d4512eda88aa9bb9bfca1d6f7825fcc91b52291874cfa2 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.2MiB max=128.4MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 17:42:37 scheduler task 0c51bfbd (flow f94e1744): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s020.tar.gz resources {}
2021/07/08 17:42:37  ->  n100.r10.s020.Main.cp_out_file f94e1744 exec extern s3://niema-test/n100/r10/n100.r10.s020.tar.gz 35.8MiB
2021/07/08 17:42:38 scheduler task c5d7b475 (flow 3efbd6fe): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:0bc81b38511f6ddbdbf51b71280bc7f4b09b79846f59a58aed64daaa8230ce35 -> s3://niema-test/n100/r10/n100.r10.s078.tar.gz (35.8MiB) in 3s (11.9MiB/s) 
2021/07/08 17:42:38  <-  n100.r10.s078.Main.cp_out_file 3efbd6fe ok   extern 0s 35.8MiB
2021/07/08 17:42:38 scheduler task e3c4888a (flow 98b1e70c): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:46ba608b36508242b9a30e86a465b72af40f69dd94bbbacb5ec9613e0ecd1062 -> s3://niema-test/n100/r10/n100.r10.s037.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:42:38  <-  n100.r10.s037.Main.cp_out_file 98b1e70c ok   extern 0s 35.8MiB
2021/07/08 17:42:38 scheduler task 0c51bfbd (flow f94e1744): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:6b051734f2abaef376d4512eda88aa9bb9bfca1d6f7825fcc91b52291874cfa2 -> s3://niema-test/n100/r10/n100.r10.s020.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:42:38  <-  n100.r10.s020.Main.cp_out_file f94e1744 ok   extern 0s 35.8MiB
2021/07/08 17:42:40 scheduler task a510cb24 (flow 1bfcc9a2): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:40 scheduler task a510cb24 (flow 1bfcc9a2): promoting objects (try 0): started
2021/07/08 17:42:40 scheduler task a510cb24 (flow 1bfcc9a2): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:40 scheduler task a510cb24 (flow 1bfcc9a2): retrieving diagnostic output (try 0): started
2021/07/08 17:42:40 scheduler task a510cb24 (flow 1bfcc9a2): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:40 scheduler task a510cb24 (flow 1bfcc9a2): retrieving result (try 0): started
2021/07/08 17:42:40 scheduler task a510cb24 (flow 1bfcc9a2): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:40 scheduler task a510cb24 (flow 1bfcc9a2): transferring output (try 0): started
2021/07/08 17:42:41 scheduler task a510cb24 (flow 1bfcc9a2): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:41 scheduler task a510cb24 (flow 1bfcc9a2): unloading (try 0): started
2021/07/08 17:42:41 scheduler task a510cb24 (flow 1bfcc9a2): unloading list<val<.=fb68588e 35.7MiB> 35.7MiB>
2021/07/08 17:42:41 scheduler task a510cb24 (flow 1bfcc9a2): unloading val<.=c0fda625 35.4MiB>
2021/07/08 17:42:41 scheduler task a510cb24 (flow 1bfcc9a2): unloading val<.=5db513fc 35.4MiB>
2021/07/08 17:42:41 scheduler task a510cb24 (flow 1bfcc9a2): unloaded list<val<.=fb68588e 35.7MiB> 35.7MiB>
2021/07/08 17:42:41 scheduler task a510cb24 (flow 1bfcc9a2): unloaded val<.=c0fda625 35.4MiB>
2021/07/08 17:42:41 scheduler task a510cb24 (flow 1bfcc9a2): unloaded val<.=5db513fc 35.4MiB>
2021/07/08 17:42:41 scheduler task a510cb24 (flow 1bfcc9a2): unloading (try 0): successful, next state: complete
2021/07/08 17:42:41  <-  n100.r10.s047.Main.out_file 1bfcc9a2 ok     exec 4m54s 35.7MiB
2021/07/08 17:42:41 n100.r10.s047.Main.out_file 1bfcc9a2 n100/r10/n100.r10.s047.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:466e109e5ae189aa84a69568bcf18f7344049c0bdbd9c235f0c42a59a04fffa1
	sha256:1bfcc9a2de43a162207fa306ba9f3fa11fbab8404ecd57df81b7058964cdd7fb
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a510cb24316b90b5726a561f0a4d4b5fc659de8455dacd4e577de767b494490b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s047_output"
	    wget -O "n100.r10.s047_output/n100.r10.s047.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s047_output/n100.r10.s047.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s047_output/n100.r10.s047.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s047_output/n100.r10.s047.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s047_output/n100.r10.s047.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s047_output/n100.r10.s047.reference.fas" "n100.r10.s047_output/n100.r10.s047.fq1.fastq" "n100.r10.s047_output/n100.r10.s047.fq2.fastq" | samtools view -bS - > "n100.r10.s047_output/n100.r10.s047.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s047_output/n100.r10.s047.untrimmed.sorted.bam" "n100.r10.s047_output/n100.r10.s047.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s047_output/n100.r10.s047.untrimmed.sorted.bam" -b "n100.r10.s047_output/n100.r10.s047.primers.bed" -p "n100.r10.s047_output/n100.r10.s047.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s047_output/n100.r10.s047.trimmed.sorted.bam" "n100.r10.s047_output/n100.r10.s047.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s047_output/n100.r10.s047.reference.fas" "n100.r10.s047_output/n100.r10.s047.trimmed.sorted.bam" > "n100.r10.s047_output/n100.r10.s047.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s047_output/n100.r10.s047.reference.fas" --call-indels "n100.r10.s047_output/n100.r10.s047.trimmed.sorted.bam" > "n100.r10.s047_output/n100.r10.s047.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s047_output/n100.r10.s047.trimmed.sorted.bam" > "n100.r10.s047_output/n100.r10.s047.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s047_output/n100.r10.s047.depth.txt" "n100.r10.s047_output/n100.r10.s047.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s047_output/n100.r10.s047.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s047_output/n100.r10.s047.reference.fas" | bcftools consensus -m "n100.r10.s047_output/n100.r10.s047.low_depth.tsv" tmp.vcf.gz > "n100.r10.s047_output/n100.r10.s047.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s047_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:fb68588e916efe402aa0a2e03ca54f4543553fea109e6154e464465dded05bb3 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=18.6MiB max=124.1MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=632B max=2.1KiB
2021/07/08 17:42:41 scheduler task 9105a85c (flow 9083fff5): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s047.tar.gz resources {}
2021/07/08 17:42:41  ->  n100.r10.s047.Main.cp_out_file 9083fff5 exec extern s3://niema-test/n100/r10/n100.r10.s047.tar.gz 35.7MiB
2021/07/08 17:42:41 scheduler task 49c1b19d (flow 31d04bff): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:41 scheduler task 49c1b19d (flow 31d04bff): promoting objects (try 0): started
2021/07/08 17:42:41 scheduler task 49c1b19d (flow 31d04bff): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:41 scheduler task 49c1b19d (flow 31d04bff): retrieving diagnostic output (try 0): started
2021/07/08 17:42:41 scheduler task 49c1b19d (flow 31d04bff): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:41 scheduler task 49c1b19d (flow 31d04bff): retrieving result (try 0): started
2021/07/08 17:42:41 scheduler task 9105a85c (flow 9083fff5): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:fb68588e916efe402aa0a2e03ca54f4543553fea109e6154e464465dded05bb3 -> s3://niema-test/n100/r10/n100.r10.s047.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:42:41  <-  n100.r10.s047.Main.cp_out_file 9083fff5 ok   extern 0s 35.7MiB
2021/07/08 17:42:41 scheduler task 49c1b19d (flow 31d04bff): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:41 scheduler task 49c1b19d (flow 31d04bff): transferring output (try 0): started
2021/07/08 17:42:42 scheduler task 3c2c1b67 (flow 9bbddc57): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:42 scheduler task 3c2c1b67 (flow 9bbddc57): promoting objects (try 0): started
2021/07/08 17:42:42 scheduler task 49c1b19d (flow 31d04bff): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:42 scheduler task 3c2c1b67 (flow 9bbddc57): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:42 scheduler task 49c1b19d (flow 31d04bff): unloading (try 0): started
2021/07/08 17:42:42 scheduler task 49c1b19d (flow 31d04bff): unloading list<val<.=fea26343 35.8MiB> 35.8MiB>
2021/07/08 17:42:42 scheduler task 49c1b19d (flow 31d04bff): unloading val<.=781cad3f 35.4MiB>
2021/07/08 17:42:42 scheduler task 49c1b19d (flow 31d04bff): unloading val<.=5ad11b36 35.4MiB>
2021/07/08 17:42:42 scheduler task 3c2c1b67 (flow 9bbddc57): retrieving diagnostic output (try 0): started
2021/07/08 17:42:42 scheduler task 49c1b19d (flow 31d04bff): unloaded val<.=5ad11b36 35.4MiB>
2021/07/08 17:42:42 scheduler task 49c1b19d (flow 31d04bff): unloaded val<.=781cad3f 35.4MiB>
2021/07/08 17:42:42 scheduler task 49c1b19d (flow 31d04bff): unloaded list<val<.=fea26343 35.8MiB> 35.8MiB>
2021/07/08 17:42:42 scheduler task 49c1b19d (flow 31d04bff): unloading (try 0): successful, next state: complete
2021/07/08 17:42:42  <-  n100.r10.s088.Main.out_file 31d04bff ok     exec 4m48s 35.8MiB
2021/07/08 17:42:42 n100.r10.s088.Main.out_file 31d04bff n100/r10/n100.r10.s088.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0aa2bb81cb003988891d84b968be5ea01b1bf8016359e01c84838ed8ac61d315
	sha256:31d04bff2775914d612ce96ce9539fc6be525eca6e9191354b714c4a0c8003a4
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/49c1b19dd4072efa2dbb0e9a1a4587f3e5d09fc003bb5d742232b181199910b2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s088_output"
	    wget -O "n100.r10.s088_output/n100.r10.s088.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s088_output/n100.r10.s088.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s088_output/n100.r10.s088.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s088_output/n100.r10.s088.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s088_output/n100.r10.s088.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s088_output/n100.r10.s088.reference.fas" "n100.r10.s088_output/n100.r10.s088.fq1.fastq" "n100.r10.s088_output/n100.r10.s088.fq2.fastq" | samtools view -bS - > "n100.r10.s088_output/n100.r10.s088.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s088_output/n100.r10.s088.untrimmed.sorted.bam" "n100.r10.s088_output/n100.r10.s088.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s088_output/n100.r10.s088.untrimmed.sorted.bam" -b "n100.r10.s088_output/n100.r10.s088.primers.bed" -p "n100.r10.s088_output/n100.r10.s088.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s088_output/n100.r10.s088.trimmed.sorted.bam" "n100.r10.s088_output/n100.r10.s088.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s088_output/n100.r10.s088.reference.fas" "n100.r10.s088_output/n100.r10.s088.trimmed.sorted.bam" > "n100.r10.s088_output/n100.r10.s088.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s088_output/n100.r10.s088.reference.fas" --call-indels "n100.r10.s088_output/n100.r10.s088.trimmed.sorted.bam" > "n100.r10.s088_output/n100.r10.s088.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s088_output/n100.r10.s088.trimmed.sorted.bam" > "n100.r10.s088_output/n100.r10.s088.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s088_output/n100.r10.s088.depth.txt" "n100.r10.s088_output/n100.r10.s088.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s088_output/n100.r10.s088.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s088_output/n100.r10.s088.reference.fas" | bcftools consensus -m "n100.r10.s088_output/n100.r10.s088.low_depth.tsv" tmp.vcf.gz > "n100.r10.s088_output/n100.r10.s088.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s088_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:fea26343a5df369c9b1ba59ee0f3e982e557659ed85d1f25da1f135b18ee0286 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.3MiB max=125.1MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=625B max=2.0KiB
2021/07/08 17:42:42 scheduler task 9933dd70 (flow edf73cdc): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s088.tar.gz resources {}
2021/07/08 17:42:42  ->  n100.r10.s088.Main.cp_out_file edf73cdc exec extern s3://niema-test/n100/r10/n100.r10.s088.tar.gz 35.8MiB
2021/07/08 17:42:42 scheduler task 3c2c1b67 (flow 9bbddc57): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:42 scheduler task 3c2c1b67 (flow 9bbddc57): retrieving result (try 0): started
2021/07/08 17:42:42 scheduler task 3c2c1b67 (flow 9bbddc57): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:42 scheduler task 3c2c1b67 (flow 9bbddc57): transferring output (try 0): started
2021/07/08 17:42:43 scheduler task 3c2c1b67 (flow 9bbddc57): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:43 scheduler task 3c2c1b67 (flow 9bbddc57): unloading (try 0): started
2021/07/08 17:42:43 scheduler task 3c2c1b67 (flow 9bbddc57): unloading list<val<.=7e860cd7 35.7MiB> 35.7MiB>
2021/07/08 17:42:43 scheduler task 3c2c1b67 (flow 9bbddc57): unloading val<.=3f6414f0 35.4MiB>
2021/07/08 17:42:43 scheduler task 3c2c1b67 (flow 9bbddc57): unloading val<.=5c809dad 35.4MiB>
2021/07/08 17:42:43 scheduler task 9933dd70 (flow edf73cdc): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:fea26343a5df369c9b1ba59ee0f3e982e557659ed85d1f25da1f135b18ee0286 -> s3://niema-test/n100/r10/n100.r10.s088.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:42:43  <-  n100.r10.s088.Main.cp_out_file edf73cdc ok   extern 0s 35.8MiB
2021/07/08 17:42:43 scheduler task 3c2c1b67 (flow 9bbddc57): unloaded list<val<.=7e860cd7 35.7MiB> 35.7MiB>
2021/07/08 17:42:43 scheduler task 3c2c1b67 (flow 9bbddc57): unloaded val<.=3f6414f0 35.4MiB>
2021/07/08 17:42:43 scheduler task 3c2c1b67 (flow 9bbddc57): unloaded val<.=5c809dad 35.4MiB>
2021/07/08 17:42:43 scheduler task 3c2c1b67 (flow 9bbddc57): unloading (try 0): successful, next state: complete
2021/07/08 17:42:43  <-  n100.r10.s042.Main.out_file 9bbddc57 ok     exec 4m49s 35.7MiB
2021/07/08 17:42:43 n100.r10.s042.Main.out_file 9bbddc57 n100/r10/n100.r10.s042.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:92dec8bab667cf9e730f07ba4101645c4072edc9aae4bad0c192bc674f4bb1cc
	sha256:9bbddc57e55f5b61be2e37a51de65412133f7caf91fe098bd7ba5ad6854dfae3
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3c2c1b672a9e8f567ecac85937ba56a2d5299c9c2413777eb374c116fc5d527b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s042_output"
	    wget -O "n100.r10.s042_output/n100.r10.s042.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s042_output/n100.r10.s042.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s042_output/n100.r10.s042.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s042_output/n100.r10.s042.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s042_output/n100.r10.s042.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s042_output/n100.r10.s042.reference.fas" "n100.r10.s042_output/n100.r10.s042.fq1.fastq" "n100.r10.s042_output/n100.r10.s042.fq2.fastq" | samtools view -bS - > "n100.r10.s042_output/n100.r10.s042.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s042_output/n100.r10.s042.untrimmed.sorted.bam" "n100.r10.s042_output/n100.r10.s042.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s042_output/n100.r10.s042.untrimmed.sorted.bam" -b "n100.r10.s042_output/n100.r10.s042.primers.bed" -p "n100.r10.s042_output/n100.r10.s042.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s042_output/n100.r10.s042.trimmed.sorted.bam" "n100.r10.s042_output/n100.r10.s042.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s042_output/n100.r10.s042.reference.fas" "n100.r10.s042_output/n100.r10.s042.trimmed.sorted.bam" > "n100.r10.s042_output/n100.r10.s042.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s042_output/n100.r10.s042.reference.fas" --call-indels "n100.r10.s042_output/n100.r10.s042.trimmed.sorted.bam" > "n100.r10.s042_output/n100.r10.s042.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s042_output/n100.r10.s042.trimmed.sorted.bam" > "n100.r10.s042_output/n100.r10.s042.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s042_output/n100.r10.s042.depth.txt" "n100.r10.s042_output/n100.r10.s042.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s042_output/n100.r10.s042.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s042_output/n100.r10.s042.reference.fas" | bcftools consensus -m "n100.r10.s042_output/n100.r10.s042.low_depth.tsv" tmp.vcf.gz > "n100.r10.s042_output/n100.r10.s042.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s042_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:7e860cd7bee097bc160bf17a1630d2d4c17cbffeeb1299e69cb0030f9199c0f5 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.5MiB max=127.2MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=631B max=2.1KiB
2021/07/08 17:42:43 scheduler task ee7c2a2a (flow 6e9bd13e): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s042.tar.gz resources {}
2021/07/08 17:42:43  ->  n100.r10.s042.Main.cp_out_file 6e9bd13e exec extern s3://niema-test/n100/r10/n100.r10.s042.tar.gz 35.7MiB
2021/07/08 17:42:43 scheduler task ee7c2a2a (flow 6e9bd13e): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:7e860cd7bee097bc160bf17a1630d2d4c17cbffeeb1299e69cb0030f9199c0f5 -> s3://niema-test/n100/r10/n100.r10.s042.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:42:43  <-  n100.r10.s042.Main.cp_out_file 6e9bd13e ok   extern 0s 35.7MiB
2021/07/08 17:42:44 scheduler task eb87e42f (flow 399f20da): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:44 scheduler task eb87e42f (flow 399f20da): promoting objects (try 0): started
2021/07/08 17:42:44 scheduler task eb87e42f (flow 399f20da): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:44 scheduler task eb87e42f (flow 399f20da): retrieving diagnostic output (try 0): started
2021/07/08 17:42:44 scheduler task eb87e42f (flow 399f20da): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:44 scheduler task eb87e42f (flow 399f20da): retrieving result (try 0): started
2021/07/08 17:42:44 scheduler task eb87e42f (flow 399f20da): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:45 scheduler task eb87e42f (flow 399f20da): transferring output (try 0): started
2021/07/08 17:42:45 scheduler task eb87e42f (flow 399f20da): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:45 scheduler task eb87e42f (flow 399f20da): unloading (try 0): started
2021/07/08 17:42:45 scheduler task eb87e42f (flow 399f20da): unloading list<val<.=f78983ff 35.7MiB> 35.7MiB>
2021/07/08 17:42:45 scheduler task eb87e42f (flow 399f20da): unloading val<.=4580de54 35.4MiB>
2021/07/08 17:42:45 scheduler task eb87e42f (flow 399f20da): unloading val<.=a1d209f5 35.4MiB>
2021/07/08 17:42:45 scheduler task eb87e42f (flow 399f20da): unloaded val<.=a1d209f5 35.4MiB>
2021/07/08 17:42:45 scheduler task eb87e42f (flow 399f20da): unloaded list<val<.=f78983ff 35.7MiB> 35.7MiB>
2021/07/08 17:42:45 scheduler task eb87e42f (flow 399f20da): unloaded val<.=4580de54 35.4MiB>
2021/07/08 17:42:45 scheduler task eb87e42f (flow 399f20da): unloading (try 0): successful, next state: complete
2021/07/08 17:42:45  <-  n100.r10.s062.Main.out_file 399f20da ok     exec 4m52s 35.7MiB
2021/07/08 17:42:45 n100.r10.s062.Main.out_file 399f20da n100/r10/n100.r10.s062.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0402b5945e6cd314ac11fe9180db8b36fc0fe69c12657005b2e1f2fb42282ed6
	sha256:399f20da3cb7c4e2c2f68e5f57166c010d1c3abd4c6b624e310d750e264f1c4a
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/eb87e42f77f099ce07b4cbf2c44e85ba9d45e33311c486fabb43584142e5eabf
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s062_output"
	    wget -O "n100.r10.s062_output/n100.r10.s062.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s062_output/n100.r10.s062.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s062_output/n100.r10.s062.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s062_output/n100.r10.s062.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s062_output/n100.r10.s062.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s062_output/n100.r10.s062.reference.fas" "n100.r10.s062_output/n100.r10.s062.fq1.fastq" "n100.r10.s062_output/n100.r10.s062.fq2.fastq" | samtools view -bS - > "n100.r10.s062_output/n100.r10.s062.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s062_output/n100.r10.s062.untrimmed.sorted.bam" "n100.r10.s062_output/n100.r10.s062.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s062_output/n100.r10.s062.untrimmed.sorted.bam" -b "n100.r10.s062_output/n100.r10.s062.primers.bed" -p "n100.r10.s062_output/n100.r10.s062.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s062_output/n100.r10.s062.trimmed.sorted.bam" "n100.r10.s062_output/n100.r10.s062.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s062_output/n100.r10.s062.reference.fas" "n100.r10.s062_output/n100.r10.s062.trimmed.sorted.bam" > "n100.r10.s062_output/n100.r10.s062.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s062_output/n100.r10.s062.reference.fas" --call-indels "n100.r10.s062_output/n100.r10.s062.trimmed.sorted.bam" > "n100.r10.s062_output/n100.r10.s062.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s062_output/n100.r10.s062.trimmed.sorted.bam" > "n100.r10.s062_output/n100.r10.s062.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s062_output/n100.r10.s062.depth.txt" "n100.r10.s062_output/n100.r10.s062.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s062_output/n100.r10.s062.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s062_output/n100.r10.s062.reference.fas" | bcftools consensus -m "n100.r10.s062_output/n100.r10.s062.low_depth.tsv" tmp.vcf.gz > "n100.r10.s062_output/n100.r10.s062.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s062_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f78983ff4f3cc75db066d0d462b9b7c128e3cee7037857d173a26176dbd41c81 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.6MiB max=127.9MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=627B max=2.1KiB
2021/07/08 17:42:45 scheduler task cd322ed4 (flow f23ad1c7): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s062.tar.gz resources {}
2021/07/08 17:42:45  ->  n100.r10.s062.Main.cp_out_file f23ad1c7 exec extern s3://niema-test/n100/r10/n100.r10.s062.tar.gz 35.7MiB
2021/07/08 17:42:46 scheduler task cd322ed4 (flow f23ad1c7): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f78983ff4f3cc75db066d0d462b9b7c128e3cee7037857d173a26176dbd41c81 -> s3://niema-test/n100/r10/n100.r10.s062.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:42:46  <-  n100.r10.s062.Main.cp_out_file f23ad1c7 ok   extern 0s 35.7MiB
2021/07/08 17:42:46 scheduler task daf95962 (flow 7c29b38a): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:46 scheduler task daf95962 (flow 7c29b38a): promoting objects (try 0): started
2021/07/08 17:42:46 scheduler task 99e381d1 (flow 9f4cf67f): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:46 scheduler task 99e381d1 (flow 9f4cf67f): promoting objects (try 0): started
2021/07/08 17:42:46 scheduler task daf95962 (flow 7c29b38a): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:46 scheduler task daf95962 (flow 7c29b38a): retrieving diagnostic output (try 0): started
2021/07/08 17:42:46 scheduler task 99e381d1 (flow 9f4cf67f): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:46 scheduler task 99e381d1 (flow 9f4cf67f): retrieving diagnostic output (try 0): started
2021/07/08 17:42:46 scheduler task 9a1d8533 (flow 60012892): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:46 scheduler task 9a1d8533 (flow 60012892): promoting objects (try 0): started
2021/07/08 17:42:46 scheduler task daf95962 (flow 7c29b38a): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:46 scheduler task daf95962 (flow 7c29b38a): retrieving result (try 0): started
2021/07/08 17:42:47 scheduler task 9a1d8533 (flow 60012892): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:47 scheduler task 99e381d1 (flow 9f4cf67f): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:47 scheduler task 9a1d8533 (flow 60012892): retrieving diagnostic output (try 0): started
2021/07/08 17:42:47 scheduler task 99e381d1 (flow 9f4cf67f): retrieving result (try 0): started
2021/07/08 17:42:47 scheduler task daf95962 (flow 7c29b38a): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:47 scheduler task daf95962 (flow 7c29b38a): transferring output (try 0): started
2021/07/08 17:42:47 scheduler task 9a1d8533 (flow 60012892): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:47 scheduler task 99e381d1 (flow 9f4cf67f): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:47 scheduler task 9a1d8533 (flow 60012892): retrieving result (try 0): started
2021/07/08 17:42:47 scheduler task 99e381d1 (flow 9f4cf67f): transferring output (try 0): started
2021/07/08 17:42:47 scheduler task 42735b19 (flow c3a76ea0): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:47 scheduler task 42735b19 (flow c3a76ea0): promoting objects (try 0): started
2021/07/08 17:42:47 scheduler task 9a1d8533 (flow 60012892): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:47 scheduler task 9a1d8533 (flow 60012892): transferring output (try 0): started
2021/07/08 17:42:47 scheduler task 42735b19 (flow c3a76ea0): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:47 scheduler task 9bbf3998 (flow a707041f): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:47 scheduler task 42735b19 (flow c3a76ea0): retrieving diagnostic output (try 0): started
2021/07/08 17:42:47 scheduler task 9bbf3998 (flow a707041f): promoting objects (try 0): started
2021/07/08 17:42:47 scheduler task c8a4ff5c (flow 9bc6f146): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:47 scheduler task c8a4ff5c (flow 9bc6f146): promoting objects (try 0): started
2021/07/08 17:42:47 scheduler task 42735b19 (flow c3a76ea0): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:47 scheduler task 9bbf3998 (flow a707041f): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:47 scheduler task 42735b19 (flow c3a76ea0): retrieving result (try 0): started
2021/07/08 17:42:47 scheduler task 9bbf3998 (flow a707041f): retrieving diagnostic output (try 0): started
2021/07/08 17:42:47 scheduler task c8a4ff5c (flow 9bc6f146): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:47 scheduler task c8a4ff5c (flow 9bc6f146): retrieving diagnostic output (try 0): started
2021/07/08 17:42:47 scheduler task 42735b19 (flow c3a76ea0): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:47 scheduler task 42735b19 (flow c3a76ea0): transferring output (try 0): started
2021/07/08 17:42:47 scheduler task 9bbf3998 (flow a707041f): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:47 scheduler task 9bbf3998 (flow a707041f): retrieving result (try 0): started
2021/07/08 17:42:47 scheduler task c8a4ff5c (flow 9bc6f146): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:47 scheduler task 9bbf3998 (flow a707041f): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:47 scheduler task c8a4ff5c (flow 9bc6f146): retrieving result (try 0): started
2021/07/08 17:42:47 scheduler task 9bbf3998 (flow a707041f): transferring output (try 0): started
2021/07/08 17:42:47 scheduler task daf95962 (flow 7c29b38a): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:47 scheduler task daf95962 (flow 7c29b38a): unloading (try 0): started
2021/07/08 17:42:47 scheduler task daf95962 (flow 7c29b38a): unloading list<val<.=a0388e62 35.7MiB> 35.7MiB>
2021/07/08 17:42:47 scheduler task daf95962 (flow 7c29b38a): unloading val<.=3d68f01d 35.4MiB>
2021/07/08 17:42:47 scheduler task daf95962 (flow 7c29b38a): unloading val<.=7a4cde0f 35.4MiB>
2021/07/08 17:42:47 scheduler task c8a4ff5c (flow 9bc6f146): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:47 scheduler task c8a4ff5c (flow 9bc6f146): transferring output (try 0): started
2021/07/08 17:42:47 scheduler task daf95962 (flow 7c29b38a): unloaded list<val<.=a0388e62 35.7MiB> 35.7MiB>
2021/07/08 17:42:47 scheduler task daf95962 (flow 7c29b38a): unloaded val<.=7a4cde0f 35.4MiB>
2021/07/08 17:42:47 scheduler task daf95962 (flow 7c29b38a): unloaded val<.=3d68f01d 35.4MiB>
2021/07/08 17:42:47 scheduler task daf95962 (flow 7c29b38a): unloading (try 0): successful, next state: complete
2021/07/08 17:42:47 scheduler task 99e381d1 (flow 9f4cf67f): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:47  <-  n100.r10.s002.Main.out_file 7c29b38a ok     exec 4m53s 35.7MiB
2021/07/08 17:42:47 n100.r10.s002.Main.out_file 7c29b38a n100/r10/n100.r10.s002.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:2c930809f7fcb189a3df0b602a5252c77c366f065f849a634daef2ae7c093797
	sha256:7c29b38a5fe5625796ec8045fb6ad19c58c5b8875b0accf43303cbf3ba87d38f
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/daf95962c522f30962704c4812142c6166d554c27c93274f6594d7d61996887e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s002_output"
	    wget -O "n100.r10.s002_output/n100.r10.s002.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s002_output/n100.r10.s002.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s002_output/n100.r10.s002.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s002_output/n100.r10.s002.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s002_output/n100.r10.s002.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s002_output/n100.r10.s002.reference.fas" "n100.r10.s002_output/n100.r10.s002.fq1.fastq" "n100.r10.s002_output/n100.r10.s002.fq2.fastq" | samtools view -bS - > "n100.r10.s002_output/n100.r10.s002.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s002_output/n100.r10.s002.untrimmed.sorted.bam" "n100.r10.s002_output/n100.r10.s002.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s002_output/n100.r10.s002.untrimmed.sorted.bam" -b "n100.r10.s002_output/n100.r10.s002.primers.bed" -p "n100.r10.s002_output/n100.r10.s002.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s002_output/n100.r10.s002.trimmed.sorted.bam" "n100.r10.s002_output/n100.r10.s002.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s002_output/n100.r10.s002.reference.fas" "n100.r10.s002_output/n100.r10.s002.trimmed.sorted.bam" > "n100.r10.s002_output/n100.r10.s002.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s002_output/n100.r10.s002.reference.fas" --call-indels "n100.r10.s002_output/n100.r10.s002.trimmed.sorted.bam" > "n100.r10.s002_output/n100.r10.s002.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s002_output/n100.r10.s002.trimmed.sorted.bam" > "n100.r10.s002_output/n100.r10.s002.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s002_output/n100.r10.s002.depth.txt" "n100.r10.s002_output/n100.r10.s002.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s002_output/n100.r10.s002.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s002_output/n100.r10.s002.reference.fas" | bcftools consensus -m "n100.r10.s002_output/n100.r10.s002.low_depth.tsv" tmp.vcf.gz > "n100.r10.s002_output/n100.r10.s002.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s002_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a0388e62240b6155b6f337cd654d6fa2b17a61cd364122824bcfa47195f1cf7c 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.1MiB max=126.6MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=625B max=2.0KiB
2021/07/08 17:42:47 scheduler task 6e70ad74 (flow a7321b74): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s002.tar.gz resources {}
2021/07/08 17:42:47  ->  n100.r10.s002.Main.cp_out_file a7321b74 exec extern s3://niema-test/n100/r10/n100.r10.s002.tar.gz 35.7MiB
2021/07/08 17:42:47 scheduler task 99e381d1 (flow 9f4cf67f): unloading (try 0): started
2021/07/08 17:42:47 scheduler task 99e381d1 (flow 9f4cf67f): unloading list<val<.=10c3e431 35.8MiB> 35.8MiB>
2021/07/08 17:42:47 scheduler task 99e381d1 (flow 9f4cf67f): unloading val<.=93897893 35.4MiB>
2021/07/08 17:42:47 scheduler task 99e381d1 (flow 9f4cf67f): unloading val<.=083dcc8f 35.4MiB>
2021/07/08 17:42:47 scheduler task 99e381d1 (flow 9f4cf67f): unloaded val<.=083dcc8f 35.4MiB>
2021/07/08 17:42:47 scheduler task 99e381d1 (flow 9f4cf67f): unloaded val<.=93897893 35.4MiB>
2021/07/08 17:42:47 scheduler task 99e381d1 (flow 9f4cf67f): unloaded list<val<.=10c3e431 35.8MiB> 35.8MiB>
2021/07/08 17:42:47 scheduler task 99e381d1 (flow 9f4cf67f): unloading (try 0): successful, next state: complete
2021/07/08 17:42:47  <-  n100.r10.s060.Main.out_file 9f4cf67f ok     exec 4m54s 35.8MiB
2021/07/08 17:42:47 n100.r10.s060.Main.out_file 9f4cf67f n100/r10/n100.r10.s060.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1af44e15aa55bde45d1d9183cb4f6cc36c2d48242ab526f36612981cd5e28f4a
	sha256:9f4cf67f20b73fe17a9c6f1c067a8059995fd1360fcd054a0912de447cd083b2
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/99e381d184a5778c6c2d3d61346225aa5a27ea84d04b33e5da8d018a918a4aa2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s060_output"
	    wget -O "n100.r10.s060_output/n100.r10.s060.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s060_output/n100.r10.s060.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s060_output/n100.r10.s060.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s060_output/n100.r10.s060.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s060_output/n100.r10.s060.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s060_output/n100.r10.s060.reference.fas" "n100.r10.s060_output/n100.r10.s060.fq1.fastq" "n100.r10.s060_output/n100.r10.s060.fq2.fastq" | samtools view -bS - > "n100.r10.s060_output/n100.r10.s060.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s060_output/n100.r10.s060.untrimmed.sorted.bam" "n100.r10.s060_output/n100.r10.s060.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s060_output/n100.r10.s060.untrimmed.sorted.bam" -b "n100.r10.s060_output/n100.r10.s060.primers.bed" -p "n100.r10.s060_output/n100.r10.s060.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s060_output/n100.r10.s060.trimmed.sorted.bam" "n100.r10.s060_output/n100.r10.s060.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s060_output/n100.r10.s060.reference.fas" "n100.r10.s060_output/n100.r10.s060.trimmed.sorted.bam" > "n100.r10.s060_output/n100.r10.s060.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s060_output/n100.r10.s060.reference.fas" --call-indels "n100.r10.s060_output/n100.r10.s060.trimmed.sorted.bam" > "n100.r10.s060_output/n100.r10.s060.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s060_output/n100.r10.s060.trimmed.sorted.bam" > "n100.r10.s060_output/n100.r10.s060.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s060_output/n100.r10.s060.depth.txt" "n100.r10.s060_output/n100.r10.s060.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s060_output/n100.r10.s060.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s060_output/n100.r10.s060.reference.fas" | bcftools consensus -m "n100.r10.s060_output/n100.r10.s060.low_depth.tsv" tmp.vcf.gz > "n100.r10.s060_output/n100.r10.s060.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s060_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:10c3e431e20c093bd6ba5a143859a1a410acd03bc6f47b3bbb84f0624ee0b6b2 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.0MiB max=128.6MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=624B max=2.0KiB
2021/07/08 17:42:47 scheduler task 2008b12e (flow 5c584d78): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s060.tar.gz resources {}
2021/07/08 17:42:47  ->  n100.r10.s060.Main.cp_out_file 5c584d78 exec extern s3://niema-test/n100/r10/n100.r10.s060.tar.gz 35.8MiB
2021/07/08 17:42:47 scheduler task 9a1d8533 (flow 60012892): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:47 scheduler task 9a1d8533 (flow 60012892): unloading (try 0): started
2021/07/08 17:42:47 scheduler task 9a1d8533 (flow 60012892): unloading list<val<.=f542ef34 35.7MiB> 35.7MiB>
2021/07/08 17:42:47 scheduler task 9a1d8533 (flow 60012892): unloading val<.=3e616b82 35.4MiB>
2021/07/08 17:42:47 scheduler task 9a1d8533 (flow 60012892): unloading val<.=6b53ffa1 35.4MiB>
2021/07/08 17:42:47 scheduler task 9a1d8533 (flow 60012892): unloaded val<.=6b53ffa1 35.4MiB>
2021/07/08 17:42:47 scheduler task 9a1d8533 (flow 60012892): unloaded val<.=3e616b82 35.4MiB>
2021/07/08 17:42:47 scheduler task 9a1d8533 (flow 60012892): unloaded list<val<.=f542ef34 35.7MiB> 35.7MiB>
2021/07/08 17:42:47 scheduler task 9a1d8533 (flow 60012892): unloading (try 0): successful, next state: complete
2021/07/08 17:42:47  <-  n100.r10.s016.Main.out_file 60012892 ok     exec 4m54s 35.7MiB
2021/07/08 17:42:47 n100.r10.s016.Main.out_file 60012892 n100/r10/n100.r10.s016.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4f2f3ba8fc3f4d0b6ccb14f168e783147531f9bfe1e06783769306af1278a969
	sha256:60012892b81be94d9e48ea5c4ff6676b727290afc646bdd868161495e1ad2c73
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9a1d8533eeb7e1918739e759485a099db5dc55786aafd1290f5e2c966ada6c36
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s016_output"
	    wget -O "n100.r10.s016_output/n100.r10.s016.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s016_output/n100.r10.s016.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s016_output/n100.r10.s016.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s016_output/n100.r10.s016.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s016_output/n100.r10.s016.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s016_output/n100.r10.s016.reference.fas" "n100.r10.s016_output/n100.r10.s016.fq1.fastq" "n100.r10.s016_output/n100.r10.s016.fq2.fastq" | samtools view -bS - > "n100.r10.s016_output/n100.r10.s016.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s016_output/n100.r10.s016.untrimmed.sorted.bam" "n100.r10.s016_output/n100.r10.s016.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s016_output/n100.r10.s016.untrimmed.sorted.bam" -b "n100.r10.s016_output/n100.r10.s016.primers.bed" -p "n100.r10.s016_output/n100.r10.s016.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s016_output/n100.r10.s016.trimmed.sorted.bam" "n100.r10.s016_output/n100.r10.s016.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s016_output/n100.r10.s016.reference.fas" "n100.r10.s016_output/n100.r10.s016.trimmed.sorted.bam" > "n100.r10.s016_output/n100.r10.s016.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s016_output/n100.r10.s016.reference.fas" --call-indels "n100.r10.s016_output/n100.r10.s016.trimmed.sorted.bam" > "n100.r10.s016_output/n100.r10.s016.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s016_output/n100.r10.s016.trimmed.sorted.bam" > "n100.r10.s016_output/n100.r10.s016.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s016_output/n100.r10.s016.depth.txt" "n100.r10.s016_output/n100.r10.s016.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s016_output/n100.r10.s016.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s016_output/n100.r10.s016.reference.fas" | bcftools consensus -m "n100.r10.s016_output/n100.r10.s016.low_depth.tsv" tmp.vcf.gz > "n100.r10.s016_output/n100.r10.s016.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s016_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f542ef347f5783db28c558093f567506e083e3f7a3f63de568ba0b1b4f7cc4a2 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.8MiB max=126.1MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 17:42:47 scheduler task 6247af97 (flow f6bfd678): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s016.tar.gz resources {}
2021/07/08 17:42:47  ->  n100.r10.s016.Main.cp_out_file f6bfd678 exec extern s3://niema-test/n100/r10/n100.r10.s016.tar.gz 35.7MiB
2021/07/08 17:42:48 scheduler task 9bbf3998 (flow a707041f): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:48 scheduler task 9bbf3998 (flow a707041f): unloading (try 0): started
2021/07/08 17:42:48 scheduler task 9bbf3998 (flow a707041f): unloading list<val<.=055c7ee6 35.8MiB> 35.8MiB>
2021/07/08 17:42:48 scheduler task 9bbf3998 (flow a707041f): unloading val<.=a3a0cb8c 35.4MiB>
2021/07/08 17:42:48 scheduler task 9bbf3998 (flow a707041f): unloading val<.=089b578f 35.4MiB>
2021/07/08 17:42:48 scheduler task 9bbf3998 (flow a707041f): unloaded val<.=089b578f 35.4MiB>
2021/07/08 17:42:48 scheduler task 9bbf3998 (flow a707041f): unloaded val<.=a3a0cb8c 35.4MiB>
2021/07/08 17:42:48 scheduler task 9bbf3998 (flow a707041f): unloaded list<val<.=055c7ee6 35.8MiB> 35.8MiB>
2021/07/08 17:42:48 scheduler task 9bbf3998 (flow a707041f): unloading (try 0): successful, next state: complete
2021/07/08 17:42:48  <-  n100.r10.s022.Main.out_file a707041f ok     exec 4m55s 35.8MiB
2021/07/08 17:42:48 n100.r10.s022.Main.out_file a707041f n100/r10/n100.r10.s022.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1a6674fe50b228138dec0c7efdba9b8c3372e19e0cdb5cff177add49dcf79db7
	sha256:a707041ffa61c2ea081eb293f9f84982140bf44f5d989180cfa47fc88911de91
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9bbf3998656587d7a9a2a39381bb1dc18bb273e2777aeaeb3bc39e4bb4d1a17f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s022_output"
	    wget -O "n100.r10.s022_output/n100.r10.s022.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s022_output/n100.r10.s022.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s022_output/n100.r10.s022.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s022_output/n100.r10.s022.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s022_output/n100.r10.s022.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s022_output/n100.r10.s022.reference.fas" "n100.r10.s022_output/n100.r10.s022.fq1.fastq" "n100.r10.s022_output/n100.r10.s022.fq2.fastq" | samtools view -bS - > "n100.r10.s022_output/n100.r10.s022.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s022_output/n100.r10.s022.untrimmed.sorted.bam" "n100.r10.s022_output/n100.r10.s022.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s022_output/n100.r10.s022.untrimmed.sorted.bam" -b "n100.r10.s022_output/n100.r10.s022.primers.bed" -p "n100.r10.s022_output/n100.r10.s022.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s022_output/n100.r10.s022.trimmed.sorted.bam" "n100.r10.s022_output/n100.r10.s022.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s022_output/n100.r10.s022.reference.fas" "n100.r10.s022_output/n100.r10.s022.trimmed.sorted.bam" > "n100.r10.s022_output/n100.r10.s022.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s022_output/n100.r10.s022.reference.fas" --call-indels "n100.r10.s022_output/n100.r10.s022.trimmed.sorted.bam" > "n100.r10.s022_output/n100.r10.s022.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s022_output/n100.r10.s022.trimmed.sorted.bam" > "n100.r10.s022_output/n100.r10.s022.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s022_output/n100.r10.s022.depth.txt" "n100.r10.s022_output/n100.r10.s022.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s022_output/n100.r10.s022.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s022_output/n100.r10.s022.reference.fas" | bcftools consensus -m "n100.r10.s022_output/n100.r10.s022.low_depth.tsv" tmp.vcf.gz > "n100.r10.s022_output/n100.r10.s022.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s022_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:055c7ee63d9c42221ef1ed9ff5d91e25391cc9d6a9d92a4113fbddbaa47805d7 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.1MiB max=129.6MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=631B max=2.1KiB
2021/07/08 17:42:48 scheduler task 972ba0a8 (flow 31b2e214): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s022.tar.gz resources {}
2021/07/08 17:42:48  ->  n100.r10.s022.Main.cp_out_file 31b2e214 exec extern s3://niema-test/n100/r10/n100.r10.s022.tar.gz 35.8MiB
2021/07/08 17:42:48 scheduler task c8a4ff5c (flow 9bc6f146): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:48 scheduler task c8a4ff5c (flow 9bc6f146): unloading (try 0): started
2021/07/08 17:42:48 scheduler task c8a4ff5c (flow 9bc6f146): unloading list<val<.=f143720d 35.7MiB> 35.7MiB>
2021/07/08 17:42:48 scheduler task c8a4ff5c (flow 9bc6f146): unloading val<.=7279dbf8 35.4MiB>
2021/07/08 17:42:48 scheduler task c8a4ff5c (flow 9bc6f146): unloading val<.=5b2a3e53 35.4MiB>
2021/07/08 17:42:48 scheduler task c8a4ff5c (flow 9bc6f146): unloaded list<val<.=f143720d 35.7MiB> 35.7MiB>
2021/07/08 17:42:48 scheduler task c8a4ff5c (flow 9bc6f146): unloaded val<.=7279dbf8 35.4MiB>
2021/07/08 17:42:48 scheduler task c8a4ff5c (flow 9bc6f146): unloaded val<.=5b2a3e53 35.4MiB>
2021/07/08 17:42:48 scheduler task c8a4ff5c (flow 9bc6f146): unloading (try 0): successful, next state: complete
2021/07/08 17:42:48  <-  n100.r10.s008.Main.out_file 9bc6f146 ok     exec 4m54s 35.7MiB
2021/07/08 17:42:48 n100.r10.s008.Main.out_file 9bc6f146 n100/r10/n100.r10.s008.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:72ed3abfceda342438ace4dd5f894729593ca3a835176339aa7c09db941704a5
	sha256:9bc6f1466a47a1d67fe113f91b5882108aed16f49a1079cda492e0cbb41134bd
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c8a4ff5c96eeea4dc93199528f686dedfafd1d45be59ebc1443c36121ca078e4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s008_output"
	    wget -O "n100.r10.s008_output/n100.r10.s008.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s008_output/n100.r10.s008.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s008_output/n100.r10.s008.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s008_output/n100.r10.s008.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s008_output/n100.r10.s008.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s008_output/n100.r10.s008.reference.fas" "n100.r10.s008_output/n100.r10.s008.fq1.fastq" "n100.r10.s008_output/n100.r10.s008.fq2.fastq" | samtools view -bS - > "n100.r10.s008_output/n100.r10.s008.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s008_output/n100.r10.s008.untrimmed.sorted.bam" "n100.r10.s008_output/n100.r10.s008.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s008_output/n100.r10.s008.untrimmed.sorted.bam" -b "n100.r10.s008_output/n100.r10.s008.primers.bed" -p "n100.r10.s008_output/n100.r10.s008.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s008_output/n100.r10.s008.trimmed.sorted.bam" "n100.r10.s008_output/n100.r10.s008.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s008_output/n100.r10.s008.reference.fas" "n100.r10.s008_output/n100.r10.s008.trimmed.sorted.bam" > "n100.r10.s008_output/n100.r10.s008.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s008_output/n100.r10.s008.reference.fas" --call-indels "n100.r10.s008_output/n100.r10.s008.trimmed.sorted.bam" > "n100.r10.s008_output/n100.r10.s008.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s008_output/n100.r10.s008.trimmed.sorted.bam" > "n100.r10.s008_output/n100.r10.s008.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s008_output/n100.r10.s008.depth.txt" "n100.r10.s008_output/n100.r10.s008.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s008_output/n100.r10.s008.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s008_output/n100.r10.s008.reference.fas" | bcftools consensus -m "n100.r10.s008_output/n100.r10.s008.low_depth.tsv" tmp.vcf.gz > "n100.r10.s008_output/n100.r10.s008.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s008_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f143720dbe0078dd8df79282c5788a0b912f76532102e9f73964d41e82913434 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.4MiB max=127.3MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 17:42:48 scheduler task 27dcab19 (flow 8e349b83): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s008.tar.gz resources {}
2021/07/08 17:42:48  ->  n100.r10.s008.Main.cp_out_file 8e349b83 exec extern s3://niema-test/n100/r10/n100.r10.s008.tar.gz 35.7MiB
2021/07/08 17:42:48 scheduler task 42735b19 (flow c3a76ea0): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:48 scheduler task 42735b19 (flow c3a76ea0): unloading (try 0): started
2021/07/08 17:42:48 scheduler task 42735b19 (flow c3a76ea0): unloading list<val<.=835a7c88 35.7MiB> 35.7MiB>
2021/07/08 17:42:48 scheduler task 42735b19 (flow c3a76ea0): unloading val<.=a1c1c32f 35.4MiB>
2021/07/08 17:42:48 scheduler task 42735b19 (flow c3a76ea0): unloading val<.=fdfe5a8f 35.4MiB>
2021/07/08 17:42:48 scheduler task 42735b19 (flow c3a76ea0): unloaded list<val<.=835a7c88 35.7MiB> 35.7MiB>
2021/07/08 17:42:48 scheduler task 42735b19 (flow c3a76ea0): unloaded val<.=fdfe5a8f 35.4MiB>
2021/07/08 17:42:48 scheduler task 42735b19 (flow c3a76ea0): unloaded val<.=a1c1c32f 35.4MiB>
2021/07/08 17:42:48 scheduler task 42735b19 (flow c3a76ea0): unloading (try 0): successful, next state: complete
2021/07/08 17:42:48  <-  n100.r10.s048.Main.out_file c3a76ea0 ok     exec 4m54s 35.7MiB
2021/07/08 17:42:48 n100.r10.s048.Main.out_file c3a76ea0 n100/r10/n100.r10.s048.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b810d622c736c606a58aca6151f464c04b863d38785c51a23fcd5c225005cc1a
	sha256:c3a76ea02ad7769b8e8ae2cf3faab3a2cdf0f6b0c0b29e60d1aebac15d87b715
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/42735b194307902828fdebdf3ab18d9efd32fa481f3ecf77988191fba766e8c8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s048_output"
	    wget -O "n100.r10.s048_output/n100.r10.s048.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s048_output/n100.r10.s048.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s048_output/n100.r10.s048.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s048_output/n100.r10.s048.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s048_output/n100.r10.s048.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s048_output/n100.r10.s048.reference.fas" "n100.r10.s048_output/n100.r10.s048.fq1.fastq" "n100.r10.s048_output/n100.r10.s048.fq2.fastq" | samtools view -bS - > "n100.r10.s048_output/n100.r10.s048.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s048_output/n100.r10.s048.untrimmed.sorted.bam" "n100.r10.s048_output/n100.r10.s048.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s048_output/n100.r10.s048.untrimmed.sorted.bam" -b "n100.r10.s048_output/n100.r10.s048.primers.bed" -p "n100.r10.s048_output/n100.r10.s048.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s048_output/n100.r10.s048.trimmed.sorted.bam" "n100.r10.s048_output/n100.r10.s048.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s048_output/n100.r10.s048.reference.fas" "n100.r10.s048_output/n100.r10.s048.trimmed.sorted.bam" > "n100.r10.s048_output/n100.r10.s048.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s048_output/n100.r10.s048.reference.fas" --call-indels "n100.r10.s048_output/n100.r10.s048.trimmed.sorted.bam" > "n100.r10.s048_output/n100.r10.s048.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s048_output/n100.r10.s048.trimmed.sorted.bam" > "n100.r10.s048_output/n100.r10.s048.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s048_output/n100.r10.s048.depth.txt" "n100.r10.s048_output/n100.r10.s048.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s048_output/n100.r10.s048.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s048_output/n100.r10.s048.reference.fas" | bcftools consensus -m "n100.r10.s048_output/n100.r10.s048.low_depth.tsv" tmp.vcf.gz > "n100.r10.s048_output/n100.r10.s048.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s048_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:835a7c886f5b0fe06a5b60f52b8c5f78218ad50b05996acc855ca232b756b895 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.2MiB max=128.1MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 17:42:48 scheduler task a937ceb7 (flow 4826987e): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s048.tar.gz resources {}
2021/07/08 17:42:48  ->  n100.r10.s048.Main.cp_out_file 4826987e exec extern s3://niema-test/n100/r10/n100.r10.s048.tar.gz 35.7MiB
2021/07/08 17:42:48 scheduler task 11521559 (flow aee712fe): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:48 scheduler task 11521559 (flow aee712fe): promoting objects (try 0): started
2021/07/08 17:42:48 scheduler task 2008b12e (flow 5c584d78): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:10c3e431e20c093bd6ba5a143859a1a410acd03bc6f47b3bbb84f0624ee0b6b2 -> s3://niema-test/n100/r10/n100.r10.s060.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:42:48  <-  n100.r10.s060.Main.cp_out_file 5c584d78 ok   extern 0s 35.8MiB
2021/07/08 17:42:48 scheduler task 11521559 (flow aee712fe): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:48 scheduler task 11521559 (flow aee712fe): retrieving diagnostic output (try 0): started
2021/07/08 17:42:48 scheduler task 6e70ad74 (flow a7321b74): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a0388e62240b6155b6f337cd654d6fa2b17a61cd364122824bcfa47195f1cf7c -> s3://niema-test/n100/r10/n100.r10.s002.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:42:48  <-  n100.r10.s002.Main.cp_out_file a7321b74 ok   extern 0s 35.7MiB
2021/07/08 17:42:48 scheduler task 11521559 (flow aee712fe): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:48 scheduler task 11521559 (flow aee712fe): retrieving result (try 0): started
2021/07/08 17:42:48 scheduler task 11521559 (flow aee712fe): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:48 scheduler task 11521559 (flow aee712fe): transferring output (try 0): started
2021/07/08 17:42:48 scheduler task 6247af97 (flow f6bfd678): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f542ef347f5783db28c558093f567506e083e3f7a3f63de568ba0b1b4f7cc4a2 -> s3://niema-test/n100/r10/n100.r10.s016.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:42:48  <-  n100.r10.s016.Main.cp_out_file f6bfd678 ok   extern 0s 35.7MiB
2021/07/08 17:42:48 scheduler task 972ba0a8 (flow 31b2e214): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:055c7ee63d9c42221ef1ed9ff5d91e25391cc9d6a9d92a4113fbddbaa47805d7 -> s3://niema-test/n100/r10/n100.r10.s022.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:42:48  <-  n100.r10.s022.Main.cp_out_file 31b2e214 ok   extern 0s 35.8MiB
2021/07/08 17:42:49 scheduler task 27dcab19 (flow 8e349b83): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f143720dbe0078dd8df79282c5788a0b912f76532102e9f73964d41e82913434 -> s3://niema-test/n100/r10/n100.r10.s008.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:42:49  <-  n100.r10.s008.Main.cp_out_file 8e349b83 ok   extern 0s 35.7MiB
2021/07/08 17:42:49 scheduler task c0a2340c (flow 0d3cc969): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:49 scheduler task c0a2340c (flow 0d3cc969): promoting objects (try 0): started
2021/07/08 17:42:49 scheduler task a937ceb7 (flow 4826987e): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:835a7c886f5b0fe06a5b60f52b8c5f78218ad50b05996acc855ca232b756b895 -> s3://niema-test/n100/r10/n100.r10.s048.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:42:49  <-  n100.r10.s048.Main.cp_out_file 4826987e ok   extern 0s 35.7MiB
2021/07/08 17:42:49 scheduler task c0a2340c (flow 0d3cc969): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:49 scheduler task c0a2340c (flow 0d3cc969): retrieving diagnostic output (try 0): started
2021/07/08 17:42:49 scheduler task c0a2340c (flow 0d3cc969): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:49 scheduler task c0a2340c (flow 0d3cc969): retrieving result (try 0): started
2021/07/08 17:42:49 scheduler task 32946189 (flow 2b9c6b67): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:49 scheduler task 32946189 (flow 2b9c6b67): promoting objects (try 0): started
2021/07/08 17:42:49 scheduler task c0a2340c (flow 0d3cc969): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:49 scheduler task c0a2340c (flow 0d3cc969): transferring output (try 0): started
2021/07/08 17:42:49 scheduler task 32946189 (flow 2b9c6b67): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:49 scheduler task 11521559 (flow aee712fe): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:49 scheduler task 32946189 (flow 2b9c6b67): retrieving diagnostic output (try 0): started
2021/07/08 17:42:49 scheduler task 11521559 (flow aee712fe): unloading (try 0): started
2021/07/08 17:42:49 scheduler task 11521559 (flow aee712fe): unloading list<val<.=37244c9c 35.8MiB> 35.8MiB>
2021/07/08 17:42:49 scheduler task 11521559 (flow aee712fe): unloading val<.=f1d08633 35.4MiB>
2021/07/08 17:42:49 scheduler task 11521559 (flow aee712fe): unloading val<.=720252a9 35.4MiB>
2021/07/08 17:42:49 scheduler task 32946189 (flow 2b9c6b67): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:49 scheduler task 32946189 (flow 2b9c6b67): retrieving result (try 0): started
2021/07/08 17:42:49 scheduler task 11521559 (flow aee712fe): unloaded list<val<.=37244c9c 35.8MiB> 35.8MiB>
2021/07/08 17:42:49 scheduler task 11521559 (flow aee712fe): unloaded val<.=720252a9 35.4MiB>
2021/07/08 17:42:49 scheduler task 11521559 (flow aee712fe): unloaded val<.=f1d08633 35.4MiB>
2021/07/08 17:42:49 scheduler task 11521559 (flow aee712fe): unloading (try 0): successful, next state: complete
2021/07/08 17:42:49  <-  n100.r10.s009.Main.out_file aee712fe ok     exec 4m55s 35.8MiB
2021/07/08 17:42:49 n100.r10.s009.Main.out_file aee712fe n100/r10/n100.r10.s009.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:42f6522a1f75d8b69a335ddb3a67440d0d7cafa97b9af9f75166c77d4e8c4995
	sha256:aee712fe978d426084cca0bbb128efee951a34b3c165fe113de99c7911e358a2
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/11521559e899ed75c88d3ece6865973b05fb0ed4ff63f66ab379554f6616eb0b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s009_output"
	    wget -O "n100.r10.s009_output/n100.r10.s009.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s009_output/n100.r10.s009.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s009_output/n100.r10.s009.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s009_output/n100.r10.s009.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s009_output/n100.r10.s009.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s009_output/n100.r10.s009.reference.fas" "n100.r10.s009_output/n100.r10.s009.fq1.fastq" "n100.r10.s009_output/n100.r10.s009.fq2.fastq" | samtools view -bS - > "n100.r10.s009_output/n100.r10.s009.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s009_output/n100.r10.s009.untrimmed.sorted.bam" "n100.r10.s009_output/n100.r10.s009.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s009_output/n100.r10.s009.untrimmed.sorted.bam" -b "n100.r10.s009_output/n100.r10.s009.primers.bed" -p "n100.r10.s009_output/n100.r10.s009.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s009_output/n100.r10.s009.trimmed.sorted.bam" "n100.r10.s009_output/n100.r10.s009.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s009_output/n100.r10.s009.reference.fas" "n100.r10.s009_output/n100.r10.s009.trimmed.sorted.bam" > "n100.r10.s009_output/n100.r10.s009.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s009_output/n100.r10.s009.reference.fas" --call-indels "n100.r10.s009_output/n100.r10.s009.trimmed.sorted.bam" > "n100.r10.s009_output/n100.r10.s009.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s009_output/n100.r10.s009.trimmed.sorted.bam" > "n100.r10.s009_output/n100.r10.s009.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s009_output/n100.r10.s009.depth.txt" "n100.r10.s009_output/n100.r10.s009.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s009_output/n100.r10.s009.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s009_output/n100.r10.s009.reference.fas" | bcftools consensus -m "n100.r10.s009_output/n100.r10.s009.low_depth.tsv" tmp.vcf.gz > "n100.r10.s009_output/n100.r10.s009.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s009_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:37244c9c8ba1acc49229e31a2a40885202c1998d79a6cc37fb1ae3d9bb6fe369 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.0MiB max=127.3MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=624B max=2.0KiB
2021/07/08 17:42:49 scheduler task e2fa6604 (flow f76e5154): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s009.tar.gz resources {}
2021/07/08 17:42:49  ->  n100.r10.s009.Main.cp_out_file f76e5154 exec extern s3://niema-test/n100/r10/n100.r10.s009.tar.gz 35.8MiB
2021/07/08 17:42:49 scheduler task 32946189 (flow 2b9c6b67): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:49 scheduler task 32946189 (flow 2b9c6b67): transferring output (try 0): started
2021/07/08 17:42:49 scheduler task c0a2340c (flow 0d3cc969): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:49 scheduler task c0a2340c (flow 0d3cc969): unloading (try 0): started
2021/07/08 17:42:49 scheduler task c0a2340c (flow 0d3cc969): unloading list<val<.=66d7afb9 35.8MiB> 35.8MiB>
2021/07/08 17:42:49 scheduler task c0a2340c (flow 0d3cc969): unloading val<.=7237d65e 35.4MiB>
2021/07/08 17:42:49 scheduler task c0a2340c (flow 0d3cc969): unloading val<.=2b27ca39 35.4MiB>
2021/07/08 17:42:50 scheduler task c0a2340c (flow 0d3cc969): unloaded val<.=2b27ca39 35.4MiB>
2021/07/08 17:42:50 scheduler task c0a2340c (flow 0d3cc969): unloaded val<.=7237d65e 35.4MiB>
2021/07/08 17:42:50 scheduler task c0a2340c (flow 0d3cc969): unloaded list<val<.=66d7afb9 35.8MiB> 35.8MiB>
2021/07/08 17:42:50 scheduler task c0a2340c (flow 0d3cc969): unloading (try 0): successful, next state: complete
2021/07/08 17:42:50  <-  n100.r10.s026.Main.out_file 0d3cc969 ok     exec 4m56s 35.8MiB
2021/07/08 17:42:50 n100.r10.s026.Main.out_file 0d3cc969 n100/r10/n100.r10.s026.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e59e243608a1c5f9d6120993421fa4ce17d847ae7b5e15f4520dc97b475a787d
	sha256:0d3cc9694b983a3cb946680bdb19ef4a512f0a5140c76a208dca1382f19e2973
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c0a2340c2cbb717563c36247b70cfb541d8287679101f04e47875090204e8ff0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s026_output"
	    wget -O "n100.r10.s026_output/n100.r10.s026.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s026_output/n100.r10.s026.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s026_output/n100.r10.s026.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s026_output/n100.r10.s026.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s026_output/n100.r10.s026.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s026_output/n100.r10.s026.reference.fas" "n100.r10.s026_output/n100.r10.s026.fq1.fastq" "n100.r10.s026_output/n100.r10.s026.fq2.fastq" | samtools view -bS - > "n100.r10.s026_output/n100.r10.s026.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s026_output/n100.r10.s026.untrimmed.sorted.bam" "n100.r10.s026_output/n100.r10.s026.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s026_output/n100.r10.s026.untrimmed.sorted.bam" -b "n100.r10.s026_output/n100.r10.s026.primers.bed" -p "n100.r10.s026_output/n100.r10.s026.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s026_output/n100.r10.s026.trimmed.sorted.bam" "n100.r10.s026_output/n100.r10.s026.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s026_output/n100.r10.s026.reference.fas" "n100.r10.s026_output/n100.r10.s026.trimmed.sorted.bam" > "n100.r10.s026_output/n100.r10.s026.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s026_output/n100.r10.s026.reference.fas" --call-indels "n100.r10.s026_output/n100.r10.s026.trimmed.sorted.bam" > "n100.r10.s026_output/n100.r10.s026.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s026_output/n100.r10.s026.trimmed.sorted.bam" > "n100.r10.s026_output/n100.r10.s026.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s026_output/n100.r10.s026.depth.txt" "n100.r10.s026_output/n100.r10.s026.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s026_output/n100.r10.s026.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s026_output/n100.r10.s026.reference.fas" | bcftools consensus -m "n100.r10.s026_output/n100.r10.s026.low_depth.tsv" tmp.vcf.gz > "n100.r10.s026_output/n100.r10.s026.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s026_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:66d7afb9b80da8cc47ce9cc5ef356f4bb1a32edb0df3224996259241b82b967d 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.7MiB max=126.9MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=627B max=2.0KiB
2021/07/08 17:42:50 scheduler task 80f684f8 (flow d4df2c06): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s026.tar.gz resources {}
2021/07/08 17:42:50  ->  n100.r10.s026.Main.cp_out_file d4df2c06 exec extern s3://niema-test/n100/r10/n100.r10.s026.tar.gz 35.8MiB
2021/07/08 17:42:50 scheduler task e2fa6604 (flow f76e5154): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:37244c9c8ba1acc49229e31a2a40885202c1998d79a6cc37fb1ae3d9bb6fe369 -> s3://niema-test/n100/r10/n100.r10.s009.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:42:50  <-  n100.r10.s009.Main.cp_out_file f76e5154 ok   extern 0s 35.8MiB
2021/07/08 17:42:50 scheduler task 32946189 (flow 2b9c6b67): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:50 scheduler task 32946189 (flow 2b9c6b67): unloading (try 0): started
2021/07/08 17:42:50 scheduler task 32946189 (flow 2b9c6b67): unloading list<val<.=2d8d390a 35.7MiB> 35.7MiB>
2021/07/08 17:42:50 scheduler task 32946189 (flow 2b9c6b67): unloading val<.=3859861c 35.4MiB>
2021/07/08 17:42:50 scheduler task 32946189 (flow 2b9c6b67): unloading val<.=68313c14 35.4MiB>
2021/07/08 17:42:50 scheduler task 32946189 (flow 2b9c6b67): unloaded val<.=68313c14 35.4MiB>
2021/07/08 17:42:50 scheduler task 32946189 (flow 2b9c6b67): unloaded list<val<.=2d8d390a 35.7MiB> 35.7MiB>
2021/07/08 17:42:50 scheduler task 32946189 (flow 2b9c6b67): unloaded val<.=3859861c 35.4MiB>
2021/07/08 17:42:50 scheduler task 32946189 (flow 2b9c6b67): unloading (try 0): successful, next state: complete
2021/07/08 17:42:50  <-  n100.r10.s091.Main.out_file 2b9c6b67 ok     exec 4m57s 35.7MiB
2021/07/08 17:42:50 n100.r10.s091.Main.out_file 2b9c6b67 n100/r10/n100.r10.s091.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:692ea2ffb12363ee99cc4ed24ad772299ef5c4842f6bf57a5cb63bbbe6951c78
	sha256:2b9c6b67e356bf6eef28ded2027410bb1dbcd3346295d2b41fd798306e04754a
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/329461898043c208ab707f44a0da5f549248a0df2e78ae97f8bf30c139490ad2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s091_output"
	    wget -O "n100.r10.s091_output/n100.r10.s091.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s091_output/n100.r10.s091.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s091_output/n100.r10.s091.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s091_output/n100.r10.s091.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s091_output/n100.r10.s091.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s091_output/n100.r10.s091.reference.fas" "n100.r10.s091_output/n100.r10.s091.fq1.fastq" "n100.r10.s091_output/n100.r10.s091.fq2.fastq" | samtools view -bS - > "n100.r10.s091_output/n100.r10.s091.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s091_output/n100.r10.s091.untrimmed.sorted.bam" "n100.r10.s091_output/n100.r10.s091.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s091_output/n100.r10.s091.untrimmed.sorted.bam" -b "n100.r10.s091_output/n100.r10.s091.primers.bed" -p "n100.r10.s091_output/n100.r10.s091.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s091_output/n100.r10.s091.trimmed.sorted.bam" "n100.r10.s091_output/n100.r10.s091.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s091_output/n100.r10.s091.reference.fas" "n100.r10.s091_output/n100.r10.s091.trimmed.sorted.bam" > "n100.r10.s091_output/n100.r10.s091.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s091_output/n100.r10.s091.reference.fas" --call-indels "n100.r10.s091_output/n100.r10.s091.trimmed.sorted.bam" > "n100.r10.s091_output/n100.r10.s091.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s091_output/n100.r10.s091.trimmed.sorted.bam" > "n100.r10.s091_output/n100.r10.s091.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s091_output/n100.r10.s091.depth.txt" "n100.r10.s091_output/n100.r10.s091.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s091_output/n100.r10.s091.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s091_output/n100.r10.s091.reference.fas" | bcftools consensus -m "n100.r10.s091_output/n100.r10.s091.low_depth.tsv" tmp.vcf.gz > "n100.r10.s091_output/n100.r10.s091.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s091_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:2d8d390a93499b851d7c2efac527f5f31af7cd688ce22bb9fcacde9e169595cc 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.9MiB max=127.7MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 17:42:50 scheduler task 1359bb52 (flow b86de611): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s091.tar.gz resources {}
2021/07/08 17:42:50  ->  n100.r10.s091.Main.cp_out_file b86de611 exec extern s3://niema-test/n100/r10/n100.r10.s091.tar.gz 35.7MiB
2021/07/08 17:42:50 scheduler task 10b2ee98 (flow 7eb303f0): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:50 scheduler task 10b2ee98 (flow 7eb303f0): promoting objects (try 0): started
2021/07/08 17:42:50 scheduler task 80f684f8 (flow d4df2c06): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:66d7afb9b80da8cc47ce9cc5ef356f4bb1a32edb0df3224996259241b82b967d -> s3://niema-test/n100/r10/n100.r10.s026.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:42:50  <-  n100.r10.s026.Main.cp_out_file d4df2c06 ok   extern 0s 35.8MiB
2021/07/08 17:42:50 scheduler task 10b2ee98 (flow 7eb303f0): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:50 scheduler task 10b2ee98 (flow 7eb303f0): retrieving diagnostic output (try 0): started
2021/07/08 17:42:50 scheduler task 10b2ee98 (flow 7eb303f0): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:50 scheduler task 10b2ee98 (flow 7eb303f0): retrieving result (try 0): started
2021/07/08 17:42:50 scheduler task 10b2ee98 (flow 7eb303f0): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:50 scheduler task 10b2ee98 (flow 7eb303f0): transferring output (try 0): started
2021/07/08 17:42:51 scheduler task 62273247 (flow 40aecf6e): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:51 scheduler task 62273247 (flow 40aecf6e): promoting objects (try 0): started
2021/07/08 17:42:51 scheduler task 1359bb52 (flow b86de611): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:2d8d390a93499b851d7c2efac527f5f31af7cd688ce22bb9fcacde9e169595cc -> s3://niema-test/n100/r10/n100.r10.s091.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:42:51  <-  n100.r10.s091.Main.cp_out_file b86de611 ok   extern 0s 35.7MiB
2021/07/08 17:42:51 scheduler task 62273247 (flow 40aecf6e): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:51 scheduler task 62273247 (flow 40aecf6e): retrieving diagnostic output (try 0): started
2021/07/08 17:42:51 scheduler task 62273247 (flow 40aecf6e): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:51 scheduler task 62273247 (flow 40aecf6e): retrieving result (try 0): started
2021/07/08 17:42:51 scheduler task 62273247 (flow 40aecf6e): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:51 scheduler task 62273247 (flow 40aecf6e): transferring output (try 0): started
2021/07/08 17:42:51 scheduler task 10b2ee98 (flow 7eb303f0): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:51 scheduler task 10b2ee98 (flow 7eb303f0): unloading (try 0): started
2021/07/08 17:42:51 scheduler task 10b2ee98 (flow 7eb303f0): unloading list<val<.=a7180a40 35.8MiB> 35.8MiB>
2021/07/08 17:42:51 scheduler task 10b2ee98 (flow 7eb303f0): unloading val<.=d66ffb9f 35.4MiB>
2021/07/08 17:42:51 scheduler task 10b2ee98 (flow 7eb303f0): unloading val<.=2ddb341a 35.4MiB>
2021/07/08 17:42:51 scheduler task 10b2ee98 (flow 7eb303f0): unloaded val<.=d66ffb9f 35.4MiB>
2021/07/08 17:42:51 scheduler task 10b2ee98 (flow 7eb303f0): unloaded val<.=2ddb341a 35.4MiB>
2021/07/08 17:42:51 scheduler task 10b2ee98 (flow 7eb303f0): unloaded list<val<.=a7180a40 35.8MiB> 35.8MiB>
2021/07/08 17:42:51 scheduler task 10b2ee98 (flow 7eb303f0): unloading (try 0): successful, next state: complete
2021/07/08 17:42:51  <-  n100.r10.s061.Main.out_file 7eb303f0 ok     exec 4m52s 35.8MiB
2021/07/08 17:42:51 n100.r10.s061.Main.out_file 7eb303f0 n100/r10/n100.r10.s061.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f084ad53b10e6f658171ddf846f0dd172d8480fafd4e716fd7a67031a09b76bc
	sha256:7eb303f08b4c906c8786a3dfb246fba45baef7550934fd11cd7a911f976986c5
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/10b2ee98227e7ecbed52cdff8c28e1bd8bc4f4c1e0052901d20684838b36f36a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s061_output"
	    wget -O "n100.r10.s061_output/n100.r10.s061.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s061_output/n100.r10.s061.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s061_output/n100.r10.s061.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s061_output/n100.r10.s061.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s061_output/n100.r10.s061.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s061_output/n100.r10.s061.reference.fas" "n100.r10.s061_output/n100.r10.s061.fq1.fastq" "n100.r10.s061_output/n100.r10.s061.fq2.fastq" | samtools view -bS - > "n100.r10.s061_output/n100.r10.s061.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s061_output/n100.r10.s061.untrimmed.sorted.bam" "n100.r10.s061_output/n100.r10.s061.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s061_output/n100.r10.s061.untrimmed.sorted.bam" -b "n100.r10.s061_output/n100.r10.s061.primers.bed" -p "n100.r10.s061_output/n100.r10.s061.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s061_output/n100.r10.s061.trimmed.sorted.bam" "n100.r10.s061_output/n100.r10.s061.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s061_output/n100.r10.s061.reference.fas" "n100.r10.s061_output/n100.r10.s061.trimmed.sorted.bam" > "n100.r10.s061_output/n100.r10.s061.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s061_output/n100.r10.s061.reference.fas" --call-indels "n100.r10.s061_output/n100.r10.s061.trimmed.sorted.bam" > "n100.r10.s061_output/n100.r10.s061.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s061_output/n100.r10.s061.trimmed.sorted.bam" > "n100.r10.s061_output/n100.r10.s061.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s061_output/n100.r10.s061.depth.txt" "n100.r10.s061_output/n100.r10.s061.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s061_output/n100.r10.s061.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s061_output/n100.r10.s061.reference.fas" | bcftools consensus -m "n100.r10.s061_output/n100.r10.s061.low_depth.tsv" tmp.vcf.gz > "n100.r10.s061_output/n100.r10.s061.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s061_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a7180a40c26717be25babbb98c049b36b7240c5b81b929ad2ff46efadb71dec3 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.4MiB max=129.0MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 17:42:51 scheduler task 34a1e5ff (flow a49492a7): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s061.tar.gz resources {}
2021/07/08 17:42:51  ->  n100.r10.s061.Main.cp_out_file a49492a7 exec extern s3://niema-test/n100/r10/n100.r10.s061.tar.gz 35.8MiB
2021/07/08 17:42:51 scheduler task 62273247 (flow 40aecf6e): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:51 scheduler task 62273247 (flow 40aecf6e): unloading (try 0): started
2021/07/08 17:42:51 scheduler task 62273247 (flow 40aecf6e): unloading list<val<.=c6578bbf 35.7MiB> 35.7MiB>
2021/07/08 17:42:51 scheduler task 62273247 (flow 40aecf6e): unloading val<.=da169ef4 35.4MiB>
2021/07/08 17:42:51 scheduler task 62273247 (flow 40aecf6e): unloading val<.=64e7d9d3 35.4MiB>
2021/07/08 17:42:51 scheduler task f070a1d7 (flow 943fd4e3): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:51 scheduler task f070a1d7 (flow 943fd4e3): promoting objects (try 0): started
2021/07/08 17:42:52 scheduler task 62273247 (flow 40aecf6e): unloaded list<val<.=c6578bbf 35.7MiB> 35.7MiB>
2021/07/08 17:42:52 scheduler task 62273247 (flow 40aecf6e): unloaded val<.=64e7d9d3 35.4MiB>
2021/07/08 17:42:52 scheduler task 62273247 (flow 40aecf6e): unloaded val<.=da169ef4 35.4MiB>
2021/07/08 17:42:52 scheduler task 62273247 (flow 40aecf6e): unloading (try 0): successful, next state: complete
2021/07/08 17:42:52  <-  n100.r10.s058.Main.out_file 40aecf6e ok     exec 4m52s 35.7MiB
2021/07/08 17:42:52 n100.r10.s058.Main.out_file 40aecf6e n100/r10/n100.r10.s058.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f7ac412614695b0b9de53bf766040486ee6d81eebb4b36fe88de03385028ed39
	sha256:40aecf6e7cee2793dbceff2395339f249132615e4747f409ae9a8b7ba1d94449
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/62273247403c82dbd04abfb1842539318cd5471629d29bcd65c869c96241ed2d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s058_output"
	    wget -O "n100.r10.s058_output/n100.r10.s058.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s058_output/n100.r10.s058.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s058_output/n100.r10.s058.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s058_output/n100.r10.s058.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s058_output/n100.r10.s058.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s058_output/n100.r10.s058.reference.fas" "n100.r10.s058_output/n100.r10.s058.fq1.fastq" "n100.r10.s058_output/n100.r10.s058.fq2.fastq" | samtools view -bS - > "n100.r10.s058_output/n100.r10.s058.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s058_output/n100.r10.s058.untrimmed.sorted.bam" "n100.r10.s058_output/n100.r10.s058.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s058_output/n100.r10.s058.untrimmed.sorted.bam" -b "n100.r10.s058_output/n100.r10.s058.primers.bed" -p "n100.r10.s058_output/n100.r10.s058.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s058_output/n100.r10.s058.trimmed.sorted.bam" "n100.r10.s058_output/n100.r10.s058.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s058_output/n100.r10.s058.reference.fas" "n100.r10.s058_output/n100.r10.s058.trimmed.sorted.bam" > "n100.r10.s058_output/n100.r10.s058.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s058_output/n100.r10.s058.reference.fas" --call-indels "n100.r10.s058_output/n100.r10.s058.trimmed.sorted.bam" > "n100.r10.s058_output/n100.r10.s058.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s058_output/n100.r10.s058.trimmed.sorted.bam" > "n100.r10.s058_output/n100.r10.s058.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s058_output/n100.r10.s058.depth.txt" "n100.r10.s058_output/n100.r10.s058.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s058_output/n100.r10.s058.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s058_output/n100.r10.s058.reference.fas" | bcftools consensus -m "n100.r10.s058_output/n100.r10.s058.low_depth.tsv" tmp.vcf.gz > "n100.r10.s058_output/n100.r10.s058.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s058_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:c6578bbf64fae1dcc0772e095af8cd8259a14eb3c192f62314039c6a0d80c346 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.3MiB max=128.5MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=624B max=2.0KiB
2021/07/08 17:42:52 scheduler task 5f7ce1e6 (flow df67dbbb): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s058.tar.gz resources {}
2021/07/08 17:42:52  ->  n100.r10.s058.Main.cp_out_file df67dbbb exec extern s3://niema-test/n100/r10/n100.r10.s058.tar.gz 35.7MiB
2021/07/08 17:42:52 scheduler task f070a1d7 (flow 943fd4e3): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:52 scheduler task f070a1d7 (flow 943fd4e3): retrieving diagnostic output (try 0): started
2021/07/08 17:42:52 scheduler task f070a1d7 (flow 943fd4e3): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:52 scheduler task f070a1d7 (flow 943fd4e3): retrieving result (try 0): started
2021/07/08 17:42:52 scheduler task f070a1d7 (flow 943fd4e3): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:52 scheduler task f070a1d7 (flow 943fd4e3): transferring output (try 0): started
2021/07/08 17:42:52 scheduler task 34a1e5ff (flow a49492a7): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a7180a40c26717be25babbb98c049b36b7240c5b81b929ad2ff46efadb71dec3 -> s3://niema-test/n100/r10/n100.r10.s061.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:42:52  <-  n100.r10.s061.Main.cp_out_file a49492a7 ok   extern 0s 35.8MiB
2021/07/08 17:42:52 scheduler task 5d04b067 (flow 522f4e66): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:52 scheduler task 5d04b067 (flow 522f4e66): promoting objects (try 0): started
2021/07/08 17:42:52 scheduler task 5d04b067 (flow 522f4e66): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:52 scheduler task 5d04b067 (flow 522f4e66): retrieving diagnostic output (try 0): started
2021/07/08 17:42:52 scheduler task 5d04b067 (flow 522f4e66): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:52 scheduler task 5d04b067 (flow 522f4e66): retrieving result (try 0): started
2021/07/08 17:42:52 scheduler task 5d04b067 (flow 522f4e66): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:52 scheduler task 5f7ce1e6 (flow df67dbbb): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:c6578bbf64fae1dcc0772e095af8cd8259a14eb3c192f62314039c6a0d80c346 -> s3://niema-test/n100/r10/n100.r10.s058.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:42:52  <-  n100.r10.s058.Main.cp_out_file df67dbbb ok   extern 0s 35.7MiB
2021/07/08 17:42:52 scheduler task 5d04b067 (flow 522f4e66): transferring output (try 0): started
2021/07/08 17:42:52 scheduler task f070a1d7 (flow 943fd4e3): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:52 scheduler task f070a1d7 (flow 943fd4e3): unloading (try 0): started
2021/07/08 17:42:52 scheduler task f070a1d7 (flow 943fd4e3): unloading list<val<.=e1b7efd6 35.8MiB> 35.8MiB>
2021/07/08 17:42:52 scheduler task f070a1d7 (flow 943fd4e3): unloading val<.=54706610 35.4MiB>
2021/07/08 17:42:52 scheduler task f070a1d7 (flow 943fd4e3): unloading val<.=8931639b 35.4MiB>
2021/07/08 17:42:52 scheduler task 9d2f7e82 (flow a018bf83): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:52 scheduler task 9d2f7e82 (flow a018bf83): promoting objects (try 0): started
2021/07/08 17:42:52 scheduler task f070a1d7 (flow 943fd4e3): unloaded val<.=54706610 35.4MiB>
2021/07/08 17:42:52 scheduler task f070a1d7 (flow 943fd4e3): unloaded val<.=8931639b 35.4MiB>
2021/07/08 17:42:52 scheduler task f070a1d7 (flow 943fd4e3): unloaded list<val<.=e1b7efd6 35.8MiB> 35.8MiB>
2021/07/08 17:42:52 scheduler task f070a1d7 (flow 943fd4e3): unloading (try 0): successful, next state: complete
2021/07/08 17:42:52  <-  n100.r10.s079.Main.out_file 943fd4e3 ok     exec 4m53s 35.8MiB
2021/07/08 17:42:52 n100.r10.s079.Main.out_file 943fd4e3 n100/r10/n100.r10.s079.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a64c886b8c314f91614acf18345add5ca60c2d30ddb315e495fe0bde1643f8c8
	sha256:943fd4e3cb4edbb0f005188e84cefee5435c86610c540ec7aefbfc6881bd6c61
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f070a1d7a15b53d1ef66dc45baa7bed7ba1187628b9ab6e1fccc226c96599bf3
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s079_output"
	    wget -O "n100.r10.s079_output/n100.r10.s079.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s079_output/n100.r10.s079.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s079_output/n100.r10.s079.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s079_output/n100.r10.s079.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s079_output/n100.r10.s079.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s079_output/n100.r10.s079.reference.fas" "n100.r10.s079_output/n100.r10.s079.fq1.fastq" "n100.r10.s079_output/n100.r10.s079.fq2.fastq" | samtools view -bS - > "n100.r10.s079_output/n100.r10.s079.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s079_output/n100.r10.s079.untrimmed.sorted.bam" "n100.r10.s079_output/n100.r10.s079.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s079_output/n100.r10.s079.untrimmed.sorted.bam" -b "n100.r10.s079_output/n100.r10.s079.primers.bed" -p "n100.r10.s079_output/n100.r10.s079.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s079_output/n100.r10.s079.trimmed.sorted.bam" "n100.r10.s079_output/n100.r10.s079.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s079_output/n100.r10.s079.reference.fas" "n100.r10.s079_output/n100.r10.s079.trimmed.sorted.bam" > "n100.r10.s079_output/n100.r10.s079.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s079_output/n100.r10.s079.reference.fas" --call-indels "n100.r10.s079_output/n100.r10.s079.trimmed.sorted.bam" > "n100.r10.s079_output/n100.r10.s079.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s079_output/n100.r10.s079.trimmed.sorted.bam" > "n100.r10.s079_output/n100.r10.s079.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s079_output/n100.r10.s079.depth.txt" "n100.r10.s079_output/n100.r10.s079.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s079_output/n100.r10.s079.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s079_output/n100.r10.s079.reference.fas" | bcftools consensus -m "n100.r10.s079_output/n100.r10.s079.low_depth.tsv" tmp.vcf.gz > "n100.r10.s079_output/n100.r10.s079.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s079_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:e1b7efd6537e780d45c032f9859fc8114d039b6e0ce7be2addde074b6c95a00d 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.7MiB max=129.0MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 17:42:52 scheduler task a668b6d5 (flow 13125579): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s079.tar.gz resources {}
2021/07/08 17:42:52  ->  n100.r10.s079.Main.cp_out_file 13125579 exec extern s3://niema-test/n100/r10/n100.r10.s079.tar.gz 35.8MiB
2021/07/08 17:42:52 scheduler task 9d2f7e82 (flow a018bf83): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:52 scheduler task 9d2f7e82 (flow a018bf83): retrieving diagnostic output (try 0): started
2021/07/08 17:42:52 scheduler task 9d2f7e82 (flow a018bf83): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:52 scheduler task 9d2f7e82 (flow a018bf83): retrieving result (try 0): started
2021/07/08 17:42:53 scheduler task 9d2f7e82 (flow a018bf83): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:53 scheduler task 9d2f7e82 (flow a018bf83): transferring output (try 0): started
2021/07/08 17:42:53 scheduler task 3ee5fbc0 (flow c6d532f3): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:53 scheduler task 3ee5fbc0 (flow c6d532f3): promoting objects (try 0): started
2021/07/08 17:42:53 scheduler task 3ee5fbc0 (flow c6d532f3): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:53 scheduler task 3ee5fbc0 (flow c6d532f3): retrieving diagnostic output (try 0): started
2021/07/08 17:42:53 scheduler task 5d04b067 (flow 522f4e66): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:53 scheduler task 5d04b067 (flow 522f4e66): unloading (try 0): started
2021/07/08 17:42:53 scheduler task 5d04b067 (flow 522f4e66): unloading list<val<.=13d5c0a5 35.8MiB> 35.8MiB>
2021/07/08 17:42:53 scheduler task 5d04b067 (flow 522f4e66): unloading val<.=ec2739d6 35.4MiB>
2021/07/08 17:42:53 scheduler task 5d04b067 (flow 522f4e66): unloading val<.=bd8cdf86 35.4MiB>
2021/07/08 17:42:53 scheduler task 3ee5fbc0 (flow c6d532f3): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:53 scheduler task 3ee5fbc0 (flow c6d532f3): retrieving result (try 0): started
2021/07/08 17:42:53 scheduler task 5d04b067 (flow 522f4e66): unloaded val<.=bd8cdf86 35.4MiB>
2021/07/08 17:42:53 scheduler task 5d04b067 (flow 522f4e66): unloaded list<val<.=13d5c0a5 35.8MiB> 35.8MiB>
2021/07/08 17:42:53 scheduler task 5d04b067 (flow 522f4e66): unloaded val<.=ec2739d6 35.4MiB>
2021/07/08 17:42:53 scheduler task 5d04b067 (flow 522f4e66): unloading (try 0): successful, next state: complete
2021/07/08 17:42:53  <-  n100.r10.s036.Main.out_file 522f4e66 ok     exec 5m0s 35.8MiB
2021/07/08 17:42:53 n100.r10.s036.Main.out_file 522f4e66 n100/r10/n100.r10.s036.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ae5525bebf79a803b2529e42f16c1ab18fe5b894f589ac432b83982b8ce78f5a
	sha256:522f4e66195fd1c9b950ad8cefe7aa5a942e7611656045a7d103ddc79c633ebe
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5d04b0674b1f38b14277ca096580cb5691d563effbeb6f4c8ebebbb1b4444790
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s036_output"
	    wget -O "n100.r10.s036_output/n100.r10.s036.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s036_output/n100.r10.s036.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s036_output/n100.r10.s036.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s036_output/n100.r10.s036.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s036_output/n100.r10.s036.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s036_output/n100.r10.s036.reference.fas" "n100.r10.s036_output/n100.r10.s036.fq1.fastq" "n100.r10.s036_output/n100.r10.s036.fq2.fastq" | samtools view -bS - > "n100.r10.s036_output/n100.r10.s036.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s036_output/n100.r10.s036.untrimmed.sorted.bam" "n100.r10.s036_output/n100.r10.s036.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s036_output/n100.r10.s036.untrimmed.sorted.bam" -b "n100.r10.s036_output/n100.r10.s036.primers.bed" -p "n100.r10.s036_output/n100.r10.s036.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s036_output/n100.r10.s036.trimmed.sorted.bam" "n100.r10.s036_output/n100.r10.s036.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s036_output/n100.r10.s036.reference.fas" "n100.r10.s036_output/n100.r10.s036.trimmed.sorted.bam" > "n100.r10.s036_output/n100.r10.s036.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s036_output/n100.r10.s036.reference.fas" --call-indels "n100.r10.s036_output/n100.r10.s036.trimmed.sorted.bam" > "n100.r10.s036_output/n100.r10.s036.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s036_output/n100.r10.s036.trimmed.sorted.bam" > "n100.r10.s036_output/n100.r10.s036.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s036_output/n100.r10.s036.depth.txt" "n100.r10.s036_output/n100.r10.s036.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s036_output/n100.r10.s036.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s036_output/n100.r10.s036.reference.fas" | bcftools consensus -m "n100.r10.s036_output/n100.r10.s036.low_depth.tsv" tmp.vcf.gz > "n100.r10.s036_output/n100.r10.s036.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s036_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:13d5c0a527602ffc75106d0eaaac1c128bf5f2f4c2810c73e49cefffaed3af44 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.2MiB max=128.9MiB
	    disk mean=11.9MiB max=35.8MiB
	    tmp mean=522B max=2.1KiB
2021/07/08 17:42:53 scheduler task b00ee62a (flow 1d2e44ea): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s036.tar.gz resources {}
2021/07/08 17:42:53  ->  n100.r10.s036.Main.cp_out_file 1d2e44ea exec extern s3://niema-test/n100/r10/n100.r10.s036.tar.gz 35.8MiB
2021/07/08 17:42:53 scheduler task 3ee5fbc0 (flow c6d532f3): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:53 scheduler task 3ee5fbc0 (flow c6d532f3): transferring output (try 0): started
2021/07/08 17:42:53 scheduler task 10b9639e (flow c2c3e971): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:53 scheduler task 10b9639e (flow c2c3e971): promoting objects (try 0): started
2021/07/08 17:42:53 scheduler task d78f5d37 (flow 88a0cdd2): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:53 scheduler task d78f5d37 (flow 88a0cdd2): promoting objects (try 0): started
2021/07/08 17:42:53 scheduler task a668b6d5 (flow 13125579): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:e1b7efd6537e780d45c032f9859fc8114d039b6e0ce7be2addde074b6c95a00d -> s3://niema-test/n100/r10/n100.r10.s079.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:42:53  <-  n100.r10.s079.Main.cp_out_file 13125579 ok   extern 0s 35.8MiB
2021/07/08 17:42:53 scheduler task 10b9639e (flow c2c3e971): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:53 scheduler task 10b9639e (flow c2c3e971): retrieving diagnostic output (try 0): started
2021/07/08 17:42:53 scheduler task d78f5d37 (flow 88a0cdd2): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:53 scheduler task d78f5d37 (flow 88a0cdd2): retrieving diagnostic output (try 0): started
2021/07/08 17:42:53 scheduler task 9d2f7e82 (flow a018bf83): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:53 scheduler task 9d2f7e82 (flow a018bf83): unloading (try 0): started
2021/07/08 17:42:53 scheduler task 9d2f7e82 (flow a018bf83): unloading list<val<.=33c92a41 35.8MiB> 35.8MiB>
2021/07/08 17:42:53 scheduler task 9d2f7e82 (flow a018bf83): unloading val<.=d7d4a4e0 35.4MiB>
2021/07/08 17:42:53 scheduler task 9d2f7e82 (flow a018bf83): unloading val<.=e5bb04ee 35.4MiB>
2021/07/08 17:42:53 scheduler task 10b9639e (flow c2c3e971): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:53 scheduler task 10b9639e (flow c2c3e971): retrieving result (try 0): started
2021/07/08 17:42:53 scheduler task 9d2f7e82 (flow a018bf83): unloaded val<.=d7d4a4e0 35.4MiB>
2021/07/08 17:42:53 scheduler task 9d2f7e82 (flow a018bf83): unloaded val<.=e5bb04ee 35.4MiB>
2021/07/08 17:42:53 scheduler task 9d2f7e82 (flow a018bf83): unloaded list<val<.=33c92a41 35.8MiB> 35.8MiB>
2021/07/08 17:42:53 scheduler task 9d2f7e82 (flow a018bf83): unloading (try 0): successful, next state: complete
2021/07/08 17:42:53 scheduler task 10b9639e (flow c2c3e971): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:53 scheduler task d78f5d37 (flow 88a0cdd2): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:53  <-  n100.r10.s021.Main.out_file a018bf83 ok     exec 4m54s 35.8MiB
2021/07/08 17:42:53 n100.r10.s021.Main.out_file a018bf83 n100/r10/n100.r10.s021.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:97dc78cab714407714ca498f25a6e9d1c20cfb823ad28da32f8b030e24a92ff7
	sha256:a018bf83a675acdc2db544a4defb439cb49b0f00753770af5a2430eeb49cf27f
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9d2f7e82b0dee71c5a181b419862049f397ba0ca4174e84c84f618bd64df626a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s021_output"
	    wget -O "n100.r10.s021_output/n100.r10.s021.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s021_output/n100.r10.s021.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s021_output/n100.r10.s021.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s021_output/n100.r10.s021.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s021_output/n100.r10.s021.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s021_output/n100.r10.s021.reference.fas" "n100.r10.s021_output/n100.r10.s021.fq1.fastq" "n100.r10.s021_output/n100.r10.s021.fq2.fastq" | samtools view -bS - > "n100.r10.s021_output/n100.r10.s021.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s021_output/n100.r10.s021.untrimmed.sorted.bam" "n100.r10.s021_output/n100.r10.s021.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s021_output/n100.r10.s021.untrimmed.sorted.bam" -b "n100.r10.s021_output/n100.r10.s021.primers.bed" -p "n100.r10.s021_output/n100.r10.s021.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s021_output/n100.r10.s021.trimmed.sorted.bam" "n100.r10.s021_output/n100.r10.s021.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s021_output/n100.r10.s021.reference.fas" "n100.r10.s021_output/n100.r10.s021.trimmed.sorted.bam" > "n100.r10.s021_output/n100.r10.s021.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s021_output/n100.r10.s021.reference.fas" --call-indels "n100.r10.s021_output/n100.r10.s021.trimmed.sorted.bam" > "n100.r10.s021_output/n100.r10.s021.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s021_output/n100.r10.s021.trimmed.sorted.bam" > "n100.r10.s021_output/n100.r10.s021.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s021_output/n100.r10.s021.depth.txt" "n100.r10.s021_output/n100.r10.s021.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s021_output/n100.r10.s021.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s021_output/n100.r10.s021.reference.fas" | bcftools consensus -m "n100.r10.s021_output/n100.r10.s021.low_depth.tsv" tmp.vcf.gz > "n100.r10.s021_output/n100.r10.s021.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s021_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:33c92a411ac9e93fa4d327d8cf42a285bf76c7b308954b9b40f105130c54737e 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.9MiB max=128.7MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=627B max=2.0KiB
2021/07/08 17:42:53 scheduler task 98358f83 (flow 26f04732): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s021.tar.gz resources {}
2021/07/08 17:42:53  ->  n100.r10.s021.Main.cp_out_file 26f04732 exec extern s3://niema-test/n100/r10/n100.r10.s021.tar.gz 35.8MiB
2021/07/08 17:42:53 scheduler task 10b9639e (flow c2c3e971): transferring output (try 0): started
2021/07/08 17:42:53 scheduler task d78f5d37 (flow 88a0cdd2): retrieving result (try 0): started
2021/07/08 17:42:53 scheduler task d78f5d37 (flow 88a0cdd2): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:53 scheduler task d78f5d37 (flow 88a0cdd2): transferring output (try 0): started
2021/07/08 17:42:53 scheduler task 3ee5fbc0 (flow c6d532f3): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:53 scheduler task 3ee5fbc0 (flow c6d532f3): unloading (try 0): started
2021/07/08 17:42:53 scheduler task 3ee5fbc0 (flow c6d532f3): unloading list<val<.=01995877 35.7MiB> 35.7MiB>
2021/07/08 17:42:53 scheduler task 3ee5fbc0 (flow c6d532f3): unloading val<.=567d4273 35.4MiB>
2021/07/08 17:42:53 scheduler task 3ee5fbc0 (flow c6d532f3): unloading val<.=2499b602 35.4MiB>
2021/07/08 17:42:53 scheduler task 77092a02 (flow c50dce1c): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:53 scheduler task 77092a02 (flow c50dce1c): promoting objects (try 0): started
2021/07/08 17:42:53 scheduler task 3ee5fbc0 (flow c6d532f3): unloaded list<val<.=01995877 35.7MiB> 35.7MiB>
2021/07/08 17:42:53 scheduler task 3ee5fbc0 (flow c6d532f3): unloaded val<.=2499b602 35.4MiB>
2021/07/08 17:42:53 scheduler task 3ee5fbc0 (flow c6d532f3): unloaded val<.=567d4273 35.4MiB>
2021/07/08 17:42:53 scheduler task 3ee5fbc0 (flow c6d532f3): unloading (try 0): successful, next state: complete
2021/07/08 17:42:53  <-  n100.r10.s032.Main.out_file c6d532f3 ok     exec 4m48s 35.7MiB
2021/07/08 17:42:53 n100.r10.s032.Main.out_file c6d532f3 n100/r10/n100.r10.s032.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:52e9f5c52d7f9153dc1c696ad2654e935efaa5b7ec4beb93b0ce40dfd738553c
	sha256:c6d532f3536cfae5a1c8583d49d9ef40c16f137d20f95ffb33f5ebe42831a757
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3ee5fbc0a9faa918436d00494aa99d617f592f3f7f164ed8135ef968735d2c7c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s032_output"
	    wget -O "n100.r10.s032_output/n100.r10.s032.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s032_output/n100.r10.s032.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s032_output/n100.r10.s032.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s032_output/n100.r10.s032.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s032_output/n100.r10.s032.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s032_output/n100.r10.s032.reference.fas" "n100.r10.s032_output/n100.r10.s032.fq1.fastq" "n100.r10.s032_output/n100.r10.s032.fq2.fastq" | samtools view -bS - > "n100.r10.s032_output/n100.r10.s032.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s032_output/n100.r10.s032.untrimmed.sorted.bam" "n100.r10.s032_output/n100.r10.s032.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s032_output/n100.r10.s032.untrimmed.sorted.bam" -b "n100.r10.s032_output/n100.r10.s032.primers.bed" -p "n100.r10.s032_output/n100.r10.s032.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s032_output/n100.r10.s032.trimmed.sorted.bam" "n100.r10.s032_output/n100.r10.s032.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s032_output/n100.r10.s032.reference.fas" "n100.r10.s032_output/n100.r10.s032.trimmed.sorted.bam" > "n100.r10.s032_output/n100.r10.s032.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s032_output/n100.r10.s032.reference.fas" --call-indels "n100.r10.s032_output/n100.r10.s032.trimmed.sorted.bam" > "n100.r10.s032_output/n100.r10.s032.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s032_output/n100.r10.s032.trimmed.sorted.bam" > "n100.r10.s032_output/n100.r10.s032.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s032_output/n100.r10.s032.depth.txt" "n100.r10.s032_output/n100.r10.s032.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s032_output/n100.r10.s032.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s032_output/n100.r10.s032.reference.fas" | bcftools consensus -m "n100.r10.s032_output/n100.r10.s032.low_depth.tsv" tmp.vcf.gz > "n100.r10.s032_output/n100.r10.s032.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s032_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:01995877565e8eb49220aeb236f4a2160b248a2ffba1962435e8d99bcb9a55bd 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.7MiB max=128.7MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=627B max=2.1KiB
2021/07/08 17:42:53 scheduler task f1464f68 (flow a8ee99e5): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s032.tar.gz resources {}
2021/07/08 17:42:53  ->  n100.r10.s032.Main.cp_out_file a8ee99e5 exec extern s3://niema-test/n100/r10/n100.r10.s032.tar.gz 35.7MiB
2021/07/08 17:42:54 scheduler task 77092a02 (flow c50dce1c): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:54 scheduler task 77092a02 (flow c50dce1c): retrieving diagnostic output (try 0): started
2021/07/08 17:42:54 scheduler task b00ee62a (flow 1d2e44ea): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:13d5c0a527602ffc75106d0eaaac1c128bf5f2f4c2810c73e49cefffaed3af44 -> s3://niema-test/n100/r10/n100.r10.s036.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:42:54  <-  n100.r10.s036.Main.cp_out_file 1d2e44ea ok   extern 0s 35.8MiB
2021/07/08 17:42:54 scheduler task 77092a02 (flow c50dce1c): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:54 scheduler task 77092a02 (flow c50dce1c): retrieving result (try 0): started
2021/07/08 17:42:54 scheduler task 77092a02 (flow c50dce1c): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:54 scheduler task 77092a02 (flow c50dce1c): transferring output (try 0): started
2021/07/08 17:42:54 scheduler task d78f5d37 (flow 88a0cdd2): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:54 scheduler task d78f5d37 (flow 88a0cdd2): unloading (try 0): started
2021/07/08 17:42:54 scheduler task d78f5d37 (flow 88a0cdd2): unloading list<val<.=4ffcce00 35.7MiB> 35.7MiB>
2021/07/08 17:42:54 scheduler task d78f5d37 (flow 88a0cdd2): unloading val<.=41cfd06b 35.4MiB>
2021/07/08 17:42:54 scheduler task d78f5d37 (flow 88a0cdd2): unloading val<.=1074a1b2 35.4MiB>
2021/07/08 17:42:54 scheduler task 10b9639e (flow c2c3e971): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:54 scheduler task 98358f83 (flow 26f04732): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:33c92a411ac9e93fa4d327d8cf42a285bf76c7b308954b9b40f105130c54737e -> s3://niema-test/n100/r10/n100.r10.s021.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:42:54  <-  n100.r10.s021.Main.cp_out_file 26f04732 ok   extern 0s 35.8MiB
2021/07/08 17:42:54 scheduler task 10b9639e (flow c2c3e971): unloading (try 0): started
2021/07/08 17:42:54 scheduler task 10b9639e (flow c2c3e971): unloading list<val<.=5259e4c3 35.8MiB> 35.8MiB>
2021/07/08 17:42:54 scheduler task 10b9639e (flow c2c3e971): unloading val<.=50acdb82 35.4MiB>
2021/07/08 17:42:54 scheduler task 10b9639e (flow c2c3e971): unloading val<.=00160137 35.4MiB>
2021/07/08 17:42:54 scheduler task 8d0f47ee (flow 5e0db977): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:54 scheduler task 8d0f47ee (flow 5e0db977): promoting objects (try 0): started
2021/07/08 17:42:54 scheduler task d78f5d37 (flow 88a0cdd2): unloaded val<.=41cfd06b 35.4MiB>
2021/07/08 17:42:54 scheduler task d78f5d37 (flow 88a0cdd2): unloaded val<.=1074a1b2 35.4MiB>
2021/07/08 17:42:54 scheduler task d78f5d37 (flow 88a0cdd2): unloaded list<val<.=4ffcce00 35.7MiB> 35.7MiB>
2021/07/08 17:42:54 scheduler task d78f5d37 (flow 88a0cdd2): unloading (try 0): successful, next state: complete
2021/07/08 17:42:54  <-  n100.r10.s096.Main.out_file 88a0cdd2 ok     exec 4m55s 35.7MiB
2021/07/08 17:42:54 n100.r10.s096.Main.out_file 88a0cdd2 n100/r10/n100.r10.s096.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:dcd1fa3cf6ad4463fcb2cfff6deee527a86622cd3202047582f86667f735f0b0
	sha256:88a0cdd2e61e19e5ea2f72ae56b8bdf1b39cb294e60a8f06a846dd28cd8ad5ab
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d78f5d37c6b75edc28c6268096df6cbc3faed62074b79c3b25385de4c5156cd0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s096_output"
	    wget -O "n100.r10.s096_output/n100.r10.s096.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s096_output/n100.r10.s096.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s096_output/n100.r10.s096.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s096_output/n100.r10.s096.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s096_output/n100.r10.s096.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s096_output/n100.r10.s096.reference.fas" "n100.r10.s096_output/n100.r10.s096.fq1.fastq" "n100.r10.s096_output/n100.r10.s096.fq2.fastq" | samtools view -bS - > "n100.r10.s096_output/n100.r10.s096.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s096_output/n100.r10.s096.untrimmed.sorted.bam" "n100.r10.s096_output/n100.r10.s096.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s096_output/n100.r10.s096.untrimmed.sorted.bam" -b "n100.r10.s096_output/n100.r10.s096.primers.bed" -p "n100.r10.s096_output/n100.r10.s096.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s096_output/n100.r10.s096.trimmed.sorted.bam" "n100.r10.s096_output/n100.r10.s096.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s096_output/n100.r10.s096.reference.fas" "n100.r10.s096_output/n100.r10.s096.trimmed.sorted.bam" > "n100.r10.s096_output/n100.r10.s096.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s096_output/n100.r10.s096.reference.fas" --call-indels "n100.r10.s096_output/n100.r10.s096.trimmed.sorted.bam" > "n100.r10.s096_output/n100.r10.s096.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s096_output/n100.r10.s096.trimmed.sorted.bam" > "n100.r10.s096_output/n100.r10.s096.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s096_output/n100.r10.s096.depth.txt" "n100.r10.s096_output/n100.r10.s096.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s096_output/n100.r10.s096.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s096_output/n100.r10.s096.reference.fas" | bcftools consensus -m "n100.r10.s096_output/n100.r10.s096.low_depth.tsv" tmp.vcf.gz > "n100.r10.s096_output/n100.r10.s096.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s096_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:4ffcce00bef898a9ae4dba177a4897d60da257afe191667e31b6c4ad99a462f1 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.8MiB max=128.3MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=625B max=2.0KiB
2021/07/08 17:42:54 scheduler task 9ed55eec (flow eceeb852): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s096.tar.gz resources {}
2021/07/08 17:42:54  ->  n100.r10.s096.Main.cp_out_file eceeb852 exec extern s3://niema-test/n100/r10/n100.r10.s096.tar.gz 35.7MiB
2021/07/08 17:42:54 scheduler task 10b9639e (flow c2c3e971): unloaded list<val<.=5259e4c3 35.8MiB> 35.8MiB>
2021/07/08 17:42:54 scheduler task 10b9639e (flow c2c3e971): unloaded val<.=50acdb82 35.4MiB>
2021/07/08 17:42:54 scheduler task 10b9639e (flow c2c3e971): unloaded val<.=00160137 35.4MiB>
2021/07/08 17:42:54 scheduler task 10b9639e (flow c2c3e971): unloading (try 0): successful, next state: complete
2021/07/08 17:42:54  <-  n100.r10.s040.Main.out_file c2c3e971 ok     exec 4m55s 35.8MiB
2021/07/08 17:42:54 n100.r10.s040.Main.out_file c2c3e971 n100/r10/n100.r10.s040.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9442d3ba6d8923133cc0fd3f9f392c4269731a76190b3fd7fa3cb6eda1e62b0d
	sha256:c2c3e971f1bb7bd97d4ad8a95d003f6d9cf32226548e5962df3ec5582d1cd28b
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/10b9639e7f2345236c5f4714f6f51f3b0dae1ecbcda137e4a528792176f9ba40
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s040_output"
	    wget -O "n100.r10.s040_output/n100.r10.s040.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s040_output/n100.r10.s040.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s040_output/n100.r10.s040.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s040_output/n100.r10.s040.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s040_output/n100.r10.s040.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s040_output/n100.r10.s040.reference.fas" "n100.r10.s040_output/n100.r10.s040.fq1.fastq" "n100.r10.s040_output/n100.r10.s040.fq2.fastq" | samtools view -bS - > "n100.r10.s040_output/n100.r10.s040.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s040_output/n100.r10.s040.untrimmed.sorted.bam" "n100.r10.s040_output/n100.r10.s040.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s040_output/n100.r10.s040.untrimmed.sorted.bam" -b "n100.r10.s040_output/n100.r10.s040.primers.bed" -p "n100.r10.s040_output/n100.r10.s040.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s040_output/n100.r10.s040.trimmed.sorted.bam" "n100.r10.s040_output/n100.r10.s040.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s040_output/n100.r10.s040.reference.fas" "n100.r10.s040_output/n100.r10.s040.trimmed.sorted.bam" > "n100.r10.s040_output/n100.r10.s040.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s040_output/n100.r10.s040.reference.fas" --call-indels "n100.r10.s040_output/n100.r10.s040.trimmed.sorted.bam" > "n100.r10.s040_output/n100.r10.s040.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s040_output/n100.r10.s040.trimmed.sorted.bam" > "n100.r10.s040_output/n100.r10.s040.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s040_output/n100.r10.s040.depth.txt" "n100.r10.s040_output/n100.r10.s040.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s040_output/n100.r10.s040.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s040_output/n100.r10.s040.reference.fas" | bcftools consensus -m "n100.r10.s040_output/n100.r10.s040.low_depth.tsv" tmp.vcf.gz > "n100.r10.s040_output/n100.r10.s040.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s040_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:5259e4c390b632d77995862db02eed13d313ec728937641339252071dd9eb5de 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.6MiB max=127.1MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=627B max=2.1KiB
2021/07/08 17:42:54 scheduler task 1b928d2d (flow 36230716): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s040.tar.gz resources {}
2021/07/08 17:42:54  ->  n100.r10.s040.Main.cp_out_file 36230716 exec extern s3://niema-test/n100/r10/n100.r10.s040.tar.gz 35.8MiB
2021/07/08 17:42:54 scheduler task 8d0f47ee (flow 5e0db977): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:54 scheduler task 8d0f47ee (flow 5e0db977): retrieving diagnostic output (try 0): started
2021/07/08 17:42:54 scheduler task 8d0f47ee (flow 5e0db977): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:54 scheduler task 8d0f47ee (flow 5e0db977): retrieving result (try 0): started
2021/07/08 17:42:54 scheduler task 8d0f47ee (flow 5e0db977): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:54 scheduler task 8d0f47ee (flow 5e0db977): transferring output (try 0): started
2021/07/08 17:42:54 scheduler task f1464f68 (flow a8ee99e5): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:01995877565e8eb49220aeb236f4a2160b248a2ffba1962435e8d99bcb9a55bd -> s3://niema-test/n100/r10/n100.r10.s032.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:42:54  <-  n100.r10.s032.Main.cp_out_file a8ee99e5 ok   extern 0s 35.7MiB
2021/07/08 17:42:54 scheduler task 77092a02 (flow c50dce1c): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:54 scheduler task 77092a02 (flow c50dce1c): unloading (try 0): started
2021/07/08 17:42:54 scheduler task 77092a02 (flow c50dce1c): unloading list<val<.=87437ec1 35.7MiB> 35.7MiB>
2021/07/08 17:42:54 scheduler task 77092a02 (flow c50dce1c): unloading val<.=20e10e5e 35.4MiB>
2021/07/08 17:42:54 scheduler task 77092a02 (flow c50dce1c): unloading val<.=de86a377 35.4MiB>
2021/07/08 17:42:54 scheduler task 77092a02 (flow c50dce1c): unloaded val<.=de86a377 35.4MiB>
2021/07/08 17:42:54 scheduler task 77092a02 (flow c50dce1c): unloaded list<val<.=87437ec1 35.7MiB> 35.7MiB>
2021/07/08 17:42:54 scheduler task 77092a02 (flow c50dce1c): unloaded val<.=20e10e5e 35.4MiB>
2021/07/08 17:42:54 scheduler task 77092a02 (flow c50dce1c): unloading (try 0): successful, next state: complete
2021/07/08 17:42:54  <-  n100.r10.s033.Main.out_file c50dce1c ok     exec 4m55s 35.7MiB
2021/07/08 17:42:54 n100.r10.s033.Main.out_file c50dce1c n100/r10/n100.r10.s033.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:604c5e1aaa61c9b8461260b32d782e8f1ddbf1f522bfc99a342319c9bcba112a
	sha256:c50dce1c38b7dcf5ce0e7b0c3e199d1589865a3c4fe4549bf741c5bbe4fd8092
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/77092a023a08d3c8e30785bc105d4f50a8b960842374863dd35eecdff4e12ce5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s033_output"
	    wget -O "n100.r10.s033_output/n100.r10.s033.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s033_output/n100.r10.s033.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s033_output/n100.r10.s033.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s033_output/n100.r10.s033.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s033_output/n100.r10.s033.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s033_output/n100.r10.s033.reference.fas" "n100.r10.s033_output/n100.r10.s033.fq1.fastq" "n100.r10.s033_output/n100.r10.s033.fq2.fastq" | samtools view -bS - > "n100.r10.s033_output/n100.r10.s033.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s033_output/n100.r10.s033.untrimmed.sorted.bam" "n100.r10.s033_output/n100.r10.s033.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s033_output/n100.r10.s033.untrimmed.sorted.bam" -b "n100.r10.s033_output/n100.r10.s033.primers.bed" -p "n100.r10.s033_output/n100.r10.s033.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s033_output/n100.r10.s033.trimmed.sorted.bam" "n100.r10.s033_output/n100.r10.s033.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s033_output/n100.r10.s033.reference.fas" "n100.r10.s033_output/n100.r10.s033.trimmed.sorted.bam" > "n100.r10.s033_output/n100.r10.s033.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s033_output/n100.r10.s033.reference.fas" --call-indels "n100.r10.s033_output/n100.r10.s033.trimmed.sorted.bam" > "n100.r10.s033_output/n100.r10.s033.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s033_output/n100.r10.s033.trimmed.sorted.bam" > "n100.r10.s033_output/n100.r10.s033.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s033_output/n100.r10.s033.depth.txt" "n100.r10.s033_output/n100.r10.s033.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s033_output/n100.r10.s033.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s033_output/n100.r10.s033.reference.fas" | bcftools consensus -m "n100.r10.s033_output/n100.r10.s033.low_depth.tsv" tmp.vcf.gz > "n100.r10.s033_output/n100.r10.s033.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s033_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:87437ec1c05db15b9717a719ea1afa24e3adf9efac48ef3551066e7fffd6626e 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.5MiB max=125.5MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 17:42:54 scheduler task a0b2a249 (flow 9d886ddd): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s033.tar.gz resources {}
2021/07/08 17:42:54  ->  n100.r10.s033.Main.cp_out_file 9d886ddd exec extern s3://niema-test/n100/r10/n100.r10.s033.tar.gz 35.7MiB
2021/07/08 17:42:55 scheduler task 9ed55eec (flow eceeb852): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:4ffcce00bef898a9ae4dba177a4897d60da257afe191667e31b6c4ad99a462f1 -> s3://niema-test/n100/r10/n100.r10.s096.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:42:55  <-  n100.r10.s096.Main.cp_out_file eceeb852 ok   extern 0s 35.7MiB
2021/07/08 17:42:55 scheduler task 8d0f47ee (flow 5e0db977): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:55 scheduler task 8d0f47ee (flow 5e0db977): unloading (try 0): started
2021/07/08 17:42:55 scheduler task 8d0f47ee (flow 5e0db977): unloading list<val<.=ab533b6f 35.8MiB> 35.8MiB>
2021/07/08 17:42:55 scheduler task 8d0f47ee (flow 5e0db977): unloading val<.=60ac96c7 35.4MiB>
2021/07/08 17:42:55 scheduler task 8d0f47ee (flow 5e0db977): unloading val<.=fbbe9ae4 35.4MiB>
2021/07/08 17:42:55 scheduler task 1b928d2d (flow 36230716): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:5259e4c390b632d77995862db02eed13d313ec728937641339252071dd9eb5de -> s3://niema-test/n100/r10/n100.r10.s040.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:42:55  <-  n100.r10.s040.Main.cp_out_file 36230716 ok   extern 0s 35.8MiB
2021/07/08 17:42:55 scheduler task 8d0f47ee (flow 5e0db977): unloaded val<.=60ac96c7 35.4MiB>
2021/07/08 17:42:55 scheduler task 8d0f47ee (flow 5e0db977): unloaded list<val<.=ab533b6f 35.8MiB> 35.8MiB>
2021/07/08 17:42:55 scheduler task 8d0f47ee (flow 5e0db977): unloaded val<.=fbbe9ae4 35.4MiB>
2021/07/08 17:42:55 scheduler task 8d0f47ee (flow 5e0db977): unloading (try 0): successful, next state: complete
2021/07/08 17:42:55  <-  n100.r10.s092.Main.out_file 5e0db977 ok     exec 4m55s 35.8MiB
2021/07/08 17:42:55 n100.r10.s092.Main.out_file 5e0db977 n100/r10/n100.r10.s092.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a1799ea60025ee812540ac5576805c1d9180017acd60a18150d55e43643c86f9
	sha256:5e0db9775087595b23eccc53aa200edd983a42fc75a871d8eaf10c871c899f67
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8d0f47ee3dba2f6f1b2467f75d661806dd8b9f599c85ec347c48988f471544d0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s092_output"
	    wget -O "n100.r10.s092_output/n100.r10.s092.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s092_output/n100.r10.s092.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s092_output/n100.r10.s092.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s092_output/n100.r10.s092.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s092_output/n100.r10.s092.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s092_output/n100.r10.s092.reference.fas" "n100.r10.s092_output/n100.r10.s092.fq1.fastq" "n100.r10.s092_output/n100.r10.s092.fq2.fastq" | samtools view -bS - > "n100.r10.s092_output/n100.r10.s092.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s092_output/n100.r10.s092.untrimmed.sorted.bam" "n100.r10.s092_output/n100.r10.s092.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s092_output/n100.r10.s092.untrimmed.sorted.bam" -b "n100.r10.s092_output/n100.r10.s092.primers.bed" -p "n100.r10.s092_output/n100.r10.s092.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s092_output/n100.r10.s092.trimmed.sorted.bam" "n100.r10.s092_output/n100.r10.s092.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s092_output/n100.r10.s092.reference.fas" "n100.r10.s092_output/n100.r10.s092.trimmed.sorted.bam" > "n100.r10.s092_output/n100.r10.s092.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s092_output/n100.r10.s092.reference.fas" --call-indels "n100.r10.s092_output/n100.r10.s092.trimmed.sorted.bam" > "n100.r10.s092_output/n100.r10.s092.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s092_output/n100.r10.s092.trimmed.sorted.bam" > "n100.r10.s092_output/n100.r10.s092.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s092_output/n100.r10.s092.depth.txt" "n100.r10.s092_output/n100.r10.s092.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s092_output/n100.r10.s092.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s092_output/n100.r10.s092.reference.fas" | bcftools consensus -m "n100.r10.s092_output/n100.r10.s092.low_depth.tsv" tmp.vcf.gz > "n100.r10.s092_output/n100.r10.s092.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s092_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:ab533b6f0f0530ace79be3a3b5e3c22901b3296bb5e1fe316c80e734737899c4 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.3MiB max=129.3MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=619B max=2.0KiB
2021/07/08 17:42:55 scheduler task 2e7c35d7 (flow c125b59a): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s092.tar.gz resources {}
2021/07/08 17:42:55  ->  n100.r10.s092.Main.cp_out_file c125b59a exec extern s3://niema-test/n100/r10/n100.r10.s092.tar.gz 35.8MiB
2021/07/08 17:42:55 scheduler task 400a7920 (flow a4d00c52): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:55 scheduler task 400a7920 (flow a4d00c52): promoting objects (try 0): started
2021/07/08 17:42:55 scheduler task 400a7920 (flow a4d00c52): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:55 scheduler task 400a7920 (flow a4d00c52): retrieving diagnostic output (try 0): started
2021/07/08 17:42:55 scheduler task 400a7920 (flow a4d00c52): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:55 scheduler task 400a7920 (flow a4d00c52): retrieving result (try 0): started
2021/07/08 17:42:55 scheduler task 400a7920 (flow a4d00c52): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:55 scheduler task 400a7920 (flow a4d00c52): transferring output (try 0): started
2021/07/08 17:42:55 scheduler task a0b2a249 (flow 9d886ddd): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:87437ec1c05db15b9717a719ea1afa24e3adf9efac48ef3551066e7fffd6626e -> s3://niema-test/n100/r10/n100.r10.s033.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:42:55  <-  n100.r10.s033.Main.cp_out_file 9d886ddd ok   extern 0s 35.7MiB
2021/07/08 17:42:55 scheduler task c33b1ab5 (flow c0e27ff9): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:55 scheduler task c33b1ab5 (flow c0e27ff9): promoting objects (try 0): started
2021/07/08 17:42:55 scheduler task c33b1ab5 (flow c0e27ff9): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:55 scheduler task c33b1ab5 (flow c0e27ff9): retrieving diagnostic output (try 0): started
2021/07/08 17:42:55 scheduler task c33b1ab5 (flow c0e27ff9): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:55 scheduler task c33b1ab5 (flow c0e27ff9): retrieving result (try 0): started
2021/07/08 17:42:55 scheduler task 2e7c35d7 (flow c125b59a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:ab533b6f0f0530ace79be3a3b5e3c22901b3296bb5e1fe316c80e734737899c4 -> s3://niema-test/n100/r10/n100.r10.s092.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:42:55  <-  n100.r10.s092.Main.cp_out_file c125b59a ok   extern 0s 35.8MiB
2021/07/08 17:42:55 scheduler task c33b1ab5 (flow c0e27ff9): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:55 scheduler task c33b1ab5 (flow c0e27ff9): transferring output (try 0): started
2021/07/08 17:42:56 scheduler task 400a7920 (flow a4d00c52): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:56 scheduler task 400a7920 (flow a4d00c52): unloading (try 0): started
2021/07/08 17:42:56 scheduler task 400a7920 (flow a4d00c52): unloading list<val<.=27bffb35 35.7MiB> 35.7MiB>
2021/07/08 17:42:56 scheduler task 400a7920 (flow a4d00c52): unloading val<.=1bda201d 35.4MiB>
2021/07/08 17:42:56 scheduler task 400a7920 (flow a4d00c52): unloading val<.=9036677b 35.4MiB>
2021/07/08 17:42:56 scheduler task 400a7920 (flow a4d00c52): unloaded val<.=9036677b 35.4MiB>
2021/07/08 17:42:56 scheduler task 400a7920 (flow a4d00c52): unloaded val<.=1bda201d 35.4MiB>
2021/07/08 17:42:56 scheduler task 400a7920 (flow a4d00c52): unloaded list<val<.=27bffb35 35.7MiB> 35.7MiB>
2021/07/08 17:42:56 scheduler task 400a7920 (flow a4d00c52): unloading (try 0): successful, next state: complete
2021/07/08 17:42:56  <-  n100.r10.s090.Main.out_file a4d00c52 ok     exec 4m56s 35.7MiB
2021/07/08 17:42:56 n100.r10.s090.Main.out_file a4d00c52 n100/r10/n100.r10.s090.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e37701031c135224d6bf44f9d485ddf580ae893e0e08d0c542e450542643e42e
	sha256:a4d00c524b2eb577f9bbaa2faddbe364d1921ec2997bdb3afb8a1411e5e908d8
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/400a79208fb1a1a93e67a205a5a1cec931e9b65ff8e97f7f7b8a9cacbcd18781
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s090_output"
	    wget -O "n100.r10.s090_output/n100.r10.s090.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s090_output/n100.r10.s090.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s090_output/n100.r10.s090.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s090_output/n100.r10.s090.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s090_output/n100.r10.s090.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s090_output/n100.r10.s090.reference.fas" "n100.r10.s090_output/n100.r10.s090.fq1.fastq" "n100.r10.s090_output/n100.r10.s090.fq2.fastq" | samtools view -bS - > "n100.r10.s090_output/n100.r10.s090.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s090_output/n100.r10.s090.untrimmed.sorted.bam" "n100.r10.s090_output/n100.r10.s090.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s090_output/n100.r10.s090.untrimmed.sorted.bam" -b "n100.r10.s090_output/n100.r10.s090.primers.bed" -p "n100.r10.s090_output/n100.r10.s090.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s090_output/n100.r10.s090.trimmed.sorted.bam" "n100.r10.s090_output/n100.r10.s090.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s090_output/n100.r10.s090.reference.fas" "n100.r10.s090_output/n100.r10.s090.trimmed.sorted.bam" > "n100.r10.s090_output/n100.r10.s090.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s090_output/n100.r10.s090.reference.fas" --call-indels "n100.r10.s090_output/n100.r10.s090.trimmed.sorted.bam" > "n100.r10.s090_output/n100.r10.s090.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s090_output/n100.r10.s090.trimmed.sorted.bam" > "n100.r10.s090_output/n100.r10.s090.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s090_output/n100.r10.s090.depth.txt" "n100.r10.s090_output/n100.r10.s090.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s090_output/n100.r10.s090.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s090_output/n100.r10.s090.reference.fas" | bcftools consensus -m "n100.r10.s090_output/n100.r10.s090.low_depth.tsv" tmp.vcf.gz > "n100.r10.s090_output/n100.r10.s090.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s090_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:27bffb35f55aeede72fb46a0f3c433655893136ee183f8be12d1d4e8083a18ee 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.5MiB max=129.4MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=625B max=2.0KiB
2021/07/08 17:42:56 scheduler task 126dbdfc (flow c0574694): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s090.tar.gz resources {}
2021/07/08 17:42:56  ->  n100.r10.s090.Main.cp_out_file c0574694 exec extern s3://niema-test/n100/r10/n100.r10.s090.tar.gz 35.7MiB
2021/07/08 17:42:56 scheduler task f44a16a1 (flow d1275b24): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:56 scheduler task f44a16a1 (flow d1275b24): promoting objects (try 0): started
2021/07/08 17:42:56 scheduler task f44a16a1 (flow d1275b24): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:56 scheduler task f44a16a1 (flow d1275b24): retrieving diagnostic output (try 0): started
2021/07/08 17:42:56 scheduler task f44a16a1 (flow d1275b24): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:56 scheduler task f44a16a1 (flow d1275b24): retrieving result (try 0): started
2021/07/08 17:42:56 scheduler task f44a16a1 (flow d1275b24): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:56 scheduler task f44a16a1 (flow d1275b24): transferring output (try 0): started
2021/07/08 17:42:56 scheduler task c33b1ab5 (flow c0e27ff9): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:56 scheduler task c33b1ab5 (flow c0e27ff9): unloading (try 0): started
2021/07/08 17:42:56 scheduler task c33b1ab5 (flow c0e27ff9): unloading list<val<.=7f443ea8 35.7MiB> 35.7MiB>
2021/07/08 17:42:56 scheduler task c33b1ab5 (flow c0e27ff9): unloading val<.=e8fc04fc 35.4MiB>
2021/07/08 17:42:56 scheduler task c33b1ab5 (flow c0e27ff9): unloading val<.=6a8ae68d 35.4MiB>
2021/07/08 17:42:56 scheduler task a99fe358 (flow 025791ae): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:56 scheduler task a99fe358 (flow 025791ae): promoting objects (try 0): started
2021/07/08 17:42:56 scheduler task c33b1ab5 (flow c0e27ff9): unloaded list<val<.=7f443ea8 35.7MiB> 35.7MiB>
2021/07/08 17:42:56 scheduler task c33b1ab5 (flow c0e27ff9): unloaded val<.=6a8ae68d 35.4MiB>
2021/07/08 17:42:56 scheduler task c33b1ab5 (flow c0e27ff9): unloaded val<.=e8fc04fc 35.4MiB>
2021/07/08 17:42:56 scheduler task c33b1ab5 (flow c0e27ff9): unloading (try 0): successful, next state: complete
2021/07/08 17:42:56  <-  n100.r10.s030.Main.out_file c0e27ff9 ok     exec 4m51s 35.7MiB
2021/07/08 17:42:56 n100.r10.s030.Main.out_file c0e27ff9 n100/r10/n100.r10.s030.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5602cf96d065d9e2685b8ede0cac8c476aa639a745fa704abf27030f640bd536
	sha256:c0e27ff9bbc44749e2303904e3c724b831c7a129a97b5fcecf471422ee8b6a71
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c33b1ab5daec2ff526fc7da0d3ae74fbca22448c4a6c851c3d63686e3eb16da7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s030_output"
	    wget -O "n100.r10.s030_output/n100.r10.s030.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s030_output/n100.r10.s030.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s030_output/n100.r10.s030.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s030_output/n100.r10.s030.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s030_output/n100.r10.s030.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s030_output/n100.r10.s030.reference.fas" "n100.r10.s030_output/n100.r10.s030.fq1.fastq" "n100.r10.s030_output/n100.r10.s030.fq2.fastq" | samtools view -bS - > "n100.r10.s030_output/n100.r10.s030.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s030_output/n100.r10.s030.untrimmed.sorted.bam" "n100.r10.s030_output/n100.r10.s030.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s030_output/n100.r10.s030.untrimmed.sorted.bam" -b "n100.r10.s030_output/n100.r10.s030.primers.bed" -p "n100.r10.s030_output/n100.r10.s030.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s030_output/n100.r10.s030.trimmed.sorted.bam" "n100.r10.s030_output/n100.r10.s030.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s030_output/n100.r10.s030.reference.fas" "n100.r10.s030_output/n100.r10.s030.trimmed.sorted.bam" > "n100.r10.s030_output/n100.r10.s030.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s030_output/n100.r10.s030.reference.fas" --call-indels "n100.r10.s030_output/n100.r10.s030.trimmed.sorted.bam" > "n100.r10.s030_output/n100.r10.s030.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s030_output/n100.r10.s030.trimmed.sorted.bam" > "n100.r10.s030_output/n100.r10.s030.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s030_output/n100.r10.s030.depth.txt" "n100.r10.s030_output/n100.r10.s030.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s030_output/n100.r10.s030.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s030_output/n100.r10.s030.reference.fas" | bcftools consensus -m "n100.r10.s030_output/n100.r10.s030.low_depth.tsv" tmp.vcf.gz > "n100.r10.s030_output/n100.r10.s030.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s030_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:7f443ea8c6b1213ed606131b7caf499c4fccd045842684592ab499b96a7b43f7 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.2MiB max=127.3MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=414B max=1.0KiB
2021/07/08 17:42:56 scheduler task 7d8a9c2e (flow c82883d4): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s030.tar.gz resources {}
2021/07/08 17:42:56  ->  n100.r10.s030.Main.cp_out_file c82883d4 exec extern s3://niema-test/n100/r10/n100.r10.s030.tar.gz 35.7MiB
2021/07/08 17:42:56 scheduler task a99fe358 (flow 025791ae): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:56 scheduler task a99fe358 (flow 025791ae): retrieving diagnostic output (try 0): started
2021/07/08 17:42:56 scheduler task 8132d6a4 (flow 3012d03f): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:56 scheduler task 8132d6a4 (flow 3012d03f): promoting objects (try 0): started
2021/07/08 17:42:56 scheduler task a99fe358 (flow 025791ae): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:56 scheduler task a99fe358 (flow 025791ae): retrieving result (try 0): started
2021/07/08 17:42:56 scheduler task 8132d6a4 (flow 3012d03f): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:56 scheduler task 8132d6a4 (flow 3012d03f): retrieving diagnostic output (try 0): started
2021/07/08 17:42:56 scheduler task a99fe358 (flow 025791ae): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:56 scheduler task a99fe358 (flow 025791ae): transferring output (try 0): started
2021/07/08 17:42:56 scheduler task 126dbdfc (flow c0574694): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:27bffb35f55aeede72fb46a0f3c433655893136ee183f8be12d1d4e8083a18ee -> s3://niema-test/n100/r10/n100.r10.s090.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:42:56  <-  n100.r10.s090.Main.cp_out_file c0574694 ok   extern 0s 35.7MiB
2021/07/08 17:42:56 scheduler task 8132d6a4 (flow 3012d03f): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:56 scheduler task 8132d6a4 (flow 3012d03f): retrieving result (try 0): started
2021/07/08 17:42:56 scheduler task f44a16a1 (flow d1275b24): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:56 scheduler task f44a16a1 (flow d1275b24): unloading (try 0): started
2021/07/08 17:42:56 scheduler task f44a16a1 (flow d1275b24): unloading list<val<.=680d9ab5 35.7MiB> 35.7MiB>
2021/07/08 17:42:56 scheduler task f44a16a1 (flow d1275b24): unloading val<.=8a07cf68 35.4MiB>
2021/07/08 17:42:56 scheduler task f44a16a1 (flow d1275b24): unloading val<.=98acb485 35.4MiB>
2021/07/08 17:42:56 scheduler task 8132d6a4 (flow 3012d03f): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:56 scheduler task 8132d6a4 (flow 3012d03f): transferring output (try 0): started
2021/07/08 17:42:56 scheduler task f44a16a1 (flow d1275b24): unloaded val<.=98acb485 35.4MiB>
2021/07/08 17:42:56 scheduler task f44a16a1 (flow d1275b24): unloaded val<.=8a07cf68 35.4MiB>
2021/07/08 17:42:57 scheduler task f44a16a1 (flow d1275b24): unloaded list<val<.=680d9ab5 35.7MiB> 35.7MiB>
2021/07/08 17:42:57 scheduler task f44a16a1 (flow d1275b24): unloading (try 0): successful, next state: complete
2021/07/08 17:42:57  <-  n100.r10.s095.Main.out_file d1275b24 ok     exec 4m57s 35.7MiB
2021/07/08 17:42:57 n100.r10.s095.Main.out_file d1275b24 n100/r10/n100.r10.s095.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:03f6f9d8c415433ab8236d483420b99d579e4137132c5eeedc6356c2cce0a433
	sha256:d1275b24b495eb56efb8adae84959ff4475977ae1040d6d3ac7e0776c3fd5295
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f44a16a1b2f862441d380ca7646240843e6745642a78c63596ab631297ea7efe
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s095_output"
	    wget -O "n100.r10.s095_output/n100.r10.s095.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s095_output/n100.r10.s095.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s095_output/n100.r10.s095.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s095_output/n100.r10.s095.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s095_output/n100.r10.s095.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s095_output/n100.r10.s095.reference.fas" "n100.r10.s095_output/n100.r10.s095.fq1.fastq" "n100.r10.s095_output/n100.r10.s095.fq2.fastq" | samtools view -bS - > "n100.r10.s095_output/n100.r10.s095.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s095_output/n100.r10.s095.untrimmed.sorted.bam" "n100.r10.s095_output/n100.r10.s095.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s095_output/n100.r10.s095.untrimmed.sorted.bam" -b "n100.r10.s095_output/n100.r10.s095.primers.bed" -p "n100.r10.s095_output/n100.r10.s095.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s095_output/n100.r10.s095.trimmed.sorted.bam" "n100.r10.s095_output/n100.r10.s095.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s095_output/n100.r10.s095.reference.fas" "n100.r10.s095_output/n100.r10.s095.trimmed.sorted.bam" > "n100.r10.s095_output/n100.r10.s095.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s095_output/n100.r10.s095.reference.fas" --call-indels "n100.r10.s095_output/n100.r10.s095.trimmed.sorted.bam" > "n100.r10.s095_output/n100.r10.s095.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s095_output/n100.r10.s095.trimmed.sorted.bam" > "n100.r10.s095_output/n100.r10.s095.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s095_output/n100.r10.s095.depth.txt" "n100.r10.s095_output/n100.r10.s095.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s095_output/n100.r10.s095.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s095_output/n100.r10.s095.reference.fas" | bcftools consensus -m "n100.r10.s095_output/n100.r10.s095.low_depth.tsv" tmp.vcf.gz > "n100.r10.s095_output/n100.r10.s095.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s095_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:680d9ab5027c54f05bf5f84b8bd3067302d27c9ca5e7236d5b2c2d9702bfdcda 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.0MiB max=130.0MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=630B max=2.1KiB
2021/07/08 17:42:57 scheduler task e8b33047 (flow a66c287a): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s095.tar.gz resources {}
2021/07/08 17:42:57  ->  n100.r10.s095.Main.cp_out_file a66c287a exec extern s3://niema-test/n100/r10/n100.r10.s095.tar.gz 35.7MiB
2021/07/08 17:42:57 scheduler task 7d8a9c2e (flow c82883d4): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:7f443ea8c6b1213ed606131b7caf499c4fccd045842684592ab499b96a7b43f7 -> s3://niema-test/n100/r10/n100.r10.s030.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:42:57  <-  n100.r10.s030.Main.cp_out_file c82883d4 ok   extern 0s 35.7MiB
2021/07/08 17:42:57 scheduler task 74420576 (flow eaea6f09): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:57 scheduler task 74420576 (flow eaea6f09): promoting objects (try 0): started
2021/07/08 17:42:57 scheduler task a99fe358 (flow 025791ae): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:57 scheduler task a99fe358 (flow 025791ae): unloading (try 0): started
2021/07/08 17:42:57 scheduler task a99fe358 (flow 025791ae): unloading list<val<.=269b6ac2 35.7MiB> 35.7MiB>
2021/07/08 17:42:57 scheduler task a99fe358 (flow 025791ae): unloading val<.=dbb00916 35.4MiB>
2021/07/08 17:42:57 scheduler task a99fe358 (flow 025791ae): unloading val<.=c798e19c 35.4MiB>
2021/07/08 17:42:57 scheduler task 74420576 (flow eaea6f09): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:57 scheduler task 74420576 (flow eaea6f09): retrieving diagnostic output (try 0): started
2021/07/08 17:42:57 scheduler task a99fe358 (flow 025791ae): unloaded list<val<.=269b6ac2 35.7MiB> 35.7MiB>
2021/07/08 17:42:57 scheduler task a99fe358 (flow 025791ae): unloaded val<.=c798e19c 35.4MiB>
2021/07/08 17:42:57 scheduler task a99fe358 (flow 025791ae): unloaded val<.=dbb00916 35.4MiB>
2021/07/08 17:42:57 scheduler task a99fe358 (flow 025791ae): unloading (try 0): successful, next state: complete
2021/07/08 17:42:57  <-  n100.r10.s045.Main.out_file 025791ae ok     exec 4m58s 35.7MiB
2021/07/08 17:42:57 n100.r10.s045.Main.out_file 025791ae n100/r10/n100.r10.s045.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3d0164b42fb99899a4ae203b21ca9fbd9f5609c4695dd3ac8729d44e1b9970e0
	sha256:025791aeaa50de7271e4bce65cb88fc910d5e960354593ba5feacbb583e3f37c
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a99fe3581af3fb66a5434738dc53812b7d09c8c2c65ed9d16c0d6731d4bd447a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s045_output"
	    wget -O "n100.r10.s045_output/n100.r10.s045.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s045_output/n100.r10.s045.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s045_output/n100.r10.s045.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s045_output/n100.r10.s045.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s045_output/n100.r10.s045.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s045_output/n100.r10.s045.reference.fas" "n100.r10.s045_output/n100.r10.s045.fq1.fastq" "n100.r10.s045_output/n100.r10.s045.fq2.fastq" | samtools view -bS - > "n100.r10.s045_output/n100.r10.s045.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s045_output/n100.r10.s045.untrimmed.sorted.bam" "n100.r10.s045_output/n100.r10.s045.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s045_output/n100.r10.s045.untrimmed.sorted.bam" -b "n100.r10.s045_output/n100.r10.s045.primers.bed" -p "n100.r10.s045_output/n100.r10.s045.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s045_output/n100.r10.s045.trimmed.sorted.bam" "n100.r10.s045_output/n100.r10.s045.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s045_output/n100.r10.s045.reference.fas" "n100.r10.s045_output/n100.r10.s045.trimmed.sorted.bam" > "n100.r10.s045_output/n100.r10.s045.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s045_output/n100.r10.s045.reference.fas" --call-indels "n100.r10.s045_output/n100.r10.s045.trimmed.sorted.bam" > "n100.r10.s045_output/n100.r10.s045.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s045_output/n100.r10.s045.trimmed.sorted.bam" > "n100.r10.s045_output/n100.r10.s045.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s045_output/n100.r10.s045.depth.txt" "n100.r10.s045_output/n100.r10.s045.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s045_output/n100.r10.s045.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s045_output/n100.r10.s045.reference.fas" | bcftools consensus -m "n100.r10.s045_output/n100.r10.s045.low_depth.tsv" tmp.vcf.gz > "n100.r10.s045_output/n100.r10.s045.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s045_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:269b6ac2c342f2ad5dae41ac151b61bcc62f28296b1be87a582220bfb886726c 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.6MiB max=128.8MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=415B max=1.0KiB
2021/07/08 17:42:57 scheduler task d647aa76 (flow fd692e2d): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s045.tar.gz resources {}
2021/07/08 17:42:57  ->  n100.r10.s045.Main.cp_out_file fd692e2d exec extern s3://niema-test/n100/r10/n100.r10.s045.tar.gz 35.7MiB
2021/07/08 17:42:57 scheduler task 8132d6a4 (flow 3012d03f): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:57 scheduler task 8132d6a4 (flow 3012d03f): unloading (try 0): started
2021/07/08 17:42:57 scheduler task 8132d6a4 (flow 3012d03f): unloading list<val<.=aa1b3f27 35.7MiB> 35.7MiB>
2021/07/08 17:42:57 scheduler task 8132d6a4 (flow 3012d03f): unloading val<.=aa9f990e 35.4MiB>
2021/07/08 17:42:57 scheduler task 8132d6a4 (flow 3012d03f): unloading val<.=c20dbf1c 35.4MiB>
2021/07/08 17:42:57 scheduler task 53abe90b (flow df4d82f6): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:57 scheduler task 53abe90b (flow df4d82f6): promoting objects (try 0): started
2021/07/08 17:42:57 scheduler task 74420576 (flow eaea6f09): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:57 scheduler task 74420576 (flow eaea6f09): retrieving result (try 0): started
2021/07/08 17:42:57 scheduler task 8132d6a4 (flow 3012d03f): unloaded val<.=c20dbf1c 35.4MiB>
2021/07/08 17:42:57 scheduler task 8132d6a4 (flow 3012d03f): unloaded list<val<.=aa1b3f27 35.7MiB> 35.7MiB>
2021/07/08 17:42:57 scheduler task 8132d6a4 (flow 3012d03f): unloaded val<.=aa9f990e 35.4MiB>
2021/07/08 17:42:57 scheduler task 8132d6a4 (flow 3012d03f): unloading (try 0): successful, next state: complete
2021/07/08 17:42:57  <-  n100.r10.s085.Main.out_file 3012d03f ok     exec 4m58s 35.7MiB
2021/07/08 17:42:57 n100.r10.s085.Main.out_file 3012d03f n100/r10/n100.r10.s085.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0dd015d3033f4316db91ee98d5e454d05144feda7aef64fcd6ed56372dfe7655
	sha256:3012d03fc6949adb7b9156e84d34fcb9cfccb049a310fc8c37f031b0a74b95db
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/8132d6a4f859b360980eafa8fbb0e80e262e7db5fc5c48c64c943e638a53dd2b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s085_output"
	    wget -O "n100.r10.s085_output/n100.r10.s085.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s085_output/n100.r10.s085.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s085_output/n100.r10.s085.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s085_output/n100.r10.s085.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s085_output/n100.r10.s085.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s085_output/n100.r10.s085.reference.fas" "n100.r10.s085_output/n100.r10.s085.fq1.fastq" "n100.r10.s085_output/n100.r10.s085.fq2.fastq" | samtools view -bS - > "n100.r10.s085_output/n100.r10.s085.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s085_output/n100.r10.s085.untrimmed.sorted.bam" "n100.r10.s085_output/n100.r10.s085.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s085_output/n100.r10.s085.untrimmed.sorted.bam" -b "n100.r10.s085_output/n100.r10.s085.primers.bed" -p "n100.r10.s085_output/n100.r10.s085.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s085_output/n100.r10.s085.trimmed.sorted.bam" "n100.r10.s085_output/n100.r10.s085.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s085_output/n100.r10.s085.reference.fas" "n100.r10.s085_output/n100.r10.s085.trimmed.sorted.bam" > "n100.r10.s085_output/n100.r10.s085.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s085_output/n100.r10.s085.reference.fas" --call-indels "n100.r10.s085_output/n100.r10.s085.trimmed.sorted.bam" > "n100.r10.s085_output/n100.r10.s085.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s085_output/n100.r10.s085.trimmed.sorted.bam" > "n100.r10.s085_output/n100.r10.s085.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s085_output/n100.r10.s085.depth.txt" "n100.r10.s085_output/n100.r10.s085.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s085_output/n100.r10.s085.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s085_output/n100.r10.s085.reference.fas" | bcftools consensus -m "n100.r10.s085_output/n100.r10.s085.low_depth.tsv" tmp.vcf.gz > "n100.r10.s085_output/n100.r10.s085.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s085_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:aa1b3f2775de09ed616576e7761e4702fffae438f323d11bb6b19d0fe2689686 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.8MiB max=127.6MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 17:42:57 scheduler task 2652151b (flow 9ec31d37): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s085.tar.gz resources {}
2021/07/08 17:42:57  ->  n100.r10.s085.Main.cp_out_file 9ec31d37 exec extern s3://niema-test/n100/r10/n100.r10.s085.tar.gz 35.7MiB
2021/07/08 17:42:57 scheduler task 53abe90b (flow df4d82f6): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:57 scheduler task 53abe90b (flow df4d82f6): retrieving diagnostic output (try 0): started
2021/07/08 17:42:57 scheduler task 74420576 (flow eaea6f09): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:57 scheduler task 74420576 (flow eaea6f09): transferring output (try 0): started
2021/07/08 17:42:57 scheduler task e8b33047 (flow a66c287a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:680d9ab5027c54f05bf5f84b8bd3067302d27c9ca5e7236d5b2c2d9702bfdcda -> s3://niema-test/n100/r10/n100.r10.s095.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:42:57  <-  n100.r10.s095.Main.cp_out_file a66c287a ok   extern 0s 35.7MiB
2021/07/08 17:42:57 scheduler task 53abe90b (flow df4d82f6): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:57 scheduler task 53abe90b (flow df4d82f6): retrieving result (try 0): started
2021/07/08 17:42:57 scheduler task 53abe90b (flow df4d82f6): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:57 scheduler task 53abe90b (flow df4d82f6): transferring output (try 0): started
2021/07/08 17:42:57 scheduler task 768ad499 (flow 88f35ec0): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:57 scheduler task 768ad499 (flow 88f35ec0): promoting objects (try 0): started
2021/07/08 17:42:58 scheduler task 768ad499 (flow 88f35ec0): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:58 scheduler task 768ad499 (flow 88f35ec0): retrieving diagnostic output (try 0): started
2021/07/08 17:42:58 scheduler task 0a2b5832 (flow c7221f94): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:58 scheduler task 0a2b5832 (flow c7221f94): promoting objects (try 0): started
2021/07/08 17:42:58 scheduler task bd8d9d6a (flow 94edc653): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:58 scheduler task bd8d9d6a (flow 94edc653): promoting objects (try 0): started
2021/07/08 17:42:58 scheduler task 0a2b5832 (flow c7221f94): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:58 scheduler task 768ad499 (flow 88f35ec0): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:58 scheduler task 0a2b5832 (flow c7221f94): retrieving diagnostic output (try 0): started
2021/07/08 17:42:58 scheduler task 768ad499 (flow 88f35ec0): retrieving result (try 0): started
2021/07/08 17:42:58 scheduler task 1038d1a1 (flow bef79a94): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:58 scheduler task 1038d1a1 (flow bef79a94): promoting objects (try 0): started
2021/07/08 17:42:58 scheduler task 74420576 (flow eaea6f09): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:58 scheduler task 74420576 (flow eaea6f09): unloading (try 0): started
2021/07/08 17:42:58 scheduler task 74420576 (flow eaea6f09): unloading list<val<.=a9cf048d 35.7MiB> 35.7MiB>
2021/07/08 17:42:58 scheduler task 74420576 (flow eaea6f09): unloading val<.=030d8f1f 35.4MiB>
2021/07/08 17:42:58 scheduler task 74420576 (flow eaea6f09): unloading val<.=a1be5ef2 35.4MiB>
2021/07/08 17:42:58 scheduler task bd8d9d6a (flow 94edc653): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:58 scheduler task bd8d9d6a (flow 94edc653): retrieving diagnostic output (try 0): started
2021/07/08 17:42:58 scheduler task 0a2b5832 (flow c7221f94): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:58 scheduler task 768ad499 (flow 88f35ec0): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:58 scheduler task 0a2b5832 (flow c7221f94): retrieving result (try 0): started
2021/07/08 17:42:58 scheduler task 768ad499 (flow 88f35ec0): transferring output (try 0): started
2021/07/08 17:42:58 scheduler task 1038d1a1 (flow bef79a94): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:58 scheduler task 1038d1a1 (flow bef79a94): retrieving diagnostic output (try 0): started
2021/07/08 17:42:58 scheduler task 74420576 (flow eaea6f09): unloaded val<.=030d8f1f 35.4MiB>
2021/07/08 17:42:58 scheduler task 74420576 (flow eaea6f09): unloaded val<.=a1be5ef2 35.4MiB>
2021/07/08 17:42:58 scheduler task 74420576 (flow eaea6f09): unloaded list<val<.=a9cf048d 35.7MiB> 35.7MiB>
2021/07/08 17:42:58 scheduler task 74420576 (flow eaea6f09): unloading (try 0): successful, next state: complete
2021/07/08 17:42:58  <-  n100.r10.s065.Main.out_file eaea6f09 ok     exec 4m53s 35.7MiB
2021/07/08 17:42:58 n100.r10.s065.Main.out_file eaea6f09 n100/r10/n100.r10.s065.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a220aae276c8aaf1cfdbc67dbae41ab9b3e10b75e9af469059b7008fcbbf6e47
	sha256:eaea6f092408244f31ecd0abf21113091d46dac0e3616850a341c23bcd4bffcf
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/744205766793614fb49d6ea9114914a60578dbcbe1a9bff26c1f90a6ffdc44ef
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s065_output"
	    wget -O "n100.r10.s065_output/n100.r10.s065.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s065_output/n100.r10.s065.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s065_output/n100.r10.s065.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s065_output/n100.r10.s065.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s065_output/n100.r10.s065.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s065_output/n100.r10.s065.reference.fas" "n100.r10.s065_output/n100.r10.s065.fq1.fastq" "n100.r10.s065_output/n100.r10.s065.fq2.fastq" | samtools view -bS - > "n100.r10.s065_output/n100.r10.s065.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s065_output/n100.r10.s065.untrimmed.sorted.bam" "n100.r10.s065_output/n100.r10.s065.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s065_output/n100.r10.s065.untrimmed.sorted.bam" -b "n100.r10.s065_output/n100.r10.s065.primers.bed" -p "n100.r10.s065_output/n100.r10.s065.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s065_output/n100.r10.s065.trimmed.sorted.bam" "n100.r10.s065_output/n100.r10.s065.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s065_output/n100.r10.s065.reference.fas" "n100.r10.s065_output/n100.r10.s065.trimmed.sorted.bam" > "n100.r10.s065_output/n100.r10.s065.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s065_output/n100.r10.s065.reference.fas" --call-indels "n100.r10.s065_output/n100.r10.s065.trimmed.sorted.bam" > "n100.r10.s065_output/n100.r10.s065.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s065_output/n100.r10.s065.trimmed.sorted.bam" > "n100.r10.s065_output/n100.r10.s065.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s065_output/n100.r10.s065.depth.txt" "n100.r10.s065_output/n100.r10.s065.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s065_output/n100.r10.s065.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s065_output/n100.r10.s065.reference.fas" | bcftools consensus -m "n100.r10.s065_output/n100.r10.s065.low_depth.tsv" tmp.vcf.gz > "n100.r10.s065_output/n100.r10.s065.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s065_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a9cf048dcc58bf87d158235953e469598421763a82ad562d862dd0d2f9ce59f2 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.8MiB max=128.4MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 17:42:58 scheduler task dcf726e4 (flow 38b1a2d7): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s065.tar.gz resources {}
2021/07/08 17:42:58  ->  n100.r10.s065.Main.cp_out_file 38b1a2d7 exec extern s3://niema-test/n100/r10/n100.r10.s065.tar.gz 35.7MiB
2021/07/08 17:42:58 scheduler task 2652151b (flow 9ec31d37): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:aa1b3f2775de09ed616576e7761e4702fffae438f323d11bb6b19d0fe2689686 -> s3://niema-test/n100/r10/n100.r10.s085.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:42:58  <-  n100.r10.s085.Main.cp_out_file 9ec31d37 ok   extern 0s 35.7MiB
2021/07/08 17:42:58 scheduler task 51fe96bf (flow 1f86a397): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:58 scheduler task bd8d9d6a (flow 94edc653): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:58 scheduler task 51fe96bf (flow 1f86a397): promoting objects (try 0): started
2021/07/08 17:42:58 scheduler task 0a2b5832 (flow c7221f94): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:58 scheduler task bd8d9d6a (flow 94edc653): retrieving result (try 0): started
2021/07/08 17:42:58 scheduler task 0a2b5832 (flow c7221f94): transferring output (try 0): started
2021/07/08 17:42:58 scheduler task d647aa76 (flow fd692e2d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:269b6ac2c342f2ad5dae41ac151b61bcc62f28296b1be87a582220bfb886726c -> s3://niema-test/n100/r10/n100.r10.s045.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:42:58  <-  n100.r10.s045.Main.cp_out_file fd692e2d ok   extern 0s 35.7MiB
2021/07/08 17:42:58 scheduler task 1038d1a1 (flow bef79a94): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:58 scheduler task da1aa7bb (flow f919f347): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:58 scheduler task 5bc25bd3 (flow 8edca96d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:58 scheduler task 53abe90b (flow df4d82f6): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:58 scheduler task 51fe96bf (flow 1f86a397): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:58 scheduler task bd8d9d6a (flow 94edc653): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:58 scheduler task 1038d1a1 (flow bef79a94): retrieving result (try 0): started
2021/07/08 17:42:58 scheduler task da1aa7bb (flow f919f347): promoting objects (try 0): started
2021/07/08 17:42:58 scheduler task 5bc25bd3 (flow 8edca96d): promoting objects (try 0): started
2021/07/08 17:42:58 scheduler task 53abe90b (flow df4d82f6): unloading (try 0): started
2021/07/08 17:42:58 scheduler task 53abe90b (flow df4d82f6): unloading list<val<.=a9ba8984 35.7MiB> 35.7MiB>
2021/07/08 17:42:58 scheduler task 53abe90b (flow df4d82f6): unloading val<.=f9b3ed4f 35.4MiB>
2021/07/08 17:42:58 scheduler task 53abe90b (flow df4d82f6): unloading val<.=750a204d 35.4MiB>
2021/07/08 17:42:58 scheduler task 51fe96bf (flow 1f86a397): retrieving diagnostic output (try 0): started
2021/07/08 17:42:58 scheduler task bd8d9d6a (flow 94edc653): transferring output (try 0): started
2021/07/08 17:42:58 scheduler task 1038d1a1 (flow bef79a94): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:58 scheduler task 1038d1a1 (flow bef79a94): transferring output (try 0): started
2021/07/08 17:42:58 scheduler task da1aa7bb (flow f919f347): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:58 scheduler task da1aa7bb (flow f919f347): retrieving diagnostic output (try 0): started
2021/07/08 17:42:58 scheduler task 5bc25bd3 (flow 8edca96d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:58 scheduler task 5bc25bd3 (flow 8edca96d): retrieving diagnostic output (try 0): started
2021/07/08 17:42:58 scheduler task 53abe90b (flow df4d82f6): unloaded list<val<.=a9ba8984 35.7MiB> 35.7MiB>
2021/07/08 17:42:58 scheduler task 53abe90b (flow df4d82f6): unloaded val<.=750a204d 35.4MiB>
2021/07/08 17:42:58 scheduler task 53abe90b (flow df4d82f6): unloaded val<.=f9b3ed4f 35.4MiB>
2021/07/08 17:42:58 scheduler task 53abe90b (flow df4d82f6): unloading (try 0): successful, next state: complete
2021/07/08 17:42:58  <-  n100.r10.s013.Main.out_file df4d82f6 ok     exec 4m53s 35.7MiB
2021/07/08 17:42:58 n100.r10.s013.Main.out_file df4d82f6 n100/r10/n100.r10.s013.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8384ac4a242aaa8db0a4dd8ebfe5e97669a2fd7a4880bd4442db33582a874b25
	sha256:df4d82f623f037374b998150b2112bde0860b50082f91058a4b9d11235ee1837
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/53abe90b202aad24dbbdf93ba6fb627eeb9999756ee5e2bda696a44daaf975b1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s013_output"
	    wget -O "n100.r10.s013_output/n100.r10.s013.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s013_output/n100.r10.s013.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s013_output/n100.r10.s013.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s013_output/n100.r10.s013.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s013_output/n100.r10.s013.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s013_output/n100.r10.s013.reference.fas" "n100.r10.s013_output/n100.r10.s013.fq1.fastq" "n100.r10.s013_output/n100.r10.s013.fq2.fastq" | samtools view -bS - > "n100.r10.s013_output/n100.r10.s013.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s013_output/n100.r10.s013.untrimmed.sorted.bam" "n100.r10.s013_output/n100.r10.s013.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s013_output/n100.r10.s013.untrimmed.sorted.bam" -b "n100.r10.s013_output/n100.r10.s013.primers.bed" -p "n100.r10.s013_output/n100.r10.s013.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s013_output/n100.r10.s013.trimmed.sorted.bam" "n100.r10.s013_output/n100.r10.s013.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s013_output/n100.r10.s013.reference.fas" "n100.r10.s013_output/n100.r10.s013.trimmed.sorted.bam" > "n100.r10.s013_output/n100.r10.s013.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s013_output/n100.r10.s013.reference.fas" --call-indels "n100.r10.s013_output/n100.r10.s013.trimmed.sorted.bam" > "n100.r10.s013_output/n100.r10.s013.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s013_output/n100.r10.s013.trimmed.sorted.bam" > "n100.r10.s013_output/n100.r10.s013.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s013_output/n100.r10.s013.depth.txt" "n100.r10.s013_output/n100.r10.s013.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s013_output/n100.r10.s013.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s013_output/n100.r10.s013.reference.fas" | bcftools consensus -m "n100.r10.s013_output/n100.r10.s013.low_depth.tsv" tmp.vcf.gz > "n100.r10.s013_output/n100.r10.s013.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s013_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:a9ba8984a6e62755736b59de0deb74c1f6affd7bbe24f1cc983c20c2f00dfe3d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=22.5MiB max=125.7MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=414B max=1.0KiB
2021/07/08 17:42:58 scheduler task 09f2e358 (flow 0ff3568a): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s013.tar.gz resources {}
2021/07/08 17:42:58  ->  n100.r10.s013.Main.cp_out_file 0ff3568a exec extern s3://niema-test/n100/r10/n100.r10.s013.tar.gz 35.7MiB
2021/07/08 17:42:58 scheduler task f18684ae (flow 8fab09ce): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:58 scheduler task 51fe96bf (flow 1f86a397): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:58 scheduler task f18684ae (flow 8fab09ce): promoting objects (try 0): started
2021/07/08 17:42:58 scheduler task 51fe96bf (flow 1f86a397): retrieving result (try 0): started
2021/07/08 17:42:58 scheduler task da1aa7bb (flow f919f347): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:58 scheduler task da1aa7bb (flow f919f347): retrieving result (try 0): started
2021/07/08 17:42:58 scheduler task f18684ae (flow 8fab09ce): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:58 scheduler task da1aa7bb (flow f919f347): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:58 scheduler task 51fe96bf (flow 1f86a397): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:58 scheduler task 5bc25bd3 (flow 8edca96d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:58 scheduler task f18684ae (flow 8fab09ce): retrieving diagnostic output (try 0): started
2021/07/08 17:42:58 scheduler task da1aa7bb (flow f919f347): transferring output (try 0): started
2021/07/08 17:42:58 scheduler task 51fe96bf (flow 1f86a397): transferring output (try 0): started
2021/07/08 17:42:58 scheduler task 5bc25bd3 (flow 8edca96d): retrieving result (try 0): started
2021/07/08 17:42:58 scheduler task 768ad499 (flow 88f35ec0): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:58 scheduler task 768ad499 (flow 88f35ec0): unloading (try 0): started
2021/07/08 17:42:58 scheduler task 768ad499 (flow 88f35ec0): unloading list<val<.=105bc5a6 35.7MiB> 35.7MiB>
2021/07/08 17:42:58 scheduler task 768ad499 (flow 88f35ec0): unloading val<.=40d181f5 35.4MiB>
2021/07/08 17:42:58 scheduler task 768ad499 (flow 88f35ec0): unloading val<.=5ff54494 35.4MiB>
2021/07/08 17:42:58 scheduler task f18684ae (flow 8fab09ce): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:58 scheduler task f18684ae (flow 8fab09ce): retrieving result (try 0): started
2021/07/08 17:42:58 scheduler task 5bc25bd3 (flow 8edca96d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:58 scheduler task 5bc25bd3 (flow 8edca96d): transferring output (try 0): started
2021/07/08 17:42:58 scheduler task 0a2b5832 (flow c7221f94): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:58 scheduler task 0a2b5832 (flow c7221f94): unloading (try 0): started
2021/07/08 17:42:58 scheduler task 0a2b5832 (flow c7221f94): unloading list<val<.=edc5b041 35.7MiB> 35.7MiB>
2021/07/08 17:42:58 scheduler task 0a2b5832 (flow c7221f94): unloading val<.=a86f30b0 35.4MiB>
2021/07/08 17:42:58 scheduler task 0a2b5832 (flow c7221f94): unloading val<.=1fa12ab7 35.4MiB>
2021/07/08 17:42:58 scheduler task 768ad499 (flow 88f35ec0): unloaded val<.=5ff54494 35.4MiB>
2021/07/08 17:42:58 scheduler task 768ad499 (flow 88f35ec0): unloaded list<val<.=105bc5a6 35.7MiB> 35.7MiB>
2021/07/08 17:42:58 scheduler task 768ad499 (flow 88f35ec0): unloaded val<.=40d181f5 35.4MiB>
2021/07/08 17:42:58 scheduler task 768ad499 (flow 88f35ec0): unloading (try 0): successful, next state: complete
2021/07/08 17:42:58  <-  n100.r10.s041.Main.out_file 88f35ec0 ok     exec 4m53s 35.7MiB
2021/07/08 17:42:58 n100.r10.s041.Main.out_file 88f35ec0 n100/r10/n100.r10.s041.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f765b3082ecd5615139d08f060843134e9238236496fbd0e708887110d6a4582
	sha256:88f35ec0e44378348d1a1491e44346711a2c092fec02028608c29fc3fa0d184e
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/768ad499eedd3ee0ecba0ad28d54dea047375e68e633cb1adf152557183867c7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s041_output"
	    wget -O "n100.r10.s041_output/n100.r10.s041.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s041_output/n100.r10.s041.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s041_output/n100.r10.s041.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s041_output/n100.r10.s041.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s041_output/n100.r10.s041.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s041_output/n100.r10.s041.reference.fas" "n100.r10.s041_output/n100.r10.s041.fq1.fastq" "n100.r10.s041_output/n100.r10.s041.fq2.fastq" | samtools view -bS - > "n100.r10.s041_output/n100.r10.s041.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s041_output/n100.r10.s041.untrimmed.sorted.bam" "n100.r10.s041_output/n100.r10.s041.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s041_output/n100.r10.s041.untrimmed.sorted.bam" -b "n100.r10.s041_output/n100.r10.s041.primers.bed" -p "n100.r10.s041_output/n100.r10.s041.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s041_output/n100.r10.s041.trimmed.sorted.bam" "n100.r10.s041_output/n100.r10.s041.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s041_output/n100.r10.s041.reference.fas" "n100.r10.s041_output/n100.r10.s041.trimmed.sorted.bam" > "n100.r10.s041_output/n100.r10.s041.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s041_output/n100.r10.s041.reference.fas" --call-indels "n100.r10.s041_output/n100.r10.s041.trimmed.sorted.bam" > "n100.r10.s041_output/n100.r10.s041.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s041_output/n100.r10.s041.trimmed.sorted.bam" > "n100.r10.s041_output/n100.r10.s041.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s041_output/n100.r10.s041.depth.txt" "n100.r10.s041_output/n100.r10.s041.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s041_output/n100.r10.s041.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s041_output/n100.r10.s041.reference.fas" | bcftools consensus -m "n100.r10.s041_output/n100.r10.s041.low_depth.tsv" tmp.vcf.gz > "n100.r10.s041_output/n100.r10.s041.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s041_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:105bc5a6c91877a802376c051b809b20480f30b2cd5abc1c56507285686719ba 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.9MiB max=129.3MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=418B max=2.0KiB
2021/07/08 17:42:58 scheduler task 93994f7a (flow 29c9bbe9): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s041.tar.gz resources {}
2021/07/08 17:42:58  ->  n100.r10.s041.Main.cp_out_file 29c9bbe9 exec extern s3://niema-test/n100/r10/n100.r10.s041.tar.gz 35.7MiB
2021/07/08 17:42:58 scheduler task f18684ae (flow 8fab09ce): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:58 scheduler task 61d86a19 (flow ee1e5c5f): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:58 scheduler task f18684ae (flow 8fab09ce): transferring output (try 0): started
2021/07/08 17:42:58 scheduler task 61d86a19 (flow ee1e5c5f): promoting objects (try 0): started
2021/07/08 17:42:58 scheduler task 0a2b5832 (flow c7221f94): unloaded val<.=1fa12ab7 35.4MiB>
2021/07/08 17:42:58 scheduler task 0a2b5832 (flow c7221f94): unloaded val<.=a86f30b0 35.4MiB>
2021/07/08 17:42:58 scheduler task 0a2b5832 (flow c7221f94): unloaded list<val<.=edc5b041 35.7MiB> 35.7MiB>
2021/07/08 17:42:58 scheduler task 0a2b5832 (flow c7221f94): unloading (try 0): successful, next state: complete
2021/07/08 17:42:58  <-  n100.r10.s056.Main.out_file c7221f94 ok     exec 4m53s 35.7MiB
2021/07/08 17:42:58 n100.r10.s056.Main.out_file c7221f94 n100/r10/n100.r10.s056.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0be66675e1560f0f37dba768da18fb70479693a034c39d3a3ae47e306309af6c
	sha256:c7221f945f6110e77e7a368c38b316c82682e475843b2babcf19297b8985d974
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0a2b5832391eaea126b677108f22a21fd5b45033871e9167a602843de859adc1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s056_output"
	    wget -O "n100.r10.s056_output/n100.r10.s056.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s056_output/n100.r10.s056.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s056_output/n100.r10.s056.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s056_output/n100.r10.s056.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s056_output/n100.r10.s056.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s056_output/n100.r10.s056.reference.fas" "n100.r10.s056_output/n100.r10.s056.fq1.fastq" "n100.r10.s056_output/n100.r10.s056.fq2.fastq" | samtools view -bS - > "n100.r10.s056_output/n100.r10.s056.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s056_output/n100.r10.s056.untrimmed.sorted.bam" "n100.r10.s056_output/n100.r10.s056.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s056_output/n100.r10.s056.untrimmed.sorted.bam" -b "n100.r10.s056_output/n100.r10.s056.primers.bed" -p "n100.r10.s056_output/n100.r10.s056.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s056_output/n100.r10.s056.trimmed.sorted.bam" "n100.r10.s056_output/n100.r10.s056.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s056_output/n100.r10.s056.reference.fas" "n100.r10.s056_output/n100.r10.s056.trimmed.sorted.bam" > "n100.r10.s056_output/n100.r10.s056.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s056_output/n100.r10.s056.reference.fas" --call-indels "n100.r10.s056_output/n100.r10.s056.trimmed.sorted.bam" > "n100.r10.s056_output/n100.r10.s056.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s056_output/n100.r10.s056.trimmed.sorted.bam" > "n100.r10.s056_output/n100.r10.s056.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s056_output/n100.r10.s056.depth.txt" "n100.r10.s056_output/n100.r10.s056.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s056_output/n100.r10.s056.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s056_output/n100.r10.s056.reference.fas" | bcftools consensus -m "n100.r10.s056_output/n100.r10.s056.low_depth.tsv" tmp.vcf.gz > "n100.r10.s056_output/n100.r10.s056.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s056_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:edc5b041d0390efa0831c05ee7bb8d9190b4d2ae710fe8979b20551ddde5bc6f 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.2MiB max=125.1MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 17:42:58 scheduler task 59ffa4ed (flow 9e1cfe0c): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s056.tar.gz resources {}
2021/07/08 17:42:58  ->  n100.r10.s056.Main.cp_out_file 9e1cfe0c exec extern s3://niema-test/n100/r10/n100.r10.s056.tar.gz 35.7MiB
2021/07/08 17:42:58 scheduler task 54c398c1 (flow 43de8083): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:58 scheduler task 54c398c1 (flow 43de8083): promoting objects (try 0): started
2021/07/08 17:42:58 scheduler task bd8d9d6a (flow 94edc653): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:58 scheduler task bd8d9d6a (flow 94edc653): unloading (try 0): started
2021/07/08 17:42:58 scheduler task bd8d9d6a (flow 94edc653): unloading list<val<.=b9093418 35.7MiB> 35.7MiB>
2021/07/08 17:42:58 scheduler task bd8d9d6a (flow 94edc653): unloading val<.=e1fe607e 35.4MiB>
2021/07/08 17:42:58 scheduler task bd8d9d6a (flow 94edc653): unloading val<.=4f960598 35.4MiB>
2021/07/08 17:42:58 scheduler task dcf726e4 (flow 38b1a2d7): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a9cf048dcc58bf87d158235953e469598421763a82ad562d862dd0d2f9ce59f2 -> s3://niema-test/n100/r10/n100.r10.s065.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:42:58  <-  n100.r10.s065.Main.cp_out_file 38b1a2d7 ok   extern 0s 35.7MiB
2021/07/08 17:42:58 scheduler task 61d86a19 (flow ee1e5c5f): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:58 scheduler task 61d86a19 (flow ee1e5c5f): retrieving diagnostic output (try 0): started
2021/07/08 17:42:58 scheduler task 1038d1a1 (flow bef79a94): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:58 scheduler task 1038d1a1 (flow bef79a94): unloading (try 0): started
2021/07/08 17:42:58 scheduler task 1038d1a1 (flow bef79a94): unloading list<val<.=012a3c12 35.8MiB> 35.8MiB>
2021/07/08 17:42:58 scheduler task 1038d1a1 (flow bef79a94): unloading val<.=17481ecf 35.4MiB>
2021/07/08 17:42:58 scheduler task 1038d1a1 (flow bef79a94): unloading val<.=1c22776b 35.4MiB>
2021/07/08 17:42:58 scheduler task 54c398c1 (flow 43de8083): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:58 scheduler task bd8d9d6a (flow 94edc653): unloaded list<val<.=b9093418 35.7MiB> 35.7MiB>
2021/07/08 17:42:58 scheduler task bd8d9d6a (flow 94edc653): unloaded val<.=e1fe607e 35.4MiB>
2021/07/08 17:42:58 scheduler task bd8d9d6a (flow 94edc653): unloaded val<.=4f960598 35.4MiB>
2021/07/08 17:42:58 scheduler task bd8d9d6a (flow 94edc653): unloading (try 0): successful, next state: complete
2021/07/08 17:42:59 scheduler task 54c398c1 (flow 43de8083): retrieving diagnostic output (try 0): started
2021/07/08 17:42:59  <-  n100.r10.s089.Main.out_file 94edc653 ok     exec 4m54s 35.7MiB
2021/07/08 17:42:59 n100.r10.s089.Main.out_file 94edc653 n100/r10/n100.r10.s089.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fc7b49d8d9a85f4524eed6e6b23897f885ef322652957ba0a8764c929bbd9ec7
	sha256:94edc653bfab3bc0ef82ab9ef7ea66b1b7e84e111f4b2bdf802d9bf1c5f1c93b
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bd8d9d6aa5d8fe3fedb1de0b00c73490a492adeeee22b2da6ba8e3d0c1e03e81
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s089_output"
	    wget -O "n100.r10.s089_output/n100.r10.s089.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s089_output/n100.r10.s089.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s089_output/n100.r10.s089.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s089_output/n100.r10.s089.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s089_output/n100.r10.s089.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s089_output/n100.r10.s089.reference.fas" "n100.r10.s089_output/n100.r10.s089.fq1.fastq" "n100.r10.s089_output/n100.r10.s089.fq2.fastq" | samtools view -bS - > "n100.r10.s089_output/n100.r10.s089.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s089_output/n100.r10.s089.untrimmed.sorted.bam" "n100.r10.s089_output/n100.r10.s089.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s089_output/n100.r10.s089.untrimmed.sorted.bam" -b "n100.r10.s089_output/n100.r10.s089.primers.bed" -p "n100.r10.s089_output/n100.r10.s089.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s089_output/n100.r10.s089.trimmed.sorted.bam" "n100.r10.s089_output/n100.r10.s089.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s089_output/n100.r10.s089.reference.fas" "n100.r10.s089_output/n100.r10.s089.trimmed.sorted.bam" > "n100.r10.s089_output/n100.r10.s089.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s089_output/n100.r10.s089.reference.fas" --call-indels "n100.r10.s089_output/n100.r10.s089.trimmed.sorted.bam" > "n100.r10.s089_output/n100.r10.s089.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s089_output/n100.r10.s089.trimmed.sorted.bam" > "n100.r10.s089_output/n100.r10.s089.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s089_output/n100.r10.s089.depth.txt" "n100.r10.s089_output/n100.r10.s089.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s089_output/n100.r10.s089.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s089_output/n100.r10.s089.reference.fas" | bcftools consensus -m "n100.r10.s089_output/n100.r10.s089.low_depth.tsv" tmp.vcf.gz > "n100.r10.s089_output/n100.r10.s089.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s089_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:b90934181b64e756b5c2bfa6a42ddf6d5fbabe76aa71b228980f39f5c46c101a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.9MiB max=128.2MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 17:42:59 scheduler task 3a3fa8f6 (flow a2440d15): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s089.tar.gz resources {}
2021/07/08 17:42:59  ->  n100.r10.s089.Main.cp_out_file a2440d15 exec extern s3://niema-test/n100/r10/n100.r10.s089.tar.gz 35.7MiB
2021/07/08 17:42:59 scheduler task 61d86a19 (flow ee1e5c5f): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:59 scheduler task 61d86a19 (flow ee1e5c5f): retrieving result (try 0): started
2021/07/08 17:42:59 scheduler task 1038d1a1 (flow bef79a94): unloaded val<.=17481ecf 35.4MiB>
2021/07/08 17:42:59 scheduler task 1038d1a1 (flow bef79a94): unloaded val<.=1c22776b 35.4MiB>
2021/07/08 17:42:59 scheduler task 1038d1a1 (flow bef79a94): unloaded list<val<.=012a3c12 35.8MiB> 35.8MiB>
2021/07/08 17:42:59 scheduler task 1038d1a1 (flow bef79a94): unloading (try 0): successful, next state: complete
2021/07/08 17:42:59  <-  n100.r10.s100.Main.out_file bef79a94 ok     exec 4m53s 35.8MiB
2021/07/08 17:42:59 n100.r10.s100.Main.out_file bef79a94 n100/r10/n100.r10.s100.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1ef23bc55451144ed860c322e6960b468464c111742dac40cca4c70e61a5f315
	sha256:bef79a946581e53918e39aa12dfdd29aefc33f3cd3b416d814e97bdf5e1e964a
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1038d1a111a698bfce53c7ddd3d30e7a531ab925b2af7e2430f838f4262984fc
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s100_output"
	    wget -O "n100.r10.s100_output/n100.r10.s100.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s100_output/n100.r10.s100.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s100_output/n100.r10.s100.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s100_output/n100.r10.s100.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s100_output/n100.r10.s100.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s100_output/n100.r10.s100.reference.fas" "n100.r10.s100_output/n100.r10.s100.fq1.fastq" "n100.r10.s100_output/n100.r10.s100.fq2.fastq" | samtools view -bS - > "n100.r10.s100_output/n100.r10.s100.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s100_output/n100.r10.s100.untrimmed.sorted.bam" "n100.r10.s100_output/n100.r10.s100.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s100_output/n100.r10.s100.untrimmed.sorted.bam" -b "n100.r10.s100_output/n100.r10.s100.primers.bed" -p "n100.r10.s100_output/n100.r10.s100.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s100_output/n100.r10.s100.trimmed.sorted.bam" "n100.r10.s100_output/n100.r10.s100.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s100_output/n100.r10.s100.reference.fas" "n100.r10.s100_output/n100.r10.s100.trimmed.sorted.bam" > "n100.r10.s100_output/n100.r10.s100.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s100_output/n100.r10.s100.reference.fas" --call-indels "n100.r10.s100_output/n100.r10.s100.trimmed.sorted.bam" > "n100.r10.s100_output/n100.r10.s100.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s100_output/n100.r10.s100.trimmed.sorted.bam" > "n100.r10.s100_output/n100.r10.s100.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s100_output/n100.r10.s100.depth.txt" "n100.r10.s100_output/n100.r10.s100.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s100_output/n100.r10.s100.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s100_output/n100.r10.s100.reference.fas" | bcftools consensus -m "n100.r10.s100_output/n100.r10.s100.low_depth.tsv" tmp.vcf.gz > "n100.r10.s100_output/n100.r10.s100.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s100_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:012a3c1250955666129024fe96f649e5cc905bd1bf273e5e1ff2117d50cd6d51 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=22.2MiB max=127.0MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 17:42:59 scheduler task f7bdc04d (flow df4e88e0): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s100.tar.gz resources {}
2021/07/08 17:42:59  ->  n100.r10.s100.Main.cp_out_file df4e88e0 exec extern s3://niema-test/n100/r10/n100.r10.s100.tar.gz 35.8MiB
2021/07/08 17:42:59 scheduler task c6408350 (flow 227a28ae): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:59 scheduler task 54c398c1 (flow 43de8083): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:59 scheduler task c6408350 (flow 227a28ae): promoting objects (try 0): started
2021/07/08 17:42:59 scheduler task 61d86a19 (flow ee1e5c5f): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:59 scheduler task 61d86a19 (flow ee1e5c5f): transferring output (try 0): started
2021/07/08 17:42:59 scheduler task 54c398c1 (flow 43de8083): retrieving result (try 0): started
2021/07/08 17:42:59 scheduler task c6408350 (flow 227a28ae): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:59 scheduler task c6408350 (flow 227a28ae): retrieving diagnostic output (try 0): started
2021/07/08 17:42:59 scheduler task 54c398c1 (flow 43de8083): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:59 scheduler task 54c398c1 (flow 43de8083): transferring output (try 0): started
2021/07/08 17:42:59 scheduler task 51fe96bf (flow 1f86a397): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:59 scheduler task 51fe96bf (flow 1f86a397): unloading (try 0): started
2021/07/08 17:42:59 scheduler task 51fe96bf (flow 1f86a397): unloading list<val<.=b69aab20 35.7MiB> 35.7MiB>
2021/07/08 17:42:59 scheduler task 51fe96bf (flow 1f86a397): unloading val<.=76f38d66 35.4MiB>
2021/07/08 17:42:59 scheduler task 51fe96bf (flow 1f86a397): unloading val<.=df17a5f4 35.4MiB>
2021/07/08 17:42:59 scheduler task c6408350 (flow 227a28ae): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:59 scheduler task 09f2e358 (flow 0ff3568a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:a9ba8984a6e62755736b59de0deb74c1f6affd7bbe24f1cc983c20c2f00dfe3d -> s3://niema-test/n100/r10/n100.r10.s013.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:42:59  <-  n100.r10.s013.Main.cp_out_file 0ff3568a ok   extern 0s 35.7MiB
2021/07/08 17:42:59 scheduler task c6408350 (flow 227a28ae): retrieving result (try 0): started
2021/07/08 17:42:59 scheduler task 5bc25bd3 (flow 8edca96d): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:59 scheduler task 5bc25bd3 (flow 8edca96d): unloading (try 0): started
2021/07/08 17:42:59 scheduler task 5bc25bd3 (flow 8edca96d): unloading list<val<.=2762c431 35.7MiB> 35.7MiB>
2021/07/08 17:42:59 scheduler task 5bc25bd3 (flow 8edca96d): unloading val<.=6279f6ec 35.4MiB>
2021/07/08 17:42:59 scheduler task 5bc25bd3 (flow 8edca96d): unloading val<.=e575e3f8 35.4MiB>
2021/07/08 17:42:59 scheduler task 51fe96bf (flow 1f86a397): unloaded list<val<.=b69aab20 35.7MiB> 35.7MiB>
2021/07/08 17:42:59 scheduler task 51fe96bf (flow 1f86a397): unloaded val<.=df17a5f4 35.4MiB>
2021/07/08 17:42:59 scheduler task 51fe96bf (flow 1f86a397): unloaded val<.=76f38d66 35.4MiB>
2021/07/08 17:42:59 scheduler task 51fe96bf (flow 1f86a397): unloading (try 0): successful, next state: complete
2021/07/08 17:42:59  <-  n100.r10.s066.Main.out_file 1f86a397 ok     exec 4m53s 35.7MiB
2021/07/08 17:42:59 n100.r10.s066.Main.out_file 1f86a397 n100/r10/n100.r10.s066.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:931bde406f9eb7b2c44cc0ca1dcab2c4f8d7cafe85f82a8aab216993fe9a6846
	sha256:1f86a3974bdc467856e88fe824ce82b3c25ab55a32b88797852460a0bfef3bb8
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/51fe96bfde6f00d2457d68e59b14701cae16a5eb9ab1dbdf5d8002cd784734e2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s066_output"
	    wget -O "n100.r10.s066_output/n100.r10.s066.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s066_output/n100.r10.s066.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s066_output/n100.r10.s066.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s066_output/n100.r10.s066.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s066_output/n100.r10.s066.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s066_output/n100.r10.s066.reference.fas" "n100.r10.s066_output/n100.r10.s066.fq1.fastq" "n100.r10.s066_output/n100.r10.s066.fq2.fastq" | samtools view -bS - > "n100.r10.s066_output/n100.r10.s066.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s066_output/n100.r10.s066.untrimmed.sorted.bam" "n100.r10.s066_output/n100.r10.s066.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s066_output/n100.r10.s066.untrimmed.sorted.bam" -b "n100.r10.s066_output/n100.r10.s066.primers.bed" -p "n100.r10.s066_output/n100.r10.s066.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s066_output/n100.r10.s066.trimmed.sorted.bam" "n100.r10.s066_output/n100.r10.s066.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s066_output/n100.r10.s066.reference.fas" "n100.r10.s066_output/n100.r10.s066.trimmed.sorted.bam" > "n100.r10.s066_output/n100.r10.s066.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s066_output/n100.r10.s066.reference.fas" --call-indels "n100.r10.s066_output/n100.r10.s066.trimmed.sorted.bam" > "n100.r10.s066_output/n100.r10.s066.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s066_output/n100.r10.s066.trimmed.sorted.bam" > "n100.r10.s066_output/n100.r10.s066.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s066_output/n100.r10.s066.depth.txt" "n100.r10.s066_output/n100.r10.s066.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s066_output/n100.r10.s066.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s066_output/n100.r10.s066.reference.fas" | bcftools consensus -m "n100.r10.s066_output/n100.r10.s066.low_depth.tsv" tmp.vcf.gz > "n100.r10.s066_output/n100.r10.s066.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s066_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:b69aab2038b60be48e41b6c66e8bdceba37a60ddb7789320c223d6994d7b7cf5 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.0MiB max=129.4MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=414B max=1.0KiB
2021/07/08 17:42:59 scheduler task 311701ea (flow 31125123): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s066.tar.gz resources {}
2021/07/08 17:42:59  ->  n100.r10.s066.Main.cp_out_file 31125123 exec extern s3://niema-test/n100/r10/n100.r10.s066.tar.gz 35.7MiB
2021/07/08 17:42:59 scheduler task da1aa7bb (flow f919f347): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:59 scheduler task f18684ae (flow 8fab09ce): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:59 scheduler task da1aa7bb (flow f919f347): unloading (try 0): started
2021/07/08 17:42:59 scheduler task da1aa7bb (flow f919f347): unloading list<val<.=e7c649eb 35.8MiB> 35.8MiB>
2021/07/08 17:42:59 scheduler task da1aa7bb (flow f919f347): unloading val<.=5e0d560f 35.4MiB>
2021/07/08 17:42:59 scheduler task da1aa7bb (flow f919f347): unloading val<.=8c2278d1 35.4MiB>
2021/07/08 17:42:59 scheduler task f18684ae (flow 8fab09ce): unloading (try 0): started
2021/07/08 17:42:59 scheduler task f18684ae (flow 8fab09ce): unloading list<val<.=972461fa 35.7MiB> 35.7MiB>
2021/07/08 17:42:59 scheduler task f18684ae (flow 8fab09ce): unloading val<.=3bcdf3b8 35.4MiB>
2021/07/08 17:42:59 scheduler task f18684ae (flow 8fab09ce): unloading val<.=6a1a839c 35.4MiB>
2021/07/08 17:42:59 scheduler task c6408350 (flow 227a28ae): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:59 scheduler task c6408350 (flow 227a28ae): transferring output (try 0): started
2021/07/08 17:42:59 scheduler task 5bc25bd3 (flow 8edca96d): unloaded list<val<.=2762c431 35.7MiB> 35.7MiB>
2021/07/08 17:42:59 scheduler task 5bc25bd3 (flow 8edca96d): unloaded val<.=6279f6ec 35.4MiB>
2021/07/08 17:42:59 scheduler task 5bc25bd3 (flow 8edca96d): unloaded val<.=e575e3f8 35.4MiB>
2021/07/08 17:42:59 scheduler task 5bc25bd3 (flow 8edca96d): unloading (try 0): successful, next state: complete
2021/07/08 17:42:59 scheduler task 7ddd1093 (flow a692e162): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:59  <-  n100.r10.s081.Main.out_file 8edca96d ok     exec 4m58s 35.7MiB
2021/07/08 17:42:59 n100.r10.s081.Main.out_file 8edca96d n100/r10/n100.r10.s081.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fdd40d5764dbc11fa3c7fc55634b23bfdcb7a35aa4a59284bc548aedb2860b01
	sha256:8edca96d1655620a59b362f3160e94265c44934f9123f7b4e6bec748b8518ce5
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5bc25bd383489a5063ad39329dba7d5f2d5798dcf8bc1b54f2a8a3fb646b469b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s081_output"
	    wget -O "n100.r10.s081_output/n100.r10.s081.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s081_output/n100.r10.s081.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s081_output/n100.r10.s081.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s081_output/n100.r10.s081.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s081_output/n100.r10.s081.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s081_output/n100.r10.s081.reference.fas" "n100.r10.s081_output/n100.r10.s081.fq1.fastq" "n100.r10.s081_output/n100.r10.s081.fq2.fastq" | samtools view -bS - > "n100.r10.s081_output/n100.r10.s081.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s081_output/n100.r10.s081.untrimmed.sorted.bam" "n100.r10.s081_output/n100.r10.s081.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s081_output/n100.r10.s081.untrimmed.sorted.bam" -b "n100.r10.s081_output/n100.r10.s081.primers.bed" -p "n100.r10.s081_output/n100.r10.s081.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s081_output/n100.r10.s081.trimmed.sorted.bam" "n100.r10.s081_output/n100.r10.s081.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s081_output/n100.r10.s081.reference.fas" "n100.r10.s081_output/n100.r10.s081.trimmed.sorted.bam" > "n100.r10.s081_output/n100.r10.s081.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s081_output/n100.r10.s081.reference.fas" --call-indels "n100.r10.s081_output/n100.r10.s081.trimmed.sorted.bam" > "n100.r10.s081_output/n100.r10.s081.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s081_output/n100.r10.s081.trimmed.sorted.bam" > "n100.r10.s081_output/n100.r10.s081.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s081_output/n100.r10.s081.depth.txt" "n100.r10.s081_output/n100.r10.s081.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s081_output/n100.r10.s081.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s081_output/n100.r10.s081.reference.fas" | bcftools consensus -m "n100.r10.s081_output/n100.r10.s081.low_depth.tsv" tmp.vcf.gz > "n100.r10.s081_output/n100.r10.s081.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s081_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:2762c431cb3c9b6157e225f8690255f53e16277b2c4cf98658e03c00a550f67f 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.8MiB max=128.2MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=630B max=2.1KiB
2021/07/08 17:42:59 scheduler task e45aa6c9 (flow 7c8db33a): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s081.tar.gz resources {}
2021/07/08 17:42:59  ->  n100.r10.s081.Main.cp_out_file 7c8db33a exec extern s3://niema-test/n100/r10/n100.r10.s081.tar.gz 35.7MiB
2021/07/08 17:42:59 scheduler task 7ddd1093 (flow a692e162): promoting objects (try 0): started
2021/07/08 17:42:59 scheduler task da1aa7bb (flow f919f347): unloaded val<.=5e0d560f 35.4MiB>
2021/07/08 17:42:59 scheduler task da1aa7bb (flow f919f347): unloaded list<val<.=e7c649eb 35.8MiB> 35.8MiB>
2021/07/08 17:42:59 scheduler task da1aa7bb (flow f919f347): unloaded val<.=8c2278d1 35.4MiB>
2021/07/08 17:42:59 scheduler task da1aa7bb (flow f919f347): unloading (try 0): successful, next state: complete
2021/07/08 17:42:59 scheduler task f18684ae (flow 8fab09ce): unloaded list<val<.=972461fa 35.7MiB> 35.7MiB>
2021/07/08 17:42:59 scheduler task f18684ae (flow 8fab09ce): unloaded val<.=3bcdf3b8 35.4MiB>
2021/07/08 17:42:59 scheduler task f18684ae (flow 8fab09ce): unloaded val<.=6a1a839c 35.4MiB>
2021/07/08 17:42:59 scheduler task f18684ae (flow 8fab09ce): unloading (try 0): successful, next state: complete
2021/07/08 17:42:59  <-  n100.r10.s068.Main.out_file f919f347 ok     exec 4m46s 35.8MiB
2021/07/08 17:42:59 n100.r10.s068.Main.out_file f919f347 n100/r10/n100.r10.s068.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:46a26bb0b8d3422710abbcf25ae38c0940642fc57cb000773e7a2b1de97821ff
	sha256:f919f347e551eb90e6a459eccd3dfb476bf442b9476eafd079293a0d2f195093
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/da1aa7bbf4ccd406000415e8549aaf94cb0eaf97d46f4401904c5ce4f548d2b7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s068_output"
	    wget -O "n100.r10.s068_output/n100.r10.s068.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s068_output/n100.r10.s068.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s068_output/n100.r10.s068.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s068_output/n100.r10.s068.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s068_output/n100.r10.s068.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s068_output/n100.r10.s068.reference.fas" "n100.r10.s068_output/n100.r10.s068.fq1.fastq" "n100.r10.s068_output/n100.r10.s068.fq2.fastq" | samtools view -bS - > "n100.r10.s068_output/n100.r10.s068.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s068_output/n100.r10.s068.untrimmed.sorted.bam" "n100.r10.s068_output/n100.r10.s068.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s068_output/n100.r10.s068.untrimmed.sorted.bam" -b "n100.r10.s068_output/n100.r10.s068.primers.bed" -p "n100.r10.s068_output/n100.r10.s068.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s068_output/n100.r10.s068.trimmed.sorted.bam" "n100.r10.s068_output/n100.r10.s068.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s068_output/n100.r10.s068.reference.fas" "n100.r10.s068_output/n100.r10.s068.trimmed.sorted.bam" > "n100.r10.s068_output/n100.r10.s068.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s068_output/n100.r10.s068.reference.fas" --call-indels "n100.r10.s068_output/n100.r10.s068.trimmed.sorted.bam" > "n100.r10.s068_output/n100.r10.s068.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s068_output/n100.r10.s068.trimmed.sorted.bam" > "n100.r10.s068_output/n100.r10.s068.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s068_output/n100.r10.s068.depth.txt" "n100.r10.s068_output/n100.r10.s068.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s068_output/n100.r10.s068.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s068_output/n100.r10.s068.reference.fas" | bcftools consensus -m "n100.r10.s068_output/n100.r10.s068.low_depth.tsv" tmp.vcf.gz > "n100.r10.s068_output/n100.r10.s068.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s068_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:e7c649eb09be464fa95564c978add89e1bab087518788f8e12467d00b772ca06 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.2MiB max=125.5MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 17:42:59 scheduler task ff66df67 (flow a45ba4c3): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s068.tar.gz resources {}
2021/07/08 17:42:59  ->  n100.r10.s068.Main.cp_out_file a45ba4c3 exec extern s3://niema-test/n100/r10/n100.r10.s068.tar.gz 35.8MiB
2021/07/08 17:42:59  <-  n100.r10.s015.Main.out_file 8fab09ce ok     exec 4m46s 35.7MiB
2021/07/08 17:42:59 n100.r10.s015.Main.out_file 8fab09ce n100/r10/n100.r10.s015.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fb8abc4c32205c6b938ff47319342d05e99eec5881a2f1f60f37991a4253d705
	sha256:8fab09cee1fa8e996d9f5c50002558cbf9283f7c3080a208d1b657603f213ad2
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f18684ae39a37402e9d5ccfa564edeba19805a93407d609baabe9d0de8962fe1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s015_output"
	    wget -O "n100.r10.s015_output/n100.r10.s015.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s015_output/n100.r10.s015.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s015_output/n100.r10.s015.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s015_output/n100.r10.s015.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s015_output/n100.r10.s015.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s015_output/n100.r10.s015.reference.fas" "n100.r10.s015_output/n100.r10.s015.fq1.fastq" "n100.r10.s015_output/n100.r10.s015.fq2.fastq" | samtools view -bS - > "n100.r10.s015_output/n100.r10.s015.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s015_output/n100.r10.s015.untrimmed.sorted.bam" "n100.r10.s015_output/n100.r10.s015.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s015_output/n100.r10.s015.untrimmed.sorted.bam" -b "n100.r10.s015_output/n100.r10.s015.primers.bed" -p "n100.r10.s015_output/n100.r10.s015.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s015_output/n100.r10.s015.trimmed.sorted.bam" "n100.r10.s015_output/n100.r10.s015.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s015_output/n100.r10.s015.reference.fas" "n100.r10.s015_output/n100.r10.s015.trimmed.sorted.bam" > "n100.r10.s015_output/n100.r10.s015.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s015_output/n100.r10.s015.reference.fas" --call-indels "n100.r10.s015_output/n100.r10.s015.trimmed.sorted.bam" > "n100.r10.s015_output/n100.r10.s015.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s015_output/n100.r10.s015.trimmed.sorted.bam" > "n100.r10.s015_output/n100.r10.s015.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s015_output/n100.r10.s015.depth.txt" "n100.r10.s015_output/n100.r10.s015.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s015_output/n100.r10.s015.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s015_output/n100.r10.s015.reference.fas" | bcftools consensus -m "n100.r10.s015_output/n100.r10.s015.low_depth.tsv" tmp.vcf.gz > "n100.r10.s015_output/n100.r10.s015.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s015_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:972461fa97c2b46648e9aef49d1a2d78756c45cb09989d377475ba30a845577c 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.2MiB max=127.9MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 17:42:59 scheduler task 85e0d6be (flow 4e25c294): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s015.tar.gz resources {}
2021/07/08 17:42:59  ->  n100.r10.s015.Main.cp_out_file 4e25c294 exec extern s3://niema-test/n100/r10/n100.r10.s015.tar.gz 35.7MiB
2021/07/08 17:42:59 scheduler task 7ddd1093 (flow a692e162): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:59 scheduler task 7ddd1093 (flow a692e162): retrieving diagnostic output (try 0): started
2021/07/08 17:42:59 scheduler task 93994f7a (flow 29c9bbe9): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:105bc5a6c91877a802376c051b809b20480f30b2cd5abc1c56507285686719ba -> s3://niema-test/n100/r10/n100.r10.s041.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:42:59  <-  n100.r10.s041.Main.cp_out_file 29c9bbe9 ok   extern 0s 35.7MiB
2021/07/08 17:42:59 scheduler task 7ddd1093 (flow a692e162): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:59 scheduler task 7ddd1093 (flow a692e162): retrieving result (try 0): started
2021/07/08 17:42:59 scheduler task 61d86a19 (flow ee1e5c5f): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:59 scheduler task 61d86a19 (flow ee1e5c5f): unloading (try 0): started
2021/07/08 17:42:59 scheduler task 61d86a19 (flow ee1e5c5f): unloading list<val<.=8ecf83af 35.8MiB> 35.8MiB>
2021/07/08 17:42:59 scheduler task 61d86a19 (flow ee1e5c5f): unloading val<.=d722ebb7 35.4MiB>
2021/07/08 17:42:59 scheduler task 61d86a19 (flow ee1e5c5f): unloading val<.=80ccb185 35.4MiB>
2021/07/08 17:42:59 scheduler task 7ddd1093 (flow a692e162): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:59 scheduler task 847deec3 (flow 54b764b0): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:59 scheduler task 7ddd1093 (flow a692e162): transferring output (try 0): started
2021/07/08 17:42:59 scheduler task 847deec3 (flow 54b764b0): promoting objects (try 0): started
2021/07/08 17:42:59 scheduler task 61d86a19 (flow ee1e5c5f): unloaded val<.=d722ebb7 35.4MiB>
2021/07/08 17:42:59 scheduler task 61d86a19 (flow ee1e5c5f): unloaded list<val<.=8ecf83af 35.8MiB> 35.8MiB>
2021/07/08 17:42:59 scheduler task 61d86a19 (flow ee1e5c5f): unloaded val<.=80ccb185 35.4MiB>
2021/07/08 17:42:59 scheduler task 61d86a19 (flow ee1e5c5f): unloading (try 0): successful, next state: complete
2021/07/08 17:42:59  <-  n100.r10.s046.Main.out_file ee1e5c5f ok     exec 4m54s 35.8MiB
2021/07/08 17:42:59 n100.r10.s046.Main.out_file ee1e5c5f n100/r10/n100.r10.s046.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:103a532fbd7a7efca8d8920ab9f33bc53ec3c42ccee4eab535b7be0ae3f23b66
	sha256:ee1e5c5ff2cd20c3f666eaa5b9a6b58734220ade86fe9e719ff9632df09a890e
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/61d86a198bea4f0448c31a3a1bf415f0d5f7bbd249e2fff6af5a5b6f80123333
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s046_output"
	    wget -O "n100.r10.s046_output/n100.r10.s046.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s046_output/n100.r10.s046.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s046_output/n100.r10.s046.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s046_output/n100.r10.s046.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s046_output/n100.r10.s046.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s046_output/n100.r10.s046.reference.fas" "n100.r10.s046_output/n100.r10.s046.fq1.fastq" "n100.r10.s046_output/n100.r10.s046.fq2.fastq" | samtools view -bS - > "n100.r10.s046_output/n100.r10.s046.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s046_output/n100.r10.s046.untrimmed.sorted.bam" "n100.r10.s046_output/n100.r10.s046.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s046_output/n100.r10.s046.untrimmed.sorted.bam" -b "n100.r10.s046_output/n100.r10.s046.primers.bed" -p "n100.r10.s046_output/n100.r10.s046.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s046_output/n100.r10.s046.trimmed.sorted.bam" "n100.r10.s046_output/n100.r10.s046.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s046_output/n100.r10.s046.reference.fas" "n100.r10.s046_output/n100.r10.s046.trimmed.sorted.bam" > "n100.r10.s046_output/n100.r10.s046.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s046_output/n100.r10.s046.reference.fas" --call-indels "n100.r10.s046_output/n100.r10.s046.trimmed.sorted.bam" > "n100.r10.s046_output/n100.r10.s046.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s046_output/n100.r10.s046.trimmed.sorted.bam" > "n100.r10.s046_output/n100.r10.s046.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s046_output/n100.r10.s046.depth.txt" "n100.r10.s046_output/n100.r10.s046.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s046_output/n100.r10.s046.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s046_output/n100.r10.s046.reference.fas" | bcftools consensus -m "n100.r10.s046_output/n100.r10.s046.low_depth.tsv" tmp.vcf.gz > "n100.r10.s046_output/n100.r10.s046.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s046_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:8ecf83afddd80e096e84f9af5e7f7b836faf8f03d30a4d25cc1c1b3fbd6df78b 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.2MiB max=128.6MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=415B max=1.0KiB
2021/07/08 17:42:59 scheduler task c68eaf11 (flow 0dd37147): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s046.tar.gz resources {}
2021/07/08 17:42:59  ->  n100.r10.s046.Main.cp_out_file 0dd37147 exec extern s3://niema-test/n100/r10/n100.r10.s046.tar.gz 35.8MiB
2021/07/08 17:42:59 scheduler task 59ffa4ed (flow 9e1cfe0c): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:edc5b041d0390efa0831c05ee7bb8d9190b4d2ae710fe8979b20551ddde5bc6f -> s3://niema-test/n100/r10/n100.r10.s056.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:42:59  <-  n100.r10.s056.Main.cp_out_file 9e1cfe0c ok   extern 0s 35.7MiB
2021/07/08 17:42:59 scheduler task 54c398c1 (flow 43de8083): transferring output (try 0): successful, next state: unloading
2021/07/08 17:42:59 scheduler task 54c398c1 (flow 43de8083): unloading (try 0): started
2021/07/08 17:42:59 scheduler task 54c398c1 (flow 43de8083): unloading list<val<.=1f4de999 35.7MiB> 35.7MiB>
2021/07/08 17:42:59 scheduler task 54c398c1 (flow 43de8083): unloading val<.=aa435c1d 35.4MiB>
2021/07/08 17:42:59 scheduler task 54c398c1 (flow 43de8083): unloading val<.=f5c5e214 35.4MiB>
2021/07/08 17:42:59 scheduler task 847deec3 (flow 54b764b0): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:59 scheduler task 847deec3 (flow 54b764b0): retrieving diagnostic output (try 0): started
2021/07/08 17:42:59 scheduler task b498cd4e (flow fe03b18e): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:42:59 scheduler task b498cd4e (flow fe03b18e): promoting objects (try 0): started
2021/07/08 17:42:59 scheduler task 54c398c1 (flow 43de8083): unloaded list<val<.=1f4de999 35.7MiB> 35.7MiB>
2021/07/08 17:42:59 scheduler task 54c398c1 (flow 43de8083): unloaded val<.=aa435c1d 35.4MiB>
2021/07/08 17:42:59 scheduler task 54c398c1 (flow 43de8083): unloaded val<.=f5c5e214 35.4MiB>
2021/07/08 17:42:59 scheduler task 54c398c1 (flow 43de8083): unloading (try 0): successful, next state: complete
2021/07/08 17:42:59  <-  n100.r10.s080.Main.out_file 43de8083 ok     exec 4m54s 35.7MiB
2021/07/08 17:42:59 n100.r10.s080.Main.out_file 43de8083 n100/r10/n100.r10.s080.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c1f900a644ce16aa3eaa380821a4676848535bda180821b4475108a1d4b8849a
	sha256:43de8083e3b36bde02cc7ce98c86e67f2d09f85b7ad4837c68f03ee3ff577a23
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/54c398c177a181cb47d945fc43333c58c950400ba91091d996dbc5244a9d137b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s080_output"
	    wget -O "n100.r10.s080_output/n100.r10.s080.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s080_output/n100.r10.s080.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s080_output/n100.r10.s080.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s080_output/n100.r10.s080.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s080_output/n100.r10.s080.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s080_output/n100.r10.s080.reference.fas" "n100.r10.s080_output/n100.r10.s080.fq1.fastq" "n100.r10.s080_output/n100.r10.s080.fq2.fastq" | samtools view -bS - > "n100.r10.s080_output/n100.r10.s080.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s080_output/n100.r10.s080.untrimmed.sorted.bam" "n100.r10.s080_output/n100.r10.s080.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s080_output/n100.r10.s080.untrimmed.sorted.bam" -b "n100.r10.s080_output/n100.r10.s080.primers.bed" -p "n100.r10.s080_output/n100.r10.s080.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s080_output/n100.r10.s080.trimmed.sorted.bam" "n100.r10.s080_output/n100.r10.s080.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s080_output/n100.r10.s080.reference.fas" "n100.r10.s080_output/n100.r10.s080.trimmed.sorted.bam" > "n100.r10.s080_output/n100.r10.s080.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s080_output/n100.r10.s080.reference.fas" --call-indels "n100.r10.s080_output/n100.r10.s080.trimmed.sorted.bam" > "n100.r10.s080_output/n100.r10.s080.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s080_output/n100.r10.s080.trimmed.sorted.bam" > "n100.r10.s080_output/n100.r10.s080.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s080_output/n100.r10.s080.depth.txt" "n100.r10.s080_output/n100.r10.s080.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s080_output/n100.r10.s080.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s080_output/n100.r10.s080.reference.fas" | bcftools consensus -m "n100.r10.s080_output/n100.r10.s080.low_depth.tsv" tmp.vcf.gz > "n100.r10.s080_output/n100.r10.s080.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s080_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:1f4de99949aeab2998cc276a76ba72ab1d2c2f6c800b76aac76c6375391ae0b9 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=22.0MiB max=128.5MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=627B max=2.0KiB
2021/07/08 17:42:59 scheduler task 847deec3 (flow 54b764b0): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:59 scheduler task 4a11b1b8 (flow a4b475c2): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s080.tar.gz resources {}
2021/07/08 17:42:59  ->  n100.r10.s080.Main.cp_out_file a4b475c2 exec extern s3://niema-test/n100/r10/n100.r10.s080.tar.gz 35.7MiB
2021/07/08 17:42:59 scheduler task 847deec3 (flow 54b764b0): retrieving result (try 0): started
2021/07/08 17:42:59 scheduler task b498cd4e (flow fe03b18e): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:42:59 scheduler task b498cd4e (flow fe03b18e): retrieving diagnostic output (try 0): started
2021/07/08 17:42:59 scheduler task 847deec3 (flow 54b764b0): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:42:59 scheduler task 847deec3 (flow 54b764b0): transferring output (try 0): started
2021/07/08 17:42:59 scheduler task b498cd4e (flow fe03b18e): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:42:59 scheduler task b498cd4e (flow fe03b18e): retrieving result (try 0): started
2021/07/08 17:42:59 scheduler task 3a3fa8f6 (flow a2440d15): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:b90934181b64e756b5c2bfa6a42ddf6d5fbabe76aa71b228980f39f5c46c101a -> s3://niema-test/n100/r10/n100.r10.s089.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:42:59  <-  n100.r10.s089.Main.cp_out_file a2440d15 ok   extern 0s 35.7MiB
2021/07/08 17:43:00 scheduler task f7bdc04d (flow df4e88e0): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:012a3c1250955666129024fe96f649e5cc905bd1bf273e5e1ff2117d50cd6d51 -> s3://niema-test/n100/r10/n100.r10.s100.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:43:00  <-  n100.r10.s100.Main.cp_out_file df4e88e0 ok   extern 0s 35.8MiB
2021/07/08 17:43:00 scheduler task 41e319db (flow 0f0a0edb): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:43:00 scheduler task 41e319db (flow 0f0a0edb): promoting objects (try 0): started
2021/07/08 17:43:00 scheduler task c6408350 (flow 227a28ae): transferring output (try 0): successful, next state: unloading
2021/07/08 17:43:00 scheduler task 311701ea (flow 31125123): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:b69aab2038b60be48e41b6c66e8bdceba37a60ddb7789320c223d6994d7b7cf5 -> s3://niema-test/n100/r10/n100.r10.s066.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:43:00  <-  n100.r10.s066.Main.cp_out_file 31125123 ok   extern 0s 35.7MiB
2021/07/08 17:43:00 scheduler task c6408350 (flow 227a28ae): unloading (try 0): started
2021/07/08 17:43:00 scheduler task c6408350 (flow 227a28ae): unloading list<val<.=491b4872 35.7MiB> 35.7MiB>
2021/07/08 17:43:00 scheduler task c6408350 (flow 227a28ae): unloading val<.=cadb056b 35.4MiB>
2021/07/08 17:43:00 scheduler task c6408350 (flow 227a28ae): unloading val<.=2131137a 35.4MiB>
2021/07/08 17:43:00 scheduler task b498cd4e (flow fe03b18e): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:43:00 scheduler task b498cd4e (flow fe03b18e): transferring output (try 0): started
2021/07/08 17:43:00 scheduler task 44a25b37 (flow 39b5a1ee): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:43:00 scheduler task 41e319db (flow 0f0a0edb): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:43:00 scheduler task c6408350 (flow 227a28ae): unloaded val<.=2131137a 35.4MiB>
2021/07/08 17:43:00 scheduler task c6408350 (flow 227a28ae): unloaded list<val<.=491b4872 35.7MiB> 35.7MiB>
2021/07/08 17:43:00 scheduler task c6408350 (flow 227a28ae): unloaded val<.=cadb056b 35.4MiB>
2021/07/08 17:43:00 scheduler task c6408350 (flow 227a28ae): unloading (try 0): successful, next state: complete
2021/07/08 17:43:00 scheduler task 44a25b37 (flow 39b5a1ee): promoting objects (try 0): started
2021/07/08 17:43:00 scheduler task 41e319db (flow 0f0a0edb): retrieving diagnostic output (try 0): started
2021/07/08 17:43:00  <-  n100.r10.s039.Main.out_file 227a28ae ok     exec 4m54s 35.7MiB
2021/07/08 17:43:00 n100.r10.s039.Main.out_file 227a28ae n100/r10/n100.r10.s039.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a3d71afed52fb1e6cbfa1c35a921d40545b3f972a1b92fbb86690fb25ceb493b
	sha256:227a28aec4157109e449a7d3b3ee020ca35607f17846f3b432766b976b41d0de
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c6408350084140c2808bc47fde267bb5aee743f71a882e550d2f45808e1136c8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s039_output"
	    wget -O "n100.r10.s039_output/n100.r10.s039.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s039_output/n100.r10.s039.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s039_output/n100.r10.s039.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s039_output/n100.r10.s039.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s039_output/n100.r10.s039.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s039_output/n100.r10.s039.reference.fas" "n100.r10.s039_output/n100.r10.s039.fq1.fastq" "n100.r10.s039_output/n100.r10.s039.fq2.fastq" | samtools view -bS - > "n100.r10.s039_output/n100.r10.s039.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s039_output/n100.r10.s039.untrimmed.sorted.bam" "n100.r10.s039_output/n100.r10.s039.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s039_output/n100.r10.s039.untrimmed.sorted.bam" -b "n100.r10.s039_output/n100.r10.s039.primers.bed" -p "n100.r10.s039_output/n100.r10.s039.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s039_output/n100.r10.s039.trimmed.sorted.bam" "n100.r10.s039_output/n100.r10.s039.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s039_output/n100.r10.s039.reference.fas" "n100.r10.s039_output/n100.r10.s039.trimmed.sorted.bam" > "n100.r10.s039_output/n100.r10.s039.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s039_output/n100.r10.s039.reference.fas" --call-indels "n100.r10.s039_output/n100.r10.s039.trimmed.sorted.bam" > "n100.r10.s039_output/n100.r10.s039.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s039_output/n100.r10.s039.trimmed.sorted.bam" > "n100.r10.s039_output/n100.r10.s039.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s039_output/n100.r10.s039.depth.txt" "n100.r10.s039_output/n100.r10.s039.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s039_output/n100.r10.s039.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s039_output/n100.r10.s039.reference.fas" | bcftools consensus -m "n100.r10.s039_output/n100.r10.s039.low_depth.tsv" tmp.vcf.gz > "n100.r10.s039_output/n100.r10.s039.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s039_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:491b48724a74d52736621c405ab1a580ee606970a4ae658ad0d6fc74434bcf5f 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.9MiB max=131.2MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 17:43:00 scheduler task 3736037d (flow 99152996): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s039.tar.gz resources {}
2021/07/08 17:43:00  ->  n100.r10.s039.Main.cp_out_file 99152996 exec extern s3://niema-test/n100/r10/n100.r10.s039.tar.gz 35.7MiB
2021/07/08 17:43:00 scheduler task ff66df67 (flow a45ba4c3): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:e7c649eb09be464fa95564c978add89e1bab087518788f8e12467d00b772ca06 -> s3://niema-test/n100/r10/n100.r10.s068.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:43:00  <-  n100.r10.s068.Main.cp_out_file a45ba4c3 ok   extern 0s 35.8MiB
2021/07/08 17:43:00 scheduler task 7ddd1093 (flow a692e162): transferring output (try 0): successful, next state: unloading
2021/07/08 17:43:00 scheduler task 7ddd1093 (flow a692e162): unloading (try 0): started
2021/07/08 17:43:00 scheduler task 7ddd1093 (flow a692e162): unloading list<val<.=367896e3 35.8MiB> 35.8MiB>
2021/07/08 17:43:00 scheduler task 7ddd1093 (flow a692e162): unloading val<.=e0642836 35.4MiB>
2021/07/08 17:43:00 scheduler task 7ddd1093 (flow a692e162): unloading val<.=b09a7d5b 35.4MiB>
2021/07/08 17:43:00 scheduler task 44a25b37 (flow 39b5a1ee): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:43:00 scheduler task 44a25b37 (flow 39b5a1ee): retrieving diagnostic output (try 0): started
2021/07/08 17:43:00 scheduler task 41e319db (flow 0f0a0edb): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:43:00 scheduler task 41e319db (flow 0f0a0edb): retrieving result (try 0): started
2021/07/08 17:43:00 scheduler task 7ddd1093 (flow a692e162): unloaded list<val<.=367896e3 35.8MiB> 35.8MiB>
2021/07/08 17:43:00 scheduler task 7ddd1093 (flow a692e162): unloaded val<.=e0642836 35.4MiB>
2021/07/08 17:43:00 scheduler task 7ddd1093 (flow a692e162): unloaded val<.=b09a7d5b 35.4MiB>
2021/07/08 17:43:00 scheduler task 7ddd1093 (flow a692e162): unloading (try 0): successful, next state: complete
2021/07/08 17:43:00  <-  n100.r10.s073.Main.out_file a692e162 ok     exec 4m47s 35.8MiB
2021/07/08 17:43:00 n100.r10.s073.Main.out_file a692e162 n100/r10/n100.r10.s073.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:790be1e6d744f05d4dd7510c41c63e7dc0d694a23bb9bf83c02463626d13b672
	sha256:a692e162744171abdb3e24884f14806d0be03ed7a3bc30f5293afa073ec3e635
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7ddd1093212818eff9fa66e5eb9c2250b4ae41bfebec492b9a9e16cc1827f57b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s073_output"
	    wget -O "n100.r10.s073_output/n100.r10.s073.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s073_output/n100.r10.s073.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s073_output/n100.r10.s073.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s073_output/n100.r10.s073.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s073_output/n100.r10.s073.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s073_output/n100.r10.s073.reference.fas" "n100.r10.s073_output/n100.r10.s073.fq1.fastq" "n100.r10.s073_output/n100.r10.s073.fq2.fastq" | samtools view -bS - > "n100.r10.s073_output/n100.r10.s073.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s073_output/n100.r10.s073.untrimmed.sorted.bam" "n100.r10.s073_output/n100.r10.s073.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s073_output/n100.r10.s073.untrimmed.sorted.bam" -b "n100.r10.s073_output/n100.r10.s073.primers.bed" -p "n100.r10.s073_output/n100.r10.s073.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s073_output/n100.r10.s073.trimmed.sorted.bam" "n100.r10.s073_output/n100.r10.s073.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s073_output/n100.r10.s073.reference.fas" "n100.r10.s073_output/n100.r10.s073.trimmed.sorted.bam" > "n100.r10.s073_output/n100.r10.s073.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s073_output/n100.r10.s073.reference.fas" --call-indels "n100.r10.s073_output/n100.r10.s073.trimmed.sorted.bam" > "n100.r10.s073_output/n100.r10.s073.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s073_output/n100.r10.s073.trimmed.sorted.bam" > "n100.r10.s073_output/n100.r10.s073.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s073_output/n100.r10.s073.depth.txt" "n100.r10.s073_output/n100.r10.s073.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s073_output/n100.r10.s073.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s073_output/n100.r10.s073.reference.fas" | bcftools consensus -m "n100.r10.s073_output/n100.r10.s073.low_depth.tsv" tmp.vcf.gz > "n100.r10.s073_output/n100.r10.s073.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s073_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:367896e3405a7f4bb9b944064af807ed63c0940720083c30c2b1ba0624f3918e 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.2MiB max=130.2MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=627B max=2.0KiB
2021/07/08 17:43:00 scheduler task 66783656 (flow c2a205da): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s073.tar.gz resources {}
2021/07/08 17:43:00  ->  n100.r10.s073.Main.cp_out_file c2a205da exec extern s3://niema-test/n100/r10/n100.r10.s073.tar.gz 35.8MiB
2021/07/08 17:43:00 scheduler task 44a25b37 (flow 39b5a1ee): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:43:00 scheduler task 44a25b37 (flow 39b5a1ee): retrieving result (try 0): started
2021/07/08 17:43:00 scheduler task e45aa6c9 (flow 7c8db33a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:2762c431cb3c9b6157e225f8690255f53e16277b2c4cf98658e03c00a550f67f -> s3://niema-test/n100/r10/n100.r10.s081.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:43:00 scheduler task 41e319db (flow 0f0a0edb): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:43:00  <-  n100.r10.s081.Main.cp_out_file 7c8db33a ok   extern 0s 35.7MiB
2021/07/08 17:43:00 scheduler task 41e319db (flow 0f0a0edb): transferring output (try 0): started
2021/07/08 17:43:00 scheduler task 44a25b37 (flow 39b5a1ee): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:43:00 scheduler task 44a25b37 (flow 39b5a1ee): transferring output (try 0): started
2021/07/08 17:43:00 scheduler task 96ccb3b6 (flow e4994f3d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:43:00 scheduler task 96ccb3b6 (flow e4994f3d): promoting objects (try 0): started
2021/07/08 17:43:00 scheduler task 847deec3 (flow 54b764b0): transferring output (try 0): successful, next state: unloading
2021/07/08 17:43:00 scheduler task 847deec3 (flow 54b764b0): unloading (try 0): started
2021/07/08 17:43:00 scheduler task 847deec3 (flow 54b764b0): unloading list<val<.=d9080225 35.7MiB> 35.7MiB>
2021/07/08 17:43:00 scheduler task 847deec3 (flow 54b764b0): unloading val<.=8bbd482f 35.4MiB>
2021/07/08 17:43:00 scheduler task 847deec3 (flow 54b764b0): unloading val<.=a5ad1ded 35.4MiB>
2021/07/08 17:43:00 scheduler task 85e0d6be (flow 4e25c294): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:972461fa97c2b46648e9aef49d1a2d78756c45cb09989d377475ba30a845577c -> s3://niema-test/n100/r10/n100.r10.s015.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:43:00  <-  n100.r10.s015.Main.cp_out_file 4e25c294 ok   extern 0s 35.7MiB
2021/07/08 17:43:00 scheduler task 96ccb3b6 (flow e4994f3d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:43:00 scheduler task 96ccb3b6 (flow e4994f3d): retrieving diagnostic output (try 0): started
2021/07/08 17:43:00 scheduler task 847deec3 (flow 54b764b0): unloaded list<val<.=d9080225 35.7MiB> 35.7MiB>
2021/07/08 17:43:00 scheduler task 847deec3 (flow 54b764b0): unloaded val<.=8bbd482f 35.4MiB>
2021/07/08 17:43:00 scheduler task 847deec3 (flow 54b764b0): unloaded val<.=a5ad1ded 35.4MiB>
2021/07/08 17:43:00 scheduler task 847deec3 (flow 54b764b0): unloading (try 0): successful, next state: complete
2021/07/08 17:43:00  <-  n100.r10.s014.Main.out_file 54b764b0 ok     exec 4m55s 35.7MiB
2021/07/08 17:43:00 n100.r10.s014.Main.out_file 54b764b0 n100/r10/n100.r10.s014.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9055756ef52438ee91e696daaeff9972dc28bbca8eaac63c7c29147e35b957c0
	sha256:54b764b0fee2dd7b0f4b3f2c99f9c00bd8f3b551ddb5d6dc3ddf710ea3f33eac
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/847deec353e8a12c5b7070288e817145b485fce525156a69b278a8fe1dcfbf10
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s014_output"
	    wget -O "n100.r10.s014_output/n100.r10.s014.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s014_output/n100.r10.s014.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s014_output/n100.r10.s014.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s014_output/n100.r10.s014.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s014_output/n100.r10.s014.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s014_output/n100.r10.s014.reference.fas" "n100.r10.s014_output/n100.r10.s014.fq1.fastq" "n100.r10.s014_output/n100.r10.s014.fq2.fastq" | samtools view -bS - > "n100.r10.s014_output/n100.r10.s014.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s014_output/n100.r10.s014.untrimmed.sorted.bam" "n100.r10.s014_output/n100.r10.s014.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s014_output/n100.r10.s014.untrimmed.sorted.bam" -b "n100.r10.s014_output/n100.r10.s014.primers.bed" -p "n100.r10.s014_output/n100.r10.s014.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s014_output/n100.r10.s014.trimmed.sorted.bam" "n100.r10.s014_output/n100.r10.s014.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s014_output/n100.r10.s014.reference.fas" "n100.r10.s014_output/n100.r10.s014.trimmed.sorted.bam" > "n100.r10.s014_output/n100.r10.s014.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s014_output/n100.r10.s014.reference.fas" --call-indels "n100.r10.s014_output/n100.r10.s014.trimmed.sorted.bam" > "n100.r10.s014_output/n100.r10.s014.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s014_output/n100.r10.s014.trimmed.sorted.bam" > "n100.r10.s014_output/n100.r10.s014.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s014_output/n100.r10.s014.depth.txt" "n100.r10.s014_output/n100.r10.s014.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s014_output/n100.r10.s014.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s014_output/n100.r10.s014.reference.fas" | bcftools consensus -m "n100.r10.s014_output/n100.r10.s014.low_depth.tsv" tmp.vcf.gz > "n100.r10.s014_output/n100.r10.s014.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s014_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d90802250d854091e554f68f232cdbbdf7d9ca3999e6395d3969356087ee833a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.1MiB max=127.9MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=627B max=2.1KiB
2021/07/08 17:43:00 scheduler task d79a1eef (flow 6b73daf3): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s014.tar.gz resources {}
2021/07/08 17:43:00  ->  n100.r10.s014.Main.cp_out_file 6b73daf3 exec extern s3://niema-test/n100/r10/n100.r10.s014.tar.gz 35.7MiB
2021/07/08 17:43:00 scheduler task 96ccb3b6 (flow e4994f3d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:43:00 scheduler task 96ccb3b6 (flow e4994f3d): retrieving result (try 0): started
2021/07/08 17:43:00 scheduler task b498cd4e (flow fe03b18e): transferring output (try 0): successful, next state: unloading
2021/07/08 17:43:00 scheduler task 4a11b1b8 (flow a4b475c2): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:1f4de99949aeab2998cc276a76ba72ab1d2c2f6c800b76aac76c6375391ae0b9 -> s3://niema-test/n100/r10/n100.r10.s080.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:43:00  <-  n100.r10.s080.Main.cp_out_file a4b475c2 ok   extern 0s 35.7MiB
2021/07/08 17:43:00 scheduler task b498cd4e (flow fe03b18e): unloading (try 0): started
2021/07/08 17:43:00 scheduler task b498cd4e (flow fe03b18e): unloading list<val<.=29dbda1e 35.7MiB> 35.7MiB>
2021/07/08 17:43:00 scheduler task b498cd4e (flow fe03b18e): unloading val<.=8e6bd968 35.4MiB>
2021/07/08 17:43:00 scheduler task b498cd4e (flow fe03b18e): unloading val<.=a246f171 35.4MiB>
2021/07/08 17:43:00 scheduler task 96ccb3b6 (flow e4994f3d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:43:00 scheduler task 96ccb3b6 (flow e4994f3d): transferring output (try 0): started
2021/07/08 17:43:00 scheduler task b498cd4e (flow fe03b18e): unloaded list<val<.=29dbda1e 35.7MiB> 35.7MiB>
2021/07/08 17:43:00 scheduler task b498cd4e (flow fe03b18e): unloaded val<.=a246f171 35.4MiB>
2021/07/08 17:43:00 scheduler task b498cd4e (flow fe03b18e): unloaded val<.=8e6bd968 35.4MiB>
2021/07/08 17:43:00 scheduler task b498cd4e (flow fe03b18e): unloading (try 0): successful, next state: complete
2021/07/08 17:43:00  <-  n100.r10.s083.Main.out_file fe03b18e ok     exec 4m55s 35.7MiB
2021/07/08 17:43:00 n100.r10.s083.Main.out_file fe03b18e n100/r10/n100.r10.s083.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:867fa10c5c651bd8812aa6f4bdcc30a04d67abac55dc0a69d5366ca461933d1a
	sha256:fe03b18eba1c7ab5f47b9ac24c8bb2cbadbc7b89db817e2335b4defd85e8fbac
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b498cd4ed119513cfa86def1214b54965d429fb234b696214ee629ade619a6fc
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s083_output"
	    wget -O "n100.r10.s083_output/n100.r10.s083.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s083_output/n100.r10.s083.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s083_output/n100.r10.s083.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s083_output/n100.r10.s083.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s083_output/n100.r10.s083.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s083_output/n100.r10.s083.reference.fas" "n100.r10.s083_output/n100.r10.s083.fq1.fastq" "n100.r10.s083_output/n100.r10.s083.fq2.fastq" | samtools view -bS - > "n100.r10.s083_output/n100.r10.s083.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s083_output/n100.r10.s083.untrimmed.sorted.bam" "n100.r10.s083_output/n100.r10.s083.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s083_output/n100.r10.s083.untrimmed.sorted.bam" -b "n100.r10.s083_output/n100.r10.s083.primers.bed" -p "n100.r10.s083_output/n100.r10.s083.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s083_output/n100.r10.s083.trimmed.sorted.bam" "n100.r10.s083_output/n100.r10.s083.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s083_output/n100.r10.s083.reference.fas" "n100.r10.s083_output/n100.r10.s083.trimmed.sorted.bam" > "n100.r10.s083_output/n100.r10.s083.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s083_output/n100.r10.s083.reference.fas" --call-indels "n100.r10.s083_output/n100.r10.s083.trimmed.sorted.bam" > "n100.r10.s083_output/n100.r10.s083.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s083_output/n100.r10.s083.trimmed.sorted.bam" > "n100.r10.s083_output/n100.r10.s083.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s083_output/n100.r10.s083.depth.txt" "n100.r10.s083_output/n100.r10.s083.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s083_output/n100.r10.s083.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s083_output/n100.r10.s083.reference.fas" | bcftools consensus -m "n100.r10.s083_output/n100.r10.s083.low_depth.tsv" tmp.vcf.gz > "n100.r10.s083_output/n100.r10.s083.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s083_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:29dbda1e4f4ad0f3f4089372da055777d37da56fdb9109c38f743a726abc326a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.9MiB max=129.8MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=419B max=2.0KiB
2021/07/08 17:43:00 scheduler task a47d8abe (flow 2ca0847d): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s083.tar.gz resources {}
2021/07/08 17:43:00  ->  n100.r10.s083.Main.cp_out_file 2ca0847d exec extern s3://niema-test/n100/r10/n100.r10.s083.tar.gz 35.7MiB
2021/07/08 17:43:00 scheduler task 3736037d (flow 99152996): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:491b48724a74d52736621c405ab1a580ee606970a4ae658ad0d6fc74434bcf5f -> s3://niema-test/n100/r10/n100.r10.s039.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:43:00  <-  n100.r10.s039.Main.cp_out_file 99152996 ok   extern 0s 35.7MiB
2021/07/08 17:43:00 scheduler task 41e319db (flow 0f0a0edb): transferring output (try 0): successful, next state: unloading
2021/07/08 17:43:00 scheduler task 41e319db (flow 0f0a0edb): unloading (try 0): started
2021/07/08 17:43:00 scheduler task 41e319db (flow 0f0a0edb): unloading list<val<.=744a0723 35.8MiB> 35.8MiB>
2021/07/08 17:43:00 scheduler task 41e319db (flow 0f0a0edb): unloading val<.=5fa7f413 35.4MiB>
2021/07/08 17:43:00 scheduler task 41e319db (flow 0f0a0edb): unloading val<.=f433c929 35.4MiB>
2021/07/08 17:43:00 scheduler task 0df65054 (flow 91cbe899): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:43:00 scheduler task 0df65054 (flow 91cbe899): promoting objects (try 0): started
2021/07/08 17:43:00 scheduler task c68eaf11 (flow 0dd37147): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:8ecf83afddd80e096e84f9af5e7f7b836faf8f03d30a4d25cc1c1b3fbd6df78b -> s3://niema-test/n100/r10/n100.r10.s046.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:43:00  <-  n100.r10.s046.Main.cp_out_file 0dd37147 ok   extern 0s 35.8MiB
2021/07/08 17:43:00 scheduler task 41e319db (flow 0f0a0edb): unloaded list<val<.=744a0723 35.8MiB> 35.8MiB>
2021/07/08 17:43:00 scheduler task 41e319db (flow 0f0a0edb): unloaded val<.=5fa7f413 35.4MiB>
2021/07/08 17:43:00 scheduler task 41e319db (flow 0f0a0edb): unloaded val<.=f433c929 35.4MiB>
2021/07/08 17:43:00 scheduler task 41e319db (flow 0f0a0edb): unloading (try 0): successful, next state: complete
2021/07/08 17:43:00 scheduler task 0df65054 (flow 91cbe899): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:43:00  <-  n100.r10.s086.Main.out_file 0f0a0edb ok     exec 4m55s 35.8MiB
2021/07/08 17:43:00 n100.r10.s086.Main.out_file 0f0a0edb n100/r10/n100.r10.s086.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:df1f4595a9afd13b9c06ee6f701914c8f10b0f461b77cfff4f7ce61daf860262
	sha256:0f0a0edba156352a1ab3563141df6c393e0d80c0bec4d9c273cbd3aca4976b7b
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/41e319db1dfcf507f2b3d6043d127dd9c79ed9246199b951ed941bd21eb9c20a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s086_output"
	    wget -O "n100.r10.s086_output/n100.r10.s086.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s086_output/n100.r10.s086.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s086_output/n100.r10.s086.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s086_output/n100.r10.s086.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s086_output/n100.r10.s086.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s086_output/n100.r10.s086.reference.fas" "n100.r10.s086_output/n100.r10.s086.fq1.fastq" "n100.r10.s086_output/n100.r10.s086.fq2.fastq" | samtools view -bS - > "n100.r10.s086_output/n100.r10.s086.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s086_output/n100.r10.s086.untrimmed.sorted.bam" "n100.r10.s086_output/n100.r10.s086.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s086_output/n100.r10.s086.untrimmed.sorted.bam" -b "n100.r10.s086_output/n100.r10.s086.primers.bed" -p "n100.r10.s086_output/n100.r10.s086.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s086_output/n100.r10.s086.trimmed.sorted.bam" "n100.r10.s086_output/n100.r10.s086.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s086_output/n100.r10.s086.reference.fas" "n100.r10.s086_output/n100.r10.s086.trimmed.sorted.bam" > "n100.r10.s086_output/n100.r10.s086.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s086_output/n100.r10.s086.reference.fas" --call-indels "n100.r10.s086_output/n100.r10.s086.trimmed.sorted.bam" > "n100.r10.s086_output/n100.r10.s086.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s086_output/n100.r10.s086.trimmed.sorted.bam" > "n100.r10.s086_output/n100.r10.s086.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s086_output/n100.r10.s086.depth.txt" "n100.r10.s086_output/n100.r10.s086.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s086_output/n100.r10.s086.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s086_output/n100.r10.s086.reference.fas" | bcftools consensus -m "n100.r10.s086_output/n100.r10.s086.low_depth.tsv" tmp.vcf.gz > "n100.r10.s086_output/n100.r10.s086.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s086_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:744a07230619a01a262fc4877bf28e05d42cd5c46634ee7b161c64d1cf177a59 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.8MiB max=126.0MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=419B max=2.0KiB
2021/07/08 17:43:00 scheduler task b10019ca (flow 09aee2c6): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s086.tar.gz resources {}
2021/07/08 17:43:00  ->  n100.r10.s086.Main.cp_out_file 09aee2c6 exec extern s3://niema-test/n100/r10/n100.r10.s086.tar.gz 35.8MiB
2021/07/08 17:43:00 scheduler task 0df65054 (flow 91cbe899): retrieving diagnostic output (try 0): started
2021/07/08 17:43:00 scheduler task 44a25b37 (flow 39b5a1ee): transferring output (try 0): successful, next state: unloading
2021/07/08 17:43:00 scheduler task 44a25b37 (flow 39b5a1ee): unloading (try 0): started
2021/07/08 17:43:00 scheduler task 44a25b37 (flow 39b5a1ee): unloading list<val<.=24a69428 35.7MiB> 35.7MiB>
2021/07/08 17:43:00 scheduler task 44a25b37 (flow 39b5a1ee): unloading val<.=bbd9568e 35.4MiB>
2021/07/08 17:43:00 scheduler task 44a25b37 (flow 39b5a1ee): unloading val<.=fa11b88d 35.4MiB>
2021/07/08 17:43:01 scheduler task 0df65054 (flow 91cbe899): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:43:01 scheduler task 0df65054 (flow 91cbe899): retrieving result (try 0): started
2021/07/08 17:43:01 scheduler task 44a25b37 (flow 39b5a1ee): unloaded list<val<.=24a69428 35.7MiB> 35.7MiB>
2021/07/08 17:43:01 scheduler task 44a25b37 (flow 39b5a1ee): unloaded val<.=fa11b88d 35.4MiB>
2021/07/08 17:43:01 scheduler task 44a25b37 (flow 39b5a1ee): unloaded val<.=bbd9568e 35.4MiB>
2021/07/08 17:43:01 scheduler task 44a25b37 (flow 39b5a1ee): unloading (try 0): successful, next state: complete
2021/07/08 17:43:01  <-  n100.r10.s052.Main.out_file 39b5a1ee ok     exec 4m55s 35.7MiB
2021/07/08 17:43:01 n100.r10.s052.Main.out_file 39b5a1ee n100/r10/n100.r10.s052.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:38133b12ece73248c97272984f48ec6133e3d6c177de71967220a230a0c6e9f9
	sha256:39b5a1eeb5ea757c920275a929713a0d79ddc960a83392cc42c7af2c99c364af
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/44a25b374f0380685786b4a6d54463749e0d9dedfe780dc535cc16c6a626401b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s052_output"
	    wget -O "n100.r10.s052_output/n100.r10.s052.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s052_output/n100.r10.s052.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s052_output/n100.r10.s052.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s052_output/n100.r10.s052.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s052_output/n100.r10.s052.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s052_output/n100.r10.s052.reference.fas" "n100.r10.s052_output/n100.r10.s052.fq1.fastq" "n100.r10.s052_output/n100.r10.s052.fq2.fastq" | samtools view -bS - > "n100.r10.s052_output/n100.r10.s052.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s052_output/n100.r10.s052.untrimmed.sorted.bam" "n100.r10.s052_output/n100.r10.s052.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s052_output/n100.r10.s052.untrimmed.sorted.bam" -b "n100.r10.s052_output/n100.r10.s052.primers.bed" -p "n100.r10.s052_output/n100.r10.s052.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s052_output/n100.r10.s052.trimmed.sorted.bam" "n100.r10.s052_output/n100.r10.s052.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s052_output/n100.r10.s052.reference.fas" "n100.r10.s052_output/n100.r10.s052.trimmed.sorted.bam" > "n100.r10.s052_output/n100.r10.s052.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s052_output/n100.r10.s052.reference.fas" --call-indels "n100.r10.s052_output/n100.r10.s052.trimmed.sorted.bam" > "n100.r10.s052_output/n100.r10.s052.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s052_output/n100.r10.s052.trimmed.sorted.bam" > "n100.r10.s052_output/n100.r10.s052.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s052_output/n100.r10.s052.depth.txt" "n100.r10.s052_output/n100.r10.s052.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s052_output/n100.r10.s052.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s052_output/n100.r10.s052.reference.fas" | bcftools consensus -m "n100.r10.s052_output/n100.r10.s052.low_depth.tsv" tmp.vcf.gz > "n100.r10.s052_output/n100.r10.s052.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s052_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:24a69428fd6bb589a00a48e6f2c4370c1a3aa1f17e245417ba933154fbda2659 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.5MiB max=125.0MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=414B max=1.0KiB
2021/07/08 17:43:01 scheduler task 6dee4472 (flow e1fcad1a): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s052.tar.gz resources {}
2021/07/08 17:43:01  ->  n100.r10.s052.Main.cp_out_file e1fcad1a exec extern s3://niema-test/n100/r10/n100.r10.s052.tar.gz 35.7MiB
2021/07/08 17:43:01 scheduler task 0df65054 (flow 91cbe899): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:43:01 scheduler task 66783656 (flow c2a205da): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:367896e3405a7f4bb9b944064af807ed63c0940720083c30c2b1ba0624f3918e -> s3://niema-test/n100/r10/n100.r10.s073.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:43:01  <-  n100.r10.s073.Main.cp_out_file c2a205da ok   extern 0s 35.8MiB
2021/07/08 17:43:01 scheduler task 0df65054 (flow 91cbe899): transferring output (try 0): started
2021/07/08 17:43:01 scheduler task 96ccb3b6 (flow e4994f3d): transferring output (try 0): successful, next state: unloading
2021/07/08 17:43:01 scheduler task 96ccb3b6 (flow e4994f3d): unloading (try 0): started
2021/07/08 17:43:01 scheduler task 96ccb3b6 (flow e4994f3d): unloading list<val<.=f5b99067 35.7MiB> 35.7MiB>
2021/07/08 17:43:01 scheduler task 96ccb3b6 (flow e4994f3d): unloading val<.=5fbb84f3 35.4MiB>
2021/07/08 17:43:01 scheduler task 96ccb3b6 (flow e4994f3d): unloading val<.=267af535 35.4MiB>
2021/07/08 17:43:01 scheduler task d79a1eef (flow 6b73daf3): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d90802250d854091e554f68f232cdbbdf7d9ca3999e6395d3969356087ee833a -> s3://niema-test/n100/r10/n100.r10.s014.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:43:01  <-  n100.r10.s014.Main.cp_out_file 6b73daf3 ok   extern 0s 35.7MiB
2021/07/08 17:43:01 scheduler task 96ccb3b6 (flow e4994f3d): unloaded list<val<.=f5b99067 35.7MiB> 35.7MiB>
2021/07/08 17:43:01 scheduler task 96ccb3b6 (flow e4994f3d): unloaded val<.=5fbb84f3 35.4MiB>
2021/07/08 17:43:01 scheduler task 96ccb3b6 (flow e4994f3d): unloaded val<.=267af535 35.4MiB>
2021/07/08 17:43:01 scheduler task 96ccb3b6 (flow e4994f3d): unloading (try 0): successful, next state: complete
2021/07/08 17:43:01 scheduler task 49b52cb8 (flow debb172b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:43:01  <-  n100.r10.s001.Main.out_file e4994f3d ok     exec 4m48s 35.7MiB
2021/07/08 17:43:01 n100.r10.s001.Main.out_file e4994f3d n100/r10/n100.r10.s001.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:06356bb39d505be558b221fd8201e55fa5c61c0873c8ebf276df5aaf9a11eb71
	sha256:e4994f3d0f23df6b3d955aa5540a3d6196bc1c7adbf8896e43a10c903cea617b
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/96ccb3b63988da099cdb47ab75ab473db229f4a18f2e193d379b964e38aba49e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s001_output"
	    wget -O "n100.r10.s001_output/n100.r10.s001.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s001_output/n100.r10.s001.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s001_output/n100.r10.s001.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s001_output/n100.r10.s001.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s001_output/n100.r10.s001.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s001_output/n100.r10.s001.reference.fas" "n100.r10.s001_output/n100.r10.s001.fq1.fastq" "n100.r10.s001_output/n100.r10.s001.fq2.fastq" | samtools view -bS - > "n100.r10.s001_output/n100.r10.s001.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s001_output/n100.r10.s001.untrimmed.sorted.bam" "n100.r10.s001_output/n100.r10.s001.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s001_output/n100.r10.s001.untrimmed.sorted.bam" -b "n100.r10.s001_output/n100.r10.s001.primers.bed" -p "n100.r10.s001_output/n100.r10.s001.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s001_output/n100.r10.s001.trimmed.sorted.bam" "n100.r10.s001_output/n100.r10.s001.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s001_output/n100.r10.s001.reference.fas" "n100.r10.s001_output/n100.r10.s001.trimmed.sorted.bam" > "n100.r10.s001_output/n100.r10.s001.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s001_output/n100.r10.s001.reference.fas" --call-indels "n100.r10.s001_output/n100.r10.s001.trimmed.sorted.bam" > "n100.r10.s001_output/n100.r10.s001.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s001_output/n100.r10.s001.trimmed.sorted.bam" > "n100.r10.s001_output/n100.r10.s001.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s001_output/n100.r10.s001.depth.txt" "n100.r10.s001_output/n100.r10.s001.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s001_output/n100.r10.s001.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s001_output/n100.r10.s001.reference.fas" | bcftools consensus -m "n100.r10.s001_output/n100.r10.s001.low_depth.tsv" tmp.vcf.gz > "n100.r10.s001_output/n100.r10.s001.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s001_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f5b99067a2db561915fa6ac1d2d0658c380310675d4d6b90b80bd07172c1318c 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=19.8MiB max=129.7MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:43:01 scheduler task 82a0a046 (flow 5427c148): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s001.tar.gz resources {}
2021/07/08 17:43:01  ->  n100.r10.s001.Main.cp_out_file 5427c148 exec extern s3://niema-test/n100/r10/n100.r10.s001.tar.gz 35.7MiB
2021/07/08 17:43:01 scheduler task 49b52cb8 (flow debb172b): promoting objects (try 0): started
2021/07/08 17:43:01 scheduler task a47d8abe (flow 2ca0847d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:29dbda1e4f4ad0f3f4089372da055777d37da56fdb9109c38f743a726abc326a -> s3://niema-test/n100/r10/n100.r10.s083.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:43:01  <-  n100.r10.s083.Main.cp_out_file 2ca0847d ok   extern 0s 35.7MiB
2021/07/08 17:43:01 scheduler task 49b52cb8 (flow debb172b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:43:01 scheduler task 49b52cb8 (flow debb172b): retrieving diagnostic output (try 0): started
2021/07/08 17:43:01 scheduler task 49b52cb8 (flow debb172b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:43:01 scheduler task 49b52cb8 (flow debb172b): retrieving result (try 0): started
2021/07/08 17:43:01 scheduler task 0df65054 (flow 91cbe899): transferring output (try 0): successful, next state: unloading
2021/07/08 17:43:01 scheduler task 0df65054 (flow 91cbe899): unloading (try 0): started
2021/07/08 17:43:01 scheduler task 0df65054 (flow 91cbe899): unloading list<val<.=2dff5dce 35.7MiB> 35.7MiB>
2021/07/08 17:43:01 scheduler task 0df65054 (flow 91cbe899): unloading val<.=9701b9bc 35.4MiB>
2021/07/08 17:43:01 scheduler task 0df65054 (flow 91cbe899): unloading val<.=cc316222 35.4MiB>
2021/07/08 17:43:01 scheduler task 49b52cb8 (flow debb172b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:43:01 scheduler task b10019ca (flow 09aee2c6): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:744a07230619a01a262fc4877bf28e05d42cd5c46634ee7b161c64d1cf177a59 -> s3://niema-test/n100/r10/n100.r10.s086.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:43:01  <-  n100.r10.s086.Main.cp_out_file 09aee2c6 ok   extern 0s 35.8MiB
2021/07/08 17:43:01 scheduler task 0df65054 (flow 91cbe899): unloaded val<.=9701b9bc 35.4MiB>
2021/07/08 17:43:01 scheduler task 0df65054 (flow 91cbe899): unloaded list<val<.=2dff5dce 35.7MiB> 35.7MiB>
2021/07/08 17:43:01 scheduler task 0df65054 (flow 91cbe899): unloaded val<.=cc316222 35.4MiB>
2021/07/08 17:43:01 scheduler task 0df65054 (flow 91cbe899): unloading (try 0): successful, next state: complete
2021/07/08 17:43:01 scheduler task 49b52cb8 (flow debb172b): transferring output (try 0): started
2021/07/08 17:43:01  <-  n100.r10.s035.Main.out_file 91cbe899 ok     exec 4m56s 35.7MiB
2021/07/08 17:43:01 n100.r10.s035.Main.out_file 91cbe899 n100/r10/n100.r10.s035.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5ed11b2f11233fdaba419133ba2a9ef5794e687e0459c3d8b7ee19030ac2890c
	sha256:91cbe8993dda53cde0f444d9d5d4cf99cda47c9d006c4aa5fae817d3084dcc5c
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0df650545e83ef82b449c20776ca2a3c754bbac66518b389c8c463b80650de9e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s035_output"
	    wget -O "n100.r10.s035_output/n100.r10.s035.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s035_output/n100.r10.s035.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s035_output/n100.r10.s035.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s035_output/n100.r10.s035.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s035_output/n100.r10.s035.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s035_output/n100.r10.s035.reference.fas" "n100.r10.s035_output/n100.r10.s035.fq1.fastq" "n100.r10.s035_output/n100.r10.s035.fq2.fastq" | samtools view -bS - > "n100.r10.s035_output/n100.r10.s035.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s035_output/n100.r10.s035.untrimmed.sorted.bam" "n100.r10.s035_output/n100.r10.s035.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s035_output/n100.r10.s035.untrimmed.sorted.bam" -b "n100.r10.s035_output/n100.r10.s035.primers.bed" -p "n100.r10.s035_output/n100.r10.s035.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s035_output/n100.r10.s035.trimmed.sorted.bam" "n100.r10.s035_output/n100.r10.s035.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s035_output/n100.r10.s035.reference.fas" "n100.r10.s035_output/n100.r10.s035.trimmed.sorted.bam" > "n100.r10.s035_output/n100.r10.s035.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s035_output/n100.r10.s035.reference.fas" --call-indels "n100.r10.s035_output/n100.r10.s035.trimmed.sorted.bam" > "n100.r10.s035_output/n100.r10.s035.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s035_output/n100.r10.s035.trimmed.sorted.bam" > "n100.r10.s035_output/n100.r10.s035.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s035_output/n100.r10.s035.depth.txt" "n100.r10.s035_output/n100.r10.s035.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s035_output/n100.r10.s035.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s035_output/n100.r10.s035.reference.fas" | bcftools consensus -m "n100.r10.s035_output/n100.r10.s035.low_depth.tsv" tmp.vcf.gz > "n100.r10.s035_output/n100.r10.s035.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s035_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:2dff5dcedaa071d8e00f43e21cad88f5d4060c85fa21ac008c96d57e5d40d25e 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=22.2MiB max=127.3MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=420B max=2.1KiB
2021/07/08 17:43:01 scheduler task 3489071f (flow f03f745c): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s035.tar.gz resources {}
2021/07/08 17:43:01  ->  n100.r10.s035.Main.cp_out_file f03f745c exec extern s3://niema-test/n100/r10/n100.r10.s035.tar.gz 35.7MiB
2021/07/08 17:43:01 scheduler task 6dee4472 (flow e1fcad1a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:24a69428fd6bb589a00a48e6f2c4370c1a3aa1f17e245417ba933154fbda2659 -> s3://niema-test/n100/r10/n100.r10.s052.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:43:01  <-  n100.r10.s052.Main.cp_out_file e1fcad1a ok   extern 0s 35.7MiB
2021/07/08 17:43:02 scheduler task 82a0a046 (flow 5427c148): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f5b99067a2db561915fa6ac1d2d0658c380310675d4d6b90b80bd07172c1318c -> s3://niema-test/n100/r10/n100.r10.s001.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:43:02  <-  n100.r10.s001.Main.cp_out_file 5427c148 ok   extern 0s 35.7MiB
2021/07/08 17:43:02 scheduler task 49b52cb8 (flow debb172b): transferring output (try 0): successful, next state: unloading
2021/07/08 17:43:02 scheduler task 49b52cb8 (flow debb172b): unloading (try 0): started
2021/07/08 17:43:02 scheduler task 49b52cb8 (flow debb172b): unloading list<val<.=47f8152c 35.8MiB> 35.8MiB>
2021/07/08 17:43:02 scheduler task 49b52cb8 (flow debb172b): unloading val<.=4ea0627d 35.4MiB>
2021/07/08 17:43:02 scheduler task 49b52cb8 (flow debb172b): unloading val<.=55f5f296 35.4MiB>
2021/07/08 17:43:02 scheduler task 49b52cb8 (flow debb172b): unloaded list<val<.=47f8152c 35.8MiB> 35.8MiB>
2021/07/08 17:43:02 scheduler task 49b52cb8 (flow debb172b): unloaded val<.=4ea0627d 35.4MiB>
2021/07/08 17:43:02 scheduler task 49b52cb8 (flow debb172b): unloaded val<.=55f5f296 35.4MiB>
2021/07/08 17:43:02 scheduler task 49b52cb8 (flow debb172b): unloading (try 0): successful, next state: complete
2021/07/08 17:43:02  <-  n100.r10.s005.Main.out_file debb172b ok     exec 4m49s 35.8MiB
2021/07/08 17:43:02 n100.r10.s005.Main.out_file debb172b n100/r10/n100.r10.s005.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f402680ddc0a242433ddec254ef423d465d0459a6753354f35409c503ca690e7
	sha256:debb172b8339e96aa5205a9a0f3c594a3205f018dc2d62349e655a341a4e8acf
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/49b52cb83a7f71a74a195a24d74056b56c2e47006ab50acf9abcc2087570ee7a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s005_output"
	    wget -O "n100.r10.s005_output/n100.r10.s005.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s005_output/n100.r10.s005.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s005_output/n100.r10.s005.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s005_output/n100.r10.s005.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s005_output/n100.r10.s005.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s005_output/n100.r10.s005.reference.fas" "n100.r10.s005_output/n100.r10.s005.fq1.fastq" "n100.r10.s005_output/n100.r10.s005.fq2.fastq" | samtools view -bS - > "n100.r10.s005_output/n100.r10.s005.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s005_output/n100.r10.s005.untrimmed.sorted.bam" "n100.r10.s005_output/n100.r10.s005.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s005_output/n100.r10.s005.untrimmed.sorted.bam" -b "n100.r10.s005_output/n100.r10.s005.primers.bed" -p "n100.r10.s005_output/n100.r10.s005.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s005_output/n100.r10.s005.trimmed.sorted.bam" "n100.r10.s005_output/n100.r10.s005.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s005_output/n100.r10.s005.reference.fas" "n100.r10.s005_output/n100.r10.s005.trimmed.sorted.bam" > "n100.r10.s005_output/n100.r10.s005.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s005_output/n100.r10.s005.reference.fas" --call-indels "n100.r10.s005_output/n100.r10.s005.trimmed.sorted.bam" > "n100.r10.s005_output/n100.r10.s005.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s005_output/n100.r10.s005.trimmed.sorted.bam" > "n100.r10.s005_output/n100.r10.s005.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s005_output/n100.r10.s005.depth.txt" "n100.r10.s005_output/n100.r10.s005.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s005_output/n100.r10.s005.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s005_output/n100.r10.s005.reference.fas" | bcftools consensus -m "n100.r10.s005_output/n100.r10.s005.low_depth.tsv" tmp.vcf.gz > "n100.r10.s005_output/n100.r10.s005.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s005_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:47f8152c049b5a16f254c114ee745ad620b2c8f0092272e69d327d95f4204d31 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.8MiB max=127.9MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=418B max=2.0KiB
2021/07/08 17:43:02 scheduler task 9b8dcc2a (flow 408c05ce): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s005.tar.gz resources {}
2021/07/08 17:43:02  ->  n100.r10.s005.Main.cp_out_file 408c05ce exec extern s3://niema-test/n100/r10/n100.r10.s005.tar.gz 35.8MiB
2021/07/08 17:43:02 scheduler task 3489071f (flow f03f745c): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:2dff5dcedaa071d8e00f43e21cad88f5d4060c85fa21ac008c96d57e5d40d25e -> s3://niema-test/n100/r10/n100.r10.s035.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:43:02  <-  n100.r10.s035.Main.cp_out_file f03f745c ok   extern 0s 35.7MiB
2021/07/08 17:43:02 scheduler task 592f7c63 (flow a4c9f908): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:43:02 scheduler task 592f7c63 (flow a4c9f908): promoting objects (try 0): started
2021/07/08 17:43:02 scheduler task 592f7c63 (flow a4c9f908): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:43:02 scheduler task 592f7c63 (flow a4c9f908): retrieving diagnostic output (try 0): started
2021/07/08 17:43:02 scheduler task 592f7c63 (flow a4c9f908): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:43:02 scheduler task 592f7c63 (flow a4c9f908): retrieving result (try 0): started
2021/07/08 17:43:02 scheduler task 592f7c63 (flow a4c9f908): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:43:02 scheduler task 592f7c63 (flow a4c9f908): transferring output (try 0): started
2021/07/08 17:43:02 scheduler task d1d46b3d (flow 21dcc181): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:43:02 scheduler task d1d46b3d (flow 21dcc181): promoting objects (try 0): started
2021/07/08 17:43:02 scheduler task d1d46b3d (flow 21dcc181): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:43:02 scheduler task d1d46b3d (flow 21dcc181): retrieving diagnostic output (try 0): started
2021/07/08 17:43:02 scheduler task 9b8dcc2a (flow 408c05ce): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:47f8152c049b5a16f254c114ee745ad620b2c8f0092272e69d327d95f4204d31 -> s3://niema-test/n100/r10/n100.r10.s005.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:43:02  <-  n100.r10.s005.Main.cp_out_file 408c05ce ok   extern 0s 35.8MiB
2021/07/08 17:43:02 scheduler task d1d46b3d (flow 21dcc181): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:43:02 scheduler task d1d46b3d (flow 21dcc181): retrieving result (try 0): started
2021/07/08 17:43:03 scheduler task d1d46b3d (flow 21dcc181): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:43:03 scheduler task d1d46b3d (flow 21dcc181): transferring output (try 0): started
2021/07/08 17:43:03 scheduler task 1400e0ee (flow 3bf338dc): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:43:03 scheduler task 1400e0ee (flow 3bf338dc): promoting objects (try 0): started
2021/07/08 17:43:03 scheduler task 592f7c63 (flow a4c9f908): transferring output (try 0): successful, next state: unloading
2021/07/08 17:43:03 scheduler task 592f7c63 (flow a4c9f908): unloading (try 0): started
2021/07/08 17:43:03 scheduler task 592f7c63 (flow a4c9f908): unloading list<val<.=784b60a1 35.7MiB> 35.7MiB>
2021/07/08 17:43:03 scheduler task 592f7c63 (flow a4c9f908): unloading val<.=44fe0f67 35.4MiB>
2021/07/08 17:43:03 scheduler task 592f7c63 (flow a4c9f908): unloading val<.=20f2fc6e 35.4MiB>
2021/07/08 17:43:03 scheduler task 1400e0ee (flow 3bf338dc): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:43:03 scheduler task 1400e0ee (flow 3bf338dc): retrieving diagnostic output (try 0): started
2021/07/08 17:43:03 scheduler task 592f7c63 (flow a4c9f908): unloaded list<val<.=784b60a1 35.7MiB> 35.7MiB>
2021/07/08 17:43:03 scheduler task 592f7c63 (flow a4c9f908): unloaded val<.=44fe0f67 35.4MiB>
2021/07/08 17:43:03 scheduler task 592f7c63 (flow a4c9f908): unloaded val<.=20f2fc6e 35.4MiB>
2021/07/08 17:43:03 scheduler task 592f7c63 (flow a4c9f908): unloading (try 0): successful, next state: complete
2021/07/08 17:43:03  <-  n100.r10.s054.Main.out_file a4c9f908 ok     exec 4m51s 35.7MiB
2021/07/08 17:43:03 n100.r10.s054.Main.out_file a4c9f908 n100/r10/n100.r10.s054.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c3e6c21b9092067c821a062653673417de05884a1f1d1b181a722ceab438b146
	sha256:a4c9f9081400d9bb5b2601ad6e646a1eff2c4139472ec2d50805208365c0f755
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/592f7c633aa9df0719980ab444a0f0a04f4796ed01247dea10bafc79bc73b334
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s054_output"
	    wget -O "n100.r10.s054_output/n100.r10.s054.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s054_output/n100.r10.s054.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s054_output/n100.r10.s054.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s054_output/n100.r10.s054.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s054_output/n100.r10.s054.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s054_output/n100.r10.s054.reference.fas" "n100.r10.s054_output/n100.r10.s054.fq1.fastq" "n100.r10.s054_output/n100.r10.s054.fq2.fastq" | samtools view -bS - > "n100.r10.s054_output/n100.r10.s054.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s054_output/n100.r10.s054.untrimmed.sorted.bam" "n100.r10.s054_output/n100.r10.s054.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s054_output/n100.r10.s054.untrimmed.sorted.bam" -b "n100.r10.s054_output/n100.r10.s054.primers.bed" -p "n100.r10.s054_output/n100.r10.s054.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s054_output/n100.r10.s054.trimmed.sorted.bam" "n100.r10.s054_output/n100.r10.s054.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s054_output/n100.r10.s054.reference.fas" "n100.r10.s054_output/n100.r10.s054.trimmed.sorted.bam" > "n100.r10.s054_output/n100.r10.s054.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s054_output/n100.r10.s054.reference.fas" --call-indels "n100.r10.s054_output/n100.r10.s054.trimmed.sorted.bam" > "n100.r10.s054_output/n100.r10.s054.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s054_output/n100.r10.s054.trimmed.sorted.bam" > "n100.r10.s054_output/n100.r10.s054.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s054_output/n100.r10.s054.depth.txt" "n100.r10.s054_output/n100.r10.s054.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s054_output/n100.r10.s054.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s054_output/n100.r10.s054.reference.fas" | bcftools consensus -m "n100.r10.s054_output/n100.r10.s054.low_depth.tsv" tmp.vcf.gz > "n100.r10.s054_output/n100.r10.s054.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s054_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:784b60a180d48340b0ded363f1b2cb82c1f0f2c0bd1d769310f6b2fcc1542d6d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.5MiB max=130.2MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=418B max=2.0KiB
2021/07/08 17:43:03 scheduler task 35c17685 (flow fdf399d6): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s054.tar.gz resources {}
2021/07/08 17:43:03  ->  n100.r10.s054.Main.cp_out_file fdf399d6 exec extern s3://niema-test/n100/r10/n100.r10.s054.tar.gz 35.7MiB
2021/07/08 17:43:03 scheduler task 9cd8433e (flow 8ff82b53): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:43:03 scheduler task 1400e0ee (flow 3bf338dc): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:43:03 scheduler task 9cd8433e (flow 8ff82b53): promoting objects (try 0): started
2021/07/08 17:43:03 scheduler task 1400e0ee (flow 3bf338dc): retrieving result (try 0): started
2021/07/08 17:43:03 scheduler task 9cd8433e (flow 8ff82b53): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:43:03 scheduler task 1400e0ee (flow 3bf338dc): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:43:03 scheduler task 9cd8433e (flow 8ff82b53): retrieving diagnostic output (try 0): started
2021/07/08 17:43:03 scheduler task 1400e0ee (flow 3bf338dc): transferring output (try 0): started
2021/07/08 17:43:03 scheduler task 974bd136 (flow 7368f9bf): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:43:03 scheduler task d1d46b3d (flow 21dcc181): transferring output (try 0): successful, next state: unloading
2021/07/08 17:43:03 scheduler task 974bd136 (flow 7368f9bf): promoting objects (try 0): started
2021/07/08 17:43:03 scheduler task 9cd8433e (flow 8ff82b53): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:43:03 scheduler task d1d46b3d (flow 21dcc181): unloading (try 0): started
2021/07/08 17:43:03 scheduler task d1d46b3d (flow 21dcc181): unloading list<val<.=cd98a1f9 35.7MiB> 35.7MiB>
2021/07/08 17:43:03 scheduler task d1d46b3d (flow 21dcc181): unloading val<.=97828f97 35.4MiB>
2021/07/08 17:43:03 scheduler task d1d46b3d (flow 21dcc181): unloading val<.=5276486f 35.4MiB>
2021/07/08 17:43:03 scheduler task 9cd8433e (flow 8ff82b53): retrieving result (try 0): started
2021/07/08 17:43:03 scheduler task 5e6ba1c1 (flow 1575ea23): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:43:03 scheduler task 5e6ba1c1 (flow 1575ea23): promoting objects (try 0): started
2021/07/08 17:43:03 scheduler task 974bd136 (flow 7368f9bf): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:43:03 scheduler task d1d46b3d (flow 21dcc181): unloaded val<.=5276486f 35.4MiB>
2021/07/08 17:43:03 scheduler task d1d46b3d (flow 21dcc181): unloaded val<.=97828f97 35.4MiB>
2021/07/08 17:43:03 scheduler task d1d46b3d (flow 21dcc181): unloaded list<val<.=cd98a1f9 35.7MiB> 35.7MiB>
2021/07/08 17:43:03 scheduler task d1d46b3d (flow 21dcc181): unloading (try 0): successful, next state: complete
2021/07/08 17:43:03 scheduler task 9cd8433e (flow 8ff82b53): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:43:03 scheduler task 974bd136 (flow 7368f9bf): retrieving diagnostic output (try 0): started
2021/07/08 17:43:03  <-  n100.r10.s011.Main.out_file 21dcc181 ok     exec 4m51s 35.7MiB
2021/07/08 17:43:03 n100.r10.s011.Main.out_file 21dcc181 n100/r10/n100.r10.s011.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9dae0ac4cc33d77c496024b28e489d5861852226fc41253c48696dcbb9f67257
	sha256:21dcc181382d61c279bcd1c322e49c0b62c1b0c21e5b932307d33d1f82762fb8
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d1d46b3d5fa8eda35c88a9f93df02ce9c2b5b85d391e284a89f3bfa0a9420927
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s011_output"
	    wget -O "n100.r10.s011_output/n100.r10.s011.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s011_output/n100.r10.s011.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s011_output/n100.r10.s011.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s011_output/n100.r10.s011.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s011_output/n100.r10.s011.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s011_output/n100.r10.s011.reference.fas" "n100.r10.s011_output/n100.r10.s011.fq1.fastq" "n100.r10.s011_output/n100.r10.s011.fq2.fastq" | samtools view -bS - > "n100.r10.s011_output/n100.r10.s011.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s011_output/n100.r10.s011.untrimmed.sorted.bam" "n100.r10.s011_output/n100.r10.s011.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s011_output/n100.r10.s011.untrimmed.sorted.bam" -b "n100.r10.s011_output/n100.r10.s011.primers.bed" -p "n100.r10.s011_output/n100.r10.s011.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s011_output/n100.r10.s011.trimmed.sorted.bam" "n100.r10.s011_output/n100.r10.s011.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s011_output/n100.r10.s011.reference.fas" "n100.r10.s011_output/n100.r10.s011.trimmed.sorted.bam" > "n100.r10.s011_output/n100.r10.s011.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s011_output/n100.r10.s011.reference.fas" --call-indels "n100.r10.s011_output/n100.r10.s011.trimmed.sorted.bam" > "n100.r10.s011_output/n100.r10.s011.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s011_output/n100.r10.s011.trimmed.sorted.bam" > "n100.r10.s011_output/n100.r10.s011.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s011_output/n100.r10.s011.depth.txt" "n100.r10.s011_output/n100.r10.s011.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s011_output/n100.r10.s011.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s011_output/n100.r10.s011.reference.fas" | bcftools consensus -m "n100.r10.s011_output/n100.r10.s011.low_depth.tsv" tmp.vcf.gz > "n100.r10.s011_output/n100.r10.s011.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s011_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:cd98a1f9cf7dc8a3fe03ae6cf0250a4580c6370065f3a6c3fc625dff77462509 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.8MiB max=127.8MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=419B max=2.0KiB
2021/07/08 17:43:03 scheduler task dac40553 (flow 440fef56): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s011.tar.gz resources {}
2021/07/08 17:43:03  ->  n100.r10.s011.Main.cp_out_file 440fef56 exec extern s3://niema-test/n100/r10/n100.r10.s011.tar.gz 35.7MiB
2021/07/08 17:43:03 scheduler task 922533fe (flow 9b575067): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:43:03 scheduler task 9cd8433e (flow 8ff82b53): transferring output (try 0): started
2021/07/08 17:43:03 scheduler task 922533fe (flow 9b575067): promoting objects (try 0): started
2021/07/08 17:43:03 scheduler task 5e6ba1c1 (flow 1575ea23): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:43:03 scheduler task 5e6ba1c1 (flow 1575ea23): retrieving diagnostic output (try 0): started
2021/07/08 17:43:03 scheduler task 974bd136 (flow 7368f9bf): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:43:03 scheduler task 974bd136 (flow 7368f9bf): retrieving result (try 0): started
2021/07/08 17:43:03 scheduler task 922533fe (flow 9b575067): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:43:03 scheduler task 922533fe (flow 9b575067): retrieving diagnostic output (try 0): started
2021/07/08 17:43:03 scheduler task 5e6ba1c1 (flow 1575ea23): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:43:03 scheduler task 5e6ba1c1 (flow 1575ea23): retrieving result (try 0): started
2021/07/08 17:43:03 scheduler task 974bd136 (flow 7368f9bf): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:43:03 scheduler task 974bd136 (flow 7368f9bf): transferring output (try 0): started
2021/07/08 17:43:03 scheduler task 0727dd15 (flow afe00438): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:43:03 scheduler task 922533fe (flow 9b575067): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:43:03 scheduler task 0727dd15 (flow afe00438): promoting objects (try 0): started
2021/07/08 17:43:03 scheduler task 922533fe (flow 9b575067): retrieving result (try 0): started
2021/07/08 17:43:03 scheduler task 5e6ba1c1 (flow 1575ea23): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:43:03 scheduler task 5e6ba1c1 (flow 1575ea23): transferring output (try 0): started
2021/07/08 17:43:03 scheduler task 35c17685 (flow fdf399d6): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:784b60a180d48340b0ded363f1b2cb82c1f0f2c0bd1d769310f6b2fcc1542d6d -> s3://niema-test/n100/r10/n100.r10.s054.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:43:03  <-  n100.r10.s054.Main.cp_out_file fdf399d6 ok   extern 0s 35.7MiB
2021/07/08 17:43:03 scheduler task 0727dd15 (flow afe00438): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:43:03 scheduler task 0727dd15 (flow afe00438): retrieving diagnostic output (try 0): started
2021/07/08 17:43:03 scheduler task 922533fe (flow 9b575067): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:43:03 scheduler task 1400e0ee (flow 3bf338dc): transferring output (try 0): successful, next state: unloading
2021/07/08 17:43:03 scheduler task 922533fe (flow 9b575067): transferring output (try 0): started
2021/07/08 17:43:03 scheduler task 1400e0ee (flow 3bf338dc): unloading (try 0): started
2021/07/08 17:43:03 scheduler task 1400e0ee (flow 3bf338dc): unloading list<val<.=093c913b 35.7MiB> 35.7MiB>
2021/07/08 17:43:03 scheduler task 1400e0ee (flow 3bf338dc): unloading val<.=419cd21b 35.4MiB>
2021/07/08 17:43:03 scheduler task 1400e0ee (flow 3bf338dc): unloading val<.=574c82ba 35.4MiB>
2021/07/08 17:43:04 scheduler task 0727dd15 (flow afe00438): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:43:04 scheduler task 0727dd15 (flow afe00438): retrieving result (try 0): started
2021/07/08 17:43:04 scheduler task 1400e0ee (flow 3bf338dc): unloaded list<val<.=093c913b 35.7MiB> 35.7MiB>
2021/07/08 17:43:04 scheduler task 1400e0ee (flow 3bf338dc): unloaded val<.=419cd21b 35.4MiB>
2021/07/08 17:43:04 scheduler task 1400e0ee (flow 3bf338dc): unloaded val<.=574c82ba 35.4MiB>
2021/07/08 17:43:04 scheduler task 1400e0ee (flow 3bf338dc): unloading (try 0): successful, next state: complete
2021/07/08 17:43:04  <-  n100.r10.s003.Main.out_file 3bf338dc ok     exec 4m51s 35.7MiB
2021/07/08 17:43:04 n100.r10.s003.Main.out_file 3bf338dc n100/r10/n100.r10.s003.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f97891f1fcf8e4ded7deb6e5ccd5aecead431fb65d3bf2b815f636fd1593ce1b
	sha256:3bf338dc4eb2a6e804b6c397618c106caba8c9e9bb1195e2ba8b848a4599c00f
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/1400e0eee96bd896281a476ae14311bd4584d457a2882d7164595df3f261336c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s003_output"
	    wget -O "n100.r10.s003_output/n100.r10.s003.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s003_output/n100.r10.s003.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s003_output/n100.r10.s003.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s003_output/n100.r10.s003.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s003_output/n100.r10.s003.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s003_output/n100.r10.s003.reference.fas" "n100.r10.s003_output/n100.r10.s003.fq1.fastq" "n100.r10.s003_output/n100.r10.s003.fq2.fastq" | samtools view -bS - > "n100.r10.s003_output/n100.r10.s003.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s003_output/n100.r10.s003.untrimmed.sorted.bam" "n100.r10.s003_output/n100.r10.s003.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s003_output/n100.r10.s003.untrimmed.sorted.bam" -b "n100.r10.s003_output/n100.r10.s003.primers.bed" -p "n100.r10.s003_output/n100.r10.s003.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s003_output/n100.r10.s003.trimmed.sorted.bam" "n100.r10.s003_output/n100.r10.s003.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s003_output/n100.r10.s003.reference.fas" "n100.r10.s003_output/n100.r10.s003.trimmed.sorted.bam" > "n100.r10.s003_output/n100.r10.s003.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s003_output/n100.r10.s003.reference.fas" --call-indels "n100.r10.s003_output/n100.r10.s003.trimmed.sorted.bam" > "n100.r10.s003_output/n100.r10.s003.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s003_output/n100.r10.s003.trimmed.sorted.bam" > "n100.r10.s003_output/n100.r10.s003.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s003_output/n100.r10.s003.depth.txt" "n100.r10.s003_output/n100.r10.s003.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s003_output/n100.r10.s003.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s003_output/n100.r10.s003.reference.fas" | bcftools consensus -m "n100.r10.s003_output/n100.r10.s003.low_depth.tsv" tmp.vcf.gz > "n100.r10.s003_output/n100.r10.s003.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s003_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:093c913b0e050fb7d99c65c0e70d35a519474fbfab7e517177023eb5d70210ec 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.5MiB max=127.3MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:43:04 scheduler task a0f57144 (flow 206676f3): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s003.tar.gz resources {}
2021/07/08 17:43:04  ->  n100.r10.s003.Main.cp_out_file 206676f3 exec extern s3://niema-test/n100/r10/n100.r10.s003.tar.gz 35.7MiB
2021/07/08 17:43:04 scheduler task 0727dd15 (flow afe00438): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:43:04 scheduler task 0727dd15 (flow afe00438): transferring output (try 0): started
2021/07/08 17:43:04 scheduler task 9cd8433e (flow 8ff82b53): transferring output (try 0): successful, next state: unloading
2021/07/08 17:43:04 scheduler task 9cd8433e (flow 8ff82b53): unloading (try 0): started
2021/07/08 17:43:04 scheduler task 9cd8433e (flow 8ff82b53): unloading list<val<.=b73bb53e 35.8MiB> 35.8MiB>
2021/07/08 17:43:04 scheduler task 9cd8433e (flow 8ff82b53): unloading val<.=5102d45c 35.4MiB>
2021/07/08 17:43:04 scheduler task 9cd8433e (flow 8ff82b53): unloading val<.=132f0fc8 35.4MiB>
2021/07/08 17:43:04 scheduler task 9cd8433e (flow 8ff82b53): unloaded val<.=5102d45c 35.4MiB>
2021/07/08 17:43:04 scheduler task 9cd8433e (flow 8ff82b53): unloaded list<val<.=b73bb53e 35.8MiB> 35.8MiB>
2021/07/08 17:43:04 scheduler task 9cd8433e (flow 8ff82b53): unloaded val<.=132f0fc8 35.4MiB>
2021/07/08 17:43:04 scheduler task 9cd8433e (flow 8ff82b53): unloading (try 0): successful, next state: complete
2021/07/08 17:43:04  <-  n100.r10.s067.Main.out_file 8ff82b53 ok     exec 4m51s 35.8MiB
2021/07/08 17:43:04 n100.r10.s067.Main.out_file 8ff82b53 n100/r10/n100.r10.s067.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8c279e96331a669ee3b7bbcf4a06613b92f5a039802cdf67fca5b93411c47a04
	sha256:8ff82b5341a3e817c0ef79613fd3db37dadc798452dd2df54064882cc1a55a3b
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9cd8433e870903d354ca9362a779d2f797baa2a26d619c6d02d5a9420f16a64a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s067_output"
	    wget -O "n100.r10.s067_output/n100.r10.s067.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s067_output/n100.r10.s067.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s067_output/n100.r10.s067.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s067_output/n100.r10.s067.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s067_output/n100.r10.s067.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s067_output/n100.r10.s067.reference.fas" "n100.r10.s067_output/n100.r10.s067.fq1.fastq" "n100.r10.s067_output/n100.r10.s067.fq2.fastq" | samtools view -bS - > "n100.r10.s067_output/n100.r10.s067.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s067_output/n100.r10.s067.untrimmed.sorted.bam" "n100.r10.s067_output/n100.r10.s067.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s067_output/n100.r10.s067.untrimmed.sorted.bam" -b "n100.r10.s067_output/n100.r10.s067.primers.bed" -p "n100.r10.s067_output/n100.r10.s067.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s067_output/n100.r10.s067.trimmed.sorted.bam" "n100.r10.s067_output/n100.r10.s067.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s067_output/n100.r10.s067.reference.fas" "n100.r10.s067_output/n100.r10.s067.trimmed.sorted.bam" > "n100.r10.s067_output/n100.r10.s067.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s067_output/n100.r10.s067.reference.fas" --call-indels "n100.r10.s067_output/n100.r10.s067.trimmed.sorted.bam" > "n100.r10.s067_output/n100.r10.s067.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s067_output/n100.r10.s067.trimmed.sorted.bam" > "n100.r10.s067_output/n100.r10.s067.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s067_output/n100.r10.s067.depth.txt" "n100.r10.s067_output/n100.r10.s067.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s067_output/n100.r10.s067.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s067_output/n100.r10.s067.reference.fas" | bcftools consensus -m "n100.r10.s067_output/n100.r10.s067.low_depth.tsv" tmp.vcf.gz > "n100.r10.s067_output/n100.r10.s067.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s067_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:b73bb53e4c8025b66b7eff9c8ea10fc2c9853cc551c67572231f93d204e865fc 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.3MiB max=128.9MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=419B max=2.0KiB
2021/07/08 17:43:04 scheduler task 19a820c6 (flow 3817a7c3): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s067.tar.gz resources {}
2021/07/08 17:43:04  ->  n100.r10.s067.Main.cp_out_file 3817a7c3 exec extern s3://niema-test/n100/r10/n100.r10.s067.tar.gz 35.8MiB
2021/07/08 17:43:04 scheduler task 974bd136 (flow 7368f9bf): transferring output (try 0): successful, next state: unloading
2021/07/08 17:43:04 scheduler task 974bd136 (flow 7368f9bf): unloading (try 0): started
2021/07/08 17:43:04 scheduler task 974bd136 (flow 7368f9bf): unloading list<val<.=21d957d0 35.7MiB> 35.7MiB>
2021/07/08 17:43:04 scheduler task 974bd136 (flow 7368f9bf): unloading val<.=0b6a4188 35.4MiB>
2021/07/08 17:43:04 scheduler task 974bd136 (flow 7368f9bf): unloading val<.=53f54049 35.4MiB>
2021/07/08 17:43:04 scheduler task 59e7f390 (flow 8552db05): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:43:04 scheduler task 59e7f390 (flow 8552db05): promoting objects (try 0): started
2021/07/08 17:43:04 scheduler task 5e6ba1c1 (flow 1575ea23): transferring output (try 0): successful, next state: unloading
2021/07/08 17:43:04 scheduler task 5e6ba1c1 (flow 1575ea23): unloading (try 0): started
2021/07/08 17:43:04 scheduler task 5e6ba1c1 (flow 1575ea23): unloading val<.=68171cb5 35.4MiB>
2021/07/08 17:43:04 scheduler task 5e6ba1c1 (flow 1575ea23): unloading list<val<.=23c75e4f 35.8MiB> 35.8MiB>
2021/07/08 17:43:04 scheduler task 5e6ba1c1 (flow 1575ea23): unloading val<.=fb5561b6 35.4MiB>
2021/07/08 17:43:04 scheduler task 974bd136 (flow 7368f9bf): unloaded list<val<.=21d957d0 35.7MiB> 35.7MiB>
2021/07/08 17:43:04 scheduler task 974bd136 (flow 7368f9bf): unloaded val<.=53f54049 35.4MiB>
2021/07/08 17:43:04 scheduler task 974bd136 (flow 7368f9bf): unloaded val<.=0b6a4188 35.4MiB>
2021/07/08 17:43:04 scheduler task 974bd136 (flow 7368f9bf): unloading (try 0): successful, next state: complete
2021/07/08 17:43:04  <-  n100.r10.s099.Main.out_file 7368f9bf ok     exec 4m45s 35.7MiB
2021/07/08 17:43:04 n100.r10.s099.Main.out_file 7368f9bf n100/r10/n100.r10.s099.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6f2ec32173ba199cc1af57f3f4614095e1b683638b1d16e63d6522da28eefbcb
	sha256:7368f9bfa28df67f77e228efa8a688d48997f2b8c4c8af5253572caa16686009
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/974bd13603dad5b1449888311bc5baecc8135c52cf9b0c95a60d40c0b2ff69c7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s099_output"
	    wget -O "n100.r10.s099_output/n100.r10.s099.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s099_output/n100.r10.s099.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s099_output/n100.r10.s099.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s099_output/n100.r10.s099.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s099_output/n100.r10.s099.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s099_output/n100.r10.s099.reference.fas" "n100.r10.s099_output/n100.r10.s099.fq1.fastq" "n100.r10.s099_output/n100.r10.s099.fq2.fastq" | samtools view -bS - > "n100.r10.s099_output/n100.r10.s099.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s099_output/n100.r10.s099.untrimmed.sorted.bam" "n100.r10.s099_output/n100.r10.s099.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s099_output/n100.r10.s099.untrimmed.sorted.bam" -b "n100.r10.s099_output/n100.r10.s099.primers.bed" -p "n100.r10.s099_output/n100.r10.s099.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s099_output/n100.r10.s099.trimmed.sorted.bam" "n100.r10.s099_output/n100.r10.s099.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s099_output/n100.r10.s099.reference.fas" "n100.r10.s099_output/n100.r10.s099.trimmed.sorted.bam" > "n100.r10.s099_output/n100.r10.s099.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s099_output/n100.r10.s099.reference.fas" --call-indels "n100.r10.s099_output/n100.r10.s099.trimmed.sorted.bam" > "n100.r10.s099_output/n100.r10.s099.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s099_output/n100.r10.s099.trimmed.sorted.bam" > "n100.r10.s099_output/n100.r10.s099.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s099_output/n100.r10.s099.depth.txt" "n100.r10.s099_output/n100.r10.s099.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s099_output/n100.r10.s099.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s099_output/n100.r10.s099.reference.fas" | bcftools consensus -m "n100.r10.s099_output/n100.r10.s099.low_depth.tsv" tmp.vcf.gz > "n100.r10.s099_output/n100.r10.s099.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s099_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:21d957d0dd22516164c588a75e996a178205df3615a40ad7e973cc3dc783a742 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.5MiB max=124.5MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=420B max=2.1KiB
2021/07/08 17:43:04 scheduler task e59756c5 (flow d368e3c8): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s099.tar.gz resources {}
2021/07/08 17:43:04  ->  n100.r10.s099.Main.cp_out_file d368e3c8 exec extern s3://niema-test/n100/r10/n100.r10.s099.tar.gz 35.7MiB
2021/07/08 17:43:04 scheduler task 59e7f390 (flow 8552db05): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:43:04 scheduler task 922533fe (flow 9b575067): transferring output (try 0): successful, next state: unloading
2021/07/08 17:43:04 scheduler task 59e7f390 (flow 8552db05): retrieving diagnostic output (try 0): started
2021/07/08 17:43:04 scheduler task 922533fe (flow 9b575067): unloading (try 0): started
2021/07/08 17:43:04 scheduler task 922533fe (flow 9b575067): unloading list<val<.=1cc5e36f 35.7MiB> 35.7MiB>
2021/07/08 17:43:04 scheduler task 922533fe (flow 9b575067): unloading val<.=6fcca372 35.4MiB>
2021/07/08 17:43:04 scheduler task 922533fe (flow 9b575067): unloading val<.=397f758a 35.4MiB>
2021/07/08 17:43:04 scheduler task 5e6ba1c1 (flow 1575ea23): unloaded list<val<.=23c75e4f 35.8MiB> 35.8MiB>
2021/07/08 17:43:04 scheduler task 5e6ba1c1 (flow 1575ea23): unloaded val<.=68171cb5 35.4MiB>
2021/07/08 17:43:04 scheduler task 5e6ba1c1 (flow 1575ea23): unloaded val<.=fb5561b6 35.4MiB>
2021/07/08 17:43:04 scheduler task 5e6ba1c1 (flow 1575ea23): unloading (try 0): successful, next state: complete
2021/07/08 17:43:04  <-  n100.r10.s070.Main.out_file 1575ea23 ok     exec 4m45s 35.8MiB
2021/07/08 17:43:04 n100.r10.s070.Main.out_file 1575ea23 n100/r10/n100.r10.s070.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:62c18b04e167934bd72c3b3fe373381bda162bbef1666a0eb016f01d99e4f0dc
	sha256:1575ea2312dd6fa2ab8a027dd1a1b2fcfd72d6244ff435f4d8ac63acaf4f83e2
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5e6ba1c1d9eea6590ff690ad82a4dfff3b922cecb6cc8c92798cc1b65718b1d5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s070_output"
	    wget -O "n100.r10.s070_output/n100.r10.s070.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s070_output/n100.r10.s070.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s070_output/n100.r10.s070.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s070_output/n100.r10.s070.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s070_output/n100.r10.s070.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s070_output/n100.r10.s070.reference.fas" "n100.r10.s070_output/n100.r10.s070.fq1.fastq" "n100.r10.s070_output/n100.r10.s070.fq2.fastq" | samtools view -bS - > "n100.r10.s070_output/n100.r10.s070.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s070_output/n100.r10.s070.untrimmed.sorted.bam" "n100.r10.s070_output/n100.r10.s070.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s070_output/n100.r10.s070.untrimmed.sorted.bam" -b "n100.r10.s070_output/n100.r10.s070.primers.bed" -p "n100.r10.s070_output/n100.r10.s070.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s070_output/n100.r10.s070.trimmed.sorted.bam" "n100.r10.s070_output/n100.r10.s070.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s070_output/n100.r10.s070.reference.fas" "n100.r10.s070_output/n100.r10.s070.trimmed.sorted.bam" > "n100.r10.s070_output/n100.r10.s070.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s070_output/n100.r10.s070.reference.fas" --call-indels "n100.r10.s070_output/n100.r10.s070.trimmed.sorted.bam" > "n100.r10.s070_output/n100.r10.s070.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s070_output/n100.r10.s070.trimmed.sorted.bam" > "n100.r10.s070_output/n100.r10.s070.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s070_output/n100.r10.s070.depth.txt" "n100.r10.s070_output/n100.r10.s070.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s070_output/n100.r10.s070.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s070_output/n100.r10.s070.reference.fas" | bcftools consensus -m "n100.r10.s070_output/n100.r10.s070.low_depth.tsv" tmp.vcf.gz > "n100.r10.s070_output/n100.r10.s070.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s070_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:23c75e4f424d2dca1a1ed6183bce5ace3e20819f0bce98cabc1b276dcd1d24b9 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.8MiB max=128.7MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=414B max=2.0KiB
2021/07/08 17:43:04 scheduler task 02db2d2c (flow bc0df3c7): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s070.tar.gz resources {}
2021/07/08 17:43:04  ->  n100.r10.s070.Main.cp_out_file bc0df3c7 exec extern s3://niema-test/n100/r10/n100.r10.s070.tar.gz 35.8MiB
2021/07/08 17:43:04 scheduler task 59e7f390 (flow 8552db05): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:43:04 scheduler task 922533fe (flow 9b575067): unloaded val<.=397f758a 35.4MiB>
2021/07/08 17:43:04 scheduler task 922533fe (flow 9b575067): unloaded val<.=6fcca372 35.4MiB>
2021/07/08 17:43:04 scheduler task 922533fe (flow 9b575067): unloaded list<val<.=1cc5e36f 35.7MiB> 35.7MiB>
2021/07/08 17:43:04 scheduler task 922533fe (flow 9b575067): unloading (try 0): successful, next state: complete
2021/07/08 17:43:04 scheduler task 59e7f390 (flow 8552db05): retrieving result (try 0): started
2021/07/08 17:43:04  <-  n100.r10.s072.Main.out_file 9b575067 ok     exec 4m51s 35.7MiB
2021/07/08 17:43:04 n100.r10.s072.Main.out_file 9b575067 n100/r10/n100.r10.s072.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:544312b048f445272fc06348f974787a2463937918cb647a21d3948c554f7685
	sha256:9b5750671ecfda971ceb0d351ace2daa125f1b33b0bd28e747b473d26e30de50
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/922533fecf7f94a4baf8328dfd69022d9611893f5f75fc2f48431078f5ee4404
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s072_output"
	    wget -O "n100.r10.s072_output/n100.r10.s072.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s072_output/n100.r10.s072.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s072_output/n100.r10.s072.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s072_output/n100.r10.s072.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s072_output/n100.r10.s072.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s072_output/n100.r10.s072.reference.fas" "n100.r10.s072_output/n100.r10.s072.fq1.fastq" "n100.r10.s072_output/n100.r10.s072.fq2.fastq" | samtools view -bS - > "n100.r10.s072_output/n100.r10.s072.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s072_output/n100.r10.s072.untrimmed.sorted.bam" "n100.r10.s072_output/n100.r10.s072.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s072_output/n100.r10.s072.untrimmed.sorted.bam" -b "n100.r10.s072_output/n100.r10.s072.primers.bed" -p "n100.r10.s072_output/n100.r10.s072.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s072_output/n100.r10.s072.trimmed.sorted.bam" "n100.r10.s072_output/n100.r10.s072.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s072_output/n100.r10.s072.reference.fas" "n100.r10.s072_output/n100.r10.s072.trimmed.sorted.bam" > "n100.r10.s072_output/n100.r10.s072.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s072_output/n100.r10.s072.reference.fas" --call-indels "n100.r10.s072_output/n100.r10.s072.trimmed.sorted.bam" > "n100.r10.s072_output/n100.r10.s072.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s072_output/n100.r10.s072.trimmed.sorted.bam" > "n100.r10.s072_output/n100.r10.s072.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s072_output/n100.r10.s072.depth.txt" "n100.r10.s072_output/n100.r10.s072.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s072_output/n100.r10.s072.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s072_output/n100.r10.s072.reference.fas" | bcftools consensus -m "n100.r10.s072_output/n100.r10.s072.low_depth.tsv" tmp.vcf.gz > "n100.r10.s072_output/n100.r10.s072.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s072_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:1cc5e36f41a04cc81008f402646eb65fb1a0b15c8fbc4a9755d302c8b75faeed 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.6MiB max=130.8MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:43:04 scheduler task f27c44e2 (flow 8b1bb45c): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s072.tar.gz resources {}
2021/07/08 17:43:04  ->  n100.r10.s072.Main.cp_out_file 8b1bb45c exec extern s3://niema-test/n100/r10/n100.r10.s072.tar.gz 35.7MiB
2021/07/08 17:43:04 scheduler task 0727dd15 (flow afe00438): transferring output (try 0): successful, next state: unloading
2021/07/08 17:43:04 scheduler task 0727dd15 (flow afe00438): unloading (try 0): started
2021/07/08 17:43:04 scheduler task 0727dd15 (flow afe00438): unloading list<val<.=1becd230 35.7MiB> 35.7MiB>
2021/07/08 17:43:04 scheduler task 0727dd15 (flow afe00438): unloading val<.=318150a0 35.4MiB>
2021/07/08 17:43:04 scheduler task 0727dd15 (flow afe00438): unloading val<.=e17b71a0 35.4MiB>
2021/07/08 17:43:04 scheduler task 59e7f390 (flow 8552db05): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:43:04 scheduler task a0f57144 (flow 206676f3): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:093c913b0e050fb7d99c65c0e70d35a519474fbfab7e517177023eb5d70210ec -> s3://niema-test/n100/r10/n100.r10.s003.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:43:04  <-  n100.r10.s003.Main.cp_out_file 206676f3 ok   extern 0s 35.7MiB
2021/07/08 17:43:04 scheduler task 59e7f390 (flow 8552db05): transferring output (try 0): started
2021/07/08 17:43:04 scheduler task 0727dd15 (flow afe00438): unloaded list<val<.=1becd230 35.7MiB> 35.7MiB>
2021/07/08 17:43:04 scheduler task 0727dd15 (flow afe00438): unloaded val<.=e17b71a0 35.4MiB>
2021/07/08 17:43:04 scheduler task 0727dd15 (flow afe00438): unloaded val<.=318150a0 35.4MiB>
2021/07/08 17:43:04 scheduler task 0727dd15 (flow afe00438): unloading (try 0): successful, next state: complete
2021/07/08 17:43:04  <-  n100.r10.s043.Main.out_file afe00438 ok     exec 4m46s 35.7MiB
2021/07/08 17:43:04 n100.r10.s043.Main.out_file afe00438 n100/r10/n100.r10.s043.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b55507dc46adb3c5d23c2a40a2baf6b679aaae9b920765dcc7e8d8d9cbdb7683
	sha256:afe004389e7ab99cf4edcfb062152901892a3f2f9cb9dcb8b87898aa2f4b5f62
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/0727dd157847eeb50e20d961ac68ddd27fd898093e368f7f6fd42ceb7001674d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s043_output"
	    wget -O "n100.r10.s043_output/n100.r10.s043.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s043_output/n100.r10.s043.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s043_output/n100.r10.s043.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s043_output/n100.r10.s043.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s043_output/n100.r10.s043.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s043_output/n100.r10.s043.reference.fas" "n100.r10.s043_output/n100.r10.s043.fq1.fastq" "n100.r10.s043_output/n100.r10.s043.fq2.fastq" | samtools view -bS - > "n100.r10.s043_output/n100.r10.s043.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s043_output/n100.r10.s043.untrimmed.sorted.bam" "n100.r10.s043_output/n100.r10.s043.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s043_output/n100.r10.s043.untrimmed.sorted.bam" -b "n100.r10.s043_output/n100.r10.s043.primers.bed" -p "n100.r10.s043_output/n100.r10.s043.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s043_output/n100.r10.s043.trimmed.sorted.bam" "n100.r10.s043_output/n100.r10.s043.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s043_output/n100.r10.s043.reference.fas" "n100.r10.s043_output/n100.r10.s043.trimmed.sorted.bam" > "n100.r10.s043_output/n100.r10.s043.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s043_output/n100.r10.s043.reference.fas" --call-indels "n100.r10.s043_output/n100.r10.s043.trimmed.sorted.bam" > "n100.r10.s043_output/n100.r10.s043.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s043_output/n100.r10.s043.trimmed.sorted.bam" > "n100.r10.s043_output/n100.r10.s043.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s043_output/n100.r10.s043.depth.txt" "n100.r10.s043_output/n100.r10.s043.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s043_output/n100.r10.s043.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s043_output/n100.r10.s043.reference.fas" | bcftools consensus -m "n100.r10.s043_output/n100.r10.s043.low_depth.tsv" tmp.vcf.gz > "n100.r10.s043_output/n100.r10.s043.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s043_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:1becd23085e6c221d75be032df3e4bdb405d27eede3ef528066408d4c9902ab8 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.1MiB max=129.3MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=420B max=2.1KiB
2021/07/08 17:43:04 scheduler task 2093dfec (flow 324fb6cc): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s043.tar.gz resources {}
2021/07/08 17:43:04  ->  n100.r10.s043.Main.cp_out_file 324fb6cc exec extern s3://niema-test/n100/r10/n100.r10.s043.tar.gz 35.7MiB
2021/07/08 17:43:04 scheduler task dac40553 (flow 440fef56): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:cd98a1f9cf7dc8a3fe03ae6cf0250a4580c6370065f3a6c3fc625dff77462509 -> s3://niema-test/n100/r10/n100.r10.s011.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:43:04  <-  n100.r10.s011.Main.cp_out_file 440fef56 ok   extern 0s 35.7MiB
2021/07/08 17:43:04 scheduler task 28aacb8b (flow 5c83df52): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:43:04 scheduler task 28aacb8b (flow 5c83df52): promoting objects (try 0): started
2021/07/08 17:43:04 scheduler task 9741371c (flow 26a00bb9): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:43:04 scheduler task 9741371c (flow 26a00bb9): promoting objects (try 0): started
2021/07/08 17:43:04 scheduler task 28aacb8b (flow 5c83df52): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:43:04 scheduler task 28aacb8b (flow 5c83df52): retrieving diagnostic output (try 0): started
2021/07/08 17:43:04 scheduler task 9741371c (flow 26a00bb9): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:43:04 scheduler task 9741371c (flow 26a00bb9): retrieving diagnostic output (try 0): started
2021/07/08 17:43:04 scheduler task 207ede7a (flow 23b67a6f): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:43:04 scheduler task 207ede7a (flow 23b67a6f): promoting objects (try 0): started
2021/07/08 17:43:04 scheduler task 28aacb8b (flow 5c83df52): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:43:04 scheduler task 28aacb8b (flow 5c83df52): retrieving result (try 0): started
2021/07/08 17:43:04 scheduler task 9741371c (flow 26a00bb9): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:43:04 scheduler task 9741371c (flow 26a00bb9): retrieving result (try 0): started
2021/07/08 17:43:05 scheduler task 207ede7a (flow 23b67a6f): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:43:05 scheduler task 28aacb8b (flow 5c83df52): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:43:05 scheduler task 207ede7a (flow 23b67a6f): retrieving diagnostic output (try 0): started
2021/07/08 17:43:05 scheduler task 28aacb8b (flow 5c83df52): transferring output (try 0): started
2021/07/08 17:43:05 scheduler task 9741371c (flow 26a00bb9): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:43:05 scheduler task a74afbde (flow 76734b91): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:43:05 scheduler task e59756c5 (flow d368e3c8): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:21d957d0dd22516164c588a75e996a178205df3615a40ad7e973cc3dc783a742 -> s3://niema-test/n100/r10/n100.r10.s099.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:43:05  <-  n100.r10.s099.Main.cp_out_file d368e3c8 ok   extern 0s 35.7MiB
2021/07/08 17:43:05 scheduler task 9741371c (flow 26a00bb9): transferring output (try 0): started
2021/07/08 17:43:05 scheduler task a74afbde (flow 76734b91): promoting objects (try 0): started
2021/07/08 17:43:05 scheduler task 207ede7a (flow 23b67a6f): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:43:05 scheduler task 19a820c6 (flow 3817a7c3): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:b73bb53e4c8025b66b7eff9c8ea10fc2c9853cc551c67572231f93d204e865fc -> s3://niema-test/n100/r10/n100.r10.s067.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:43:05  <-  n100.r10.s067.Main.cp_out_file 3817a7c3 ok   extern 0s 35.8MiB
2021/07/08 17:43:05 scheduler task 207ede7a (flow 23b67a6f): retrieving result (try 0): started
2021/07/08 17:43:05 scheduler task a74afbde (flow 76734b91): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:43:05 scheduler task a74afbde (flow 76734b91): retrieving diagnostic output (try 0): started
2021/07/08 17:43:05 scheduler task 207ede7a (flow 23b67a6f): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:43:05 scheduler task 207ede7a (flow 23b67a6f): transferring output (try 0): started
2021/07/08 17:43:05 scheduler task a74afbde (flow 76734b91): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:43:05 scheduler task a74afbde (flow 76734b91): retrieving result (try 0): started
2021/07/08 17:43:05 scheduler task a74afbde (flow 76734b91): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:43:05 scheduler task a74afbde (flow 76734b91): transferring output (try 0): started
2021/07/08 17:43:05 scheduler task f27c44e2 (flow 8b1bb45c): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:1cc5e36f41a04cc81008f402646eb65fb1a0b15c8fbc4a9755d302c8b75faeed -> s3://niema-test/n100/r10/n100.r10.s072.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:43:05  <-  n100.r10.s072.Main.cp_out_file 8b1bb45c ok   extern 0s 35.7MiB
2021/07/08 17:43:05 scheduler task 02db2d2c (flow bc0df3c7): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:23c75e4f424d2dca1a1ed6183bce5ace3e20819f0bce98cabc1b276dcd1d24b9 -> s3://niema-test/n100/r10/n100.r10.s070.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:43:05  <-  n100.r10.s070.Main.cp_out_file bc0df3c7 ok   extern 0s 35.8MiB
2021/07/08 17:43:05 scheduler task 28aacb8b (flow 5c83df52): transferring output (try 0): successful, next state: unloading
2021/07/08 17:43:05 scheduler task 28aacb8b (flow 5c83df52): unloading (try 0): started
2021/07/08 17:43:05 scheduler task 28aacb8b (flow 5c83df52): unloading list<val<.=d6c0ba61 35.7MiB> 35.7MiB>
2021/07/08 17:43:05 scheduler task 28aacb8b (flow 5c83df52): unloading val<.=42e45d84 35.4MiB>
2021/07/08 17:43:05 scheduler task 28aacb8b (flow 5c83df52): unloading val<.=146803c4 35.4MiB>
2021/07/08 17:43:05 scheduler task 9741371c (flow 26a00bb9): transferring output (try 0): successful, next state: unloading
2021/07/08 17:43:05 scheduler task 9741371c (flow 26a00bb9): unloading (try 0): started
2021/07/08 17:43:05 scheduler task 9741371c (flow 26a00bb9): unloading list<val<.=50520703 35.8MiB> 35.8MiB>
2021/07/08 17:43:05 scheduler task 9741371c (flow 26a00bb9): unloading val<.=be4ceebd 35.4MiB>
2021/07/08 17:43:05 scheduler task 9741371c (flow 26a00bb9): unloading val<.=bcd9005d 35.4MiB>
2021/07/08 17:43:05 scheduler task 28aacb8b (flow 5c83df52): unloaded list<val<.=d6c0ba61 35.7MiB> 35.7MiB>
2021/07/08 17:43:05 scheduler task 28aacb8b (flow 5c83df52): unloaded val<.=42e45d84 35.4MiB>
2021/07/08 17:43:05 scheduler task 28aacb8b (flow 5c83df52): unloaded val<.=146803c4 35.4MiB>
2021/07/08 17:43:05 scheduler task 28aacb8b (flow 5c83df52): unloading (try 0): successful, next state: complete
2021/07/08 17:43:05  <-  n100.r10.s023.Main.out_file 5c83df52 ok     exec 4m46s 35.7MiB
2021/07/08 17:43:05 n100.r10.s023.Main.out_file 5c83df52 n100/r10/n100.r10.s023.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:43914e78e83da1b00d25c311a33197d90d183eeb683f829d4a7005fb578c6c48
	sha256:5c83df5210fdbea65d4d1916d3d370ec1f75ccafd1ed90ea36227498ffd598a6
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/28aacb8b4fffd8382726175ff372d118f71a9be70ccf47f4c47ba9a6adee0ae7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s023_output"
	    wget -O "n100.r10.s023_output/n100.r10.s023.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s023_output/n100.r10.s023.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s023_output/n100.r10.s023.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s023_output/n100.r10.s023.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s023_output/n100.r10.s023.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s023_output/n100.r10.s023.reference.fas" "n100.r10.s023_output/n100.r10.s023.fq1.fastq" "n100.r10.s023_output/n100.r10.s023.fq2.fastq" | samtools view -bS - > "n100.r10.s023_output/n100.r10.s023.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s023_output/n100.r10.s023.untrimmed.sorted.bam" "n100.r10.s023_output/n100.r10.s023.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s023_output/n100.r10.s023.untrimmed.sorted.bam" -b "n100.r10.s023_output/n100.r10.s023.primers.bed" -p "n100.r10.s023_output/n100.r10.s023.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s023_output/n100.r10.s023.trimmed.sorted.bam" "n100.r10.s023_output/n100.r10.s023.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s023_output/n100.r10.s023.reference.fas" "n100.r10.s023_output/n100.r10.s023.trimmed.sorted.bam" > "n100.r10.s023_output/n100.r10.s023.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s023_output/n100.r10.s023.reference.fas" --call-indels "n100.r10.s023_output/n100.r10.s023.trimmed.sorted.bam" > "n100.r10.s023_output/n100.r10.s023.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s023_output/n100.r10.s023.trimmed.sorted.bam" > "n100.r10.s023_output/n100.r10.s023.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s023_output/n100.r10.s023.depth.txt" "n100.r10.s023_output/n100.r10.s023.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s023_output/n100.r10.s023.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s023_output/n100.r10.s023.reference.fas" | bcftools consensus -m "n100.r10.s023_output/n100.r10.s023.low_depth.tsv" tmp.vcf.gz > "n100.r10.s023_output/n100.r10.s023.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s023_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d6c0ba613ca5ad70c8d5d774b26f725051b5eb9e1cd9341c41facc9bf5ee998f 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.6MiB max=129.8MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=417B max=2.0KiB
2021/07/08 17:43:05 scheduler task 5bdb0fe9 (flow 4233853e): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s023.tar.gz resources {}
2021/07/08 17:43:05  ->  n100.r10.s023.Main.cp_out_file 4233853e exec extern s3://niema-test/n100/r10/n100.r10.s023.tar.gz 35.7MiB
2021/07/08 17:43:05 scheduler task 9741371c (flow 26a00bb9): unloaded list<val<.=50520703 35.8MiB> 35.8MiB>
2021/07/08 17:43:05 scheduler task 9741371c (flow 26a00bb9): unloaded val<.=be4ceebd 35.4MiB>
2021/07/08 17:43:05 scheduler task 9741371c (flow 26a00bb9): unloaded val<.=bcd9005d 35.4MiB>
2021/07/08 17:43:05 scheduler task 9741371c (flow 26a00bb9): unloading (try 0): successful, next state: complete
2021/07/08 17:43:05  <-  n100.r10.s050.Main.out_file 26a00bb9 ok     exec 4m46s 35.8MiB
2021/07/08 17:43:05 n100.r10.s050.Main.out_file 26a00bb9 n100/r10/n100.r10.s050.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5d80b059dfdb5c7d75d2648c42cb5bf758b453fff594436ca0fd5e559869dfd2
	sha256:26a00bb91ddeac9c4dd121c3fe3d2210c22169ff561852f6b39c273d1fd37931
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9741371cdda3d32f64cc6a8de8118dd9106e1a898f62eee1a42393ff32ce2983
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s050_output"
	    wget -O "n100.r10.s050_output/n100.r10.s050.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s050_output/n100.r10.s050.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s050_output/n100.r10.s050.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s050_output/n100.r10.s050.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s050_output/n100.r10.s050.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s050_output/n100.r10.s050.reference.fas" "n100.r10.s050_output/n100.r10.s050.fq1.fastq" "n100.r10.s050_output/n100.r10.s050.fq2.fastq" | samtools view -bS - > "n100.r10.s050_output/n100.r10.s050.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s050_output/n100.r10.s050.untrimmed.sorted.bam" "n100.r10.s050_output/n100.r10.s050.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s050_output/n100.r10.s050.untrimmed.sorted.bam" -b "n100.r10.s050_output/n100.r10.s050.primers.bed" -p "n100.r10.s050_output/n100.r10.s050.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s050_output/n100.r10.s050.trimmed.sorted.bam" "n100.r10.s050_output/n100.r10.s050.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s050_output/n100.r10.s050.reference.fas" "n100.r10.s050_output/n100.r10.s050.trimmed.sorted.bam" > "n100.r10.s050_output/n100.r10.s050.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s050_output/n100.r10.s050.reference.fas" --call-indels "n100.r10.s050_output/n100.r10.s050.trimmed.sorted.bam" > "n100.r10.s050_output/n100.r10.s050.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s050_output/n100.r10.s050.trimmed.sorted.bam" > "n100.r10.s050_output/n100.r10.s050.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s050_output/n100.r10.s050.depth.txt" "n100.r10.s050_output/n100.r10.s050.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s050_output/n100.r10.s050.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s050_output/n100.r10.s050.reference.fas" | bcftools consensus -m "n100.r10.s050_output/n100.r10.s050.low_depth.tsv" tmp.vcf.gz > "n100.r10.s050_output/n100.r10.s050.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s050_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:5052070301a2a0868576df944bc4505937e2d90f90a63b0316b07d2a88f4ecb1 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.0MiB max=129.5MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=418B max=2.0KiB
2021/07/08 17:43:05 scheduler task 5752c3a6 (flow a87ef3fd): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s050.tar.gz resources {}
2021/07/08 17:43:05  ->  n100.r10.s050.Main.cp_out_file a87ef3fd exec extern s3://niema-test/n100/r10/n100.r10.s050.tar.gz 35.8MiB
2021/07/08 17:43:05 scheduler task 59e7f390 (flow 8552db05): transferring output (try 0): successful, next state: unloading
2021/07/08 17:43:05 scheduler task 59e7f390 (flow 8552db05): unloading (try 0): started
2021/07/08 17:43:05 scheduler task 59e7f390 (flow 8552db05): unloading list<val<.=60a5d653 35.7MiB> 35.7MiB>
2021/07/08 17:43:05 scheduler task 59e7f390 (flow 8552db05): unloading val<.=7cf8c430 35.4MiB>
2021/07/08 17:43:05 scheduler task 59e7f390 (flow 8552db05): unloading val<.=12a6d16e 35.4MiB>
2021/07/08 17:43:05 scheduler task 2f95f0eb (flow 9906f8c4): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:43:05 scheduler task 2f95f0eb (flow 9906f8c4): promoting objects (try 0): started
2021/07/08 17:43:05 scheduler task 59e7f390 (flow 8552db05): unloaded list<val<.=60a5d653 35.7MiB> 35.7MiB>
2021/07/08 17:43:05 scheduler task 59e7f390 (flow 8552db05): unloaded val<.=12a6d16e 35.4MiB>
2021/07/08 17:43:05 scheduler task 59e7f390 (flow 8552db05): unloaded val<.=7cf8c430 35.4MiB>
2021/07/08 17:43:05 scheduler task 59e7f390 (flow 8552db05): unloading (try 0): successful, next state: complete
2021/07/08 17:43:05  <-  n100.r10.s059.Main.out_file 8552db05 ok     exec 4m52s 35.7MiB
2021/07/08 17:43:05 n100.r10.s059.Main.out_file 8552db05 n100/r10/n100.r10.s059.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:637222aa574d09d66af032039f1dc6bb8772cb7bd8d1e983d22815f3e36decb3
	sha256:8552db053e6c9f0d9465d46d83b590c253af4d2008435b3616e69131774dcbe6
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/59e7f3903b3e000f48b393ccfe328e6d20269947ce0b8e33b7556e54167e4d27
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s059_output"
	    wget -O "n100.r10.s059_output/n100.r10.s059.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s059_output/n100.r10.s059.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s059_output/n100.r10.s059.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s059_output/n100.r10.s059.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s059_output/n100.r10.s059.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s059_output/n100.r10.s059.reference.fas" "n100.r10.s059_output/n100.r10.s059.fq1.fastq" "n100.r10.s059_output/n100.r10.s059.fq2.fastq" | samtools view -bS - > "n100.r10.s059_output/n100.r10.s059.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s059_output/n100.r10.s059.untrimmed.sorted.bam" "n100.r10.s059_output/n100.r10.s059.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s059_output/n100.r10.s059.untrimmed.sorted.bam" -b "n100.r10.s059_output/n100.r10.s059.primers.bed" -p "n100.r10.s059_output/n100.r10.s059.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s059_output/n100.r10.s059.trimmed.sorted.bam" "n100.r10.s059_output/n100.r10.s059.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s059_output/n100.r10.s059.reference.fas" "n100.r10.s059_output/n100.r10.s059.trimmed.sorted.bam" > "n100.r10.s059_output/n100.r10.s059.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s059_output/n100.r10.s059.reference.fas" --call-indels "n100.r10.s059_output/n100.r10.s059.trimmed.sorted.bam" > "n100.r10.s059_output/n100.r10.s059.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s059_output/n100.r10.s059.trimmed.sorted.bam" > "n100.r10.s059_output/n100.r10.s059.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s059_output/n100.r10.s059.depth.txt" "n100.r10.s059_output/n100.r10.s059.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s059_output/n100.r10.s059.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s059_output/n100.r10.s059.reference.fas" | bcftools consensus -m "n100.r10.s059_output/n100.r10.s059.low_depth.tsv" tmp.vcf.gz > "n100.r10.s059_output/n100.r10.s059.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s059_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:60a5d65373c6e337ecf26aa3b752a5a4147500ed072a43a7e9582d0d0c3ed8d3 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.0MiB max=128.6MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=417B max=2.0KiB
2021/07/08 17:43:05 scheduler task c6247c65 (flow 71a0c2f6): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s059.tar.gz resources {}
2021/07/08 17:43:05  ->  n100.r10.s059.Main.cp_out_file 71a0c2f6 exec extern s3://niema-test/n100/r10/n100.r10.s059.tar.gz 35.7MiB
2021/07/08 17:43:05 scheduler task 207ede7a (flow 23b67a6f): transferring output (try 0): successful, next state: unloading
2021/07/08 17:43:05 scheduler task 207ede7a (flow 23b67a6f): unloading (try 0): started
2021/07/08 17:43:05 scheduler task 207ede7a (flow 23b67a6f): unloading list<val<.=730906f3 35.7MiB> 35.7MiB>
2021/07/08 17:43:05 scheduler task 207ede7a (flow 23b67a6f): unloading val<.=f8efcb81 35.4MiB>
2021/07/08 17:43:05 scheduler task 207ede7a (flow 23b67a6f): unloading val<.=37c6798c 35.4MiB>
2021/07/08 17:43:05 scheduler task 2f95f0eb (flow 9906f8c4): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:43:05 scheduler task 2f95f0eb (flow 9906f8c4): retrieving diagnostic output (try 0): started
2021/07/08 17:43:05 scheduler task 207ede7a (flow 23b67a6f): unloaded val<.=37c6798c 35.4MiB>
2021/07/08 17:43:05 scheduler task 207ede7a (flow 23b67a6f): unloaded val<.=f8efcb81 35.4MiB>
2021/07/08 17:43:05 scheduler task 207ede7a (flow 23b67a6f): unloaded list<val<.=730906f3 35.7MiB> 35.7MiB>
2021/07/08 17:43:05 scheduler task 207ede7a (flow 23b67a6f): unloading (try 0): successful, next state: complete
2021/07/08 17:43:05  <-  n100.r10.s082.Main.out_file 23b67a6f ok     exec 4m46s 35.7MiB
2021/07/08 17:43:05 n100.r10.s082.Main.out_file 23b67a6f n100/r10/n100.r10.s082.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:972f42d0942b69a75dff4a0d43346ab65ffa6337ee415b55ed8219ebf154cbd9
	sha256:23b67a6f10e7b93c9543d95c44df6f17f183b7b71d32842bbefd31b9638bbd30
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/207ede7a8ab3c35143a94c7e2f7426e2fd5d2dc1216b50cf96e90886975a846a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s082_output"
	    wget -O "n100.r10.s082_output/n100.r10.s082.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s082_output/n100.r10.s082.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s082_output/n100.r10.s082.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s082_output/n100.r10.s082.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s082_output/n100.r10.s082.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s082_output/n100.r10.s082.reference.fas" "n100.r10.s082_output/n100.r10.s082.fq1.fastq" "n100.r10.s082_output/n100.r10.s082.fq2.fastq" | samtools view -bS - > "n100.r10.s082_output/n100.r10.s082.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s082_output/n100.r10.s082.untrimmed.sorted.bam" "n100.r10.s082_output/n100.r10.s082.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s082_output/n100.r10.s082.untrimmed.sorted.bam" -b "n100.r10.s082_output/n100.r10.s082.primers.bed" -p "n100.r10.s082_output/n100.r10.s082.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s082_output/n100.r10.s082.trimmed.sorted.bam" "n100.r10.s082_output/n100.r10.s082.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s082_output/n100.r10.s082.reference.fas" "n100.r10.s082_output/n100.r10.s082.trimmed.sorted.bam" > "n100.r10.s082_output/n100.r10.s082.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s082_output/n100.r10.s082.reference.fas" --call-indels "n100.r10.s082_output/n100.r10.s082.trimmed.sorted.bam" > "n100.r10.s082_output/n100.r10.s082.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s082_output/n100.r10.s082.trimmed.sorted.bam" > "n100.r10.s082_output/n100.r10.s082.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s082_output/n100.r10.s082.depth.txt" "n100.r10.s082_output/n100.r10.s082.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s082_output/n100.r10.s082.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s082_output/n100.r10.s082.reference.fas" | bcftools consensus -m "n100.r10.s082_output/n100.r10.s082.low_depth.tsv" tmp.vcf.gz > "n100.r10.s082_output/n100.r10.s082.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s082_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:730906f3d0fa16a6c1b448cbb65960279627e67bf186958a44dd2b2a8070f023 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=23.1MiB max=129.1MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=419B max=2.0KiB
2021/07/08 17:43:05 scheduler task d12c605f (flow 4152f634): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s082.tar.gz resources {}
2021/07/08 17:43:05  ->  n100.r10.s082.Main.cp_out_file 4152f634 exec extern s3://niema-test/n100/r10/n100.r10.s082.tar.gz 35.7MiB
2021/07/08 17:43:05 scheduler task a74afbde (flow 76734b91): transferring output (try 0): successful, next state: unloading
2021/07/08 17:43:05 scheduler task a74afbde (flow 76734b91): unloading (try 0): started
2021/07/08 17:43:05 scheduler task a74afbde (flow 76734b91): unloading list<val<.=57d41af2 35.7MiB> 35.7MiB>
2021/07/08 17:43:05 scheduler task a74afbde (flow 76734b91): unloading val<.=c558fc4e 35.4MiB>
2021/07/08 17:43:05 scheduler task a74afbde (flow 76734b91): unloading val<.=ed5f6a92 35.4MiB>
2021/07/08 17:43:05 scheduler task 2f95f0eb (flow 9906f8c4): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:43:05 scheduler task 2f95f0eb (flow 9906f8c4): retrieving result (try 0): started
2021/07/08 17:43:05 scheduler task 09c401c4 (flow 22954720): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:43:05 scheduler task 09c401c4 (flow 22954720): promoting objects (try 0): started
2021/07/08 17:43:06 scheduler task a74afbde (flow 76734b91): unloaded val<.=ed5f6a92 35.4MiB>
2021/07/08 17:43:06 scheduler task a74afbde (flow 76734b91): unloaded val<.=c558fc4e 35.4MiB>
2021/07/08 17:43:06 scheduler task a74afbde (flow 76734b91): unloaded list<val<.=57d41af2 35.7MiB> 35.7MiB>
2021/07/08 17:43:06 scheduler task a74afbde (flow 76734b91): unloading (try 0): successful, next state: complete
2021/07/08 17:43:06 scheduler task 2f95f0eb (flow 9906f8c4): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:43:06  <-  n100.r10.s051.Main.out_file 76734b91 ok     exec 4m53s 35.7MiB
2021/07/08 17:43:06 n100.r10.s051.Main.out_file 76734b91 n100/r10/n100.r10.s051.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:34702a046003975e83de6da69586629aaeb342827512632701f24156775bbbe4
	sha256:76734b910902514638c21f9096d8d1defeb014c76edd03e91ab2e10fbca31718
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a74afbdeaf149be1a9a581d03450aa1f7e07914bffae26339bc7e21d74ce6dd6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s051_output"
	    wget -O "n100.r10.s051_output/n100.r10.s051.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s051_output/n100.r10.s051.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s051_output/n100.r10.s051.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s051_output/n100.r10.s051.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s051_output/n100.r10.s051.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s051_output/n100.r10.s051.reference.fas" "n100.r10.s051_output/n100.r10.s051.fq1.fastq" "n100.r10.s051_output/n100.r10.s051.fq2.fastq" | samtools view -bS - > "n100.r10.s051_output/n100.r10.s051.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s051_output/n100.r10.s051.untrimmed.sorted.bam" "n100.r10.s051_output/n100.r10.s051.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s051_output/n100.r10.s051.untrimmed.sorted.bam" -b "n100.r10.s051_output/n100.r10.s051.primers.bed" -p "n100.r10.s051_output/n100.r10.s051.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s051_output/n100.r10.s051.trimmed.sorted.bam" "n100.r10.s051_output/n100.r10.s051.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s051_output/n100.r10.s051.reference.fas" "n100.r10.s051_output/n100.r10.s051.trimmed.sorted.bam" > "n100.r10.s051_output/n100.r10.s051.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s051_output/n100.r10.s051.reference.fas" --call-indels "n100.r10.s051_output/n100.r10.s051.trimmed.sorted.bam" > "n100.r10.s051_output/n100.r10.s051.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s051_output/n100.r10.s051.trimmed.sorted.bam" > "n100.r10.s051_output/n100.r10.s051.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s051_output/n100.r10.s051.depth.txt" "n100.r10.s051_output/n100.r10.s051.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s051_output/n100.r10.s051.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s051_output/n100.r10.s051.reference.fas" | bcftools consensus -m "n100.r10.s051_output/n100.r10.s051.low_depth.tsv" tmp.vcf.gz > "n100.r10.s051_output/n100.r10.s051.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s051_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:57d41af2d10dc4ac6f5150e38bb83aaca62c736670b80d319b1ffbf927ef3478 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.9MiB max=130.6MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:43:06 scheduler task 6116f7be (flow 0cba01d3): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s051.tar.gz resources {}
2021/07/08 17:43:06  ->  n100.r10.s051.Main.cp_out_file 0cba01d3 exec extern s3://niema-test/n100/r10/n100.r10.s051.tar.gz 35.7MiB
2021/07/08 17:43:06 scheduler task 2f95f0eb (flow 9906f8c4): transferring output (try 0): started
2021/07/08 17:43:06 scheduler task 09c401c4 (flow 22954720): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:43:06 scheduler task 09c401c4 (flow 22954720): retrieving diagnostic output (try 0): started
2021/07/08 17:43:06 scheduler task 09c401c4 (flow 22954720): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:43:06 scheduler task 09c401c4 (flow 22954720): retrieving result (try 0): started
2021/07/08 17:43:06 scheduler task 09c401c4 (flow 22954720): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:43:06 scheduler task 5752c3a6 (flow a87ef3fd): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:5052070301a2a0868576df944bc4505937e2d90f90a63b0316b07d2a88f4ecb1 -> s3://niema-test/n100/r10/n100.r10.s050.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:43:06  <-  n100.r10.s050.Main.cp_out_file a87ef3fd ok   extern 0s 35.8MiB
2021/07/08 17:43:06 scheduler task 09c401c4 (flow 22954720): transferring output (try 0): started
2021/07/08 17:43:06 scheduler task 5916483e (flow 38a4c1e8): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:43:06 scheduler task 5916483e (flow 38a4c1e8): promoting objects (try 0): started
2021/07/08 17:43:06 scheduler task 5bdb0fe9 (flow 4233853e): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d6c0ba613ca5ad70c8d5d774b26f725051b5eb9e1cd9341c41facc9bf5ee998f -> s3://niema-test/n100/r10/n100.r10.s023.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:43:06  <-  n100.r10.s023.Main.cp_out_file 4233853e ok   extern 0s 35.7MiB
2021/07/08 17:43:06 scheduler task cc4d6c79 (flow a27124a9): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:43:06 scheduler task cc4d6c79 (flow a27124a9): promoting objects (try 0): started
2021/07/08 17:43:06 scheduler task 5916483e (flow 38a4c1e8): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:43:06 scheduler task 5916483e (flow 38a4c1e8): retrieving diagnostic output (try 0): started
2021/07/08 17:43:06 scheduler task cc4d6c79 (flow a27124a9): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:43:06 scheduler task cc4d6c79 (flow a27124a9): retrieving diagnostic output (try 0): started
2021/07/08 17:43:06 scheduler task 5916483e (flow 38a4c1e8): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:43:06 scheduler task 5916483e (flow 38a4c1e8): retrieving result (try 0): started
2021/07/08 17:43:06 scheduler task cc4d6c79 (flow a27124a9): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:43:06 scheduler task 74962e85 (flow 82727c77): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:43:06 scheduler task cc4d6c79 (flow a27124a9): retrieving result (try 0): started
2021/07/08 17:43:06 scheduler task 74962e85 (flow 82727c77): promoting objects (try 0): started
2021/07/08 17:43:06 scheduler task 2f95f0eb (flow 9906f8c4): transferring output (try 0): successful, next state: unloading
2021/07/08 17:43:06 scheduler task 2f95f0eb (flow 9906f8c4): unloading (try 0): started
2021/07/08 17:43:06 scheduler task 2f95f0eb (flow 9906f8c4): unloading list<val<.=4cdbc3f5 35.7MiB> 35.7MiB>
2021/07/08 17:43:06 scheduler task 2f95f0eb (flow 9906f8c4): unloading val<.=6a4a6cf6 35.4MiB>
2021/07/08 17:43:06 scheduler task 2f95f0eb (flow 9906f8c4): unloading val<.=1c080009 35.4MiB>
2021/07/08 17:43:06 scheduler task 5916483e (flow 38a4c1e8): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:43:06 scheduler task 5916483e (flow 38a4c1e8): transferring output (try 0): started
2021/07/08 17:43:06 scheduler task 6a4f6e23 (flow c0dbba66): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:43:06 scheduler task 6a4f6e23 (flow c0dbba66): promoting objects (try 0): started
2021/07/08 17:43:06 scheduler task cc4d6c79 (flow a27124a9): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:43:06 scheduler task 74962e85 (flow 82727c77): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:43:06 scheduler task cc4d6c79 (flow a27124a9): transferring output (try 0): started
2021/07/08 17:43:06 scheduler task 74962e85 (flow 82727c77): retrieving diagnostic output (try 0): started
2021/07/08 17:43:06 scheduler task 2f95f0eb (flow 9906f8c4): unloaded val<.=1c080009 35.4MiB>
2021/07/08 17:43:06 scheduler task 2f95f0eb (flow 9906f8c4): unloaded list<val<.=4cdbc3f5 35.7MiB> 35.7MiB>
2021/07/08 17:43:06 scheduler task c6247c65 (flow 71a0c2f6): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:60a5d65373c6e337ecf26aa3b752a5a4147500ed072a43a7e9582d0d0c3ed8d3 -> s3://niema-test/n100/r10/n100.r10.s059.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:43:06 scheduler task 2f95f0eb (flow 9906f8c4): unloaded val<.=6a4a6cf6 35.4MiB>
2021/07/08 17:43:06 scheduler task 2f95f0eb (flow 9906f8c4): unloading (try 0): successful, next state: complete
2021/07/08 17:43:06  <-  n100.r10.s059.Main.cp_out_file 71a0c2f6 ok   extern 0s 35.7MiB
2021/07/08 17:43:06  <-  n100.r10.s074.Main.out_file 9906f8c4 ok     exec 4m47s 35.7MiB
2021/07/08 17:43:06 n100.r10.s074.Main.out_file 9906f8c4 n100/r10/n100.r10.s074.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3cf5b2ab7317465f441091400034c38064202c50bdc1b4d0d4ff3dcf7d36b0c8
	sha256:9906f8c4775a1f24b08dbbfdf0346118a9ff64837d68808f000b135a7e8ee009
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2f95f0eb5fc28bb123434032b788fdebc54f8def8a11097c3ab33a601836b892
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s074_output"
	    wget -O "n100.r10.s074_output/n100.r10.s074.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s074_output/n100.r10.s074.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s074_output/n100.r10.s074.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s074_output/n100.r10.s074.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s074_output/n100.r10.s074.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s074_output/n100.r10.s074.reference.fas" "n100.r10.s074_output/n100.r10.s074.fq1.fastq" "n100.r10.s074_output/n100.r10.s074.fq2.fastq" | samtools view -bS - > "n100.r10.s074_output/n100.r10.s074.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s074_output/n100.r10.s074.untrimmed.sorted.bam" "n100.r10.s074_output/n100.r10.s074.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s074_output/n100.r10.s074.untrimmed.sorted.bam" -b "n100.r10.s074_output/n100.r10.s074.primers.bed" -p "n100.r10.s074_output/n100.r10.s074.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s074_output/n100.r10.s074.trimmed.sorted.bam" "n100.r10.s074_output/n100.r10.s074.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s074_output/n100.r10.s074.reference.fas" "n100.r10.s074_output/n100.r10.s074.trimmed.sorted.bam" > "n100.r10.s074_output/n100.r10.s074.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s074_output/n100.r10.s074.reference.fas" --call-indels "n100.r10.s074_output/n100.r10.s074.trimmed.sorted.bam" > "n100.r10.s074_output/n100.r10.s074.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s074_output/n100.r10.s074.trimmed.sorted.bam" > "n100.r10.s074_output/n100.r10.s074.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s074_output/n100.r10.s074.depth.txt" "n100.r10.s074_output/n100.r10.s074.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s074_output/n100.r10.s074.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s074_output/n100.r10.s074.reference.fas" | bcftools consensus -m "n100.r10.s074_output/n100.r10.s074.low_depth.tsv" tmp.vcf.gz > "n100.r10.s074_output/n100.r10.s074.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s074_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:4cdbc3f52daabfc56ce86f58519a41cb381acf83785dfb4d82c3f65b7896041c 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.6MiB max=127.9MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=420B max=2.1KiB
2021/07/08 17:43:06 scheduler task fec6ec32 (flow ae267c40): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s074.tar.gz resources {}
2021/07/08 17:43:06  ->  n100.r10.s074.Main.cp_out_file ae267c40 exec extern s3://niema-test/n100/r10/n100.r10.s074.tar.gz 35.7MiB
2021/07/08 17:43:06 scheduler task 6a4f6e23 (flow c0dbba66): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:43:06 scheduler task 09c401c4 (flow 22954720): transferring output (try 0): successful, next state: unloading
2021/07/08 17:43:06 scheduler task 6a4f6e23 (flow c0dbba66): retrieving diagnostic output (try 0): started
2021/07/08 17:43:06 scheduler task 09c401c4 (flow 22954720): unloading (try 0): started
2021/07/08 17:43:06 scheduler task 09c401c4 (flow 22954720): unloading list<val<.=4f6b7895 35.7MiB> 35.7MiB>
2021/07/08 17:43:06 scheduler task 09c401c4 (flow 22954720): unloading val<.=c3f918f0 35.4MiB>
2021/07/08 17:43:06 scheduler task 09c401c4 (flow 22954720): unloading val<.=8b16cfb4 35.4MiB>
2021/07/08 17:43:06 scheduler task 74962e85 (flow 82727c77): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:43:06 scheduler task 74962e85 (flow 82727c77): retrieving result (try 0): started
2021/07/08 17:43:06 scheduler task 3d965a50 (flow 14c2b5b4): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:43:06 scheduler task 3d965a50 (flow 14c2b5b4): promoting objects (try 0): started
2021/07/08 17:43:06 scheduler task 6a4f6e23 (flow c0dbba66): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:43:06 scheduler task 09c401c4 (flow 22954720): unloaded val<.=c3f918f0 35.4MiB>
2021/07/08 17:43:06 scheduler task 09c401c4 (flow 22954720): unloaded list<val<.=4f6b7895 35.7MiB> 35.7MiB>
2021/07/08 17:43:06 scheduler task 09c401c4 (flow 22954720): unloaded val<.=8b16cfb4 35.4MiB>
2021/07/08 17:43:06 scheduler task 09c401c4 (flow 22954720): unloading (try 0): successful, next state: complete
2021/07/08 17:43:06 scheduler task 6a4f6e23 (flow c0dbba66): retrieving result (try 0): started
2021/07/08 17:43:06 scheduler task 74962e85 (flow 82727c77): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:43:06  <-  n100.r10.s018.Main.out_file 22954720 ok     exec 4m48s 35.7MiB
2021/07/08 17:43:06 n100.r10.s018.Main.out_file 22954720 n100/r10/n100.r10.s018.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e07984b9a187fc257182f2ffac22be1471c21b5d94af6c26c8a2a47fc52e553a
	sha256:2295472073adc80918f32c1c8c2a077d1e4a924b5adeff9ac3faa7a405cd2b8f
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/09c401c4920a53a74df6a05fc3ac254046505d8a1257b96c2200517f2f773d3b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s018_output"
	    wget -O "n100.r10.s018_output/n100.r10.s018.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s018_output/n100.r10.s018.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s018_output/n100.r10.s018.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s018_output/n100.r10.s018.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s018_output/n100.r10.s018.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s018_output/n100.r10.s018.reference.fas" "n100.r10.s018_output/n100.r10.s018.fq1.fastq" "n100.r10.s018_output/n100.r10.s018.fq2.fastq" | samtools view -bS - > "n100.r10.s018_output/n100.r10.s018.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s018_output/n100.r10.s018.untrimmed.sorted.bam" "n100.r10.s018_output/n100.r10.s018.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s018_output/n100.r10.s018.untrimmed.sorted.bam" -b "n100.r10.s018_output/n100.r10.s018.primers.bed" -p "n100.r10.s018_output/n100.r10.s018.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s018_output/n100.r10.s018.trimmed.sorted.bam" "n100.r10.s018_output/n100.r10.s018.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s018_output/n100.r10.s018.reference.fas" "n100.r10.s018_output/n100.r10.s018.trimmed.sorted.bam" > "n100.r10.s018_output/n100.r10.s018.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s018_output/n100.r10.s018.reference.fas" --call-indels "n100.r10.s018_output/n100.r10.s018.trimmed.sorted.bam" > "n100.r10.s018_output/n100.r10.s018.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s018_output/n100.r10.s018.trimmed.sorted.bam" > "n100.r10.s018_output/n100.r10.s018.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s018_output/n100.r10.s018.depth.txt" "n100.r10.s018_output/n100.r10.s018.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s018_output/n100.r10.s018.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s018_output/n100.r10.s018.reference.fas" | bcftools consensus -m "n100.r10.s018_output/n100.r10.s018.low_depth.tsv" tmp.vcf.gz > "n100.r10.s018_output/n100.r10.s018.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s018_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:4f6b789598535329272c3c25dde3b9bf0ea45d331c086c6b9c960b0bc4e9e5c1 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.2MiB max=131.6MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=420B max=2.1KiB
2021/07/08 17:43:06 scheduler task dfc91090 (flow 2b8d019f): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s018.tar.gz resources {}
2021/07/08 17:43:06  ->  n100.r10.s018.Main.cp_out_file 2b8d019f exec extern s3://niema-test/n100/r10/n100.r10.s018.tar.gz 35.7MiB
2021/07/08 17:43:06 scheduler task 6116f7be (flow 0cba01d3): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:57d41af2d10dc4ac6f5150e38bb83aaca62c736670b80d319b1ffbf927ef3478 -> s3://niema-test/n100/r10/n100.r10.s051.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:43:06  <-  n100.r10.s051.Main.cp_out_file 0cba01d3 ok   extern 0s 35.7MiB
2021/07/08 17:43:06 scheduler task 74962e85 (flow 82727c77): transferring output (try 0): started
2021/07/08 17:43:06 scheduler task 3d965a50 (flow 14c2b5b4): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:43:06 scheduler task 3d965a50 (flow 14c2b5b4): retrieving diagnostic output (try 0): started
2021/07/08 17:43:06 scheduler task 6a4f6e23 (flow c0dbba66): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:43:06 scheduler task 6a4f6e23 (flow c0dbba66): transferring output (try 0): started
2021/07/08 17:43:06 scheduler task d12c605f (flow 4152f634): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:730906f3d0fa16a6c1b448cbb65960279627e67bf186958a44dd2b2a8070f023 -> s3://niema-test/n100/r10/n100.r10.s082.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:43:06  <-  n100.r10.s082.Main.cp_out_file 4152f634 ok   extern 0s 35.7MiB
2021/07/08 17:43:06 scheduler task 3d965a50 (flow 14c2b5b4): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:43:06 scheduler task 3d965a50 (flow 14c2b5b4): retrieving result (try 0): started
2021/07/08 17:43:07 scheduler task 3d965a50 (flow 14c2b5b4): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:43:07 scheduler task 3d965a50 (flow 14c2b5b4): transferring output (try 0): started
2021/07/08 17:43:07 scheduler task 5916483e (flow 38a4c1e8): transferring output (try 0): successful, next state: unloading
2021/07/08 17:43:07 scheduler task 5916483e (flow 38a4c1e8): unloading (try 0): started
2021/07/08 17:43:07 scheduler task 5916483e (flow 38a4c1e8): unloading list<val<.=1f5c18da 35.7MiB> 35.7MiB>
2021/07/08 17:43:07 scheduler task 5916483e (flow 38a4c1e8): unloading val<.=5a0f4a5b 35.4MiB>
2021/07/08 17:43:07 scheduler task 5916483e (flow 38a4c1e8): unloading val<.=6c302403 35.4MiB>
2021/07/08 17:43:07 scheduler task 5916483e (flow 38a4c1e8): unloaded val<.=5a0f4a5b 35.4MiB>
2021/07/08 17:43:07 scheduler task 5916483e (flow 38a4c1e8): unloaded list<val<.=1f5c18da 35.7MiB> 35.7MiB>
2021/07/08 17:43:07 scheduler task 5916483e (flow 38a4c1e8): unloaded val<.=6c302403 35.4MiB>
2021/07/08 17:43:07 scheduler task 5916483e (flow 38a4c1e8): unloading (try 0): successful, next state: complete
2021/07/08 17:43:07  <-  n100.r10.s093.Main.out_file 38a4c1e8 ok     exec 4m48s 35.7MiB
2021/07/08 17:43:07 n100.r10.s093.Main.out_file 38a4c1e8 n100/r10/n100.r10.s093.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b12d22ad0707d620de9859ab11511e8db2fa5f89c6722ec36b1dfddb98760762
	sha256:38a4c1e817ab162ee350cc72542832802a6ba1be1eb2d4a5ca55a52e9d06163b
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5916483ed751b6db7d0e05e4531a24bd2f7acdd6b9ced13cadbbad7097973539
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s093_output"
	    wget -O "n100.r10.s093_output/n100.r10.s093.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s093_output/n100.r10.s093.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s093_output/n100.r10.s093.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s093_output/n100.r10.s093.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s093_output/n100.r10.s093.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s093_output/n100.r10.s093.reference.fas" "n100.r10.s093_output/n100.r10.s093.fq1.fastq" "n100.r10.s093_output/n100.r10.s093.fq2.fastq" | samtools view -bS - > "n100.r10.s093_output/n100.r10.s093.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s093_output/n100.r10.s093.untrimmed.sorted.bam" "n100.r10.s093_output/n100.r10.s093.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s093_output/n100.r10.s093.untrimmed.sorted.bam" -b "n100.r10.s093_output/n100.r10.s093.primers.bed" -p "n100.r10.s093_output/n100.r10.s093.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s093_output/n100.r10.s093.trimmed.sorted.bam" "n100.r10.s093_output/n100.r10.s093.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s093_output/n100.r10.s093.reference.fas" "n100.r10.s093_output/n100.r10.s093.trimmed.sorted.bam" > "n100.r10.s093_output/n100.r10.s093.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s093_output/n100.r10.s093.reference.fas" --call-indels "n100.r10.s093_output/n100.r10.s093.trimmed.sorted.bam" > "n100.r10.s093_output/n100.r10.s093.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s093_output/n100.r10.s093.trimmed.sorted.bam" > "n100.r10.s093_output/n100.r10.s093.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s093_output/n100.r10.s093.depth.txt" "n100.r10.s093_output/n100.r10.s093.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s093_output/n100.r10.s093.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s093_output/n100.r10.s093.reference.fas" | bcftools consensus -m "n100.r10.s093_output/n100.r10.s093.low_depth.tsv" tmp.vcf.gz > "n100.r10.s093_output/n100.r10.s093.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s093_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:1f5c18da4e13997c7a140fb30ec738e52a3fa8e0c8ed8e0caa05c1aab46a0908 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.9MiB max=126.0MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=418B max=2.0KiB
2021/07/08 17:43:07 scheduler task 948279bc (flow 716431d4): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s093.tar.gz resources {}
2021/07/08 17:43:07  ->  n100.r10.s093.Main.cp_out_file 716431d4 exec extern s3://niema-test/n100/r10/n100.r10.s093.tar.gz 35.7MiB
2021/07/08 17:43:07 scheduler task 834ab569 (flow 9a69f4b2): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:43:07 scheduler task 834ab569 (flow 9a69f4b2): promoting objects (try 0): started
2021/07/08 17:43:07 scheduler task fec6ec32 (flow ae267c40): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:4cdbc3f52daabfc56ce86f58519a41cb381acf83785dfb4d82c3f65b7896041c -> s3://niema-test/n100/r10/n100.r10.s074.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:43:07  <-  n100.r10.s074.Main.cp_out_file ae267c40 ok   extern 0s 35.7MiB
2021/07/08 17:43:07 scheduler task 834ab569 (flow 9a69f4b2): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:43:07 scheduler task 834ab569 (flow 9a69f4b2): retrieving diagnostic output (try 0): started
2021/07/08 17:43:07 scheduler task 2093dfec (flow 324fb6cc): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:1becd23085e6c221d75be032df3e4bdb405d27eede3ef528066408d4c9902ab8 -> s3://niema-test/n100/r10/n100.r10.s043.tar.gz (35.7MiB) in 3s (11.9MiB/s) 
2021/07/08 17:43:07  <-  n100.r10.s043.Main.cp_out_file 324fb6cc ok   extern 0s 35.7MiB
2021/07/08 17:43:07 scheduler task 834ab569 (flow 9a69f4b2): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:43:07 scheduler task 834ab569 (flow 9a69f4b2): retrieving result (try 0): started
2021/07/08 17:43:07 scheduler task 834ab569 (flow 9a69f4b2): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:43:07 scheduler task 834ab569 (flow 9a69f4b2): transferring output (try 0): started
2021/07/08 17:43:07 scheduler task 74962e85 (flow 82727c77): transferring output (try 0): successful, next state: unloading
2021/07/08 17:43:07 scheduler task 74962e85 (flow 82727c77): unloading (try 0): started
2021/07/08 17:43:07 scheduler task 74962e85 (flow 82727c77): unloading list<val<.=537b145a 35.7MiB> 35.7MiB>
2021/07/08 17:43:07 scheduler task 74962e85 (flow 82727c77): unloading val<.=4c9100d2 35.4MiB>
2021/07/08 17:43:07 scheduler task 74962e85 (flow 82727c77): unloading val<.=f8f47ef4 35.4MiB>
2021/07/08 17:43:07 scheduler task 74962e85 (flow 82727c77): unloaded list<val<.=537b145a 35.7MiB> 35.7MiB>
2021/07/08 17:43:07 scheduler task 74962e85 (flow 82727c77): unloaded val<.=f8f47ef4 35.4MiB>
2021/07/08 17:43:07 scheduler task 74962e85 (flow 82727c77): unloaded val<.=4c9100d2 35.4MiB>
2021/07/08 17:43:07 scheduler task 74962e85 (flow 82727c77): unloading (try 0): successful, next state: complete
2021/07/08 17:43:07  <-  n100.r10.s098.Main.out_file 82727c77 ok     exec 4m48s 35.7MiB
2021/07/08 17:43:07 n100.r10.s098.Main.out_file 82727c77 n100/r10/n100.r10.s098.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:77cfd4432575475efe3819aadb2b882e526db411b76fd9a588208fa3b8364a3f
	sha256:82727c77cfbfceae90dfad571de33a21c0f5767a5e943b58243aee68a476bc3c
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/74962e85d5e299f11e74a1ca66471c4a6fc24eb764a91a3d364c062cadf89a27
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s098_output"
	    wget -O "n100.r10.s098_output/n100.r10.s098.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s098_output/n100.r10.s098.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s098_output/n100.r10.s098.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s098_output/n100.r10.s098.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s098_output/n100.r10.s098.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s098_output/n100.r10.s098.reference.fas" "n100.r10.s098_output/n100.r10.s098.fq1.fastq" "n100.r10.s098_output/n100.r10.s098.fq2.fastq" | samtools view -bS - > "n100.r10.s098_output/n100.r10.s098.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s098_output/n100.r10.s098.untrimmed.sorted.bam" "n100.r10.s098_output/n100.r10.s098.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s098_output/n100.r10.s098.untrimmed.sorted.bam" -b "n100.r10.s098_output/n100.r10.s098.primers.bed" -p "n100.r10.s098_output/n100.r10.s098.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s098_output/n100.r10.s098.trimmed.sorted.bam" "n100.r10.s098_output/n100.r10.s098.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s098_output/n100.r10.s098.reference.fas" "n100.r10.s098_output/n100.r10.s098.trimmed.sorted.bam" > "n100.r10.s098_output/n100.r10.s098.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s098_output/n100.r10.s098.reference.fas" --call-indels "n100.r10.s098_output/n100.r10.s098.trimmed.sorted.bam" > "n100.r10.s098_output/n100.r10.s098.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s098_output/n100.r10.s098.trimmed.sorted.bam" > "n100.r10.s098_output/n100.r10.s098.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s098_output/n100.r10.s098.depth.txt" "n100.r10.s098_output/n100.r10.s098.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s098_output/n100.r10.s098.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s098_output/n100.r10.s098.reference.fas" | bcftools consensus -m "n100.r10.s098_output/n100.r10.s098.low_depth.tsv" tmp.vcf.gz > "n100.r10.s098_output/n100.r10.s098.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s098_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:537b145a1f016badf8eebb80e90de98c3f0f7e9ed8f8da9a941b8d946a4bf544 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.8MiB max=130.9MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:43:07 scheduler task 92626684 (flow 8a20312b): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s098.tar.gz resources {}
2021/07/08 17:43:07  ->  n100.r10.s098.Main.cp_out_file 8a20312b exec extern s3://niema-test/n100/r10/n100.r10.s098.tar.gz 35.7MiB
2021/07/08 17:43:07 scheduler task 948279bc (flow 716431d4): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:1f5c18da4e13997c7a140fb30ec738e52a3fa8e0c8ed8e0caa05c1aab46a0908 -> s3://niema-test/n100/r10/n100.r10.s093.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:43:07  <-  n100.r10.s093.Main.cp_out_file 716431d4 ok   extern 0s 35.7MiB
2021/07/08 17:43:07 scheduler task cc4d6c79 (flow a27124a9): transferring output (try 0): successful, next state: unloading
2021/07/08 17:43:07 scheduler task cc4d6c79 (flow a27124a9): unloading (try 0): started
2021/07/08 17:43:07 scheduler task cc4d6c79 (flow a27124a9): unloading list<val<.=d2e8968c 35.8MiB> 35.8MiB>
2021/07/08 17:43:07 scheduler task cc4d6c79 (flow a27124a9): unloading val<.=9dbc36f2 35.4MiB>
2021/07/08 17:43:07 scheduler task cc4d6c79 (flow a27124a9): unloading val<.=a2ef1111 35.4MiB>
2021/07/08 17:43:07 scheduler task 3d965a50 (flow 14c2b5b4): transferring output (try 0): successful, next state: unloading
2021/07/08 17:43:07 scheduler task 3d965a50 (flow 14c2b5b4): unloading (try 0): started
2021/07/08 17:43:07 scheduler task 3d965a50 (flow 14c2b5b4): unloading list<val<.=e6455728 35.7MiB> 35.7MiB>
2021/07/08 17:43:07 scheduler task 3d965a50 (flow 14c2b5b4): unloading val<.=fcedf51c 35.4MiB>
2021/07/08 17:43:07 scheduler task 3d965a50 (flow 14c2b5b4): unloading val<.=dec601b4 35.4MiB>
2021/07/08 17:43:07 scheduler task 6a4f6e23 (flow c0dbba66): transferring output (try 0): successful, next state: unloading
2021/07/08 17:43:07 scheduler task cc4d6c79 (flow a27124a9): unloaded list<val<.=d2e8968c 35.8MiB> 35.8MiB>
2021/07/08 17:43:07 scheduler task cc4d6c79 (flow a27124a9): unloaded val<.=9dbc36f2 35.4MiB>
2021/07/08 17:43:07 scheduler task 6a4f6e23 (flow c0dbba66): unloading (try 0): started
2021/07/08 17:43:07 scheduler task 6a4f6e23 (flow c0dbba66): unloading list<val<.=0974cde5 35.7MiB> 35.7MiB>
2021/07/08 17:43:07 scheduler task 6a4f6e23 (flow c0dbba66): unloading val<.=a94a20d6 35.4MiB>
2021/07/08 17:43:07 scheduler task 6a4f6e23 (flow c0dbba66): unloading val<.=5c447fd6 35.4MiB>
2021/07/08 17:43:07 scheduler task cc4d6c79 (flow a27124a9): unloaded val<.=a2ef1111 35.4MiB>
2021/07/08 17:43:07 scheduler task cc4d6c79 (flow a27124a9): unloading (try 0): successful, next state: complete
2021/07/08 17:43:07  <-  n100.r10.s024.Main.out_file a27124a9 ok     exec 4m48s 35.8MiB
2021/07/08 17:43:07 n100.r10.s024.Main.out_file a27124a9 n100/r10/n100.r10.s024.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d6e2847bb65f81517093390b96dc1066a41f23ae0ac386c643712ce1079264ae
	sha256:a27124a9934b201d01cefc0dd960232e764555372d66541266f77bf5b6b8fbfc
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cc4d6c794d652579700bac0309d2d4658a777c3219df52a7121250c056d155ce
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s024_output"
	    wget -O "n100.r10.s024_output/n100.r10.s024.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s024_output/n100.r10.s024.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s024_output/n100.r10.s024.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s024_output/n100.r10.s024.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s024_output/n100.r10.s024.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s024_output/n100.r10.s024.reference.fas" "n100.r10.s024_output/n100.r10.s024.fq1.fastq" "n100.r10.s024_output/n100.r10.s024.fq2.fastq" | samtools view -bS - > "n100.r10.s024_output/n100.r10.s024.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s024_output/n100.r10.s024.untrimmed.sorted.bam" "n100.r10.s024_output/n100.r10.s024.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s024_output/n100.r10.s024.untrimmed.sorted.bam" -b "n100.r10.s024_output/n100.r10.s024.primers.bed" -p "n100.r10.s024_output/n100.r10.s024.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s024_output/n100.r10.s024.trimmed.sorted.bam" "n100.r10.s024_output/n100.r10.s024.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s024_output/n100.r10.s024.reference.fas" "n100.r10.s024_output/n100.r10.s024.trimmed.sorted.bam" > "n100.r10.s024_output/n100.r10.s024.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s024_output/n100.r10.s024.reference.fas" --call-indels "n100.r10.s024_output/n100.r10.s024.trimmed.sorted.bam" > "n100.r10.s024_output/n100.r10.s024.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s024_output/n100.r10.s024.trimmed.sorted.bam" > "n100.r10.s024_output/n100.r10.s024.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s024_output/n100.r10.s024.depth.txt" "n100.r10.s024_output/n100.r10.s024.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s024_output/n100.r10.s024.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s024_output/n100.r10.s024.reference.fas" | bcftools consensus -m "n100.r10.s024_output/n100.r10.s024.low_depth.tsv" tmp.vcf.gz > "n100.r10.s024_output/n100.r10.s024.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s024_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d2e8968c7cded3c8d8178a351f8a02868846fcd077c1b2d3963a21ba849d5b38 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.6MiB max=130.7MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:43:07 scheduler task bb36a648 (flow f8d5af19): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s024.tar.gz resources {}
2021/07/08 17:43:07  ->  n100.r10.s024.Main.cp_out_file f8d5af19 exec extern s3://niema-test/n100/r10/n100.r10.s024.tar.gz 35.8MiB
2021/07/08 17:43:07 scheduler task dfc91090 (flow 2b8d019f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:4f6b789598535329272c3c25dde3b9bf0ea45d331c086c6b9c960b0bc4e9e5c1 -> s3://niema-test/n100/r10/n100.r10.s018.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:43:07  <-  n100.r10.s018.Main.cp_out_file 2b8d019f ok   extern 0s 35.7MiB
2021/07/08 17:43:07 scheduler task 3d965a50 (flow 14c2b5b4): unloaded list<val<.=e6455728 35.7MiB> 35.7MiB>
2021/07/08 17:43:07 scheduler task 3d965a50 (flow 14c2b5b4): unloaded val<.=fcedf51c 35.4MiB>
2021/07/08 17:43:07 scheduler task 3d965a50 (flow 14c2b5b4): unloaded val<.=dec601b4 35.4MiB>
2021/07/08 17:43:07 scheduler task 3d965a50 (flow 14c2b5b4): unloading (try 0): successful, next state: complete
2021/07/08 17:43:07 scheduler task 6a4f6e23 (flow c0dbba66): unloaded val<.=5c447fd6 35.4MiB>
2021/07/08 17:43:07 scheduler task 6a4f6e23 (flow c0dbba66): unloaded list<val<.=0974cde5 35.7MiB> 35.7MiB>
2021/07/08 17:43:07 scheduler task 6a4f6e23 (flow c0dbba66): unloaded val<.=a94a20d6 35.4MiB>
2021/07/08 17:43:07 scheduler task 6a4f6e23 (flow c0dbba66): unloading (try 0): successful, next state: complete
2021/07/08 17:43:08  <-  n100.r10.s031.Main.out_file 14c2b5b4 ok     exec 4m54s 35.7MiB
2021/07/08 17:43:08 n100.r10.s031.Main.out_file 14c2b5b4 n100/r10/n100.r10.s031.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:894136fa3ce1caa128e503f0fea392af1de228d5af8c1f37d6b0ce2348de0b37
	sha256:14c2b5b4ef39890a5c7b765250779118c989671d8e2a321f66af10df8579cbac
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3d965a50179d12bf03ecbf4a4202033b909d26e3a5a50e175e500f33c3e52524
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s031_output"
	    wget -O "n100.r10.s031_output/n100.r10.s031.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s031_output/n100.r10.s031.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s031_output/n100.r10.s031.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s031_output/n100.r10.s031.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s031_output/n100.r10.s031.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s031_output/n100.r10.s031.reference.fas" "n100.r10.s031_output/n100.r10.s031.fq1.fastq" "n100.r10.s031_output/n100.r10.s031.fq2.fastq" | samtools view -bS - > "n100.r10.s031_output/n100.r10.s031.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s031_output/n100.r10.s031.untrimmed.sorted.bam" "n100.r10.s031_output/n100.r10.s031.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s031_output/n100.r10.s031.untrimmed.sorted.bam" -b "n100.r10.s031_output/n100.r10.s031.primers.bed" -p "n100.r10.s031_output/n100.r10.s031.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s031_output/n100.r10.s031.trimmed.sorted.bam" "n100.r10.s031_output/n100.r10.s031.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s031_output/n100.r10.s031.reference.fas" "n100.r10.s031_output/n100.r10.s031.trimmed.sorted.bam" > "n100.r10.s031_output/n100.r10.s031.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s031_output/n100.r10.s031.reference.fas" --call-indels "n100.r10.s031_output/n100.r10.s031.trimmed.sorted.bam" > "n100.r10.s031_output/n100.r10.s031.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s031_output/n100.r10.s031.trimmed.sorted.bam" > "n100.r10.s031_output/n100.r10.s031.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s031_output/n100.r10.s031.depth.txt" "n100.r10.s031_output/n100.r10.s031.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s031_output/n100.r10.s031.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s031_output/n100.r10.s031.reference.fas" | bcftools consensus -m "n100.r10.s031_output/n100.r10.s031.low_depth.tsv" tmp.vcf.gz > "n100.r10.s031_output/n100.r10.s031.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s031_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:e64557283112e775904197420ac97b5d8b72b1828e192c7bb1713c26a53be20f 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.9MiB max=128.3MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=421B max=2.1KiB
2021/07/08 17:43:08 scheduler task bc703452 (flow 9bc3508c): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s031.tar.gz resources {}
2021/07/08 17:43:08  ->  n100.r10.s031.Main.cp_out_file 9bc3508c exec extern s3://niema-test/n100/r10/n100.r10.s031.tar.gz 35.7MiB
2021/07/08 17:43:08  <-  n100.r10.s053.Main.out_file c0dbba66 ok     exec 4m48s 35.7MiB
2021/07/08 17:43:08 n100.r10.s053.Main.out_file c0dbba66 n100/r10/n100.r10.s053.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:0d2d7674d0773e8a603bbed89aa4130956c158288c5e0dd038255b1e228639a7
	sha256:c0dbba668e9025a360f75f4892b5d7292c7b9149cb67c09b983619021dd4a94d
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6a4f6e23ecd9a0385014042560202ae369f76cfc62bf3d84dc38f2d1e102b8c9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s053_output"
	    wget -O "n100.r10.s053_output/n100.r10.s053.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s053_output/n100.r10.s053.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s053_output/n100.r10.s053.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s053_output/n100.r10.s053.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s053_output/n100.r10.s053.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s053_output/n100.r10.s053.reference.fas" "n100.r10.s053_output/n100.r10.s053.fq1.fastq" "n100.r10.s053_output/n100.r10.s053.fq2.fastq" | samtools view -bS - > "n100.r10.s053_output/n100.r10.s053.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s053_output/n100.r10.s053.untrimmed.sorted.bam" "n100.r10.s053_output/n100.r10.s053.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s053_output/n100.r10.s053.untrimmed.sorted.bam" -b "n100.r10.s053_output/n100.r10.s053.primers.bed" -p "n100.r10.s053_output/n100.r10.s053.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s053_output/n100.r10.s053.trimmed.sorted.bam" "n100.r10.s053_output/n100.r10.s053.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s053_output/n100.r10.s053.reference.fas" "n100.r10.s053_output/n100.r10.s053.trimmed.sorted.bam" > "n100.r10.s053_output/n100.r10.s053.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s053_output/n100.r10.s053.reference.fas" --call-indels "n100.r10.s053_output/n100.r10.s053.trimmed.sorted.bam" > "n100.r10.s053_output/n100.r10.s053.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s053_output/n100.r10.s053.trimmed.sorted.bam" > "n100.r10.s053_output/n100.r10.s053.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s053_output/n100.r10.s053.depth.txt" "n100.r10.s053_output/n100.r10.s053.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s053_output/n100.r10.s053.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s053_output/n100.r10.s053.reference.fas" | bcftools consensus -m "n100.r10.s053_output/n100.r10.s053.low_depth.tsv" tmp.vcf.gz > "n100.r10.s053_output/n100.r10.s053.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s053_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:0974cde59cd01dc767b5e60cfba62d3a0299933259e4b6391b2a40bd2db4539c 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.6MiB max=129.5MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=419B max=2.0KiB
2021/07/08 17:43:08 scheduler task 3abc1c40 (flow 34cac3d7): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s053.tar.gz resources {}
2021/07/08 17:43:08  ->  n100.r10.s053.Main.cp_out_file 34cac3d7 exec extern s3://niema-test/n100/r10/n100.r10.s053.tar.gz 35.7MiB
2021/07/08 17:43:08 scheduler task 834ab569 (flow 9a69f4b2): transferring output (try 0): successful, next state: unloading
2021/07/08 17:43:08 scheduler task 834ab569 (flow 9a69f4b2): unloading (try 0): started
2021/07/08 17:43:08 scheduler task 834ab569 (flow 9a69f4b2): unloading list<val<.=e1e32afd 35.7MiB> 35.7MiB>
2021/07/08 17:43:08 scheduler task 834ab569 (flow 9a69f4b2): unloading val<.=ea4e5843 35.4MiB>
2021/07/08 17:43:08 scheduler task 834ab569 (flow 9a69f4b2): unloading val<.=aa441f3d 35.4MiB>
2021/07/08 17:43:08 scheduler task 36958e06 (flow c159c17e): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:43:08 scheduler task 834ab569 (flow 9a69f4b2): unloaded list<val<.=e1e32afd 35.7MiB> 35.7MiB>
2021/07/08 17:43:08 scheduler task 834ab569 (flow 9a69f4b2): unloaded val<.=ea4e5843 35.4MiB>
2021/07/08 17:43:08 scheduler task 834ab569 (flow 9a69f4b2): unloaded val<.=aa441f3d 35.4MiB>
2021/07/08 17:43:08 scheduler task 834ab569 (flow 9a69f4b2): unloading (try 0): successful, next state: complete
2021/07/08 17:43:08 scheduler task 36958e06 (flow c159c17e): promoting objects (try 0): started
2021/07/08 17:43:08  <-  n100.r10.s087.Main.out_file 9a69f4b2 ok     exec 4m49s 35.7MiB
2021/07/08 17:43:08 n100.r10.s087.Main.out_file 9a69f4b2 n100/r10/n100.r10.s087.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5611cefc0cc1099ad263164faf3b8608ad2d4af12b4c2fdecab6dc14e894db21
	sha256:9a69f4b2f78f4acd934e16756e9ee17c144592709b5287172fad4399a42f3b61
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/834ab5692b7cc901d20a026de501048c10cfc80a55eed8c61ff223d390abe834
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s087_output"
	    wget -O "n100.r10.s087_output/n100.r10.s087.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s087_output/n100.r10.s087.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s087_output/n100.r10.s087.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s087_output/n100.r10.s087.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s087_output/n100.r10.s087.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s087_output/n100.r10.s087.reference.fas" "n100.r10.s087_output/n100.r10.s087.fq1.fastq" "n100.r10.s087_output/n100.r10.s087.fq2.fastq" | samtools view -bS - > "n100.r10.s087_output/n100.r10.s087.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s087_output/n100.r10.s087.untrimmed.sorted.bam" "n100.r10.s087_output/n100.r10.s087.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s087_output/n100.r10.s087.untrimmed.sorted.bam" -b "n100.r10.s087_output/n100.r10.s087.primers.bed" -p "n100.r10.s087_output/n100.r10.s087.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s087_output/n100.r10.s087.trimmed.sorted.bam" "n100.r10.s087_output/n100.r10.s087.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s087_output/n100.r10.s087.reference.fas" "n100.r10.s087_output/n100.r10.s087.trimmed.sorted.bam" > "n100.r10.s087_output/n100.r10.s087.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s087_output/n100.r10.s087.reference.fas" --call-indels "n100.r10.s087_output/n100.r10.s087.trimmed.sorted.bam" > "n100.r10.s087_output/n100.r10.s087.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s087_output/n100.r10.s087.trimmed.sorted.bam" > "n100.r10.s087_output/n100.r10.s087.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s087_output/n100.r10.s087.depth.txt" "n100.r10.s087_output/n100.r10.s087.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s087_output/n100.r10.s087.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s087_output/n100.r10.s087.reference.fas" | bcftools consensus -m "n100.r10.s087_output/n100.r10.s087.low_depth.tsv" tmp.vcf.gz > "n100.r10.s087_output/n100.r10.s087.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s087_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:e1e32afd3da32bdffb535f35266cba56d2cea1868a432d1fde9d8dc8c143dcf1 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.0MiB max=127.8MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=419B max=2.0KiB
2021/07/08 17:43:08 scheduler task 3cd8d60f (flow 255946f8): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s087.tar.gz resources {}
2021/07/08 17:43:08  ->  n100.r10.s087.Main.cp_out_file 255946f8 exec extern s3://niema-test/n100/r10/n100.r10.s087.tar.gz 35.7MiB
2021/07/08 17:43:08 scheduler task 6020e9b3 (flow 50fe0d18): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:43:08 scheduler task 6020e9b3 (flow 50fe0d18): promoting objects (try 0): started
2021/07/08 17:43:08 scheduler task 36958e06 (flow c159c17e): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:43:08 scheduler task 36958e06 (flow c159c17e): retrieving diagnostic output (try 0): started
2021/07/08 17:43:08 scheduler task 6020e9b3 (flow 50fe0d18): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:43:08 scheduler task 92626684 (flow 8a20312b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:537b145a1f016badf8eebb80e90de98c3f0f7e9ed8f8da9a941b8d946a4bf544 -> s3://niema-test/n100/r10/n100.r10.s098.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:43:08  <-  n100.r10.s098.Main.cp_out_file 8a20312b ok   extern 0s 35.7MiB
2021/07/08 17:43:08 scheduler task 6020e9b3 (flow 50fe0d18): retrieving diagnostic output (try 0): started
2021/07/08 17:43:08 scheduler task 36958e06 (flow c159c17e): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:43:08 scheduler task 36958e06 (flow c159c17e): retrieving result (try 0): started
2021/07/08 17:43:08 scheduler task 6020e9b3 (flow 50fe0d18): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:43:08 scheduler task 6020e9b3 (flow 50fe0d18): retrieving result (try 0): started
2021/07/08 17:43:08 scheduler task 36958e06 (flow c159c17e): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:43:08 scheduler task 36958e06 (flow c159c17e): transferring output (try 0): started
2021/07/08 17:43:08 scheduler task 6020e9b3 (flow 50fe0d18): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:43:08 scheduler task 6020e9b3 (flow 50fe0d18): transferring output (try 0): started
2021/07/08 17:43:08 scheduler task b4908e4d (flow 735398ea): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:43:08 scheduler task b4908e4d (flow 735398ea): promoting objects (try 0): started
2021/07/08 17:43:08 scheduler task 2e8ecf12 (flow 1925ed71): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:43:08 scheduler task 2e8ecf12 (flow 1925ed71): promoting objects (try 0): started
2021/07/08 17:43:08 scheduler task b4908e4d (flow 735398ea): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:43:08 scheduler task 2e8ecf12 (flow 1925ed71): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:43:08 scheduler task b4908e4d (flow 735398ea): retrieving diagnostic output (try 0): started
2021/07/08 17:43:08 scheduler task 2e8ecf12 (flow 1925ed71): retrieving diagnostic output (try 0): started
2021/07/08 17:43:08 scheduler task bc703452 (flow 9bc3508c): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:e64557283112e775904197420ac97b5d8b72b1828e192c7bb1713c26a53be20f -> s3://niema-test/n100/r10/n100.r10.s031.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:43:08 scheduler task 3abc1c40 (flow 34cac3d7): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:0974cde59cd01dc767b5e60cfba62d3a0299933259e4b6391b2a40bd2db4539c -> s3://niema-test/n100/r10/n100.r10.s053.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:43:08  <-  n100.r10.s031.Main.cp_out_file 9bc3508c ok   extern 0s 35.7MiB
2021/07/08 17:43:08  <-  n100.r10.s053.Main.cp_out_file 34cac3d7 ok   extern 0s 35.7MiB
2021/07/08 17:43:08 scheduler task b4908e4d (flow 735398ea): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:43:08 scheduler task 2e8ecf12 (flow 1925ed71): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:43:08 scheduler task b4908e4d (flow 735398ea): retrieving result (try 0): started
2021/07/08 17:43:08 scheduler task 2e8ecf12 (flow 1925ed71): retrieving result (try 0): started
2021/07/08 17:43:08 scheduler task b4908e4d (flow 735398ea): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:43:08 scheduler task 2e8ecf12 (flow 1925ed71): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:43:08 scheduler task b4908e4d (flow 735398ea): transferring output (try 0): started
2021/07/08 17:43:08 scheduler task 2e8ecf12 (flow 1925ed71): transferring output (try 0): started
2021/07/08 17:43:08 scheduler task 36958e06 (flow c159c17e): transferring output (try 0): successful, next state: unloading
2021/07/08 17:43:08 scheduler task bb36a648 (flow f8d5af19): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d2e8968c7cded3c8d8178a351f8a02868846fcd077c1b2d3963a21ba849d5b38 -> s3://niema-test/n100/r10/n100.r10.s024.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:43:08  <-  n100.r10.s024.Main.cp_out_file f8d5af19 ok   extern 0s 35.8MiB
2021/07/08 17:43:08 scheduler task 36958e06 (flow c159c17e): unloading (try 0): started
2021/07/08 17:43:08 scheduler task 36958e06 (flow c159c17e): unloading list<val<.=909e133d 35.8MiB> 35.8MiB>
2021/07/08 17:43:08 scheduler task 36958e06 (flow c159c17e): unloading val<.=b61d69ee 35.4MiB>
2021/07/08 17:43:08 scheduler task 36958e06 (flow c159c17e): unloading val<.=0600be40 35.4MiB>
2021/07/08 17:43:08 scheduler task 6020e9b3 (flow 50fe0d18): transferring output (try 0): successful, next state: unloading
2021/07/08 17:43:09 scheduler task 6020e9b3 (flow 50fe0d18): unloading (try 0): started
2021/07/08 17:43:09 scheduler task 6020e9b3 (flow 50fe0d18): unloading list<val<.=b553e91a 35.7MiB> 35.7MiB>
2021/07/08 17:43:09 scheduler task 6020e9b3 (flow 50fe0d18): unloading val<.=b3c28f15 35.4MiB>
2021/07/08 17:43:09 scheduler task 6020e9b3 (flow 50fe0d18): unloading val<.=0a83ad80 35.4MiB>
2021/07/08 17:43:09 scheduler task 2139bff7 (flow d781b4f4): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:43:09 scheduler task 3cd8d60f (flow 255946f8): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:e1e32afd3da32bdffb535f35266cba56d2cea1868a432d1fde9d8dc8c143dcf1 -> s3://niema-test/n100/r10/n100.r10.s087.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:43:09  <-  n100.r10.s087.Main.cp_out_file 255946f8 ok   extern 0s 35.7MiB
2021/07/08 17:43:09 scheduler task 2139bff7 (flow d781b4f4): promoting objects (try 0): started
2021/07/08 17:43:09 scheduler task 36958e06 (flow c159c17e): unloaded val<.=b61d69ee 35.4MiB>
2021/07/08 17:43:09 scheduler task 36958e06 (flow c159c17e): unloaded list<val<.=909e133d 35.8MiB> 35.8MiB>
2021/07/08 17:43:09 scheduler task 36958e06 (flow c159c17e): unloaded val<.=0600be40 35.4MiB>
2021/07/08 17:43:09 scheduler task 36958e06 (flow c159c17e): unloading (try 0): successful, next state: complete
2021/07/08 17:43:09  <-  n100.r10.s028.Main.out_file c159c17e ok     exec 4m49s 35.8MiB
2021/07/08 17:43:09 n100.r10.s028.Main.out_file c159c17e n100/r10/n100.r10.s028.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:71542303c03d9145b2538e13302d1b2e90c3c4af0bb165e3a98fa99c31ebd49f
	sha256:c159c17ea9b2ce3f571419c51552c07761890e0b93e25927e3d090db115edadb
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/36958e06c70f71b457f4d0221fb7c81a840ece39de5f62cb2aed13ce9b4f3266
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s028_output"
	    wget -O "n100.r10.s028_output/n100.r10.s028.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s028_output/n100.r10.s028.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s028_output/n100.r10.s028.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s028_output/n100.r10.s028.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s028_output/n100.r10.s028.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s028_output/n100.r10.s028.reference.fas" "n100.r10.s028_output/n100.r10.s028.fq1.fastq" "n100.r10.s028_output/n100.r10.s028.fq2.fastq" | samtools view -bS - > "n100.r10.s028_output/n100.r10.s028.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s028_output/n100.r10.s028.untrimmed.sorted.bam" "n100.r10.s028_output/n100.r10.s028.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s028_output/n100.r10.s028.untrimmed.sorted.bam" -b "n100.r10.s028_output/n100.r10.s028.primers.bed" -p "n100.r10.s028_output/n100.r10.s028.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s028_output/n100.r10.s028.trimmed.sorted.bam" "n100.r10.s028_output/n100.r10.s028.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s028_output/n100.r10.s028.reference.fas" "n100.r10.s028_output/n100.r10.s028.trimmed.sorted.bam" > "n100.r10.s028_output/n100.r10.s028.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s028_output/n100.r10.s028.reference.fas" --call-indels "n100.r10.s028_output/n100.r10.s028.trimmed.sorted.bam" > "n100.r10.s028_output/n100.r10.s028.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s028_output/n100.r10.s028.trimmed.sorted.bam" > "n100.r10.s028_output/n100.r10.s028.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s028_output/n100.r10.s028.depth.txt" "n100.r10.s028_output/n100.r10.s028.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s028_output/n100.r10.s028.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s028_output/n100.r10.s028.reference.fas" | bcftools consensus -m "n100.r10.s028_output/n100.r10.s028.low_depth.tsv" tmp.vcf.gz > "n100.r10.s028_output/n100.r10.s028.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s028_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:909e133d8d379f55793456bfdb85e2a3e479227a1f8f7a2e29216ddb5b546750 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.6MiB max=124.8MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:43:09 scheduler task 7cd041ae (flow 1c51a30b): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s028.tar.gz resources {}
2021/07/08 17:43:09  ->  n100.r10.s028.Main.cp_out_file 1c51a30b exec extern s3://niema-test/n100/r10/n100.r10.s028.tar.gz 35.8MiB
2021/07/08 17:43:09 scheduler task 6020e9b3 (flow 50fe0d18): unloaded val<.=b3c28f15 35.4MiB>
2021/07/08 17:43:09 scheduler task 6020e9b3 (flow 50fe0d18): unloaded list<val<.=b553e91a 35.7MiB> 35.7MiB>
2021/07/08 17:43:09 scheduler task 6020e9b3 (flow 50fe0d18): unloaded val<.=0a83ad80 35.4MiB>
2021/07/08 17:43:09 scheduler task 6020e9b3 (flow 50fe0d18): unloading (try 0): successful, next state: complete
2021/07/08 17:43:09 scheduler task 2139bff7 (flow d781b4f4): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:43:09  <-  n100.r10.s094.Main.out_file 50fe0d18 ok     exec 4m50s 35.7MiB
2021/07/08 17:43:09 n100.r10.s094.Main.out_file 50fe0d18 n100/r10/n100.r10.s094.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6cf72baaab7d5ec2930509458d7055b583979fdfb462dd1988b3797e691873b1
	sha256:50fe0d181863a5f781838c66a0f38f34b838db01a082498003fca980f4198fcf
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6020e9b3cf1d2bcb9c68b31bf9ad0acbf3ddec06870ab8835ca06444f6a987a8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s094_output"
	    wget -O "n100.r10.s094_output/n100.r10.s094.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s094_output/n100.r10.s094.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s094_output/n100.r10.s094.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s094_output/n100.r10.s094.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s094_output/n100.r10.s094.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s094_output/n100.r10.s094.reference.fas" "n100.r10.s094_output/n100.r10.s094.fq1.fastq" "n100.r10.s094_output/n100.r10.s094.fq2.fastq" | samtools view -bS - > "n100.r10.s094_output/n100.r10.s094.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s094_output/n100.r10.s094.untrimmed.sorted.bam" "n100.r10.s094_output/n100.r10.s094.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s094_output/n100.r10.s094.untrimmed.sorted.bam" -b "n100.r10.s094_output/n100.r10.s094.primers.bed" -p "n100.r10.s094_output/n100.r10.s094.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s094_output/n100.r10.s094.trimmed.sorted.bam" "n100.r10.s094_output/n100.r10.s094.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s094_output/n100.r10.s094.reference.fas" "n100.r10.s094_output/n100.r10.s094.trimmed.sorted.bam" > "n100.r10.s094_output/n100.r10.s094.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s094_output/n100.r10.s094.reference.fas" --call-indels "n100.r10.s094_output/n100.r10.s094.trimmed.sorted.bam" > "n100.r10.s094_output/n100.r10.s094.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s094_output/n100.r10.s094.trimmed.sorted.bam" > "n100.r10.s094_output/n100.r10.s094.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s094_output/n100.r10.s094.depth.txt" "n100.r10.s094_output/n100.r10.s094.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s094_output/n100.r10.s094.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s094_output/n100.r10.s094.reference.fas" | bcftools consensus -m "n100.r10.s094_output/n100.r10.s094.low_depth.tsv" tmp.vcf.gz > "n100.r10.s094_output/n100.r10.s094.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s094_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:b553e91ac5d0050b0c67db6f2e58348be91f43808c5b2a74507445c2f5258b7d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=23.2MiB max=129.0MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:43:09 scheduler task 699e1de1 (flow 6e48ef54): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s094.tar.gz resources {}
2021/07/08 17:43:09  ->  n100.r10.s094.Main.cp_out_file 6e48ef54 exec extern s3://niema-test/n100/r10/n100.r10.s094.tar.gz 35.7MiB
2021/07/08 17:43:09 scheduler task 2139bff7 (flow d781b4f4): retrieving diagnostic output (try 0): started
2021/07/08 17:43:09 scheduler task 2139bff7 (flow d781b4f4): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:43:09 scheduler task 2139bff7 (flow d781b4f4): retrieving result (try 0): started
2021/07/08 17:43:09 scheduler task b4908e4d (flow 735398ea): transferring output (try 0): successful, next state: unloading
2021/07/08 17:43:09 scheduler task b4908e4d (flow 735398ea): unloading (try 0): started
2021/07/08 17:43:09 scheduler task b4908e4d (flow 735398ea): unloading list<val<.=7671ba4c 35.7MiB> 35.7MiB>
2021/07/08 17:43:09 scheduler task b4908e4d (flow 735398ea): unloading val<.=d9bb6905 35.4MiB>
2021/07/08 17:43:09 scheduler task b4908e4d (flow 735398ea): unloading val<.=f13c4316 35.4MiB>
2021/07/08 17:43:09 scheduler task 2139bff7 (flow d781b4f4): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:43:09 scheduler task 2139bff7 (flow d781b4f4): transferring output (try 0): started
2021/07/08 17:43:09 scheduler task 2e8ecf12 (flow 1925ed71): transferring output (try 0): successful, next state: unloading
2021/07/08 17:43:09 scheduler task 2e8ecf12 (flow 1925ed71): unloading (try 0): started
2021/07/08 17:43:09 scheduler task 2e8ecf12 (flow 1925ed71): unloading list<val<.=fedbddc7 35.8MiB> 35.8MiB>
2021/07/08 17:43:09 scheduler task 2e8ecf12 (flow 1925ed71): unloading val<.=d178af12 35.4MiB>
2021/07/08 17:43:09 scheduler task 2e8ecf12 (flow 1925ed71): unloading val<.=c5df1348 35.4MiB>
2021/07/08 17:43:09 scheduler task b4908e4d (flow 735398ea): unloaded list<val<.=7671ba4c 35.7MiB> 35.7MiB>
2021/07/08 17:43:09 scheduler task b4908e4d (flow 735398ea): unloaded val<.=f13c4316 35.4MiB>
2021/07/08 17:43:09 scheduler task b4908e4d (flow 735398ea): unloaded val<.=d9bb6905 35.4MiB>
2021/07/08 17:43:09 scheduler task b4908e4d (flow 735398ea): unloading (try 0): successful, next state: complete
2021/07/08 17:43:09  <-  n100.r10.s075.Main.out_file 735398ea ok     exec 4m50s 35.7MiB
2021/07/08 17:43:09 n100.r10.s075.Main.out_file 735398ea n100/r10/n100.r10.s075.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:218e9820f3dbb0cd6b26cc4d253218d4f2f3819f5b39c2bcd53d6365cdd7f966
	sha256:735398ea3af999027c1b6f19020381280cea5075948cbe1d380b58e6639cdb29
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b4908e4de6bce379ffbcdd7b11e322a78f59ca94f4f468a8e887c06140475b0f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s075_output"
	    wget -O "n100.r10.s075_output/n100.r10.s075.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s075_output/n100.r10.s075.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s075_output/n100.r10.s075.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s075_output/n100.r10.s075.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s075_output/n100.r10.s075.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s075_output/n100.r10.s075.reference.fas" "n100.r10.s075_output/n100.r10.s075.fq1.fastq" "n100.r10.s075_output/n100.r10.s075.fq2.fastq" | samtools view -bS - > "n100.r10.s075_output/n100.r10.s075.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s075_output/n100.r10.s075.untrimmed.sorted.bam" "n100.r10.s075_output/n100.r10.s075.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s075_output/n100.r10.s075.untrimmed.sorted.bam" -b "n100.r10.s075_output/n100.r10.s075.primers.bed" -p "n100.r10.s075_output/n100.r10.s075.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s075_output/n100.r10.s075.trimmed.sorted.bam" "n100.r10.s075_output/n100.r10.s075.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s075_output/n100.r10.s075.reference.fas" "n100.r10.s075_output/n100.r10.s075.trimmed.sorted.bam" > "n100.r10.s075_output/n100.r10.s075.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s075_output/n100.r10.s075.reference.fas" --call-indels "n100.r10.s075_output/n100.r10.s075.trimmed.sorted.bam" > "n100.r10.s075_output/n100.r10.s075.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s075_output/n100.r10.s075.trimmed.sorted.bam" > "n100.r10.s075_output/n100.r10.s075.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s075_output/n100.r10.s075.depth.txt" "n100.r10.s075_output/n100.r10.s075.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s075_output/n100.r10.s075.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s075_output/n100.r10.s075.reference.fas" | bcftools consensus -m "n100.r10.s075_output/n100.r10.s075.low_depth.tsv" tmp.vcf.gz > "n100.r10.s075_output/n100.r10.s075.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s075_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:7671ba4c799289a03e28d827e78beb9aafcbf6ac31c09f3d549bd444182f3d32 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.7MiB max=130.5MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:43:09 scheduler task da74e7bf (flow 093b8aff): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s075.tar.gz resources {}
2021/07/08 17:43:09  ->  n100.r10.s075.Main.cp_out_file 093b8aff exec extern s3://niema-test/n100/r10/n100.r10.s075.tar.gz 35.7MiB
2021/07/08 17:43:09 scheduler task 2e8ecf12 (flow 1925ed71): unloaded list<val<.=fedbddc7 35.8MiB> 35.8MiB>
2021/07/08 17:43:09 scheduler task 2e8ecf12 (flow 1925ed71): unloaded val<.=c5df1348 35.4MiB>
2021/07/08 17:43:09 scheduler task 2e8ecf12 (flow 1925ed71): unloaded val<.=d178af12 35.4MiB>
2021/07/08 17:43:09 scheduler task 2e8ecf12 (flow 1925ed71): unloading (try 0): successful, next state: complete
2021/07/08 17:43:09  <-  n100.r10.s063.Main.out_file 1925ed71 ok     exec 4m50s 35.8MiB
2021/07/08 17:43:09 n100.r10.s063.Main.out_file 1925ed71 n100/r10/n100.r10.s063.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3dac571cba8e573a09ffd6f270bfc57d06cb7ca60d532f2be71625a8c2d80702
	sha256:1925ed717d5d5db7996e38b037b6e927a182e8aa8fb9926088145bf0b1268435
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2e8ecf12ab5240c59c9f40456e688f431bbb90fa99721398eeb4496edbc4a9a5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s063_output"
	    wget -O "n100.r10.s063_output/n100.r10.s063.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s063_output/n100.r10.s063.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s063_output/n100.r10.s063.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s063_output/n100.r10.s063.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s063_output/n100.r10.s063.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s063_output/n100.r10.s063.reference.fas" "n100.r10.s063_output/n100.r10.s063.fq1.fastq" "n100.r10.s063_output/n100.r10.s063.fq2.fastq" | samtools view -bS - > "n100.r10.s063_output/n100.r10.s063.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s063_output/n100.r10.s063.untrimmed.sorted.bam" "n100.r10.s063_output/n100.r10.s063.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s063_output/n100.r10.s063.untrimmed.sorted.bam" -b "n100.r10.s063_output/n100.r10.s063.primers.bed" -p "n100.r10.s063_output/n100.r10.s063.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s063_output/n100.r10.s063.trimmed.sorted.bam" "n100.r10.s063_output/n100.r10.s063.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s063_output/n100.r10.s063.reference.fas" "n100.r10.s063_output/n100.r10.s063.trimmed.sorted.bam" > "n100.r10.s063_output/n100.r10.s063.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s063_output/n100.r10.s063.reference.fas" --call-indels "n100.r10.s063_output/n100.r10.s063.trimmed.sorted.bam" > "n100.r10.s063_output/n100.r10.s063.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s063_output/n100.r10.s063.trimmed.sorted.bam" > "n100.r10.s063_output/n100.r10.s063.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s063_output/n100.r10.s063.depth.txt" "n100.r10.s063_output/n100.r10.s063.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s063_output/n100.r10.s063.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s063_output/n100.r10.s063.reference.fas" | bcftools consensus -m "n100.r10.s063_output/n100.r10.s063.low_depth.tsv" tmp.vcf.gz > "n100.r10.s063_output/n100.r10.s063.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s063_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:fedbddc7843672c42b917d2ea05ae447579cf6bacdd71e19c0d50614b0b2b10a 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.0MiB max=131.3MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=417B max=2.0KiB
2021/07/08 17:43:09 scheduler task b9f477d8 (flow 544162bf): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s063.tar.gz resources {}
2021/07/08 17:43:09  ->  n100.r10.s063.Main.cp_out_file 544162bf exec extern s3://niema-test/n100/r10/n100.r10.s063.tar.gz 35.8MiB
2021/07/08 17:43:09 scheduler task bc1a220d (flow 5b1cd59e): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:43:09 scheduler task bc1a220d (flow 5b1cd59e): promoting objects (try 0): started
2021/07/08 17:43:09 scheduler task bc1a220d (flow 5b1cd59e): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:43:09 scheduler task bc1a220d (flow 5b1cd59e): retrieving diagnostic output (try 0): started
2021/07/08 17:43:09 scheduler task bc1a220d (flow 5b1cd59e): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:43:09 scheduler task bc1a220d (flow 5b1cd59e): retrieving result (try 0): started
2021/07/08 17:43:09 scheduler task 2139bff7 (flow d781b4f4): transferring output (try 0): successful, next state: unloading
2021/07/08 17:43:09 scheduler task bc1a220d (flow 5b1cd59e): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:43:09 scheduler task 2139bff7 (flow d781b4f4): unloading (try 0): started
2021/07/08 17:43:09 scheduler task 2139bff7 (flow d781b4f4): unloading list<val<.=2010382f 35.7MiB> 35.7MiB>
2021/07/08 17:43:09 scheduler task 2139bff7 (flow d781b4f4): unloading val<.=72624098 35.4MiB>
2021/07/08 17:43:09 scheduler task 2139bff7 (flow d781b4f4): unloading val<.=67f166b6 35.4MiB>
2021/07/08 17:43:09 scheduler task 7cd041ae (flow 1c51a30b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:909e133d8d379f55793456bfdb85e2a3e479227a1f8f7a2e29216ddb5b546750 -> s3://niema-test/n100/r10/n100.r10.s028.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:43:09  <-  n100.r10.s028.Main.cp_out_file 1c51a30b ok   extern 0s 35.8MiB
2021/07/08 17:43:09 scheduler task bc1a220d (flow 5b1cd59e): transferring output (try 0): started
2021/07/08 17:43:09 scheduler task 699e1de1 (flow 6e48ef54): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:b553e91ac5d0050b0c67db6f2e58348be91f43808c5b2a74507445c2f5258b7d -> s3://niema-test/n100/r10/n100.r10.s094.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:43:09  <-  n100.r10.s094.Main.cp_out_file 6e48ef54 ok   extern 0s 35.7MiB
2021/07/08 17:43:09 scheduler task 2139bff7 (flow d781b4f4): unloaded val<.=72624098 35.4MiB>
2021/07/08 17:43:09 scheduler task 2139bff7 (flow d781b4f4): unloaded list<val<.=2010382f 35.7MiB> 35.7MiB>
2021/07/08 17:43:09 scheduler task 2139bff7 (flow d781b4f4): unloaded val<.=67f166b6 35.4MiB>
2021/07/08 17:43:09 scheduler task 2139bff7 (flow d781b4f4): unloading (try 0): successful, next state: complete
2021/07/08 17:43:09  <-  n100.r10.s034.Main.out_file d781b4f4 ok     exec 4m51s 35.7MiB
2021/07/08 17:43:09 n100.r10.s034.Main.out_file d781b4f4 n100/r10/n100.r10.s034.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ec161fce7d5aca1963f3485556851189bf032c7163edd07cdcc2a80e1dfcafe5
	sha256:d781b4f4a8a4a6bca3092795f3992230871c10f4c0b77f3b2c53590f9d8d3633
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2139bff721a04c6cfda94d526f225633814cb0352c9e5edb04492bbe470909a6
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s034_output"
	    wget -O "n100.r10.s034_output/n100.r10.s034.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s034_output/n100.r10.s034.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s034_output/n100.r10.s034.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s034_output/n100.r10.s034.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s034_output/n100.r10.s034.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s034_output/n100.r10.s034.reference.fas" "n100.r10.s034_output/n100.r10.s034.fq1.fastq" "n100.r10.s034_output/n100.r10.s034.fq2.fastq" | samtools view -bS - > "n100.r10.s034_output/n100.r10.s034.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s034_output/n100.r10.s034.untrimmed.sorted.bam" "n100.r10.s034_output/n100.r10.s034.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s034_output/n100.r10.s034.untrimmed.sorted.bam" -b "n100.r10.s034_output/n100.r10.s034.primers.bed" -p "n100.r10.s034_output/n100.r10.s034.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s034_output/n100.r10.s034.trimmed.sorted.bam" "n100.r10.s034_output/n100.r10.s034.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s034_output/n100.r10.s034.reference.fas" "n100.r10.s034_output/n100.r10.s034.trimmed.sorted.bam" > "n100.r10.s034_output/n100.r10.s034.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s034_output/n100.r10.s034.reference.fas" --call-indels "n100.r10.s034_output/n100.r10.s034.trimmed.sorted.bam" > "n100.r10.s034_output/n100.r10.s034.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s034_output/n100.r10.s034.trimmed.sorted.bam" > "n100.r10.s034_output/n100.r10.s034.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s034_output/n100.r10.s034.depth.txt" "n100.r10.s034_output/n100.r10.s034.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s034_output/n100.r10.s034.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s034_output/n100.r10.s034.reference.fas" | bcftools consensus -m "n100.r10.s034_output/n100.r10.s034.low_depth.tsv" tmp.vcf.gz > "n100.r10.s034_output/n100.r10.s034.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s034_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:2010382f29722ccaa69527e9bac036f1a928a4eddd0b136f2af04475c688e85a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=23.4MiB max=132.2MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:43:09 scheduler task f1b8b1dc (flow 63459ce5): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s034.tar.gz resources {}
2021/07/08 17:43:09  ->  n100.r10.s034.Main.cp_out_file 63459ce5 exec extern s3://niema-test/n100/r10/n100.r10.s034.tar.gz 35.7MiB
2021/07/08 17:43:10 scheduler task 3a2d4435 (flow 8e8257f7): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 17:43:10 scheduler task 3a2d4435 (flow 8e8257f7): promoting objects (try 0): started
2021/07/08 17:43:10 scheduler task 3a2d4435 (flow 8e8257f7): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 17:43:10 scheduler task 3a2d4435 (flow 8e8257f7): retrieving diagnostic output (try 0): started
2021/07/08 17:43:10 scheduler task 3a2d4435 (flow 8e8257f7): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 17:43:10 scheduler task b9f477d8 (flow 544162bf): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:fedbddc7843672c42b917d2ea05ae447579cf6bacdd71e19c0d50614b0b2b10a -> s3://niema-test/n100/r10/n100.r10.s063.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 17:43:10  <-  n100.r10.s063.Main.cp_out_file 544162bf ok   extern 0s 35.8MiB
2021/07/08 17:43:10 scheduler task 3a2d4435 (flow 8e8257f7): retrieving result (try 0): started
2021/07/08 17:43:10 scheduler task bc1a220d (flow 5b1cd59e): transferring output (try 0): successful, next state: unloading
2021/07/08 17:43:10 scheduler task bc1a220d (flow 5b1cd59e): unloading (try 0): started
2021/07/08 17:43:10 scheduler task bc1a220d (flow 5b1cd59e): unloading list<val<.=cc9462cc 35.7MiB> 35.7MiB>
2021/07/08 17:43:10 scheduler task bc1a220d (flow 5b1cd59e): unloading val<.=42243999 35.4MiB>
2021/07/08 17:43:10 scheduler task bc1a220d (flow 5b1cd59e): unloading val<.=fbe10159 35.4MiB>
2021/07/08 17:43:10 scheduler task 3a2d4435 (flow 8e8257f7): retrieving result (try 0): successful, next state: transferring output
2021/07/08 17:43:10 scheduler task da74e7bf (flow 093b8aff): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:7671ba4c799289a03e28d827e78beb9aafcbf6ac31c09f3d549bd444182f3d32 -> s3://niema-test/n100/r10/n100.r10.s075.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:43:10  <-  n100.r10.s075.Main.cp_out_file 093b8aff ok   extern 0s 35.7MiB
2021/07/08 17:43:10 scheduler task 3a2d4435 (flow 8e8257f7): transferring output (try 0): started
2021/07/08 17:43:10 scheduler task bc1a220d (flow 5b1cd59e): unloaded val<.=fbe10159 35.4MiB>
2021/07/08 17:43:10 scheduler task bc1a220d (flow 5b1cd59e): unloaded val<.=42243999 35.4MiB>
2021/07/08 17:43:10 scheduler task bc1a220d (flow 5b1cd59e): unloaded list<val<.=cc9462cc 35.7MiB> 35.7MiB>
2021/07/08 17:43:10 scheduler task bc1a220d (flow 5b1cd59e): unloading (try 0): successful, next state: complete
2021/07/08 17:43:10  <-  n100.r10.s044.Main.out_file 5b1cd59e ok     exec 4m51s 35.7MiB
2021/07/08 17:43:10 n100.r10.s044.Main.out_file 5b1cd59e n100/r10/n100.r10.s044.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5dd4b6e5a0f300634a1623356ae0ee45d18bd9942f39c81f1af0b1ad99158d22
	sha256:5b1cd59e26de0e555841e3190891e3eff27520721ff758421eedb57e4b32e56e
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bc1a220d00d522a199f7f9f01e4c77bf81519ef0e8e436ed14cb7ef961f2ae15
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s044_output"
	    wget -O "n100.r10.s044_output/n100.r10.s044.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s044_output/n100.r10.s044.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s044_output/n100.r10.s044.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s044_output/n100.r10.s044.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s044_output/n100.r10.s044.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s044_output/n100.r10.s044.reference.fas" "n100.r10.s044_output/n100.r10.s044.fq1.fastq" "n100.r10.s044_output/n100.r10.s044.fq2.fastq" | samtools view -bS - > "n100.r10.s044_output/n100.r10.s044.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s044_output/n100.r10.s044.untrimmed.sorted.bam" "n100.r10.s044_output/n100.r10.s044.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s044_output/n100.r10.s044.untrimmed.sorted.bam" -b "n100.r10.s044_output/n100.r10.s044.primers.bed" -p "n100.r10.s044_output/n100.r10.s044.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s044_output/n100.r10.s044.trimmed.sorted.bam" "n100.r10.s044_output/n100.r10.s044.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s044_output/n100.r10.s044.reference.fas" "n100.r10.s044_output/n100.r10.s044.trimmed.sorted.bam" > "n100.r10.s044_output/n100.r10.s044.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s044_output/n100.r10.s044.reference.fas" --call-indels "n100.r10.s044_output/n100.r10.s044.trimmed.sorted.bam" > "n100.r10.s044_output/n100.r10.s044.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s044_output/n100.r10.s044.trimmed.sorted.bam" > "n100.r10.s044_output/n100.r10.s044.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s044_output/n100.r10.s044.depth.txt" "n100.r10.s044_output/n100.r10.s044.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s044_output/n100.r10.s044.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s044_output/n100.r10.s044.reference.fas" | bcftools consensus -m "n100.r10.s044_output/n100.r10.s044.low_depth.tsv" tmp.vcf.gz > "n100.r10.s044_output/n100.r10.s044.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s044_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:cc9462ccbf4e952243d8cdfdcdad112811198ff5a228631fd000ea2a42d19d56 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.6MiB max=127.0MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 17:43:10 scheduler task a5b79b73 (flow 49e17c4d): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s044.tar.gz resources {}
2021/07/08 17:43:10  ->  n100.r10.s044.Main.cp_out_file 49e17c4d exec extern s3://niema-test/n100/r10/n100.r10.s044.tar.gz 35.7MiB
2021/07/08 17:43:10 scheduler task f1b8b1dc (flow 63459ce5): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:2010382f29722ccaa69527e9bac036f1a928a4eddd0b136f2af04475c688e85a -> s3://niema-test/n100/r10/n100.r10.s034.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:43:10  <-  n100.r10.s034.Main.cp_out_file 63459ce5 ok   extern 0s 35.7MiB
2021/07/08 17:43:10 scheduler task 3a2d4435 (flow 8e8257f7): transferring output (try 0): successful, next state: unloading
2021/07/08 17:43:10 scheduler task 3a2d4435 (flow 8e8257f7): unloading (try 0): started
2021/07/08 17:43:10 scheduler task 3a2d4435 (flow 8e8257f7): unloading list<val<.=b5034479 35.7MiB> 35.7MiB>
2021/07/08 17:43:10 scheduler task 3a2d4435 (flow 8e8257f7): unloading val<.=8fcddf63 35.4MiB>
2021/07/08 17:43:10 scheduler task 3a2d4435 (flow 8e8257f7): unloading val<.=96f7ecad 35.4MiB>
2021/07/08 17:43:10 scheduler task 3a2d4435 (flow 8e8257f7): unloaded val<.=96f7ecad 35.4MiB>
2021/07/08 17:43:10 scheduler task 3a2d4435 (flow 8e8257f7): unloaded list<val<.=b5034479 35.7MiB> 35.7MiB>
2021/07/08 17:43:10 scheduler task 3a2d4435 (flow 8e8257f7): unloaded val<.=8fcddf63 35.4MiB>
2021/07/08 17:43:10 scheduler task 3a2d4435 (flow 8e8257f7): unloading (try 0): successful, next state: complete
2021/07/08 17:43:10  <-  n100.r10.s004.Main.out_file 8e8257f7 ok     exec 4m51s 35.7MiB
2021/07/08 17:43:10 n100.r10.s004.Main.out_file 8e8257f7 n100/r10/n100.r10.s004.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d33af64f2151f09488a5e81855c50f6d3575d4d55848413d5553b6cdf1f99921
	sha256:8e8257f7fb133e65330c0c3d1b03d0898c365f9e42494e788d58a4ea0abf788e
	ec2-3-141-46-15.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3a2d4435b32c9fe8c7783226ccb71704bd663b98156e6a67847cbaa52e8d6a6b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r10.s004_output"
	    wget -O "n100.r10.s004_output/n100.r10.s004.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r10.s004_output/n100.r10.s004.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r10.s004_output/n100.r10.s004.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r10.s004_output/n100.r10.s004.fq1.fastq"
	    cp "{{fq2}}" "n100.r10.s004_output/n100.r10.s004.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r10.s004_output/n100.r10.s004.reference.fas" "n100.r10.s004_output/n100.r10.s004.fq1.fastq" "n100.r10.s004_output/n100.r10.s004.fq2.fastq" | samtools view -bS - > "n100.r10.s004_output/n100.r10.s004.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s004_output/n100.r10.s004.untrimmed.sorted.bam" "n100.r10.s004_output/n100.r10.s004.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r10.s004_output/n100.r10.s004.untrimmed.sorted.bam" -b "n100.r10.s004_output/n100.r10.s004.primers.bed" -p "n100.r10.s004_output/n100.r10.s004.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r10.s004_output/n100.r10.s004.trimmed.sorted.bam" "n100.r10.s004_output/n100.r10.s004.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r10.s004_output/n100.r10.s004.reference.fas" "n100.r10.s004_output/n100.r10.s004.trimmed.sorted.bam" > "n100.r10.s004_output/n100.r10.s004.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r10.s004_output/n100.r10.s004.reference.fas" --call-indels "n100.r10.s004_output/n100.r10.s004.trimmed.sorted.bam" > "n100.r10.s004_output/n100.r10.s004.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r10.s004_output/n100.r10.s004.trimmed.sorted.bam" > "n100.r10.s004_output/n100.r10.s004.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r10.s004_output/n100.r10.s004.depth.txt" "n100.r10.s004_output/n100.r10.s004.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r10.s004_output/n100.r10.s004.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r10.s004_output/n100.r10.s004.reference.fas" | bcftools consensus -m "n100.r10.s004_output/n100.r10.s004.low_depth.tsv" tmp.vcf.gz > "n100.r10.s004_output/n100.r10.s004.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r10.s004_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:b50344792422f304b36209d71945d8b678633a1c669ac5d8af40fe9f9de8337d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=23.7MiB max=129.2MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 17:43:10 scheduler task 5eb4f40a (flow bb45d1bc): submitted with execconfig extern url s3://niema-test/n100/r10/n100.r10.s004.tar.gz resources {}
2021/07/08 17:43:10  ->  n100.r10.s004.Main.cp_out_file bb45d1bc exec extern s3://niema-test/n100/r10/n100.r10.s004.tar.gz 35.7MiB
2021/07/08 17:43:11 scheduler task a5b79b73 (flow 49e17c4d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:cc9462ccbf4e952243d8cdfdcdad112811198ff5a228631fd000ea2a42d19d56 -> s3://niema-test/n100/r10/n100.r10.s044.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:43:11  <-  n100.r10.s044.Main.cp_out_file 49e17c4d ok   extern 0s 35.7MiB
2021/07/08 17:43:11 scheduler task 5eb4f40a (flow bb45d1bc): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:b50344792422f304b36209d71945d8b678633a1c669ac5d8af40fe9f9de8337d -> s3://niema-test/n100/r10/n100.r10.s004.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 17:43:11  <-  n100.r10.s004.Main.cp_out_file bb45d1bc ok   extern 0s 35.7MiB
2021/07/08 17:43:11 total n=400 time=6m36s
	ident                          n   ncache transfer runtime(m) cpu         mem(GiB)    disk(GiB)   tmp(GiB) requested
	n100.r10.s001.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s001.Main.fq1         1   0      0B                                                      
	n100.r10.s001.Main.fq2         1   0      0B                                                      
	n100.r10.s001.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s002.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s002.Main.fq1         1   0      0B                                                      
	n100.r10.s002.Main.fq2         1   0      0B                                                      
	n100.r10.s002.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s003.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s003.Main.fq1         1   0      0B                                                      
	n100.r10.s003.Main.fq2         1   0      0B                                                      
	n100.r10.s003.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s004.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s004.Main.fq1         1   0      0B                                                      
	n100.r10.s004.Main.fq2         1   0      0B                                                      
	n100.r10.s004.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s005.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s005.Main.fq1         1   0      0B                                                      
	n100.r10.s005.Main.fq2         1   0      0B                                                      
	n100.r10.s005.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s006.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s006.Main.fq1         1   0      0B                                                      
	n100.r10.s006.Main.fq2         1   0      0B                                                      
	n100.r10.s006.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s007.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s007.Main.fq1         1   0      0B                                                      
	n100.r10.s007.Main.fq2         1   0      0B                                                      
	n100.r10.s007.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s008.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s008.Main.fq1         1   0      0B                                                      
	n100.r10.s008.Main.fq2         1   0      0B                                                      
	n100.r10.s008.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s009.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s009.Main.fq1         1   0      0B                                                      
	n100.r10.s009.Main.fq2         1   0      0B                                                      
	n100.r10.s009.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s010.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s010.Main.fq1         1   0      0B                                                      
	n100.r10.s010.Main.fq2         1   0      0B                                                      
	n100.r10.s010.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s011.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s011.Main.fq1         1   0      0B                                                      
	n100.r10.s011.Main.fq2         1   0      0B                                                      
	n100.r10.s011.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s012.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s012.Main.fq1         1   0      0B                                                      
	n100.r10.s012.Main.fq2         1   0      0B                                                      
	n100.r10.s012.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s013.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s013.Main.fq1         1   0      0B                                                      
	n100.r10.s013.Main.fq2         1   0      0B                                                      
	n100.r10.s013.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s014.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s014.Main.fq1         1   0      0B                                                      
	n100.r10.s014.Main.fq2         1   0      0B                                                      
	n100.r10.s014.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s015.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s015.Main.fq1         1   0      0B                                                      
	n100.r10.s015.Main.fq2         1   0      0B                                                      
	n100.r10.s015.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s016.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s016.Main.fq1         1   0      0B                                                      
	n100.r10.s016.Main.fq2         1   0      0B                                                      
	n100.r10.s016.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s017.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s017.Main.fq1         1   0      0B                                                      
	n100.r10.s017.Main.fq2         1   0      0B                                                      
	n100.r10.s017.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s018.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s018.Main.fq1         1   0      0B                                                      
	n100.r10.s018.Main.fq2         1   0      0B                                                      
	n100.r10.s018.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s019.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s019.Main.fq1         1   0      0B                                                      
	n100.r10.s019.Main.fq2         1   0      0B                                                      
	n100.r10.s019.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s020.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s020.Main.fq1         1   0      0B                                                      
	n100.r10.s020.Main.fq2         1   0      0B                                                      
	n100.r10.s020.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s021.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s021.Main.fq1         1   0      0B                                                      
	n100.r10.s021.Main.fq2         1   0      0B                                                      
	n100.r10.s021.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s022.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s022.Main.fq1         1   0      0B                                                      
	n100.r10.s022.Main.fq2         1   0      0B                                                      
	n100.r10.s022.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s023.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s023.Main.fq1         1   0      0B                                                      
	n100.r10.s023.Main.fq2         1   0      0B                                                      
	n100.r10.s023.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s024.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s024.Main.fq1         1   0      0B                                                      
	n100.r10.s024.Main.fq2         1   0      0B                                                      
	n100.r10.s024.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s025.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s025.Main.fq1         1   0      0B                                                      
	n100.r10.s025.Main.fq2         1   0      0B                                                      
	n100.r10.s025.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s026.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s026.Main.fq1         1   0      0B                                                      
	n100.r10.s026.Main.fq2         1   0      0B                                                      
	n100.r10.s026.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s027.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s027.Main.fq1         1   0      0B                                                      
	n100.r10.s027.Main.fq2         1   0      0B                                                      
	n100.r10.s027.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s028.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s028.Main.fq1         1   0      0B                                                      
	n100.r10.s028.Main.fq2         1   0      0B                                                      
	n100.r10.s028.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s029.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s029.Main.fq1         1   0      0B                                                      
	n100.r10.s029.Main.fq2         1   0      0B                                                      
	n100.r10.s029.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s030.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s030.Main.fq1         1   0      0B                                                      
	n100.r10.s030.Main.fq2         1   0      0B                                                      
	n100.r10.s030.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s031.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s031.Main.fq1         1   0      0B                                                      
	n100.r10.s031.Main.fq2         1   0      0B                                                      
	n100.r10.s031.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s032.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s032.Main.fq1         1   0      0B                                                      
	n100.r10.s032.Main.fq2         1   0      0B                                                      
	n100.r10.s032.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s033.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s033.Main.fq1         1   0      0B                                                      
	n100.r10.s033.Main.fq2         1   0      0B                                                      
	n100.r10.s033.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s034.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s034.Main.fq1         1   0      0B                                                      
	n100.r10.s034.Main.fq2         1   0      0B                                                      
	n100.r10.s034.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s035.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s035.Main.fq1         1   0      0B                                                      
	n100.r10.s035.Main.fq2         1   0      0B                                                      
	n100.r10.s035.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s036.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s036.Main.fq1         1   0      0B                                                      
	n100.r10.s036.Main.fq2         1   0      0B                                                      
	n100.r10.s036.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s037.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s037.Main.fq1         1   0      0B                                                      
	n100.r10.s037.Main.fq2         1   0      0B                                                      
	n100.r10.s037.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s038.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s038.Main.fq1         1   0      0B                                                      
	n100.r10.s038.Main.fq2         1   0      0B                                                      
	n100.r10.s038.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s039.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s039.Main.fq1         1   0      0B                                                      
	n100.r10.s039.Main.fq2         1   0      0B                                                      
	n100.r10.s039.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s040.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s040.Main.fq1         1   0      0B                                                      
	n100.r10.s040.Main.fq2         1   0      0B                                                      
	n100.r10.s040.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s041.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s041.Main.fq1         1   0      0B                                                      
	n100.r10.s041.Main.fq2         1   0      0B                                                      
	n100.r10.s041.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s042.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s042.Main.fq1         1   0      0B                                                      
	n100.r10.s042.Main.fq2         1   0      0B                                                      
	n100.r10.s042.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s043.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s043.Main.fq1         1   0      0B                                                      
	n100.r10.s043.Main.fq2         1   0      0B                                                      
	n100.r10.s043.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s044.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s044.Main.fq1         1   0      0B                                                      
	n100.r10.s044.Main.fq2         1   0      0B                                                      
	n100.r10.s044.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s045.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s045.Main.fq1         1   0      0B                                                      
	n100.r10.s045.Main.fq2         1   0      0B                                                      
	n100.r10.s045.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s046.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s046.Main.fq1         1   0      0B                                                      
	n100.r10.s046.Main.fq2         1   0      0B                                                      
	n100.r10.s046.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s047.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s047.Main.fq1         1   0      0B                                                      
	n100.r10.s047.Main.fq2         1   0      0B                                                      
	n100.r10.s047.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s048.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s048.Main.fq1         1   0      0B                                                      
	n100.r10.s048.Main.fq2         1   0      0B                                                      
	n100.r10.s048.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s049.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s049.Main.fq1         1   0      0B                                                      
	n100.r10.s049.Main.fq2         1   0      0B                                                      
	n100.r10.s049.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s050.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s050.Main.fq1         1   0      0B                                                      
	n100.r10.s050.Main.fq2         1   0      0B                                                      
	n100.r10.s050.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s051.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s051.Main.fq1         1   0      0B                                                      
	n100.r10.s051.Main.fq2         1   0      0B                                                      
	n100.r10.s051.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s052.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s052.Main.fq1         1   0      0B                                                      
	n100.r10.s052.Main.fq2         1   0      0B                                                      
	n100.r10.s052.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s053.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s053.Main.fq1         1   0      0B                                                      
	n100.r10.s053.Main.fq2         1   0      0B                                                      
	n100.r10.s053.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s054.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s054.Main.fq1         1   0      0B                                                      
	n100.r10.s054.Main.fq2         1   0      0B                                                      
	n100.r10.s054.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s055.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s055.Main.fq1         1   0      0B                                                      
	n100.r10.s055.Main.fq2         1   0      0B                                                      
	n100.r10.s055.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s056.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s056.Main.fq1         1   0      0B                                                      
	n100.r10.s056.Main.fq2         1   0      0B                                                      
	n100.r10.s056.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s057.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s057.Main.fq1         1   0      0B                                                      
	n100.r10.s057.Main.fq2         1   0      0B                                                      
	n100.r10.s057.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s058.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s058.Main.fq1         1   0      0B                                                      
	n100.r10.s058.Main.fq2         1   0      0B                                                      
	n100.r10.s058.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s059.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s059.Main.fq1         1   0      0B                                                      
	n100.r10.s059.Main.fq2         1   0      0B                                                      
	n100.r10.s059.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s060.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s060.Main.fq1         1   0      0B                                                      
	n100.r10.s060.Main.fq2         1   0      0B                                                      
	n100.r10.s060.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s061.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s061.Main.fq1         1   0      0B                                                      
	n100.r10.s061.Main.fq2         1   0      0B                                                      
	n100.r10.s061.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s062.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s062.Main.fq1         1   0      0B                                                      
	n100.r10.s062.Main.fq2         1   0      0B                                                      
	n100.r10.s062.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s063.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s063.Main.fq1         1   0      0B                                                      
	n100.r10.s063.Main.fq2         1   0      0B                                                      
	n100.r10.s063.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s064.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s064.Main.fq1         1   0      0B                                                      
	n100.r10.s064.Main.fq2         1   0      0B                                                      
	n100.r10.s064.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s065.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s065.Main.fq1         1   0      0B                                                      
	n100.r10.s065.Main.fq2         1   0      0B                                                      
	n100.r10.s065.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s066.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s066.Main.fq1         1   0      0B                                                      
	n100.r10.s066.Main.fq2         1   0      0B                                                      
	n100.r10.s066.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s067.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s067.Main.fq1         1   0      0B                                                      
	n100.r10.s067.Main.fq2         1   0      0B                                                      
	n100.r10.s067.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s068.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s068.Main.fq1         1   0      0B                                                      
	n100.r10.s068.Main.fq2         1   0      0B                                                      
	n100.r10.s068.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s069.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s069.Main.fq1         1   0      0B                                                      
	n100.r10.s069.Main.fq2         1   0      0B                                                      
	n100.r10.s069.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s070.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s070.Main.fq1         1   0      0B                                                      
	n100.r10.s070.Main.fq2         1   0      0B                                                      
	n100.r10.s070.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s071.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s071.Main.fq1         1   0      0B                                                      
	n100.r10.s071.Main.fq2         1   0      0B                                                      
	n100.r10.s071.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s072.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s072.Main.fq1         1   0      0B                                                      
	n100.r10.s072.Main.fq2         1   0      0B                                                      
	n100.r10.s072.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s073.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s073.Main.fq1         1   0      0B                                                      
	n100.r10.s073.Main.fq2         1   0      0B                                                      
	n100.r10.s073.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s074.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s074.Main.fq1         1   0      0B                                                      
	n100.r10.s074.Main.fq2         1   0      0B                                                      
	n100.r10.s074.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s075.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s075.Main.fq1         1   0      0B                                                      
	n100.r10.s075.Main.fq2         1   0      0B                                                      
	n100.r10.s075.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s076.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s076.Main.fq1         1   0      0B                                                      
	n100.r10.s076.Main.fq2         1   0      0B                                                      
	n100.r10.s076.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s077.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s077.Main.fq1         1   0      0B                                                      
	n100.r10.s077.Main.fq2         1   0      0B                                                      
	n100.r10.s077.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s078.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s078.Main.fq1         1   0      0B                                                      
	n100.r10.s078.Main.fq2         1   0      0B                                                      
	n100.r10.s078.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s079.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s079.Main.fq1         1   0      0B                                                      
	n100.r10.s079.Main.fq2         1   0      0B                                                      
	n100.r10.s079.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s080.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s080.Main.fq1         1   0      0B                                                      
	n100.r10.s080.Main.fq2         1   0      0B                                                      
	n100.r10.s080.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s081.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s081.Main.fq1         1   0      0B                                                      
	n100.r10.s081.Main.fq2         1   0      0B                                                      
	n100.r10.s081.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s082.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s082.Main.fq1         1   0      0B                                                      
	n100.r10.s082.Main.fq2         1   0      0B                                                      
	n100.r10.s082.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s083.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s083.Main.fq1         1   0      0B                                                      
	n100.r10.s083.Main.fq2         1   0      0B                                                      
	n100.r10.s083.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s084.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s084.Main.fq1         1   0      0B                                                      
	n100.r10.s084.Main.fq2         1   0      0B                                                      
	n100.r10.s084.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s085.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s085.Main.fq1         1   0      0B                                                      
	n100.r10.s085.Main.fq2         1   0      0B                                                      
	n100.r10.s085.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s086.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s086.Main.fq1         1   0      0B                                                      
	n100.r10.s086.Main.fq2         1   0      0B                                                      
	n100.r10.s086.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s087.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s087.Main.fq1         1   0      0B                                                      
	n100.r10.s087.Main.fq2         1   0      0B                                                      
	n100.r10.s087.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s088.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s088.Main.fq1         1   0      0B                                                      
	n100.r10.s088.Main.fq2         1   0      0B                                                      
	n100.r10.s088.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s089.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s089.Main.fq1         1   0      0B                                                      
	n100.r10.s089.Main.fq2         1   0      0B                                                      
	n100.r10.s089.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s090.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s090.Main.fq1         1   0      0B                                                      
	n100.r10.s090.Main.fq2         1   0      0B                                                      
	n100.r10.s090.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s091.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s091.Main.fq1         1   0      0B                                                      
	n100.r10.s091.Main.fq2         1   0      0B                                                      
	n100.r10.s091.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s092.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s092.Main.fq1         1   0      0B                                                      
	n100.r10.s092.Main.fq2         1   0      0B                                                      
	n100.r10.s092.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s093.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s093.Main.fq1         1   0      0B                                                      
	n100.r10.s093.Main.fq2         1   0      0B                                                      
	n100.r10.s093.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s094.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s094.Main.fq1         1   0      0B                                                      
	n100.r10.s094.Main.fq2         1   0      0B                                                      
	n100.r10.s094.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s095.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s095.Main.fq1         1   0      0B                                                      
	n100.r10.s095.Main.fq2         1   0      0B                                                      
	n100.r10.s095.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s096.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s096.Main.fq1         1   0      0B                                                      
	n100.r10.s096.Main.fq2         1   0      0B                                                      
	n100.r10.s096.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s097.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s097.Main.fq1         1   0      0B                                                      
	n100.r10.s097.Main.fq2         1   0      0B                                                      
	n100.r10.s097.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s098.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s098.Main.fq1         1   0      0B                                                      
	n100.r10.s098.Main.fq2         1   0      0B                                                      
	n100.r10.s098.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s099.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s099.Main.fq1         1   0      0B                                                      
	n100.r10.s099.Main.fq2         1   0      0B                                                      
	n100.r10.s099.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r10.s100.Main.cp_out_file 1   0      0B                                                      
	n100.r10.s100.Main.fq1         1   0      0B                                                      
	n100.r10.s100.Main.fq2         1   0      0B                                                      
	n100.r10.s100.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	warning: reduce memory requirements for over-allocating execs: n100.r10.s001.Main.out_file, n100.r10.s002.Main.out_file, n100.r10.s003.Main.out_file, n100.r10.s004.Main.out_file, n100.r10.s005.Main.out_file, n100.r10.s006.Main.out_file, n100.r10.s007.Main.out_file, n100.r10.s008.Main.out_file, n100.r10.s009.Main.out_file, n100.r10.s010.Main.out_file, n100.r10.s011.Main.out_file, n100.r10.s012.Main.out_file, n100.r10.s013.Main.out_file, n100.r10.s014.Main.out_file, n100.r10.s015.Main.out_file, n100.r10.s016.Main.out_file, n100.r10.s017.Main.out_file, n100.r10.s018.Main.out_file, n100.r10.s019.Main.out_file, n100.r10.s020.Main.out_file, n100.r10.s021.Main.out_file, n100.r10.s022.Main.out_file, n100.r10.s023.Main.out_file, n100.r10.s024.Main.out_file, n100.r10.s025.Main.out_file, n100.r10.s026.Main.out_file, n100.r10.s027.Main.out_file, n100.r10.s028.Main.out_file, n100.r10.s029.Main.out_file, n100.r10.s030.Main.out_file, n100.r10.s031.Main.out_file, n100.r10.s032.Main.out_file, n100.r10.s033.Main.out_file, n100.r10.s034.Main.out_file, n100.r10.s035.Main.out_file, n100.r10.s036.Main.out_file, n100.r10.s037.Main.out_file, n100.r10.s038.Main.out_file, n100.r10.s039.Main.out_file, n100.r10.s040.Main.out_file, n100.r10.s041.Main.out_file, n100.r10.s042.Main.out_file, n100.r10.s043.Main.out_file, n100.r10.s044.Main.out_file, n100.r10.s045.Main.out_file, n100.r10.s046.Main.out_file, n100.r10.s047.Main.out_file, n100.r10.s048.Main.out_file, n100.r10.s049.Main.out_file, n100.r10.s050.Main.out_file, n100.r10.s051.Main.out_file, n100.r10.s052.Main.out_file, n100.r10.s053.Main.out_file, n100.r10.s054.Main.out_file, n100.r10.s055.Main.out_file, n100.r10.s056.Main.out_file, n100.r10.s057.Main.out_file, n100.r10.s058.Main.out_file, n100.r10.s059.Main.out_file, n100.r10.s060.Main.out_file, n100.r10.s061.Main.out_file, n100.r10.s062.Main.out_file, n100.r10.s063.Main.out_file, n100.r10.s064.Main.out_file, n100.r10.s065.Main.out_file, n100.r10.s066.Main.out_file, n100.r10.s067.Main.out_file, n100.r10.s068.Main.out_file, n100.r10.s069.Main.out_file, n100.r10.s070.Main.out_file, n100.r10.s071.Main.out_file, n100.r10.s072.Main.out_file, n100.r10.s073.Main.out_file, n100.r10.s074.Main.out_file, n100.r10.s075.Main.out_file, n100.r10.s076.Main.out_file, n100.r10.s077.Main.out_file, n100.r10.s078.Main.out_file, n100.r10.s079.Main.out_file, n100.r10.s080.Main.out_file, n100.r10.s081.Main.out_file, n100.r10.s082.Main.out_file, n100.r10.s083.Main.out_file, n100.r10.s084.Main.out_file, n100.r10.s085.Main.out_file, n100.r10.s086.Main.out_file, n100.r10.s087.Main.out_file, n100.r10.s088.Main.out_file, n100.r10.s089.Main.out_file, n100.r10.s090.Main.out_file, n100.r10.s091.Main.out_file, n100.r10.s092.Main.out_file, n100.r10.s093.Main.out_file, n100.r10.s094.Main.out_file, n100.r10.s095.Main.out_file, n100.r10.s096.Main.out_file, n100.r10.s097.Main.out_file, n100.r10.s098.Main.out_file, n100.r10.s099.Main.out_file, n100.r10.s100.Main.out_file
2021/07/08 17:43:11 result: [val<.=f5b99067 35.7MiB>, val<.=a0388e62 35.7MiB>, val<.=093c913b 35.7MiB>, val<.=b5034479 35.7MiB>, val<.=47f8152c 35.8MiB>, val<.=5f3e6a05 35.8MiB>, val<.=ce4ba5cf 35.7MiB>, val<.=f143720d 35.7MiB>, val<.=37244c9c 35.8MiB>, val<.=519c9ad7 35.7MiB>, val<.=cd98a1f9 35.7MiB>, val<.=43689972 35.7MiB>, val<.=a9ba8984 35.7MiB>, val<.=d9080225 35.7MiB>, val<.=972461fa 35.7MiB>, val<.=f542ef34 35.7MiB>, val<.=22a47e69 35.7MiB>, val<.=4f6b7895 35.7MiB>, val<.=a195c807 35.7MiB>, val<.=6b051734 35.8MiB>, val<.=33c92a41 35.8MiB>, val<.=055c7ee6 35.8MiB>, val<.=d6c0ba61 35.7MiB>, val<.=d2e8968c 35.8MiB>, val<.=bbcdd51b 35.7MiB>, val<.=66d7afb9 35.8MiB>, val<.=94ea765a 35.8MiB>, val<.=909e133d 35.8MiB>, val<.=13892ec2 35.7MiB>, val<.=7f443ea8 35.7MiB>, val<.=e6455728 35.7MiB>, val<.=01995877 35.7MiB>, val<.=87437ec1 35.7MiB>, val<.=2010382f 35.7MiB>, val<.=2dff5dce 35.7MiB>, val<.=13d5c0a5 35.8MiB>, val<.=46ba608b 35.8MiB>, val<.=92469ab6 35.7MiB>, val<.=491b4872 35.7MiB>, val<.=5259e4c3 35.8MiB>, val<.=105bc5a6 35.7MiB>, val<.=7e860cd7 35.7MiB>, val<.=1becd230 35.7MiB>, val<.=cc9462cc 35.7MiB>, val<.=269b6ac2 35.7MiB>, val<.=8ecf83af 35.8MiB>, val<.=fb68588e 35.7MiB>, val<.=835a7c88 35.7MiB>, val<.=d70d45e4 35.8MiB>, val<.=50520703 35.8MiB>, val<.=57d41af2 35.7MiB>, val<.=24a69428 35.7MiB>, val<.=0974cde5 35.7MiB>, val<.=784b60a1 35.7MiB>, val<.=c7de9a4a 35.8MiB>, val<.=edc5b041 35.7MiB>, val<.=eec0ffe0 35.7MiB>, val<.=c6578bbf 35.7MiB>, val<.=60a5d653 35.7MiB>, val<.=10c3e431 35.8MiB>, val<.=a7180a40 35.8MiB>, val<.=f78983ff 35.7MiB>, val<.=fedbddc7 35.8MiB>, val<.=74c4252b 35.7MiB>, val<.=a9cf048d 35.7MiB>, val<.=b69aab20 35.7MiB>, val<.=b73bb53e 35.8MiB>, val<.=e7c649eb 35.8MiB>, val<.=484b2bd0 35.7MiB>, val<.=23c75e4f 35.8MiB>, val<.=798a9201 35.7MiB>, val<.=1cc5e36f 35.7MiB>, val<.=367896e3 35.8MiB>, val<.=4cdbc3f5 35.7MiB>, val<.=7671ba4c 35.7MiB>, val<.=11cf9f32 35.8MiB>, val<.=01e7f8c5 35.7MiB>, val<.=0bc81b38 35.8MiB>, val<.=e1b7efd6 35.8MiB>, val<.=1f4de999 35.7MiB>, val<.=2762c431 35.7MiB>, val<.=730906f3 35.7MiB>, val<.=29dbda1e 35.7MiB>, val<.=40ef1c71 35.8MiB>, val<.=aa1b3f27 35.7MiB>, val<.=744a0723 35.8MiB>, val<.=e1e32afd 35.7MiB>, val<.=fea26343 35.8MiB>, val<.=b9093418 35.7MiB>, val<.=27bffb35 35.7MiB>, val<.=2d8d390a 35.7MiB>, val<.=ab533b6f 35.8MiB>, val<.=1f5c18da 35.7MiB>, val<.=b553e91a 35.7MiB>, val<.=680d9ab5 35.7MiB>, val<.=4ffcce00 35.7MiB>, val<.=626cd066 35.8MiB>, val<.=537b145a 35.7MiB>, val<.=21d957d0 35.7MiB>, val<.=012a3c12 35.8MiB>]
2021/07/08 17:43:11 waiting for 1 background tasks to complete
