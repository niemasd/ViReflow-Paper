2021/07/08 16:43:37 reflow version: reflow1.6.0 (go1.13.15)
2021/07/08 16:43:37 run ID: 5c4fb1fc
2021/07/08 16:43:37 evaluating program /home/niema/ViReflow-Paper/data/sarscov2/n100/n100.r03.rf
	(no params)
	(no arguments)
2021/07/08 16:43:37 Trace: /home/niema/.reflow/runs/5c4fb1fca2f12e5c7d082d064e082c85b936137baea024c2d81a2cdb64ae5947.trace
2021/07/08 16:43:37 evaluating with configuration: scheduler *sched.Scheduler snapshotter blob.Mux transferer *repository.Manager repository *blobrepo.Repository,url=s3://niema-test-quickstart-cache/ assoc *dydbassoc.Assoc,TableName=niema-test-quickstart flags cacheextern,nocache,nogc,norecomputeempty,topdown flowconfig hashv2 cachelookuptimeout 20m0s imagemap map[] dotwriter(*os.File)
2021/07/08 16:43:38 scheduler task a1c1b94c (flow 41d7dc2a): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s059_output\"\n        wget -O \"n100.r03.s059_output/n100.r03.s059.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s059_output/n100.r03.s059.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s059_output/n100.r03.s059.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s059_output/n100.r03.s059.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s059_output/n100.r03.s059.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s059_output/n100.r03.s059.reference.fas\" \"n100.r03.s059_output/n100.r03.s059.fq1.fastq\" \"n100.r03.s059_output/n100.r03.s059.fq2.fastq\" | samtools view -bS - > \"n100.r03.s059_output/n100.r03.s059.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s059_output/n100.r03.s059.untrimmed.sorted.bam\" \"n100.r03.s059_output/n100.r03.s059.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s059_output/n100.r03.s059.untrimmed.sorted.bam\" -b \"n100.r03.s059_output/n100.r03.s059.primers.bed\" -p \"n100.r03.s059_output/n100.r03.s059.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s059_output/n100.r03.s059.trimmed.sorted.bam\" \"n100.r03.s059_output/n100.r03.s059.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s059_output/n100.r03.s059.reference.fas\" \"n100.r03.s059_output/n100.r03.s059.trimmed.sorted.bam\" > \"n100.r03.s059_output/n100.r03.s059.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s059_output/n100.r03.s059.reference.fas\" --call-indels \"n100.r03.s059_output/n100.r03.s059.trimmed.sorted.bam\" > \"n100.r03.s059_output/n100.r03.s059.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s059_output/n100.r03.s059.trimmed.sorted.bam\" > \"n100.r03.s059_output/n100.r03.s059.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s059_output/n100.r03.s059.depth.txt\" \"n100.r03.s059_output/n100.r03.s059.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s059_output/n100.r03.s059.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s059_output/n100.r03.s059.reference.fas\" | bcftools consensus -m \"n100.r03.s059_output/n100.r03.s059.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s059_output/n100.r03.s059.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s059_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s059_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s059_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 23f2b555 (flow d34a4a98): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s040_output\"\n        wget -O \"n100.r03.s040_output/n100.r03.s040.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s040_output/n100.r03.s040.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s040_output/n100.r03.s040.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s040_output/n100.r03.s040.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s040_output/n100.r03.s040.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s040_output/n100.r03.s040.reference.fas\" \"n100.r03.s040_output/n100.r03.s040.fq1.fastq\" \"n100.r03.s040_output/n100.r03.s040.fq2.fastq\" | samtools view -bS - > \"n100.r03.s040_output/n100.r03.s040.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s040_output/n100.r03.s040.untrimmed.sorted.bam\" \"n100.r03.s040_output/n100.r03.s040.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s040_output/n100.r03.s040.untrimmed.sorted.bam\" -b \"n100.r03.s040_output/n100.r03.s040.primers.bed\" -p \"n100.r03.s040_output/n100.r03.s040.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s040_output/n100.r03.s040.trimmed.sorted.bam\" \"n100.r03.s040_output/n100.r03.s040.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s040_output/n100.r03.s040.reference.fas\" \"n100.r03.s040_output/n100.r03.s040.trimmed.sorted.bam\" > \"n100.r03.s040_output/n100.r03.s040.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s040_output/n100.r03.s040.reference.fas\" --call-indels \"n100.r03.s040_output/n100.r03.s040.trimmed.sorted.bam\" > \"n100.r03.s040_output/n100.r03.s040.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s040_output/n100.r03.s040.trimmed.sorted.bam\" > \"n100.r03.s040_output/n100.r03.s040.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s040_output/n100.r03.s040.depth.txt\" \"n100.r03.s040_output/n100.r03.s040.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s040_output/n100.r03.s040.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s040_output/n100.r03.s040.reference.fas\" | bcftools consensus -m \"n100.r03.s040_output/n100.r03.s040.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s040_output/n100.r03.s040.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s040_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s040_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s040_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 961bc0f7 (flow a0d2eb2b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s009_output\"\n        wget -O \"n100.r03.s009_output/n100.r03.s009.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s009_output/n100.r03.s009.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s009_output/n100.r03.s009.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s009_output/n100.r03.s009.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s009_output/n100.r03.s009.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s009_output/n100.r03.s009.reference.fas\" \"n100.r03.s009_output/n100.r03.s009.fq1.fastq\" \"n100.r03.s009_output/n100.r03.s009.fq2.fastq\" | samtools view -bS - > \"n100.r03.s009_output/n100.r03.s009.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s009_output/n100.r03.s009.untrimmed.sorted.bam\" \"n100.r03.s009_output/n100.r03.s009.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s009_output/n100.r03.s009.untrimmed.sorted.bam\" -b \"n100.r03.s009_output/n100.r03.s009.primers.bed\" -p \"n100.r03.s009_output/n100.r03.s009.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s009_output/n100.r03.s009.trimmed.sorted.bam\" \"n100.r03.s009_output/n100.r03.s009.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s009_output/n100.r03.s009.reference.fas\" \"n100.r03.s009_output/n100.r03.s009.trimmed.sorted.bam\" > \"n100.r03.s009_output/n100.r03.s009.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s009_output/n100.r03.s009.reference.fas\" --call-indels \"n100.r03.s009_output/n100.r03.s009.trimmed.sorted.bam\" > \"n100.r03.s009_output/n100.r03.s009.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s009_output/n100.r03.s009.trimmed.sorted.bam\" > \"n100.r03.s009_output/n100.r03.s009.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s009_output/n100.r03.s009.depth.txt\" \"n100.r03.s009_output/n100.r03.s009.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s009_output/n100.r03.s009.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s009_output/n100.r03.s009.reference.fas\" | bcftools consensus -m \"n100.r03.s009_output/n100.r03.s009.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s009_output/n100.r03.s009.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s009_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s009_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s009_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task e3632693 (flow add09463): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s078_output\"\n        wget -O \"n100.r03.s078_output/n100.r03.s078.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s078_output/n100.r03.s078.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s078_output/n100.r03.s078.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s078_output/n100.r03.s078.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s078_output/n100.r03.s078.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s078_output/n100.r03.s078.reference.fas\" \"n100.r03.s078_output/n100.r03.s078.fq1.fastq\" \"n100.r03.s078_output/n100.r03.s078.fq2.fastq\" | samtools view -bS - > \"n100.r03.s078_output/n100.r03.s078.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s078_output/n100.r03.s078.untrimmed.sorted.bam\" \"n100.r03.s078_output/n100.r03.s078.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s078_output/n100.r03.s078.untrimmed.sorted.bam\" -b \"n100.r03.s078_output/n100.r03.s078.primers.bed\" -p \"n100.r03.s078_output/n100.r03.s078.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s078_output/n100.r03.s078.trimmed.sorted.bam\" \"n100.r03.s078_output/n100.r03.s078.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s078_output/n100.r03.s078.reference.fas\" \"n100.r03.s078_output/n100.r03.s078.trimmed.sorted.bam\" > \"n100.r03.s078_output/n100.r03.s078.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s078_output/n100.r03.s078.reference.fas\" --call-indels \"n100.r03.s078_output/n100.r03.s078.trimmed.sorted.bam\" > \"n100.r03.s078_output/n100.r03.s078.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s078_output/n100.r03.s078.trimmed.sorted.bam\" > \"n100.r03.s078_output/n100.r03.s078.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s078_output/n100.r03.s078.depth.txt\" \"n100.r03.s078_output/n100.r03.s078.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s078_output/n100.r03.s078.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s078_output/n100.r03.s078.reference.fas\" | bcftools consensus -m \"n100.r03.s078_output/n100.r03.s078.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s078_output/n100.r03.s078.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s078_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s078_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s078_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task ab96201c (flow 531faab0): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s054_output\"\n        wget -O \"n100.r03.s054_output/n100.r03.s054.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s054_output/n100.r03.s054.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s054_output/n100.r03.s054.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s054_output/n100.r03.s054.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s054_output/n100.r03.s054.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s054_output/n100.r03.s054.reference.fas\" \"n100.r03.s054_output/n100.r03.s054.fq1.fastq\" \"n100.r03.s054_output/n100.r03.s054.fq2.fastq\" | samtools view -bS - > \"n100.r03.s054_output/n100.r03.s054.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s054_output/n100.r03.s054.untrimmed.sorted.bam\" \"n100.r03.s054_output/n100.r03.s054.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s054_output/n100.r03.s054.untrimmed.sorted.bam\" -b \"n100.r03.s054_output/n100.r03.s054.primers.bed\" -p \"n100.r03.s054_output/n100.r03.s054.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s054_output/n100.r03.s054.trimmed.sorted.bam\" \"n100.r03.s054_output/n100.r03.s054.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s054_output/n100.r03.s054.reference.fas\" \"n100.r03.s054_output/n100.r03.s054.trimmed.sorted.bam\" > \"n100.r03.s054_output/n100.r03.s054.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s054_output/n100.r03.s054.reference.fas\" --call-indels \"n100.r03.s054_output/n100.r03.s054.trimmed.sorted.bam\" > \"n100.r03.s054_output/n100.r03.s054.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s054_output/n100.r03.s054.trimmed.sorted.bam\" > \"n100.r03.s054_output/n100.r03.s054.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s054_output/n100.r03.s054.depth.txt\" \"n100.r03.s054_output/n100.r03.s054.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s054_output/n100.r03.s054.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s054_output/n100.r03.s054.reference.fas\" | bcftools consensus -m \"n100.r03.s054_output/n100.r03.s054.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s054_output/n100.r03.s054.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s054_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s054_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s054_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 77c68cbe (flow 6fd9782d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s060_output\"\n        wget -O \"n100.r03.s060_output/n100.r03.s060.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s060_output/n100.r03.s060.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s060_output/n100.r03.s060.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s060_output/n100.r03.s060.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s060_output/n100.r03.s060.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s060_output/n100.r03.s060.reference.fas\" \"n100.r03.s060_output/n100.r03.s060.fq1.fastq\" \"n100.r03.s060_output/n100.r03.s060.fq2.fastq\" | samtools view -bS - > \"n100.r03.s060_output/n100.r03.s060.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s060_output/n100.r03.s060.untrimmed.sorted.bam\" \"n100.r03.s060_output/n100.r03.s060.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s060_output/n100.r03.s060.untrimmed.sorted.bam\" -b \"n100.r03.s060_output/n100.r03.s060.primers.bed\" -p \"n100.r03.s060_output/n100.r03.s060.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s060_output/n100.r03.s060.trimmed.sorted.bam\" \"n100.r03.s060_output/n100.r03.s060.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s060_output/n100.r03.s060.reference.fas\" \"n100.r03.s060_output/n100.r03.s060.trimmed.sorted.bam\" > \"n100.r03.s060_output/n100.r03.s060.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s060_output/n100.r03.s060.reference.fas\" --call-indels \"n100.r03.s060_output/n100.r03.s060.trimmed.sorted.bam\" > \"n100.r03.s060_output/n100.r03.s060.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s060_output/n100.r03.s060.trimmed.sorted.bam\" > \"n100.r03.s060_output/n100.r03.s060.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s060_output/n100.r03.s060.depth.txt\" \"n100.r03.s060_output/n100.r03.s060.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s060_output/n100.r03.s060.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s060_output/n100.r03.s060.reference.fas\" | bcftools consensus -m \"n100.r03.s060_output/n100.r03.s060.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s060_output/n100.r03.s060.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s060_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s060_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s060_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 2128313b (flow 9e4c852f): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s041_output\"\n        wget -O \"n100.r03.s041_output/n100.r03.s041.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s041_output/n100.r03.s041.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s041_output/n100.r03.s041.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s041_output/n100.r03.s041.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s041_output/n100.r03.s041.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s041_output/n100.r03.s041.reference.fas\" \"n100.r03.s041_output/n100.r03.s041.fq1.fastq\" \"n100.r03.s041_output/n100.r03.s041.fq2.fastq\" | samtools view -bS - > \"n100.r03.s041_output/n100.r03.s041.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s041_output/n100.r03.s041.untrimmed.sorted.bam\" \"n100.r03.s041_output/n100.r03.s041.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s041_output/n100.r03.s041.untrimmed.sorted.bam\" -b \"n100.r03.s041_output/n100.r03.s041.primers.bed\" -p \"n100.r03.s041_output/n100.r03.s041.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s041_output/n100.r03.s041.trimmed.sorted.bam\" \"n100.r03.s041_output/n100.r03.s041.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s041_output/n100.r03.s041.reference.fas\" \"n100.r03.s041_output/n100.r03.s041.trimmed.sorted.bam\" > \"n100.r03.s041_output/n100.r03.s041.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s041_output/n100.r03.s041.reference.fas\" --call-indels \"n100.r03.s041_output/n100.r03.s041.trimmed.sorted.bam\" > \"n100.r03.s041_output/n100.r03.s041.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s041_output/n100.r03.s041.trimmed.sorted.bam\" > \"n100.r03.s041_output/n100.r03.s041.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s041_output/n100.r03.s041.depth.txt\" \"n100.r03.s041_output/n100.r03.s041.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s041_output/n100.r03.s041.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s041_output/n100.r03.s041.reference.fas\" | bcftools consensus -m \"n100.r03.s041_output/n100.r03.s041.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s041_output/n100.r03.s041.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s041_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s041_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s041_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 06223123 (flow ffbd06ba): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s034_output\"\n        wget -O \"n100.r03.s034_output/n100.r03.s034.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s034_output/n100.r03.s034.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s034_output/n100.r03.s034.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s034_output/n100.r03.s034.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s034_output/n100.r03.s034.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s034_output/n100.r03.s034.reference.fas\" \"n100.r03.s034_output/n100.r03.s034.fq1.fastq\" \"n100.r03.s034_output/n100.r03.s034.fq2.fastq\" | samtools view -bS - > \"n100.r03.s034_output/n100.r03.s034.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s034_output/n100.r03.s034.untrimmed.sorted.bam\" \"n100.r03.s034_output/n100.r03.s034.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s034_output/n100.r03.s034.untrimmed.sorted.bam\" -b \"n100.r03.s034_output/n100.r03.s034.primers.bed\" -p \"n100.r03.s034_output/n100.r03.s034.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s034_output/n100.r03.s034.trimmed.sorted.bam\" \"n100.r03.s034_output/n100.r03.s034.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s034_output/n100.r03.s034.reference.fas\" \"n100.r03.s034_output/n100.r03.s034.trimmed.sorted.bam\" > \"n100.r03.s034_output/n100.r03.s034.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s034_output/n100.r03.s034.reference.fas\" --call-indels \"n100.r03.s034_output/n100.r03.s034.trimmed.sorted.bam\" > \"n100.r03.s034_output/n100.r03.s034.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s034_output/n100.r03.s034.trimmed.sorted.bam\" > \"n100.r03.s034_output/n100.r03.s034.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s034_output/n100.r03.s034.depth.txt\" \"n100.r03.s034_output/n100.r03.s034.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s034_output/n100.r03.s034.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s034_output/n100.r03.s034.reference.fas\" | bcftools consensus -m \"n100.r03.s034_output/n100.r03.s034.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s034_output/n100.r03.s034.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s034_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s034_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s034_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task f8950918 (flow 8df3e478): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s061_output\"\n        wget -O \"n100.r03.s061_output/n100.r03.s061.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s061_output/n100.r03.s061.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s061_output/n100.r03.s061.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s061_output/n100.r03.s061.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s061_output/n100.r03.s061.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s061_output/n100.r03.s061.reference.fas\" \"n100.r03.s061_output/n100.r03.s061.fq1.fastq\" \"n100.r03.s061_output/n100.r03.s061.fq2.fastq\" | samtools view -bS - > \"n100.r03.s061_output/n100.r03.s061.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s061_output/n100.r03.s061.untrimmed.sorted.bam\" \"n100.r03.s061_output/n100.r03.s061.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s061_output/n100.r03.s061.untrimmed.sorted.bam\" -b \"n100.r03.s061_output/n100.r03.s061.primers.bed\" -p \"n100.r03.s061_output/n100.r03.s061.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s061_output/n100.r03.s061.trimmed.sorted.bam\" \"n100.r03.s061_output/n100.r03.s061.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s061_output/n100.r03.s061.reference.fas\" \"n100.r03.s061_output/n100.r03.s061.trimmed.sorted.bam\" > \"n100.r03.s061_output/n100.r03.s061.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s061_output/n100.r03.s061.reference.fas\" --call-indels \"n100.r03.s061_output/n100.r03.s061.trimmed.sorted.bam\" > \"n100.r03.s061_output/n100.r03.s061.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s061_output/n100.r03.s061.trimmed.sorted.bam\" > \"n100.r03.s061_output/n100.r03.s061.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s061_output/n100.r03.s061.depth.txt\" \"n100.r03.s061_output/n100.r03.s061.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s061_output/n100.r03.s061.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s061_output/n100.r03.s061.reference.fas\" | bcftools consensus -m \"n100.r03.s061_output/n100.r03.s061.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s061_output/n100.r03.s061.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s061_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s061_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s061_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 70fc136d (flow 3be0544d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s024_output\"\n        wget -O \"n100.r03.s024_output/n100.r03.s024.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s024_output/n100.r03.s024.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s024_output/n100.r03.s024.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s024_output/n100.r03.s024.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s024_output/n100.r03.s024.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s024_output/n100.r03.s024.reference.fas\" \"n100.r03.s024_output/n100.r03.s024.fq1.fastq\" \"n100.r03.s024_output/n100.r03.s024.fq2.fastq\" | samtools view -bS - > \"n100.r03.s024_output/n100.r03.s024.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s024_output/n100.r03.s024.untrimmed.sorted.bam\" \"n100.r03.s024_output/n100.r03.s024.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s024_output/n100.r03.s024.untrimmed.sorted.bam\" -b \"n100.r03.s024_output/n100.r03.s024.primers.bed\" -p \"n100.r03.s024_output/n100.r03.s024.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s024_output/n100.r03.s024.trimmed.sorted.bam\" \"n100.r03.s024_output/n100.r03.s024.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s024_output/n100.r03.s024.reference.fas\" \"n100.r03.s024_output/n100.r03.s024.trimmed.sorted.bam\" > \"n100.r03.s024_output/n100.r03.s024.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s024_output/n100.r03.s024.reference.fas\" --call-indels \"n100.r03.s024_output/n100.r03.s024.trimmed.sorted.bam\" > \"n100.r03.s024_output/n100.r03.s024.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s024_output/n100.r03.s024.trimmed.sorted.bam\" > \"n100.r03.s024_output/n100.r03.s024.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s024_output/n100.r03.s024.depth.txt\" \"n100.r03.s024_output/n100.r03.s024.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s024_output/n100.r03.s024.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s024_output/n100.r03.s024.reference.fas\" | bcftools consensus -m \"n100.r03.s024_output/n100.r03.s024.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s024_output/n100.r03.s024.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s024_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s024_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s024_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task b3ec1597 (flow 56168040): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s032_output\"\n        wget -O \"n100.r03.s032_output/n100.r03.s032.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s032_output/n100.r03.s032.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s032_output/n100.r03.s032.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s032_output/n100.r03.s032.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s032_output/n100.r03.s032.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s032_output/n100.r03.s032.reference.fas\" \"n100.r03.s032_output/n100.r03.s032.fq1.fastq\" \"n100.r03.s032_output/n100.r03.s032.fq2.fastq\" | samtools view -bS - > \"n100.r03.s032_output/n100.r03.s032.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s032_output/n100.r03.s032.untrimmed.sorted.bam\" \"n100.r03.s032_output/n100.r03.s032.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s032_output/n100.r03.s032.untrimmed.sorted.bam\" -b \"n100.r03.s032_output/n100.r03.s032.primers.bed\" -p \"n100.r03.s032_output/n100.r03.s032.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s032_output/n100.r03.s032.trimmed.sorted.bam\" \"n100.r03.s032_output/n100.r03.s032.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s032_output/n100.r03.s032.reference.fas\" \"n100.r03.s032_output/n100.r03.s032.trimmed.sorted.bam\" > \"n100.r03.s032_output/n100.r03.s032.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s032_output/n100.r03.s032.reference.fas\" --call-indels \"n100.r03.s032_output/n100.r03.s032.trimmed.sorted.bam\" > \"n100.r03.s032_output/n100.r03.s032.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s032_output/n100.r03.s032.trimmed.sorted.bam\" > \"n100.r03.s032_output/n100.r03.s032.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s032_output/n100.r03.s032.depth.txt\" \"n100.r03.s032_output/n100.r03.s032.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s032_output/n100.r03.s032.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s032_output/n100.r03.s032.reference.fas\" | bcftools consensus -m \"n100.r03.s032_output/n100.r03.s032.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s032_output/n100.r03.s032.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s032_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s032_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s032_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 9fef0d8c (flow f673c693): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s091_output\"\n        wget -O \"n100.r03.s091_output/n100.r03.s091.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s091_output/n100.r03.s091.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s091_output/n100.r03.s091.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s091_output/n100.r03.s091.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s091_output/n100.r03.s091.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s091_output/n100.r03.s091.reference.fas\" \"n100.r03.s091_output/n100.r03.s091.fq1.fastq\" \"n100.r03.s091_output/n100.r03.s091.fq2.fastq\" | samtools view -bS - > \"n100.r03.s091_output/n100.r03.s091.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s091_output/n100.r03.s091.untrimmed.sorted.bam\" \"n100.r03.s091_output/n100.r03.s091.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s091_output/n100.r03.s091.untrimmed.sorted.bam\" -b \"n100.r03.s091_output/n100.r03.s091.primers.bed\" -p \"n100.r03.s091_output/n100.r03.s091.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s091_output/n100.r03.s091.trimmed.sorted.bam\" \"n100.r03.s091_output/n100.r03.s091.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s091_output/n100.r03.s091.reference.fas\" \"n100.r03.s091_output/n100.r03.s091.trimmed.sorted.bam\" > \"n100.r03.s091_output/n100.r03.s091.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s091_output/n100.r03.s091.reference.fas\" --call-indels \"n100.r03.s091_output/n100.r03.s091.trimmed.sorted.bam\" > \"n100.r03.s091_output/n100.r03.s091.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s091_output/n100.r03.s091.trimmed.sorted.bam\" > \"n100.r03.s091_output/n100.r03.s091.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s091_output/n100.r03.s091.depth.txt\" \"n100.r03.s091_output/n100.r03.s091.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s091_output/n100.r03.s091.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s091_output/n100.r03.s091.reference.fas\" | bcftools consensus -m \"n100.r03.s091_output/n100.r03.s091.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s091_output/n100.r03.s091.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s091_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s091_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s091_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task f165135f (flow b485700d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s085_output\"\n        wget -O \"n100.r03.s085_output/n100.r03.s085.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s085_output/n100.r03.s085.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s085_output/n100.r03.s085.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s085_output/n100.r03.s085.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s085_output/n100.r03.s085.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s085_output/n100.r03.s085.reference.fas\" \"n100.r03.s085_output/n100.r03.s085.fq1.fastq\" \"n100.r03.s085_output/n100.r03.s085.fq2.fastq\" | samtools view -bS - > \"n100.r03.s085_output/n100.r03.s085.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s085_output/n100.r03.s085.untrimmed.sorted.bam\" \"n100.r03.s085_output/n100.r03.s085.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s085_output/n100.r03.s085.untrimmed.sorted.bam\" -b \"n100.r03.s085_output/n100.r03.s085.primers.bed\" -p \"n100.r03.s085_output/n100.r03.s085.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s085_output/n100.r03.s085.trimmed.sorted.bam\" \"n100.r03.s085_output/n100.r03.s085.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s085_output/n100.r03.s085.reference.fas\" \"n100.r03.s085_output/n100.r03.s085.trimmed.sorted.bam\" > \"n100.r03.s085_output/n100.r03.s085.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s085_output/n100.r03.s085.reference.fas\" --call-indels \"n100.r03.s085_output/n100.r03.s085.trimmed.sorted.bam\" > \"n100.r03.s085_output/n100.r03.s085.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s085_output/n100.r03.s085.trimmed.sorted.bam\" > \"n100.r03.s085_output/n100.r03.s085.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s085_output/n100.r03.s085.depth.txt\" \"n100.r03.s085_output/n100.r03.s085.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s085_output/n100.r03.s085.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s085_output/n100.r03.s085.reference.fas\" | bcftools consensus -m \"n100.r03.s085_output/n100.r03.s085.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s085_output/n100.r03.s085.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s085_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s085_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s085_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task cc866163 (flow 7b73dcd0): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s093_output\"\n        wget -O \"n100.r03.s093_output/n100.r03.s093.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s093_output/n100.r03.s093.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s093_output/n100.r03.s093.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s093_output/n100.r03.s093.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s093_output/n100.r03.s093.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s093_output/n100.r03.s093.reference.fas\" \"n100.r03.s093_output/n100.r03.s093.fq1.fastq\" \"n100.r03.s093_output/n100.r03.s093.fq2.fastq\" | samtools view -bS - > \"n100.r03.s093_output/n100.r03.s093.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s093_output/n100.r03.s093.untrimmed.sorted.bam\" \"n100.r03.s093_output/n100.r03.s093.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s093_output/n100.r03.s093.untrimmed.sorted.bam\" -b \"n100.r03.s093_output/n100.r03.s093.primers.bed\" -p \"n100.r03.s093_output/n100.r03.s093.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s093_output/n100.r03.s093.trimmed.sorted.bam\" \"n100.r03.s093_output/n100.r03.s093.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s093_output/n100.r03.s093.reference.fas\" \"n100.r03.s093_output/n100.r03.s093.trimmed.sorted.bam\" > \"n100.r03.s093_output/n100.r03.s093.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s093_output/n100.r03.s093.reference.fas\" --call-indels \"n100.r03.s093_output/n100.r03.s093.trimmed.sorted.bam\" > \"n100.r03.s093_output/n100.r03.s093.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s093_output/n100.r03.s093.trimmed.sorted.bam\" > \"n100.r03.s093_output/n100.r03.s093.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s093_output/n100.r03.s093.depth.txt\" \"n100.r03.s093_output/n100.r03.s093.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s093_output/n100.r03.s093.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s093_output/n100.r03.s093.reference.fas\" | bcftools consensus -m \"n100.r03.s093_output/n100.r03.s093.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s093_output/n100.r03.s093.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s093_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s093_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s093_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 754701b2 (flow a896295a): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s069_output\"\n        wget -O \"n100.r03.s069_output/n100.r03.s069.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s069_output/n100.r03.s069.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s069_output/n100.r03.s069.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s069_output/n100.r03.s069.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s069_output/n100.r03.s069.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s069_output/n100.r03.s069.reference.fas\" \"n100.r03.s069_output/n100.r03.s069.fq1.fastq\" \"n100.r03.s069_output/n100.r03.s069.fq2.fastq\" | samtools view -bS - > \"n100.r03.s069_output/n100.r03.s069.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s069_output/n100.r03.s069.untrimmed.sorted.bam\" \"n100.r03.s069_output/n100.r03.s069.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s069_output/n100.r03.s069.untrimmed.sorted.bam\" -b \"n100.r03.s069_output/n100.r03.s069.primers.bed\" -p \"n100.r03.s069_output/n100.r03.s069.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s069_output/n100.r03.s069.trimmed.sorted.bam\" \"n100.r03.s069_output/n100.r03.s069.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s069_output/n100.r03.s069.reference.fas\" \"n100.r03.s069_output/n100.r03.s069.trimmed.sorted.bam\" > \"n100.r03.s069_output/n100.r03.s069.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s069_output/n100.r03.s069.reference.fas\" --call-indels \"n100.r03.s069_output/n100.r03.s069.trimmed.sorted.bam\" > \"n100.r03.s069_output/n100.r03.s069.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s069_output/n100.r03.s069.trimmed.sorted.bam\" > \"n100.r03.s069_output/n100.r03.s069.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s069_output/n100.r03.s069.depth.txt\" \"n100.r03.s069_output/n100.r03.s069.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s069_output/n100.r03.s069.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s069_output/n100.r03.s069.reference.fas\" | bcftools consensus -m \"n100.r03.s069_output/n100.r03.s069.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s069_output/n100.r03.s069.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s069_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s069_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s069_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task ad11b6f1 (flow b407f183): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s046_output\"\n        wget -O \"n100.r03.s046_output/n100.r03.s046.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s046_output/n100.r03.s046.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s046_output/n100.r03.s046.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s046_output/n100.r03.s046.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s046_output/n100.r03.s046.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s046_output/n100.r03.s046.reference.fas\" \"n100.r03.s046_output/n100.r03.s046.fq1.fastq\" \"n100.r03.s046_output/n100.r03.s046.fq2.fastq\" | samtools view -bS - > \"n100.r03.s046_output/n100.r03.s046.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s046_output/n100.r03.s046.untrimmed.sorted.bam\" \"n100.r03.s046_output/n100.r03.s046.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s046_output/n100.r03.s046.untrimmed.sorted.bam\" -b \"n100.r03.s046_output/n100.r03.s046.primers.bed\" -p \"n100.r03.s046_output/n100.r03.s046.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s046_output/n100.r03.s046.trimmed.sorted.bam\" \"n100.r03.s046_output/n100.r03.s046.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s046_output/n100.r03.s046.reference.fas\" \"n100.r03.s046_output/n100.r03.s046.trimmed.sorted.bam\" > \"n100.r03.s046_output/n100.r03.s046.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s046_output/n100.r03.s046.reference.fas\" --call-indels \"n100.r03.s046_output/n100.r03.s046.trimmed.sorted.bam\" > \"n100.r03.s046_output/n100.r03.s046.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s046_output/n100.r03.s046.trimmed.sorted.bam\" > \"n100.r03.s046_output/n100.r03.s046.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s046_output/n100.r03.s046.depth.txt\" \"n100.r03.s046_output/n100.r03.s046.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s046_output/n100.r03.s046.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s046_output/n100.r03.s046.reference.fas\" | bcftools consensus -m \"n100.r03.s046_output/n100.r03.s046.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s046_output/n100.r03.s046.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s046_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s046_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s046_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 27950794 (flow 1e078488): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s037_output\"\n        wget -O \"n100.r03.s037_output/n100.r03.s037.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s037_output/n100.r03.s037.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s037_output/n100.r03.s037.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s037_output/n100.r03.s037.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s037_output/n100.r03.s037.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s037_output/n100.r03.s037.reference.fas\" \"n100.r03.s037_output/n100.r03.s037.fq1.fastq\" \"n100.r03.s037_output/n100.r03.s037.fq2.fastq\" | samtools view -bS - > \"n100.r03.s037_output/n100.r03.s037.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s037_output/n100.r03.s037.untrimmed.sorted.bam\" \"n100.r03.s037_output/n100.r03.s037.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s037_output/n100.r03.s037.untrimmed.sorted.bam\" -b \"n100.r03.s037_output/n100.r03.s037.primers.bed\" -p \"n100.r03.s037_output/n100.r03.s037.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s037_output/n100.r03.s037.trimmed.sorted.bam\" \"n100.r03.s037_output/n100.r03.s037.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s037_output/n100.r03.s037.reference.fas\" \"n100.r03.s037_output/n100.r03.s037.trimmed.sorted.bam\" > \"n100.r03.s037_output/n100.r03.s037.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s037_output/n100.r03.s037.reference.fas\" --call-indels \"n100.r03.s037_output/n100.r03.s037.trimmed.sorted.bam\" > \"n100.r03.s037_output/n100.r03.s037.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s037_output/n100.r03.s037.trimmed.sorted.bam\" > \"n100.r03.s037_output/n100.r03.s037.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s037_output/n100.r03.s037.depth.txt\" \"n100.r03.s037_output/n100.r03.s037.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s037_output/n100.r03.s037.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s037_output/n100.r03.s037.reference.fas\" | bcftools consensus -m \"n100.r03.s037_output/n100.r03.s037.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s037_output/n100.r03.s037.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s037_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s037_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s037_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 86cdbd24 (flow ec5d5436): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s066_output\"\n        wget -O \"n100.r03.s066_output/n100.r03.s066.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s066_output/n100.r03.s066.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s066_output/n100.r03.s066.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s066_output/n100.r03.s066.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s066_output/n100.r03.s066.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s066_output/n100.r03.s066.reference.fas\" \"n100.r03.s066_output/n100.r03.s066.fq1.fastq\" \"n100.r03.s066_output/n100.r03.s066.fq2.fastq\" | samtools view -bS - > \"n100.r03.s066_output/n100.r03.s066.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s066_output/n100.r03.s066.untrimmed.sorted.bam\" \"n100.r03.s066_output/n100.r03.s066.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s066_output/n100.r03.s066.untrimmed.sorted.bam\" -b \"n100.r03.s066_output/n100.r03.s066.primers.bed\" -p \"n100.r03.s066_output/n100.r03.s066.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s066_output/n100.r03.s066.trimmed.sorted.bam\" \"n100.r03.s066_output/n100.r03.s066.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s066_output/n100.r03.s066.reference.fas\" \"n100.r03.s066_output/n100.r03.s066.trimmed.sorted.bam\" > \"n100.r03.s066_output/n100.r03.s066.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s066_output/n100.r03.s066.reference.fas\" --call-indels \"n100.r03.s066_output/n100.r03.s066.trimmed.sorted.bam\" > \"n100.r03.s066_output/n100.r03.s066.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s066_output/n100.r03.s066.trimmed.sorted.bam\" > \"n100.r03.s066_output/n100.r03.s066.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s066_output/n100.r03.s066.depth.txt\" \"n100.r03.s066_output/n100.r03.s066.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s066_output/n100.r03.s066.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s066_output/n100.r03.s066.reference.fas\" | bcftools consensus -m \"n100.r03.s066_output/n100.r03.s066.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s066_output/n100.r03.s066.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s066_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s066_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s066_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 651abeff (flow f2593f6b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s007_output\"\n        wget -O \"n100.r03.s007_output/n100.r03.s007.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s007_output/n100.r03.s007.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s007_output/n100.r03.s007.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s007_output/n100.r03.s007.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s007_output/n100.r03.s007.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s007_output/n100.r03.s007.reference.fas\" \"n100.r03.s007_output/n100.r03.s007.fq1.fastq\" \"n100.r03.s007_output/n100.r03.s007.fq2.fastq\" | samtools view -bS - > \"n100.r03.s007_output/n100.r03.s007.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s007_output/n100.r03.s007.untrimmed.sorted.bam\" \"n100.r03.s007_output/n100.r03.s007.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s007_output/n100.r03.s007.untrimmed.sorted.bam\" -b \"n100.r03.s007_output/n100.r03.s007.primers.bed\" -p \"n100.r03.s007_output/n100.r03.s007.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s007_output/n100.r03.s007.trimmed.sorted.bam\" \"n100.r03.s007_output/n100.r03.s007.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s007_output/n100.r03.s007.reference.fas\" \"n100.r03.s007_output/n100.r03.s007.trimmed.sorted.bam\" > \"n100.r03.s007_output/n100.r03.s007.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s007_output/n100.r03.s007.reference.fas\" --call-indels \"n100.r03.s007_output/n100.r03.s007.trimmed.sorted.bam\" > \"n100.r03.s007_output/n100.r03.s007.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s007_output/n100.r03.s007.trimmed.sorted.bam\" > \"n100.r03.s007_output/n100.r03.s007.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s007_output/n100.r03.s007.depth.txt\" \"n100.r03.s007_output/n100.r03.s007.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s007_output/n100.r03.s007.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s007_output/n100.r03.s007.reference.fas\" | bcftools consensus -m \"n100.r03.s007_output/n100.r03.s007.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s007_output/n100.r03.s007.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s007_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s007_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s007_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task d3c3f174 (flow eb36d115): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s033_output\"\n        wget -O \"n100.r03.s033_output/n100.r03.s033.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s033_output/n100.r03.s033.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s033_output/n100.r03.s033.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s033_output/n100.r03.s033.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s033_output/n100.r03.s033.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s033_output/n100.r03.s033.reference.fas\" \"n100.r03.s033_output/n100.r03.s033.fq1.fastq\" \"n100.r03.s033_output/n100.r03.s033.fq2.fastq\" | samtools view -bS - > \"n100.r03.s033_output/n100.r03.s033.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s033_output/n100.r03.s033.untrimmed.sorted.bam\" \"n100.r03.s033_output/n100.r03.s033.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s033_output/n100.r03.s033.untrimmed.sorted.bam\" -b \"n100.r03.s033_output/n100.r03.s033.primers.bed\" -p \"n100.r03.s033_output/n100.r03.s033.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s033_output/n100.r03.s033.trimmed.sorted.bam\" \"n100.r03.s033_output/n100.r03.s033.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s033_output/n100.r03.s033.reference.fas\" \"n100.r03.s033_output/n100.r03.s033.trimmed.sorted.bam\" > \"n100.r03.s033_output/n100.r03.s033.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s033_output/n100.r03.s033.reference.fas\" --call-indels \"n100.r03.s033_output/n100.r03.s033.trimmed.sorted.bam\" > \"n100.r03.s033_output/n100.r03.s033.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s033_output/n100.r03.s033.trimmed.sorted.bam\" > \"n100.r03.s033_output/n100.r03.s033.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s033_output/n100.r03.s033.depth.txt\" \"n100.r03.s033_output/n100.r03.s033.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s033_output/n100.r03.s033.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s033_output/n100.r03.s033.reference.fas\" | bcftools consensus -m \"n100.r03.s033_output/n100.r03.s033.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s033_output/n100.r03.s033.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s033_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s033_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s033_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 9fb665b0 (flow c77a5486): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s057_output\"\n        wget -O \"n100.r03.s057_output/n100.r03.s057.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s057_output/n100.r03.s057.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s057_output/n100.r03.s057.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s057_output/n100.r03.s057.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s057_output/n100.r03.s057.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s057_output/n100.r03.s057.reference.fas\" \"n100.r03.s057_output/n100.r03.s057.fq1.fastq\" \"n100.r03.s057_output/n100.r03.s057.fq2.fastq\" | samtools view -bS - > \"n100.r03.s057_output/n100.r03.s057.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s057_output/n100.r03.s057.untrimmed.sorted.bam\" \"n100.r03.s057_output/n100.r03.s057.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s057_output/n100.r03.s057.untrimmed.sorted.bam\" -b \"n100.r03.s057_output/n100.r03.s057.primers.bed\" -p \"n100.r03.s057_output/n100.r03.s057.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s057_output/n100.r03.s057.trimmed.sorted.bam\" \"n100.r03.s057_output/n100.r03.s057.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s057_output/n100.r03.s057.reference.fas\" \"n100.r03.s057_output/n100.r03.s057.trimmed.sorted.bam\" > \"n100.r03.s057_output/n100.r03.s057.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s057_output/n100.r03.s057.reference.fas\" --call-indels \"n100.r03.s057_output/n100.r03.s057.trimmed.sorted.bam\" > \"n100.r03.s057_output/n100.r03.s057.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s057_output/n100.r03.s057.trimmed.sorted.bam\" > \"n100.r03.s057_output/n100.r03.s057.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s057_output/n100.r03.s057.depth.txt\" \"n100.r03.s057_output/n100.r03.s057.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s057_output/n100.r03.s057.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s057_output/n100.r03.s057.reference.fas\" | bcftools consensus -m \"n100.r03.s057_output/n100.r03.s057.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s057_output/n100.r03.s057.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s057_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s057_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s057_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 26ddd9e4 (flow 7219908c): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s098_output\"\n        wget -O \"n100.r03.s098_output/n100.r03.s098.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s098_output/n100.r03.s098.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s098_output/n100.r03.s098.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s098_output/n100.r03.s098.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s098_output/n100.r03.s098.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s098_output/n100.r03.s098.reference.fas\" \"n100.r03.s098_output/n100.r03.s098.fq1.fastq\" \"n100.r03.s098_output/n100.r03.s098.fq2.fastq\" | samtools view -bS - > \"n100.r03.s098_output/n100.r03.s098.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s098_output/n100.r03.s098.untrimmed.sorted.bam\" \"n100.r03.s098_output/n100.r03.s098.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s098_output/n100.r03.s098.untrimmed.sorted.bam\" -b \"n100.r03.s098_output/n100.r03.s098.primers.bed\" -p \"n100.r03.s098_output/n100.r03.s098.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s098_output/n100.r03.s098.trimmed.sorted.bam\" \"n100.r03.s098_output/n100.r03.s098.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s098_output/n100.r03.s098.reference.fas\" \"n100.r03.s098_output/n100.r03.s098.trimmed.sorted.bam\" > \"n100.r03.s098_output/n100.r03.s098.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s098_output/n100.r03.s098.reference.fas\" --call-indels \"n100.r03.s098_output/n100.r03.s098.trimmed.sorted.bam\" > \"n100.r03.s098_output/n100.r03.s098.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s098_output/n100.r03.s098.trimmed.sorted.bam\" > \"n100.r03.s098_output/n100.r03.s098.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s098_output/n100.r03.s098.depth.txt\" \"n100.r03.s098_output/n100.r03.s098.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s098_output/n100.r03.s098.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s098_output/n100.r03.s098.reference.fas\" | bcftools consensus -m \"n100.r03.s098_output/n100.r03.s098.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s098_output/n100.r03.s098.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s098_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s098_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s098_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 529ecf42 (flow e43f35d3): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s075_output\"\n        wget -O \"n100.r03.s075_output/n100.r03.s075.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s075_output/n100.r03.s075.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s075_output/n100.r03.s075.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s075_output/n100.r03.s075.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s075_output/n100.r03.s075.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s075_output/n100.r03.s075.reference.fas\" \"n100.r03.s075_output/n100.r03.s075.fq1.fastq\" \"n100.r03.s075_output/n100.r03.s075.fq2.fastq\" | samtools view -bS - > \"n100.r03.s075_output/n100.r03.s075.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s075_output/n100.r03.s075.untrimmed.sorted.bam\" \"n100.r03.s075_output/n100.r03.s075.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s075_output/n100.r03.s075.untrimmed.sorted.bam\" -b \"n100.r03.s075_output/n100.r03.s075.primers.bed\" -p \"n100.r03.s075_output/n100.r03.s075.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s075_output/n100.r03.s075.trimmed.sorted.bam\" \"n100.r03.s075_output/n100.r03.s075.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s075_output/n100.r03.s075.reference.fas\" \"n100.r03.s075_output/n100.r03.s075.trimmed.sorted.bam\" > \"n100.r03.s075_output/n100.r03.s075.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s075_output/n100.r03.s075.reference.fas\" --call-indels \"n100.r03.s075_output/n100.r03.s075.trimmed.sorted.bam\" > \"n100.r03.s075_output/n100.r03.s075.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s075_output/n100.r03.s075.trimmed.sorted.bam\" > \"n100.r03.s075_output/n100.r03.s075.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s075_output/n100.r03.s075.depth.txt\" \"n100.r03.s075_output/n100.r03.s075.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s075_output/n100.r03.s075.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s075_output/n100.r03.s075.reference.fas\" | bcftools consensus -m \"n100.r03.s075_output/n100.r03.s075.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s075_output/n100.r03.s075.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s075_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s075_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s075_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 5a0c62bc (flow 2cec23de): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s042_output\"\n        wget -O \"n100.r03.s042_output/n100.r03.s042.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s042_output/n100.r03.s042.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s042_output/n100.r03.s042.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s042_output/n100.r03.s042.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s042_output/n100.r03.s042.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s042_output/n100.r03.s042.reference.fas\" \"n100.r03.s042_output/n100.r03.s042.fq1.fastq\" \"n100.r03.s042_output/n100.r03.s042.fq2.fastq\" | samtools view -bS - > \"n100.r03.s042_output/n100.r03.s042.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s042_output/n100.r03.s042.untrimmed.sorted.bam\" \"n100.r03.s042_output/n100.r03.s042.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s042_output/n100.r03.s042.untrimmed.sorted.bam\" -b \"n100.r03.s042_output/n100.r03.s042.primers.bed\" -p \"n100.r03.s042_output/n100.r03.s042.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s042_output/n100.r03.s042.trimmed.sorted.bam\" \"n100.r03.s042_output/n100.r03.s042.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s042_output/n100.r03.s042.reference.fas\" \"n100.r03.s042_output/n100.r03.s042.trimmed.sorted.bam\" > \"n100.r03.s042_output/n100.r03.s042.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s042_output/n100.r03.s042.reference.fas\" --call-indels \"n100.r03.s042_output/n100.r03.s042.trimmed.sorted.bam\" > \"n100.r03.s042_output/n100.r03.s042.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s042_output/n100.r03.s042.trimmed.sorted.bam\" > \"n100.r03.s042_output/n100.r03.s042.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s042_output/n100.r03.s042.depth.txt\" \"n100.r03.s042_output/n100.r03.s042.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s042_output/n100.r03.s042.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s042_output/n100.r03.s042.reference.fas\" | bcftools consensus -m \"n100.r03.s042_output/n100.r03.s042.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s042_output/n100.r03.s042.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s042_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s042_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s042_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task c3688bf6 (flow a83f360e): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s047_output\"\n        wget -O \"n100.r03.s047_output/n100.r03.s047.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s047_output/n100.r03.s047.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s047_output/n100.r03.s047.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s047_output/n100.r03.s047.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s047_output/n100.r03.s047.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s047_output/n100.r03.s047.reference.fas\" \"n100.r03.s047_output/n100.r03.s047.fq1.fastq\" \"n100.r03.s047_output/n100.r03.s047.fq2.fastq\" | samtools view -bS - > \"n100.r03.s047_output/n100.r03.s047.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s047_output/n100.r03.s047.untrimmed.sorted.bam\" \"n100.r03.s047_output/n100.r03.s047.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s047_output/n100.r03.s047.untrimmed.sorted.bam\" -b \"n100.r03.s047_output/n100.r03.s047.primers.bed\" -p \"n100.r03.s047_output/n100.r03.s047.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s047_output/n100.r03.s047.trimmed.sorted.bam\" \"n100.r03.s047_output/n100.r03.s047.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s047_output/n100.r03.s047.reference.fas\" \"n100.r03.s047_output/n100.r03.s047.trimmed.sorted.bam\" > \"n100.r03.s047_output/n100.r03.s047.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s047_output/n100.r03.s047.reference.fas\" --call-indels \"n100.r03.s047_output/n100.r03.s047.trimmed.sorted.bam\" > \"n100.r03.s047_output/n100.r03.s047.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s047_output/n100.r03.s047.trimmed.sorted.bam\" > \"n100.r03.s047_output/n100.r03.s047.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s047_output/n100.r03.s047.depth.txt\" \"n100.r03.s047_output/n100.r03.s047.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s047_output/n100.r03.s047.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s047_output/n100.r03.s047.reference.fas\" | bcftools consensus -m \"n100.r03.s047_output/n100.r03.s047.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s047_output/n100.r03.s047.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s047_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s047_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s047_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 29f0c020 (flow 17bef574): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s064_output\"\n        wget -O \"n100.r03.s064_output/n100.r03.s064.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s064_output/n100.r03.s064.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s064_output/n100.r03.s064.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s064_output/n100.r03.s064.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s064_output/n100.r03.s064.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s064_output/n100.r03.s064.reference.fas\" \"n100.r03.s064_output/n100.r03.s064.fq1.fastq\" \"n100.r03.s064_output/n100.r03.s064.fq2.fastq\" | samtools view -bS - > \"n100.r03.s064_output/n100.r03.s064.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s064_output/n100.r03.s064.untrimmed.sorted.bam\" \"n100.r03.s064_output/n100.r03.s064.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s064_output/n100.r03.s064.untrimmed.sorted.bam\" -b \"n100.r03.s064_output/n100.r03.s064.primers.bed\" -p \"n100.r03.s064_output/n100.r03.s064.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s064_output/n100.r03.s064.trimmed.sorted.bam\" \"n100.r03.s064_output/n100.r03.s064.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s064_output/n100.r03.s064.reference.fas\" \"n100.r03.s064_output/n100.r03.s064.trimmed.sorted.bam\" > \"n100.r03.s064_output/n100.r03.s064.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s064_output/n100.r03.s064.reference.fas\" --call-indels \"n100.r03.s064_output/n100.r03.s064.trimmed.sorted.bam\" > \"n100.r03.s064_output/n100.r03.s064.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s064_output/n100.r03.s064.trimmed.sorted.bam\" > \"n100.r03.s064_output/n100.r03.s064.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s064_output/n100.r03.s064.depth.txt\" \"n100.r03.s064_output/n100.r03.s064.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s064_output/n100.r03.s064.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s064_output/n100.r03.s064.reference.fas\" | bcftools consensus -m \"n100.r03.s064_output/n100.r03.s064.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s064_output/n100.r03.s064.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s064_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s064_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s064_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 4396f600 (flow e90de21c): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s035_output\"\n        wget -O \"n100.r03.s035_output/n100.r03.s035.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s035_output/n100.r03.s035.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s035_output/n100.r03.s035.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s035_output/n100.r03.s035.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s035_output/n100.r03.s035.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s035_output/n100.r03.s035.reference.fas\" \"n100.r03.s035_output/n100.r03.s035.fq1.fastq\" \"n100.r03.s035_output/n100.r03.s035.fq2.fastq\" | samtools view -bS - > \"n100.r03.s035_output/n100.r03.s035.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s035_output/n100.r03.s035.untrimmed.sorted.bam\" \"n100.r03.s035_output/n100.r03.s035.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s035_output/n100.r03.s035.untrimmed.sorted.bam\" -b \"n100.r03.s035_output/n100.r03.s035.primers.bed\" -p \"n100.r03.s035_output/n100.r03.s035.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s035_output/n100.r03.s035.trimmed.sorted.bam\" \"n100.r03.s035_output/n100.r03.s035.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s035_output/n100.r03.s035.reference.fas\" \"n100.r03.s035_output/n100.r03.s035.trimmed.sorted.bam\" > \"n100.r03.s035_output/n100.r03.s035.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s035_output/n100.r03.s035.reference.fas\" --call-indels \"n100.r03.s035_output/n100.r03.s035.trimmed.sorted.bam\" > \"n100.r03.s035_output/n100.r03.s035.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s035_output/n100.r03.s035.trimmed.sorted.bam\" > \"n100.r03.s035_output/n100.r03.s035.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s035_output/n100.r03.s035.depth.txt\" \"n100.r03.s035_output/n100.r03.s035.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s035_output/n100.r03.s035.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s035_output/n100.r03.s035.reference.fas\" | bcftools consensus -m \"n100.r03.s035_output/n100.r03.s035.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s035_output/n100.r03.s035.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s035_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s035_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s035_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task a03fdbd6 (flow f12c01f7): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s094_output\"\n        wget -O \"n100.r03.s094_output/n100.r03.s094.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s094_output/n100.r03.s094.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s094_output/n100.r03.s094.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s094_output/n100.r03.s094.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s094_output/n100.r03.s094.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s094_output/n100.r03.s094.reference.fas\" \"n100.r03.s094_output/n100.r03.s094.fq1.fastq\" \"n100.r03.s094_output/n100.r03.s094.fq2.fastq\" | samtools view -bS - > \"n100.r03.s094_output/n100.r03.s094.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s094_output/n100.r03.s094.untrimmed.sorted.bam\" \"n100.r03.s094_output/n100.r03.s094.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s094_output/n100.r03.s094.untrimmed.sorted.bam\" -b \"n100.r03.s094_output/n100.r03.s094.primers.bed\" -p \"n100.r03.s094_output/n100.r03.s094.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s094_output/n100.r03.s094.trimmed.sorted.bam\" \"n100.r03.s094_output/n100.r03.s094.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s094_output/n100.r03.s094.reference.fas\" \"n100.r03.s094_output/n100.r03.s094.trimmed.sorted.bam\" > \"n100.r03.s094_output/n100.r03.s094.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s094_output/n100.r03.s094.reference.fas\" --call-indels \"n100.r03.s094_output/n100.r03.s094.trimmed.sorted.bam\" > \"n100.r03.s094_output/n100.r03.s094.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s094_output/n100.r03.s094.trimmed.sorted.bam\" > \"n100.r03.s094_output/n100.r03.s094.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s094_output/n100.r03.s094.depth.txt\" \"n100.r03.s094_output/n100.r03.s094.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s094_output/n100.r03.s094.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s094_output/n100.r03.s094.reference.fas\" | bcftools consensus -m \"n100.r03.s094_output/n100.r03.s094.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s094_output/n100.r03.s094.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s094_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s094_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s094_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task ac3fb0dc (flow 785ffd27): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s015_output\"\n        wget -O \"n100.r03.s015_output/n100.r03.s015.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s015_output/n100.r03.s015.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s015_output/n100.r03.s015.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s015_output/n100.r03.s015.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s015_output/n100.r03.s015.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s015_output/n100.r03.s015.reference.fas\" \"n100.r03.s015_output/n100.r03.s015.fq1.fastq\" \"n100.r03.s015_output/n100.r03.s015.fq2.fastq\" | samtools view -bS - > \"n100.r03.s015_output/n100.r03.s015.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s015_output/n100.r03.s015.untrimmed.sorted.bam\" \"n100.r03.s015_output/n100.r03.s015.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s015_output/n100.r03.s015.untrimmed.sorted.bam\" -b \"n100.r03.s015_output/n100.r03.s015.primers.bed\" -p \"n100.r03.s015_output/n100.r03.s015.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s015_output/n100.r03.s015.trimmed.sorted.bam\" \"n100.r03.s015_output/n100.r03.s015.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s015_output/n100.r03.s015.reference.fas\" \"n100.r03.s015_output/n100.r03.s015.trimmed.sorted.bam\" > \"n100.r03.s015_output/n100.r03.s015.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s015_output/n100.r03.s015.reference.fas\" --call-indels \"n100.r03.s015_output/n100.r03.s015.trimmed.sorted.bam\" > \"n100.r03.s015_output/n100.r03.s015.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s015_output/n100.r03.s015.trimmed.sorted.bam\" > \"n100.r03.s015_output/n100.r03.s015.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s015_output/n100.r03.s015.depth.txt\" \"n100.r03.s015_output/n100.r03.s015.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s015_output/n100.r03.s015.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s015_output/n100.r03.s015.reference.fas\" | bcftools consensus -m \"n100.r03.s015_output/n100.r03.s015.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s015_output/n100.r03.s015.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s015_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s015_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s015_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 21089e1a (flow c279c2df): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s084_output\"\n        wget -O \"n100.r03.s084_output/n100.r03.s084.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s084_output/n100.r03.s084.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s084_output/n100.r03.s084.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s084_output/n100.r03.s084.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s084_output/n100.r03.s084.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s084_output/n100.r03.s084.reference.fas\" \"n100.r03.s084_output/n100.r03.s084.fq1.fastq\" \"n100.r03.s084_output/n100.r03.s084.fq2.fastq\" | samtools view -bS - > \"n100.r03.s084_output/n100.r03.s084.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s084_output/n100.r03.s084.untrimmed.sorted.bam\" \"n100.r03.s084_output/n100.r03.s084.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s084_output/n100.r03.s084.untrimmed.sorted.bam\" -b \"n100.r03.s084_output/n100.r03.s084.primers.bed\" -p \"n100.r03.s084_output/n100.r03.s084.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s084_output/n100.r03.s084.trimmed.sorted.bam\" \"n100.r03.s084_output/n100.r03.s084.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s084_output/n100.r03.s084.reference.fas\" \"n100.r03.s084_output/n100.r03.s084.trimmed.sorted.bam\" > \"n100.r03.s084_output/n100.r03.s084.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s084_output/n100.r03.s084.reference.fas\" --call-indels \"n100.r03.s084_output/n100.r03.s084.trimmed.sorted.bam\" > \"n100.r03.s084_output/n100.r03.s084.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s084_output/n100.r03.s084.trimmed.sorted.bam\" > \"n100.r03.s084_output/n100.r03.s084.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s084_output/n100.r03.s084.depth.txt\" \"n100.r03.s084_output/n100.r03.s084.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s084_output/n100.r03.s084.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s084_output/n100.r03.s084.reference.fas\" | bcftools consensus -m \"n100.r03.s084_output/n100.r03.s084.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s084_output/n100.r03.s084.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s084_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s084_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s084_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 07b1d571 (flow 47420793): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s021_output\"\n        wget -O \"n100.r03.s021_output/n100.r03.s021.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s021_output/n100.r03.s021.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s021_output/n100.r03.s021.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s021_output/n100.r03.s021.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s021_output/n100.r03.s021.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s021_output/n100.r03.s021.reference.fas\" \"n100.r03.s021_output/n100.r03.s021.fq1.fastq\" \"n100.r03.s021_output/n100.r03.s021.fq2.fastq\" | samtools view -bS - > \"n100.r03.s021_output/n100.r03.s021.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s021_output/n100.r03.s021.untrimmed.sorted.bam\" \"n100.r03.s021_output/n100.r03.s021.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s021_output/n100.r03.s021.untrimmed.sorted.bam\" -b \"n100.r03.s021_output/n100.r03.s021.primers.bed\" -p \"n100.r03.s021_output/n100.r03.s021.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s021_output/n100.r03.s021.trimmed.sorted.bam\" \"n100.r03.s021_output/n100.r03.s021.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s021_output/n100.r03.s021.reference.fas\" \"n100.r03.s021_output/n100.r03.s021.trimmed.sorted.bam\" > \"n100.r03.s021_output/n100.r03.s021.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s021_output/n100.r03.s021.reference.fas\" --call-indels \"n100.r03.s021_output/n100.r03.s021.trimmed.sorted.bam\" > \"n100.r03.s021_output/n100.r03.s021.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s021_output/n100.r03.s021.trimmed.sorted.bam\" > \"n100.r03.s021_output/n100.r03.s021.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s021_output/n100.r03.s021.depth.txt\" \"n100.r03.s021_output/n100.r03.s021.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s021_output/n100.r03.s021.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s021_output/n100.r03.s021.reference.fas\" | bcftools consensus -m \"n100.r03.s021_output/n100.r03.s021.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s021_output/n100.r03.s021.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s021_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s021_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s021_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 27604f83 (flow 1f71c589): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s055_output\"\n        wget -O \"n100.r03.s055_output/n100.r03.s055.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s055_output/n100.r03.s055.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s055_output/n100.r03.s055.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s055_output/n100.r03.s055.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s055_output/n100.r03.s055.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s055_output/n100.r03.s055.reference.fas\" \"n100.r03.s055_output/n100.r03.s055.fq1.fastq\" \"n100.r03.s055_output/n100.r03.s055.fq2.fastq\" | samtools view -bS - > \"n100.r03.s055_output/n100.r03.s055.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s055_output/n100.r03.s055.untrimmed.sorted.bam\" \"n100.r03.s055_output/n100.r03.s055.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s055_output/n100.r03.s055.untrimmed.sorted.bam\" -b \"n100.r03.s055_output/n100.r03.s055.primers.bed\" -p \"n100.r03.s055_output/n100.r03.s055.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s055_output/n100.r03.s055.trimmed.sorted.bam\" \"n100.r03.s055_output/n100.r03.s055.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s055_output/n100.r03.s055.reference.fas\" \"n100.r03.s055_output/n100.r03.s055.trimmed.sorted.bam\" > \"n100.r03.s055_output/n100.r03.s055.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s055_output/n100.r03.s055.reference.fas\" --call-indels \"n100.r03.s055_output/n100.r03.s055.trimmed.sorted.bam\" > \"n100.r03.s055_output/n100.r03.s055.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s055_output/n100.r03.s055.trimmed.sorted.bam\" > \"n100.r03.s055_output/n100.r03.s055.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s055_output/n100.r03.s055.depth.txt\" \"n100.r03.s055_output/n100.r03.s055.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s055_output/n100.r03.s055.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s055_output/n100.r03.s055.reference.fas\" | bcftools consensus -m \"n100.r03.s055_output/n100.r03.s055.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s055_output/n100.r03.s055.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s055_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s055_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s055_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task bc6b82f2 (flow 159f3125): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s028_output\"\n        wget -O \"n100.r03.s028_output/n100.r03.s028.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s028_output/n100.r03.s028.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s028_output/n100.r03.s028.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s028_output/n100.r03.s028.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s028_output/n100.r03.s028.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s028_output/n100.r03.s028.reference.fas\" \"n100.r03.s028_output/n100.r03.s028.fq1.fastq\" \"n100.r03.s028_output/n100.r03.s028.fq2.fastq\" | samtools view -bS - > \"n100.r03.s028_output/n100.r03.s028.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s028_output/n100.r03.s028.untrimmed.sorted.bam\" \"n100.r03.s028_output/n100.r03.s028.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s028_output/n100.r03.s028.untrimmed.sorted.bam\" -b \"n100.r03.s028_output/n100.r03.s028.primers.bed\" -p \"n100.r03.s028_output/n100.r03.s028.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s028_output/n100.r03.s028.trimmed.sorted.bam\" \"n100.r03.s028_output/n100.r03.s028.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s028_output/n100.r03.s028.reference.fas\" \"n100.r03.s028_output/n100.r03.s028.trimmed.sorted.bam\" > \"n100.r03.s028_output/n100.r03.s028.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s028_output/n100.r03.s028.reference.fas\" --call-indels \"n100.r03.s028_output/n100.r03.s028.trimmed.sorted.bam\" > \"n100.r03.s028_output/n100.r03.s028.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s028_output/n100.r03.s028.trimmed.sorted.bam\" > \"n100.r03.s028_output/n100.r03.s028.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s028_output/n100.r03.s028.depth.txt\" \"n100.r03.s028_output/n100.r03.s028.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s028_output/n100.r03.s028.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s028_output/n100.r03.s028.reference.fas\" | bcftools consensus -m \"n100.r03.s028_output/n100.r03.s028.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s028_output/n100.r03.s028.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s028_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s028_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s028_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task e7b857e8 (flow 4dfce054): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s049_output\"\n        wget -O \"n100.r03.s049_output/n100.r03.s049.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s049_output/n100.r03.s049.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s049_output/n100.r03.s049.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s049_output/n100.r03.s049.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s049_output/n100.r03.s049.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s049_output/n100.r03.s049.reference.fas\" \"n100.r03.s049_output/n100.r03.s049.fq1.fastq\" \"n100.r03.s049_output/n100.r03.s049.fq2.fastq\" | samtools view -bS - > \"n100.r03.s049_output/n100.r03.s049.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s049_output/n100.r03.s049.untrimmed.sorted.bam\" \"n100.r03.s049_output/n100.r03.s049.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s049_output/n100.r03.s049.untrimmed.sorted.bam\" -b \"n100.r03.s049_output/n100.r03.s049.primers.bed\" -p \"n100.r03.s049_output/n100.r03.s049.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s049_output/n100.r03.s049.trimmed.sorted.bam\" \"n100.r03.s049_output/n100.r03.s049.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s049_output/n100.r03.s049.reference.fas\" \"n100.r03.s049_output/n100.r03.s049.trimmed.sorted.bam\" > \"n100.r03.s049_output/n100.r03.s049.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s049_output/n100.r03.s049.reference.fas\" --call-indels \"n100.r03.s049_output/n100.r03.s049.trimmed.sorted.bam\" > \"n100.r03.s049_output/n100.r03.s049.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s049_output/n100.r03.s049.trimmed.sorted.bam\" > \"n100.r03.s049_output/n100.r03.s049.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s049_output/n100.r03.s049.depth.txt\" \"n100.r03.s049_output/n100.r03.s049.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s049_output/n100.r03.s049.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s049_output/n100.r03.s049.reference.fas\" | bcftools consensus -m \"n100.r03.s049_output/n100.r03.s049.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s049_output/n100.r03.s049.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s049_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s049_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s049_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task a4048ae2 (flow 062ec948): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s083_output\"\n        wget -O \"n100.r03.s083_output/n100.r03.s083.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s083_output/n100.r03.s083.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s083_output/n100.r03.s083.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s083_output/n100.r03.s083.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s083_output/n100.r03.s083.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s083_output/n100.r03.s083.reference.fas\" \"n100.r03.s083_output/n100.r03.s083.fq1.fastq\" \"n100.r03.s083_output/n100.r03.s083.fq2.fastq\" | samtools view -bS - > \"n100.r03.s083_output/n100.r03.s083.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s083_output/n100.r03.s083.untrimmed.sorted.bam\" \"n100.r03.s083_output/n100.r03.s083.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s083_output/n100.r03.s083.untrimmed.sorted.bam\" -b \"n100.r03.s083_output/n100.r03.s083.primers.bed\" -p \"n100.r03.s083_output/n100.r03.s083.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s083_output/n100.r03.s083.trimmed.sorted.bam\" \"n100.r03.s083_output/n100.r03.s083.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s083_output/n100.r03.s083.reference.fas\" \"n100.r03.s083_output/n100.r03.s083.trimmed.sorted.bam\" > \"n100.r03.s083_output/n100.r03.s083.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s083_output/n100.r03.s083.reference.fas\" --call-indels \"n100.r03.s083_output/n100.r03.s083.trimmed.sorted.bam\" > \"n100.r03.s083_output/n100.r03.s083.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s083_output/n100.r03.s083.trimmed.sorted.bam\" > \"n100.r03.s083_output/n100.r03.s083.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s083_output/n100.r03.s083.depth.txt\" \"n100.r03.s083_output/n100.r03.s083.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s083_output/n100.r03.s083.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s083_output/n100.r03.s083.reference.fas\" | bcftools consensus -m \"n100.r03.s083_output/n100.r03.s083.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s083_output/n100.r03.s083.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s083_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s083_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s083_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task bffb2e9f (flow f9db9957): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s029_output\"\n        wget -O \"n100.r03.s029_output/n100.r03.s029.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s029_output/n100.r03.s029.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s029_output/n100.r03.s029.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s029_output/n100.r03.s029.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s029_output/n100.r03.s029.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s029_output/n100.r03.s029.reference.fas\" \"n100.r03.s029_output/n100.r03.s029.fq1.fastq\" \"n100.r03.s029_output/n100.r03.s029.fq2.fastq\" | samtools view -bS - > \"n100.r03.s029_output/n100.r03.s029.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s029_output/n100.r03.s029.untrimmed.sorted.bam\" \"n100.r03.s029_output/n100.r03.s029.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s029_output/n100.r03.s029.untrimmed.sorted.bam\" -b \"n100.r03.s029_output/n100.r03.s029.primers.bed\" -p \"n100.r03.s029_output/n100.r03.s029.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s029_output/n100.r03.s029.trimmed.sorted.bam\" \"n100.r03.s029_output/n100.r03.s029.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s029_output/n100.r03.s029.reference.fas\" \"n100.r03.s029_output/n100.r03.s029.trimmed.sorted.bam\" > \"n100.r03.s029_output/n100.r03.s029.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s029_output/n100.r03.s029.reference.fas\" --call-indels \"n100.r03.s029_output/n100.r03.s029.trimmed.sorted.bam\" > \"n100.r03.s029_output/n100.r03.s029.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s029_output/n100.r03.s029.trimmed.sorted.bam\" > \"n100.r03.s029_output/n100.r03.s029.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s029_output/n100.r03.s029.depth.txt\" \"n100.r03.s029_output/n100.r03.s029.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s029_output/n100.r03.s029.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s029_output/n100.r03.s029.reference.fas\" | bcftools consensus -m \"n100.r03.s029_output/n100.r03.s029.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s029_output/n100.r03.s029.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s029_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s029_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s029_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 60be6b51 (flow a0f712d0): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s048_output\"\n        wget -O \"n100.r03.s048_output/n100.r03.s048.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s048_output/n100.r03.s048.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s048_output/n100.r03.s048.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s048_output/n100.r03.s048.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s048_output/n100.r03.s048.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s048_output/n100.r03.s048.reference.fas\" \"n100.r03.s048_output/n100.r03.s048.fq1.fastq\" \"n100.r03.s048_output/n100.r03.s048.fq2.fastq\" | samtools view -bS - > \"n100.r03.s048_output/n100.r03.s048.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s048_output/n100.r03.s048.untrimmed.sorted.bam\" \"n100.r03.s048_output/n100.r03.s048.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s048_output/n100.r03.s048.untrimmed.sorted.bam\" -b \"n100.r03.s048_output/n100.r03.s048.primers.bed\" -p \"n100.r03.s048_output/n100.r03.s048.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s048_output/n100.r03.s048.trimmed.sorted.bam\" \"n100.r03.s048_output/n100.r03.s048.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s048_output/n100.r03.s048.reference.fas\" \"n100.r03.s048_output/n100.r03.s048.trimmed.sorted.bam\" > \"n100.r03.s048_output/n100.r03.s048.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s048_output/n100.r03.s048.reference.fas\" --call-indels \"n100.r03.s048_output/n100.r03.s048.trimmed.sorted.bam\" > \"n100.r03.s048_output/n100.r03.s048.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s048_output/n100.r03.s048.trimmed.sorted.bam\" > \"n100.r03.s048_output/n100.r03.s048.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s048_output/n100.r03.s048.depth.txt\" \"n100.r03.s048_output/n100.r03.s048.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s048_output/n100.r03.s048.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s048_output/n100.r03.s048.reference.fas\" | bcftools consensus -m \"n100.r03.s048_output/n100.r03.s048.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s048_output/n100.r03.s048.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s048_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s048_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s048_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 7a62ec14 (flow e8c1c4e4): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s044_output\"\n        wget -O \"n100.r03.s044_output/n100.r03.s044.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s044_output/n100.r03.s044.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s044_output/n100.r03.s044.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s044_output/n100.r03.s044.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s044_output/n100.r03.s044.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s044_output/n100.r03.s044.reference.fas\" \"n100.r03.s044_output/n100.r03.s044.fq1.fastq\" \"n100.r03.s044_output/n100.r03.s044.fq2.fastq\" | samtools view -bS - > \"n100.r03.s044_output/n100.r03.s044.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s044_output/n100.r03.s044.untrimmed.sorted.bam\" \"n100.r03.s044_output/n100.r03.s044.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s044_output/n100.r03.s044.untrimmed.sorted.bam\" -b \"n100.r03.s044_output/n100.r03.s044.primers.bed\" -p \"n100.r03.s044_output/n100.r03.s044.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s044_output/n100.r03.s044.trimmed.sorted.bam\" \"n100.r03.s044_output/n100.r03.s044.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s044_output/n100.r03.s044.reference.fas\" \"n100.r03.s044_output/n100.r03.s044.trimmed.sorted.bam\" > \"n100.r03.s044_output/n100.r03.s044.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s044_output/n100.r03.s044.reference.fas\" --call-indels \"n100.r03.s044_output/n100.r03.s044.trimmed.sorted.bam\" > \"n100.r03.s044_output/n100.r03.s044.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s044_output/n100.r03.s044.trimmed.sorted.bam\" > \"n100.r03.s044_output/n100.r03.s044.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s044_output/n100.r03.s044.depth.txt\" \"n100.r03.s044_output/n100.r03.s044.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s044_output/n100.r03.s044.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s044_output/n100.r03.s044.reference.fas\" | bcftools consensus -m \"n100.r03.s044_output/n100.r03.s044.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s044_output/n100.r03.s044.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s044_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s044_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s044_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 80669d3f (flow fe21aeeb): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s026_output\"\n        wget -O \"n100.r03.s026_output/n100.r03.s026.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s026_output/n100.r03.s026.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s026_output/n100.r03.s026.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s026_output/n100.r03.s026.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s026_output/n100.r03.s026.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s026_output/n100.r03.s026.reference.fas\" \"n100.r03.s026_output/n100.r03.s026.fq1.fastq\" \"n100.r03.s026_output/n100.r03.s026.fq2.fastq\" | samtools view -bS - > \"n100.r03.s026_output/n100.r03.s026.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s026_output/n100.r03.s026.untrimmed.sorted.bam\" \"n100.r03.s026_output/n100.r03.s026.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s026_output/n100.r03.s026.untrimmed.sorted.bam\" -b \"n100.r03.s026_output/n100.r03.s026.primers.bed\" -p \"n100.r03.s026_output/n100.r03.s026.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s026_output/n100.r03.s026.trimmed.sorted.bam\" \"n100.r03.s026_output/n100.r03.s026.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s026_output/n100.r03.s026.reference.fas\" \"n100.r03.s026_output/n100.r03.s026.trimmed.sorted.bam\" > \"n100.r03.s026_output/n100.r03.s026.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s026_output/n100.r03.s026.reference.fas\" --call-indels \"n100.r03.s026_output/n100.r03.s026.trimmed.sorted.bam\" > \"n100.r03.s026_output/n100.r03.s026.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s026_output/n100.r03.s026.trimmed.sorted.bam\" > \"n100.r03.s026_output/n100.r03.s026.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s026_output/n100.r03.s026.depth.txt\" \"n100.r03.s026_output/n100.r03.s026.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s026_output/n100.r03.s026.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s026_output/n100.r03.s026.reference.fas\" | bcftools consensus -m \"n100.r03.s026_output/n100.r03.s026.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s026_output/n100.r03.s026.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s026_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s026_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s026_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 82950da3 (flow a420f865): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s005_output\"\n        wget -O \"n100.r03.s005_output/n100.r03.s005.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s005_output/n100.r03.s005.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s005_output/n100.r03.s005.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s005_output/n100.r03.s005.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s005_output/n100.r03.s005.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s005_output/n100.r03.s005.reference.fas\" \"n100.r03.s005_output/n100.r03.s005.fq1.fastq\" \"n100.r03.s005_output/n100.r03.s005.fq2.fastq\" | samtools view -bS - > \"n100.r03.s005_output/n100.r03.s005.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s005_output/n100.r03.s005.untrimmed.sorted.bam\" \"n100.r03.s005_output/n100.r03.s005.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s005_output/n100.r03.s005.untrimmed.sorted.bam\" -b \"n100.r03.s005_output/n100.r03.s005.primers.bed\" -p \"n100.r03.s005_output/n100.r03.s005.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s005_output/n100.r03.s005.trimmed.sorted.bam\" \"n100.r03.s005_output/n100.r03.s005.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s005_output/n100.r03.s005.reference.fas\" \"n100.r03.s005_output/n100.r03.s005.trimmed.sorted.bam\" > \"n100.r03.s005_output/n100.r03.s005.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s005_output/n100.r03.s005.reference.fas\" --call-indels \"n100.r03.s005_output/n100.r03.s005.trimmed.sorted.bam\" > \"n100.r03.s005_output/n100.r03.s005.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s005_output/n100.r03.s005.trimmed.sorted.bam\" > \"n100.r03.s005_output/n100.r03.s005.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s005_output/n100.r03.s005.depth.txt\" \"n100.r03.s005_output/n100.r03.s005.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s005_output/n100.r03.s005.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s005_output/n100.r03.s005.reference.fas\" | bcftools consensus -m \"n100.r03.s005_output/n100.r03.s005.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s005_output/n100.r03.s005.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s005_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s005_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s005_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 5009eabe (flow 942ecb0a): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s039_output\"\n        wget -O \"n100.r03.s039_output/n100.r03.s039.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s039_output/n100.r03.s039.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s039_output/n100.r03.s039.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s039_output/n100.r03.s039.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s039_output/n100.r03.s039.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s039_output/n100.r03.s039.reference.fas\" \"n100.r03.s039_output/n100.r03.s039.fq1.fastq\" \"n100.r03.s039_output/n100.r03.s039.fq2.fastq\" | samtools view -bS - > \"n100.r03.s039_output/n100.r03.s039.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s039_output/n100.r03.s039.untrimmed.sorted.bam\" \"n100.r03.s039_output/n100.r03.s039.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s039_output/n100.r03.s039.untrimmed.sorted.bam\" -b \"n100.r03.s039_output/n100.r03.s039.primers.bed\" -p \"n100.r03.s039_output/n100.r03.s039.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s039_output/n100.r03.s039.trimmed.sorted.bam\" \"n100.r03.s039_output/n100.r03.s039.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s039_output/n100.r03.s039.reference.fas\" \"n100.r03.s039_output/n100.r03.s039.trimmed.sorted.bam\" > \"n100.r03.s039_output/n100.r03.s039.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s039_output/n100.r03.s039.reference.fas\" --call-indels \"n100.r03.s039_output/n100.r03.s039.trimmed.sorted.bam\" > \"n100.r03.s039_output/n100.r03.s039.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s039_output/n100.r03.s039.trimmed.sorted.bam\" > \"n100.r03.s039_output/n100.r03.s039.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s039_output/n100.r03.s039.depth.txt\" \"n100.r03.s039_output/n100.r03.s039.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s039_output/n100.r03.s039.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s039_output/n100.r03.s039.reference.fas\" | bcftools consensus -m \"n100.r03.s039_output/n100.r03.s039.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s039_output/n100.r03.s039.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s039_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s039_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s039_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task f0203609 (flow f72aefa7): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s082_output\"\n        wget -O \"n100.r03.s082_output/n100.r03.s082.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s082_output/n100.r03.s082.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s082_output/n100.r03.s082.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s082_output/n100.r03.s082.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s082_output/n100.r03.s082.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s082_output/n100.r03.s082.reference.fas\" \"n100.r03.s082_output/n100.r03.s082.fq1.fastq\" \"n100.r03.s082_output/n100.r03.s082.fq2.fastq\" | samtools view -bS - > \"n100.r03.s082_output/n100.r03.s082.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s082_output/n100.r03.s082.untrimmed.sorted.bam\" \"n100.r03.s082_output/n100.r03.s082.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s082_output/n100.r03.s082.untrimmed.sorted.bam\" -b \"n100.r03.s082_output/n100.r03.s082.primers.bed\" -p \"n100.r03.s082_output/n100.r03.s082.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s082_output/n100.r03.s082.trimmed.sorted.bam\" \"n100.r03.s082_output/n100.r03.s082.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s082_output/n100.r03.s082.reference.fas\" \"n100.r03.s082_output/n100.r03.s082.trimmed.sorted.bam\" > \"n100.r03.s082_output/n100.r03.s082.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s082_output/n100.r03.s082.reference.fas\" --call-indels \"n100.r03.s082_output/n100.r03.s082.trimmed.sorted.bam\" > \"n100.r03.s082_output/n100.r03.s082.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s082_output/n100.r03.s082.trimmed.sorted.bam\" > \"n100.r03.s082_output/n100.r03.s082.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s082_output/n100.r03.s082.depth.txt\" \"n100.r03.s082_output/n100.r03.s082.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s082_output/n100.r03.s082.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s082_output/n100.r03.s082.reference.fas\" | bcftools consensus -m \"n100.r03.s082_output/n100.r03.s082.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s082_output/n100.r03.s082.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s082_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s082_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s082_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task cb3be4a9 (flow 7f1435b4): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s017_output\"\n        wget -O \"n100.r03.s017_output/n100.r03.s017.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s017_output/n100.r03.s017.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s017_output/n100.r03.s017.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s017_output/n100.r03.s017.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s017_output/n100.r03.s017.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s017_output/n100.r03.s017.reference.fas\" \"n100.r03.s017_output/n100.r03.s017.fq1.fastq\" \"n100.r03.s017_output/n100.r03.s017.fq2.fastq\" | samtools view -bS - > \"n100.r03.s017_output/n100.r03.s017.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s017_output/n100.r03.s017.untrimmed.sorted.bam\" \"n100.r03.s017_output/n100.r03.s017.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s017_output/n100.r03.s017.untrimmed.sorted.bam\" -b \"n100.r03.s017_output/n100.r03.s017.primers.bed\" -p \"n100.r03.s017_output/n100.r03.s017.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s017_output/n100.r03.s017.trimmed.sorted.bam\" \"n100.r03.s017_output/n100.r03.s017.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s017_output/n100.r03.s017.reference.fas\" \"n100.r03.s017_output/n100.r03.s017.trimmed.sorted.bam\" > \"n100.r03.s017_output/n100.r03.s017.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s017_output/n100.r03.s017.reference.fas\" --call-indels \"n100.r03.s017_output/n100.r03.s017.trimmed.sorted.bam\" > \"n100.r03.s017_output/n100.r03.s017.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s017_output/n100.r03.s017.trimmed.sorted.bam\" > \"n100.r03.s017_output/n100.r03.s017.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s017_output/n100.r03.s017.depth.txt\" \"n100.r03.s017_output/n100.r03.s017.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s017_output/n100.r03.s017.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s017_output/n100.r03.s017.reference.fas\" | bcftools consensus -m \"n100.r03.s017_output/n100.r03.s017.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s017_output/n100.r03.s017.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s017_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s017_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s017_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task bc51d36b (flow 29867b33): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s013_output\"\n        wget -O \"n100.r03.s013_output/n100.r03.s013.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s013_output/n100.r03.s013.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s013_output/n100.r03.s013.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s013_output/n100.r03.s013.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s013_output/n100.r03.s013.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s013_output/n100.r03.s013.reference.fas\" \"n100.r03.s013_output/n100.r03.s013.fq1.fastq\" \"n100.r03.s013_output/n100.r03.s013.fq2.fastq\" | samtools view -bS - > \"n100.r03.s013_output/n100.r03.s013.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s013_output/n100.r03.s013.untrimmed.sorted.bam\" \"n100.r03.s013_output/n100.r03.s013.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s013_output/n100.r03.s013.untrimmed.sorted.bam\" -b \"n100.r03.s013_output/n100.r03.s013.primers.bed\" -p \"n100.r03.s013_output/n100.r03.s013.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s013_output/n100.r03.s013.trimmed.sorted.bam\" \"n100.r03.s013_output/n100.r03.s013.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s013_output/n100.r03.s013.reference.fas\" \"n100.r03.s013_output/n100.r03.s013.trimmed.sorted.bam\" > \"n100.r03.s013_output/n100.r03.s013.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s013_output/n100.r03.s013.reference.fas\" --call-indels \"n100.r03.s013_output/n100.r03.s013.trimmed.sorted.bam\" > \"n100.r03.s013_output/n100.r03.s013.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s013_output/n100.r03.s013.trimmed.sorted.bam\" > \"n100.r03.s013_output/n100.r03.s013.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s013_output/n100.r03.s013.depth.txt\" \"n100.r03.s013_output/n100.r03.s013.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s013_output/n100.r03.s013.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s013_output/n100.r03.s013.reference.fas\" | bcftools consensus -m \"n100.r03.s013_output/n100.r03.s013.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s013_output/n100.r03.s013.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s013_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s013_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s013_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 484b3ade (flow 1ea7c425): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s063_output\"\n        wget -O \"n100.r03.s063_output/n100.r03.s063.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s063_output/n100.r03.s063.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s063_output/n100.r03.s063.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s063_output/n100.r03.s063.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s063_output/n100.r03.s063.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s063_output/n100.r03.s063.reference.fas\" \"n100.r03.s063_output/n100.r03.s063.fq1.fastq\" \"n100.r03.s063_output/n100.r03.s063.fq2.fastq\" | samtools view -bS - > \"n100.r03.s063_output/n100.r03.s063.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s063_output/n100.r03.s063.untrimmed.sorted.bam\" \"n100.r03.s063_output/n100.r03.s063.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s063_output/n100.r03.s063.untrimmed.sorted.bam\" -b \"n100.r03.s063_output/n100.r03.s063.primers.bed\" -p \"n100.r03.s063_output/n100.r03.s063.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s063_output/n100.r03.s063.trimmed.sorted.bam\" \"n100.r03.s063_output/n100.r03.s063.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s063_output/n100.r03.s063.reference.fas\" \"n100.r03.s063_output/n100.r03.s063.trimmed.sorted.bam\" > \"n100.r03.s063_output/n100.r03.s063.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s063_output/n100.r03.s063.reference.fas\" --call-indels \"n100.r03.s063_output/n100.r03.s063.trimmed.sorted.bam\" > \"n100.r03.s063_output/n100.r03.s063.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s063_output/n100.r03.s063.trimmed.sorted.bam\" > \"n100.r03.s063_output/n100.r03.s063.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s063_output/n100.r03.s063.depth.txt\" \"n100.r03.s063_output/n100.r03.s063.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s063_output/n100.r03.s063.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s063_output/n100.r03.s063.reference.fas\" | bcftools consensus -m \"n100.r03.s063_output/n100.r03.s063.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s063_output/n100.r03.s063.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s063_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s063_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s063_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task c688ac3a (flow 62629a74): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s076_output\"\n        wget -O \"n100.r03.s076_output/n100.r03.s076.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s076_output/n100.r03.s076.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s076_output/n100.r03.s076.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s076_output/n100.r03.s076.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s076_output/n100.r03.s076.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s076_output/n100.r03.s076.reference.fas\" \"n100.r03.s076_output/n100.r03.s076.fq1.fastq\" \"n100.r03.s076_output/n100.r03.s076.fq2.fastq\" | samtools view -bS - > \"n100.r03.s076_output/n100.r03.s076.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s076_output/n100.r03.s076.untrimmed.sorted.bam\" \"n100.r03.s076_output/n100.r03.s076.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s076_output/n100.r03.s076.untrimmed.sorted.bam\" -b \"n100.r03.s076_output/n100.r03.s076.primers.bed\" -p \"n100.r03.s076_output/n100.r03.s076.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s076_output/n100.r03.s076.trimmed.sorted.bam\" \"n100.r03.s076_output/n100.r03.s076.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s076_output/n100.r03.s076.reference.fas\" \"n100.r03.s076_output/n100.r03.s076.trimmed.sorted.bam\" > \"n100.r03.s076_output/n100.r03.s076.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s076_output/n100.r03.s076.reference.fas\" --call-indels \"n100.r03.s076_output/n100.r03.s076.trimmed.sorted.bam\" > \"n100.r03.s076_output/n100.r03.s076.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s076_output/n100.r03.s076.trimmed.sorted.bam\" > \"n100.r03.s076_output/n100.r03.s076.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s076_output/n100.r03.s076.depth.txt\" \"n100.r03.s076_output/n100.r03.s076.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s076_output/n100.r03.s076.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s076_output/n100.r03.s076.reference.fas\" | bcftools consensus -m \"n100.r03.s076_output/n100.r03.s076.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s076_output/n100.r03.s076.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s076_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s076_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s076_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 755dfd3e (flow 34520b39): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s074_output\"\n        wget -O \"n100.r03.s074_output/n100.r03.s074.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s074_output/n100.r03.s074.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s074_output/n100.r03.s074.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s074_output/n100.r03.s074.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s074_output/n100.r03.s074.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s074_output/n100.r03.s074.reference.fas\" \"n100.r03.s074_output/n100.r03.s074.fq1.fastq\" \"n100.r03.s074_output/n100.r03.s074.fq2.fastq\" | samtools view -bS - > \"n100.r03.s074_output/n100.r03.s074.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s074_output/n100.r03.s074.untrimmed.sorted.bam\" \"n100.r03.s074_output/n100.r03.s074.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s074_output/n100.r03.s074.untrimmed.sorted.bam\" -b \"n100.r03.s074_output/n100.r03.s074.primers.bed\" -p \"n100.r03.s074_output/n100.r03.s074.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s074_output/n100.r03.s074.trimmed.sorted.bam\" \"n100.r03.s074_output/n100.r03.s074.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s074_output/n100.r03.s074.reference.fas\" \"n100.r03.s074_output/n100.r03.s074.trimmed.sorted.bam\" > \"n100.r03.s074_output/n100.r03.s074.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s074_output/n100.r03.s074.reference.fas\" --call-indels \"n100.r03.s074_output/n100.r03.s074.trimmed.sorted.bam\" > \"n100.r03.s074_output/n100.r03.s074.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s074_output/n100.r03.s074.trimmed.sorted.bam\" > \"n100.r03.s074_output/n100.r03.s074.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s074_output/n100.r03.s074.depth.txt\" \"n100.r03.s074_output/n100.r03.s074.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s074_output/n100.r03.s074.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s074_output/n100.r03.s074.reference.fas\" | bcftools consensus -m \"n100.r03.s074_output/n100.r03.s074.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s074_output/n100.r03.s074.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s074_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s074_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s074_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task df81b75e (flow c2a25c99): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s008_output\"\n        wget -O \"n100.r03.s008_output/n100.r03.s008.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s008_output/n100.r03.s008.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s008_output/n100.r03.s008.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s008_output/n100.r03.s008.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s008_output/n100.r03.s008.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s008_output/n100.r03.s008.reference.fas\" \"n100.r03.s008_output/n100.r03.s008.fq1.fastq\" \"n100.r03.s008_output/n100.r03.s008.fq2.fastq\" | samtools view -bS - > \"n100.r03.s008_output/n100.r03.s008.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s008_output/n100.r03.s008.untrimmed.sorted.bam\" \"n100.r03.s008_output/n100.r03.s008.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s008_output/n100.r03.s008.untrimmed.sorted.bam\" -b \"n100.r03.s008_output/n100.r03.s008.primers.bed\" -p \"n100.r03.s008_output/n100.r03.s008.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s008_output/n100.r03.s008.trimmed.sorted.bam\" \"n100.r03.s008_output/n100.r03.s008.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s008_output/n100.r03.s008.reference.fas\" \"n100.r03.s008_output/n100.r03.s008.trimmed.sorted.bam\" > \"n100.r03.s008_output/n100.r03.s008.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s008_output/n100.r03.s008.reference.fas\" --call-indels \"n100.r03.s008_output/n100.r03.s008.trimmed.sorted.bam\" > \"n100.r03.s008_output/n100.r03.s008.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s008_output/n100.r03.s008.trimmed.sorted.bam\" > \"n100.r03.s008_output/n100.r03.s008.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s008_output/n100.r03.s008.depth.txt\" \"n100.r03.s008_output/n100.r03.s008.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s008_output/n100.r03.s008.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s008_output/n100.r03.s008.reference.fas\" | bcftools consensus -m \"n100.r03.s008_output/n100.r03.s008.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s008_output/n100.r03.s008.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s008_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s008_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s008_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task dd443953 (flow 3816e5c5): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s043_output\"\n        wget -O \"n100.r03.s043_output/n100.r03.s043.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s043_output/n100.r03.s043.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s043_output/n100.r03.s043.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s043_output/n100.r03.s043.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s043_output/n100.r03.s043.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s043_output/n100.r03.s043.reference.fas\" \"n100.r03.s043_output/n100.r03.s043.fq1.fastq\" \"n100.r03.s043_output/n100.r03.s043.fq2.fastq\" | samtools view -bS - > \"n100.r03.s043_output/n100.r03.s043.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s043_output/n100.r03.s043.untrimmed.sorted.bam\" \"n100.r03.s043_output/n100.r03.s043.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s043_output/n100.r03.s043.untrimmed.sorted.bam\" -b \"n100.r03.s043_output/n100.r03.s043.primers.bed\" -p \"n100.r03.s043_output/n100.r03.s043.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s043_output/n100.r03.s043.trimmed.sorted.bam\" \"n100.r03.s043_output/n100.r03.s043.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s043_output/n100.r03.s043.reference.fas\" \"n100.r03.s043_output/n100.r03.s043.trimmed.sorted.bam\" > \"n100.r03.s043_output/n100.r03.s043.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s043_output/n100.r03.s043.reference.fas\" --call-indels \"n100.r03.s043_output/n100.r03.s043.trimmed.sorted.bam\" > \"n100.r03.s043_output/n100.r03.s043.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s043_output/n100.r03.s043.trimmed.sorted.bam\" > \"n100.r03.s043_output/n100.r03.s043.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s043_output/n100.r03.s043.depth.txt\" \"n100.r03.s043_output/n100.r03.s043.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s043_output/n100.r03.s043.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s043_output/n100.r03.s043.reference.fas\" | bcftools consensus -m \"n100.r03.s043_output/n100.r03.s043.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s043_output/n100.r03.s043.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s043_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s043_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s043_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task e071a634 (flow 3d4ece28): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s004_output\"\n        wget -O \"n100.r03.s004_output/n100.r03.s004.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s004_output/n100.r03.s004.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s004_output/n100.r03.s004.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s004_output/n100.r03.s004.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s004_output/n100.r03.s004.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s004_output/n100.r03.s004.reference.fas\" \"n100.r03.s004_output/n100.r03.s004.fq1.fastq\" \"n100.r03.s004_output/n100.r03.s004.fq2.fastq\" | samtools view -bS - > \"n100.r03.s004_output/n100.r03.s004.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s004_output/n100.r03.s004.untrimmed.sorted.bam\" \"n100.r03.s004_output/n100.r03.s004.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s004_output/n100.r03.s004.untrimmed.sorted.bam\" -b \"n100.r03.s004_output/n100.r03.s004.primers.bed\" -p \"n100.r03.s004_output/n100.r03.s004.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s004_output/n100.r03.s004.trimmed.sorted.bam\" \"n100.r03.s004_output/n100.r03.s004.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s004_output/n100.r03.s004.reference.fas\" \"n100.r03.s004_output/n100.r03.s004.trimmed.sorted.bam\" > \"n100.r03.s004_output/n100.r03.s004.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s004_output/n100.r03.s004.reference.fas\" --call-indels \"n100.r03.s004_output/n100.r03.s004.trimmed.sorted.bam\" > \"n100.r03.s004_output/n100.r03.s004.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s004_output/n100.r03.s004.trimmed.sorted.bam\" > \"n100.r03.s004_output/n100.r03.s004.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s004_output/n100.r03.s004.depth.txt\" \"n100.r03.s004_output/n100.r03.s004.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s004_output/n100.r03.s004.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s004_output/n100.r03.s004.reference.fas\" | bcftools consensus -m \"n100.r03.s004_output/n100.r03.s004.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s004_output/n100.r03.s004.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s004_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s004_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s004_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task b4bc837b (flow d79d1747): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s077_output\"\n        wget -O \"n100.r03.s077_output/n100.r03.s077.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s077_output/n100.r03.s077.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s077_output/n100.r03.s077.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s077_output/n100.r03.s077.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s077_output/n100.r03.s077.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s077_output/n100.r03.s077.reference.fas\" \"n100.r03.s077_output/n100.r03.s077.fq1.fastq\" \"n100.r03.s077_output/n100.r03.s077.fq2.fastq\" | samtools view -bS - > \"n100.r03.s077_output/n100.r03.s077.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s077_output/n100.r03.s077.untrimmed.sorted.bam\" \"n100.r03.s077_output/n100.r03.s077.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s077_output/n100.r03.s077.untrimmed.sorted.bam\" -b \"n100.r03.s077_output/n100.r03.s077.primers.bed\" -p \"n100.r03.s077_output/n100.r03.s077.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s077_output/n100.r03.s077.trimmed.sorted.bam\" \"n100.r03.s077_output/n100.r03.s077.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s077_output/n100.r03.s077.reference.fas\" \"n100.r03.s077_output/n100.r03.s077.trimmed.sorted.bam\" > \"n100.r03.s077_output/n100.r03.s077.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s077_output/n100.r03.s077.reference.fas\" --call-indels \"n100.r03.s077_output/n100.r03.s077.trimmed.sorted.bam\" > \"n100.r03.s077_output/n100.r03.s077.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s077_output/n100.r03.s077.trimmed.sorted.bam\" > \"n100.r03.s077_output/n100.r03.s077.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s077_output/n100.r03.s077.depth.txt\" \"n100.r03.s077_output/n100.r03.s077.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s077_output/n100.r03.s077.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s077_output/n100.r03.s077.reference.fas\" | bcftools consensus -m \"n100.r03.s077_output/n100.r03.s077.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s077_output/n100.r03.s077.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s077_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s077_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s077_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task a64ed56a (flow dcbde93f): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s030_output\"\n        wget -O \"n100.r03.s030_output/n100.r03.s030.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s030_output/n100.r03.s030.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s030_output/n100.r03.s030.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s030_output/n100.r03.s030.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s030_output/n100.r03.s030.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s030_output/n100.r03.s030.reference.fas\" \"n100.r03.s030_output/n100.r03.s030.fq1.fastq\" \"n100.r03.s030_output/n100.r03.s030.fq2.fastq\" | samtools view -bS - > \"n100.r03.s030_output/n100.r03.s030.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s030_output/n100.r03.s030.untrimmed.sorted.bam\" \"n100.r03.s030_output/n100.r03.s030.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s030_output/n100.r03.s030.untrimmed.sorted.bam\" -b \"n100.r03.s030_output/n100.r03.s030.primers.bed\" -p \"n100.r03.s030_output/n100.r03.s030.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s030_output/n100.r03.s030.trimmed.sorted.bam\" \"n100.r03.s030_output/n100.r03.s030.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s030_output/n100.r03.s030.reference.fas\" \"n100.r03.s030_output/n100.r03.s030.trimmed.sorted.bam\" > \"n100.r03.s030_output/n100.r03.s030.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s030_output/n100.r03.s030.reference.fas\" --call-indels \"n100.r03.s030_output/n100.r03.s030.trimmed.sorted.bam\" > \"n100.r03.s030_output/n100.r03.s030.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s030_output/n100.r03.s030.trimmed.sorted.bam\" > \"n100.r03.s030_output/n100.r03.s030.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s030_output/n100.r03.s030.depth.txt\" \"n100.r03.s030_output/n100.r03.s030.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s030_output/n100.r03.s030.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s030_output/n100.r03.s030.reference.fas\" | bcftools consensus -m \"n100.r03.s030_output/n100.r03.s030.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s030_output/n100.r03.s030.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s030_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s030_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s030_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task f158a18a (flow 6b8f67c3): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s023_output\"\n        wget -O \"n100.r03.s023_output/n100.r03.s023.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s023_output/n100.r03.s023.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s023_output/n100.r03.s023.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s023_output/n100.r03.s023.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s023_output/n100.r03.s023.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s023_output/n100.r03.s023.reference.fas\" \"n100.r03.s023_output/n100.r03.s023.fq1.fastq\" \"n100.r03.s023_output/n100.r03.s023.fq2.fastq\" | samtools view -bS - > \"n100.r03.s023_output/n100.r03.s023.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s023_output/n100.r03.s023.untrimmed.sorted.bam\" \"n100.r03.s023_output/n100.r03.s023.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s023_output/n100.r03.s023.untrimmed.sorted.bam\" -b \"n100.r03.s023_output/n100.r03.s023.primers.bed\" -p \"n100.r03.s023_output/n100.r03.s023.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s023_output/n100.r03.s023.trimmed.sorted.bam\" \"n100.r03.s023_output/n100.r03.s023.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s023_output/n100.r03.s023.reference.fas\" \"n100.r03.s023_output/n100.r03.s023.trimmed.sorted.bam\" > \"n100.r03.s023_output/n100.r03.s023.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s023_output/n100.r03.s023.reference.fas\" --call-indels \"n100.r03.s023_output/n100.r03.s023.trimmed.sorted.bam\" > \"n100.r03.s023_output/n100.r03.s023.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s023_output/n100.r03.s023.trimmed.sorted.bam\" > \"n100.r03.s023_output/n100.r03.s023.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s023_output/n100.r03.s023.depth.txt\" \"n100.r03.s023_output/n100.r03.s023.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s023_output/n100.r03.s023.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s023_output/n100.r03.s023.reference.fas\" | bcftools consensus -m \"n100.r03.s023_output/n100.r03.s023.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s023_output/n100.r03.s023.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s023_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s023_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s023_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task e1c62bb9 (flow 5ae9b7e9): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s088_output\"\n        wget -O \"n100.r03.s088_output/n100.r03.s088.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s088_output/n100.r03.s088.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s088_output/n100.r03.s088.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s088_output/n100.r03.s088.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s088_output/n100.r03.s088.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s088_output/n100.r03.s088.reference.fas\" \"n100.r03.s088_output/n100.r03.s088.fq1.fastq\" \"n100.r03.s088_output/n100.r03.s088.fq2.fastq\" | samtools view -bS - > \"n100.r03.s088_output/n100.r03.s088.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s088_output/n100.r03.s088.untrimmed.sorted.bam\" \"n100.r03.s088_output/n100.r03.s088.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s088_output/n100.r03.s088.untrimmed.sorted.bam\" -b \"n100.r03.s088_output/n100.r03.s088.primers.bed\" -p \"n100.r03.s088_output/n100.r03.s088.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s088_output/n100.r03.s088.trimmed.sorted.bam\" \"n100.r03.s088_output/n100.r03.s088.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s088_output/n100.r03.s088.reference.fas\" \"n100.r03.s088_output/n100.r03.s088.trimmed.sorted.bam\" > \"n100.r03.s088_output/n100.r03.s088.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s088_output/n100.r03.s088.reference.fas\" --call-indels \"n100.r03.s088_output/n100.r03.s088.trimmed.sorted.bam\" > \"n100.r03.s088_output/n100.r03.s088.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s088_output/n100.r03.s088.trimmed.sorted.bam\" > \"n100.r03.s088_output/n100.r03.s088.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s088_output/n100.r03.s088.depth.txt\" \"n100.r03.s088_output/n100.r03.s088.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s088_output/n100.r03.s088.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s088_output/n100.r03.s088.reference.fas\" | bcftools consensus -m \"n100.r03.s088_output/n100.r03.s088.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s088_output/n100.r03.s088.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s088_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s088_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s088_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task c81055a4 (flow d0b7bfb6): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s036_output\"\n        wget -O \"n100.r03.s036_output/n100.r03.s036.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s036_output/n100.r03.s036.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s036_output/n100.r03.s036.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s036_output/n100.r03.s036.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s036_output/n100.r03.s036.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s036_output/n100.r03.s036.reference.fas\" \"n100.r03.s036_output/n100.r03.s036.fq1.fastq\" \"n100.r03.s036_output/n100.r03.s036.fq2.fastq\" | samtools view -bS - > \"n100.r03.s036_output/n100.r03.s036.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s036_output/n100.r03.s036.untrimmed.sorted.bam\" \"n100.r03.s036_output/n100.r03.s036.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s036_output/n100.r03.s036.untrimmed.sorted.bam\" -b \"n100.r03.s036_output/n100.r03.s036.primers.bed\" -p \"n100.r03.s036_output/n100.r03.s036.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s036_output/n100.r03.s036.trimmed.sorted.bam\" \"n100.r03.s036_output/n100.r03.s036.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s036_output/n100.r03.s036.reference.fas\" \"n100.r03.s036_output/n100.r03.s036.trimmed.sorted.bam\" > \"n100.r03.s036_output/n100.r03.s036.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s036_output/n100.r03.s036.reference.fas\" --call-indels \"n100.r03.s036_output/n100.r03.s036.trimmed.sorted.bam\" > \"n100.r03.s036_output/n100.r03.s036.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s036_output/n100.r03.s036.trimmed.sorted.bam\" > \"n100.r03.s036_output/n100.r03.s036.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s036_output/n100.r03.s036.depth.txt\" \"n100.r03.s036_output/n100.r03.s036.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s036_output/n100.r03.s036.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s036_output/n100.r03.s036.reference.fas\" | bcftools consensus -m \"n100.r03.s036_output/n100.r03.s036.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s036_output/n100.r03.s036.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s036_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s036_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s036_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 95b9c199 (flow d919402c): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s052_output\"\n        wget -O \"n100.r03.s052_output/n100.r03.s052.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s052_output/n100.r03.s052.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s052_output/n100.r03.s052.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s052_output/n100.r03.s052.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s052_output/n100.r03.s052.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s052_output/n100.r03.s052.reference.fas\" \"n100.r03.s052_output/n100.r03.s052.fq1.fastq\" \"n100.r03.s052_output/n100.r03.s052.fq2.fastq\" | samtools view -bS - > \"n100.r03.s052_output/n100.r03.s052.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s052_output/n100.r03.s052.untrimmed.sorted.bam\" \"n100.r03.s052_output/n100.r03.s052.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s052_output/n100.r03.s052.untrimmed.sorted.bam\" -b \"n100.r03.s052_output/n100.r03.s052.primers.bed\" -p \"n100.r03.s052_output/n100.r03.s052.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s052_output/n100.r03.s052.trimmed.sorted.bam\" \"n100.r03.s052_output/n100.r03.s052.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s052_output/n100.r03.s052.reference.fas\" \"n100.r03.s052_output/n100.r03.s052.trimmed.sorted.bam\" > \"n100.r03.s052_output/n100.r03.s052.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s052_output/n100.r03.s052.reference.fas\" --call-indels \"n100.r03.s052_output/n100.r03.s052.trimmed.sorted.bam\" > \"n100.r03.s052_output/n100.r03.s052.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s052_output/n100.r03.s052.trimmed.sorted.bam\" > \"n100.r03.s052_output/n100.r03.s052.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s052_output/n100.r03.s052.depth.txt\" \"n100.r03.s052_output/n100.r03.s052.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s052_output/n100.r03.s052.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s052_output/n100.r03.s052.reference.fas\" | bcftools consensus -m \"n100.r03.s052_output/n100.r03.s052.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s052_output/n100.r03.s052.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s052_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s052_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s052_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task ca4ff408 (flow 5e2cc6ee): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s051_output\"\n        wget -O \"n100.r03.s051_output/n100.r03.s051.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s051_output/n100.r03.s051.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s051_output/n100.r03.s051.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s051_output/n100.r03.s051.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s051_output/n100.r03.s051.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s051_output/n100.r03.s051.reference.fas\" \"n100.r03.s051_output/n100.r03.s051.fq1.fastq\" \"n100.r03.s051_output/n100.r03.s051.fq2.fastq\" | samtools view -bS - > \"n100.r03.s051_output/n100.r03.s051.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s051_output/n100.r03.s051.untrimmed.sorted.bam\" \"n100.r03.s051_output/n100.r03.s051.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s051_output/n100.r03.s051.untrimmed.sorted.bam\" -b \"n100.r03.s051_output/n100.r03.s051.primers.bed\" -p \"n100.r03.s051_output/n100.r03.s051.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s051_output/n100.r03.s051.trimmed.sorted.bam\" \"n100.r03.s051_output/n100.r03.s051.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s051_output/n100.r03.s051.reference.fas\" \"n100.r03.s051_output/n100.r03.s051.trimmed.sorted.bam\" > \"n100.r03.s051_output/n100.r03.s051.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s051_output/n100.r03.s051.reference.fas\" --call-indels \"n100.r03.s051_output/n100.r03.s051.trimmed.sorted.bam\" > \"n100.r03.s051_output/n100.r03.s051.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s051_output/n100.r03.s051.trimmed.sorted.bam\" > \"n100.r03.s051_output/n100.r03.s051.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s051_output/n100.r03.s051.depth.txt\" \"n100.r03.s051_output/n100.r03.s051.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s051_output/n100.r03.s051.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s051_output/n100.r03.s051.reference.fas\" | bcftools consensus -m \"n100.r03.s051_output/n100.r03.s051.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s051_output/n100.r03.s051.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s051_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s051_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s051_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 7d7ed1d5 (flow 12b846cf): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s031_output\"\n        wget -O \"n100.r03.s031_output/n100.r03.s031.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s031_output/n100.r03.s031.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s031_output/n100.r03.s031.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s031_output/n100.r03.s031.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s031_output/n100.r03.s031.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s031_output/n100.r03.s031.reference.fas\" \"n100.r03.s031_output/n100.r03.s031.fq1.fastq\" \"n100.r03.s031_output/n100.r03.s031.fq2.fastq\" | samtools view -bS - > \"n100.r03.s031_output/n100.r03.s031.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s031_output/n100.r03.s031.untrimmed.sorted.bam\" \"n100.r03.s031_output/n100.r03.s031.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s031_output/n100.r03.s031.untrimmed.sorted.bam\" -b \"n100.r03.s031_output/n100.r03.s031.primers.bed\" -p \"n100.r03.s031_output/n100.r03.s031.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s031_output/n100.r03.s031.trimmed.sorted.bam\" \"n100.r03.s031_output/n100.r03.s031.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s031_output/n100.r03.s031.reference.fas\" \"n100.r03.s031_output/n100.r03.s031.trimmed.sorted.bam\" > \"n100.r03.s031_output/n100.r03.s031.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s031_output/n100.r03.s031.reference.fas\" --call-indels \"n100.r03.s031_output/n100.r03.s031.trimmed.sorted.bam\" > \"n100.r03.s031_output/n100.r03.s031.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s031_output/n100.r03.s031.trimmed.sorted.bam\" > \"n100.r03.s031_output/n100.r03.s031.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s031_output/n100.r03.s031.depth.txt\" \"n100.r03.s031_output/n100.r03.s031.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s031_output/n100.r03.s031.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s031_output/n100.r03.s031.reference.fas\" | bcftools consensus -m \"n100.r03.s031_output/n100.r03.s031.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s031_output/n100.r03.s031.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s031_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s031_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s031_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task bbcfd2b5 (flow 2ac719fa): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s016_output\"\n        wget -O \"n100.r03.s016_output/n100.r03.s016.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s016_output/n100.r03.s016.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s016_output/n100.r03.s016.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s016_output/n100.r03.s016.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s016_output/n100.r03.s016.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s016_output/n100.r03.s016.reference.fas\" \"n100.r03.s016_output/n100.r03.s016.fq1.fastq\" \"n100.r03.s016_output/n100.r03.s016.fq2.fastq\" | samtools view -bS - > \"n100.r03.s016_output/n100.r03.s016.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s016_output/n100.r03.s016.untrimmed.sorted.bam\" \"n100.r03.s016_output/n100.r03.s016.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s016_output/n100.r03.s016.untrimmed.sorted.bam\" -b \"n100.r03.s016_output/n100.r03.s016.primers.bed\" -p \"n100.r03.s016_output/n100.r03.s016.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s016_output/n100.r03.s016.trimmed.sorted.bam\" \"n100.r03.s016_output/n100.r03.s016.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s016_output/n100.r03.s016.reference.fas\" \"n100.r03.s016_output/n100.r03.s016.trimmed.sorted.bam\" > \"n100.r03.s016_output/n100.r03.s016.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s016_output/n100.r03.s016.reference.fas\" --call-indels \"n100.r03.s016_output/n100.r03.s016.trimmed.sorted.bam\" > \"n100.r03.s016_output/n100.r03.s016.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s016_output/n100.r03.s016.trimmed.sorted.bam\" > \"n100.r03.s016_output/n100.r03.s016.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s016_output/n100.r03.s016.depth.txt\" \"n100.r03.s016_output/n100.r03.s016.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s016_output/n100.r03.s016.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s016_output/n100.r03.s016.reference.fas\" | bcftools consensus -m \"n100.r03.s016_output/n100.r03.s016.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s016_output/n100.r03.s016.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s016_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s016_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s016_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task eb1b1e87 (flow eacb1e8b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s087_output\"\n        wget -O \"n100.r03.s087_output/n100.r03.s087.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s087_output/n100.r03.s087.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s087_output/n100.r03.s087.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s087_output/n100.r03.s087.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s087_output/n100.r03.s087.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s087_output/n100.r03.s087.reference.fas\" \"n100.r03.s087_output/n100.r03.s087.fq1.fastq\" \"n100.r03.s087_output/n100.r03.s087.fq2.fastq\" | samtools view -bS - > \"n100.r03.s087_output/n100.r03.s087.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s087_output/n100.r03.s087.untrimmed.sorted.bam\" \"n100.r03.s087_output/n100.r03.s087.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s087_output/n100.r03.s087.untrimmed.sorted.bam\" -b \"n100.r03.s087_output/n100.r03.s087.primers.bed\" -p \"n100.r03.s087_output/n100.r03.s087.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s087_output/n100.r03.s087.trimmed.sorted.bam\" \"n100.r03.s087_output/n100.r03.s087.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s087_output/n100.r03.s087.reference.fas\" \"n100.r03.s087_output/n100.r03.s087.trimmed.sorted.bam\" > \"n100.r03.s087_output/n100.r03.s087.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s087_output/n100.r03.s087.reference.fas\" --call-indels \"n100.r03.s087_output/n100.r03.s087.trimmed.sorted.bam\" > \"n100.r03.s087_output/n100.r03.s087.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s087_output/n100.r03.s087.trimmed.sorted.bam\" > \"n100.r03.s087_output/n100.r03.s087.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s087_output/n100.r03.s087.depth.txt\" \"n100.r03.s087_output/n100.r03.s087.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s087_output/n100.r03.s087.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s087_output/n100.r03.s087.reference.fas\" | bcftools consensus -m \"n100.r03.s087_output/n100.r03.s087.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s087_output/n100.r03.s087.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s087_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s087_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s087_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task ab470caf (flow 74da68ff): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s027_output\"\n        wget -O \"n100.r03.s027_output/n100.r03.s027.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s027_output/n100.r03.s027.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s027_output/n100.r03.s027.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s027_output/n100.r03.s027.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s027_output/n100.r03.s027.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s027_output/n100.r03.s027.reference.fas\" \"n100.r03.s027_output/n100.r03.s027.fq1.fastq\" \"n100.r03.s027_output/n100.r03.s027.fq2.fastq\" | samtools view -bS - > \"n100.r03.s027_output/n100.r03.s027.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s027_output/n100.r03.s027.untrimmed.sorted.bam\" \"n100.r03.s027_output/n100.r03.s027.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s027_output/n100.r03.s027.untrimmed.sorted.bam\" -b \"n100.r03.s027_output/n100.r03.s027.primers.bed\" -p \"n100.r03.s027_output/n100.r03.s027.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s027_output/n100.r03.s027.trimmed.sorted.bam\" \"n100.r03.s027_output/n100.r03.s027.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s027_output/n100.r03.s027.reference.fas\" \"n100.r03.s027_output/n100.r03.s027.trimmed.sorted.bam\" > \"n100.r03.s027_output/n100.r03.s027.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s027_output/n100.r03.s027.reference.fas\" --call-indels \"n100.r03.s027_output/n100.r03.s027.trimmed.sorted.bam\" > \"n100.r03.s027_output/n100.r03.s027.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s027_output/n100.r03.s027.trimmed.sorted.bam\" > \"n100.r03.s027_output/n100.r03.s027.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s027_output/n100.r03.s027.depth.txt\" \"n100.r03.s027_output/n100.r03.s027.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s027_output/n100.r03.s027.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s027_output/n100.r03.s027.reference.fas\" | bcftools consensus -m \"n100.r03.s027_output/n100.r03.s027.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s027_output/n100.r03.s027.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s027_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s027_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s027_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task cffdf651 (flow 46b547c0): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s097_output\"\n        wget -O \"n100.r03.s097_output/n100.r03.s097.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s097_output/n100.r03.s097.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s097_output/n100.r03.s097.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s097_output/n100.r03.s097.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s097_output/n100.r03.s097.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s097_output/n100.r03.s097.reference.fas\" \"n100.r03.s097_output/n100.r03.s097.fq1.fastq\" \"n100.r03.s097_output/n100.r03.s097.fq2.fastq\" | samtools view -bS - > \"n100.r03.s097_output/n100.r03.s097.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s097_output/n100.r03.s097.untrimmed.sorted.bam\" \"n100.r03.s097_output/n100.r03.s097.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s097_output/n100.r03.s097.untrimmed.sorted.bam\" -b \"n100.r03.s097_output/n100.r03.s097.primers.bed\" -p \"n100.r03.s097_output/n100.r03.s097.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s097_output/n100.r03.s097.trimmed.sorted.bam\" \"n100.r03.s097_output/n100.r03.s097.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s097_output/n100.r03.s097.reference.fas\" \"n100.r03.s097_output/n100.r03.s097.trimmed.sorted.bam\" > \"n100.r03.s097_output/n100.r03.s097.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s097_output/n100.r03.s097.reference.fas\" --call-indels \"n100.r03.s097_output/n100.r03.s097.trimmed.sorted.bam\" > \"n100.r03.s097_output/n100.r03.s097.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s097_output/n100.r03.s097.trimmed.sorted.bam\" > \"n100.r03.s097_output/n100.r03.s097.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s097_output/n100.r03.s097.depth.txt\" \"n100.r03.s097_output/n100.r03.s097.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s097_output/n100.r03.s097.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s097_output/n100.r03.s097.reference.fas\" | bcftools consensus -m \"n100.r03.s097_output/n100.r03.s097.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s097_output/n100.r03.s097.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s097_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s097_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s097_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 6c9931f7 (flow 84fe3b5f): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s065_output\"\n        wget -O \"n100.r03.s065_output/n100.r03.s065.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s065_output/n100.r03.s065.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s065_output/n100.r03.s065.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s065_output/n100.r03.s065.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s065_output/n100.r03.s065.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s065_output/n100.r03.s065.reference.fas\" \"n100.r03.s065_output/n100.r03.s065.fq1.fastq\" \"n100.r03.s065_output/n100.r03.s065.fq2.fastq\" | samtools view -bS - > \"n100.r03.s065_output/n100.r03.s065.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s065_output/n100.r03.s065.untrimmed.sorted.bam\" \"n100.r03.s065_output/n100.r03.s065.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s065_output/n100.r03.s065.untrimmed.sorted.bam\" -b \"n100.r03.s065_output/n100.r03.s065.primers.bed\" -p \"n100.r03.s065_output/n100.r03.s065.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s065_output/n100.r03.s065.trimmed.sorted.bam\" \"n100.r03.s065_output/n100.r03.s065.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s065_output/n100.r03.s065.reference.fas\" \"n100.r03.s065_output/n100.r03.s065.trimmed.sorted.bam\" > \"n100.r03.s065_output/n100.r03.s065.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s065_output/n100.r03.s065.reference.fas\" --call-indels \"n100.r03.s065_output/n100.r03.s065.trimmed.sorted.bam\" > \"n100.r03.s065_output/n100.r03.s065.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s065_output/n100.r03.s065.trimmed.sorted.bam\" > \"n100.r03.s065_output/n100.r03.s065.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s065_output/n100.r03.s065.depth.txt\" \"n100.r03.s065_output/n100.r03.s065.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s065_output/n100.r03.s065.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s065_output/n100.r03.s065.reference.fas\" | bcftools consensus -m \"n100.r03.s065_output/n100.r03.s065.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s065_output/n100.r03.s065.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s065_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s065_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s065_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task c3a30d01 (flow d81cbbca): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s003_output\"\n        wget -O \"n100.r03.s003_output/n100.r03.s003.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s003_output/n100.r03.s003.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s003_output/n100.r03.s003.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s003_output/n100.r03.s003.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s003_output/n100.r03.s003.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s003_output/n100.r03.s003.reference.fas\" \"n100.r03.s003_output/n100.r03.s003.fq1.fastq\" \"n100.r03.s003_output/n100.r03.s003.fq2.fastq\" | samtools view -bS - > \"n100.r03.s003_output/n100.r03.s003.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s003_output/n100.r03.s003.untrimmed.sorted.bam\" \"n100.r03.s003_output/n100.r03.s003.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s003_output/n100.r03.s003.untrimmed.sorted.bam\" -b \"n100.r03.s003_output/n100.r03.s003.primers.bed\" -p \"n100.r03.s003_output/n100.r03.s003.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s003_output/n100.r03.s003.trimmed.sorted.bam\" \"n100.r03.s003_output/n100.r03.s003.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s003_output/n100.r03.s003.reference.fas\" \"n100.r03.s003_output/n100.r03.s003.trimmed.sorted.bam\" > \"n100.r03.s003_output/n100.r03.s003.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s003_output/n100.r03.s003.reference.fas\" --call-indels \"n100.r03.s003_output/n100.r03.s003.trimmed.sorted.bam\" > \"n100.r03.s003_output/n100.r03.s003.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s003_output/n100.r03.s003.trimmed.sorted.bam\" > \"n100.r03.s003_output/n100.r03.s003.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s003_output/n100.r03.s003.depth.txt\" \"n100.r03.s003_output/n100.r03.s003.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s003_output/n100.r03.s003.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s003_output/n100.r03.s003.reference.fas\" | bcftools consensus -m \"n100.r03.s003_output/n100.r03.s003.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s003_output/n100.r03.s003.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s003_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s003_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s003_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 169fa905 (flow 9b3c4623): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s062_output\"\n        wget -O \"n100.r03.s062_output/n100.r03.s062.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s062_output/n100.r03.s062.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s062_output/n100.r03.s062.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s062_output/n100.r03.s062.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s062_output/n100.r03.s062.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s062_output/n100.r03.s062.reference.fas\" \"n100.r03.s062_output/n100.r03.s062.fq1.fastq\" \"n100.r03.s062_output/n100.r03.s062.fq2.fastq\" | samtools view -bS - > \"n100.r03.s062_output/n100.r03.s062.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s062_output/n100.r03.s062.untrimmed.sorted.bam\" \"n100.r03.s062_output/n100.r03.s062.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s062_output/n100.r03.s062.untrimmed.sorted.bam\" -b \"n100.r03.s062_output/n100.r03.s062.primers.bed\" -p \"n100.r03.s062_output/n100.r03.s062.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s062_output/n100.r03.s062.trimmed.sorted.bam\" \"n100.r03.s062_output/n100.r03.s062.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s062_output/n100.r03.s062.reference.fas\" \"n100.r03.s062_output/n100.r03.s062.trimmed.sorted.bam\" > \"n100.r03.s062_output/n100.r03.s062.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s062_output/n100.r03.s062.reference.fas\" --call-indels \"n100.r03.s062_output/n100.r03.s062.trimmed.sorted.bam\" > \"n100.r03.s062_output/n100.r03.s062.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s062_output/n100.r03.s062.trimmed.sorted.bam\" > \"n100.r03.s062_output/n100.r03.s062.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s062_output/n100.r03.s062.depth.txt\" \"n100.r03.s062_output/n100.r03.s062.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s062_output/n100.r03.s062.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s062_output/n100.r03.s062.reference.fas\" | bcftools consensus -m \"n100.r03.s062_output/n100.r03.s062.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s062_output/n100.r03.s062.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s062_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s062_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s062_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 11b3b7c2 (flow 7b9422b3): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s071_output\"\n        wget -O \"n100.r03.s071_output/n100.r03.s071.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s071_output/n100.r03.s071.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s071_output/n100.r03.s071.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s071_output/n100.r03.s071.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s071_output/n100.r03.s071.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s071_output/n100.r03.s071.reference.fas\" \"n100.r03.s071_output/n100.r03.s071.fq1.fastq\" \"n100.r03.s071_output/n100.r03.s071.fq2.fastq\" | samtools view -bS - > \"n100.r03.s071_output/n100.r03.s071.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s071_output/n100.r03.s071.untrimmed.sorted.bam\" \"n100.r03.s071_output/n100.r03.s071.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s071_output/n100.r03.s071.untrimmed.sorted.bam\" -b \"n100.r03.s071_output/n100.r03.s071.primers.bed\" -p \"n100.r03.s071_output/n100.r03.s071.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s071_output/n100.r03.s071.trimmed.sorted.bam\" \"n100.r03.s071_output/n100.r03.s071.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s071_output/n100.r03.s071.reference.fas\" \"n100.r03.s071_output/n100.r03.s071.trimmed.sorted.bam\" > \"n100.r03.s071_output/n100.r03.s071.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s071_output/n100.r03.s071.reference.fas\" --call-indels \"n100.r03.s071_output/n100.r03.s071.trimmed.sorted.bam\" > \"n100.r03.s071_output/n100.r03.s071.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s071_output/n100.r03.s071.trimmed.sorted.bam\" > \"n100.r03.s071_output/n100.r03.s071.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s071_output/n100.r03.s071.depth.txt\" \"n100.r03.s071_output/n100.r03.s071.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s071_output/n100.r03.s071.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s071_output/n100.r03.s071.reference.fas\" | bcftools consensus -m \"n100.r03.s071_output/n100.r03.s071.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s071_output/n100.r03.s071.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s071_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s071_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s071_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 642b8dce (flow da07df2f): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s096_output\"\n        wget -O \"n100.r03.s096_output/n100.r03.s096.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s096_output/n100.r03.s096.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s096_output/n100.r03.s096.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s096_output/n100.r03.s096.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s096_output/n100.r03.s096.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s096_output/n100.r03.s096.reference.fas\" \"n100.r03.s096_output/n100.r03.s096.fq1.fastq\" \"n100.r03.s096_output/n100.r03.s096.fq2.fastq\" | samtools view -bS - > \"n100.r03.s096_output/n100.r03.s096.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s096_output/n100.r03.s096.untrimmed.sorted.bam\" \"n100.r03.s096_output/n100.r03.s096.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s096_output/n100.r03.s096.untrimmed.sorted.bam\" -b \"n100.r03.s096_output/n100.r03.s096.primers.bed\" -p \"n100.r03.s096_output/n100.r03.s096.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s096_output/n100.r03.s096.trimmed.sorted.bam\" \"n100.r03.s096_output/n100.r03.s096.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s096_output/n100.r03.s096.reference.fas\" \"n100.r03.s096_output/n100.r03.s096.trimmed.sorted.bam\" > \"n100.r03.s096_output/n100.r03.s096.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s096_output/n100.r03.s096.reference.fas\" --call-indels \"n100.r03.s096_output/n100.r03.s096.trimmed.sorted.bam\" > \"n100.r03.s096_output/n100.r03.s096.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s096_output/n100.r03.s096.trimmed.sorted.bam\" > \"n100.r03.s096_output/n100.r03.s096.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s096_output/n100.r03.s096.depth.txt\" \"n100.r03.s096_output/n100.r03.s096.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s096_output/n100.r03.s096.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s096_output/n100.r03.s096.reference.fas\" | bcftools consensus -m \"n100.r03.s096_output/n100.r03.s096.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s096_output/n100.r03.s096.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s096_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s096_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s096_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 13667c21 (flow da42f528): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s072_output\"\n        wget -O \"n100.r03.s072_output/n100.r03.s072.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s072_output/n100.r03.s072.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s072_output/n100.r03.s072.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s072_output/n100.r03.s072.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s072_output/n100.r03.s072.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s072_output/n100.r03.s072.reference.fas\" \"n100.r03.s072_output/n100.r03.s072.fq1.fastq\" \"n100.r03.s072_output/n100.r03.s072.fq2.fastq\" | samtools view -bS - > \"n100.r03.s072_output/n100.r03.s072.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s072_output/n100.r03.s072.untrimmed.sorted.bam\" \"n100.r03.s072_output/n100.r03.s072.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s072_output/n100.r03.s072.untrimmed.sorted.bam\" -b \"n100.r03.s072_output/n100.r03.s072.primers.bed\" -p \"n100.r03.s072_output/n100.r03.s072.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s072_output/n100.r03.s072.trimmed.sorted.bam\" \"n100.r03.s072_output/n100.r03.s072.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s072_output/n100.r03.s072.reference.fas\" \"n100.r03.s072_output/n100.r03.s072.trimmed.sorted.bam\" > \"n100.r03.s072_output/n100.r03.s072.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s072_output/n100.r03.s072.reference.fas\" --call-indels \"n100.r03.s072_output/n100.r03.s072.trimmed.sorted.bam\" > \"n100.r03.s072_output/n100.r03.s072.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s072_output/n100.r03.s072.trimmed.sorted.bam\" > \"n100.r03.s072_output/n100.r03.s072.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s072_output/n100.r03.s072.depth.txt\" \"n100.r03.s072_output/n100.r03.s072.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s072_output/n100.r03.s072.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s072_output/n100.r03.s072.reference.fas\" | bcftools consensus -m \"n100.r03.s072_output/n100.r03.s072.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s072_output/n100.r03.s072.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s072_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s072_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s072_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task c63135f5 (flow b89df6be): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s090_output\"\n        wget -O \"n100.r03.s090_output/n100.r03.s090.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s090_output/n100.r03.s090.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s090_output/n100.r03.s090.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s090_output/n100.r03.s090.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s090_output/n100.r03.s090.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s090_output/n100.r03.s090.reference.fas\" \"n100.r03.s090_output/n100.r03.s090.fq1.fastq\" \"n100.r03.s090_output/n100.r03.s090.fq2.fastq\" | samtools view -bS - > \"n100.r03.s090_output/n100.r03.s090.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s090_output/n100.r03.s090.untrimmed.sorted.bam\" \"n100.r03.s090_output/n100.r03.s090.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s090_output/n100.r03.s090.untrimmed.sorted.bam\" -b \"n100.r03.s090_output/n100.r03.s090.primers.bed\" -p \"n100.r03.s090_output/n100.r03.s090.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s090_output/n100.r03.s090.trimmed.sorted.bam\" \"n100.r03.s090_output/n100.r03.s090.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s090_output/n100.r03.s090.reference.fas\" \"n100.r03.s090_output/n100.r03.s090.trimmed.sorted.bam\" > \"n100.r03.s090_output/n100.r03.s090.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s090_output/n100.r03.s090.reference.fas\" --call-indels \"n100.r03.s090_output/n100.r03.s090.trimmed.sorted.bam\" > \"n100.r03.s090_output/n100.r03.s090.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s090_output/n100.r03.s090.trimmed.sorted.bam\" > \"n100.r03.s090_output/n100.r03.s090.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s090_output/n100.r03.s090.depth.txt\" \"n100.r03.s090_output/n100.r03.s090.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s090_output/n100.r03.s090.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s090_output/n100.r03.s090.reference.fas\" | bcftools consensus -m \"n100.r03.s090_output/n100.r03.s090.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s090_output/n100.r03.s090.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s090_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s090_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s090_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 3d6f2242 (flow 88b2cc74): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s020_output\"\n        wget -O \"n100.r03.s020_output/n100.r03.s020.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s020_output/n100.r03.s020.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s020_output/n100.r03.s020.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s020_output/n100.r03.s020.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s020_output/n100.r03.s020.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s020_output/n100.r03.s020.reference.fas\" \"n100.r03.s020_output/n100.r03.s020.fq1.fastq\" \"n100.r03.s020_output/n100.r03.s020.fq2.fastq\" | samtools view -bS - > \"n100.r03.s020_output/n100.r03.s020.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s020_output/n100.r03.s020.untrimmed.sorted.bam\" \"n100.r03.s020_output/n100.r03.s020.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s020_output/n100.r03.s020.untrimmed.sorted.bam\" -b \"n100.r03.s020_output/n100.r03.s020.primers.bed\" -p \"n100.r03.s020_output/n100.r03.s020.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s020_output/n100.r03.s020.trimmed.sorted.bam\" \"n100.r03.s020_output/n100.r03.s020.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s020_output/n100.r03.s020.reference.fas\" \"n100.r03.s020_output/n100.r03.s020.trimmed.sorted.bam\" > \"n100.r03.s020_output/n100.r03.s020.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s020_output/n100.r03.s020.reference.fas\" --call-indels \"n100.r03.s020_output/n100.r03.s020.trimmed.sorted.bam\" > \"n100.r03.s020_output/n100.r03.s020.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s020_output/n100.r03.s020.trimmed.sorted.bam\" > \"n100.r03.s020_output/n100.r03.s020.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s020_output/n100.r03.s020.depth.txt\" \"n100.r03.s020_output/n100.r03.s020.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s020_output/n100.r03.s020.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s020_output/n100.r03.s020.reference.fas\" | bcftools consensus -m \"n100.r03.s020_output/n100.r03.s020.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s020_output/n100.r03.s020.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s020_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s020_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s020_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 7194b040 (flow e2be785d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s067_output\"\n        wget -O \"n100.r03.s067_output/n100.r03.s067.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s067_output/n100.r03.s067.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s067_output/n100.r03.s067.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s067_output/n100.r03.s067.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s067_output/n100.r03.s067.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s067_output/n100.r03.s067.reference.fas\" \"n100.r03.s067_output/n100.r03.s067.fq1.fastq\" \"n100.r03.s067_output/n100.r03.s067.fq2.fastq\" | samtools view -bS - > \"n100.r03.s067_output/n100.r03.s067.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s067_output/n100.r03.s067.untrimmed.sorted.bam\" \"n100.r03.s067_output/n100.r03.s067.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s067_output/n100.r03.s067.untrimmed.sorted.bam\" -b \"n100.r03.s067_output/n100.r03.s067.primers.bed\" -p \"n100.r03.s067_output/n100.r03.s067.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s067_output/n100.r03.s067.trimmed.sorted.bam\" \"n100.r03.s067_output/n100.r03.s067.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s067_output/n100.r03.s067.reference.fas\" \"n100.r03.s067_output/n100.r03.s067.trimmed.sorted.bam\" > \"n100.r03.s067_output/n100.r03.s067.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s067_output/n100.r03.s067.reference.fas\" --call-indels \"n100.r03.s067_output/n100.r03.s067.trimmed.sorted.bam\" > \"n100.r03.s067_output/n100.r03.s067.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s067_output/n100.r03.s067.trimmed.sorted.bam\" > \"n100.r03.s067_output/n100.r03.s067.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s067_output/n100.r03.s067.depth.txt\" \"n100.r03.s067_output/n100.r03.s067.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s067_output/n100.r03.s067.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s067_output/n100.r03.s067.reference.fas\" | bcftools consensus -m \"n100.r03.s067_output/n100.r03.s067.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s067_output/n100.r03.s067.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s067_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s067_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s067_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 97699c51 (flow ea5d62c8): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s001_output\"\n        wget -O \"n100.r03.s001_output/n100.r03.s001.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s001_output/n100.r03.s001.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s001_output/n100.r03.s001.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s001_output/n100.r03.s001.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s001_output/n100.r03.s001.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s001_output/n100.r03.s001.reference.fas\" \"n100.r03.s001_output/n100.r03.s001.fq1.fastq\" \"n100.r03.s001_output/n100.r03.s001.fq2.fastq\" | samtools view -bS - > \"n100.r03.s001_output/n100.r03.s001.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s001_output/n100.r03.s001.untrimmed.sorted.bam\" \"n100.r03.s001_output/n100.r03.s001.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s001_output/n100.r03.s001.untrimmed.sorted.bam\" -b \"n100.r03.s001_output/n100.r03.s001.primers.bed\" -p \"n100.r03.s001_output/n100.r03.s001.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s001_output/n100.r03.s001.trimmed.sorted.bam\" \"n100.r03.s001_output/n100.r03.s001.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s001_output/n100.r03.s001.reference.fas\" \"n100.r03.s001_output/n100.r03.s001.trimmed.sorted.bam\" > \"n100.r03.s001_output/n100.r03.s001.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s001_output/n100.r03.s001.reference.fas\" --call-indels \"n100.r03.s001_output/n100.r03.s001.trimmed.sorted.bam\" > \"n100.r03.s001_output/n100.r03.s001.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s001_output/n100.r03.s001.trimmed.sorted.bam\" > \"n100.r03.s001_output/n100.r03.s001.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s001_output/n100.r03.s001.depth.txt\" \"n100.r03.s001_output/n100.r03.s001.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s001_output/n100.r03.s001.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s001_output/n100.r03.s001.reference.fas\" | bcftools consensus -m \"n100.r03.s001_output/n100.r03.s001.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s001_output/n100.r03.s001.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s001_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s001_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s001_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 94f5f6bc (flow 213b5afb): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s050_output\"\n        wget -O \"n100.r03.s050_output/n100.r03.s050.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s050_output/n100.r03.s050.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s050_output/n100.r03.s050.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s050_output/n100.r03.s050.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s050_output/n100.r03.s050.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s050_output/n100.r03.s050.reference.fas\" \"n100.r03.s050_output/n100.r03.s050.fq1.fastq\" \"n100.r03.s050_output/n100.r03.s050.fq2.fastq\" | samtools view -bS - > \"n100.r03.s050_output/n100.r03.s050.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s050_output/n100.r03.s050.untrimmed.sorted.bam\" \"n100.r03.s050_output/n100.r03.s050.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s050_output/n100.r03.s050.untrimmed.sorted.bam\" -b \"n100.r03.s050_output/n100.r03.s050.primers.bed\" -p \"n100.r03.s050_output/n100.r03.s050.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s050_output/n100.r03.s050.trimmed.sorted.bam\" \"n100.r03.s050_output/n100.r03.s050.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s050_output/n100.r03.s050.reference.fas\" \"n100.r03.s050_output/n100.r03.s050.trimmed.sorted.bam\" > \"n100.r03.s050_output/n100.r03.s050.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s050_output/n100.r03.s050.reference.fas\" --call-indels \"n100.r03.s050_output/n100.r03.s050.trimmed.sorted.bam\" > \"n100.r03.s050_output/n100.r03.s050.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s050_output/n100.r03.s050.trimmed.sorted.bam\" > \"n100.r03.s050_output/n100.r03.s050.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s050_output/n100.r03.s050.depth.txt\" \"n100.r03.s050_output/n100.r03.s050.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s050_output/n100.r03.s050.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s050_output/n100.r03.s050.reference.fas\" | bcftools consensus -m \"n100.r03.s050_output/n100.r03.s050.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s050_output/n100.r03.s050.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s050_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s050_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s050_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 79b42f3c (flow 250ebac9): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s045_output\"\n        wget -O \"n100.r03.s045_output/n100.r03.s045.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s045_output/n100.r03.s045.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s045_output/n100.r03.s045.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s045_output/n100.r03.s045.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s045_output/n100.r03.s045.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s045_output/n100.r03.s045.reference.fas\" \"n100.r03.s045_output/n100.r03.s045.fq1.fastq\" \"n100.r03.s045_output/n100.r03.s045.fq2.fastq\" | samtools view -bS - > \"n100.r03.s045_output/n100.r03.s045.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s045_output/n100.r03.s045.untrimmed.sorted.bam\" \"n100.r03.s045_output/n100.r03.s045.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s045_output/n100.r03.s045.untrimmed.sorted.bam\" -b \"n100.r03.s045_output/n100.r03.s045.primers.bed\" -p \"n100.r03.s045_output/n100.r03.s045.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s045_output/n100.r03.s045.trimmed.sorted.bam\" \"n100.r03.s045_output/n100.r03.s045.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s045_output/n100.r03.s045.reference.fas\" \"n100.r03.s045_output/n100.r03.s045.trimmed.sorted.bam\" > \"n100.r03.s045_output/n100.r03.s045.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s045_output/n100.r03.s045.reference.fas\" --call-indels \"n100.r03.s045_output/n100.r03.s045.trimmed.sorted.bam\" > \"n100.r03.s045_output/n100.r03.s045.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s045_output/n100.r03.s045.trimmed.sorted.bam\" > \"n100.r03.s045_output/n100.r03.s045.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s045_output/n100.r03.s045.depth.txt\" \"n100.r03.s045_output/n100.r03.s045.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s045_output/n100.r03.s045.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s045_output/n100.r03.s045.reference.fas\" | bcftools consensus -m \"n100.r03.s045_output/n100.r03.s045.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s045_output/n100.r03.s045.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s045_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s045_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s045_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 2cffe22c (flow 53f15bbb): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s080_output\"\n        wget -O \"n100.r03.s080_output/n100.r03.s080.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s080_output/n100.r03.s080.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s080_output/n100.r03.s080.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s080_output/n100.r03.s080.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s080_output/n100.r03.s080.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s080_output/n100.r03.s080.reference.fas\" \"n100.r03.s080_output/n100.r03.s080.fq1.fastq\" \"n100.r03.s080_output/n100.r03.s080.fq2.fastq\" | samtools view -bS - > \"n100.r03.s080_output/n100.r03.s080.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s080_output/n100.r03.s080.untrimmed.sorted.bam\" \"n100.r03.s080_output/n100.r03.s080.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s080_output/n100.r03.s080.untrimmed.sorted.bam\" -b \"n100.r03.s080_output/n100.r03.s080.primers.bed\" -p \"n100.r03.s080_output/n100.r03.s080.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s080_output/n100.r03.s080.trimmed.sorted.bam\" \"n100.r03.s080_output/n100.r03.s080.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s080_output/n100.r03.s080.reference.fas\" \"n100.r03.s080_output/n100.r03.s080.trimmed.sorted.bam\" > \"n100.r03.s080_output/n100.r03.s080.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s080_output/n100.r03.s080.reference.fas\" --call-indels \"n100.r03.s080_output/n100.r03.s080.trimmed.sorted.bam\" > \"n100.r03.s080_output/n100.r03.s080.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s080_output/n100.r03.s080.trimmed.sorted.bam\" > \"n100.r03.s080_output/n100.r03.s080.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s080_output/n100.r03.s080.depth.txt\" \"n100.r03.s080_output/n100.r03.s080.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s080_output/n100.r03.s080.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s080_output/n100.r03.s080.reference.fas\" | bcftools consensus -m \"n100.r03.s080_output/n100.r03.s080.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s080_output/n100.r03.s080.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s080_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s080_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s080_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 9a3d3840 (flow be1bb147): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s058_output\"\n        wget -O \"n100.r03.s058_output/n100.r03.s058.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s058_output/n100.r03.s058.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s058_output/n100.r03.s058.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s058_output/n100.r03.s058.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s058_output/n100.r03.s058.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s058_output/n100.r03.s058.reference.fas\" \"n100.r03.s058_output/n100.r03.s058.fq1.fastq\" \"n100.r03.s058_output/n100.r03.s058.fq2.fastq\" | samtools view -bS - > \"n100.r03.s058_output/n100.r03.s058.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s058_output/n100.r03.s058.untrimmed.sorted.bam\" \"n100.r03.s058_output/n100.r03.s058.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s058_output/n100.r03.s058.untrimmed.sorted.bam\" -b \"n100.r03.s058_output/n100.r03.s058.primers.bed\" -p \"n100.r03.s058_output/n100.r03.s058.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s058_output/n100.r03.s058.trimmed.sorted.bam\" \"n100.r03.s058_output/n100.r03.s058.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s058_output/n100.r03.s058.reference.fas\" \"n100.r03.s058_output/n100.r03.s058.trimmed.sorted.bam\" > \"n100.r03.s058_output/n100.r03.s058.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s058_output/n100.r03.s058.reference.fas\" --call-indels \"n100.r03.s058_output/n100.r03.s058.trimmed.sorted.bam\" > \"n100.r03.s058_output/n100.r03.s058.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s058_output/n100.r03.s058.trimmed.sorted.bam\" > \"n100.r03.s058_output/n100.r03.s058.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s058_output/n100.r03.s058.depth.txt\" \"n100.r03.s058_output/n100.r03.s058.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s058_output/n100.r03.s058.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s058_output/n100.r03.s058.reference.fas\" | bcftools consensus -m \"n100.r03.s058_output/n100.r03.s058.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s058_output/n100.r03.s058.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s058_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s058_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s058_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 21f0e678 (flow e70dcb06): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s053_output\"\n        wget -O \"n100.r03.s053_output/n100.r03.s053.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s053_output/n100.r03.s053.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s053_output/n100.r03.s053.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s053_output/n100.r03.s053.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s053_output/n100.r03.s053.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s053_output/n100.r03.s053.reference.fas\" \"n100.r03.s053_output/n100.r03.s053.fq1.fastq\" \"n100.r03.s053_output/n100.r03.s053.fq2.fastq\" | samtools view -bS - > \"n100.r03.s053_output/n100.r03.s053.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s053_output/n100.r03.s053.untrimmed.sorted.bam\" \"n100.r03.s053_output/n100.r03.s053.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s053_output/n100.r03.s053.untrimmed.sorted.bam\" -b \"n100.r03.s053_output/n100.r03.s053.primers.bed\" -p \"n100.r03.s053_output/n100.r03.s053.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s053_output/n100.r03.s053.trimmed.sorted.bam\" \"n100.r03.s053_output/n100.r03.s053.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s053_output/n100.r03.s053.reference.fas\" \"n100.r03.s053_output/n100.r03.s053.trimmed.sorted.bam\" > \"n100.r03.s053_output/n100.r03.s053.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s053_output/n100.r03.s053.reference.fas\" --call-indels \"n100.r03.s053_output/n100.r03.s053.trimmed.sorted.bam\" > \"n100.r03.s053_output/n100.r03.s053.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s053_output/n100.r03.s053.trimmed.sorted.bam\" > \"n100.r03.s053_output/n100.r03.s053.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s053_output/n100.r03.s053.depth.txt\" \"n100.r03.s053_output/n100.r03.s053.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s053_output/n100.r03.s053.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s053_output/n100.r03.s053.reference.fas\" | bcftools consensus -m \"n100.r03.s053_output/n100.r03.s053.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s053_output/n100.r03.s053.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s053_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s053_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s053_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 192e5535 (flow e589bead): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s002_output\"\n        wget -O \"n100.r03.s002_output/n100.r03.s002.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s002_output/n100.r03.s002.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s002_output/n100.r03.s002.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s002_output/n100.r03.s002.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s002_output/n100.r03.s002.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s002_output/n100.r03.s002.reference.fas\" \"n100.r03.s002_output/n100.r03.s002.fq1.fastq\" \"n100.r03.s002_output/n100.r03.s002.fq2.fastq\" | samtools view -bS - > \"n100.r03.s002_output/n100.r03.s002.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s002_output/n100.r03.s002.untrimmed.sorted.bam\" \"n100.r03.s002_output/n100.r03.s002.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s002_output/n100.r03.s002.untrimmed.sorted.bam\" -b \"n100.r03.s002_output/n100.r03.s002.primers.bed\" -p \"n100.r03.s002_output/n100.r03.s002.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s002_output/n100.r03.s002.trimmed.sorted.bam\" \"n100.r03.s002_output/n100.r03.s002.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s002_output/n100.r03.s002.reference.fas\" \"n100.r03.s002_output/n100.r03.s002.trimmed.sorted.bam\" > \"n100.r03.s002_output/n100.r03.s002.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s002_output/n100.r03.s002.reference.fas\" --call-indels \"n100.r03.s002_output/n100.r03.s002.trimmed.sorted.bam\" > \"n100.r03.s002_output/n100.r03.s002.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s002_output/n100.r03.s002.trimmed.sorted.bam\" > \"n100.r03.s002_output/n100.r03.s002.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s002_output/n100.r03.s002.depth.txt\" \"n100.r03.s002_output/n100.r03.s002.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s002_output/n100.r03.s002.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s002_output/n100.r03.s002.reference.fas\" | bcftools consensus -m \"n100.r03.s002_output/n100.r03.s002.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s002_output/n100.r03.s002.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s002_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s002_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s002_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 79e1224c (flow 7dc6a89a): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s100_output\"\n        wget -O \"n100.r03.s100_output/n100.r03.s100.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s100_output/n100.r03.s100.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s100_output/n100.r03.s100.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s100_output/n100.r03.s100.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s100_output/n100.r03.s100.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s100_output/n100.r03.s100.reference.fas\" \"n100.r03.s100_output/n100.r03.s100.fq1.fastq\" \"n100.r03.s100_output/n100.r03.s100.fq2.fastq\" | samtools view -bS - > \"n100.r03.s100_output/n100.r03.s100.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s100_output/n100.r03.s100.untrimmed.sorted.bam\" \"n100.r03.s100_output/n100.r03.s100.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s100_output/n100.r03.s100.untrimmed.sorted.bam\" -b \"n100.r03.s100_output/n100.r03.s100.primers.bed\" -p \"n100.r03.s100_output/n100.r03.s100.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s100_output/n100.r03.s100.trimmed.sorted.bam\" \"n100.r03.s100_output/n100.r03.s100.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s100_output/n100.r03.s100.reference.fas\" \"n100.r03.s100_output/n100.r03.s100.trimmed.sorted.bam\" > \"n100.r03.s100_output/n100.r03.s100.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s100_output/n100.r03.s100.reference.fas\" --call-indels \"n100.r03.s100_output/n100.r03.s100.trimmed.sorted.bam\" > \"n100.r03.s100_output/n100.r03.s100.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s100_output/n100.r03.s100.trimmed.sorted.bam\" > \"n100.r03.s100_output/n100.r03.s100.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s100_output/n100.r03.s100.depth.txt\" \"n100.r03.s100_output/n100.r03.s100.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s100_output/n100.r03.s100.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s100_output/n100.r03.s100.reference.fas\" | bcftools consensus -m \"n100.r03.s100_output/n100.r03.s100.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s100_output/n100.r03.s100.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s100_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s100_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s100_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 693e99fc (flow 13424ad8): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s081_output\"\n        wget -O \"n100.r03.s081_output/n100.r03.s081.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s081_output/n100.r03.s081.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s081_output/n100.r03.s081.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s081_output/n100.r03.s081.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s081_output/n100.r03.s081.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s081_output/n100.r03.s081.reference.fas\" \"n100.r03.s081_output/n100.r03.s081.fq1.fastq\" \"n100.r03.s081_output/n100.r03.s081.fq2.fastq\" | samtools view -bS - > \"n100.r03.s081_output/n100.r03.s081.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s081_output/n100.r03.s081.untrimmed.sorted.bam\" \"n100.r03.s081_output/n100.r03.s081.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s081_output/n100.r03.s081.untrimmed.sorted.bam\" -b \"n100.r03.s081_output/n100.r03.s081.primers.bed\" -p \"n100.r03.s081_output/n100.r03.s081.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s081_output/n100.r03.s081.trimmed.sorted.bam\" \"n100.r03.s081_output/n100.r03.s081.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s081_output/n100.r03.s081.reference.fas\" \"n100.r03.s081_output/n100.r03.s081.trimmed.sorted.bam\" > \"n100.r03.s081_output/n100.r03.s081.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s081_output/n100.r03.s081.reference.fas\" --call-indels \"n100.r03.s081_output/n100.r03.s081.trimmed.sorted.bam\" > \"n100.r03.s081_output/n100.r03.s081.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s081_output/n100.r03.s081.trimmed.sorted.bam\" > \"n100.r03.s081_output/n100.r03.s081.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s081_output/n100.r03.s081.depth.txt\" \"n100.r03.s081_output/n100.r03.s081.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s081_output/n100.r03.s081.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s081_output/n100.r03.s081.reference.fas\" | bcftools consensus -m \"n100.r03.s081_output/n100.r03.s081.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s081_output/n100.r03.s081.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s081_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s081_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s081_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 13345758 (flow d19b125a): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s056_output\"\n        wget -O \"n100.r03.s056_output/n100.r03.s056.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s056_output/n100.r03.s056.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s056_output/n100.r03.s056.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s056_output/n100.r03.s056.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s056_output/n100.r03.s056.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s056_output/n100.r03.s056.reference.fas\" \"n100.r03.s056_output/n100.r03.s056.fq1.fastq\" \"n100.r03.s056_output/n100.r03.s056.fq2.fastq\" | samtools view -bS - > \"n100.r03.s056_output/n100.r03.s056.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s056_output/n100.r03.s056.untrimmed.sorted.bam\" \"n100.r03.s056_output/n100.r03.s056.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s056_output/n100.r03.s056.untrimmed.sorted.bam\" -b \"n100.r03.s056_output/n100.r03.s056.primers.bed\" -p \"n100.r03.s056_output/n100.r03.s056.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s056_output/n100.r03.s056.trimmed.sorted.bam\" \"n100.r03.s056_output/n100.r03.s056.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s056_output/n100.r03.s056.reference.fas\" \"n100.r03.s056_output/n100.r03.s056.trimmed.sorted.bam\" > \"n100.r03.s056_output/n100.r03.s056.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s056_output/n100.r03.s056.reference.fas\" --call-indels \"n100.r03.s056_output/n100.r03.s056.trimmed.sorted.bam\" > \"n100.r03.s056_output/n100.r03.s056.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s056_output/n100.r03.s056.trimmed.sorted.bam\" > \"n100.r03.s056_output/n100.r03.s056.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s056_output/n100.r03.s056.depth.txt\" \"n100.r03.s056_output/n100.r03.s056.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s056_output/n100.r03.s056.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s056_output/n100.r03.s056.reference.fas\" | bcftools consensus -m \"n100.r03.s056_output/n100.r03.s056.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s056_output/n100.r03.s056.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s056_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s056_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s056_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 5f06865c (flow a8ad97f1): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s089_output\"\n        wget -O \"n100.r03.s089_output/n100.r03.s089.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s089_output/n100.r03.s089.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s089_output/n100.r03.s089.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s089_output/n100.r03.s089.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s089_output/n100.r03.s089.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s089_output/n100.r03.s089.reference.fas\" \"n100.r03.s089_output/n100.r03.s089.fq1.fastq\" \"n100.r03.s089_output/n100.r03.s089.fq2.fastq\" | samtools view -bS - > \"n100.r03.s089_output/n100.r03.s089.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s089_output/n100.r03.s089.untrimmed.sorted.bam\" \"n100.r03.s089_output/n100.r03.s089.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s089_output/n100.r03.s089.untrimmed.sorted.bam\" -b \"n100.r03.s089_output/n100.r03.s089.primers.bed\" -p \"n100.r03.s089_output/n100.r03.s089.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s089_output/n100.r03.s089.trimmed.sorted.bam\" \"n100.r03.s089_output/n100.r03.s089.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s089_output/n100.r03.s089.reference.fas\" \"n100.r03.s089_output/n100.r03.s089.trimmed.sorted.bam\" > \"n100.r03.s089_output/n100.r03.s089.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s089_output/n100.r03.s089.reference.fas\" --call-indels \"n100.r03.s089_output/n100.r03.s089.trimmed.sorted.bam\" > \"n100.r03.s089_output/n100.r03.s089.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s089_output/n100.r03.s089.trimmed.sorted.bam\" > \"n100.r03.s089_output/n100.r03.s089.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s089_output/n100.r03.s089.depth.txt\" \"n100.r03.s089_output/n100.r03.s089.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s089_output/n100.r03.s089.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s089_output/n100.r03.s089.reference.fas\" | bcftools consensus -m \"n100.r03.s089_output/n100.r03.s089.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s089_output/n100.r03.s089.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s089_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s089_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s089_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 301a76b8 (flow ea41a4f2): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s025_output\"\n        wget -O \"n100.r03.s025_output/n100.r03.s025.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s025_output/n100.r03.s025.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s025_output/n100.r03.s025.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s025_output/n100.r03.s025.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s025_output/n100.r03.s025.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s025_output/n100.r03.s025.reference.fas\" \"n100.r03.s025_output/n100.r03.s025.fq1.fastq\" \"n100.r03.s025_output/n100.r03.s025.fq2.fastq\" | samtools view -bS - > \"n100.r03.s025_output/n100.r03.s025.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s025_output/n100.r03.s025.untrimmed.sorted.bam\" \"n100.r03.s025_output/n100.r03.s025.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s025_output/n100.r03.s025.untrimmed.sorted.bam\" -b \"n100.r03.s025_output/n100.r03.s025.primers.bed\" -p \"n100.r03.s025_output/n100.r03.s025.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s025_output/n100.r03.s025.trimmed.sorted.bam\" \"n100.r03.s025_output/n100.r03.s025.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s025_output/n100.r03.s025.reference.fas\" \"n100.r03.s025_output/n100.r03.s025.trimmed.sorted.bam\" > \"n100.r03.s025_output/n100.r03.s025.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s025_output/n100.r03.s025.reference.fas\" --call-indels \"n100.r03.s025_output/n100.r03.s025.trimmed.sorted.bam\" > \"n100.r03.s025_output/n100.r03.s025.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s025_output/n100.r03.s025.trimmed.sorted.bam\" > \"n100.r03.s025_output/n100.r03.s025.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s025_output/n100.r03.s025.depth.txt\" \"n100.r03.s025_output/n100.r03.s025.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s025_output/n100.r03.s025.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s025_output/n100.r03.s025.reference.fas\" | bcftools consensus -m \"n100.r03.s025_output/n100.r03.s025.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s025_output/n100.r03.s025.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s025_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s025_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s025_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 6ab20197 (flow e04e53c6): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s073_output\"\n        wget -O \"n100.r03.s073_output/n100.r03.s073.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s073_output/n100.r03.s073.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s073_output/n100.r03.s073.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s073_output/n100.r03.s073.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s073_output/n100.r03.s073.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s073_output/n100.r03.s073.reference.fas\" \"n100.r03.s073_output/n100.r03.s073.fq1.fastq\" \"n100.r03.s073_output/n100.r03.s073.fq2.fastq\" | samtools view -bS - > \"n100.r03.s073_output/n100.r03.s073.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s073_output/n100.r03.s073.untrimmed.sorted.bam\" \"n100.r03.s073_output/n100.r03.s073.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s073_output/n100.r03.s073.untrimmed.sorted.bam\" -b \"n100.r03.s073_output/n100.r03.s073.primers.bed\" -p \"n100.r03.s073_output/n100.r03.s073.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s073_output/n100.r03.s073.trimmed.sorted.bam\" \"n100.r03.s073_output/n100.r03.s073.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s073_output/n100.r03.s073.reference.fas\" \"n100.r03.s073_output/n100.r03.s073.trimmed.sorted.bam\" > \"n100.r03.s073_output/n100.r03.s073.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s073_output/n100.r03.s073.reference.fas\" --call-indels \"n100.r03.s073_output/n100.r03.s073.trimmed.sorted.bam\" > \"n100.r03.s073_output/n100.r03.s073.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s073_output/n100.r03.s073.trimmed.sorted.bam\" > \"n100.r03.s073_output/n100.r03.s073.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s073_output/n100.r03.s073.depth.txt\" \"n100.r03.s073_output/n100.r03.s073.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s073_output/n100.r03.s073.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s073_output/n100.r03.s073.reference.fas\" | bcftools consensus -m \"n100.r03.s073_output/n100.r03.s073.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s073_output/n100.r03.s073.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s073_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s073_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s073_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task bd82dc2a (flow d0504b1f): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s099_output\"\n        wget -O \"n100.r03.s099_output/n100.r03.s099.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s099_output/n100.r03.s099.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s099_output/n100.r03.s099.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s099_output/n100.r03.s099.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s099_output/n100.r03.s099.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s099_output/n100.r03.s099.reference.fas\" \"n100.r03.s099_output/n100.r03.s099.fq1.fastq\" \"n100.r03.s099_output/n100.r03.s099.fq2.fastq\" | samtools view -bS - > \"n100.r03.s099_output/n100.r03.s099.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s099_output/n100.r03.s099.untrimmed.sorted.bam\" \"n100.r03.s099_output/n100.r03.s099.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s099_output/n100.r03.s099.untrimmed.sorted.bam\" -b \"n100.r03.s099_output/n100.r03.s099.primers.bed\" -p \"n100.r03.s099_output/n100.r03.s099.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s099_output/n100.r03.s099.trimmed.sorted.bam\" \"n100.r03.s099_output/n100.r03.s099.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s099_output/n100.r03.s099.reference.fas\" \"n100.r03.s099_output/n100.r03.s099.trimmed.sorted.bam\" > \"n100.r03.s099_output/n100.r03.s099.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s099_output/n100.r03.s099.reference.fas\" --call-indels \"n100.r03.s099_output/n100.r03.s099.trimmed.sorted.bam\" > \"n100.r03.s099_output/n100.r03.s099.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s099_output/n100.r03.s099.trimmed.sorted.bam\" > \"n100.r03.s099_output/n100.r03.s099.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s099_output/n100.r03.s099.depth.txt\" \"n100.r03.s099_output/n100.r03.s099.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s099_output/n100.r03.s099.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s099_output/n100.r03.s099.reference.fas\" | bcftools consensus -m \"n100.r03.s099_output/n100.r03.s099.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s099_output/n100.r03.s099.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s099_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s099_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s099_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task d3dd0d64 (flow 7e374560): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s070_output\"\n        wget -O \"n100.r03.s070_output/n100.r03.s070.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s070_output/n100.r03.s070.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s070_output/n100.r03.s070.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s070_output/n100.r03.s070.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s070_output/n100.r03.s070.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s070_output/n100.r03.s070.reference.fas\" \"n100.r03.s070_output/n100.r03.s070.fq1.fastq\" \"n100.r03.s070_output/n100.r03.s070.fq2.fastq\" | samtools view -bS - > \"n100.r03.s070_output/n100.r03.s070.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s070_output/n100.r03.s070.untrimmed.sorted.bam\" \"n100.r03.s070_output/n100.r03.s070.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s070_output/n100.r03.s070.untrimmed.sorted.bam\" -b \"n100.r03.s070_output/n100.r03.s070.primers.bed\" -p \"n100.r03.s070_output/n100.r03.s070.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s070_output/n100.r03.s070.trimmed.sorted.bam\" \"n100.r03.s070_output/n100.r03.s070.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s070_output/n100.r03.s070.reference.fas\" \"n100.r03.s070_output/n100.r03.s070.trimmed.sorted.bam\" > \"n100.r03.s070_output/n100.r03.s070.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s070_output/n100.r03.s070.reference.fas\" --call-indels \"n100.r03.s070_output/n100.r03.s070.trimmed.sorted.bam\" > \"n100.r03.s070_output/n100.r03.s070.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s070_output/n100.r03.s070.trimmed.sorted.bam\" > \"n100.r03.s070_output/n100.r03.s070.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s070_output/n100.r03.s070.depth.txt\" \"n100.r03.s070_output/n100.r03.s070.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s070_output/n100.r03.s070.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s070_output/n100.r03.s070.reference.fas\" | bcftools consensus -m \"n100.r03.s070_output/n100.r03.s070.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s070_output/n100.r03.s070.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s070_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s070_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s070_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 898bb586 (flow f0229179): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s019_output\"\n        wget -O \"n100.r03.s019_output/n100.r03.s019.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s019_output/n100.r03.s019.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s019_output/n100.r03.s019.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s019_output/n100.r03.s019.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s019_output/n100.r03.s019.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s019_output/n100.r03.s019.reference.fas\" \"n100.r03.s019_output/n100.r03.s019.fq1.fastq\" \"n100.r03.s019_output/n100.r03.s019.fq2.fastq\" | samtools view -bS - > \"n100.r03.s019_output/n100.r03.s019.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s019_output/n100.r03.s019.untrimmed.sorted.bam\" \"n100.r03.s019_output/n100.r03.s019.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s019_output/n100.r03.s019.untrimmed.sorted.bam\" -b \"n100.r03.s019_output/n100.r03.s019.primers.bed\" -p \"n100.r03.s019_output/n100.r03.s019.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s019_output/n100.r03.s019.trimmed.sorted.bam\" \"n100.r03.s019_output/n100.r03.s019.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s019_output/n100.r03.s019.reference.fas\" \"n100.r03.s019_output/n100.r03.s019.trimmed.sorted.bam\" > \"n100.r03.s019_output/n100.r03.s019.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s019_output/n100.r03.s019.reference.fas\" --call-indels \"n100.r03.s019_output/n100.r03.s019.trimmed.sorted.bam\" > \"n100.r03.s019_output/n100.r03.s019.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s019_output/n100.r03.s019.trimmed.sorted.bam\" > \"n100.r03.s019_output/n100.r03.s019.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s019_output/n100.r03.s019.depth.txt\" \"n100.r03.s019_output/n100.r03.s019.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s019_output/n100.r03.s019.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s019_output/n100.r03.s019.reference.fas\" | bcftools consensus -m \"n100.r03.s019_output/n100.r03.s019.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s019_output/n100.r03.s019.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s019_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s019_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s019_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 4e63d0ea (flow c209d771): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s022_output\"\n        wget -O \"n100.r03.s022_output/n100.r03.s022.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s022_output/n100.r03.s022.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s022_output/n100.r03.s022.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s022_output/n100.r03.s022.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s022_output/n100.r03.s022.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s022_output/n100.r03.s022.reference.fas\" \"n100.r03.s022_output/n100.r03.s022.fq1.fastq\" \"n100.r03.s022_output/n100.r03.s022.fq2.fastq\" | samtools view -bS - > \"n100.r03.s022_output/n100.r03.s022.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s022_output/n100.r03.s022.untrimmed.sorted.bam\" \"n100.r03.s022_output/n100.r03.s022.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s022_output/n100.r03.s022.untrimmed.sorted.bam\" -b \"n100.r03.s022_output/n100.r03.s022.primers.bed\" -p \"n100.r03.s022_output/n100.r03.s022.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s022_output/n100.r03.s022.trimmed.sorted.bam\" \"n100.r03.s022_output/n100.r03.s022.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s022_output/n100.r03.s022.reference.fas\" \"n100.r03.s022_output/n100.r03.s022.trimmed.sorted.bam\" > \"n100.r03.s022_output/n100.r03.s022.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s022_output/n100.r03.s022.reference.fas\" --call-indels \"n100.r03.s022_output/n100.r03.s022.trimmed.sorted.bam\" > \"n100.r03.s022_output/n100.r03.s022.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s022_output/n100.r03.s022.trimmed.sorted.bam\" > \"n100.r03.s022_output/n100.r03.s022.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s022_output/n100.r03.s022.depth.txt\" \"n100.r03.s022_output/n100.r03.s022.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s022_output/n100.r03.s022.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s022_output/n100.r03.s022.reference.fas\" | bcftools consensus -m \"n100.r03.s022_output/n100.r03.s022.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s022_output/n100.r03.s022.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s022_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s022_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s022_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task e35b1ff3 (flow b911e660): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s011_output\"\n        wget -O \"n100.r03.s011_output/n100.r03.s011.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s011_output/n100.r03.s011.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s011_output/n100.r03.s011.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s011_output/n100.r03.s011.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s011_output/n100.r03.s011.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s011_output/n100.r03.s011.reference.fas\" \"n100.r03.s011_output/n100.r03.s011.fq1.fastq\" \"n100.r03.s011_output/n100.r03.s011.fq2.fastq\" | samtools view -bS - > \"n100.r03.s011_output/n100.r03.s011.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s011_output/n100.r03.s011.untrimmed.sorted.bam\" \"n100.r03.s011_output/n100.r03.s011.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s011_output/n100.r03.s011.untrimmed.sorted.bam\" -b \"n100.r03.s011_output/n100.r03.s011.primers.bed\" -p \"n100.r03.s011_output/n100.r03.s011.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s011_output/n100.r03.s011.trimmed.sorted.bam\" \"n100.r03.s011_output/n100.r03.s011.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s011_output/n100.r03.s011.reference.fas\" \"n100.r03.s011_output/n100.r03.s011.trimmed.sorted.bam\" > \"n100.r03.s011_output/n100.r03.s011.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s011_output/n100.r03.s011.reference.fas\" --call-indels \"n100.r03.s011_output/n100.r03.s011.trimmed.sorted.bam\" > \"n100.r03.s011_output/n100.r03.s011.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s011_output/n100.r03.s011.trimmed.sorted.bam\" > \"n100.r03.s011_output/n100.r03.s011.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s011_output/n100.r03.s011.depth.txt\" \"n100.r03.s011_output/n100.r03.s011.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s011_output/n100.r03.s011.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s011_output/n100.r03.s011.reference.fas\" | bcftools consensus -m \"n100.r03.s011_output/n100.r03.s011.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s011_output/n100.r03.s011.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s011_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s011_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s011_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 909853ee (flow 3857dd67): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s095_output\"\n        wget -O \"n100.r03.s095_output/n100.r03.s095.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s095_output/n100.r03.s095.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s095_output/n100.r03.s095.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s095_output/n100.r03.s095.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s095_output/n100.r03.s095.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s095_output/n100.r03.s095.reference.fas\" \"n100.r03.s095_output/n100.r03.s095.fq1.fastq\" \"n100.r03.s095_output/n100.r03.s095.fq2.fastq\" | samtools view -bS - > \"n100.r03.s095_output/n100.r03.s095.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s095_output/n100.r03.s095.untrimmed.sorted.bam\" \"n100.r03.s095_output/n100.r03.s095.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s095_output/n100.r03.s095.untrimmed.sorted.bam\" -b \"n100.r03.s095_output/n100.r03.s095.primers.bed\" -p \"n100.r03.s095_output/n100.r03.s095.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s095_output/n100.r03.s095.trimmed.sorted.bam\" \"n100.r03.s095_output/n100.r03.s095.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s095_output/n100.r03.s095.reference.fas\" \"n100.r03.s095_output/n100.r03.s095.trimmed.sorted.bam\" > \"n100.r03.s095_output/n100.r03.s095.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s095_output/n100.r03.s095.reference.fas\" --call-indels \"n100.r03.s095_output/n100.r03.s095.trimmed.sorted.bam\" > \"n100.r03.s095_output/n100.r03.s095.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s095_output/n100.r03.s095.trimmed.sorted.bam\" > \"n100.r03.s095_output/n100.r03.s095.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s095_output/n100.r03.s095.depth.txt\" \"n100.r03.s095_output/n100.r03.s095.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s095_output/n100.r03.s095.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s095_output/n100.r03.s095.reference.fas\" | bcftools consensus -m \"n100.r03.s095_output/n100.r03.s095.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s095_output/n100.r03.s095.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s095_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s095_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s095_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task c3343c1f (flow 1aa8e12b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s079_output\"\n        wget -O \"n100.r03.s079_output/n100.r03.s079.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s079_output/n100.r03.s079.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s079_output/n100.r03.s079.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s079_output/n100.r03.s079.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s079_output/n100.r03.s079.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s079_output/n100.r03.s079.reference.fas\" \"n100.r03.s079_output/n100.r03.s079.fq1.fastq\" \"n100.r03.s079_output/n100.r03.s079.fq2.fastq\" | samtools view -bS - > \"n100.r03.s079_output/n100.r03.s079.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s079_output/n100.r03.s079.untrimmed.sorted.bam\" \"n100.r03.s079_output/n100.r03.s079.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s079_output/n100.r03.s079.untrimmed.sorted.bam\" -b \"n100.r03.s079_output/n100.r03.s079.primers.bed\" -p \"n100.r03.s079_output/n100.r03.s079.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s079_output/n100.r03.s079.trimmed.sorted.bam\" \"n100.r03.s079_output/n100.r03.s079.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s079_output/n100.r03.s079.reference.fas\" \"n100.r03.s079_output/n100.r03.s079.trimmed.sorted.bam\" > \"n100.r03.s079_output/n100.r03.s079.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s079_output/n100.r03.s079.reference.fas\" --call-indels \"n100.r03.s079_output/n100.r03.s079.trimmed.sorted.bam\" > \"n100.r03.s079_output/n100.r03.s079.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s079_output/n100.r03.s079.trimmed.sorted.bam\" > \"n100.r03.s079_output/n100.r03.s079.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s079_output/n100.r03.s079.depth.txt\" \"n100.r03.s079_output/n100.r03.s079.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s079_output/n100.r03.s079.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s079_output/n100.r03.s079.reference.fas\" | bcftools consensus -m \"n100.r03.s079_output/n100.r03.s079.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s079_output/n100.r03.s079.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s079_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s079_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s079_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task e7da8eee (flow 3523219a): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s012_output\"\n        wget -O \"n100.r03.s012_output/n100.r03.s012.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s012_output/n100.r03.s012.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s012_output/n100.r03.s012.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s012_output/n100.r03.s012.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s012_output/n100.r03.s012.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s012_output/n100.r03.s012.reference.fas\" \"n100.r03.s012_output/n100.r03.s012.fq1.fastq\" \"n100.r03.s012_output/n100.r03.s012.fq2.fastq\" | samtools view -bS - > \"n100.r03.s012_output/n100.r03.s012.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s012_output/n100.r03.s012.untrimmed.sorted.bam\" \"n100.r03.s012_output/n100.r03.s012.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s012_output/n100.r03.s012.untrimmed.sorted.bam\" -b \"n100.r03.s012_output/n100.r03.s012.primers.bed\" -p \"n100.r03.s012_output/n100.r03.s012.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s012_output/n100.r03.s012.trimmed.sorted.bam\" \"n100.r03.s012_output/n100.r03.s012.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s012_output/n100.r03.s012.reference.fas\" \"n100.r03.s012_output/n100.r03.s012.trimmed.sorted.bam\" > \"n100.r03.s012_output/n100.r03.s012.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s012_output/n100.r03.s012.reference.fas\" --call-indels \"n100.r03.s012_output/n100.r03.s012.trimmed.sorted.bam\" > \"n100.r03.s012_output/n100.r03.s012.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s012_output/n100.r03.s012.trimmed.sorted.bam\" > \"n100.r03.s012_output/n100.r03.s012.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s012_output/n100.r03.s012.depth.txt\" \"n100.r03.s012_output/n100.r03.s012.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s012_output/n100.r03.s012.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s012_output/n100.r03.s012.reference.fas\" | bcftools consensus -m \"n100.r03.s012_output/n100.r03.s012.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s012_output/n100.r03.s012.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s012_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s012_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s012_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 5a370c3c (flow f85ec8d5): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s006_output\"\n        wget -O \"n100.r03.s006_output/n100.r03.s006.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s006_output/n100.r03.s006.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s006_output/n100.r03.s006.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s006_output/n100.r03.s006.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s006_output/n100.r03.s006.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s006_output/n100.r03.s006.reference.fas\" \"n100.r03.s006_output/n100.r03.s006.fq1.fastq\" \"n100.r03.s006_output/n100.r03.s006.fq2.fastq\" | samtools view -bS - > \"n100.r03.s006_output/n100.r03.s006.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s006_output/n100.r03.s006.untrimmed.sorted.bam\" \"n100.r03.s006_output/n100.r03.s006.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s006_output/n100.r03.s006.untrimmed.sorted.bam\" -b \"n100.r03.s006_output/n100.r03.s006.primers.bed\" -p \"n100.r03.s006_output/n100.r03.s006.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s006_output/n100.r03.s006.trimmed.sorted.bam\" \"n100.r03.s006_output/n100.r03.s006.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s006_output/n100.r03.s006.reference.fas\" \"n100.r03.s006_output/n100.r03.s006.trimmed.sorted.bam\" > \"n100.r03.s006_output/n100.r03.s006.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s006_output/n100.r03.s006.reference.fas\" --call-indels \"n100.r03.s006_output/n100.r03.s006.trimmed.sorted.bam\" > \"n100.r03.s006_output/n100.r03.s006.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s006_output/n100.r03.s006.trimmed.sorted.bam\" > \"n100.r03.s006_output/n100.r03.s006.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s006_output/n100.r03.s006.depth.txt\" \"n100.r03.s006_output/n100.r03.s006.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s006_output/n100.r03.s006.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s006_output/n100.r03.s006.reference.fas\" | bcftools consensus -m \"n100.r03.s006_output/n100.r03.s006.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s006_output/n100.r03.s006.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s006_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s006_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s006_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 4268bbce (flow e09dd2be): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s038_output\"\n        wget -O \"n100.r03.s038_output/n100.r03.s038.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s038_output/n100.r03.s038.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s038_output/n100.r03.s038.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s038_output/n100.r03.s038.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s038_output/n100.r03.s038.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s038_output/n100.r03.s038.reference.fas\" \"n100.r03.s038_output/n100.r03.s038.fq1.fastq\" \"n100.r03.s038_output/n100.r03.s038.fq2.fastq\" | samtools view -bS - > \"n100.r03.s038_output/n100.r03.s038.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s038_output/n100.r03.s038.untrimmed.sorted.bam\" \"n100.r03.s038_output/n100.r03.s038.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s038_output/n100.r03.s038.untrimmed.sorted.bam\" -b \"n100.r03.s038_output/n100.r03.s038.primers.bed\" -p \"n100.r03.s038_output/n100.r03.s038.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s038_output/n100.r03.s038.trimmed.sorted.bam\" \"n100.r03.s038_output/n100.r03.s038.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s038_output/n100.r03.s038.reference.fas\" \"n100.r03.s038_output/n100.r03.s038.trimmed.sorted.bam\" > \"n100.r03.s038_output/n100.r03.s038.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s038_output/n100.r03.s038.reference.fas\" --call-indels \"n100.r03.s038_output/n100.r03.s038.trimmed.sorted.bam\" > \"n100.r03.s038_output/n100.r03.s038.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s038_output/n100.r03.s038.trimmed.sorted.bam\" > \"n100.r03.s038_output/n100.r03.s038.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s038_output/n100.r03.s038.depth.txt\" \"n100.r03.s038_output/n100.r03.s038.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s038_output/n100.r03.s038.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s038_output/n100.r03.s038.reference.fas\" | bcftools consensus -m \"n100.r03.s038_output/n100.r03.s038.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s038_output/n100.r03.s038.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s038_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s038_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s038_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 3edff482 (flow afc84f13): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s014_output\"\n        wget -O \"n100.r03.s014_output/n100.r03.s014.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s014_output/n100.r03.s014.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s014_output/n100.r03.s014.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s014_output/n100.r03.s014.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s014_output/n100.r03.s014.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s014_output/n100.r03.s014.reference.fas\" \"n100.r03.s014_output/n100.r03.s014.fq1.fastq\" \"n100.r03.s014_output/n100.r03.s014.fq2.fastq\" | samtools view -bS - > \"n100.r03.s014_output/n100.r03.s014.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s014_output/n100.r03.s014.untrimmed.sorted.bam\" \"n100.r03.s014_output/n100.r03.s014.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s014_output/n100.r03.s014.untrimmed.sorted.bam\" -b \"n100.r03.s014_output/n100.r03.s014.primers.bed\" -p \"n100.r03.s014_output/n100.r03.s014.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s014_output/n100.r03.s014.trimmed.sorted.bam\" \"n100.r03.s014_output/n100.r03.s014.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s014_output/n100.r03.s014.reference.fas\" \"n100.r03.s014_output/n100.r03.s014.trimmed.sorted.bam\" > \"n100.r03.s014_output/n100.r03.s014.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s014_output/n100.r03.s014.reference.fas\" --call-indels \"n100.r03.s014_output/n100.r03.s014.trimmed.sorted.bam\" > \"n100.r03.s014_output/n100.r03.s014.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s014_output/n100.r03.s014.trimmed.sorted.bam\" > \"n100.r03.s014_output/n100.r03.s014.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s014_output/n100.r03.s014.depth.txt\" \"n100.r03.s014_output/n100.r03.s014.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s014_output/n100.r03.s014.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s014_output/n100.r03.s014.reference.fas\" | bcftools consensus -m \"n100.r03.s014_output/n100.r03.s014.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s014_output/n100.r03.s014.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s014_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s014_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s014_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 733e004a (flow 98beb4a2): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s010_output\"\n        wget -O \"n100.r03.s010_output/n100.r03.s010.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s010_output/n100.r03.s010.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s010_output/n100.r03.s010.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s010_output/n100.r03.s010.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s010_output/n100.r03.s010.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s010_output/n100.r03.s010.reference.fas\" \"n100.r03.s010_output/n100.r03.s010.fq1.fastq\" \"n100.r03.s010_output/n100.r03.s010.fq2.fastq\" | samtools view -bS - > \"n100.r03.s010_output/n100.r03.s010.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s010_output/n100.r03.s010.untrimmed.sorted.bam\" \"n100.r03.s010_output/n100.r03.s010.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s010_output/n100.r03.s010.untrimmed.sorted.bam\" -b \"n100.r03.s010_output/n100.r03.s010.primers.bed\" -p \"n100.r03.s010_output/n100.r03.s010.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s010_output/n100.r03.s010.trimmed.sorted.bam\" \"n100.r03.s010_output/n100.r03.s010.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s010_output/n100.r03.s010.reference.fas\" \"n100.r03.s010_output/n100.r03.s010.trimmed.sorted.bam\" > \"n100.r03.s010_output/n100.r03.s010.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s010_output/n100.r03.s010.reference.fas\" --call-indels \"n100.r03.s010_output/n100.r03.s010.trimmed.sorted.bam\" > \"n100.r03.s010_output/n100.r03.s010.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s010_output/n100.r03.s010.trimmed.sorted.bam\" > \"n100.r03.s010_output/n100.r03.s010.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s010_output/n100.r03.s010.depth.txt\" \"n100.r03.s010_output/n100.r03.s010.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s010_output/n100.r03.s010.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s010_output/n100.r03.s010.reference.fas\" | bcftools consensus -m \"n100.r03.s010_output/n100.r03.s010.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s010_output/n100.r03.s010.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s010_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s010_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s010_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 16ea2db5 (flow ff2c5c89): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s092_output\"\n        wget -O \"n100.r03.s092_output/n100.r03.s092.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s092_output/n100.r03.s092.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s092_output/n100.r03.s092.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s092_output/n100.r03.s092.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s092_output/n100.r03.s092.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s092_output/n100.r03.s092.reference.fas\" \"n100.r03.s092_output/n100.r03.s092.fq1.fastq\" \"n100.r03.s092_output/n100.r03.s092.fq2.fastq\" | samtools view -bS - > \"n100.r03.s092_output/n100.r03.s092.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s092_output/n100.r03.s092.untrimmed.sorted.bam\" \"n100.r03.s092_output/n100.r03.s092.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s092_output/n100.r03.s092.untrimmed.sorted.bam\" -b \"n100.r03.s092_output/n100.r03.s092.primers.bed\" -p \"n100.r03.s092_output/n100.r03.s092.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s092_output/n100.r03.s092.trimmed.sorted.bam\" \"n100.r03.s092_output/n100.r03.s092.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s092_output/n100.r03.s092.reference.fas\" \"n100.r03.s092_output/n100.r03.s092.trimmed.sorted.bam\" > \"n100.r03.s092_output/n100.r03.s092.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s092_output/n100.r03.s092.reference.fas\" --call-indels \"n100.r03.s092_output/n100.r03.s092.trimmed.sorted.bam\" > \"n100.r03.s092_output/n100.r03.s092.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s092_output/n100.r03.s092.trimmed.sorted.bam\" > \"n100.r03.s092_output/n100.r03.s092.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s092_output/n100.r03.s092.depth.txt\" \"n100.r03.s092_output/n100.r03.s092.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s092_output/n100.r03.s092.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s092_output/n100.r03.s092.reference.fas\" | bcftools consensus -m \"n100.r03.s092_output/n100.r03.s092.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s092_output/n100.r03.s092.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s092_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s092_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s092_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 2292bb40 (flow 3abe7efe): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s086_output\"\n        wget -O \"n100.r03.s086_output/n100.r03.s086.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s086_output/n100.r03.s086.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s086_output/n100.r03.s086.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s086_output/n100.r03.s086.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s086_output/n100.r03.s086.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s086_output/n100.r03.s086.reference.fas\" \"n100.r03.s086_output/n100.r03.s086.fq1.fastq\" \"n100.r03.s086_output/n100.r03.s086.fq2.fastq\" | samtools view -bS - > \"n100.r03.s086_output/n100.r03.s086.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s086_output/n100.r03.s086.untrimmed.sorted.bam\" \"n100.r03.s086_output/n100.r03.s086.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s086_output/n100.r03.s086.untrimmed.sorted.bam\" -b \"n100.r03.s086_output/n100.r03.s086.primers.bed\" -p \"n100.r03.s086_output/n100.r03.s086.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s086_output/n100.r03.s086.trimmed.sorted.bam\" \"n100.r03.s086_output/n100.r03.s086.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s086_output/n100.r03.s086.reference.fas\" \"n100.r03.s086_output/n100.r03.s086.trimmed.sorted.bam\" > \"n100.r03.s086_output/n100.r03.s086.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s086_output/n100.r03.s086.reference.fas\" --call-indels \"n100.r03.s086_output/n100.r03.s086.trimmed.sorted.bam\" > \"n100.r03.s086_output/n100.r03.s086.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s086_output/n100.r03.s086.trimmed.sorted.bam\" > \"n100.r03.s086_output/n100.r03.s086.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s086_output/n100.r03.s086.depth.txt\" \"n100.r03.s086_output/n100.r03.s086.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s086_output/n100.r03.s086.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s086_output/n100.r03.s086.reference.fas\" | bcftools consensus -m \"n100.r03.s086_output/n100.r03.s086.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s086_output/n100.r03.s086.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s086_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s086_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s086_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task ee5e2b4e (flow b8e1f21b): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s018_output\"\n        wget -O \"n100.r03.s018_output/n100.r03.s018.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s018_output/n100.r03.s018.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s018_output/n100.r03.s018.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s018_output/n100.r03.s018.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s018_output/n100.r03.s018.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s018_output/n100.r03.s018.reference.fas\" \"n100.r03.s018_output/n100.r03.s018.fq1.fastq\" \"n100.r03.s018_output/n100.r03.s018.fq2.fastq\" | samtools view -bS - > \"n100.r03.s018_output/n100.r03.s018.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s018_output/n100.r03.s018.untrimmed.sorted.bam\" \"n100.r03.s018_output/n100.r03.s018.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s018_output/n100.r03.s018.untrimmed.sorted.bam\" -b \"n100.r03.s018_output/n100.r03.s018.primers.bed\" -p \"n100.r03.s018_output/n100.r03.s018.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s018_output/n100.r03.s018.trimmed.sorted.bam\" \"n100.r03.s018_output/n100.r03.s018.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s018_output/n100.r03.s018.reference.fas\" \"n100.r03.s018_output/n100.r03.s018.trimmed.sorted.bam\" > \"n100.r03.s018_output/n100.r03.s018.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s018_output/n100.r03.s018.reference.fas\" --call-indels \"n100.r03.s018_output/n100.r03.s018.trimmed.sorted.bam\" > \"n100.r03.s018_output/n100.r03.s018.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s018_output/n100.r03.s018.trimmed.sorted.bam\" > \"n100.r03.s018_output/n100.r03.s018.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s018_output/n100.r03.s018.depth.txt\" \"n100.r03.s018_output/n100.r03.s018.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s018_output/n100.r03.s018.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s018_output/n100.r03.s018.reference.fas\" | bcftools consensus -m \"n100.r03.s018_output/n100.r03.s018.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s018_output/n100.r03.s018.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s018_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s018_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s018_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:43:38 scheduler task 77a22266 (flow ad2de73d): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n100.r03.s068_output\"\n        wget -O \"n100.r03.s068_output/n100.r03.s068.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n100.r03.s068_output/n100.r03.s068.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n100.r03.s068_output/n100.r03.s068.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n100.r03.s068_output/n100.r03.s068.fq1.fastq\"\n        cp \"%s\" \"n100.r03.s068_output/n100.r03.s068.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n100.r03.s068_output/n100.r03.s068.reference.fas\" \"n100.r03.s068_output/n100.r03.s068.fq1.fastq\" \"n100.r03.s068_output/n100.r03.s068.fq2.fastq\" | samtools view -bS - > \"n100.r03.s068_output/n100.r03.s068.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s068_output/n100.r03.s068.untrimmed.sorted.bam\" \"n100.r03.s068_output/n100.r03.s068.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n100.r03.s068_output/n100.r03.s068.untrimmed.sorted.bam\" -b \"n100.r03.s068_output/n100.r03.s068.primers.bed\" -p \"n100.r03.s068_output/n100.r03.s068.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n100.r03.s068_output/n100.r03.s068.trimmed.sorted.bam\" \"n100.r03.s068_output/n100.r03.s068.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n100.r03.s068_output/n100.r03.s068.reference.fas\" \"n100.r03.s068_output/n100.r03.s068.trimmed.sorted.bam\" > \"n100.r03.s068_output/n100.r03.s068.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n100.r03.s068_output/n100.r03.s068.reference.fas\" --call-indels \"n100.r03.s068_output/n100.r03.s068.trimmed.sorted.bam\" > \"n100.r03.s068_output/n100.r03.s068.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n100.r03.s068_output/n100.r03.s068.trimmed.sorted.bam\" > \"n100.r03.s068_output/n100.r03.s068.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n100.r03.s068_output/n100.r03.s068.depth.txt\" \"n100.r03.s068_output/n100.r03.s068.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n100.r03.s068_output/n100.r03.s068.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n100.r03.s068_output/n100.r03.s068.reference.fas\" | bcftools consensus -m \"n100.r03.s068_output/n100.r03.s068.low_depth.tsv\" tmp.vcf.gz > \"n100.r03.s068_output/n100.r03.s068.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n100.r03.s068_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n100/r03/n100.r03.s068_R1.fastq 35.4MiB>, val<.=s3://niema-test/n100/r03/n100.r03.s068_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 16:44:21 scheduler task a1c1b94c (flow 41d7dc2a): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 77a22266 (flow ad2de73d): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task ee5e2b4e (flow b8e1f21b): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 2292bb40 (flow 3abe7efe): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 16ea2db5 (flow ff2c5c89): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 733e004a (flow 98beb4a2): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 3edff482 (flow afc84f13): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 4268bbce (flow e09dd2be): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 5a370c3c (flow f85ec8d5): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task e7da8eee (flow 3523219a): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task c3343c1f (flow 1aa8e12b): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 909853ee (flow 3857dd67): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task e35b1ff3 (flow b911e660): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task ee5e2b4e (flow b8e1f21b): loading (try 0): started
2021/07/08 16:44:21 scheduler task 3edff482 (flow afc84f13): loading (try 0): started
2021/07/08 16:44:21 scheduler task e7da8eee (flow 3523219a): loading (try 0): started
2021/07/08 16:44:21 scheduler task c3343c1f (flow 1aa8e12b): loading (try 0): started
2021/07/08 16:44:21 scheduler task 4e63d0ea (flow c209d771): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task e7da8eee (flow 3523219a): loading val<.=s3://niema-test/n100/r03/n100.r03.s012_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 77a22266 (flow ad2de73d): loading (try 0): started
2021/07/08 16:44:21 scheduler task 4e63d0ea (flow c209d771): loading (try 0): started
2021/07/08 16:44:21 scheduler task c3343c1f (flow 1aa8e12b): loading val<.=s3://niema-test/n100/r03/n100.r03.s079_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task e7da8eee (flow 3523219a): loading val<.=s3://niema-test/n100/r03/n100.r03.s012_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 77a22266 (flow ad2de73d): loading val<.=s3://niema-test/n100/r03/n100.r03.s068_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 3edff482 (flow afc84f13): loading val<.=s3://niema-test/n100/r03/n100.r03.s014_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task a1c1b94c (flow 41d7dc2a): loading (try 0): started
2021/07/08 16:44:21 scheduler task a1c1b94c (flow 41d7dc2a): loading val<.=s3://niema-test/n100/r03/n100.r03.s059_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task c3343c1f (flow 1aa8e12b): loading val<.=s3://niema-test/n100/r03/n100.r03.s079_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task e35b1ff3 (flow b911e660): loading (try 0): started
2021/07/08 16:44:21 scheduler task e35b1ff3 (flow b911e660): loading val<.=s3://niema-test/n100/r03/n100.r03.s011_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 2292bb40 (flow 3abe7efe): loading (try 0): started
2021/07/08 16:44:21 scheduler task 16ea2db5 (flow ff2c5c89): loading (try 0): started
2021/07/08 16:44:21 scheduler task 733e004a (flow 98beb4a2): loading (try 0): started
2021/07/08 16:44:21 scheduler task 16ea2db5 (flow ff2c5c89): loading val<.=s3://niema-test/n100/r03/n100.r03.s092_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 733e004a (flow 98beb4a2): loading val<.=s3://niema-test/n100/r03/n100.r03.s010_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 16ea2db5 (flow ff2c5c89): loading val<.=s3://niema-test/n100/r03/n100.r03.s092_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task ee5e2b4e (flow b8e1f21b): loading val<.=s3://niema-test/n100/r03/n100.r03.s018_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 4268bbce (flow e09dd2be): loading (try 0): started
2021/07/08 16:44:21 scheduler task 4268bbce (flow e09dd2be): loading val<.=s3://niema-test/n100/r03/n100.r03.s038_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 898bb586 (flow f0229179): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task d3dd0d64 (flow 7e374560): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task bd82dc2a (flow d0504b1f): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 6ab20197 (flow e04e53c6): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 301a76b8 (flow ea41a4f2): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 5f06865c (flow a8ad97f1): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 13345758 (flow d19b125a): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 693e99fc (flow 13424ad8): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 79e1224c (flow 7dc6a89a): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 192e5535 (flow e589bead): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 21f0e678 (flow e70dcb06): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 9a3d3840 (flow be1bb147): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 2cffe22c (flow 53f15bbb): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 79b42f3c (flow 250ebac9): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 94f5f6bc (flow 213b5afb): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 13345758 (flow d19b125a): loading (try 0): started
2021/07/08 16:44:21 scheduler task 79e1224c (flow 7dc6a89a): loading (try 0): started
2021/07/08 16:44:21 scheduler task 94f5f6bc (flow 213b5afb): loading (try 0): started
2021/07/08 16:44:21 scheduler task 5f06865c (flow a8ad97f1): loading (try 0): started
2021/07/08 16:44:21 scheduler task 192e5535 (flow e589bead): loading (try 0): started
2021/07/08 16:44:21 scheduler task 693e99fc (flow 13424ad8): loading (try 0): started
2021/07/08 16:44:21 scheduler task 9a3d3840 (flow be1bb147): loading (try 0): started
2021/07/08 16:44:21 scheduler task 2cffe22c (flow 53f15bbb): loading (try 0): started
2021/07/08 16:44:21 scheduler task 79e1224c (flow 7dc6a89a): loading val<.=s3://niema-test/n100/r03/n100.r03.s100_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 9a3d3840 (flow be1bb147): loading val<.=s3://niema-test/n100/r03/n100.r03.s058_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 2cffe22c (flow 53f15bbb): loading val<.=s3://niema-test/n100/r03/n100.r03.s080_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 192e5535 (flow e589bead): loading val<.=s3://niema-test/n100/r03/n100.r03.s002_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 693e99fc (flow 13424ad8): loading val<.=s3://niema-test/n100/r03/n100.r03.s081_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 2cffe22c (flow 53f15bbb): loading val<.=s3://niema-test/n100/r03/n100.r03.s080_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 97699c51 (flow ea5d62c8): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 7194b040 (flow e2be785d): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 3d6f2242 (flow 88b2cc74): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task c63135f5 (flow b89df6be): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 13667c21 (flow da42f528): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 642b8dce (flow da07df2f): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 11b3b7c2 (flow 7b9422b3): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 169fa905 (flow 9b3c4623): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task c3a30d01 (flow d81cbbca): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 6c9931f7 (flow 84fe3b5f): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task cffdf651 (flow 46b547c0): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task ab470caf (flow 74da68ff): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task eb1b1e87 (flow eacb1e8b): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task bbcfd2b5 (flow 2ac719fa): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 7d7ed1d5 (flow 12b846cf): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task ca4ff408 (flow 5e2cc6ee): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 95b9c199 (flow d919402c): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task c81055a4 (flow d0b7bfb6): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task e1c62bb9 (flow 5ae9b7e9): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task c63135f5 (flow b89df6be): loading (try 0): started
2021/07/08 16:44:21 scheduler task cffdf651 (flow 46b547c0): loading (try 0): started
2021/07/08 16:44:21 scheduler task 95b9c199 (flow d919402c): loading (try 0): started
2021/07/08 16:44:21 scheduler task c81055a4 (flow d0b7bfb6): loading (try 0): started
2021/07/08 16:44:21 scheduler task c63135f5 (flow b89df6be): loading val<.=s3://niema-test/n100/r03/n100.r03.s090_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task c81055a4 (flow d0b7bfb6): loading val<.=s3://niema-test/n100/r03/n100.r03.s036_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task c81055a4 (flow d0b7bfb6): loading val<.=s3://niema-test/n100/r03/n100.r03.s036_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task ca4ff408 (flow 5e2cc6ee): loading (try 0): started
2021/07/08 16:44:21 scheduler task 898bb586 (flow f0229179): loading (try 0): started
2021/07/08 16:44:21 scheduler task ca4ff408 (flow 5e2cc6ee): loading val<.=s3://niema-test/n100/r03/n100.r03.s051_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task ca4ff408 (flow 5e2cc6ee): loading val<.=s3://niema-test/n100/r03/n100.r03.s051_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 898bb586 (flow f0229179): loading val<.=s3://niema-test/n100/r03/n100.r03.s019_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 169fa905 (flow 9b3c4623): loading (try 0): started
2021/07/08 16:44:21 scheduler task 169fa905 (flow 9b3c4623): loading val<.=s3://niema-test/n100/r03/n100.r03.s062_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task bbcfd2b5 (flow 2ac719fa): loading (try 0): started
2021/07/08 16:44:21 scheduler task 169fa905 (flow 9b3c4623): loading val<.=s3://niema-test/n100/r03/n100.r03.s062_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task bbcfd2b5 (flow 2ac719fa): loading val<.=s3://niema-test/n100/r03/n100.r03.s016_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task f158a18a (flow 6b8f67c3): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task a64ed56a (flow dcbde93f): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task b4bc837b (flow d79d1747): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task e071a634 (flow 3d4ece28): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task dd443953 (flow 3816e5c5): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task df81b75e (flow c2a25c99): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task b4bc837b (flow d79d1747): loading (try 0): started
2021/07/08 16:44:21 scheduler task 94f5f6bc (flow 213b5afb): loading val<.=s3://niema-test/n100/r03/n100.r03.s050_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task f158a18a (flow 6b8f67c3): loading (try 0): started
2021/07/08 16:44:21 scheduler task f158a18a (flow 6b8f67c3): loading val<.=s3://niema-test/n100/r03/n100.r03.s023_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 13345758 (flow d19b125a): loading val<.=s3://niema-test/n100/r03/n100.r03.s056_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 5f06865c (flow a8ad97f1): loading val<.=s3://niema-test/n100/r03/n100.r03.s089_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 301a76b8 (flow ea41a4f2): loading (try 0): started
2021/07/08 16:44:21 scheduler task 301a76b8 (flow ea41a4f2): loading val<.=s3://niema-test/n100/r03/n100.r03.s025_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task f158a18a (flow 6b8f67c3): loading val<.=s3://niema-test/n100/r03/n100.r03.s023_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 79e1224c (flow 7dc6a89a): loading val<.=s3://niema-test/n100/r03/n100.r03.s100_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 5a370c3c (flow f85ec8d5): loading (try 0): started
2021/07/08 16:44:21 scheduler task 5a370c3c (flow f85ec8d5): loading val<.=s3://niema-test/n100/r03/n100.r03.s006_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 301a76b8 (flow ea41a4f2): loading val<.=s3://niema-test/n100/r03/n100.r03.s025_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task ee5e2b4e (flow b8e1f21b): loading val<.=s3://niema-test/n100/r03/n100.r03.s018_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 3edff482 (flow afc84f13): loading val<.=s3://niema-test/n100/r03/n100.r03.s014_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 4e63d0ea (flow c209d771): loading val<.=s3://niema-test/n100/r03/n100.r03.s022_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 77a22266 (flow ad2de73d): loading val<.=s3://niema-test/n100/r03/n100.r03.s068_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 4e63d0ea (flow c209d771): loading val<.=s3://niema-test/n100/r03/n100.r03.s022_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task e35b1ff3 (flow b911e660): loading val<.=s3://niema-test/n100/r03/n100.r03.s011_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 2292bb40 (flow 3abe7efe): loading val<.=s3://niema-test/n100/r03/n100.r03.s086_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task a1c1b94c (flow 41d7dc2a): loading val<.=s3://niema-test/n100/r03/n100.r03.s059_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 2292bb40 (flow 3abe7efe): loading val<.=s3://niema-test/n100/r03/n100.r03.s086_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 733e004a (flow 98beb4a2): loading val<.=s3://niema-test/n100/r03/n100.r03.s010_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 4268bbce (flow e09dd2be): loading val<.=s3://niema-test/n100/r03/n100.r03.s038_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 909853ee (flow 3857dd67): loading (try 0): started
2021/07/08 16:44:21 scheduler task 909853ee (flow 3857dd67): loading val<.=s3://niema-test/n100/r03/n100.r03.s095_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 21f0e678 (flow e70dcb06): loading (try 0): started
2021/07/08 16:44:21 scheduler task 21f0e678 (flow e70dcb06): loading val<.=s3://niema-test/n100/r03/n100.r03.s053_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 909853ee (flow 3857dd67): loading val<.=s3://niema-test/n100/r03/n100.r03.s095_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 79b42f3c (flow 250ebac9): loading (try 0): started
2021/07/08 16:44:21 scheduler task 79b42f3c (flow 250ebac9): loading val<.=s3://niema-test/n100/r03/n100.r03.s045_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 21f0e678 (flow e70dcb06): loading val<.=s3://niema-test/n100/r03/n100.r03.s053_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 192e5535 (flow e589bead): loading val<.=s3://niema-test/n100/r03/n100.r03.s002_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 94f5f6bc (flow 213b5afb): loading val<.=s3://niema-test/n100/r03/n100.r03.s050_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 13345758 (flow d19b125a): loading val<.=s3://niema-test/n100/r03/n100.r03.s056_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task bd82dc2a (flow d0504b1f): loading (try 0): started
2021/07/08 16:44:21 scheduler task bd82dc2a (flow d0504b1f): loading val<.=s3://niema-test/n100/r03/n100.r03.s099_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 79b42f3c (flow 250ebac9): loading val<.=s3://niema-test/n100/r03/n100.r03.s045_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 693e99fc (flow 13424ad8): loading val<.=s3://niema-test/n100/r03/n100.r03.s081_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 5f06865c (flow a8ad97f1): loading val<.=s3://niema-test/n100/r03/n100.r03.s089_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 6ab20197 (flow e04e53c6): loading (try 0): started
2021/07/08 16:44:21 scheduler task 6ab20197 (flow e04e53c6): loading val<.=s3://niema-test/n100/r03/n100.r03.s073_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task bd82dc2a (flow d0504b1f): loading val<.=s3://niema-test/n100/r03/n100.r03.s099_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task d3dd0d64 (flow 7e374560): loading (try 0): started
2021/07/08 16:44:21 scheduler task d3dd0d64 (flow 7e374560): loading val<.=s3://niema-test/n100/r03/n100.r03.s070_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 9a3d3840 (flow be1bb147): loading val<.=s3://niema-test/n100/r03/n100.r03.s058_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task d3dd0d64 (flow 7e374560): loading val<.=s3://niema-test/n100/r03/n100.r03.s070_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 3d6f2242 (flow 88b2cc74): loading (try 0): started
2021/07/08 16:44:21 scheduler task 3d6f2242 (flow 88b2cc74): loading val<.=s3://niema-test/n100/r03/n100.r03.s020_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task c63135f5 (flow b89df6be): loading val<.=s3://niema-test/n100/r03/n100.r03.s090_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 3d6f2242 (flow 88b2cc74): loading val<.=s3://niema-test/n100/r03/n100.r03.s020_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 7d7ed1d5 (flow 12b846cf): loading (try 0): started
2021/07/08 16:44:21 scheduler task 7d7ed1d5 (flow 12b846cf): loading val<.=s3://niema-test/n100/r03/n100.r03.s031_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task c3a30d01 (flow d81cbbca): loading (try 0): started
2021/07/08 16:44:21 scheduler task 7d7ed1d5 (flow 12b846cf): loading val<.=s3://niema-test/n100/r03/n100.r03.s031_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task c3a30d01 (flow d81cbbca): loading val<.=s3://niema-test/n100/r03/n100.r03.s003_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task ab470caf (flow 74da68ff): loading (try 0): started
2021/07/08 16:44:21 scheduler task c3a30d01 (flow d81cbbca): loading val<.=s3://niema-test/n100/r03/n100.r03.s003_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task ab470caf (flow 74da68ff): loading val<.=s3://niema-test/n100/r03/n100.r03.s027_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task ab470caf (flow 74da68ff): loading val<.=s3://niema-test/n100/r03/n100.r03.s027_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 13667c21 (flow da42f528): loading (try 0): started
2021/07/08 16:44:21 scheduler task 13667c21 (flow da42f528): loading val<.=s3://niema-test/n100/r03/n100.r03.s072_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 642b8dce (flow da07df2f): loading (try 0): started
2021/07/08 16:44:21 scheduler task 642b8dce (flow da07df2f): loading val<.=s3://niema-test/n100/r03/n100.r03.s096_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 13667c21 (flow da42f528): loading val<.=s3://niema-test/n100/r03/n100.r03.s072_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 11b3b7c2 (flow 7b9422b3): loading (try 0): started
2021/07/08 16:44:21 scheduler task 11b3b7c2 (flow 7b9422b3): loading val<.=s3://niema-test/n100/r03/n100.r03.s071_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 642b8dce (flow da07df2f): loading val<.=s3://niema-test/n100/r03/n100.r03.s096_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task eb1b1e87 (flow eacb1e8b): loading (try 0): started
2021/07/08 16:44:21 scheduler task eb1b1e87 (flow eacb1e8b): loading val<.=s3://niema-test/n100/r03/n100.r03.s087_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 11b3b7c2 (flow 7b9422b3): loading val<.=s3://niema-test/n100/r03/n100.r03.s071_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task cffdf651 (flow 46b547c0): loading val<.=s3://niema-test/n100/r03/n100.r03.s097_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task e1c62bb9 (flow 5ae9b7e9): loading (try 0): started
2021/07/08 16:44:21 scheduler task e1c62bb9 (flow 5ae9b7e9): loading val<.=s3://niema-test/n100/r03/n100.r03.s088_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task eb1b1e87 (flow eacb1e8b): loading val<.=s3://niema-test/n100/r03/n100.r03.s087_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 6c9931f7 (flow 84fe3b5f): loading (try 0): started
2021/07/08 16:44:21 scheduler task 6c9931f7 (flow 84fe3b5f): loading val<.=s3://niema-test/n100/r03/n100.r03.s065_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task e1c62bb9 (flow 5ae9b7e9): loading val<.=s3://niema-test/n100/r03/n100.r03.s088_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 95b9c199 (flow d919402c): loading val<.=s3://niema-test/n100/r03/n100.r03.s052_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 6c9931f7 (flow 84fe3b5f): loading val<.=s3://niema-test/n100/r03/n100.r03.s065_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task cffdf651 (flow 46b547c0): loading val<.=s3://niema-test/n100/r03/n100.r03.s097_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 97699c51 (flow ea5d62c8): loading (try 0): started
2021/07/08 16:44:21 scheduler task 97699c51 (flow ea5d62c8): loading val<.=s3://niema-test/n100/r03/n100.r03.s001_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 95b9c199 (flow d919402c): loading val<.=s3://niema-test/n100/r03/n100.r03.s052_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 898bb586 (flow f0229179): loading val<.=s3://niema-test/n100/r03/n100.r03.s019_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task bbcfd2b5 (flow 2ac719fa): loading val<.=s3://niema-test/n100/r03/n100.r03.s016_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 755dfd3e (flow 34520b39): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task c688ac3a (flow 62629a74): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 484b3ade (flow 1ea7c425): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task bc51d36b (flow 29867b33): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task cb3be4a9 (flow 7f1435b4): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task f0203609 (flow f72aefa7): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 5009eabe (flow 942ecb0a): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 82950da3 (flow a420f865): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 80669d3f (flow fe21aeeb): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 7a62ec14 (flow e8c1c4e4): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 60be6b51 (flow a0f712d0): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task bffb2e9f (flow f9db9957): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task a4048ae2 (flow 062ec948): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task e7b857e8 (flow 4dfce054): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task bc6b82f2 (flow 159f3125): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 27604f83 (flow 1f71c589): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 07b1d571 (flow 47420793): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 21089e1a (flow c279c2df): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task ac3fb0dc (flow 785ffd27): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task a03fdbd6 (flow f12c01f7): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 4396f600 (flow e90de21c): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 29f0c020 (flow 17bef574): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task c3688bf6 (flow a83f360e): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 5a0c62bc (flow 2cec23de): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 529ecf42 (flow e43f35d3): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 26ddd9e4 (flow 7219908c): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 9fb665b0 (flow c77a5486): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task d3c3f174 (flow eb36d115): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 651abeff (flow f2593f6b): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 86cdbd24 (flow ec5d5436): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 27950794 (flow 1e078488): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task ad11b6f1 (flow b407f183): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 754701b2 (flow a896295a): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task cc866163 (flow 7b73dcd0): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task f165135f (flow b485700d): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 9fef0d8c (flow f673c693): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task b3ec1597 (flow 56168040): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 70fc136d (flow 3be0544d): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task f8950918 (flow 8df3e478): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 06223123 (flow ffbd06ba): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 2128313b (flow 9e4c852f): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 77c68cbe (flow 6fd9782d): assigning to alloc ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:79.5GiB cpu:0 disk:327.8GiB intel_avx:96 intel_avx2:96 intel_avx512:96}
2021/07/08 16:44:21 scheduler task 97699c51 (flow ea5d62c8): loading val<.=s3://niema-test/n100/r03/n100.r03.s001_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task e071a634 (flow 3d4ece28): loading (try 0): started
2021/07/08 16:44:21 scheduler task e071a634 (flow 3d4ece28): loading val<.=s3://niema-test/n100/r03/n100.r03.s004_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 755dfd3e (flow 34520b39): loading (try 0): started
2021/07/08 16:44:21 scheduler task 755dfd3e (flow 34520b39): loading val<.=s3://niema-test/n100/r03/n100.r03.s074_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 70fc136d (flow 3be0544d): loading (try 0): started
2021/07/08 16:44:21 scheduler task 529ecf42 (flow e43f35d3): loading (try 0): started
2021/07/08 16:44:21 scheduler task 70fc136d (flow 3be0544d): loading val<.=s3://niema-test/n100/r03/n100.r03.s024_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 754701b2 (flow a896295a): loading (try 0): started
2021/07/08 16:44:21 scheduler task 484b3ade (flow 1ea7c425): loading (try 0): started
2021/07/08 16:44:21 scheduler task bc6b82f2 (flow 159f3125): loading (try 0): started
2021/07/08 16:44:21 scheduler task 484b3ade (flow 1ea7c425): loading val<.=s3://niema-test/n100/r03/n100.r03.s063_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task dd443953 (flow 3816e5c5): loading (try 0): started
2021/07/08 16:44:21 scheduler task 70fc136d (flow 3be0544d): loading val<.=s3://niema-test/n100/r03/n100.r03.s024_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 529ecf42 (flow e43f35d3): loading val<.=s3://niema-test/n100/r03/n100.r03.s075_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 07b1d571 (flow 47420793): loading (try 0): started
2021/07/08 16:44:21 scheduler task dd443953 (flow 3816e5c5): loading val<.=s3://niema-test/n100/r03/n100.r03.s043_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task bc51d36b (flow 29867b33): loading (try 0): started
2021/07/08 16:44:21 scheduler task bffb2e9f (flow f9db9957): loading (try 0): started
2021/07/08 16:44:21 scheduler task 4396f600 (flow e90de21c): loading (try 0): started
2021/07/08 16:44:21 scheduler task 07b1d571 (flow 47420793): loading val<.=s3://niema-test/n100/r03/n100.r03.s021_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 484b3ade (flow 1ea7c425): loading val<.=s3://niema-test/n100/r03/n100.r03.s063_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task bc51d36b (flow 29867b33): loading val<.=s3://niema-test/n100/r03/n100.r03.s013_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task bffb2e9f (flow f9db9957): loading val<.=s3://niema-test/n100/r03/n100.r03.s029_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 77c68cbe (flow 6fd9782d): loading (try 0): started
2021/07/08 16:44:21 scheduler task a03fdbd6 (flow f12c01f7): loading (try 0): started
2021/07/08 16:44:21 scheduler task 77c68cbe (flow 6fd9782d): loading val<.=s3://niema-test/n100/r03/n100.r03.s060_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 77c68cbe (flow 6fd9782d): loading val<.=s3://niema-test/n100/r03/n100.r03.s060_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task a03fdbd6 (flow f12c01f7): loading val<.=s3://niema-test/n100/r03/n100.r03.s094_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 26ddd9e4 (flow 7219908c): loading (try 0): started
2021/07/08 16:44:21 scheduler task 9fb665b0 (flow c77a5486): loading (try 0): started
2021/07/08 16:44:21 scheduler task a03fdbd6 (flow f12c01f7): loading val<.=s3://niema-test/n100/r03/n100.r03.s094_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 26ddd9e4 (flow 7219908c): loading val<.=s3://niema-test/n100/r03/n100.r03.s098_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 9fb665b0 (flow c77a5486): loading val<.=s3://niema-test/n100/r03/n100.r03.s057_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 07b1d571 (flow 47420793): loading val<.=s3://niema-test/n100/r03/n100.r03.s021_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 9fb665b0 (flow c77a5486): loading val<.=s3://niema-test/n100/r03/n100.r03.s057_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 27950794 (flow 1e078488): loading (try 0): started
2021/07/08 16:44:21 scheduler task 27950794 (flow 1e078488): loading val<.=s3://niema-test/n100/r03/n100.r03.s037_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 60be6b51 (flow a0f712d0): loading (try 0): started
2021/07/08 16:44:21 scheduler task 60be6b51 (flow a0f712d0): loading val<.=s3://niema-test/n100/r03/n100.r03.s048_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 27950794 (flow 1e078488): loading val<.=s3://niema-test/n100/r03/n100.r03.s037_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 5009eabe (flow 942ecb0a): loading (try 0): started
2021/07/08 16:44:21 scheduler task 5009eabe (flow 942ecb0a): loading val<.=s3://niema-test/n100/r03/n100.r03.s039_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 60be6b51 (flow a0f712d0): loading val<.=s3://niema-test/n100/r03/n100.r03.s048_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task df81b75e (flow c2a25c99): loading (try 0): started
2021/07/08 16:44:21 scheduler task df81b75e (flow c2a25c99): loading val<.=s3://niema-test/n100/r03/n100.r03.s008_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 5009eabe (flow 942ecb0a): loading val<.=s3://niema-test/n100/r03/n100.r03.s039_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task b4bc837b (flow d79d1747): loading val<.=s3://niema-test/n100/r03/n100.r03.s077_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task b4bc837b (flow d79d1747): loading val<.=s3://niema-test/n100/r03/n100.r03.s077_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task df81b75e (flow c2a25c99): loading val<.=s3://niema-test/n100/r03/n100.r03.s008_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 5a370c3c (flow f85ec8d5): loading val<.=s3://niema-test/n100/r03/n100.r03.s006_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 6ab20197 (flow e04e53c6): loading val<.=s3://niema-test/n100/r03/n100.r03.s073_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 7194b040 (flow e2be785d): loading (try 0): started
2021/07/08 16:44:21 scheduler task a4048ae2 (flow 062ec948): loading (try 0): started
2021/07/08 16:44:21 scheduler task ad11b6f1 (flow b407f183): loading (try 0): started
2021/07/08 16:44:21 scheduler task a4048ae2 (flow 062ec948): loading val<.=s3://niema-test/n100/r03/n100.r03.s083_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task ad11b6f1 (flow b407f183): loading val<.=s3://niema-test/n100/r03/n100.r03.s046_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 7194b040 (flow e2be785d): loading val<.=s3://niema-test/n100/r03/n100.r03.s067_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 82950da3 (flow a420f865): loading (try 0): started
2021/07/08 16:44:21 scheduler task ad11b6f1 (flow b407f183): loading val<.=s3://niema-test/n100/r03/n100.r03.s046_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task cc866163 (flow 7b73dcd0): loading (try 0): started
2021/07/08 16:44:21 scheduler task 82950da3 (flow a420f865): loading val<.=s3://niema-test/n100/r03/n100.r03.s005_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task cc866163 (flow 7b73dcd0): loading val<.=s3://niema-test/n100/r03/n100.r03.s093_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task cc866163 (flow 7b73dcd0): loading val<.=s3://niema-test/n100/r03/n100.r03.s093_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task ac3fb0dc (flow 785ffd27): loading (try 0): started
2021/07/08 16:44:21 scheduler task ac3fb0dc (flow 785ffd27): loading val<.=s3://niema-test/n100/r03/n100.r03.s015_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task f165135f (flow b485700d): loading (try 0): started
2021/07/08 16:44:21 scheduler task ac3fb0dc (flow 785ffd27): loading val<.=s3://niema-test/n100/r03/n100.r03.s015_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task f165135f (flow b485700d): loading val<.=s3://niema-test/n100/r03/n100.r03.s085_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task f165135f (flow b485700d): loading val<.=s3://niema-test/n100/r03/n100.r03.s085_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 651abeff (flow f2593f6b): loading (try 0): started
2021/07/08 16:44:21 scheduler task 651abeff (flow f2593f6b): loading val<.=s3://niema-test/n100/r03/n100.r03.s007_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task c688ac3a (flow 62629a74): loading (try 0): started
2021/07/08 16:44:21 scheduler task c688ac3a (flow 62629a74): loading val<.=s3://niema-test/n100/r03/n100.r03.s076_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 651abeff (flow f2593f6b): loading val<.=s3://niema-test/n100/r03/n100.r03.s007_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 754701b2 (flow a896295a): loading val<.=s3://niema-test/n100/r03/n100.r03.s069_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task c688ac3a (flow 62629a74): loading val<.=s3://niema-test/n100/r03/n100.r03.s076_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task e071a634 (flow 3d4ece28): loading val<.=s3://niema-test/n100/r03/n100.r03.s004_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 06223123 (flow ffbd06ba): loading (try 0): started
2021/07/08 16:44:21 scheduler task 06223123 (flow ffbd06ba): loading val<.=s3://niema-test/n100/r03/n100.r03.s034_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task d3c3f174 (flow eb36d115): loading (try 0): started
2021/07/08 16:44:21 scheduler task d3c3f174 (flow eb36d115): loading val<.=s3://niema-test/n100/r03/n100.r03.s033_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 06223123 (flow ffbd06ba): loading val<.=s3://niema-test/n100/r03/n100.r03.s034_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 86cdbd24 (flow ec5d5436): loading (try 0): started
2021/07/08 16:44:21 scheduler task 86cdbd24 (flow ec5d5436): loading val<.=s3://niema-test/n100/r03/n100.r03.s066_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task d3c3f174 (flow eb36d115): loading val<.=s3://niema-test/n100/r03/n100.r03.s033_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 755dfd3e (flow 34520b39): loading val<.=s3://niema-test/n100/r03/n100.r03.s074_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 86cdbd24 (flow ec5d5436): loading val<.=s3://niema-test/n100/r03/n100.r03.s066_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 80669d3f (flow fe21aeeb): loading (try 0): started
2021/07/08 16:44:21 scheduler task 2128313b (flow 9e4c852f): loading (try 0): started
2021/07/08 16:44:21 scheduler task 2128313b (flow 9e4c852f): loading val<.=s3://niema-test/n100/r03/n100.r03.s041_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 5a0c62bc (flow 2cec23de): loading (try 0): started
2021/07/08 16:44:21 scheduler task 5a0c62bc (flow 2cec23de): loading val<.=s3://niema-test/n100/r03/n100.r03.s042_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 2128313b (flow 9e4c852f): loading val<.=s3://niema-test/n100/r03/n100.r03.s041_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 7a62ec14 (flow e8c1c4e4): loading (try 0): started
2021/07/08 16:44:21 scheduler task 5a0c62bc (flow 2cec23de): loading val<.=s3://niema-test/n100/r03/n100.r03.s042_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task b3ec1597 (flow 56168040): loading (try 0): started
2021/07/08 16:44:21 scheduler task 7a62ec14 (flow e8c1c4e4): loading val<.=s3://niema-test/n100/r03/n100.r03.s044_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task b3ec1597 (flow 56168040): loading val<.=s3://niema-test/n100/r03/n100.r03.s032_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task b3ec1597 (flow 56168040): loading val<.=s3://niema-test/n100/r03/n100.r03.s032_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task e7b857e8 (flow 4dfce054): loading (try 0): started
2021/07/08 16:44:21 scheduler task bc6b82f2 (flow 159f3125): loading val<.=s3://niema-test/n100/r03/n100.r03.s028_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task e7b857e8 (flow 4dfce054): loading val<.=s3://niema-test/n100/r03/n100.r03.s049_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task a64ed56a (flow dcbde93f): loading (try 0): started
2021/07/08 16:44:21 scheduler task 754701b2 (flow a896295a): loading val<.=s3://niema-test/n100/r03/n100.r03.s069_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task a64ed56a (flow dcbde93f): loading val<.=s3://niema-test/n100/r03/n100.r03.s030_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 27604f83 (flow 1f71c589): loading (try 0): started
2021/07/08 16:44:21 scheduler task dd443953 (flow 3816e5c5): loading val<.=s3://niema-test/n100/r03/n100.r03.s043_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task bc6b82f2 (flow 159f3125): loading val<.=s3://niema-test/n100/r03/n100.r03.s028_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task cb3be4a9 (flow 7f1435b4): loading (try 0): started
2021/07/08 16:44:21 scheduler task f8950918 (flow 8df3e478): loading (try 0): started
2021/07/08 16:44:21 scheduler task 21089e1a (flow c279c2df): loading (try 0): started
2021/07/08 16:44:21 scheduler task f0203609 (flow f72aefa7): loading (try 0): started
2021/07/08 16:44:21 scheduler task bc51d36b (flow 29867b33): loading val<.=s3://niema-test/n100/r03/n100.r03.s013_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task bffb2e9f (flow f9db9957): loading val<.=s3://niema-test/n100/r03/n100.r03.s029_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 4396f600 (flow e90de21c): loading val<.=s3://niema-test/n100/r03/n100.r03.s035_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 29f0c020 (flow 17bef574): loading (try 0): started
2021/07/08 16:44:21 scheduler task 4396f600 (flow e90de21c): loading val<.=s3://niema-test/n100/r03/n100.r03.s035_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 26ddd9e4 (flow 7219908c): loading val<.=s3://niema-test/n100/r03/n100.r03.s098_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 7194b040 (flow e2be785d): loading val<.=s3://niema-test/n100/r03/n100.r03.s067_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task a4048ae2 (flow 062ec948): loading val<.=s3://niema-test/n100/r03/n100.r03.s083_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 82950da3 (flow a420f865): loading val<.=s3://niema-test/n100/r03/n100.r03.s005_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 529ecf42 (flow e43f35d3): loading val<.=s3://niema-test/n100/r03/n100.r03.s075_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 9fef0d8c (flow f673c693): loading (try 0): started
2021/07/08 16:44:21 scheduler task 80669d3f (flow fe21aeeb): loading val<.=s3://niema-test/n100/r03/n100.r03.s026_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 9fef0d8c (flow f673c693): loading val<.=s3://niema-test/n100/r03/n100.r03.s091_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 80669d3f (flow fe21aeeb): loading val<.=s3://niema-test/n100/r03/n100.r03.s026_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 7a62ec14 (flow e8c1c4e4): loading val<.=s3://niema-test/n100/r03/n100.r03.s044_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task e7b857e8 (flow 4dfce054): loading val<.=s3://niema-test/n100/r03/n100.r03.s049_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 27604f83 (flow 1f71c589): loading val<.=s3://niema-test/n100/r03/n100.r03.s055_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task c3688bf6 (flow a83f360e): loading (try 0): started
2021/07/08 16:44:21 scheduler task c3688bf6 (flow a83f360e): loading val<.=s3://niema-test/n100/r03/n100.r03.s047_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task a64ed56a (flow dcbde93f): loading val<.=s3://niema-test/n100/r03/n100.r03.s030_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task c3688bf6 (flow a83f360e): loading val<.=s3://niema-test/n100/r03/n100.r03.s047_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 27604f83 (flow 1f71c589): loading val<.=s3://niema-test/n100/r03/n100.r03.s055_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task cb3be4a9 (flow 7f1435b4): loading val<.=s3://niema-test/n100/r03/n100.r03.s017_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task f8950918 (flow 8df3e478): loading val<.=s3://niema-test/n100/r03/n100.r03.s061_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task cb3be4a9 (flow 7f1435b4): loading val<.=s3://niema-test/n100/r03/n100.r03.s017_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 21089e1a (flow c279c2df): loading val<.=s3://niema-test/n100/r03/n100.r03.s084_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task f8950918 (flow 8df3e478): loading val<.=s3://niema-test/n100/r03/n100.r03.s061_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task f0203609 (flow f72aefa7): loading val<.=s3://niema-test/n100/r03/n100.r03.s082_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 21089e1a (flow c279c2df): loading val<.=s3://niema-test/n100/r03/n100.r03.s084_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task f0203609 (flow f72aefa7): loading val<.=s3://niema-test/n100/r03/n100.r03.s082_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 29f0c020 (flow 17bef574): loading val<.=s3://niema-test/n100/r03/n100.r03.s064_R2.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 29f0c020 (flow 17bef574): loading val<.=s3://niema-test/n100/r03/n100.r03.s064_R1.fastq 35.4MiB>
2021/07/08 16:44:21 scheduler task 9fef0d8c (flow f673c693): loading val<.=s3://niema-test/n100/r03/n100.r03.s091_R2.fastq 35.4MiB>
2021/07/08 16:44:22 scheduler task ab96201c (flow 531faab0): assigning to alloc ec2-3-139-69-133.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 16:44:22 scheduler task e3632693 (flow add09463): assigning to alloc ec2-3-139-69-133.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 16:44:22 scheduler task e3632693 (flow add09463): loading (try 0): started
2021/07/08 16:44:22 scheduler task 961bc0f7 (flow a0d2eb2b): assigning to alloc ec2-3-139-69-133.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 16:44:22 scheduler task e3632693 (flow add09463): loading val<.=s3://niema-test/n100/r03/n100.r03.s078_R2.fastq 35.4MiB>
2021/07/08 16:44:22 scheduler task 961bc0f7 (flow a0d2eb2b): loading (try 0): started
2021/07/08 16:44:22 scheduler task 961bc0f7 (flow a0d2eb2b): loading val<.=s3://niema-test/n100/r03/n100.r03.s009_R2.fastq 35.4MiB>
2021/07/08 16:44:22 scheduler task e3632693 (flow add09463): loading val<.=s3://niema-test/n100/r03/n100.r03.s078_R1.fastq 35.4MiB>
2021/07/08 16:44:22 scheduler task 23f2b555 (flow d34a4a98): assigning to alloc ec2-3-139-69-133.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:3.1GiB cpu:0 disk:327.8GiB intel_avx:4 intel_avx2:4 intel_avx512:4}
2021/07/08 16:44:22 scheduler task ab96201c (flow 531faab0): loading (try 0): started
2021/07/08 16:44:22 scheduler task 23f2b555 (flow d34a4a98): loading (try 0): started
2021/07/08 16:44:22 scheduler task ab96201c (flow 531faab0): loading val<.=s3://niema-test/n100/r03/n100.r03.s054_R2.fastq 35.4MiB>
2021/07/08 16:44:22 scheduler task 23f2b555 (flow d34a4a98): loading val<.=s3://niema-test/n100/r03/n100.r03.s040_R2.fastq 35.4MiB>
2021/07/08 16:44:22 scheduler task ab96201c (flow 531faab0): loading val<.=s3://niema-test/n100/r03/n100.r03.s054_R1.fastq 35.4MiB>
2021/07/08 16:44:22 scheduler task 961bc0f7 (flow a0d2eb2b): loading val<.=s3://niema-test/n100/r03/n100.r03.s009_R1.fastq 35.4MiB>
2021/07/08 16:44:22 scheduler task 23f2b555 (flow d34a4a98): loading val<.=s3://niema-test/n100/r03/n100.r03.s040_R1.fastq 35.4MiB>
2021/07/08 16:44:22 scheduler task 16ea2db5 (flow ff2c5c89): loaded val<.=82e574ed 35.4MiB>
2021/07/08 16:44:22 scheduler task c63135f5 (flow b89df6be): loaded val<.=190f3a68 35.4MiB>
2021/07/08 16:44:22 scheduler task 2292bb40 (flow 3abe7efe): loaded val<.=055fb7ed 35.4MiB>
2021/07/08 16:44:22 scheduler task e7da8eee (flow 3523219a): loaded val<.=a7d2c084 35.4MiB>
2021/07/08 16:44:22 scheduler task 3edff482 (flow afc84f13): loaded val<.=ffccb364 35.4MiB>
2021/07/08 16:44:22 scheduler task 733e004a (flow 98beb4a2): loaded val<.=24e3495e 35.4MiB>
2021/07/08 16:44:22 scheduler task c3343c1f (flow 1aa8e12b): loaded val<.=fcc41be7 35.4MiB>
2021/07/08 16:44:22 scheduler task 2cffe22c (flow 53f15bbb): loaded val<.=2d2249e9 35.4MiB>
2021/07/08 16:44:22 scheduler task 898bb586 (flow f0229179): loaded val<.=8cd91356 35.4MiB>
2021/07/08 16:44:22 scheduler task 77a22266 (flow ad2de73d): loaded val<.=123838e0 35.4MiB>
2021/07/08 16:44:22 scheduler task c3343c1f (flow 1aa8e12b): loaded val<.=1669ea9f 35.4MiB>
2021/07/08 16:44:22 scheduler task c3343c1f (flow 1aa8e12b): loading (try 0): successful, next state: submitting
2021/07/08 16:44:22 scheduler task c3343c1f (flow 1aa8e12b): submitting (try 0): started
2021/07/08 16:44:22 scheduler task 16ea2db5 (flow ff2c5c89): loaded val<.=06bb5ad3 35.4MiB>
2021/07/08 16:44:22 scheduler task 9a3d3840 (flow be1bb147): loaded val<.=b3f73073 35.4MiB>
2021/07/08 16:44:22 scheduler task 77a22266 (flow ad2de73d): loaded val<.=efde44c5 35.4MiB>
2021/07/08 16:44:22 scheduler task 77a22266 (flow ad2de73d): loading (try 0): successful, next state: submitting
2021/07/08 16:44:22 scheduler task a1c1b94c (flow 41d7dc2a): loaded val<.=23cd70d2 35.4MiB>
2021/07/08 16:44:22 scheduler task 909853ee (flow 3857dd67): loaded val<.=d0f6a8c4 35.4MiB>
2021/07/08 16:44:22 scheduler task 16ea2db5 (flow ff2c5c89): loading (try 0): successful, next state: submitting
2021/07/08 16:44:22 scheduler task 21f0e678 (flow e70dcb06): loaded val<.=4bf5ddde 35.4MiB>
2021/07/08 16:44:22 scheduler task 4268bbce (flow e09dd2be): loaded val<.=9366d84d 35.4MiB>
2021/07/08 16:44:22 scheduler task 77a22266 (flow ad2de73d): submitting (try 0): started
2021/07/08 16:44:22 scheduler task 16ea2db5 (flow ff2c5c89): submitting (try 0): started
2021/07/08 16:44:22 scheduler task ee5e2b4e (flow b8e1f21b): loaded val<.=68ab5861 35.4MiB>
2021/07/08 16:44:22 scheduler task e35b1ff3 (flow b911e660): loaded val<.=cf29c3db 35.4MiB>
2021/07/08 16:44:22 scheduler task f158a18a (flow 6b8f67c3): loaded val<.=3cbb58db 35.4MiB>
2021/07/08 16:44:22 scheduler task c81055a4 (flow d0b7bfb6): loaded val<.=07437692 35.4MiB>
2021/07/08 16:44:22 scheduler task ee5e2b4e (flow b8e1f21b): loaded val<.=b293c838 35.4MiB>
2021/07/08 16:44:22 scheduler task ee5e2b4e (flow b8e1f21b): loading (try 0): successful, next state: submitting
2021/07/08 16:44:22 scheduler task 192e5535 (flow e589bead): loaded val<.=d00afa3c 35.4MiB>
2021/07/08 16:44:22 scheduler task c81055a4 (flow d0b7bfb6): loaded val<.=bb460290 35.4MiB>
2021/07/08 16:44:22 scheduler task c81055a4 (flow d0b7bfb6): loading (try 0): successful, next state: submitting
2021/07/08 16:44:22 scheduler task 192e5535 (flow e589bead): loaded val<.=13330d75 35.4MiB>
2021/07/08 16:44:22 scheduler task 192e5535 (flow e589bead): loading (try 0): successful, next state: submitting
2021/07/08 16:44:22 scheduler task e7da8eee (flow 3523219a): loaded val<.=f75047c0 35.4MiB>
2021/07/08 16:44:22 scheduler task e7da8eee (flow 3523219a): loading (try 0): successful, next state: submitting
2021/07/08 16:44:22 scheduler task 79e1224c (flow 7dc6a89a): loaded val<.=2f332ec2 35.4MiB>
2021/07/08 16:44:22 scheduler task ee5e2b4e (flow b8e1f21b): submitting (try 0): started
2021/07/08 16:44:22 scheduler task c81055a4 (flow d0b7bfb6): submitting (try 0): started
2021/07/08 16:44:22 scheduler task 301a76b8 (flow ea41a4f2): loaded val<.=19a2f8a1 35.4MiB>
2021/07/08 16:44:22 scheduler task 192e5535 (flow e589bead): submitting (try 0): started
2021/07/08 16:44:22 scheduler task e7da8eee (flow 3523219a): submitting (try 0): started
2021/07/08 16:44:22 scheduler task bbcfd2b5 (flow 2ac719fa): loaded val<.=5184750e 35.4MiB>
2021/07/08 16:44:22 scheduler task d3dd0d64 (flow 7e374560): loaded val<.=96a91d4a 35.4MiB>
2021/07/08 16:44:22 scheduler task 5f06865c (flow a8ad97f1): loaded val<.=10093c9b 35.4MiB>
2021/07/08 16:44:22 scheduler task 2cffe22c (flow 53f15bbb): loaded val<.=2c97a10a 35.4MiB>
2021/07/08 16:44:22 scheduler task 2cffe22c (flow 53f15bbb): loading (try 0): successful, next state: submitting
2021/07/08 16:44:22 scheduler task 2cffe22c (flow 53f15bbb): submitting (try 0): started
2021/07/08 16:44:22 scheduler task 9a3d3840 (flow be1bb147): loaded val<.=c8cc99f3 35.4MiB>
2021/07/08 16:44:22 scheduler task 9a3d3840 (flow be1bb147): loading (try 0): successful, next state: submitting
2021/07/08 16:44:22 scheduler task d3dd0d64 (flow 7e374560): loaded val<.=2de214e7 35.4MiB>
2021/07/08 16:44:22 scheduler task d3dd0d64 (flow 7e374560): loading (try 0): successful, next state: submitting
2021/07/08 16:44:22 scheduler task 9a3d3840 (flow be1bb147): submitting (try 0): started
2021/07/08 16:44:22 scheduler task d3dd0d64 (flow 7e374560): submitting (try 0): started
2021/07/08 16:44:22 scheduler task 909853ee (flow 3857dd67): loaded val<.=ae806d3a 35.4MiB>
2021/07/08 16:44:22 scheduler task 909853ee (flow 3857dd67): loading (try 0): successful, next state: submitting
2021/07/08 16:44:22 scheduler task 909853ee (flow 3857dd67): submitting (try 0): started
2021/07/08 16:44:22 scheduler task f158a18a (flow 6b8f67c3): loaded val<.=ca945a47 35.4MiB>
2021/07/08 16:44:22 scheduler task f158a18a (flow 6b8f67c3): loading (try 0): successful, next state: submitting
2021/07/08 16:44:22 scheduler task f158a18a (flow 6b8f67c3): submitting (try 0): started
2021/07/08 16:44:22 scheduler task 5a370c3c (flow f85ec8d5): loaded val<.=7c5b9480 35.4MiB>
2021/07/08 16:44:22 scheduler task 7d7ed1d5 (flow 12b846cf): loaded val<.=a7a41f6b 35.4MiB>
2021/07/08 16:44:22 scheduler task 4e63d0ea (flow c209d771): loaded val<.=bae15681 35.4MiB>
2021/07/08 16:44:22 scheduler task 693e99fc (flow 13424ad8): loaded val<.=803ce343 35.4MiB>
2021/07/08 16:44:22 scheduler task 169fa905 (flow 9b3c4623): loaded val<.=bc5ea7bd 35.4MiB>
2021/07/08 16:44:22 scheduler task 23f2b555 (flow d34a4a98): loaded val<.=16477602 35.4MiB>
2021/07/08 16:44:22 scheduler task e3632693 (flow add09463): loaded val<.=3e00b3a5 35.4MiB>
2021/07/08 16:44:22 scheduler task e3632693 (flow add09463): loaded val<.=8d3c785e 35.4MiB>
2021/07/08 16:44:22 scheduler task e3632693 (flow add09463): loading (try 0): successful, next state: submitting
2021/07/08 16:44:22 scheduler task e3632693 (flow add09463): submitting (try 0): started
2021/07/08 16:44:22 scheduler task 4268bbce (flow e09dd2be): loaded val<.=295f5629 35.4MiB>
2021/07/08 16:44:22 scheduler task 4268bbce (flow e09dd2be): loading (try 0): successful, next state: submitting
2021/07/08 16:44:22 scheduler task 94f5f6bc (flow 213b5afb): loaded val<.=8f06dc03 35.4MiB>
2021/07/08 16:44:22 scheduler task ab96201c (flow 531faab0): loaded val<.=60943a70 35.4MiB>
2021/07/08 16:44:22 scheduler task 4268bbce (flow e09dd2be): submitting (try 0): started
2021/07/08 16:44:22 scheduler task cffdf651 (flow 46b547c0): loaded val<.=e9428c99 35.4MiB>
2021/07/08 16:44:22 scheduler task 3edff482 (flow afc84f13): loaded val<.=28959c7e 35.4MiB>
2021/07/08 16:44:22 scheduler task 3edff482 (flow afc84f13): loading (try 0): successful, next state: submitting
2021/07/08 16:44:22 scheduler task 3edff482 (flow afc84f13): submitting (try 0): started
2021/07/08 16:44:22 scheduler task 23f2b555 (flow d34a4a98): loaded val<.=c5fbc5fc 35.4MiB>
2021/07/08 16:44:22 scheduler task 23f2b555 (flow d34a4a98): loading (try 0): successful, next state: submitting
2021/07/08 16:44:22 scheduler task 23f2b555 (flow d34a4a98): submitting (try 0): started
2021/07/08 16:44:22 scheduler task 733e004a (flow 98beb4a2): loaded val<.=be2af9c2 35.4MiB>
2021/07/08 16:44:22 scheduler task 733e004a (flow 98beb4a2): loading (try 0): successful, next state: submitting
2021/07/08 16:44:22 scheduler task e35b1ff3 (flow b911e660): loaded val<.=12293d99 35.4MiB>
2021/07/08 16:44:22 scheduler task e35b1ff3 (flow b911e660): loading (try 0): successful, next state: submitting
2021/07/08 16:44:22 scheduler task 11b3b7c2 (flow 7b9422b3): loaded val<.=86ba2255 35.4MiB>
2021/07/08 16:44:22 scheduler task 733e004a (flow 98beb4a2): submitting (try 0): started
2021/07/08 16:44:22 scheduler task 95b9c199 (flow d919402c): loaded val<.=71918f03 35.4MiB>
2021/07/08 16:44:22 scheduler task 79e1224c (flow 7dc6a89a): loaded val<.=b31fab2c 35.4MiB>
2021/07/08 16:44:22 scheduler task 79e1224c (flow 7dc6a89a): loading (try 0): successful, next state: submitting
2021/07/08 16:44:22 scheduler task e35b1ff3 (flow b911e660): submitting (try 0): started
2021/07/08 16:44:22 scheduler task 79e1224c (flow 7dc6a89a): submitting (try 0): started
2021/07/08 16:44:22 scheduler task eb1b1e87 (flow eacb1e8b): loaded val<.=0c71a1d2 35.4MiB>
2021/07/08 16:44:22 scheduler task 21f0e678 (flow e70dcb06): loaded val<.=3b763edc 35.4MiB>
2021/07/08 16:44:22 scheduler task 21f0e678 (flow e70dcb06): loading (try 0): successful, next state: submitting
2021/07/08 16:44:22 scheduler task c3a30d01 (flow d81cbbca): loaded val<.=236c102f 35.4MiB>
2021/07/08 16:44:22 scheduler task 79b42f3c (flow 250ebac9): loaded val<.=cfade87b 35.4MiB>
2021/07/08 16:44:22 scheduler task ab96201c (flow 531faab0): loaded val<.=8d67d046 35.4MiB>
2021/07/08 16:44:22 scheduler task ab96201c (flow 531faab0): loading (try 0): successful, next state: submitting
2021/07/08 16:44:22 scheduler task 961bc0f7 (flow a0d2eb2b): loaded val<.=5f541a7e 35.4MiB>
2021/07/08 16:44:22 scheduler task 13345758 (flow d19b125a): loaded val<.=c52ec5ea 35.4MiB>
2021/07/08 16:44:22 scheduler task 21f0e678 (flow e70dcb06): submitting (try 0): started
2021/07/08 16:44:22 scheduler task ca4ff408 (flow 5e2cc6ee): loaded val<.=4fee6658 35.4MiB>
2021/07/08 16:44:22 scheduler task ab96201c (flow 531faab0): submitting (try 0): started
2021/07/08 16:44:22 scheduler task 2292bb40 (flow 3abe7efe): loaded val<.=01cb57f5 35.4MiB>
2021/07/08 16:44:22 scheduler task 2292bb40 (flow 3abe7efe): loading (try 0): successful, next state: submitting
2021/07/08 16:44:22 scheduler task 2292bb40 (flow 3abe7efe): submitting (try 0): started
2021/07/08 16:44:23 scheduler task 301a76b8 (flow ea41a4f2): loaded val<.=ad159c86 35.4MiB>
2021/07/08 16:44:23 scheduler task 301a76b8 (flow ea41a4f2): loading (try 0): successful, next state: submitting
2021/07/08 16:44:23 scheduler task 301a76b8 (flow ea41a4f2): submitting (try 0): started
2021/07/08 16:44:23 scheduler task 961bc0f7 (flow a0d2eb2b): loaded val<.=ff409a68 35.4MiB>
2021/07/08 16:44:23 scheduler task 961bc0f7 (flow a0d2eb2b): loading (try 0): successful, next state: submitting
2021/07/08 16:44:23 scheduler task 961bc0f7 (flow a0d2eb2b): submitting (try 0): started
2021/07/08 16:44:23 scheduler task a1c1b94c (flow 41d7dc2a): loaded val<.=dc7783c4 35.4MiB>
2021/07/08 16:44:23 scheduler task a1c1b94c (flow 41d7dc2a): loading (try 0): successful, next state: submitting
2021/07/08 16:44:23 scheduler task a1c1b94c (flow 41d7dc2a): submitting (try 0): started
2021/07/08 16:44:23 scheduler task c3a30d01 (flow d81cbbca): loaded val<.=01b07836 35.4MiB>
2021/07/08 16:44:23 scheduler task c3a30d01 (flow d81cbbca): loading (try 0): successful, next state: submitting
2021/07/08 16:44:23 scheduler task c3a30d01 (flow d81cbbca): submitting (try 0): started
2021/07/08 16:44:23 scheduler task 4e63d0ea (flow c209d771): loaded val<.=2e41da65 35.4MiB>
2021/07/08 16:44:23 scheduler task 4e63d0ea (flow c209d771): loading (try 0): successful, next state: submitting
2021/07/08 16:44:23 scheduler task 4e63d0ea (flow c209d771): submitting (try 0): started
2021/07/08 16:44:23 scheduler task c3343c1f (flow 1aa8e12b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:23 scheduler task c3343c1f (flow 1aa8e12b): waiting for completion (try 0): started
2021/07/08 16:44:23  ->  n100.r03.s079.Main.out_file 1aa8e12b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:23 n100.r03.s079.Main.out_file 1aa8e12b n100/r03/n100.r03.s079.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4df613b4201edbbfb1e0ceed723b429081ac892bf8d2537456b817ad1f1995fa
	sha256:1aa8e12b3b884c63d49d4877cf210f49e66c99b47f9483778ee1a6863302b895
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c3343c1f6c956f88d75f1134421fed3a687e7be3bd7b1f27c50f914d31c38a6a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s079_output"
	    wget -O "n100.r03.s079_output/n100.r03.s079.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s079_output/n100.r03.s079.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s079_output/n100.r03.s079.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s079_output/n100.r03.s079.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s079_output/n100.r03.s079.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s079_output/n100.r03.s079.reference.fas" "n100.r03.s079_output/n100.r03.s079.fq1.fastq" "n100.r03.s079_output/n100.r03.s079.fq2.fastq" | samtools view -bS - > "n100.r03.s079_output/n100.r03.s079.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s079_output/n100.r03.s079.untrimmed.sorted.bam" "n100.r03.s079_output/n100.r03.s079.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s079_output/n100.r03.s079.untrimmed.sorted.bam" -b "n100.r03.s079_output/n100.r03.s079.primers.bed" -p "n100.r03.s079_output/n100.r03.s079.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s079_output/n100.r03.s079.trimmed.sorted.bam" "n100.r03.s079_output/n100.r03.s079.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s079_output/n100.r03.s079.reference.fas" "n100.r03.s079_output/n100.r03.s079.trimmed.sorted.bam" > "n100.r03.s079_output/n100.r03.s079.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s079_output/n100.r03.s079.reference.fas" --call-indels "n100.r03.s079_output/n100.r03.s079.trimmed.sorted.bam" > "n100.r03.s079_output/n100.r03.s079.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s079_output/n100.r03.s079.trimmed.sorted.bam" > "n100.r03.s079_output/n100.r03.s079.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s079_output/n100.r03.s079.depth.txt" "n100.r03.s079_output/n100.r03.s079.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s079_output/n100.r03.s079.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s079_output/n100.r03.s079.reference.fas" | bcftools consensus -m "n100.r03.s079_output/n100.r03.s079.low_depth.tsv" tmp.vcf.gz > "n100.r03.s079_output/n100.r03.s079.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s079_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:23 scheduler task 898bb586 (flow f0229179): loaded val<.=9677db4d 35.4MiB>
2021/07/08 16:44:23 scheduler task 898bb586 (flow f0229179): loading (try 0): successful, next state: submitting
2021/07/08 16:44:23 scheduler task 77a22266 (flow ad2de73d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:23 scheduler task 898bb586 (flow f0229179): submitting (try 0): started
2021/07/08 16:44:23 scheduler task 77a22266 (flow ad2de73d): waiting for completion (try 0): started
2021/07/08 16:44:23  ->  n100.r03.s068.Main.out_file ad2de73d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:23 n100.r03.s068.Main.out_file ad2de73d n100/r03/n100.r03.s068.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3cd64c32a4a5725fa60319f73770af2e4e7fe6166d5904d3c6c5c64216885ebc
	sha256:ad2de73d71c7ec1805f6d31c98aa54031830763408eafe979375e9ed3c527f25
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/77a2226671dddfb2e3cc98279bd6ce2cb4a65befb4bd792f01ddff1c4b9b26cd
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s068_output"
	    wget -O "n100.r03.s068_output/n100.r03.s068.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s068_output/n100.r03.s068.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s068_output/n100.r03.s068.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s068_output/n100.r03.s068.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s068_output/n100.r03.s068.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s068_output/n100.r03.s068.reference.fas" "n100.r03.s068_output/n100.r03.s068.fq1.fastq" "n100.r03.s068_output/n100.r03.s068.fq2.fastq" | samtools view -bS - > "n100.r03.s068_output/n100.r03.s068.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s068_output/n100.r03.s068.untrimmed.sorted.bam" "n100.r03.s068_output/n100.r03.s068.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s068_output/n100.r03.s068.untrimmed.sorted.bam" -b "n100.r03.s068_output/n100.r03.s068.primers.bed" -p "n100.r03.s068_output/n100.r03.s068.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s068_output/n100.r03.s068.trimmed.sorted.bam" "n100.r03.s068_output/n100.r03.s068.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s068_output/n100.r03.s068.reference.fas" "n100.r03.s068_output/n100.r03.s068.trimmed.sorted.bam" > "n100.r03.s068_output/n100.r03.s068.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s068_output/n100.r03.s068.reference.fas" --call-indels "n100.r03.s068_output/n100.r03.s068.trimmed.sorted.bam" > "n100.r03.s068_output/n100.r03.s068.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s068_output/n100.r03.s068.trimmed.sorted.bam" > "n100.r03.s068_output/n100.r03.s068.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s068_output/n100.r03.s068.depth.txt" "n100.r03.s068_output/n100.r03.s068.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s068_output/n100.r03.s068.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s068_output/n100.r03.s068.reference.fas" | bcftools consensus -m "n100.r03.s068_output/n100.r03.s068.low_depth.tsv" tmp.vcf.gz > "n100.r03.s068_output/n100.r03.s068.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s068_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:23 scheduler task e3632693 (flow add09463): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:23 scheduler task e3632693 (flow add09463): waiting for completion (try 0): started
2021/07/08 16:44:23  ->  n100.r03.s078.Main.out_file add09463 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:23 n100.r03.s078.Main.out_file add09463 n100/r03/n100.r03.s078.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b489cbde4b83fdf123263167123e14aa232754a4eba2bedb0d2d844f736562c6
	sha256:add09463453061926863983481d13a65d0ada71888e182a9cc28c73f3002de52
	ec2-3-139-69-133.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e363269332e9552efbca0098e84285d79a234f398aafc2a6ed31eb9b75c73d7e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s078_output"
	    wget -O "n100.r03.s078_output/n100.r03.s078.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s078_output/n100.r03.s078.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s078_output/n100.r03.s078.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s078_output/n100.r03.s078.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s078_output/n100.r03.s078.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s078_output/n100.r03.s078.reference.fas" "n100.r03.s078_output/n100.r03.s078.fq1.fastq" "n100.r03.s078_output/n100.r03.s078.fq2.fastq" | samtools view -bS - > "n100.r03.s078_output/n100.r03.s078.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s078_output/n100.r03.s078.untrimmed.sorted.bam" "n100.r03.s078_output/n100.r03.s078.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s078_output/n100.r03.s078.untrimmed.sorted.bam" -b "n100.r03.s078_output/n100.r03.s078.primers.bed" -p "n100.r03.s078_output/n100.r03.s078.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s078_output/n100.r03.s078.trimmed.sorted.bam" "n100.r03.s078_output/n100.r03.s078.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s078_output/n100.r03.s078.reference.fas" "n100.r03.s078_output/n100.r03.s078.trimmed.sorted.bam" > "n100.r03.s078_output/n100.r03.s078.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s078_output/n100.r03.s078.reference.fas" --call-indels "n100.r03.s078_output/n100.r03.s078.trimmed.sorted.bam" > "n100.r03.s078_output/n100.r03.s078.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s078_output/n100.r03.s078.trimmed.sorted.bam" > "n100.r03.s078_output/n100.r03.s078.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s078_output/n100.r03.s078.depth.txt" "n100.r03.s078_output/n100.r03.s078.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s078_output/n100.r03.s078.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s078_output/n100.r03.s078.reference.fas" | bcftools consensus -m "n100.r03.s078_output/n100.r03.s078.low_depth.tsv" tmp.vcf.gz > "n100.r03.s078_output/n100.r03.s078.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s078_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:23 scheduler task 651abeff (flow f2593f6b): loaded val<.=3069ebe4 35.4MiB>
2021/07/08 16:44:23 scheduler task 21089e1a (flow c279c2df): loaded val<.=a892305f 35.4MiB>
2021/07/08 16:44:23 scheduler task 6c9931f7 (flow 84fe3b5f): loaded val<.=ff8ea847 35.4MiB>
2021/07/08 16:44:23 scheduler task a64ed56a (flow dcbde93f): loaded val<.=c2e89ac2 35.4MiB>
2021/07/08 16:44:23 scheduler task a4048ae2 (flow 062ec948): loaded val<.=a8703526 35.4MiB>
2021/07/08 16:44:23 scheduler task 484b3ade (flow 1ea7c425): loaded val<.=d6231270 35.4MiB>
2021/07/08 16:44:23 scheduler task 16ea2db5 (flow ff2c5c89): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:23 scheduler task 651abeff (flow f2593f6b): loaded val<.=aa0b5195 35.4MiB>
2021/07/08 16:44:23 scheduler task 651abeff (flow f2593f6b): loading (try 0): successful, next state: submitting
2021/07/08 16:44:23 scheduler task 16ea2db5 (flow ff2c5c89): waiting for completion (try 0): started
2021/07/08 16:44:23  ->  n100.r03.s092.Main.out_file ff2c5c89 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:23 n100.r03.s092.Main.out_file ff2c5c89 n100/r03/n100.r03.s092.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:73d1abb52c4a82fb86ab927ae02421d6dd88922ff9b00b21677b15720a384b41
	sha256:ff2c5c89e2ae3a86341030bd648b38f784ffbf93ffca60c25b9a3aaa90986f08
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/16ea2db55ae35a94b84a090b912c33640de51074fb9603ac9c8fb59a0a3932a7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s092_output"
	    wget -O "n100.r03.s092_output/n100.r03.s092.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s092_output/n100.r03.s092.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s092_output/n100.r03.s092.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s092_output/n100.r03.s092.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s092_output/n100.r03.s092.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s092_output/n100.r03.s092.reference.fas" "n100.r03.s092_output/n100.r03.s092.fq1.fastq" "n100.r03.s092_output/n100.r03.s092.fq2.fastq" | samtools view -bS - > "n100.r03.s092_output/n100.r03.s092.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s092_output/n100.r03.s092.untrimmed.sorted.bam" "n100.r03.s092_output/n100.r03.s092.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s092_output/n100.r03.s092.untrimmed.sorted.bam" -b "n100.r03.s092_output/n100.r03.s092.primers.bed" -p "n100.r03.s092_output/n100.r03.s092.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s092_output/n100.r03.s092.trimmed.sorted.bam" "n100.r03.s092_output/n100.r03.s092.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s092_output/n100.r03.s092.reference.fas" "n100.r03.s092_output/n100.r03.s092.trimmed.sorted.bam" > "n100.r03.s092_output/n100.r03.s092.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s092_output/n100.r03.s092.reference.fas" --call-indels "n100.r03.s092_output/n100.r03.s092.trimmed.sorted.bam" > "n100.r03.s092_output/n100.r03.s092.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s092_output/n100.r03.s092.trimmed.sorted.bam" > "n100.r03.s092_output/n100.r03.s092.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s092_output/n100.r03.s092.depth.txt" "n100.r03.s092_output/n100.r03.s092.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s092_output/n100.r03.s092.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s092_output/n100.r03.s092.reference.fas" | bcftools consensus -m "n100.r03.s092_output/n100.r03.s092.low_depth.tsv" tmp.vcf.gz > "n100.r03.s092_output/n100.r03.s092.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s092_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:23 scheduler task 651abeff (flow f2593f6b): submitting (try 0): started
2021/07/08 16:44:23 scheduler task bc51d36b (flow 29867b33): loaded val<.=0d19a551 35.4MiB>
2021/07/08 16:44:23 scheduler task 9fb665b0 (flow c77a5486): loaded val<.=226fe010 35.4MiB>
2021/07/08 16:44:23 scheduler task bc6b82f2 (flow 159f3125): loaded val<.=e9ce399b 35.4MiB>
2021/07/08 16:44:23 scheduler task dd443953 (flow 3816e5c5): loaded val<.=25d6d601 35.4MiB>
2021/07/08 16:44:23 scheduler task 7d7ed1d5 (flow 12b846cf): loaded val<.=b0051e66 35.4MiB>
2021/07/08 16:44:23 scheduler task 7d7ed1d5 (flow 12b846cf): loading (try 0): successful, next state: submitting
2021/07/08 16:44:23 scheduler task 70fc136d (flow 3be0544d): loaded val<.=bab27f72 35.4MiB>
2021/07/08 16:44:23 scheduler task 26ddd9e4 (flow 7219908c): loaded val<.=b06fc655 35.4MiB>
2021/07/08 16:44:23 scheduler task bffb2e9f (flow f9db9957): loaded val<.=a73b153e 35.4MiB>
2021/07/08 16:44:23 scheduler task 7d7ed1d5 (flow 12b846cf): submitting (try 0): started
2021/07/08 16:44:23 scheduler task 23f2b555 (flow d34a4a98): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:23 scheduler task 23f2b555 (flow d34a4a98): waiting for completion (try 0): started
2021/07/08 16:44:23  ->  n100.r03.s040.Main.out_file d34a4a98 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:23 scheduler task 4396f600 (flow e90de21c): loaded val<.=2fcc8616 35.4MiB>
2021/07/08 16:44:23 n100.r03.s040.Main.out_file d34a4a98 n100/r03/n100.r03.s040.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:dfa7bbc52c83ab71ea8f338f01e6357ac88331cc3310029535e2c8097cf992a7
	sha256:d34a4a98dad57160bf1304c5b5b88db7710e09be84bc7267614fef086c10ea00
	ec2-3-139-69-133.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/23f2b555c93a05cd6c9fa24509eb1b0739b7a25886e61ba2004eec3faae17546
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s040_output"
	    wget -O "n100.r03.s040_output/n100.r03.s040.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s040_output/n100.r03.s040.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s040_output/n100.r03.s040.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s040_output/n100.r03.s040.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s040_output/n100.r03.s040.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s040_output/n100.r03.s040.reference.fas" "n100.r03.s040_output/n100.r03.s040.fq1.fastq" "n100.r03.s040_output/n100.r03.s040.fq2.fastq" | samtools view -bS - > "n100.r03.s040_output/n100.r03.s040.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s040_output/n100.r03.s040.untrimmed.sorted.bam" "n100.r03.s040_output/n100.r03.s040.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s040_output/n100.r03.s040.untrimmed.sorted.bam" -b "n100.r03.s040_output/n100.r03.s040.primers.bed" -p "n100.r03.s040_output/n100.r03.s040.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s040_output/n100.r03.s040.trimmed.sorted.bam" "n100.r03.s040_output/n100.r03.s040.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s040_output/n100.r03.s040.reference.fas" "n100.r03.s040_output/n100.r03.s040.trimmed.sorted.bam" > "n100.r03.s040_output/n100.r03.s040.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s040_output/n100.r03.s040.reference.fas" --call-indels "n100.r03.s040_output/n100.r03.s040.trimmed.sorted.bam" > "n100.r03.s040_output/n100.r03.s040.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s040_output/n100.r03.s040.trimmed.sorted.bam" > "n100.r03.s040_output/n100.r03.s040.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s040_output/n100.r03.s040.depth.txt" "n100.r03.s040_output/n100.r03.s040.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s040_output/n100.r03.s040.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s040_output/n100.r03.s040.reference.fas" | bcftools consensus -m "n100.r03.s040_output/n100.r03.s040.low_depth.tsv" tmp.vcf.gz > "n100.r03.s040_output/n100.r03.s040.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s040_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:23 scheduler task 755dfd3e (flow 34520b39): loaded val<.=6ad53ea9 35.4MiB>
2021/07/08 16:44:23 scheduler task cb3be4a9 (flow 7f1435b4): loaded val<.=a20107ac 35.4MiB>
2021/07/08 16:44:23 scheduler task 6ab20197 (flow e04e53c6): loaded val<.=e240484c 35.4MiB>
2021/07/08 16:44:23 scheduler task 77c68cbe (flow 6fd9782d): loaded val<.=f0dcb327 35.4MiB>
2021/07/08 16:44:23 scheduler task 26ddd9e4 (flow 7219908c): loaded val<.=7f498893 35.4MiB>
2021/07/08 16:44:23 scheduler task 26ddd9e4 (flow 7219908c): loading (try 0): successful, next state: submitting
2021/07/08 16:44:23 scheduler task 7a62ec14 (flow e8c1c4e4): loaded val<.=97027b48 35.4MiB>
2021/07/08 16:44:23 scheduler task dd443953 (flow 3816e5c5): loaded val<.=9a15a3e8 35.4MiB>
2021/07/08 16:44:23 scheduler task dd443953 (flow 3816e5c5): loading (try 0): successful, next state: submitting
2021/07/08 16:44:23 scheduler task 26ddd9e4 (flow 7219908c): submitting (try 0): started
2021/07/08 16:44:23 scheduler task 77c68cbe (flow 6fd9782d): loaded val<.=1700afce 35.4MiB>
2021/07/08 16:44:23 scheduler task 77c68cbe (flow 6fd9782d): loading (try 0): successful, next state: submitting
2021/07/08 16:44:23 scheduler task cc866163 (flow 7b73dcd0): loaded val<.=865cca9e 35.4MiB>
2021/07/08 16:44:23 scheduler task cc866163 (flow 7b73dcd0): loaded val<.=1a3ef645 35.4MiB>
2021/07/08 16:44:23 scheduler task cc866163 (flow 7b73dcd0): loading (try 0): successful, next state: submitting
2021/07/08 16:44:23 scheduler task 5a0c62bc (flow 2cec23de): loaded val<.=1b14bd81 35.4MiB>
2021/07/08 16:44:23 scheduler task 27604f83 (flow 1f71c589): loaded val<.=01952c2a 35.4MiB>
2021/07/08 16:44:23 scheduler task 3d6f2242 (flow 88b2cc74): loaded val<.=5626b62e 35.4MiB>
2021/07/08 16:44:23 scheduler task eb1b1e87 (flow eacb1e8b): loaded val<.=19aeed88 35.4MiB>
2021/07/08 16:44:23 scheduler task eb1b1e87 (flow eacb1e8b): loading (try 0): successful, next state: submitting
2021/07/08 16:44:23 scheduler task e7b857e8 (flow 4dfce054): loaded val<.=c76a2048 35.4MiB>
2021/07/08 16:44:23 scheduler task 77c68cbe (flow 6fd9782d): submitting (try 0): started
2021/07/08 16:44:23 scheduler task dd443953 (flow 3816e5c5): submitting (try 0): started
2021/07/08 16:44:23 scheduler task 27950794 (flow 1e078488): loaded val<.=9030f39f 35.4MiB>
2021/07/08 16:44:23 scheduler task cc866163 (flow 7b73dcd0): submitting (try 0): started
2021/07/08 16:44:23 scheduler task eb1b1e87 (flow eacb1e8b): submitting (try 0): started
2021/07/08 16:44:23 scheduler task 13345758 (flow d19b125a): loaded val<.=1b67595e 35.4MiB>
2021/07/08 16:44:23 scheduler task 27604f83 (flow 1f71c589): loaded val<.=07912513 35.4MiB>
2021/07/08 16:44:23 scheduler task 13345758 (flow d19b125a): loading (try 0): successful, next state: submitting
2021/07/08 16:44:23 scheduler task 9fef0d8c (flow f673c693): loaded val<.=de355e5c 35.4MiB>
2021/07/08 16:44:23 scheduler task 27604f83 (flow 1f71c589): loading (try 0): successful, next state: submitting
2021/07/08 16:44:23 scheduler task 13345758 (flow d19b125a): submitting (try 0): started
2021/07/08 16:44:23 scheduler task 27604f83 (flow 1f71c589): submitting (try 0): started
2021/07/08 16:44:23 scheduler task 2128313b (flow 9e4c852f): loaded val<.=31daf582 35.4MiB>
2021/07/08 16:44:23 scheduler task a03fdbd6 (flow f12c01f7): loaded val<.=bbd9d1bb 35.4MiB>
2021/07/08 16:44:23 scheduler task 27950794 (flow 1e078488): loaded val<.=81a9d6ac 35.4MiB>
2021/07/08 16:44:23 scheduler task 27950794 (flow 1e078488): loading (try 0): successful, next state: submitting
2021/07/08 16:44:23 scheduler task 29f0c020 (flow 17bef574): loaded val<.=561825aa 35.4MiB>
2021/07/08 16:44:23 scheduler task 60be6b51 (flow a0f712d0): loaded val<.=d23b7389 35.4MiB>
2021/07/08 16:44:23 scheduler task bc51d36b (flow 29867b33): loaded val<.=bddb4242 35.4MiB>
2021/07/08 16:44:23 scheduler task bc51d36b (flow 29867b33): loading (try 0): successful, next state: submitting
2021/07/08 16:44:23 scheduler task 07b1d571 (flow 47420793): loaded val<.=2998e219 35.4MiB>
2021/07/08 16:44:23 scheduler task 27950794 (flow 1e078488): submitting (try 0): started
2021/07/08 16:44:23 scheduler task 5a370c3c (flow f85ec8d5): loaded val<.=99c75e10 35.4MiB>
2021/07/08 16:44:23 scheduler task 5a370c3c (flow f85ec8d5): loading (try 0): successful, next state: submitting
2021/07/08 16:44:23 scheduler task bc51d36b (flow 29867b33): submitting (try 0): started
2021/07/08 16:44:23 scheduler task 5a370c3c (flow f85ec8d5): submitting (try 0): started
2021/07/08 16:44:23 scheduler task ee5e2b4e (flow b8e1f21b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:23 scheduler task ee5e2b4e (flow b8e1f21b): waiting for completion (try 0): started
2021/07/08 16:44:23  ->  n100.r03.s018.Main.out_file b8e1f21b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:23 n100.r03.s018.Main.out_file b8e1f21b n100/r03/n100.r03.s018.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a4014a3a00e3cadae467a258cbf5a652765f77cf9fde39ded754732925f81ab8
	sha256:b8e1f21be10cb7b57a0eaeeff9577bd9caf80ed9934e012c6de22020fcce3d1f
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ee5e2b4e29fb1470c4d83d7dee8e9a197b7c0116d120c42ede36b42111dfbde7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s018_output"
	    wget -O "n100.r03.s018_output/n100.r03.s018.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s018_output/n100.r03.s018.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s018_output/n100.r03.s018.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s018_output/n100.r03.s018.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s018_output/n100.r03.s018.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s018_output/n100.r03.s018.reference.fas" "n100.r03.s018_output/n100.r03.s018.fq1.fastq" "n100.r03.s018_output/n100.r03.s018.fq2.fastq" | samtools view -bS - > "n100.r03.s018_output/n100.r03.s018.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s018_output/n100.r03.s018.untrimmed.sorted.bam" "n100.r03.s018_output/n100.r03.s018.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s018_output/n100.r03.s018.untrimmed.sorted.bam" -b "n100.r03.s018_output/n100.r03.s018.primers.bed" -p "n100.r03.s018_output/n100.r03.s018.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s018_output/n100.r03.s018.trimmed.sorted.bam" "n100.r03.s018_output/n100.r03.s018.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s018_output/n100.r03.s018.reference.fas" "n100.r03.s018_output/n100.r03.s018.trimmed.sorted.bam" > "n100.r03.s018_output/n100.r03.s018.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s018_output/n100.r03.s018.reference.fas" --call-indels "n100.r03.s018_output/n100.r03.s018.trimmed.sorted.bam" > "n100.r03.s018_output/n100.r03.s018.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s018_output/n100.r03.s018.trimmed.sorted.bam" > "n100.r03.s018_output/n100.r03.s018.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s018_output/n100.r03.s018.depth.txt" "n100.r03.s018_output/n100.r03.s018.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s018_output/n100.r03.s018.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s018_output/n100.r03.s018.reference.fas" | bcftools consensus -m "n100.r03.s018_output/n100.r03.s018.low_depth.tsv" tmp.vcf.gz > "n100.r03.s018_output/n100.r03.s018.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s018_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:23 scheduler task c63135f5 (flow b89df6be): loaded val<.=a26695dc 35.4MiB>
2021/07/08 16:44:23 scheduler task c63135f5 (flow b89df6be): loading (try 0): successful, next state: submitting
2021/07/08 16:44:23 scheduler task ab96201c (flow 531faab0): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:23 scheduler task c63135f5 (flow b89df6be): submitting (try 0): started
2021/07/08 16:44:23 scheduler task f0203609 (flow f72aefa7): loaded val<.=49531745 35.4MiB>
2021/07/08 16:44:23 scheduler task ab96201c (flow 531faab0): waiting for completion (try 0): started
2021/07/08 16:44:23  ->  n100.r03.s054.Main.out_file 531faab0 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:23 n100.r03.s054.Main.out_file 531faab0 n100/r03/n100.r03.s054.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a9a5cd514aa2b7fe0cc9e1530a67fcb485abaadcc0e9d18e269a5c4b4deecc86
	sha256:531faab0b9050deeeea4f2aa58941938beffce96388ec583151c59a1091efe31
	ec2-3-139-69-133.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ab96201c1359417f3b3400dfd96ab17d8692e5bf2aae81af4fbb4d40e5c27760
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s054_output"
	    wget -O "n100.r03.s054_output/n100.r03.s054.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s054_output/n100.r03.s054.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s054_output/n100.r03.s054.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s054_output/n100.r03.s054.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s054_output/n100.r03.s054.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s054_output/n100.r03.s054.reference.fas" "n100.r03.s054_output/n100.r03.s054.fq1.fastq" "n100.r03.s054_output/n100.r03.s054.fq2.fastq" | samtools view -bS - > "n100.r03.s054_output/n100.r03.s054.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s054_output/n100.r03.s054.untrimmed.sorted.bam" "n100.r03.s054_output/n100.r03.s054.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s054_output/n100.r03.s054.untrimmed.sorted.bam" -b "n100.r03.s054_output/n100.r03.s054.primers.bed" -p "n100.r03.s054_output/n100.r03.s054.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s054_output/n100.r03.s054.trimmed.sorted.bam" "n100.r03.s054_output/n100.r03.s054.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s054_output/n100.r03.s054.reference.fas" "n100.r03.s054_output/n100.r03.s054.trimmed.sorted.bam" > "n100.r03.s054_output/n100.r03.s054.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s054_output/n100.r03.s054.reference.fas" --call-indels "n100.r03.s054_output/n100.r03.s054.trimmed.sorted.bam" > "n100.r03.s054_output/n100.r03.s054.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s054_output/n100.r03.s054.trimmed.sorted.bam" > "n100.r03.s054_output/n100.r03.s054.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s054_output/n100.r03.s054.depth.txt" "n100.r03.s054_output/n100.r03.s054.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s054_output/n100.r03.s054.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s054_output/n100.r03.s054.reference.fas" | bcftools consensus -m "n100.r03.s054_output/n100.r03.s054.low_depth.tsv" tmp.vcf.gz > "n100.r03.s054_output/n100.r03.s054.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s054_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:23 scheduler task 13667c21 (flow da42f528): loaded val<.=3efe206e 35.4MiB>
2021/07/08 16:44:23 scheduler task e071a634 (flow 3d4ece28): loaded val<.=ce841175 35.4MiB>
2021/07/08 16:44:23 scheduler task b3ec1597 (flow 56168040): loaded val<.=d217db0d 35.4MiB>
2021/07/08 16:44:23 scheduler task ab470caf (flow 74da68ff): loaded val<.=99e6b2af 35.4MiB>
2021/07/08 16:44:23 scheduler task c3688bf6 (flow a83f360e): loaded val<.=a5dd78d2 35.4MiB>
2021/07/08 16:44:23 scheduler task df81b75e (flow c2a25c99): loaded val<.=925f76f8 35.4MiB>
2021/07/08 16:44:23 scheduler task cffdf651 (flow 46b547c0): loaded val<.=2f84626d 35.4MiB>
2021/07/08 16:44:23 scheduler task cffdf651 (flow 46b547c0): loading (try 0): successful, next state: submitting
2021/07/08 16:44:23 scheduler task 80669d3f (flow fe21aeeb): loaded val<.=1b88560b 35.4MiB>
2021/07/08 16:44:23 scheduler task c81055a4 (flow d0b7bfb6): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:23 scheduler task cffdf651 (flow 46b547c0): submitting (try 0): started
2021/07/08 16:44:23 scheduler task 60be6b51 (flow a0f712d0): loaded val<.=4fd9a4f7 35.4MiB>
2021/07/08 16:44:23 scheduler task 60be6b51 (flow a0f712d0): loading (try 0): successful, next state: submitting
2021/07/08 16:44:23 scheduler task c81055a4 (flow d0b7bfb6): waiting for completion (try 0): started
2021/07/08 16:44:23  ->  n100.r03.s036.Main.out_file d0b7bfb6 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:23 n100.r03.s036.Main.out_file d0b7bfb6 n100/r03/n100.r03.s036.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a18f32cfeaf9f26afdda9f34820b43cfe0a646e35ed8627c42bf307006de02b4
	sha256:d0b7bfb66da13f710b55e31892bf2955a7105800443c65b2e06085acfaa91a9f
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c81055a472e41c0eeac5654f945f1b1068fa6f1aed44eb43784f664d23aa1e44
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s036_output"
	    wget -O "n100.r03.s036_output/n100.r03.s036.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s036_output/n100.r03.s036.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s036_output/n100.r03.s036.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s036_output/n100.r03.s036.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s036_output/n100.r03.s036.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s036_output/n100.r03.s036.reference.fas" "n100.r03.s036_output/n100.r03.s036.fq1.fastq" "n100.r03.s036_output/n100.r03.s036.fq2.fastq" | samtools view -bS - > "n100.r03.s036_output/n100.r03.s036.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s036_output/n100.r03.s036.untrimmed.sorted.bam" "n100.r03.s036_output/n100.r03.s036.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s036_output/n100.r03.s036.untrimmed.sorted.bam" -b "n100.r03.s036_output/n100.r03.s036.primers.bed" -p "n100.r03.s036_output/n100.r03.s036.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s036_output/n100.r03.s036.trimmed.sorted.bam" "n100.r03.s036_output/n100.r03.s036.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s036_output/n100.r03.s036.reference.fas" "n100.r03.s036_output/n100.r03.s036.trimmed.sorted.bam" > "n100.r03.s036_output/n100.r03.s036.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s036_output/n100.r03.s036.reference.fas" --call-indels "n100.r03.s036_output/n100.r03.s036.trimmed.sorted.bam" > "n100.r03.s036_output/n100.r03.s036.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s036_output/n100.r03.s036.trimmed.sorted.bam" > "n100.r03.s036_output/n100.r03.s036.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s036_output/n100.r03.s036.depth.txt" "n100.r03.s036_output/n100.r03.s036.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s036_output/n100.r03.s036.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s036_output/n100.r03.s036.reference.fas" | bcftools consensus -m "n100.r03.s036_output/n100.r03.s036.low_depth.tsv" tmp.vcf.gz > "n100.r03.s036_output/n100.r03.s036.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s036_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:23 scheduler task 60be6b51 (flow a0f712d0): submitting (try 0): started
2021/07/08 16:44:23 scheduler task 961bc0f7 (flow a0d2eb2b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:23 scheduler task 961bc0f7 (flow a0d2eb2b): waiting for completion (try 0): started
2021/07/08 16:44:23  ->  n100.r03.s009.Main.out_file a0d2eb2b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:23 n100.r03.s009.Main.out_file a0d2eb2b n100/r03/n100.r03.s009.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:222ed146e761d820d2842e7ac246274668bbcfe047fc8bf810cd4fe2d7e89d9d
	sha256:a0d2eb2b64d92d302afdfbb1dd5b001b62372371894e88342f3e69f7d89323c2
	ec2-3-139-69-133.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/961bc0f711b030c5e0d915ca5a45e1d9127ea41271ce46c1b27b6e57a360d08b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s009_output"
	    wget -O "n100.r03.s009_output/n100.r03.s009.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s009_output/n100.r03.s009.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s009_output/n100.r03.s009.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s009_output/n100.r03.s009.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s009_output/n100.r03.s009.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s009_output/n100.r03.s009.reference.fas" "n100.r03.s009_output/n100.r03.s009.fq1.fastq" "n100.r03.s009_output/n100.r03.s009.fq2.fastq" | samtools view -bS - > "n100.r03.s009_output/n100.r03.s009.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s009_output/n100.r03.s009.untrimmed.sorted.bam" "n100.r03.s009_output/n100.r03.s009.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s009_output/n100.r03.s009.untrimmed.sorted.bam" -b "n100.r03.s009_output/n100.r03.s009.primers.bed" -p "n100.r03.s009_output/n100.r03.s009.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s009_output/n100.r03.s009.trimmed.sorted.bam" "n100.r03.s009_output/n100.r03.s009.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s009_output/n100.r03.s009.reference.fas" "n100.r03.s009_output/n100.r03.s009.trimmed.sorted.bam" > "n100.r03.s009_output/n100.r03.s009.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s009_output/n100.r03.s009.reference.fas" --call-indels "n100.r03.s009_output/n100.r03.s009.trimmed.sorted.bam" > "n100.r03.s009_output/n100.r03.s009.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s009_output/n100.r03.s009.trimmed.sorted.bam" > "n100.r03.s009_output/n100.r03.s009.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s009_output/n100.r03.s009.depth.txt" "n100.r03.s009_output/n100.r03.s009.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s009_output/n100.r03.s009.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s009_output/n100.r03.s009.reference.fas" | bcftools consensus -m "n100.r03.s009_output/n100.r03.s009.low_depth.tsv" tmp.vcf.gz > "n100.r03.s009_output/n100.r03.s009.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s009_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:23 scheduler task 06223123 (flow ffbd06ba): loaded val<.=8d0051cc 35.4MiB>
2021/07/08 16:44:23 scheduler task 192e5535 (flow e589bead): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:24 scheduler task 192e5535 (flow e589bead): waiting for completion (try 0): started
2021/07/08 16:44:24  ->  n100.r03.s002.Main.out_file e589bead exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:24 n100.r03.s002.Main.out_file e589bead n100/r03/n100.r03.s002.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ebc574d21ae3c29defc10c1829a6e34fe507a771a007c9ddb988c4d46713685d
	sha256:e589bead199e8837dba052ce3d42b2eab655848a38d2005288c6e5afcaba0e27
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/192e5535e6bfb9fabca84fcd462bc8d14d7ec60de325aaf57446a7ce992e5886
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s002_output"
	    wget -O "n100.r03.s002_output/n100.r03.s002.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s002_output/n100.r03.s002.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s002_output/n100.r03.s002.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s002_output/n100.r03.s002.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s002_output/n100.r03.s002.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s002_output/n100.r03.s002.reference.fas" "n100.r03.s002_output/n100.r03.s002.fq1.fastq" "n100.r03.s002_output/n100.r03.s002.fq2.fastq" | samtools view -bS - > "n100.r03.s002_output/n100.r03.s002.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s002_output/n100.r03.s002.untrimmed.sorted.bam" "n100.r03.s002_output/n100.r03.s002.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s002_output/n100.r03.s002.untrimmed.sorted.bam" -b "n100.r03.s002_output/n100.r03.s002.primers.bed" -p "n100.r03.s002_output/n100.r03.s002.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s002_output/n100.r03.s002.trimmed.sorted.bam" "n100.r03.s002_output/n100.r03.s002.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s002_output/n100.r03.s002.reference.fas" "n100.r03.s002_output/n100.r03.s002.trimmed.sorted.bam" > "n100.r03.s002_output/n100.r03.s002.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s002_output/n100.r03.s002.reference.fas" --call-indels "n100.r03.s002_output/n100.r03.s002.trimmed.sorted.bam" > "n100.r03.s002_output/n100.r03.s002.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s002_output/n100.r03.s002.trimmed.sorted.bam" > "n100.r03.s002_output/n100.r03.s002.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s002_output/n100.r03.s002.depth.txt" "n100.r03.s002_output/n100.r03.s002.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s002_output/n100.r03.s002.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s002_output/n100.r03.s002.reference.fas" | bcftools consensus -m "n100.r03.s002_output/n100.r03.s002.low_depth.tsv" tmp.vcf.gz > "n100.r03.s002_output/n100.r03.s002.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s002_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:24 scheduler task 642b8dce (flow da07df2f): loaded val<.=1a3af3e3 35.4MiB>
2021/07/08 16:44:24 scheduler task 4396f600 (flow e90de21c): loaded val<.=056f0be4 35.4MiB>
2021/07/08 16:44:24 scheduler task 4396f600 (flow e90de21c): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task 82950da3 (flow a420f865): loaded val<.=8ba8b233 35.4MiB>
2021/07/08 16:44:24 scheduler task 4396f600 (flow e90de21c): submitting (try 0): started
2021/07/08 16:44:24 scheduler task cb3be4a9 (flow 7f1435b4): loaded val<.=87b6976a 35.4MiB>
2021/07/08 16:44:24 scheduler task cb3be4a9 (flow 7f1435b4): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task cb3be4a9 (flow 7f1435b4): submitting (try 0): started
2021/07/08 16:44:24 scheduler task 7a62ec14 (flow e8c1c4e4): loaded val<.=88561216 35.4MiB>
2021/07/08 16:44:24 scheduler task 7a62ec14 (flow e8c1c4e4): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task 7a62ec14 (flow e8c1c4e4): submitting (try 0): started
2021/07/08 16:44:24 scheduler task e7da8eee (flow 3523219a): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:24 scheduler task 5009eabe (flow 942ecb0a): loaded val<.=1ca00f88 35.4MiB>
2021/07/08 16:44:24 scheduler task ac3fb0dc (flow 785ffd27): loaded val<.=b631ebe8 35.4MiB>
2021/07/08 16:44:24 scheduler task e7da8eee (flow 3523219a): waiting for completion (try 0): started
2021/07/08 16:44:24  ->  n100.r03.s012.Main.out_file 3523219a exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:24 n100.r03.s012.Main.out_file 3523219a n100/r03/n100.r03.s012.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:92b6f74ca1e2ac4359b0a9412223eef78c71c908f6201ffc919de14eb59df8d0
	sha256:3523219a867b0440be2ca851e07aec2c314c56fe88b22700213dbd8108006016
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e7da8eeebb00b2a15132d050b2b263387a14d4edb2d2e365076198096c787c0b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s012_output"
	    wget -O "n100.r03.s012_output/n100.r03.s012.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s012_output/n100.r03.s012.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s012_output/n100.r03.s012.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s012_output/n100.r03.s012.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s012_output/n100.r03.s012.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s012_output/n100.r03.s012.reference.fas" "n100.r03.s012_output/n100.r03.s012.fq1.fastq" "n100.r03.s012_output/n100.r03.s012.fq2.fastq" | samtools view -bS - > "n100.r03.s012_output/n100.r03.s012.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s012_output/n100.r03.s012.untrimmed.sorted.bam" "n100.r03.s012_output/n100.r03.s012.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s012_output/n100.r03.s012.untrimmed.sorted.bam" -b "n100.r03.s012_output/n100.r03.s012.primers.bed" -p "n100.r03.s012_output/n100.r03.s012.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s012_output/n100.r03.s012.trimmed.sorted.bam" "n100.r03.s012_output/n100.r03.s012.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s012_output/n100.r03.s012.reference.fas" "n100.r03.s012_output/n100.r03.s012.trimmed.sorted.bam" > "n100.r03.s012_output/n100.r03.s012.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s012_output/n100.r03.s012.reference.fas" --call-indels "n100.r03.s012_output/n100.r03.s012.trimmed.sorted.bam" > "n100.r03.s012_output/n100.r03.s012.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s012_output/n100.r03.s012.trimmed.sorted.bam" > "n100.r03.s012_output/n100.r03.s012.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s012_output/n100.r03.s012.depth.txt" "n100.r03.s012_output/n100.r03.s012.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s012_output/n100.r03.s012.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s012_output/n100.r03.s012.reference.fas" | bcftools consensus -m "n100.r03.s012_output/n100.r03.s012.low_depth.tsv" tmp.vcf.gz > "n100.r03.s012_output/n100.r03.s012.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s012_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:24 scheduler task b4bc837b (flow d79d1747): loaded val<.=7d0b8800 35.4MiB>
2021/07/08 16:44:24 scheduler task f8950918 (flow 8df3e478): loaded val<.=e5808cdf 35.4MiB>
2021/07/08 16:44:24 scheduler task 70fc136d (flow 3be0544d): loaded val<.=44ba9f97 35.4MiB>
2021/07/08 16:44:24 scheduler task 70fc136d (flow 3be0544d): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task 70fc136d (flow 3be0544d): submitting (try 0): started
2021/07/08 16:44:24 scheduler task 5a0c62bc (flow 2cec23de): loaded val<.=4c428d25 35.4MiB>
2021/07/08 16:44:24 scheduler task 5a0c62bc (flow 2cec23de): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task 6c9931f7 (flow 84fe3b5f): loaded val<.=6e16c009 35.4MiB>
2021/07/08 16:44:24 scheduler task 6c9931f7 (flow 84fe3b5f): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task 5a0c62bc (flow 2cec23de): submitting (try 0): started
2021/07/08 16:44:24 scheduler task 6c9931f7 (flow 84fe3b5f): submitting (try 0): started
2021/07/08 16:44:24 scheduler task 529ecf42 (flow e43f35d3): loaded val<.=25926c0c 35.4MiB>
2021/07/08 16:44:24 scheduler task ad11b6f1 (flow b407f183): loaded val<.=a5634123 35.4MiB>
2021/07/08 16:44:24 scheduler task c688ac3a (flow 62629a74): loaded val<.=f61ddbbd 35.4MiB>
2021/07/08 16:44:24 scheduler task bffb2e9f (flow f9db9957): loaded val<.=4949dfc6 35.4MiB>
2021/07/08 16:44:24 scheduler task bffb2e9f (flow f9db9957): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task bffb2e9f (flow f9db9957): submitting (try 0): started
2021/07/08 16:44:24 scheduler task 2cffe22c (flow 53f15bbb): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:24 scheduler task 2cffe22c (flow 53f15bbb): waiting for completion (try 0): started
2021/07/08 16:44:24  ->  n100.r03.s080.Main.out_file 53f15bbb exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:24 n100.r03.s080.Main.out_file 53f15bbb n100/r03/n100.r03.s080.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:321862bb930d2314b8a04fd48aaab35c19f86d725a87df7dd7e20e5bb5f512ad
	sha256:53f15bbb70db4ce07bb6337bbd435e20a7647f07e84355227195f00cc6ca9c77
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2cffe22ce5382cbe63b6f9c2884353e59e1938dee1edf3bbbaa7c11d09fc1010
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s080_output"
	    wget -O "n100.r03.s080_output/n100.r03.s080.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s080_output/n100.r03.s080.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s080_output/n100.r03.s080.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s080_output/n100.r03.s080.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s080_output/n100.r03.s080.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s080_output/n100.r03.s080.reference.fas" "n100.r03.s080_output/n100.r03.s080.fq1.fastq" "n100.r03.s080_output/n100.r03.s080.fq2.fastq" | samtools view -bS - > "n100.r03.s080_output/n100.r03.s080.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s080_output/n100.r03.s080.untrimmed.sorted.bam" "n100.r03.s080_output/n100.r03.s080.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s080_output/n100.r03.s080.untrimmed.sorted.bam" -b "n100.r03.s080_output/n100.r03.s080.primers.bed" -p "n100.r03.s080_output/n100.r03.s080.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s080_output/n100.r03.s080.trimmed.sorted.bam" "n100.r03.s080_output/n100.r03.s080.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s080_output/n100.r03.s080.reference.fas" "n100.r03.s080_output/n100.r03.s080.trimmed.sorted.bam" > "n100.r03.s080_output/n100.r03.s080.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s080_output/n100.r03.s080.reference.fas" --call-indels "n100.r03.s080_output/n100.r03.s080.trimmed.sorted.bam" > "n100.r03.s080_output/n100.r03.s080.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s080_output/n100.r03.s080.trimmed.sorted.bam" > "n100.r03.s080_output/n100.r03.s080.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s080_output/n100.r03.s080.depth.txt" "n100.r03.s080_output/n100.r03.s080.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s080_output/n100.r03.s080.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s080_output/n100.r03.s080.reference.fas" | bcftools consensus -m "n100.r03.s080_output/n100.r03.s080.low_depth.tsv" tmp.vcf.gz > "n100.r03.s080_output/n100.r03.s080.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s080_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:24 scheduler task 79b42f3c (flow 250ebac9): loaded val<.=08ec15f9 35.4MiB>
2021/07/08 16:44:24 scheduler task 79b42f3c (flow 250ebac9): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task b4bc837b (flow d79d1747): loaded val<.=b08a89ec 35.4MiB>
2021/07/08 16:44:24 scheduler task b4bc837b (flow d79d1747): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task 79b42f3c (flow 250ebac9): submitting (try 0): started
2021/07/08 16:44:24 scheduler task b4bc837b (flow d79d1747): submitting (try 0): started
2021/07/08 16:44:24 scheduler task 9fb665b0 (flow c77a5486): loaded val<.=2103be3c 35.4MiB>
2021/07/08 16:44:24 scheduler task 9fb665b0 (flow c77a5486): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task e1c62bb9 (flow 5ae9b7e9): loaded val<.=37f870be 35.4MiB>
2021/07/08 16:44:24 scheduler task ac3fb0dc (flow 785ffd27): loaded val<.=549b5f76 35.4MiB>
2021/07/08 16:44:24 scheduler task ac3fb0dc (flow 785ffd27): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task 9fb665b0 (flow c77a5486): submitting (try 0): started
2021/07/08 16:44:24 scheduler task bd82dc2a (flow d0504b1f): loaded val<.=805f55a9 35.4MiB>
2021/07/08 16:44:24 scheduler task 169fa905 (flow 9b3c4623): loaded val<.=72128fd4 35.4MiB>
2021/07/08 16:44:24 scheduler task 169fa905 (flow 9b3c4623): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task ac3fb0dc (flow 785ffd27): submitting (try 0): started
2021/07/08 16:44:24 scheduler task 29f0c020 (flow 17bef574): loaded val<.=326627c6 35.4MiB>
2021/07/08 16:44:24 scheduler task 29f0c020 (flow 17bef574): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task b3ec1597 (flow 56168040): loaded val<.=4a6cbf3c 35.4MiB>
2021/07/08 16:44:24 scheduler task b3ec1597 (flow 56168040): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task 169fa905 (flow 9b3c4623): submitting (try 0): started
2021/07/08 16:44:24 scheduler task 07b1d571 (flow 47420793): loaded val<.=aefd4b5e 35.4MiB>
2021/07/08 16:44:24 scheduler task 07b1d571 (flow 47420793): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task e1c62bb9 (flow 5ae9b7e9): loaded val<.=24e593dc 35.4MiB>
2021/07/08 16:44:24 scheduler task e1c62bb9 (flow 5ae9b7e9): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task 29f0c020 (flow 17bef574): submitting (try 0): started
2021/07/08 16:44:24 scheduler task d3c3f174 (flow eb36d115): loaded val<.=10cf35ec 35.4MiB>
2021/07/08 16:44:24 scheduler task b3ec1597 (flow 56168040): submitting (try 0): started
2021/07/08 16:44:24 scheduler task 3d6f2242 (flow 88b2cc74): loaded val<.=509a2929 35.4MiB>
2021/07/08 16:44:24 scheduler task 3d6f2242 (flow 88b2cc74): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task 07b1d571 (flow 47420793): submitting (try 0): started
2021/07/08 16:44:24 scheduler task d3c3f174 (flow eb36d115): loaded val<.=e574ab0a 35.4MiB>
2021/07/08 16:44:24 scheduler task d3c3f174 (flow eb36d115): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task e1c62bb9 (flow 5ae9b7e9): submitting (try 0): started
2021/07/08 16:44:24 scheduler task 5f06865c (flow a8ad97f1): loaded val<.=084f890a 35.4MiB>
2021/07/08 16:44:24 scheduler task 5f06865c (flow a8ad97f1): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task 3d6f2242 (flow 88b2cc74): submitting (try 0): started
2021/07/08 16:44:24 scheduler task d3c3f174 (flow eb36d115): submitting (try 0): started
2021/07/08 16:44:24 scheduler task 5f06865c (flow a8ad97f1): submitting (try 0): started
2021/07/08 16:44:24 scheduler task 95b9c199 (flow d919402c): loaded val<.=8f918acf 35.4MiB>
2021/07/08 16:44:24 scheduler task 21089e1a (flow c279c2df): loaded val<.=a6ad8432 35.4MiB>
2021/07/08 16:44:24 scheduler task 21089e1a (flow c279c2df): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task 95b9c199 (flow d919402c): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task e071a634 (flow 3d4ece28): loaded val<.=2963c212 35.4MiB>
2021/07/08 16:44:24 scheduler task e071a634 (flow 3d4ece28): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task c3688bf6 (flow a83f360e): loaded val<.=960c242f 35.4MiB>
2021/07/08 16:44:24 scheduler task c3688bf6 (flow a83f360e): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task f0203609 (flow f72aefa7): loaded val<.=1d21d4b4 35.4MiB>
2021/07/08 16:44:24 scheduler task f0203609 (flow f72aefa7): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task 642b8dce (flow da07df2f): loaded val<.=1b86c196 35.4MiB>
2021/07/08 16:44:24 scheduler task 642b8dce (flow da07df2f): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task 86cdbd24 (flow ec5d5436): loaded val<.=c18b018c 35.4MiB>
2021/07/08 16:44:24 scheduler task 21089e1a (flow c279c2df): submitting (try 0): started
2021/07/08 16:44:24 scheduler task 95b9c199 (flow d919402c): submitting (try 0): started
2021/07/08 16:44:24 scheduler task e071a634 (flow 3d4ece28): submitting (try 0): started
2021/07/08 16:44:24 scheduler task bd82dc2a (flow d0504b1f): loaded val<.=4da19169 35.4MiB>
2021/07/08 16:44:24 scheduler task bd82dc2a (flow d0504b1f): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task bbcfd2b5 (flow 2ac719fa): loaded val<.=89597b58 35.4MiB>
2021/07/08 16:44:24 scheduler task bbcfd2b5 (flow 2ac719fa): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task 7194b040 (flow e2be785d): loaded val<.=f7264c76 35.4MiB>
2021/07/08 16:44:24 scheduler task 529ecf42 (flow e43f35d3): loaded val<.=701a3003 35.4MiB>
2021/07/08 16:44:24 scheduler task 529ecf42 (flow e43f35d3): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task 6ab20197 (flow e04e53c6): loaded val<.=b61eeb7c 35.4MiB>
2021/07/08 16:44:24 scheduler task 6ab20197 (flow e04e53c6): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task c3688bf6 (flow a83f360e): submitting (try 0): started
2021/07/08 16:44:24 scheduler task df81b75e (flow c2a25c99): loaded val<.=86e59c7c 35.4MiB>
2021/07/08 16:44:24 scheduler task df81b75e (flow c2a25c99): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task 7194b040 (flow e2be785d): loaded val<.=d4e320a4 35.4MiB>
2021/07/08 16:44:24 scheduler task 7194b040 (flow e2be785d): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task f0203609 (flow f72aefa7): submitting (try 0): started
2021/07/08 16:44:24 scheduler task 642b8dce (flow da07df2f): submitting (try 0): started
2021/07/08 16:44:24 scheduler task 754701b2 (flow a896295a): loaded val<.=2a4ea417 35.4MiB>
2021/07/08 16:44:24 scheduler task 755dfd3e (flow 34520b39): loaded val<.=26c42d0e 35.4MiB>
2021/07/08 16:44:24 scheduler task 755dfd3e (flow 34520b39): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task e7b857e8 (flow 4dfce054): loaded val<.=60f83df1 35.4MiB>
2021/07/08 16:44:24 scheduler task e7b857e8 (flow 4dfce054): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task bd82dc2a (flow d0504b1f): submitting (try 0): started
2021/07/08 16:44:24 scheduler task bbcfd2b5 (flow 2ac719fa): submitting (try 0): started
2021/07/08 16:44:24 scheduler task f8950918 (flow 8df3e478): loaded val<.=df9236e2 35.4MiB>
2021/07/08 16:44:24 scheduler task f8950918 (flow 8df3e478): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task 529ecf42 (flow e43f35d3): submitting (try 0): started
2021/07/08 16:44:24 scheduler task 9a3d3840 (flow be1bb147): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:24 scheduler task 2128313b (flow 9e4c852f): loaded val<.=8d40f527 35.4MiB>
2021/07/08 16:44:24 scheduler task 2128313b (flow 9e4c852f): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task 6ab20197 (flow e04e53c6): submitting (try 0): started
2021/07/08 16:44:24 scheduler task 5009eabe (flow 942ecb0a): loaded val<.=ac0801ee 35.4MiB>
2021/07/08 16:44:24 scheduler task 5009eabe (flow 942ecb0a): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task 86cdbd24 (flow ec5d5436): loaded val<.=6f8f6556 35.4MiB>
2021/07/08 16:44:24 scheduler task 86cdbd24 (flow ec5d5436): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task df81b75e (flow c2a25c99): submitting (try 0): started
2021/07/08 16:44:24 scheduler task 7194b040 (flow e2be785d): submitting (try 0): started
2021/07/08 16:44:24 scheduler task 755dfd3e (flow 34520b39): submitting (try 0): started
2021/07/08 16:44:24 scheduler task e7b857e8 (flow 4dfce054): submitting (try 0): started
2021/07/08 16:44:24 scheduler task 693e99fc (flow 13424ad8): loaded val<.=982ee4d9 35.4MiB>
2021/07/08 16:44:24 scheduler task 693e99fc (flow 13424ad8): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task f8950918 (flow 8df3e478): submitting (try 0): started
2021/07/08 16:44:24 scheduler task 9a3d3840 (flow be1bb147): waiting for completion (try 0): started
2021/07/08 16:44:24  ->  n100.r03.s058.Main.out_file be1bb147 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:24 n100.r03.s058.Main.out_file be1bb147 n100/r03/n100.r03.s058.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:86c46e5cac020b6df5d3cd4533c80be3fd900d66a990d473ffa7b8b486adb6f3
	sha256:be1bb147ed76f6b04f2a00154d5cc4169c1937801d2bb606d0f0e9563690e762
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9a3d384096bec8d2237fc73e5e1e6b716f782f3d678e9a355d76d5236a49c53c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s058_output"
	    wget -O "n100.r03.s058_output/n100.r03.s058.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s058_output/n100.r03.s058.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s058_output/n100.r03.s058.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s058_output/n100.r03.s058.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s058_output/n100.r03.s058.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s058_output/n100.r03.s058.reference.fas" "n100.r03.s058_output/n100.r03.s058.fq1.fastq" "n100.r03.s058_output/n100.r03.s058.fq2.fastq" | samtools view -bS - > "n100.r03.s058_output/n100.r03.s058.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s058_output/n100.r03.s058.untrimmed.sorted.bam" "n100.r03.s058_output/n100.r03.s058.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s058_output/n100.r03.s058.untrimmed.sorted.bam" -b "n100.r03.s058_output/n100.r03.s058.primers.bed" -p "n100.r03.s058_output/n100.r03.s058.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s058_output/n100.r03.s058.trimmed.sorted.bam" "n100.r03.s058_output/n100.r03.s058.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s058_output/n100.r03.s058.reference.fas" "n100.r03.s058_output/n100.r03.s058.trimmed.sorted.bam" > "n100.r03.s058_output/n100.r03.s058.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s058_output/n100.r03.s058.reference.fas" --call-indels "n100.r03.s058_output/n100.r03.s058.trimmed.sorted.bam" > "n100.r03.s058_output/n100.r03.s058.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s058_output/n100.r03.s058.trimmed.sorted.bam" > "n100.r03.s058_output/n100.r03.s058.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s058_output/n100.r03.s058.depth.txt" "n100.r03.s058_output/n100.r03.s058.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s058_output/n100.r03.s058.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s058_output/n100.r03.s058.reference.fas" | bcftools consensus -m "n100.r03.s058_output/n100.r03.s058.low_depth.tsv" tmp.vcf.gz > "n100.r03.s058_output/n100.r03.s058.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s058_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:24 scheduler task 2128313b (flow 9e4c852f): submitting (try 0): started
2021/07/08 16:44:24 scheduler task 5009eabe (flow 942ecb0a): submitting (try 0): started
2021/07/08 16:44:24 scheduler task 86cdbd24 (flow ec5d5436): submitting (try 0): started
2021/07/08 16:44:24 scheduler task 693e99fc (flow 13424ad8): submitting (try 0): started
2021/07/08 16:44:24 scheduler task ca4ff408 (flow 5e2cc6ee): loaded val<.=a1abc23f 35.4MiB>
2021/07/08 16:44:24 scheduler task ca4ff408 (flow 5e2cc6ee): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task ca4ff408 (flow 5e2cc6ee): submitting (try 0): started
2021/07/08 16:44:24 scheduler task 97699c51 (flow ea5d62c8): loaded val<.=0d128113 35.4MiB>
2021/07/08 16:44:24 scheduler task f165135f (flow b485700d): loaded val<.=24eac277 35.4MiB>
2021/07/08 16:44:24 scheduler task 06223123 (flow ffbd06ba): loaded val<.=7bc0fcfa 35.4MiB>
2021/07/08 16:44:24 scheduler task 06223123 (flow ffbd06ba): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task 97699c51 (flow ea5d62c8): loaded val<.=84819bea 35.4MiB>
2021/07/08 16:44:24 scheduler task 97699c51 (flow ea5d62c8): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task 06223123 (flow ffbd06ba): submitting (try 0): started
2021/07/08 16:44:24 scheduler task 754701b2 (flow a896295a): loaded val<.=c7330d2d 35.4MiB>
2021/07/08 16:44:24 scheduler task 754701b2 (flow a896295a): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task 9fef0d8c (flow f673c693): loaded val<.=c32c7cab 35.4MiB>
2021/07/08 16:44:24 scheduler task 9fef0d8c (flow f673c693): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task d3dd0d64 (flow 7e374560): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:24 scheduler task 97699c51 (flow ea5d62c8): submitting (try 0): started
2021/07/08 16:44:24 scheduler task 754701b2 (flow a896295a): submitting (try 0): started
2021/07/08 16:44:24 scheduler task 9fef0d8c (flow f673c693): submitting (try 0): started
2021/07/08 16:44:24 scheduler task a64ed56a (flow dcbde93f): loaded val<.=77dc6664 35.4MiB>
2021/07/08 16:44:24 scheduler task a64ed56a (flow dcbde93f): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task a64ed56a (flow dcbde93f): submitting (try 0): started
2021/07/08 16:44:24 scheduler task d3dd0d64 (flow 7e374560): waiting for completion (try 0): started
2021/07/08 16:44:24  ->  n100.r03.s070.Main.out_file 7e374560 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:24 n100.r03.s070.Main.out_file 7e374560 n100/r03/n100.r03.s070.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:478c356548d3c8d470343f184b67c490886effd01b60f2a73d982bd100aa1f6d
	sha256:7e374560cb0e7dc4515909b7fc8e795e1c460d2aaf5311396629afdd3dd8f9a3
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d3dd0d64f2df1162c4a9419ad25412281c47e9668733abe841ba1e76f85515ed
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s070_output"
	    wget -O "n100.r03.s070_output/n100.r03.s070.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s070_output/n100.r03.s070.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s070_output/n100.r03.s070.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s070_output/n100.r03.s070.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s070_output/n100.r03.s070.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s070_output/n100.r03.s070.reference.fas" "n100.r03.s070_output/n100.r03.s070.fq1.fastq" "n100.r03.s070_output/n100.r03.s070.fq2.fastq" | samtools view -bS - > "n100.r03.s070_output/n100.r03.s070.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s070_output/n100.r03.s070.untrimmed.sorted.bam" "n100.r03.s070_output/n100.r03.s070.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s070_output/n100.r03.s070.untrimmed.sorted.bam" -b "n100.r03.s070_output/n100.r03.s070.primers.bed" -p "n100.r03.s070_output/n100.r03.s070.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s070_output/n100.r03.s070.trimmed.sorted.bam" "n100.r03.s070_output/n100.r03.s070.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s070_output/n100.r03.s070.reference.fas" "n100.r03.s070_output/n100.r03.s070.trimmed.sorted.bam" > "n100.r03.s070_output/n100.r03.s070.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s070_output/n100.r03.s070.reference.fas" --call-indels "n100.r03.s070_output/n100.r03.s070.trimmed.sorted.bam" > "n100.r03.s070_output/n100.r03.s070.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s070_output/n100.r03.s070.trimmed.sorted.bam" > "n100.r03.s070_output/n100.r03.s070.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s070_output/n100.r03.s070.depth.txt" "n100.r03.s070_output/n100.r03.s070.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s070_output/n100.r03.s070.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s070_output/n100.r03.s070.reference.fas" | bcftools consensus -m "n100.r03.s070_output/n100.r03.s070.low_depth.tsv" tmp.vcf.gz > "n100.r03.s070_output/n100.r03.s070.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s070_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:24 scheduler task f165135f (flow b485700d): loaded val<.=a2ded69a 35.4MiB>
2021/07/08 16:44:24 scheduler task f165135f (flow b485700d): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task f165135f (flow b485700d): submitting (try 0): started
2021/07/08 16:44:24 scheduler task ad11b6f1 (flow b407f183): loaded val<.=be6033c4 35.4MiB>
2021/07/08 16:44:24 scheduler task ad11b6f1 (flow b407f183): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task ad11b6f1 (flow b407f183): submitting (try 0): started
2021/07/08 16:44:24 scheduler task 80669d3f (flow fe21aeeb): loaded val<.=4c0bab0d 35.4MiB>
2021/07/08 16:44:24 scheduler task 80669d3f (flow fe21aeeb): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task 80669d3f (flow fe21aeeb): submitting (try 0): started
2021/07/08 16:44:24 scheduler task 82950da3 (flow a420f865): loaded val<.=c317d93c 35.4MiB>
2021/07/08 16:44:24 scheduler task 82950da3 (flow a420f865): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task 11b3b7c2 (flow 7b9422b3): loaded val<.=b14af575 35.4MiB>
2021/07/08 16:44:24 scheduler task 11b3b7c2 (flow 7b9422b3): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task 82950da3 (flow a420f865): submitting (try 0): started
2021/07/08 16:44:24 scheduler task 11b3b7c2 (flow 7b9422b3): submitting (try 0): started
2021/07/08 16:44:24 scheduler task 484b3ade (flow 1ea7c425): loaded val<.=8e380a55 35.4MiB>
2021/07/08 16:44:24 scheduler task 484b3ade (flow 1ea7c425): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task 13667c21 (flow da42f528): loaded val<.=148f3e3f 35.4MiB>
2021/07/08 16:44:24 scheduler task 13667c21 (flow da42f528): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task 484b3ade (flow 1ea7c425): submitting (try 0): started
2021/07/08 16:44:24 scheduler task a03fdbd6 (flow f12c01f7): loaded val<.=3abb74bd 35.4MiB>
2021/07/08 16:44:24 scheduler task a03fdbd6 (flow f12c01f7): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task 13667c21 (flow da42f528): submitting (try 0): started
2021/07/08 16:44:24 scheduler task ab470caf (flow 74da68ff): loaded val<.=d5396137 35.4MiB>
2021/07/08 16:44:24 scheduler task ab470caf (flow 74da68ff): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task c688ac3a (flow 62629a74): loaded val<.=28d1d1d1 35.4MiB>
2021/07/08 16:44:24 scheduler task c688ac3a (flow 62629a74): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task a03fdbd6 (flow f12c01f7): submitting (try 0): started
2021/07/08 16:44:24 scheduler task ab470caf (flow 74da68ff): submitting (try 0): started
2021/07/08 16:44:24 scheduler task c688ac3a (flow 62629a74): submitting (try 0): started
2021/07/08 16:44:24 scheduler task a4048ae2 (flow 062ec948): loaded val<.=fc44b171 35.4MiB>
2021/07/08 16:44:24 scheduler task a4048ae2 (flow 062ec948): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task a4048ae2 (flow 062ec948): submitting (try 0): started
2021/07/08 16:44:24 scheduler task 94f5f6bc (flow 213b5afb): loaded val<.=f858cbb2 35.4MiB>
2021/07/08 16:44:24 scheduler task 94f5f6bc (flow 213b5afb): loading (try 0): successful, next state: submitting
2021/07/08 16:44:24 scheduler task 94f5f6bc (flow 213b5afb): submitting (try 0): started
2021/07/08 16:44:24 scheduler task 909853ee (flow 3857dd67): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:24 scheduler task 909853ee (flow 3857dd67): waiting for completion (try 0): started
2021/07/08 16:44:24  ->  n100.r03.s095.Main.out_file 3857dd67 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:24 n100.r03.s095.Main.out_file 3857dd67 n100/r03/n100.r03.s095.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:590f495e47f35d67e4e951d7ca13013c98851ecff5fd7f31e4d1fca7a9650f16
	sha256:3857dd6704ba3f1dd5d56424503399093392da925c6b02e67e8729320aee1bfe
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/909853ee28e3e3827ebda898abb44c562ce14d13c4d55898d49424ad608dec2b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s095_output"
	    wget -O "n100.r03.s095_output/n100.r03.s095.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s095_output/n100.r03.s095.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s095_output/n100.r03.s095.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s095_output/n100.r03.s095.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s095_output/n100.r03.s095.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s095_output/n100.r03.s095.reference.fas" "n100.r03.s095_output/n100.r03.s095.fq1.fastq" "n100.r03.s095_output/n100.r03.s095.fq2.fastq" | samtools view -bS - > "n100.r03.s095_output/n100.r03.s095.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s095_output/n100.r03.s095.untrimmed.sorted.bam" "n100.r03.s095_output/n100.r03.s095.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s095_output/n100.r03.s095.untrimmed.sorted.bam" -b "n100.r03.s095_output/n100.r03.s095.primers.bed" -p "n100.r03.s095_output/n100.r03.s095.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s095_output/n100.r03.s095.trimmed.sorted.bam" "n100.r03.s095_output/n100.r03.s095.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s095_output/n100.r03.s095.reference.fas" "n100.r03.s095_output/n100.r03.s095.trimmed.sorted.bam" > "n100.r03.s095_output/n100.r03.s095.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s095_output/n100.r03.s095.reference.fas" --call-indels "n100.r03.s095_output/n100.r03.s095.trimmed.sorted.bam" > "n100.r03.s095_output/n100.r03.s095.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s095_output/n100.r03.s095.trimmed.sorted.bam" > "n100.r03.s095_output/n100.r03.s095.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s095_output/n100.r03.s095.depth.txt" "n100.r03.s095_output/n100.r03.s095.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s095_output/n100.r03.s095.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s095_output/n100.r03.s095.reference.fas" | bcftools consensus -m "n100.r03.s095_output/n100.r03.s095.low_depth.tsv" tmp.vcf.gz > "n100.r03.s095_output/n100.r03.s095.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s095_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:25 scheduler task f158a18a (flow 6b8f67c3): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:25 scheduler task bc6b82f2 (flow 159f3125): loaded val<.=83f087b8 35.4MiB>
2021/07/08 16:44:25 scheduler task bc6b82f2 (flow 159f3125): loading (try 0): successful, next state: submitting
2021/07/08 16:44:25 scheduler task 4268bbce (flow e09dd2be): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:25 scheduler task f158a18a (flow 6b8f67c3): waiting for completion (try 0): started
2021/07/08 16:44:25  ->  n100.r03.s023.Main.out_file 6b8f67c3 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:25 n100.r03.s023.Main.out_file 6b8f67c3 n100/r03/n100.r03.s023.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5c42d36bfdd9731dd9c98f5f1417a2d58d3ad3493aabb4538d26afe158c54451
	sha256:6b8f67c37f24a1b203ac05f303eb311be95e642ff87c12e7a9f0d768ce01d16e
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f158a18a15460380d8182c6e4a02d4f13a65de60c4a8065295259b5fd0e89083
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s023_output"
	    wget -O "n100.r03.s023_output/n100.r03.s023.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s023_output/n100.r03.s023.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s023_output/n100.r03.s023.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s023_output/n100.r03.s023.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s023_output/n100.r03.s023.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s023_output/n100.r03.s023.reference.fas" "n100.r03.s023_output/n100.r03.s023.fq1.fastq" "n100.r03.s023_output/n100.r03.s023.fq2.fastq" | samtools view -bS - > "n100.r03.s023_output/n100.r03.s023.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s023_output/n100.r03.s023.untrimmed.sorted.bam" "n100.r03.s023_output/n100.r03.s023.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s023_output/n100.r03.s023.untrimmed.sorted.bam" -b "n100.r03.s023_output/n100.r03.s023.primers.bed" -p "n100.r03.s023_output/n100.r03.s023.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s023_output/n100.r03.s023.trimmed.sorted.bam" "n100.r03.s023_output/n100.r03.s023.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s023_output/n100.r03.s023.reference.fas" "n100.r03.s023_output/n100.r03.s023.trimmed.sorted.bam" > "n100.r03.s023_output/n100.r03.s023.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s023_output/n100.r03.s023.reference.fas" --call-indels "n100.r03.s023_output/n100.r03.s023.trimmed.sorted.bam" > "n100.r03.s023_output/n100.r03.s023.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s023_output/n100.r03.s023.trimmed.sorted.bam" > "n100.r03.s023_output/n100.r03.s023.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s023_output/n100.r03.s023.depth.txt" "n100.r03.s023_output/n100.r03.s023.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s023_output/n100.r03.s023.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s023_output/n100.r03.s023.reference.fas" | bcftools consensus -m "n100.r03.s023_output/n100.r03.s023.low_depth.tsv" tmp.vcf.gz > "n100.r03.s023_output/n100.r03.s023.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s023_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:25 scheduler task bc6b82f2 (flow 159f3125): submitting (try 0): started
2021/07/08 16:44:25 scheduler task 4268bbce (flow e09dd2be): waiting for completion (try 0): started
2021/07/08 16:44:25  ->  n100.r03.s038.Main.out_file e09dd2be exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:25 n100.r03.s038.Main.out_file e09dd2be n100/r03/n100.r03.s038.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6850c69624cfaee4e1dabc9f5458a0f440cdb213feaeb2b1ffb103ed488ff6c7
	sha256:e09dd2be34adf64f49a2f1581e0d558bd01c0c88a1ec7e87aebfa534e04d6c89
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4268bbce6787522bc079a2e11805aa325a6c788c35617975ee89885f71692cc2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s038_output"
	    wget -O "n100.r03.s038_output/n100.r03.s038.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s038_output/n100.r03.s038.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s038_output/n100.r03.s038.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s038_output/n100.r03.s038.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s038_output/n100.r03.s038.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s038_output/n100.r03.s038.reference.fas" "n100.r03.s038_output/n100.r03.s038.fq1.fastq" "n100.r03.s038_output/n100.r03.s038.fq2.fastq" | samtools view -bS - > "n100.r03.s038_output/n100.r03.s038.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s038_output/n100.r03.s038.untrimmed.sorted.bam" "n100.r03.s038_output/n100.r03.s038.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s038_output/n100.r03.s038.untrimmed.sorted.bam" -b "n100.r03.s038_output/n100.r03.s038.primers.bed" -p "n100.r03.s038_output/n100.r03.s038.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s038_output/n100.r03.s038.trimmed.sorted.bam" "n100.r03.s038_output/n100.r03.s038.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s038_output/n100.r03.s038.reference.fas" "n100.r03.s038_output/n100.r03.s038.trimmed.sorted.bam" > "n100.r03.s038_output/n100.r03.s038.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s038_output/n100.r03.s038.reference.fas" --call-indels "n100.r03.s038_output/n100.r03.s038.trimmed.sorted.bam" > "n100.r03.s038_output/n100.r03.s038.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s038_output/n100.r03.s038.trimmed.sorted.bam" > "n100.r03.s038_output/n100.r03.s038.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s038_output/n100.r03.s038.depth.txt" "n100.r03.s038_output/n100.r03.s038.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s038_output/n100.r03.s038.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s038_output/n100.r03.s038.reference.fas" | bcftools consensus -m "n100.r03.s038_output/n100.r03.s038.low_depth.tsv" tmp.vcf.gz > "n100.r03.s038_output/n100.r03.s038.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s038_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:25 scheduler task 3edff482 (flow afc84f13): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:25 scheduler task 3edff482 (flow afc84f13): waiting for completion (try 0): started
2021/07/08 16:44:25  ->  n100.r03.s014.Main.out_file afc84f13 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:25 n100.r03.s014.Main.out_file afc84f13 n100/r03/n100.r03.s014.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5a5fb63f0a3ffba5853697cafd2944f7f0799cc4b092906299ce0624b1df0da4
	sha256:afc84f13222d0e13121c68aef4beb6cad67086677c45545ae87922ef3e51a3f8
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3edff482a5dfe86c867085d0069a0276438ba04e5c4d2e9af84a33658338cb03
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s014_output"
	    wget -O "n100.r03.s014_output/n100.r03.s014.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s014_output/n100.r03.s014.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s014_output/n100.r03.s014.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s014_output/n100.r03.s014.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s014_output/n100.r03.s014.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s014_output/n100.r03.s014.reference.fas" "n100.r03.s014_output/n100.r03.s014.fq1.fastq" "n100.r03.s014_output/n100.r03.s014.fq2.fastq" | samtools view -bS - > "n100.r03.s014_output/n100.r03.s014.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s014_output/n100.r03.s014.untrimmed.sorted.bam" "n100.r03.s014_output/n100.r03.s014.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s014_output/n100.r03.s014.untrimmed.sorted.bam" -b "n100.r03.s014_output/n100.r03.s014.primers.bed" -p "n100.r03.s014_output/n100.r03.s014.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s014_output/n100.r03.s014.trimmed.sorted.bam" "n100.r03.s014_output/n100.r03.s014.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s014_output/n100.r03.s014.reference.fas" "n100.r03.s014_output/n100.r03.s014.trimmed.sorted.bam" > "n100.r03.s014_output/n100.r03.s014.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s014_output/n100.r03.s014.reference.fas" --call-indels "n100.r03.s014_output/n100.r03.s014.trimmed.sorted.bam" > "n100.r03.s014_output/n100.r03.s014.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s014_output/n100.r03.s014.trimmed.sorted.bam" > "n100.r03.s014_output/n100.r03.s014.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s014_output/n100.r03.s014.depth.txt" "n100.r03.s014_output/n100.r03.s014.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s014_output/n100.r03.s014.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s014_output/n100.r03.s014.reference.fas" | bcftools consensus -m "n100.r03.s014_output/n100.r03.s014.low_depth.tsv" tmp.vcf.gz > "n100.r03.s014_output/n100.r03.s014.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s014_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:25 scheduler task 733e004a (flow 98beb4a2): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:25 scheduler task 733e004a (flow 98beb4a2): waiting for completion (try 0): started
2021/07/08 16:44:25  ->  n100.r03.s010.Main.out_file 98beb4a2 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:25 n100.r03.s010.Main.out_file 98beb4a2 n100/r03/n100.r03.s010.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:556003129b076a6ebbe21a0ba5fc5d21ca7526e68171c350719b812a1e7992f7
	sha256:98beb4a2f78d4b345590f2a45c2b6c734cebb2e74d52da21ac007c8606448714
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/733e004abc31270c2453a2b4a474cc2bfc4a91c66becac4e4614645fb5a579e0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s010_output"
	    wget -O "n100.r03.s010_output/n100.r03.s010.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s010_output/n100.r03.s010.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s010_output/n100.r03.s010.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s010_output/n100.r03.s010.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s010_output/n100.r03.s010.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s010_output/n100.r03.s010.reference.fas" "n100.r03.s010_output/n100.r03.s010.fq1.fastq" "n100.r03.s010_output/n100.r03.s010.fq2.fastq" | samtools view -bS - > "n100.r03.s010_output/n100.r03.s010.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s010_output/n100.r03.s010.untrimmed.sorted.bam" "n100.r03.s010_output/n100.r03.s010.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s010_output/n100.r03.s010.untrimmed.sorted.bam" -b "n100.r03.s010_output/n100.r03.s010.primers.bed" -p "n100.r03.s010_output/n100.r03.s010.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s010_output/n100.r03.s010.trimmed.sorted.bam" "n100.r03.s010_output/n100.r03.s010.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s010_output/n100.r03.s010.reference.fas" "n100.r03.s010_output/n100.r03.s010.trimmed.sorted.bam" > "n100.r03.s010_output/n100.r03.s010.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s010_output/n100.r03.s010.reference.fas" --call-indels "n100.r03.s010_output/n100.r03.s010.trimmed.sorted.bam" > "n100.r03.s010_output/n100.r03.s010.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s010_output/n100.r03.s010.trimmed.sorted.bam" > "n100.r03.s010_output/n100.r03.s010.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s010_output/n100.r03.s010.depth.txt" "n100.r03.s010_output/n100.r03.s010.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s010_output/n100.r03.s010.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s010_output/n100.r03.s010.reference.fas" | bcftools consensus -m "n100.r03.s010_output/n100.r03.s010.low_depth.tsv" tmp.vcf.gz > "n100.r03.s010_output/n100.r03.s010.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s010_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:25 scheduler task 79e1224c (flow 7dc6a89a): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:25 scheduler task 79e1224c (flow 7dc6a89a): waiting for completion (try 0): started
2021/07/08 16:44:25  ->  n100.r03.s100.Main.out_file 7dc6a89a exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:25 n100.r03.s100.Main.out_file 7dc6a89a n100/r03/n100.r03.s100.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f39a6eb67e1ff403e8adce6b5c16d33d670c0e389537a0bde801113224bbd32e
	sha256:7dc6a89a4e79ad35108438668980c13470ddff8e5d9ee17cb32fcc1c5d9a351f
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/79e1224c0ede1f327704b37a96c6ef012bda4ffcf32964a6317bf16866e5c86a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s100_output"
	    wget -O "n100.r03.s100_output/n100.r03.s100.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s100_output/n100.r03.s100.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s100_output/n100.r03.s100.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s100_output/n100.r03.s100.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s100_output/n100.r03.s100.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s100_output/n100.r03.s100.reference.fas" "n100.r03.s100_output/n100.r03.s100.fq1.fastq" "n100.r03.s100_output/n100.r03.s100.fq2.fastq" | samtools view -bS - > "n100.r03.s100_output/n100.r03.s100.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s100_output/n100.r03.s100.untrimmed.sorted.bam" "n100.r03.s100_output/n100.r03.s100.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s100_output/n100.r03.s100.untrimmed.sorted.bam" -b "n100.r03.s100_output/n100.r03.s100.primers.bed" -p "n100.r03.s100_output/n100.r03.s100.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s100_output/n100.r03.s100.trimmed.sorted.bam" "n100.r03.s100_output/n100.r03.s100.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s100_output/n100.r03.s100.reference.fas" "n100.r03.s100_output/n100.r03.s100.trimmed.sorted.bam" > "n100.r03.s100_output/n100.r03.s100.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s100_output/n100.r03.s100.reference.fas" --call-indels "n100.r03.s100_output/n100.r03.s100.trimmed.sorted.bam" > "n100.r03.s100_output/n100.r03.s100.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s100_output/n100.r03.s100.trimmed.sorted.bam" > "n100.r03.s100_output/n100.r03.s100.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s100_output/n100.r03.s100.depth.txt" "n100.r03.s100_output/n100.r03.s100.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s100_output/n100.r03.s100.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s100_output/n100.r03.s100.reference.fas" | bcftools consensus -m "n100.r03.s100_output/n100.r03.s100.low_depth.tsv" tmp.vcf.gz > "n100.r03.s100_output/n100.r03.s100.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s100_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:25 scheduler task e35b1ff3 (flow b911e660): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:25 scheduler task e35b1ff3 (flow b911e660): waiting for completion (try 0): started
2021/07/08 16:44:25  ->  n100.r03.s011.Main.out_file b911e660 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:25 n100.r03.s011.Main.out_file b911e660 n100/r03/n100.r03.s011.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ce639bec79a0757dd01bd38c114025e9a8538b114dc97ebdcbfe87882880c793
	sha256:b911e660a339249df7a4f9b9e9de5ee514f49b8c954eba337d5a82725662f0e2
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e35b1ff388c6ef97575fb50dcddb7a64aff0c4b012bf2cd1efb630fded03140a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s011_output"
	    wget -O "n100.r03.s011_output/n100.r03.s011.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s011_output/n100.r03.s011.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s011_output/n100.r03.s011.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s011_output/n100.r03.s011.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s011_output/n100.r03.s011.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s011_output/n100.r03.s011.reference.fas" "n100.r03.s011_output/n100.r03.s011.fq1.fastq" "n100.r03.s011_output/n100.r03.s011.fq2.fastq" | samtools view -bS - > "n100.r03.s011_output/n100.r03.s011.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s011_output/n100.r03.s011.untrimmed.sorted.bam" "n100.r03.s011_output/n100.r03.s011.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s011_output/n100.r03.s011.untrimmed.sorted.bam" -b "n100.r03.s011_output/n100.r03.s011.primers.bed" -p "n100.r03.s011_output/n100.r03.s011.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s011_output/n100.r03.s011.trimmed.sorted.bam" "n100.r03.s011_output/n100.r03.s011.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s011_output/n100.r03.s011.reference.fas" "n100.r03.s011_output/n100.r03.s011.trimmed.sorted.bam" > "n100.r03.s011_output/n100.r03.s011.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s011_output/n100.r03.s011.reference.fas" --call-indels "n100.r03.s011_output/n100.r03.s011.trimmed.sorted.bam" > "n100.r03.s011_output/n100.r03.s011.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s011_output/n100.r03.s011.trimmed.sorted.bam" > "n100.r03.s011_output/n100.r03.s011.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s011_output/n100.r03.s011.depth.txt" "n100.r03.s011_output/n100.r03.s011.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s011_output/n100.r03.s011.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s011_output/n100.r03.s011.reference.fas" | bcftools consensus -m "n100.r03.s011_output/n100.r03.s011.low_depth.tsv" tmp.vcf.gz > "n100.r03.s011_output/n100.r03.s011.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s011_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:25 scheduler task 21f0e678 (flow e70dcb06): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:25 scheduler task 21f0e678 (flow e70dcb06): waiting for completion (try 0): started
2021/07/08 16:44:25  ->  n100.r03.s053.Main.out_file e70dcb06 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:25 n100.r03.s053.Main.out_file e70dcb06 n100/r03/n100.r03.s053.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e3ba1195a30b2d0158fbe91d581a45181b9ec2296437c909c038d5d11a576d80
	sha256:e70dcb06a6b4a5cf2f2d74373c22798d4234f1dc40c9b0efd218774e9a5fc8f8
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/21f0e678840c16a444561921d2b22c7914a079f387b8fbe4d24b85db092b47c1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s053_output"
	    wget -O "n100.r03.s053_output/n100.r03.s053.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s053_output/n100.r03.s053.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s053_output/n100.r03.s053.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s053_output/n100.r03.s053.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s053_output/n100.r03.s053.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s053_output/n100.r03.s053.reference.fas" "n100.r03.s053_output/n100.r03.s053.fq1.fastq" "n100.r03.s053_output/n100.r03.s053.fq2.fastq" | samtools view -bS - > "n100.r03.s053_output/n100.r03.s053.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s053_output/n100.r03.s053.untrimmed.sorted.bam" "n100.r03.s053_output/n100.r03.s053.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s053_output/n100.r03.s053.untrimmed.sorted.bam" -b "n100.r03.s053_output/n100.r03.s053.primers.bed" -p "n100.r03.s053_output/n100.r03.s053.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s053_output/n100.r03.s053.trimmed.sorted.bam" "n100.r03.s053_output/n100.r03.s053.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s053_output/n100.r03.s053.reference.fas" "n100.r03.s053_output/n100.r03.s053.trimmed.sorted.bam" > "n100.r03.s053_output/n100.r03.s053.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s053_output/n100.r03.s053.reference.fas" --call-indels "n100.r03.s053_output/n100.r03.s053.trimmed.sorted.bam" > "n100.r03.s053_output/n100.r03.s053.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s053_output/n100.r03.s053.trimmed.sorted.bam" > "n100.r03.s053_output/n100.r03.s053.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s053_output/n100.r03.s053.depth.txt" "n100.r03.s053_output/n100.r03.s053.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s053_output/n100.r03.s053.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s053_output/n100.r03.s053.reference.fas" | bcftools consensus -m "n100.r03.s053_output/n100.r03.s053.low_depth.tsv" tmp.vcf.gz > "n100.r03.s053_output/n100.r03.s053.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s053_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:26 scheduler task 2292bb40 (flow 3abe7efe): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:26 scheduler task 2292bb40 (flow 3abe7efe): waiting for completion (try 0): started
2021/07/08 16:44:26  ->  n100.r03.s086.Main.out_file 3abe7efe exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:26 n100.r03.s086.Main.out_file 3abe7efe n100/r03/n100.r03.s086.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ae552765ba33663dfd1d8514489c99b91195f5385fc762459a5d913209b07ed4
	sha256:3abe7efeb3981057f284f24fa113cd1abfc79dc866c3a461d59f953da8331da9
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2292bb4092396b64db1ec5fea53ca7c6cfa98e7098c5416eb3782ce146d793a9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s086_output"
	    wget -O "n100.r03.s086_output/n100.r03.s086.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s086_output/n100.r03.s086.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s086_output/n100.r03.s086.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s086_output/n100.r03.s086.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s086_output/n100.r03.s086.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s086_output/n100.r03.s086.reference.fas" "n100.r03.s086_output/n100.r03.s086.fq1.fastq" "n100.r03.s086_output/n100.r03.s086.fq2.fastq" | samtools view -bS - > "n100.r03.s086_output/n100.r03.s086.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s086_output/n100.r03.s086.untrimmed.sorted.bam" "n100.r03.s086_output/n100.r03.s086.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s086_output/n100.r03.s086.untrimmed.sorted.bam" -b "n100.r03.s086_output/n100.r03.s086.primers.bed" -p "n100.r03.s086_output/n100.r03.s086.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s086_output/n100.r03.s086.trimmed.sorted.bam" "n100.r03.s086_output/n100.r03.s086.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s086_output/n100.r03.s086.reference.fas" "n100.r03.s086_output/n100.r03.s086.trimmed.sorted.bam" > "n100.r03.s086_output/n100.r03.s086.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s086_output/n100.r03.s086.reference.fas" --call-indels "n100.r03.s086_output/n100.r03.s086.trimmed.sorted.bam" > "n100.r03.s086_output/n100.r03.s086.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s086_output/n100.r03.s086.trimmed.sorted.bam" > "n100.r03.s086_output/n100.r03.s086.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s086_output/n100.r03.s086.depth.txt" "n100.r03.s086_output/n100.r03.s086.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s086_output/n100.r03.s086.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s086_output/n100.r03.s086.reference.fas" | bcftools consensus -m "n100.r03.s086_output/n100.r03.s086.low_depth.tsv" tmp.vcf.gz > "n100.r03.s086_output/n100.r03.s086.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s086_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:26 scheduler task 301a76b8 (flow ea41a4f2): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:26 scheduler task 301a76b8 (flow ea41a4f2): waiting for completion (try 0): started
2021/07/08 16:44:26  ->  n100.r03.s025.Main.out_file ea41a4f2 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:26 n100.r03.s025.Main.out_file ea41a4f2 n100/r03/n100.r03.s025.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:964730d9547fbec82375e0b0b2307d0a0df95895ffde0563c364de34caa59cef
	sha256:ea41a4f22273aecedbac09203761dc1fd3fc0ea8d0cc17018a1be1e4d955b0e1
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/301a76b811f6d0df5069f047aef486f20908538d8f98ff7970be5b58a7bada9c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s025_output"
	    wget -O "n100.r03.s025_output/n100.r03.s025.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s025_output/n100.r03.s025.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s025_output/n100.r03.s025.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s025_output/n100.r03.s025.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s025_output/n100.r03.s025.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s025_output/n100.r03.s025.reference.fas" "n100.r03.s025_output/n100.r03.s025.fq1.fastq" "n100.r03.s025_output/n100.r03.s025.fq2.fastq" | samtools view -bS - > "n100.r03.s025_output/n100.r03.s025.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s025_output/n100.r03.s025.untrimmed.sorted.bam" "n100.r03.s025_output/n100.r03.s025.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s025_output/n100.r03.s025.untrimmed.sorted.bam" -b "n100.r03.s025_output/n100.r03.s025.primers.bed" -p "n100.r03.s025_output/n100.r03.s025.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s025_output/n100.r03.s025.trimmed.sorted.bam" "n100.r03.s025_output/n100.r03.s025.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s025_output/n100.r03.s025.reference.fas" "n100.r03.s025_output/n100.r03.s025.trimmed.sorted.bam" > "n100.r03.s025_output/n100.r03.s025.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s025_output/n100.r03.s025.reference.fas" --call-indels "n100.r03.s025_output/n100.r03.s025.trimmed.sorted.bam" > "n100.r03.s025_output/n100.r03.s025.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s025_output/n100.r03.s025.trimmed.sorted.bam" > "n100.r03.s025_output/n100.r03.s025.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s025_output/n100.r03.s025.depth.txt" "n100.r03.s025_output/n100.r03.s025.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s025_output/n100.r03.s025.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s025_output/n100.r03.s025.reference.fas" | bcftools consensus -m "n100.r03.s025_output/n100.r03.s025.low_depth.tsv" tmp.vcf.gz > "n100.r03.s025_output/n100.r03.s025.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s025_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:26 scheduler task a1c1b94c (flow 41d7dc2a): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:26 scheduler task a1c1b94c (flow 41d7dc2a): waiting for completion (try 0): started
2021/07/08 16:44:26  ->  n100.r03.s059.Main.out_file 41d7dc2a exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:26 n100.r03.s059.Main.out_file 41d7dc2a n100/r03/n100.r03.s059.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:668d18ab5b78b922026fe2ca2e89d5a8a3367b80ad22727df17009ef54cc0814
	sha256:41d7dc2a99583ea815dcc7ddd39bd70c0f166cef085e93fcc168233c79a70468
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a1c1b94cc02a5d8bfcd660bd41a05fb09ecea0668c3aaa02beffaf0edd4eb8e9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s059_output"
	    wget -O "n100.r03.s059_output/n100.r03.s059.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s059_output/n100.r03.s059.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s059_output/n100.r03.s059.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s059_output/n100.r03.s059.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s059_output/n100.r03.s059.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s059_output/n100.r03.s059.reference.fas" "n100.r03.s059_output/n100.r03.s059.fq1.fastq" "n100.r03.s059_output/n100.r03.s059.fq2.fastq" | samtools view -bS - > "n100.r03.s059_output/n100.r03.s059.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s059_output/n100.r03.s059.untrimmed.sorted.bam" "n100.r03.s059_output/n100.r03.s059.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s059_output/n100.r03.s059.untrimmed.sorted.bam" -b "n100.r03.s059_output/n100.r03.s059.primers.bed" -p "n100.r03.s059_output/n100.r03.s059.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s059_output/n100.r03.s059.trimmed.sorted.bam" "n100.r03.s059_output/n100.r03.s059.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s059_output/n100.r03.s059.reference.fas" "n100.r03.s059_output/n100.r03.s059.trimmed.sorted.bam" > "n100.r03.s059_output/n100.r03.s059.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s059_output/n100.r03.s059.reference.fas" --call-indels "n100.r03.s059_output/n100.r03.s059.trimmed.sorted.bam" > "n100.r03.s059_output/n100.r03.s059.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s059_output/n100.r03.s059.trimmed.sorted.bam" > "n100.r03.s059_output/n100.r03.s059.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s059_output/n100.r03.s059.depth.txt" "n100.r03.s059_output/n100.r03.s059.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s059_output/n100.r03.s059.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s059_output/n100.r03.s059.reference.fas" | bcftools consensus -m "n100.r03.s059_output/n100.r03.s059.low_depth.tsv" tmp.vcf.gz > "n100.r03.s059_output/n100.r03.s059.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s059_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:26 scheduler task c3a30d01 (flow d81cbbca): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:26 scheduler task c3a30d01 (flow d81cbbca): waiting for completion (try 0): started
2021/07/08 16:44:26  ->  n100.r03.s003.Main.out_file d81cbbca exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:26 n100.r03.s003.Main.out_file d81cbbca n100/r03/n100.r03.s003.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:bc30612ddb32570d06c65abff81a1631f0799252531836c296806ef6076e6c63
	sha256:d81cbbcaa342b291f230848053ad181e0b9aad6519f4bce7285209932ebb91e7
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c3a30d016f100d6828cdf523a1536c9c2b5f6a71d41c2dec765d1507d809067f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s003_output"
	    wget -O "n100.r03.s003_output/n100.r03.s003.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s003_output/n100.r03.s003.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s003_output/n100.r03.s003.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s003_output/n100.r03.s003.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s003_output/n100.r03.s003.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s003_output/n100.r03.s003.reference.fas" "n100.r03.s003_output/n100.r03.s003.fq1.fastq" "n100.r03.s003_output/n100.r03.s003.fq2.fastq" | samtools view -bS - > "n100.r03.s003_output/n100.r03.s003.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s003_output/n100.r03.s003.untrimmed.sorted.bam" "n100.r03.s003_output/n100.r03.s003.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s003_output/n100.r03.s003.untrimmed.sorted.bam" -b "n100.r03.s003_output/n100.r03.s003.primers.bed" -p "n100.r03.s003_output/n100.r03.s003.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s003_output/n100.r03.s003.trimmed.sorted.bam" "n100.r03.s003_output/n100.r03.s003.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s003_output/n100.r03.s003.reference.fas" "n100.r03.s003_output/n100.r03.s003.trimmed.sorted.bam" > "n100.r03.s003_output/n100.r03.s003.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s003_output/n100.r03.s003.reference.fas" --call-indels "n100.r03.s003_output/n100.r03.s003.trimmed.sorted.bam" > "n100.r03.s003_output/n100.r03.s003.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s003_output/n100.r03.s003.trimmed.sorted.bam" > "n100.r03.s003_output/n100.r03.s003.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s003_output/n100.r03.s003.depth.txt" "n100.r03.s003_output/n100.r03.s003.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s003_output/n100.r03.s003.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s003_output/n100.r03.s003.reference.fas" | bcftools consensus -m "n100.r03.s003_output/n100.r03.s003.low_depth.tsv" tmp.vcf.gz > "n100.r03.s003_output/n100.r03.s003.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s003_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:26 scheduler task 4e63d0ea (flow c209d771): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:26 scheduler task 4e63d0ea (flow c209d771): waiting for completion (try 0): started
2021/07/08 16:44:26  ->  n100.r03.s022.Main.out_file c209d771 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:26 n100.r03.s022.Main.out_file c209d771 n100/r03/n100.r03.s022.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:85940a13cdbb7cfaf4f619fb3ddb065a874492d8f3a3e4a638075b3ccc2f84f0
	sha256:c209d77157b3e2e5edaaae9058cad5cbfb4bd369648cb2e6d3172447dc6a79df
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4e63d0ea20700afe9203fc0ecf976972edb0e0b8f3cda86a3633319ebc7d7732
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s022_output"
	    wget -O "n100.r03.s022_output/n100.r03.s022.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s022_output/n100.r03.s022.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s022_output/n100.r03.s022.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s022_output/n100.r03.s022.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s022_output/n100.r03.s022.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s022_output/n100.r03.s022.reference.fas" "n100.r03.s022_output/n100.r03.s022.fq1.fastq" "n100.r03.s022_output/n100.r03.s022.fq2.fastq" | samtools view -bS - > "n100.r03.s022_output/n100.r03.s022.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s022_output/n100.r03.s022.untrimmed.sorted.bam" "n100.r03.s022_output/n100.r03.s022.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s022_output/n100.r03.s022.untrimmed.sorted.bam" -b "n100.r03.s022_output/n100.r03.s022.primers.bed" -p "n100.r03.s022_output/n100.r03.s022.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s022_output/n100.r03.s022.trimmed.sorted.bam" "n100.r03.s022_output/n100.r03.s022.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s022_output/n100.r03.s022.reference.fas" "n100.r03.s022_output/n100.r03.s022.trimmed.sorted.bam" > "n100.r03.s022_output/n100.r03.s022.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s022_output/n100.r03.s022.reference.fas" --call-indels "n100.r03.s022_output/n100.r03.s022.trimmed.sorted.bam" > "n100.r03.s022_output/n100.r03.s022.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s022_output/n100.r03.s022.trimmed.sorted.bam" > "n100.r03.s022_output/n100.r03.s022.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s022_output/n100.r03.s022.depth.txt" "n100.r03.s022_output/n100.r03.s022.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s022_output/n100.r03.s022.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s022_output/n100.r03.s022.reference.fas" | bcftools consensus -m "n100.r03.s022_output/n100.r03.s022.low_depth.tsv" tmp.vcf.gz > "n100.r03.s022_output/n100.r03.s022.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s022_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:26 scheduler task 898bb586 (flow f0229179): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:26 scheduler task 898bb586 (flow f0229179): waiting for completion (try 0): started
2021/07/08 16:44:26  ->  n100.r03.s019.Main.out_file f0229179 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:26 n100.r03.s019.Main.out_file f0229179 n100/r03/n100.r03.s019.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ebd3807d35f599fd21a3e363af8066a82db5c55a9adefd9c5b0a867769f48a49
	sha256:f02291790e13aad9a131334d4589f2d633bbd7c5558bb271f26f0e93f01e9383
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/898bb5863172da9c2c9c69c862827bf3aef400d2dc27d7ce44c423e0f0647289
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s019_output"
	    wget -O "n100.r03.s019_output/n100.r03.s019.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s019_output/n100.r03.s019.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s019_output/n100.r03.s019.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s019_output/n100.r03.s019.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s019_output/n100.r03.s019.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s019_output/n100.r03.s019.reference.fas" "n100.r03.s019_output/n100.r03.s019.fq1.fastq" "n100.r03.s019_output/n100.r03.s019.fq2.fastq" | samtools view -bS - > "n100.r03.s019_output/n100.r03.s019.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s019_output/n100.r03.s019.untrimmed.sorted.bam" "n100.r03.s019_output/n100.r03.s019.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s019_output/n100.r03.s019.untrimmed.sorted.bam" -b "n100.r03.s019_output/n100.r03.s019.primers.bed" -p "n100.r03.s019_output/n100.r03.s019.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s019_output/n100.r03.s019.trimmed.sorted.bam" "n100.r03.s019_output/n100.r03.s019.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s019_output/n100.r03.s019.reference.fas" "n100.r03.s019_output/n100.r03.s019.trimmed.sorted.bam" > "n100.r03.s019_output/n100.r03.s019.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s019_output/n100.r03.s019.reference.fas" --call-indels "n100.r03.s019_output/n100.r03.s019.trimmed.sorted.bam" > "n100.r03.s019_output/n100.r03.s019.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s019_output/n100.r03.s019.trimmed.sorted.bam" > "n100.r03.s019_output/n100.r03.s019.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s019_output/n100.r03.s019.depth.txt" "n100.r03.s019_output/n100.r03.s019.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s019_output/n100.r03.s019.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s019_output/n100.r03.s019.reference.fas" | bcftools consensus -m "n100.r03.s019_output/n100.r03.s019.low_depth.tsv" tmp.vcf.gz > "n100.r03.s019_output/n100.r03.s019.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s019_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:27 scheduler task 651abeff (flow f2593f6b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:27 scheduler task 651abeff (flow f2593f6b): waiting for completion (try 0): started
2021/07/08 16:44:27  ->  n100.r03.s007.Main.out_file f2593f6b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:27 n100.r03.s007.Main.out_file f2593f6b n100/r03/n100.r03.s007.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7d02129461812b8ec4a9f6c2e63f0d3dceb970e12a6c1aa9bd2a24822be19948
	sha256:f2593f6bd992cd7699158959511b0615255dc4cadce146dcc62a5a9e6f993bee
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/651abeff588b325b4f9174038c226c4f62a5eaa3caf9ddef6b6078ebfb5481ad
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s007_output"
	    wget -O "n100.r03.s007_output/n100.r03.s007.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s007_output/n100.r03.s007.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s007_output/n100.r03.s007.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s007_output/n100.r03.s007.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s007_output/n100.r03.s007.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s007_output/n100.r03.s007.reference.fas" "n100.r03.s007_output/n100.r03.s007.fq1.fastq" "n100.r03.s007_output/n100.r03.s007.fq2.fastq" | samtools view -bS - > "n100.r03.s007_output/n100.r03.s007.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s007_output/n100.r03.s007.untrimmed.sorted.bam" "n100.r03.s007_output/n100.r03.s007.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s007_output/n100.r03.s007.untrimmed.sorted.bam" -b "n100.r03.s007_output/n100.r03.s007.primers.bed" -p "n100.r03.s007_output/n100.r03.s007.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s007_output/n100.r03.s007.trimmed.sorted.bam" "n100.r03.s007_output/n100.r03.s007.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s007_output/n100.r03.s007.reference.fas" "n100.r03.s007_output/n100.r03.s007.trimmed.sorted.bam" > "n100.r03.s007_output/n100.r03.s007.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s007_output/n100.r03.s007.reference.fas" --call-indels "n100.r03.s007_output/n100.r03.s007.trimmed.sorted.bam" > "n100.r03.s007_output/n100.r03.s007.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s007_output/n100.r03.s007.trimmed.sorted.bam" > "n100.r03.s007_output/n100.r03.s007.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s007_output/n100.r03.s007.depth.txt" "n100.r03.s007_output/n100.r03.s007.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s007_output/n100.r03.s007.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s007_output/n100.r03.s007.reference.fas" | bcftools consensus -m "n100.r03.s007_output/n100.r03.s007.low_depth.tsv" tmp.vcf.gz > "n100.r03.s007_output/n100.r03.s007.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s007_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:27 scheduler task 7d7ed1d5 (flow 12b846cf): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:27 scheduler task 7d7ed1d5 (flow 12b846cf): waiting for completion (try 0): started
2021/07/08 16:44:27  ->  n100.r03.s031.Main.out_file 12b846cf exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:27 n100.r03.s031.Main.out_file 12b846cf n100/r03/n100.r03.s031.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7e126b7789d19d876a156055adc58b3edd583694debf2877f431925f237de963
	sha256:12b846cf9ac8b931abbebf6710a8f8629af4bc9bddcee8682703bd29dcecf417
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7d7ed1d50dd1e7e2d861da1f345da841e35e3193939d8586a4cdde6c3b6d8946
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s031_output"
	    wget -O "n100.r03.s031_output/n100.r03.s031.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s031_output/n100.r03.s031.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s031_output/n100.r03.s031.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s031_output/n100.r03.s031.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s031_output/n100.r03.s031.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s031_output/n100.r03.s031.reference.fas" "n100.r03.s031_output/n100.r03.s031.fq1.fastq" "n100.r03.s031_output/n100.r03.s031.fq2.fastq" | samtools view -bS - > "n100.r03.s031_output/n100.r03.s031.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s031_output/n100.r03.s031.untrimmed.sorted.bam" "n100.r03.s031_output/n100.r03.s031.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s031_output/n100.r03.s031.untrimmed.sorted.bam" -b "n100.r03.s031_output/n100.r03.s031.primers.bed" -p "n100.r03.s031_output/n100.r03.s031.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s031_output/n100.r03.s031.trimmed.sorted.bam" "n100.r03.s031_output/n100.r03.s031.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s031_output/n100.r03.s031.reference.fas" "n100.r03.s031_output/n100.r03.s031.trimmed.sorted.bam" > "n100.r03.s031_output/n100.r03.s031.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s031_output/n100.r03.s031.reference.fas" --call-indels "n100.r03.s031_output/n100.r03.s031.trimmed.sorted.bam" > "n100.r03.s031_output/n100.r03.s031.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s031_output/n100.r03.s031.trimmed.sorted.bam" > "n100.r03.s031_output/n100.r03.s031.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s031_output/n100.r03.s031.depth.txt" "n100.r03.s031_output/n100.r03.s031.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s031_output/n100.r03.s031.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s031_output/n100.r03.s031.reference.fas" | bcftools consensus -m "n100.r03.s031_output/n100.r03.s031.low_depth.tsv" tmp.vcf.gz > "n100.r03.s031_output/n100.r03.s031.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s031_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:27 scheduler task 26ddd9e4 (flow 7219908c): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:27 scheduler task 26ddd9e4 (flow 7219908c): waiting for completion (try 0): started
2021/07/08 16:44:27  ->  n100.r03.s098.Main.out_file 7219908c exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:27 n100.r03.s098.Main.out_file 7219908c n100/r03/n100.r03.s098.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ad1fe129dccc3c9a050cb10a98943ced9802b9be8cb33c69256aee23a99a6e44
	sha256:7219908c196af3bb79cf055088578c86ddc2c959503f772cb0e6164d5a04f248
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/26ddd9e40c2612a8c2717f18e5599b903124b87fceda34f0137deba5370d946c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s098_output"
	    wget -O "n100.r03.s098_output/n100.r03.s098.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s098_output/n100.r03.s098.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s098_output/n100.r03.s098.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s098_output/n100.r03.s098.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s098_output/n100.r03.s098.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s098_output/n100.r03.s098.reference.fas" "n100.r03.s098_output/n100.r03.s098.fq1.fastq" "n100.r03.s098_output/n100.r03.s098.fq2.fastq" | samtools view -bS - > "n100.r03.s098_output/n100.r03.s098.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s098_output/n100.r03.s098.untrimmed.sorted.bam" "n100.r03.s098_output/n100.r03.s098.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s098_output/n100.r03.s098.untrimmed.sorted.bam" -b "n100.r03.s098_output/n100.r03.s098.primers.bed" -p "n100.r03.s098_output/n100.r03.s098.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s098_output/n100.r03.s098.trimmed.sorted.bam" "n100.r03.s098_output/n100.r03.s098.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s098_output/n100.r03.s098.reference.fas" "n100.r03.s098_output/n100.r03.s098.trimmed.sorted.bam" > "n100.r03.s098_output/n100.r03.s098.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s098_output/n100.r03.s098.reference.fas" --call-indels "n100.r03.s098_output/n100.r03.s098.trimmed.sorted.bam" > "n100.r03.s098_output/n100.r03.s098.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s098_output/n100.r03.s098.trimmed.sorted.bam" > "n100.r03.s098_output/n100.r03.s098.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s098_output/n100.r03.s098.depth.txt" "n100.r03.s098_output/n100.r03.s098.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s098_output/n100.r03.s098.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s098_output/n100.r03.s098.reference.fas" | bcftools consensus -m "n100.r03.s098_output/n100.r03.s098.low_depth.tsv" tmp.vcf.gz > "n100.r03.s098_output/n100.r03.s098.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s098_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:27 scheduler task dd443953 (flow 3816e5c5): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:27 scheduler task dd443953 (flow 3816e5c5): waiting for completion (try 0): started
2021/07/08 16:44:27  ->  n100.r03.s043.Main.out_file 3816e5c5 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:27 n100.r03.s043.Main.out_file 3816e5c5 n100/r03/n100.r03.s043.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fbd4b81a3d40848bfd98284c0865c5c13b6850fd17e194711a1ec6f1f0155c1c
	sha256:3816e5c50dc53777450cf6ee1ae02615329ac49de564b7709b0d66c1d1bbc80f
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/dd443953f37d62a5175750bafa0a107b90b92516abd24104e2281467f6b7cad4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s043_output"
	    wget -O "n100.r03.s043_output/n100.r03.s043.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s043_output/n100.r03.s043.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s043_output/n100.r03.s043.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s043_output/n100.r03.s043.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s043_output/n100.r03.s043.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s043_output/n100.r03.s043.reference.fas" "n100.r03.s043_output/n100.r03.s043.fq1.fastq" "n100.r03.s043_output/n100.r03.s043.fq2.fastq" | samtools view -bS - > "n100.r03.s043_output/n100.r03.s043.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s043_output/n100.r03.s043.untrimmed.sorted.bam" "n100.r03.s043_output/n100.r03.s043.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s043_output/n100.r03.s043.untrimmed.sorted.bam" -b "n100.r03.s043_output/n100.r03.s043.primers.bed" -p "n100.r03.s043_output/n100.r03.s043.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s043_output/n100.r03.s043.trimmed.sorted.bam" "n100.r03.s043_output/n100.r03.s043.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s043_output/n100.r03.s043.reference.fas" "n100.r03.s043_output/n100.r03.s043.trimmed.sorted.bam" > "n100.r03.s043_output/n100.r03.s043.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s043_output/n100.r03.s043.reference.fas" --call-indels "n100.r03.s043_output/n100.r03.s043.trimmed.sorted.bam" > "n100.r03.s043_output/n100.r03.s043.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s043_output/n100.r03.s043.trimmed.sorted.bam" > "n100.r03.s043_output/n100.r03.s043.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s043_output/n100.r03.s043.depth.txt" "n100.r03.s043_output/n100.r03.s043.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s043_output/n100.r03.s043.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s043_output/n100.r03.s043.reference.fas" | bcftools consensus -m "n100.r03.s043_output/n100.r03.s043.low_depth.tsv" tmp.vcf.gz > "n100.r03.s043_output/n100.r03.s043.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s043_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:27 scheduler task 77c68cbe (flow 6fd9782d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:27 scheduler task 77c68cbe (flow 6fd9782d): waiting for completion (try 0): started
2021/07/08 16:44:27  ->  n100.r03.s060.Main.out_file 6fd9782d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:27 n100.r03.s060.Main.out_file 6fd9782d n100/r03/n100.r03.s060.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:37c377b862fe8e5ab35e4bedfaab256975f3593dcbee1eae417c3dadc1bdd2d2
	sha256:6fd9782dfd4d28049cae8769d8cee3d55f32b71107a7678b50cdbf5bde05de44
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/77c68cbe719d415f33bbe430aed9bea10db1f25d4eddbf23b9688484afb7efa7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s060_output"
	    wget -O "n100.r03.s060_output/n100.r03.s060.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s060_output/n100.r03.s060.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s060_output/n100.r03.s060.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s060_output/n100.r03.s060.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s060_output/n100.r03.s060.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s060_output/n100.r03.s060.reference.fas" "n100.r03.s060_output/n100.r03.s060.fq1.fastq" "n100.r03.s060_output/n100.r03.s060.fq2.fastq" | samtools view -bS - > "n100.r03.s060_output/n100.r03.s060.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s060_output/n100.r03.s060.untrimmed.sorted.bam" "n100.r03.s060_output/n100.r03.s060.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s060_output/n100.r03.s060.untrimmed.sorted.bam" -b "n100.r03.s060_output/n100.r03.s060.primers.bed" -p "n100.r03.s060_output/n100.r03.s060.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s060_output/n100.r03.s060.trimmed.sorted.bam" "n100.r03.s060_output/n100.r03.s060.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s060_output/n100.r03.s060.reference.fas" "n100.r03.s060_output/n100.r03.s060.trimmed.sorted.bam" > "n100.r03.s060_output/n100.r03.s060.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s060_output/n100.r03.s060.reference.fas" --call-indels "n100.r03.s060_output/n100.r03.s060.trimmed.sorted.bam" > "n100.r03.s060_output/n100.r03.s060.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s060_output/n100.r03.s060.trimmed.sorted.bam" > "n100.r03.s060_output/n100.r03.s060.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s060_output/n100.r03.s060.depth.txt" "n100.r03.s060_output/n100.r03.s060.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s060_output/n100.r03.s060.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s060_output/n100.r03.s060.reference.fas" | bcftools consensus -m "n100.r03.s060_output/n100.r03.s060.low_depth.tsv" tmp.vcf.gz > "n100.r03.s060_output/n100.r03.s060.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s060_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:28 scheduler task cc866163 (flow 7b73dcd0): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:28 scheduler task cc866163 (flow 7b73dcd0): waiting for completion (try 0): started
2021/07/08 16:44:28  ->  n100.r03.s093.Main.out_file 7b73dcd0 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:28 n100.r03.s093.Main.out_file 7b73dcd0 n100/r03/n100.r03.s093.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:cb4e83cc0a987fb6d89aa2180f337efa06f4a7b105f172352efe4a68a3723bd1
	sha256:7b73dcd075a8f19e4ed3f8d6b04f5470027e41256d134f8984a3f312e93199fe
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cc8661638508fce846a53afeda7fac2846633dc7ee5b1396a7dfefc798280c89
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s093_output"
	    wget -O "n100.r03.s093_output/n100.r03.s093.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s093_output/n100.r03.s093.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s093_output/n100.r03.s093.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s093_output/n100.r03.s093.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s093_output/n100.r03.s093.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s093_output/n100.r03.s093.reference.fas" "n100.r03.s093_output/n100.r03.s093.fq1.fastq" "n100.r03.s093_output/n100.r03.s093.fq2.fastq" | samtools view -bS - > "n100.r03.s093_output/n100.r03.s093.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s093_output/n100.r03.s093.untrimmed.sorted.bam" "n100.r03.s093_output/n100.r03.s093.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s093_output/n100.r03.s093.untrimmed.sorted.bam" -b "n100.r03.s093_output/n100.r03.s093.primers.bed" -p "n100.r03.s093_output/n100.r03.s093.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s093_output/n100.r03.s093.trimmed.sorted.bam" "n100.r03.s093_output/n100.r03.s093.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s093_output/n100.r03.s093.reference.fas" "n100.r03.s093_output/n100.r03.s093.trimmed.sorted.bam" > "n100.r03.s093_output/n100.r03.s093.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s093_output/n100.r03.s093.reference.fas" --call-indels "n100.r03.s093_output/n100.r03.s093.trimmed.sorted.bam" > "n100.r03.s093_output/n100.r03.s093.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s093_output/n100.r03.s093.trimmed.sorted.bam" > "n100.r03.s093_output/n100.r03.s093.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s093_output/n100.r03.s093.depth.txt" "n100.r03.s093_output/n100.r03.s093.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s093_output/n100.r03.s093.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s093_output/n100.r03.s093.reference.fas" | bcftools consensus -m "n100.r03.s093_output/n100.r03.s093.low_depth.tsv" tmp.vcf.gz > "n100.r03.s093_output/n100.r03.s093.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s093_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:28 scheduler task eb1b1e87 (flow eacb1e8b): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:28 scheduler task eb1b1e87 (flow eacb1e8b): waiting for completion (try 0): started
2021/07/08 16:44:28  ->  n100.r03.s087.Main.out_file eacb1e8b exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:28 n100.r03.s087.Main.out_file eacb1e8b n100/r03/n100.r03.s087.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:71bedd345546389962f3a910e456d8881eb0101bf26b532b49ba3fccb99e93ea
	sha256:eacb1e8bd547b7bae02662fb564409074e888876d44c5fdcb13756712f160f0f
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/eb1b1e879310ae4668a6ea9a95bafbc8d0248734b4cc8538f5510dfc5a903d40
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s087_output"
	    wget -O "n100.r03.s087_output/n100.r03.s087.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s087_output/n100.r03.s087.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s087_output/n100.r03.s087.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s087_output/n100.r03.s087.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s087_output/n100.r03.s087.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s087_output/n100.r03.s087.reference.fas" "n100.r03.s087_output/n100.r03.s087.fq1.fastq" "n100.r03.s087_output/n100.r03.s087.fq2.fastq" | samtools view -bS - > "n100.r03.s087_output/n100.r03.s087.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s087_output/n100.r03.s087.untrimmed.sorted.bam" "n100.r03.s087_output/n100.r03.s087.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s087_output/n100.r03.s087.untrimmed.sorted.bam" -b "n100.r03.s087_output/n100.r03.s087.primers.bed" -p "n100.r03.s087_output/n100.r03.s087.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s087_output/n100.r03.s087.trimmed.sorted.bam" "n100.r03.s087_output/n100.r03.s087.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s087_output/n100.r03.s087.reference.fas" "n100.r03.s087_output/n100.r03.s087.trimmed.sorted.bam" > "n100.r03.s087_output/n100.r03.s087.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s087_output/n100.r03.s087.reference.fas" --call-indels "n100.r03.s087_output/n100.r03.s087.trimmed.sorted.bam" > "n100.r03.s087_output/n100.r03.s087.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s087_output/n100.r03.s087.trimmed.sorted.bam" > "n100.r03.s087_output/n100.r03.s087.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s087_output/n100.r03.s087.depth.txt" "n100.r03.s087_output/n100.r03.s087.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s087_output/n100.r03.s087.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s087_output/n100.r03.s087.reference.fas" | bcftools consensus -m "n100.r03.s087_output/n100.r03.s087.low_depth.tsv" tmp.vcf.gz > "n100.r03.s087_output/n100.r03.s087.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s087_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:28 scheduler task 27604f83 (flow 1f71c589): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:28 scheduler task 27604f83 (flow 1f71c589): waiting for completion (try 0): started
2021/07/08 16:44:28  ->  n100.r03.s055.Main.out_file 1f71c589 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:28 n100.r03.s055.Main.out_file 1f71c589 n100/r03/n100.r03.s055.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:628fa48e68b2ccaaeb504dc4126176a133c93da5d1cfc762d9438d371dfff314
	sha256:1f71c589b42d15a7925901ea72bc9dcb70dff995416aaf7ff91729c8c8e965b9
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/27604f83bed4712a1b4fa3ea9c427a3bfece08aaf771f380221eeb5aad48d9dd
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s055_output"
	    wget -O "n100.r03.s055_output/n100.r03.s055.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s055_output/n100.r03.s055.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s055_output/n100.r03.s055.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s055_output/n100.r03.s055.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s055_output/n100.r03.s055.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s055_output/n100.r03.s055.reference.fas" "n100.r03.s055_output/n100.r03.s055.fq1.fastq" "n100.r03.s055_output/n100.r03.s055.fq2.fastq" | samtools view -bS - > "n100.r03.s055_output/n100.r03.s055.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s055_output/n100.r03.s055.untrimmed.sorted.bam" "n100.r03.s055_output/n100.r03.s055.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s055_output/n100.r03.s055.untrimmed.sorted.bam" -b "n100.r03.s055_output/n100.r03.s055.primers.bed" -p "n100.r03.s055_output/n100.r03.s055.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s055_output/n100.r03.s055.trimmed.sorted.bam" "n100.r03.s055_output/n100.r03.s055.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s055_output/n100.r03.s055.reference.fas" "n100.r03.s055_output/n100.r03.s055.trimmed.sorted.bam" > "n100.r03.s055_output/n100.r03.s055.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s055_output/n100.r03.s055.reference.fas" --call-indels "n100.r03.s055_output/n100.r03.s055.trimmed.sorted.bam" > "n100.r03.s055_output/n100.r03.s055.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s055_output/n100.r03.s055.trimmed.sorted.bam" > "n100.r03.s055_output/n100.r03.s055.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s055_output/n100.r03.s055.depth.txt" "n100.r03.s055_output/n100.r03.s055.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s055_output/n100.r03.s055.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s055_output/n100.r03.s055.reference.fas" | bcftools consensus -m "n100.r03.s055_output/n100.r03.s055.low_depth.tsv" tmp.vcf.gz > "n100.r03.s055_output/n100.r03.s055.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s055_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:28 scheduler task 13345758 (flow d19b125a): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:28 scheduler task 13345758 (flow d19b125a): waiting for completion (try 0): started
2021/07/08 16:44:28  ->  n100.r03.s056.Main.out_file d19b125a exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:28 n100.r03.s056.Main.out_file d19b125a n100/r03/n100.r03.s056.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8eb17cc1e3c0a5060ad6099a016e4c4744363a7d9cda0690d6b339be3b94166f
	sha256:d19b125a8964fc8262608d3543eb8a431c23b17dc197c2c8b2dc98090ff041f2
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/133457588da65c11fc1d2def18f477ae4708af193012cfd64d5c87db0e27d137
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s056_output"
	    wget -O "n100.r03.s056_output/n100.r03.s056.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s056_output/n100.r03.s056.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s056_output/n100.r03.s056.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s056_output/n100.r03.s056.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s056_output/n100.r03.s056.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s056_output/n100.r03.s056.reference.fas" "n100.r03.s056_output/n100.r03.s056.fq1.fastq" "n100.r03.s056_output/n100.r03.s056.fq2.fastq" | samtools view -bS - > "n100.r03.s056_output/n100.r03.s056.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s056_output/n100.r03.s056.untrimmed.sorted.bam" "n100.r03.s056_output/n100.r03.s056.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s056_output/n100.r03.s056.untrimmed.sorted.bam" -b "n100.r03.s056_output/n100.r03.s056.primers.bed" -p "n100.r03.s056_output/n100.r03.s056.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s056_output/n100.r03.s056.trimmed.sorted.bam" "n100.r03.s056_output/n100.r03.s056.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s056_output/n100.r03.s056.reference.fas" "n100.r03.s056_output/n100.r03.s056.trimmed.sorted.bam" > "n100.r03.s056_output/n100.r03.s056.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s056_output/n100.r03.s056.reference.fas" --call-indels "n100.r03.s056_output/n100.r03.s056.trimmed.sorted.bam" > "n100.r03.s056_output/n100.r03.s056.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s056_output/n100.r03.s056.trimmed.sorted.bam" > "n100.r03.s056_output/n100.r03.s056.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s056_output/n100.r03.s056.depth.txt" "n100.r03.s056_output/n100.r03.s056.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s056_output/n100.r03.s056.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s056_output/n100.r03.s056.reference.fas" | bcftools consensus -m "n100.r03.s056_output/n100.r03.s056.low_depth.tsv" tmp.vcf.gz > "n100.r03.s056_output/n100.r03.s056.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s056_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:28 scheduler task 5a370c3c (flow f85ec8d5): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:28 scheduler task 5a370c3c (flow f85ec8d5): waiting for completion (try 0): started
2021/07/08 16:44:28  ->  n100.r03.s006.Main.out_file f85ec8d5 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:28 n100.r03.s006.Main.out_file f85ec8d5 n100/r03/n100.r03.s006.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f578f4294543a79c9638cfaae7878403bece34c19b2551e3b21b9ba8e66acc7e
	sha256:f85ec8d593eda5a2d5972ed6fb217f75ff03a62728513bf0bfb23d5953a4abc0
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5a370c3c297f3ddb75afd39412f61b05793f9f050e3dba2dabe317889dd173c2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s006_output"
	    wget -O "n100.r03.s006_output/n100.r03.s006.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s006_output/n100.r03.s006.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s006_output/n100.r03.s006.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s006_output/n100.r03.s006.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s006_output/n100.r03.s006.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s006_output/n100.r03.s006.reference.fas" "n100.r03.s006_output/n100.r03.s006.fq1.fastq" "n100.r03.s006_output/n100.r03.s006.fq2.fastq" | samtools view -bS - > "n100.r03.s006_output/n100.r03.s006.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s006_output/n100.r03.s006.untrimmed.sorted.bam" "n100.r03.s006_output/n100.r03.s006.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s006_output/n100.r03.s006.untrimmed.sorted.bam" -b "n100.r03.s006_output/n100.r03.s006.primers.bed" -p "n100.r03.s006_output/n100.r03.s006.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s006_output/n100.r03.s006.trimmed.sorted.bam" "n100.r03.s006_output/n100.r03.s006.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s006_output/n100.r03.s006.reference.fas" "n100.r03.s006_output/n100.r03.s006.trimmed.sorted.bam" > "n100.r03.s006_output/n100.r03.s006.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s006_output/n100.r03.s006.reference.fas" --call-indels "n100.r03.s006_output/n100.r03.s006.trimmed.sorted.bam" > "n100.r03.s006_output/n100.r03.s006.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s006_output/n100.r03.s006.trimmed.sorted.bam" > "n100.r03.s006_output/n100.r03.s006.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s006_output/n100.r03.s006.depth.txt" "n100.r03.s006_output/n100.r03.s006.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s006_output/n100.r03.s006.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s006_output/n100.r03.s006.reference.fas" | bcftools consensus -m "n100.r03.s006_output/n100.r03.s006.low_depth.tsv" tmp.vcf.gz > "n100.r03.s006_output/n100.r03.s006.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s006_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:28 scheduler task bc51d36b (flow 29867b33): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:28 scheduler task bc51d36b (flow 29867b33): waiting for completion (try 0): started
2021/07/08 16:44:28  ->  n100.r03.s013.Main.out_file 29867b33 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:28 n100.r03.s013.Main.out_file 29867b33 n100/r03/n100.r03.s013.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b5ebacec4adc44dfa3ee0a6b611cbbb7bd50d377a32385fb58b2b639cc4991c7
	sha256:29867b3351cafda60e810a8c375344fd0d2d507069a80ef30b55cde16ea7aa3c
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bc51d36bc3ef683912ab2b9b07db7e07dda6fb973d62ca5968403e4f4784f01f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s013_output"
	    wget -O "n100.r03.s013_output/n100.r03.s013.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s013_output/n100.r03.s013.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s013_output/n100.r03.s013.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s013_output/n100.r03.s013.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s013_output/n100.r03.s013.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s013_output/n100.r03.s013.reference.fas" "n100.r03.s013_output/n100.r03.s013.fq1.fastq" "n100.r03.s013_output/n100.r03.s013.fq2.fastq" | samtools view -bS - > "n100.r03.s013_output/n100.r03.s013.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s013_output/n100.r03.s013.untrimmed.sorted.bam" "n100.r03.s013_output/n100.r03.s013.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s013_output/n100.r03.s013.untrimmed.sorted.bam" -b "n100.r03.s013_output/n100.r03.s013.primers.bed" -p "n100.r03.s013_output/n100.r03.s013.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s013_output/n100.r03.s013.trimmed.sorted.bam" "n100.r03.s013_output/n100.r03.s013.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s013_output/n100.r03.s013.reference.fas" "n100.r03.s013_output/n100.r03.s013.trimmed.sorted.bam" > "n100.r03.s013_output/n100.r03.s013.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s013_output/n100.r03.s013.reference.fas" --call-indels "n100.r03.s013_output/n100.r03.s013.trimmed.sorted.bam" > "n100.r03.s013_output/n100.r03.s013.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s013_output/n100.r03.s013.trimmed.sorted.bam" > "n100.r03.s013_output/n100.r03.s013.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s013_output/n100.r03.s013.depth.txt" "n100.r03.s013_output/n100.r03.s013.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s013_output/n100.r03.s013.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s013_output/n100.r03.s013.reference.fas" | bcftools consensus -m "n100.r03.s013_output/n100.r03.s013.low_depth.tsv" tmp.vcf.gz > "n100.r03.s013_output/n100.r03.s013.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s013_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:28 scheduler task 27950794 (flow 1e078488): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:28 scheduler task 27950794 (flow 1e078488): waiting for completion (try 0): started
2021/07/08 16:44:28  ->  n100.r03.s037.Main.out_file 1e078488 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:28 n100.r03.s037.Main.out_file 1e078488 n100/r03/n100.r03.s037.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1754f0666eaa2729f8593c22f8b6307e45a93448fd5e58e1fc867d75a8a6ab87
	sha256:1e07848803b2839c1d755741b60b83dc749944d777b828d6637ff16f061da61f
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/27950794e8ba3154e6ae1bf3a1a7a9ba8e430b96beb6b1582a8adf4af071484f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s037_output"
	    wget -O "n100.r03.s037_output/n100.r03.s037.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s037_output/n100.r03.s037.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s037_output/n100.r03.s037.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s037_output/n100.r03.s037.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s037_output/n100.r03.s037.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s037_output/n100.r03.s037.reference.fas" "n100.r03.s037_output/n100.r03.s037.fq1.fastq" "n100.r03.s037_output/n100.r03.s037.fq2.fastq" | samtools view -bS - > "n100.r03.s037_output/n100.r03.s037.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s037_output/n100.r03.s037.untrimmed.sorted.bam" "n100.r03.s037_output/n100.r03.s037.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s037_output/n100.r03.s037.untrimmed.sorted.bam" -b "n100.r03.s037_output/n100.r03.s037.primers.bed" -p "n100.r03.s037_output/n100.r03.s037.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s037_output/n100.r03.s037.trimmed.sorted.bam" "n100.r03.s037_output/n100.r03.s037.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s037_output/n100.r03.s037.reference.fas" "n100.r03.s037_output/n100.r03.s037.trimmed.sorted.bam" > "n100.r03.s037_output/n100.r03.s037.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s037_output/n100.r03.s037.reference.fas" --call-indels "n100.r03.s037_output/n100.r03.s037.trimmed.sorted.bam" > "n100.r03.s037_output/n100.r03.s037.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s037_output/n100.r03.s037.trimmed.sorted.bam" > "n100.r03.s037_output/n100.r03.s037.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s037_output/n100.r03.s037.depth.txt" "n100.r03.s037_output/n100.r03.s037.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s037_output/n100.r03.s037.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s037_output/n100.r03.s037.reference.fas" | bcftools consensus -m "n100.r03.s037_output/n100.r03.s037.low_depth.tsv" tmp.vcf.gz > "n100.r03.s037_output/n100.r03.s037.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s037_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:29 scheduler task c63135f5 (flow b89df6be): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:29 scheduler task c63135f5 (flow b89df6be): waiting for completion (try 0): started
2021/07/08 16:44:29  ->  n100.r03.s090.Main.out_file b89df6be exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:29 n100.r03.s090.Main.out_file b89df6be n100/r03/n100.r03.s090.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:721e3662c35859ce696ef89d8ae43a200f925b2794f9ec635231640686b95034
	sha256:b89df6bea53bf4d544e6ad1cd37045bfb90934326cb8d06b4e973d14e88f4663
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c63135f5bd76bd3acdcf0662e20229e65d9193e6f1ed328da0f8f338da8d53aa
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s090_output"
	    wget -O "n100.r03.s090_output/n100.r03.s090.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s090_output/n100.r03.s090.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s090_output/n100.r03.s090.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s090_output/n100.r03.s090.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s090_output/n100.r03.s090.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s090_output/n100.r03.s090.reference.fas" "n100.r03.s090_output/n100.r03.s090.fq1.fastq" "n100.r03.s090_output/n100.r03.s090.fq2.fastq" | samtools view -bS - > "n100.r03.s090_output/n100.r03.s090.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s090_output/n100.r03.s090.untrimmed.sorted.bam" "n100.r03.s090_output/n100.r03.s090.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s090_output/n100.r03.s090.untrimmed.sorted.bam" -b "n100.r03.s090_output/n100.r03.s090.primers.bed" -p "n100.r03.s090_output/n100.r03.s090.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s090_output/n100.r03.s090.trimmed.sorted.bam" "n100.r03.s090_output/n100.r03.s090.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s090_output/n100.r03.s090.reference.fas" "n100.r03.s090_output/n100.r03.s090.trimmed.sorted.bam" > "n100.r03.s090_output/n100.r03.s090.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s090_output/n100.r03.s090.reference.fas" --call-indels "n100.r03.s090_output/n100.r03.s090.trimmed.sorted.bam" > "n100.r03.s090_output/n100.r03.s090.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s090_output/n100.r03.s090.trimmed.sorted.bam" > "n100.r03.s090_output/n100.r03.s090.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s090_output/n100.r03.s090.depth.txt" "n100.r03.s090_output/n100.r03.s090.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s090_output/n100.r03.s090.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s090_output/n100.r03.s090.reference.fas" | bcftools consensus -m "n100.r03.s090_output/n100.r03.s090.low_depth.tsv" tmp.vcf.gz > "n100.r03.s090_output/n100.r03.s090.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s090_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:29 scheduler task cffdf651 (flow 46b547c0): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:29 scheduler task cffdf651 (flow 46b547c0): waiting for completion (try 0): started
2021/07/08 16:44:29  ->  n100.r03.s097.Main.out_file 46b547c0 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:29 n100.r03.s097.Main.out_file 46b547c0 n100/r03/n100.r03.s097.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:67f4bfd37ae71baa98eeca6b1afcae39ce2de52a9b1057350094a500582273c2
	sha256:46b547c04e1dce78f253f78e1b39f1e3ac334412fd85370704e29f9bafd84ae5
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cffdf651757048b1b2bfef702e1e08a5c5c0c9718286bf7ef6d5cf293fbe653e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s097_output"
	    wget -O "n100.r03.s097_output/n100.r03.s097.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s097_output/n100.r03.s097.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s097_output/n100.r03.s097.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s097_output/n100.r03.s097.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s097_output/n100.r03.s097.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s097_output/n100.r03.s097.reference.fas" "n100.r03.s097_output/n100.r03.s097.fq1.fastq" "n100.r03.s097_output/n100.r03.s097.fq2.fastq" | samtools view -bS - > "n100.r03.s097_output/n100.r03.s097.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s097_output/n100.r03.s097.untrimmed.sorted.bam" "n100.r03.s097_output/n100.r03.s097.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s097_output/n100.r03.s097.untrimmed.sorted.bam" -b "n100.r03.s097_output/n100.r03.s097.primers.bed" -p "n100.r03.s097_output/n100.r03.s097.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s097_output/n100.r03.s097.trimmed.sorted.bam" "n100.r03.s097_output/n100.r03.s097.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s097_output/n100.r03.s097.reference.fas" "n100.r03.s097_output/n100.r03.s097.trimmed.sorted.bam" > "n100.r03.s097_output/n100.r03.s097.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s097_output/n100.r03.s097.reference.fas" --call-indels "n100.r03.s097_output/n100.r03.s097.trimmed.sorted.bam" > "n100.r03.s097_output/n100.r03.s097.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s097_output/n100.r03.s097.trimmed.sorted.bam" > "n100.r03.s097_output/n100.r03.s097.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s097_output/n100.r03.s097.depth.txt" "n100.r03.s097_output/n100.r03.s097.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s097_output/n100.r03.s097.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s097_output/n100.r03.s097.reference.fas" | bcftools consensus -m "n100.r03.s097_output/n100.r03.s097.low_depth.tsv" tmp.vcf.gz > "n100.r03.s097_output/n100.r03.s097.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s097_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:29 scheduler task 60be6b51 (flow a0f712d0): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:29 scheduler task 60be6b51 (flow a0f712d0): waiting for completion (try 0): started
2021/07/08 16:44:29  ->  n100.r03.s048.Main.out_file a0f712d0 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:29 n100.r03.s048.Main.out_file a0f712d0 n100/r03/n100.r03.s048.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:70dbee780a2166e2db5080eb3a6b38f36bdf860c7a037d57ba62b8f8a16a2fb9
	sha256:a0f712d0bad8c2dd608f92971435c2b999242080cf82a8c896e41cd87a0b0123
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/60be6b51b84b425b1fdc59c0a1d72cb11af21fd57182db5eb2d4b4ec84760259
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s048_output"
	    wget -O "n100.r03.s048_output/n100.r03.s048.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s048_output/n100.r03.s048.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s048_output/n100.r03.s048.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s048_output/n100.r03.s048.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s048_output/n100.r03.s048.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s048_output/n100.r03.s048.reference.fas" "n100.r03.s048_output/n100.r03.s048.fq1.fastq" "n100.r03.s048_output/n100.r03.s048.fq2.fastq" | samtools view -bS - > "n100.r03.s048_output/n100.r03.s048.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s048_output/n100.r03.s048.untrimmed.sorted.bam" "n100.r03.s048_output/n100.r03.s048.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s048_output/n100.r03.s048.untrimmed.sorted.bam" -b "n100.r03.s048_output/n100.r03.s048.primers.bed" -p "n100.r03.s048_output/n100.r03.s048.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s048_output/n100.r03.s048.trimmed.sorted.bam" "n100.r03.s048_output/n100.r03.s048.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s048_output/n100.r03.s048.reference.fas" "n100.r03.s048_output/n100.r03.s048.trimmed.sorted.bam" > "n100.r03.s048_output/n100.r03.s048.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s048_output/n100.r03.s048.reference.fas" --call-indels "n100.r03.s048_output/n100.r03.s048.trimmed.sorted.bam" > "n100.r03.s048_output/n100.r03.s048.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s048_output/n100.r03.s048.trimmed.sorted.bam" > "n100.r03.s048_output/n100.r03.s048.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s048_output/n100.r03.s048.depth.txt" "n100.r03.s048_output/n100.r03.s048.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s048_output/n100.r03.s048.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s048_output/n100.r03.s048.reference.fas" | bcftools consensus -m "n100.r03.s048_output/n100.r03.s048.low_depth.tsv" tmp.vcf.gz > "n100.r03.s048_output/n100.r03.s048.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s048_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:29 scheduler task 4396f600 (flow e90de21c): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:29 scheduler task 4396f600 (flow e90de21c): waiting for completion (try 0): started
2021/07/08 16:44:29  ->  n100.r03.s035.Main.out_file e90de21c exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:29 n100.r03.s035.Main.out_file e90de21c n100/r03/n100.r03.s035.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a769419d9aae5676baabef4be78e5ec70238f18efe23274955886a333b9a3621
	sha256:e90de21c991d3b0d59c4047a7799cb3ed5c4771aaad7bf5226661828b4a9534a
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4396f6009cdee6035aa9634cf5eae40832a63c1b1eb64dd9e9ba1e1ab6cb025e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s035_output"
	    wget -O "n100.r03.s035_output/n100.r03.s035.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s035_output/n100.r03.s035.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s035_output/n100.r03.s035.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s035_output/n100.r03.s035.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s035_output/n100.r03.s035.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s035_output/n100.r03.s035.reference.fas" "n100.r03.s035_output/n100.r03.s035.fq1.fastq" "n100.r03.s035_output/n100.r03.s035.fq2.fastq" | samtools view -bS - > "n100.r03.s035_output/n100.r03.s035.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s035_output/n100.r03.s035.untrimmed.sorted.bam" "n100.r03.s035_output/n100.r03.s035.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s035_output/n100.r03.s035.untrimmed.sorted.bam" -b "n100.r03.s035_output/n100.r03.s035.primers.bed" -p "n100.r03.s035_output/n100.r03.s035.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s035_output/n100.r03.s035.trimmed.sorted.bam" "n100.r03.s035_output/n100.r03.s035.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s035_output/n100.r03.s035.reference.fas" "n100.r03.s035_output/n100.r03.s035.trimmed.sorted.bam" > "n100.r03.s035_output/n100.r03.s035.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s035_output/n100.r03.s035.reference.fas" --call-indels "n100.r03.s035_output/n100.r03.s035.trimmed.sorted.bam" > "n100.r03.s035_output/n100.r03.s035.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s035_output/n100.r03.s035.trimmed.sorted.bam" > "n100.r03.s035_output/n100.r03.s035.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s035_output/n100.r03.s035.depth.txt" "n100.r03.s035_output/n100.r03.s035.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s035_output/n100.r03.s035.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s035_output/n100.r03.s035.reference.fas" | bcftools consensus -m "n100.r03.s035_output/n100.r03.s035.low_depth.tsv" tmp.vcf.gz > "n100.r03.s035_output/n100.r03.s035.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s035_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:29 scheduler task cb3be4a9 (flow 7f1435b4): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:29 scheduler task cb3be4a9 (flow 7f1435b4): waiting for completion (try 0): started
2021/07/08 16:44:29  ->  n100.r03.s017.Main.out_file 7f1435b4 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:29 n100.r03.s017.Main.out_file 7f1435b4 n100/r03/n100.r03.s017.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7af74b220cb9a030b9614ebdf6544c2b870116ca219772c18e4a36d700031e40
	sha256:7f1435b4d62a7c5f38a5c91e54b6fba6ffd0118b5e4b0f294db785f15f654f44
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cb3be4a9668f2a11f02fc67e51b1ca481051223f0751e0a38d13d621c859ef96
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s017_output"
	    wget -O "n100.r03.s017_output/n100.r03.s017.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s017_output/n100.r03.s017.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s017_output/n100.r03.s017.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s017_output/n100.r03.s017.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s017_output/n100.r03.s017.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s017_output/n100.r03.s017.reference.fas" "n100.r03.s017_output/n100.r03.s017.fq1.fastq" "n100.r03.s017_output/n100.r03.s017.fq2.fastq" | samtools view -bS - > "n100.r03.s017_output/n100.r03.s017.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s017_output/n100.r03.s017.untrimmed.sorted.bam" "n100.r03.s017_output/n100.r03.s017.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s017_output/n100.r03.s017.untrimmed.sorted.bam" -b "n100.r03.s017_output/n100.r03.s017.primers.bed" -p "n100.r03.s017_output/n100.r03.s017.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s017_output/n100.r03.s017.trimmed.sorted.bam" "n100.r03.s017_output/n100.r03.s017.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s017_output/n100.r03.s017.reference.fas" "n100.r03.s017_output/n100.r03.s017.trimmed.sorted.bam" > "n100.r03.s017_output/n100.r03.s017.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s017_output/n100.r03.s017.reference.fas" --call-indels "n100.r03.s017_output/n100.r03.s017.trimmed.sorted.bam" > "n100.r03.s017_output/n100.r03.s017.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s017_output/n100.r03.s017.trimmed.sorted.bam" > "n100.r03.s017_output/n100.r03.s017.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s017_output/n100.r03.s017.depth.txt" "n100.r03.s017_output/n100.r03.s017.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s017_output/n100.r03.s017.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s017_output/n100.r03.s017.reference.fas" | bcftools consensus -m "n100.r03.s017_output/n100.r03.s017.low_depth.tsv" tmp.vcf.gz > "n100.r03.s017_output/n100.r03.s017.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s017_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:29 scheduler task 7a62ec14 (flow e8c1c4e4): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:29 scheduler task 7a62ec14 (flow e8c1c4e4): waiting for completion (try 0): started
2021/07/08 16:44:29  ->  n100.r03.s044.Main.out_file e8c1c4e4 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:29 n100.r03.s044.Main.out_file e8c1c4e4 n100/r03/n100.r03.s044.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:37d09670fcc978aec1a464e3304e88224e9ca6136528cbf762e2336da0a8da50
	sha256:e8c1c4e4632b8ee5cbf9317ebd2fbe962a6d63110bd5223aff6dac8787164cb1
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7a62ec14bf01af1ab03bf2eaee92f3ddac440a46a6eab488164f26ddd1a06633
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s044_output"
	    wget -O "n100.r03.s044_output/n100.r03.s044.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s044_output/n100.r03.s044.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s044_output/n100.r03.s044.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s044_output/n100.r03.s044.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s044_output/n100.r03.s044.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s044_output/n100.r03.s044.reference.fas" "n100.r03.s044_output/n100.r03.s044.fq1.fastq" "n100.r03.s044_output/n100.r03.s044.fq2.fastq" | samtools view -bS - > "n100.r03.s044_output/n100.r03.s044.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s044_output/n100.r03.s044.untrimmed.sorted.bam" "n100.r03.s044_output/n100.r03.s044.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s044_output/n100.r03.s044.untrimmed.sorted.bam" -b "n100.r03.s044_output/n100.r03.s044.primers.bed" -p "n100.r03.s044_output/n100.r03.s044.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s044_output/n100.r03.s044.trimmed.sorted.bam" "n100.r03.s044_output/n100.r03.s044.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s044_output/n100.r03.s044.reference.fas" "n100.r03.s044_output/n100.r03.s044.trimmed.sorted.bam" > "n100.r03.s044_output/n100.r03.s044.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s044_output/n100.r03.s044.reference.fas" --call-indels "n100.r03.s044_output/n100.r03.s044.trimmed.sorted.bam" > "n100.r03.s044_output/n100.r03.s044.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s044_output/n100.r03.s044.trimmed.sorted.bam" > "n100.r03.s044_output/n100.r03.s044.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s044_output/n100.r03.s044.depth.txt" "n100.r03.s044_output/n100.r03.s044.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s044_output/n100.r03.s044.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s044_output/n100.r03.s044.reference.fas" | bcftools consensus -m "n100.r03.s044_output/n100.r03.s044.low_depth.tsv" tmp.vcf.gz > "n100.r03.s044_output/n100.r03.s044.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s044_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:29 scheduler task 70fc136d (flow 3be0544d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:30 scheduler task 70fc136d (flow 3be0544d): waiting for completion (try 0): started
2021/07/08 16:44:30  ->  n100.r03.s024.Main.out_file 3be0544d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:30 n100.r03.s024.Main.out_file 3be0544d n100/r03/n100.r03.s024.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:69d16fa164f9dd238708c39124d0ba16a3591d9548da2d4e7697346cf75417b8
	sha256:3be0544d08d8e10468e9bf299308123850e12ba66cb17fccdd26b72647d7a893
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/70fc136d12810a350dd36631d280ede4bbaec87c58c5a4672d9696985c464e2e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s024_output"
	    wget -O "n100.r03.s024_output/n100.r03.s024.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s024_output/n100.r03.s024.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s024_output/n100.r03.s024.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s024_output/n100.r03.s024.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s024_output/n100.r03.s024.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s024_output/n100.r03.s024.reference.fas" "n100.r03.s024_output/n100.r03.s024.fq1.fastq" "n100.r03.s024_output/n100.r03.s024.fq2.fastq" | samtools view -bS - > "n100.r03.s024_output/n100.r03.s024.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s024_output/n100.r03.s024.untrimmed.sorted.bam" "n100.r03.s024_output/n100.r03.s024.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s024_output/n100.r03.s024.untrimmed.sorted.bam" -b "n100.r03.s024_output/n100.r03.s024.primers.bed" -p "n100.r03.s024_output/n100.r03.s024.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s024_output/n100.r03.s024.trimmed.sorted.bam" "n100.r03.s024_output/n100.r03.s024.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s024_output/n100.r03.s024.reference.fas" "n100.r03.s024_output/n100.r03.s024.trimmed.sorted.bam" > "n100.r03.s024_output/n100.r03.s024.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s024_output/n100.r03.s024.reference.fas" --call-indels "n100.r03.s024_output/n100.r03.s024.trimmed.sorted.bam" > "n100.r03.s024_output/n100.r03.s024.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s024_output/n100.r03.s024.trimmed.sorted.bam" > "n100.r03.s024_output/n100.r03.s024.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s024_output/n100.r03.s024.depth.txt" "n100.r03.s024_output/n100.r03.s024.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s024_output/n100.r03.s024.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s024_output/n100.r03.s024.reference.fas" | bcftools consensus -m "n100.r03.s024_output/n100.r03.s024.low_depth.tsv" tmp.vcf.gz > "n100.r03.s024_output/n100.r03.s024.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s024_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:30 scheduler task 5a0c62bc (flow 2cec23de): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:30 scheduler task 5a0c62bc (flow 2cec23de): waiting for completion (try 0): started
2021/07/08 16:44:30  ->  n100.r03.s042.Main.out_file 2cec23de exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:30 n100.r03.s042.Main.out_file 2cec23de n100/r03/n100.r03.s042.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:36b9a2ca973396ff76c996cdfbd1fd2c70fd27db2fcff9e1fa198134eda14a61
	sha256:2cec23de6da1bb0cce54c1582f626927c59b522b82c25035d70509a5b15c1934
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5a0c62bc226608c5293ac26c58dad9a630241a898bfae44fe06f1fc16d63b0ce
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s042_output"
	    wget -O "n100.r03.s042_output/n100.r03.s042.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s042_output/n100.r03.s042.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s042_output/n100.r03.s042.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s042_output/n100.r03.s042.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s042_output/n100.r03.s042.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s042_output/n100.r03.s042.reference.fas" "n100.r03.s042_output/n100.r03.s042.fq1.fastq" "n100.r03.s042_output/n100.r03.s042.fq2.fastq" | samtools view -bS - > "n100.r03.s042_output/n100.r03.s042.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s042_output/n100.r03.s042.untrimmed.sorted.bam" "n100.r03.s042_output/n100.r03.s042.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s042_output/n100.r03.s042.untrimmed.sorted.bam" -b "n100.r03.s042_output/n100.r03.s042.primers.bed" -p "n100.r03.s042_output/n100.r03.s042.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s042_output/n100.r03.s042.trimmed.sorted.bam" "n100.r03.s042_output/n100.r03.s042.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s042_output/n100.r03.s042.reference.fas" "n100.r03.s042_output/n100.r03.s042.trimmed.sorted.bam" > "n100.r03.s042_output/n100.r03.s042.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s042_output/n100.r03.s042.reference.fas" --call-indels "n100.r03.s042_output/n100.r03.s042.trimmed.sorted.bam" > "n100.r03.s042_output/n100.r03.s042.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s042_output/n100.r03.s042.trimmed.sorted.bam" > "n100.r03.s042_output/n100.r03.s042.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s042_output/n100.r03.s042.depth.txt" "n100.r03.s042_output/n100.r03.s042.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s042_output/n100.r03.s042.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s042_output/n100.r03.s042.reference.fas" | bcftools consensus -m "n100.r03.s042_output/n100.r03.s042.low_depth.tsv" tmp.vcf.gz > "n100.r03.s042_output/n100.r03.s042.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s042_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:30 scheduler task 6c9931f7 (flow 84fe3b5f): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:30 scheduler task 6c9931f7 (flow 84fe3b5f): waiting for completion (try 0): started
2021/07/08 16:44:30  ->  n100.r03.s065.Main.out_file 84fe3b5f exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:30 n100.r03.s065.Main.out_file 84fe3b5f n100/r03/n100.r03.s065.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fc8b8ac9e612c57fef644b3c78622f6e4d4d27be102dbc8b589debfaa76d43e5
	sha256:84fe3b5f7c6e4b8136c0a7bb2fa8bfe56263e4d5da4080384fabd8f89bb27f16
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6c9931f75a6cfcc252bbac229ff4c6bdd47bb34db15d72003c29f18c2a4ab260
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s065_output"
	    wget -O "n100.r03.s065_output/n100.r03.s065.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s065_output/n100.r03.s065.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s065_output/n100.r03.s065.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s065_output/n100.r03.s065.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s065_output/n100.r03.s065.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s065_output/n100.r03.s065.reference.fas" "n100.r03.s065_output/n100.r03.s065.fq1.fastq" "n100.r03.s065_output/n100.r03.s065.fq2.fastq" | samtools view -bS - > "n100.r03.s065_output/n100.r03.s065.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s065_output/n100.r03.s065.untrimmed.sorted.bam" "n100.r03.s065_output/n100.r03.s065.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s065_output/n100.r03.s065.untrimmed.sorted.bam" -b "n100.r03.s065_output/n100.r03.s065.primers.bed" -p "n100.r03.s065_output/n100.r03.s065.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s065_output/n100.r03.s065.trimmed.sorted.bam" "n100.r03.s065_output/n100.r03.s065.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s065_output/n100.r03.s065.reference.fas" "n100.r03.s065_output/n100.r03.s065.trimmed.sorted.bam" > "n100.r03.s065_output/n100.r03.s065.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s065_output/n100.r03.s065.reference.fas" --call-indels "n100.r03.s065_output/n100.r03.s065.trimmed.sorted.bam" > "n100.r03.s065_output/n100.r03.s065.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s065_output/n100.r03.s065.trimmed.sorted.bam" > "n100.r03.s065_output/n100.r03.s065.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s065_output/n100.r03.s065.depth.txt" "n100.r03.s065_output/n100.r03.s065.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s065_output/n100.r03.s065.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s065_output/n100.r03.s065.reference.fas" | bcftools consensus -m "n100.r03.s065_output/n100.r03.s065.low_depth.tsv" tmp.vcf.gz > "n100.r03.s065_output/n100.r03.s065.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s065_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:30 scheduler task bffb2e9f (flow f9db9957): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:30 scheduler task bffb2e9f (flow f9db9957): waiting for completion (try 0): started
2021/07/08 16:44:30  ->  n100.r03.s029.Main.out_file f9db9957 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:30 n100.r03.s029.Main.out_file f9db9957 n100/r03/n100.r03.s029.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:cebf9527cdde3c2163dfcdfa5bd7597359a2e21c3505dbac6019e336b02db979
	sha256:f9db995706b314123d2f70922d4f0015e62ba47e747328894cdedc5231d28b3b
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bffb2e9f44884c77bb3171fcd8aa920295c25c79326f8a8e8c747ff74b22b4be
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s029_output"
	    wget -O "n100.r03.s029_output/n100.r03.s029.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s029_output/n100.r03.s029.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s029_output/n100.r03.s029.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s029_output/n100.r03.s029.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s029_output/n100.r03.s029.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s029_output/n100.r03.s029.reference.fas" "n100.r03.s029_output/n100.r03.s029.fq1.fastq" "n100.r03.s029_output/n100.r03.s029.fq2.fastq" | samtools view -bS - > "n100.r03.s029_output/n100.r03.s029.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s029_output/n100.r03.s029.untrimmed.sorted.bam" "n100.r03.s029_output/n100.r03.s029.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s029_output/n100.r03.s029.untrimmed.sorted.bam" -b "n100.r03.s029_output/n100.r03.s029.primers.bed" -p "n100.r03.s029_output/n100.r03.s029.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s029_output/n100.r03.s029.trimmed.sorted.bam" "n100.r03.s029_output/n100.r03.s029.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s029_output/n100.r03.s029.reference.fas" "n100.r03.s029_output/n100.r03.s029.trimmed.sorted.bam" > "n100.r03.s029_output/n100.r03.s029.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s029_output/n100.r03.s029.reference.fas" --call-indels "n100.r03.s029_output/n100.r03.s029.trimmed.sorted.bam" > "n100.r03.s029_output/n100.r03.s029.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s029_output/n100.r03.s029.trimmed.sorted.bam" > "n100.r03.s029_output/n100.r03.s029.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s029_output/n100.r03.s029.depth.txt" "n100.r03.s029_output/n100.r03.s029.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s029_output/n100.r03.s029.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s029_output/n100.r03.s029.reference.fas" | bcftools consensus -m "n100.r03.s029_output/n100.r03.s029.low_depth.tsv" tmp.vcf.gz > "n100.r03.s029_output/n100.r03.s029.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s029_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:30 scheduler task 79b42f3c (flow 250ebac9): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:30 scheduler task 79b42f3c (flow 250ebac9): waiting for completion (try 0): started
2021/07/08 16:44:30  ->  n100.r03.s045.Main.out_file 250ebac9 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:30 n100.r03.s045.Main.out_file 250ebac9 n100/r03/n100.r03.s045.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c675467c2162ceccd4e46b110d0e0688fae89074753a1de8337270a1f32ca658
	sha256:250ebac9a75adb3c23049a538c9b9209882f93a265db0e34e11642e5c2b25125
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/79b42f3c8e48c15da33b4680543c5d813de5200642bbdf1e466c30e466f501bf
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s045_output"
	    wget -O "n100.r03.s045_output/n100.r03.s045.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s045_output/n100.r03.s045.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s045_output/n100.r03.s045.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s045_output/n100.r03.s045.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s045_output/n100.r03.s045.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s045_output/n100.r03.s045.reference.fas" "n100.r03.s045_output/n100.r03.s045.fq1.fastq" "n100.r03.s045_output/n100.r03.s045.fq2.fastq" | samtools view -bS - > "n100.r03.s045_output/n100.r03.s045.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s045_output/n100.r03.s045.untrimmed.sorted.bam" "n100.r03.s045_output/n100.r03.s045.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s045_output/n100.r03.s045.untrimmed.sorted.bam" -b "n100.r03.s045_output/n100.r03.s045.primers.bed" -p "n100.r03.s045_output/n100.r03.s045.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s045_output/n100.r03.s045.trimmed.sorted.bam" "n100.r03.s045_output/n100.r03.s045.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s045_output/n100.r03.s045.reference.fas" "n100.r03.s045_output/n100.r03.s045.trimmed.sorted.bam" > "n100.r03.s045_output/n100.r03.s045.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s045_output/n100.r03.s045.reference.fas" --call-indels "n100.r03.s045_output/n100.r03.s045.trimmed.sorted.bam" > "n100.r03.s045_output/n100.r03.s045.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s045_output/n100.r03.s045.trimmed.sorted.bam" > "n100.r03.s045_output/n100.r03.s045.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s045_output/n100.r03.s045.depth.txt" "n100.r03.s045_output/n100.r03.s045.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s045_output/n100.r03.s045.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s045_output/n100.r03.s045.reference.fas" | bcftools consensus -m "n100.r03.s045_output/n100.r03.s045.low_depth.tsv" tmp.vcf.gz > "n100.r03.s045_output/n100.r03.s045.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s045_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:30 scheduler task b4bc837b (flow d79d1747): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:30 scheduler task 9fb665b0 (flow c77a5486): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:30 scheduler task b4bc837b (flow d79d1747): waiting for completion (try 0): started
2021/07/08 16:44:30  ->  n100.r03.s077.Main.out_file d79d1747 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:30 n100.r03.s077.Main.out_file d79d1747 n100/r03/n100.r03.s077.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:03b8bb6fc1ed415c0ed4c285003640df9d2ec9fcd8509bcf268996816a9fc74c
	sha256:d79d174741766462ebff58c04e6780716049234955e59567b21b7ba4c124a904
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b4bc837b472494c451239c8196f39980e4a0cbfdfa97e426516bbc1d8dab8474
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s077_output"
	    wget -O "n100.r03.s077_output/n100.r03.s077.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s077_output/n100.r03.s077.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s077_output/n100.r03.s077.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s077_output/n100.r03.s077.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s077_output/n100.r03.s077.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s077_output/n100.r03.s077.reference.fas" "n100.r03.s077_output/n100.r03.s077.fq1.fastq" "n100.r03.s077_output/n100.r03.s077.fq2.fastq" | samtools view -bS - > "n100.r03.s077_output/n100.r03.s077.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s077_output/n100.r03.s077.untrimmed.sorted.bam" "n100.r03.s077_output/n100.r03.s077.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s077_output/n100.r03.s077.untrimmed.sorted.bam" -b "n100.r03.s077_output/n100.r03.s077.primers.bed" -p "n100.r03.s077_output/n100.r03.s077.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s077_output/n100.r03.s077.trimmed.sorted.bam" "n100.r03.s077_output/n100.r03.s077.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s077_output/n100.r03.s077.reference.fas" "n100.r03.s077_output/n100.r03.s077.trimmed.sorted.bam" > "n100.r03.s077_output/n100.r03.s077.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s077_output/n100.r03.s077.reference.fas" --call-indels "n100.r03.s077_output/n100.r03.s077.trimmed.sorted.bam" > "n100.r03.s077_output/n100.r03.s077.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s077_output/n100.r03.s077.trimmed.sorted.bam" > "n100.r03.s077_output/n100.r03.s077.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s077_output/n100.r03.s077.depth.txt" "n100.r03.s077_output/n100.r03.s077.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s077_output/n100.r03.s077.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s077_output/n100.r03.s077.reference.fas" | bcftools consensus -m "n100.r03.s077_output/n100.r03.s077.low_depth.tsv" tmp.vcf.gz > "n100.r03.s077_output/n100.r03.s077.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s077_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:30 scheduler task 9fb665b0 (flow c77a5486): waiting for completion (try 0): started
2021/07/08 16:44:30  ->  n100.r03.s057.Main.out_file c77a5486 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:30 n100.r03.s057.Main.out_file c77a5486 n100/r03/n100.r03.s057.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9c9fe791d225668510dee8d09fed9fd30e954d9e30881b8bc6617531700e987d
	sha256:c77a5486694713708235bd3a1fd5c04e3ff1f974bb42910022f4348ba17b843e
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9fb665b08990a1c06e7aef37bce6634bf50c87f6c6f4b335fa029fc66cec6215
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s057_output"
	    wget -O "n100.r03.s057_output/n100.r03.s057.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s057_output/n100.r03.s057.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s057_output/n100.r03.s057.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s057_output/n100.r03.s057.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s057_output/n100.r03.s057.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s057_output/n100.r03.s057.reference.fas" "n100.r03.s057_output/n100.r03.s057.fq1.fastq" "n100.r03.s057_output/n100.r03.s057.fq2.fastq" | samtools view -bS - > "n100.r03.s057_output/n100.r03.s057.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s057_output/n100.r03.s057.untrimmed.sorted.bam" "n100.r03.s057_output/n100.r03.s057.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s057_output/n100.r03.s057.untrimmed.sorted.bam" -b "n100.r03.s057_output/n100.r03.s057.primers.bed" -p "n100.r03.s057_output/n100.r03.s057.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s057_output/n100.r03.s057.trimmed.sorted.bam" "n100.r03.s057_output/n100.r03.s057.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s057_output/n100.r03.s057.reference.fas" "n100.r03.s057_output/n100.r03.s057.trimmed.sorted.bam" > "n100.r03.s057_output/n100.r03.s057.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s057_output/n100.r03.s057.reference.fas" --call-indels "n100.r03.s057_output/n100.r03.s057.trimmed.sorted.bam" > "n100.r03.s057_output/n100.r03.s057.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s057_output/n100.r03.s057.trimmed.sorted.bam" > "n100.r03.s057_output/n100.r03.s057.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s057_output/n100.r03.s057.depth.txt" "n100.r03.s057_output/n100.r03.s057.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s057_output/n100.r03.s057.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s057_output/n100.r03.s057.reference.fas" | bcftools consensus -m "n100.r03.s057_output/n100.r03.s057.low_depth.tsv" tmp.vcf.gz > "n100.r03.s057_output/n100.r03.s057.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s057_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:31 scheduler task ac3fb0dc (flow 785ffd27): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:31 scheduler task ac3fb0dc (flow 785ffd27): waiting for completion (try 0): started
2021/07/08 16:44:31  ->  n100.r03.s015.Main.out_file 785ffd27 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:31 n100.r03.s015.Main.out_file 785ffd27 n100/r03/n100.r03.s015.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:484062e894ce6e2d60b62aa7a43276af682b64f29d3feb22b94460f278fdb7b6
	sha256:785ffd27d1ed8c8e7bd5d9e7901497bd6912e1bd7555c3585f5e38af127e4cf5
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ac3fb0dce2e7c7b65a9a3553d5fe5b2816d4f3ab85fb0bd5adcd0bdc45345277
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s015_output"
	    wget -O "n100.r03.s015_output/n100.r03.s015.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s015_output/n100.r03.s015.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s015_output/n100.r03.s015.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s015_output/n100.r03.s015.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s015_output/n100.r03.s015.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s015_output/n100.r03.s015.reference.fas" "n100.r03.s015_output/n100.r03.s015.fq1.fastq" "n100.r03.s015_output/n100.r03.s015.fq2.fastq" | samtools view -bS - > "n100.r03.s015_output/n100.r03.s015.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s015_output/n100.r03.s015.untrimmed.sorted.bam" "n100.r03.s015_output/n100.r03.s015.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s015_output/n100.r03.s015.untrimmed.sorted.bam" -b "n100.r03.s015_output/n100.r03.s015.primers.bed" -p "n100.r03.s015_output/n100.r03.s015.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s015_output/n100.r03.s015.trimmed.sorted.bam" "n100.r03.s015_output/n100.r03.s015.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s015_output/n100.r03.s015.reference.fas" "n100.r03.s015_output/n100.r03.s015.trimmed.sorted.bam" > "n100.r03.s015_output/n100.r03.s015.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s015_output/n100.r03.s015.reference.fas" --call-indels "n100.r03.s015_output/n100.r03.s015.trimmed.sorted.bam" > "n100.r03.s015_output/n100.r03.s015.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s015_output/n100.r03.s015.trimmed.sorted.bam" > "n100.r03.s015_output/n100.r03.s015.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s015_output/n100.r03.s015.depth.txt" "n100.r03.s015_output/n100.r03.s015.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s015_output/n100.r03.s015.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s015_output/n100.r03.s015.reference.fas" | bcftools consensus -m "n100.r03.s015_output/n100.r03.s015.low_depth.tsv" tmp.vcf.gz > "n100.r03.s015_output/n100.r03.s015.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s015_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:31 scheduler task 169fa905 (flow 9b3c4623): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:31 scheduler task 169fa905 (flow 9b3c4623): waiting for completion (try 0): started
2021/07/08 16:44:31  ->  n100.r03.s062.Main.out_file 9b3c4623 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:31 n100.r03.s062.Main.out_file 9b3c4623 n100/r03/n100.r03.s062.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e7e8cf890c6a3aa10fb2ba6698d9d47a1d8f8b55ba3c39896f6e52742a340268
	sha256:9b3c46235f9501b548873ab872f36677ac82637ab25929d950bb56d7d4577641
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/169fa9052f0364f9543f0cfc1954e6ef76e0d7b54affbbe1c50969ae4bcb01f5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s062_output"
	    wget -O "n100.r03.s062_output/n100.r03.s062.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s062_output/n100.r03.s062.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s062_output/n100.r03.s062.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s062_output/n100.r03.s062.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s062_output/n100.r03.s062.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s062_output/n100.r03.s062.reference.fas" "n100.r03.s062_output/n100.r03.s062.fq1.fastq" "n100.r03.s062_output/n100.r03.s062.fq2.fastq" | samtools view -bS - > "n100.r03.s062_output/n100.r03.s062.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s062_output/n100.r03.s062.untrimmed.sorted.bam" "n100.r03.s062_output/n100.r03.s062.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s062_output/n100.r03.s062.untrimmed.sorted.bam" -b "n100.r03.s062_output/n100.r03.s062.primers.bed" -p "n100.r03.s062_output/n100.r03.s062.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s062_output/n100.r03.s062.trimmed.sorted.bam" "n100.r03.s062_output/n100.r03.s062.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s062_output/n100.r03.s062.reference.fas" "n100.r03.s062_output/n100.r03.s062.trimmed.sorted.bam" > "n100.r03.s062_output/n100.r03.s062.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s062_output/n100.r03.s062.reference.fas" --call-indels "n100.r03.s062_output/n100.r03.s062.trimmed.sorted.bam" > "n100.r03.s062_output/n100.r03.s062.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s062_output/n100.r03.s062.trimmed.sorted.bam" > "n100.r03.s062_output/n100.r03.s062.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s062_output/n100.r03.s062.depth.txt" "n100.r03.s062_output/n100.r03.s062.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s062_output/n100.r03.s062.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s062_output/n100.r03.s062.reference.fas" | bcftools consensus -m "n100.r03.s062_output/n100.r03.s062.low_depth.tsv" tmp.vcf.gz > "n100.r03.s062_output/n100.r03.s062.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s062_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:31 scheduler task 29f0c020 (flow 17bef574): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:31 scheduler task 29f0c020 (flow 17bef574): waiting for completion (try 0): started
2021/07/08 16:44:31  ->  n100.r03.s064.Main.out_file 17bef574 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:31 n100.r03.s064.Main.out_file 17bef574 n100/r03/n100.r03.s064.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8f3e8f1cc0e81f6341edfeb11ecbfae5e97b0e57832c66b1096c507dd121faea
	sha256:17bef5747981a2122b3596b3365a2e0e965614940f1011fcb5e473c62ab9b94c
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/29f0c020d5a0ad7b82db28e4ad984d553d37d8d6077c89b2ccad30fed87172a2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s064_output"
	    wget -O "n100.r03.s064_output/n100.r03.s064.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s064_output/n100.r03.s064.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s064_output/n100.r03.s064.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s064_output/n100.r03.s064.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s064_output/n100.r03.s064.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s064_output/n100.r03.s064.reference.fas" "n100.r03.s064_output/n100.r03.s064.fq1.fastq" "n100.r03.s064_output/n100.r03.s064.fq2.fastq" | samtools view -bS - > "n100.r03.s064_output/n100.r03.s064.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s064_output/n100.r03.s064.untrimmed.sorted.bam" "n100.r03.s064_output/n100.r03.s064.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s064_output/n100.r03.s064.untrimmed.sorted.bam" -b "n100.r03.s064_output/n100.r03.s064.primers.bed" -p "n100.r03.s064_output/n100.r03.s064.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s064_output/n100.r03.s064.trimmed.sorted.bam" "n100.r03.s064_output/n100.r03.s064.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s064_output/n100.r03.s064.reference.fas" "n100.r03.s064_output/n100.r03.s064.trimmed.sorted.bam" > "n100.r03.s064_output/n100.r03.s064.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s064_output/n100.r03.s064.reference.fas" --call-indels "n100.r03.s064_output/n100.r03.s064.trimmed.sorted.bam" > "n100.r03.s064_output/n100.r03.s064.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s064_output/n100.r03.s064.trimmed.sorted.bam" > "n100.r03.s064_output/n100.r03.s064.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s064_output/n100.r03.s064.depth.txt" "n100.r03.s064_output/n100.r03.s064.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s064_output/n100.r03.s064.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s064_output/n100.r03.s064.reference.fas" | bcftools consensus -m "n100.r03.s064_output/n100.r03.s064.low_depth.tsv" tmp.vcf.gz > "n100.r03.s064_output/n100.r03.s064.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s064_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:31 scheduler task b3ec1597 (flow 56168040): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:31 scheduler task b3ec1597 (flow 56168040): waiting for completion (try 0): started
2021/07/08 16:44:31  ->  n100.r03.s032.Main.out_file 56168040 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:31 n100.r03.s032.Main.out_file 56168040 n100/r03/n100.r03.s032.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:51ad86752f19d841592f661547c7123761e993a543d1616015651766ec3da501
	sha256:56168040d4eb6addba017882f02ff85483837159502c622affc978bc4ec65a4d
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b3ec1597421aee011ef6f981499a2ea1d54944bdba62732b2a82ec38a2f1b511
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s032_output"
	    wget -O "n100.r03.s032_output/n100.r03.s032.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s032_output/n100.r03.s032.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s032_output/n100.r03.s032.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s032_output/n100.r03.s032.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s032_output/n100.r03.s032.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s032_output/n100.r03.s032.reference.fas" "n100.r03.s032_output/n100.r03.s032.fq1.fastq" "n100.r03.s032_output/n100.r03.s032.fq2.fastq" | samtools view -bS - > "n100.r03.s032_output/n100.r03.s032.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s032_output/n100.r03.s032.untrimmed.sorted.bam" "n100.r03.s032_output/n100.r03.s032.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s032_output/n100.r03.s032.untrimmed.sorted.bam" -b "n100.r03.s032_output/n100.r03.s032.primers.bed" -p "n100.r03.s032_output/n100.r03.s032.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s032_output/n100.r03.s032.trimmed.sorted.bam" "n100.r03.s032_output/n100.r03.s032.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s032_output/n100.r03.s032.reference.fas" "n100.r03.s032_output/n100.r03.s032.trimmed.sorted.bam" > "n100.r03.s032_output/n100.r03.s032.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s032_output/n100.r03.s032.reference.fas" --call-indels "n100.r03.s032_output/n100.r03.s032.trimmed.sorted.bam" > "n100.r03.s032_output/n100.r03.s032.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s032_output/n100.r03.s032.trimmed.sorted.bam" > "n100.r03.s032_output/n100.r03.s032.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s032_output/n100.r03.s032.depth.txt" "n100.r03.s032_output/n100.r03.s032.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s032_output/n100.r03.s032.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s032_output/n100.r03.s032.reference.fas" | bcftools consensus -m "n100.r03.s032_output/n100.r03.s032.low_depth.tsv" tmp.vcf.gz > "n100.r03.s032_output/n100.r03.s032.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s032_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:31 scheduler task 07b1d571 (flow 47420793): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:31 scheduler task 07b1d571 (flow 47420793): waiting for completion (try 0): started
2021/07/08 16:44:31  ->  n100.r03.s021.Main.out_file 47420793 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:31 n100.r03.s021.Main.out_file 47420793 n100/r03/n100.r03.s021.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e001b750e7d8ac157da9ed207001358344599f6afcc6544119847d3146c9d312
	sha256:47420793c27b71a77441b691878a674f524bd313473ab982fbbcaaaa0a6d1f12
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/07b1d57159cb2aff42c309121ed4b90cc3a3bd9feba3834181ffeb9a278e5b87
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s021_output"
	    wget -O "n100.r03.s021_output/n100.r03.s021.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s021_output/n100.r03.s021.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s021_output/n100.r03.s021.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s021_output/n100.r03.s021.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s021_output/n100.r03.s021.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s021_output/n100.r03.s021.reference.fas" "n100.r03.s021_output/n100.r03.s021.fq1.fastq" "n100.r03.s021_output/n100.r03.s021.fq2.fastq" | samtools view -bS - > "n100.r03.s021_output/n100.r03.s021.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s021_output/n100.r03.s021.untrimmed.sorted.bam" "n100.r03.s021_output/n100.r03.s021.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s021_output/n100.r03.s021.untrimmed.sorted.bam" -b "n100.r03.s021_output/n100.r03.s021.primers.bed" -p "n100.r03.s021_output/n100.r03.s021.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s021_output/n100.r03.s021.trimmed.sorted.bam" "n100.r03.s021_output/n100.r03.s021.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s021_output/n100.r03.s021.reference.fas" "n100.r03.s021_output/n100.r03.s021.trimmed.sorted.bam" > "n100.r03.s021_output/n100.r03.s021.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s021_output/n100.r03.s021.reference.fas" --call-indels "n100.r03.s021_output/n100.r03.s021.trimmed.sorted.bam" > "n100.r03.s021_output/n100.r03.s021.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s021_output/n100.r03.s021.trimmed.sorted.bam" > "n100.r03.s021_output/n100.r03.s021.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s021_output/n100.r03.s021.depth.txt" "n100.r03.s021_output/n100.r03.s021.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s021_output/n100.r03.s021.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s021_output/n100.r03.s021.reference.fas" | bcftools consensus -m "n100.r03.s021_output/n100.r03.s021.low_depth.tsv" tmp.vcf.gz > "n100.r03.s021_output/n100.r03.s021.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s021_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:32 scheduler task e1c62bb9 (flow 5ae9b7e9): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:32 scheduler task e1c62bb9 (flow 5ae9b7e9): waiting for completion (try 0): started
2021/07/08 16:44:32  ->  n100.r03.s088.Main.out_file 5ae9b7e9 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:32 n100.r03.s088.Main.out_file 5ae9b7e9 n100/r03/n100.r03.s088.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3d0261d986df6662d36f608ce6e5407f67947a639d3c305b7446fbec12d2fa22
	sha256:5ae9b7e92d72c73170a79f73b8bb88b8494ef3cf068750d0f6fbc2078a844679
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e1c62bb92e58afc32530b92440ca865b4bc0f57e3149f42428642effcb18421f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s088_output"
	    wget -O "n100.r03.s088_output/n100.r03.s088.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s088_output/n100.r03.s088.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s088_output/n100.r03.s088.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s088_output/n100.r03.s088.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s088_output/n100.r03.s088.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s088_output/n100.r03.s088.reference.fas" "n100.r03.s088_output/n100.r03.s088.fq1.fastq" "n100.r03.s088_output/n100.r03.s088.fq2.fastq" | samtools view -bS - > "n100.r03.s088_output/n100.r03.s088.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s088_output/n100.r03.s088.untrimmed.sorted.bam" "n100.r03.s088_output/n100.r03.s088.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s088_output/n100.r03.s088.untrimmed.sorted.bam" -b "n100.r03.s088_output/n100.r03.s088.primers.bed" -p "n100.r03.s088_output/n100.r03.s088.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s088_output/n100.r03.s088.trimmed.sorted.bam" "n100.r03.s088_output/n100.r03.s088.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s088_output/n100.r03.s088.reference.fas" "n100.r03.s088_output/n100.r03.s088.trimmed.sorted.bam" > "n100.r03.s088_output/n100.r03.s088.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s088_output/n100.r03.s088.reference.fas" --call-indels "n100.r03.s088_output/n100.r03.s088.trimmed.sorted.bam" > "n100.r03.s088_output/n100.r03.s088.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s088_output/n100.r03.s088.trimmed.sorted.bam" > "n100.r03.s088_output/n100.r03.s088.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s088_output/n100.r03.s088.depth.txt" "n100.r03.s088_output/n100.r03.s088.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s088_output/n100.r03.s088.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s088_output/n100.r03.s088.reference.fas" | bcftools consensus -m "n100.r03.s088_output/n100.r03.s088.low_depth.tsv" tmp.vcf.gz > "n100.r03.s088_output/n100.r03.s088.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s088_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:32 scheduler task 3d6f2242 (flow 88b2cc74): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:32 scheduler task 3d6f2242 (flow 88b2cc74): waiting for completion (try 0): started
2021/07/08 16:44:32  ->  n100.r03.s020.Main.out_file 88b2cc74 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:32 n100.r03.s020.Main.out_file 88b2cc74 n100/r03/n100.r03.s020.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:61093992f56ef1f594348d1f7d3f95abb3434f4cf7b6584256f01764f3e867b6
	sha256:88b2cc740b30fc8b0ea700e74a5ecbd178b07112e69eb3e423893d6d013ae7b7
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3d6f2242c43cdf5e71afa07543507dc6cb8e1f8fc435eef72f450eb281658722
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s020_output"
	    wget -O "n100.r03.s020_output/n100.r03.s020.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s020_output/n100.r03.s020.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s020_output/n100.r03.s020.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s020_output/n100.r03.s020.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s020_output/n100.r03.s020.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s020_output/n100.r03.s020.reference.fas" "n100.r03.s020_output/n100.r03.s020.fq1.fastq" "n100.r03.s020_output/n100.r03.s020.fq2.fastq" | samtools view -bS - > "n100.r03.s020_output/n100.r03.s020.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s020_output/n100.r03.s020.untrimmed.sorted.bam" "n100.r03.s020_output/n100.r03.s020.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s020_output/n100.r03.s020.untrimmed.sorted.bam" -b "n100.r03.s020_output/n100.r03.s020.primers.bed" -p "n100.r03.s020_output/n100.r03.s020.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s020_output/n100.r03.s020.trimmed.sorted.bam" "n100.r03.s020_output/n100.r03.s020.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s020_output/n100.r03.s020.reference.fas" "n100.r03.s020_output/n100.r03.s020.trimmed.sorted.bam" > "n100.r03.s020_output/n100.r03.s020.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s020_output/n100.r03.s020.reference.fas" --call-indels "n100.r03.s020_output/n100.r03.s020.trimmed.sorted.bam" > "n100.r03.s020_output/n100.r03.s020.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s020_output/n100.r03.s020.trimmed.sorted.bam" > "n100.r03.s020_output/n100.r03.s020.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s020_output/n100.r03.s020.depth.txt" "n100.r03.s020_output/n100.r03.s020.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s020_output/n100.r03.s020.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s020_output/n100.r03.s020.reference.fas" | bcftools consensus -m "n100.r03.s020_output/n100.r03.s020.low_depth.tsv" tmp.vcf.gz > "n100.r03.s020_output/n100.r03.s020.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s020_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:32 scheduler task d3c3f174 (flow eb36d115): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:32 scheduler task d3c3f174 (flow eb36d115): waiting for completion (try 0): started
2021/07/08 16:44:32  ->  n100.r03.s033.Main.out_file eb36d115 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:32 n100.r03.s033.Main.out_file eb36d115 n100/r03/n100.r03.s033.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:56b0ebb42a3e80375439174973244d2be6addc13f0665dc7f4a197687775dece
	sha256:eb36d115dbc636907d7cd7d9a064841c191169e01219781d1b1291b336cf0f1e
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d3c3f174e3666bf09c411cf5d500c216a32143456682fe7b21bc6526ab9fa8f8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s033_output"
	    wget -O "n100.r03.s033_output/n100.r03.s033.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s033_output/n100.r03.s033.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s033_output/n100.r03.s033.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s033_output/n100.r03.s033.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s033_output/n100.r03.s033.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s033_output/n100.r03.s033.reference.fas" "n100.r03.s033_output/n100.r03.s033.fq1.fastq" "n100.r03.s033_output/n100.r03.s033.fq2.fastq" | samtools view -bS - > "n100.r03.s033_output/n100.r03.s033.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s033_output/n100.r03.s033.untrimmed.sorted.bam" "n100.r03.s033_output/n100.r03.s033.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s033_output/n100.r03.s033.untrimmed.sorted.bam" -b "n100.r03.s033_output/n100.r03.s033.primers.bed" -p "n100.r03.s033_output/n100.r03.s033.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s033_output/n100.r03.s033.trimmed.sorted.bam" "n100.r03.s033_output/n100.r03.s033.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s033_output/n100.r03.s033.reference.fas" "n100.r03.s033_output/n100.r03.s033.trimmed.sorted.bam" > "n100.r03.s033_output/n100.r03.s033.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s033_output/n100.r03.s033.reference.fas" --call-indels "n100.r03.s033_output/n100.r03.s033.trimmed.sorted.bam" > "n100.r03.s033_output/n100.r03.s033.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s033_output/n100.r03.s033.trimmed.sorted.bam" > "n100.r03.s033_output/n100.r03.s033.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s033_output/n100.r03.s033.depth.txt" "n100.r03.s033_output/n100.r03.s033.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s033_output/n100.r03.s033.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s033_output/n100.r03.s033.reference.fas" | bcftools consensus -m "n100.r03.s033_output/n100.r03.s033.low_depth.tsv" tmp.vcf.gz > "n100.r03.s033_output/n100.r03.s033.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s033_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:32 scheduler task 5f06865c (flow a8ad97f1): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:32 scheduler task 5f06865c (flow a8ad97f1): waiting for completion (try 0): started
2021/07/08 16:44:32  ->  n100.r03.s089.Main.out_file a8ad97f1 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:32 n100.r03.s089.Main.out_file a8ad97f1 n100/r03/n100.r03.s089.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4c928116fb1cb7799509b35aa8202c8197121fe34f4c183095b8c7d7e76812bf
	sha256:a8ad97f1f732fbdf1b9898eaaf86bb24baed7456a06395b8427729c9b1eb0863
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5f06865c7d49377fa0ad9be463c47f1270264894fa4067adfeab9c69775480ee
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s089_output"
	    wget -O "n100.r03.s089_output/n100.r03.s089.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s089_output/n100.r03.s089.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s089_output/n100.r03.s089.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s089_output/n100.r03.s089.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s089_output/n100.r03.s089.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s089_output/n100.r03.s089.reference.fas" "n100.r03.s089_output/n100.r03.s089.fq1.fastq" "n100.r03.s089_output/n100.r03.s089.fq2.fastq" | samtools view -bS - > "n100.r03.s089_output/n100.r03.s089.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s089_output/n100.r03.s089.untrimmed.sorted.bam" "n100.r03.s089_output/n100.r03.s089.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s089_output/n100.r03.s089.untrimmed.sorted.bam" -b "n100.r03.s089_output/n100.r03.s089.primers.bed" -p "n100.r03.s089_output/n100.r03.s089.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s089_output/n100.r03.s089.trimmed.sorted.bam" "n100.r03.s089_output/n100.r03.s089.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s089_output/n100.r03.s089.reference.fas" "n100.r03.s089_output/n100.r03.s089.trimmed.sorted.bam" > "n100.r03.s089_output/n100.r03.s089.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s089_output/n100.r03.s089.reference.fas" --call-indels "n100.r03.s089_output/n100.r03.s089.trimmed.sorted.bam" > "n100.r03.s089_output/n100.r03.s089.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s089_output/n100.r03.s089.trimmed.sorted.bam" > "n100.r03.s089_output/n100.r03.s089.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s089_output/n100.r03.s089.depth.txt" "n100.r03.s089_output/n100.r03.s089.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s089_output/n100.r03.s089.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s089_output/n100.r03.s089.reference.fas" | bcftools consensus -m "n100.r03.s089_output/n100.r03.s089.low_depth.tsv" tmp.vcf.gz > "n100.r03.s089_output/n100.r03.s089.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s089_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:32 scheduler task 21089e1a (flow c279c2df): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:32 scheduler task 21089e1a (flow c279c2df): waiting for completion (try 0): started
2021/07/08 16:44:32  ->  n100.r03.s084.Main.out_file c279c2df exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:32 n100.r03.s084.Main.out_file c279c2df n100/r03/n100.r03.s084.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8a3714689c367da354416e5d261e2d38acb00174aa4b9a6e3921f45cf582f232
	sha256:c279c2dfd93cd2f1d7d73c1b4ba05397b45ce8891b2a1a5b6ba11170a85c58ce
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/21089e1a950d4411d234374c404b17423d909f856839899b250691cc79121efb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s084_output"
	    wget -O "n100.r03.s084_output/n100.r03.s084.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s084_output/n100.r03.s084.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s084_output/n100.r03.s084.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s084_output/n100.r03.s084.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s084_output/n100.r03.s084.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s084_output/n100.r03.s084.reference.fas" "n100.r03.s084_output/n100.r03.s084.fq1.fastq" "n100.r03.s084_output/n100.r03.s084.fq2.fastq" | samtools view -bS - > "n100.r03.s084_output/n100.r03.s084.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s084_output/n100.r03.s084.untrimmed.sorted.bam" "n100.r03.s084_output/n100.r03.s084.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s084_output/n100.r03.s084.untrimmed.sorted.bam" -b "n100.r03.s084_output/n100.r03.s084.primers.bed" -p "n100.r03.s084_output/n100.r03.s084.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s084_output/n100.r03.s084.trimmed.sorted.bam" "n100.r03.s084_output/n100.r03.s084.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s084_output/n100.r03.s084.reference.fas" "n100.r03.s084_output/n100.r03.s084.trimmed.sorted.bam" > "n100.r03.s084_output/n100.r03.s084.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s084_output/n100.r03.s084.reference.fas" --call-indels "n100.r03.s084_output/n100.r03.s084.trimmed.sorted.bam" > "n100.r03.s084_output/n100.r03.s084.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s084_output/n100.r03.s084.trimmed.sorted.bam" > "n100.r03.s084_output/n100.r03.s084.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s084_output/n100.r03.s084.depth.txt" "n100.r03.s084_output/n100.r03.s084.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s084_output/n100.r03.s084.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s084_output/n100.r03.s084.reference.fas" | bcftools consensus -m "n100.r03.s084_output/n100.r03.s084.low_depth.tsv" tmp.vcf.gz > "n100.r03.s084_output/n100.r03.s084.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s084_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:32 scheduler task 95b9c199 (flow d919402c): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:32 scheduler task 95b9c199 (flow d919402c): waiting for completion (try 0): started
2021/07/08 16:44:32  ->  n100.r03.s052.Main.out_file d919402c exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:32 n100.r03.s052.Main.out_file d919402c n100/r03/n100.r03.s052.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:27f1f0cfae28602d38f05b4acdeb5fab38d8ba88fe0430b469a0b7cf6ef1f4ed
	sha256:d919402cbff003b7dc8cb9967dfe1750f78308d929cd4916bf16ebf97eab3a93
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/95b9c1998fda493d5d5e4612f0759e801e042c66c8918d0a28cf133763c61524
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s052_output"
	    wget -O "n100.r03.s052_output/n100.r03.s052.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s052_output/n100.r03.s052.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s052_output/n100.r03.s052.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s052_output/n100.r03.s052.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s052_output/n100.r03.s052.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s052_output/n100.r03.s052.reference.fas" "n100.r03.s052_output/n100.r03.s052.fq1.fastq" "n100.r03.s052_output/n100.r03.s052.fq2.fastq" | samtools view -bS - > "n100.r03.s052_output/n100.r03.s052.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s052_output/n100.r03.s052.untrimmed.sorted.bam" "n100.r03.s052_output/n100.r03.s052.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s052_output/n100.r03.s052.untrimmed.sorted.bam" -b "n100.r03.s052_output/n100.r03.s052.primers.bed" -p "n100.r03.s052_output/n100.r03.s052.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s052_output/n100.r03.s052.trimmed.sorted.bam" "n100.r03.s052_output/n100.r03.s052.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s052_output/n100.r03.s052.reference.fas" "n100.r03.s052_output/n100.r03.s052.trimmed.sorted.bam" > "n100.r03.s052_output/n100.r03.s052.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s052_output/n100.r03.s052.reference.fas" --call-indels "n100.r03.s052_output/n100.r03.s052.trimmed.sorted.bam" > "n100.r03.s052_output/n100.r03.s052.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s052_output/n100.r03.s052.trimmed.sorted.bam" > "n100.r03.s052_output/n100.r03.s052.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s052_output/n100.r03.s052.depth.txt" "n100.r03.s052_output/n100.r03.s052.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s052_output/n100.r03.s052.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s052_output/n100.r03.s052.reference.fas" | bcftools consensus -m "n100.r03.s052_output/n100.r03.s052.low_depth.tsv" tmp.vcf.gz > "n100.r03.s052_output/n100.r03.s052.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s052_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:32 scheduler task e071a634 (flow 3d4ece28): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:32 scheduler task e071a634 (flow 3d4ece28): waiting for completion (try 0): started
2021/07/08 16:44:32  ->  n100.r03.s004.Main.out_file 3d4ece28 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:32 n100.r03.s004.Main.out_file 3d4ece28 n100/r03/n100.r03.s004.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7c964cfc4cb696222030271c84b0adfc1a8b65a2582aa8a3efc7147a8c742c98
	sha256:3d4ece28a7986b631eb3e8bb6e1ef1b1614b18150c2348a3a79e1d53ab126b11
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e071a6344f0ce705c8ee6324ded41ec456e1087c596885ac813349046b9b1a4d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s004_output"
	    wget -O "n100.r03.s004_output/n100.r03.s004.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s004_output/n100.r03.s004.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s004_output/n100.r03.s004.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s004_output/n100.r03.s004.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s004_output/n100.r03.s004.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s004_output/n100.r03.s004.reference.fas" "n100.r03.s004_output/n100.r03.s004.fq1.fastq" "n100.r03.s004_output/n100.r03.s004.fq2.fastq" | samtools view -bS - > "n100.r03.s004_output/n100.r03.s004.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s004_output/n100.r03.s004.untrimmed.sorted.bam" "n100.r03.s004_output/n100.r03.s004.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s004_output/n100.r03.s004.untrimmed.sorted.bam" -b "n100.r03.s004_output/n100.r03.s004.primers.bed" -p "n100.r03.s004_output/n100.r03.s004.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s004_output/n100.r03.s004.trimmed.sorted.bam" "n100.r03.s004_output/n100.r03.s004.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s004_output/n100.r03.s004.reference.fas" "n100.r03.s004_output/n100.r03.s004.trimmed.sorted.bam" > "n100.r03.s004_output/n100.r03.s004.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s004_output/n100.r03.s004.reference.fas" --call-indels "n100.r03.s004_output/n100.r03.s004.trimmed.sorted.bam" > "n100.r03.s004_output/n100.r03.s004.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s004_output/n100.r03.s004.trimmed.sorted.bam" > "n100.r03.s004_output/n100.r03.s004.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s004_output/n100.r03.s004.depth.txt" "n100.r03.s004_output/n100.r03.s004.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s004_output/n100.r03.s004.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s004_output/n100.r03.s004.reference.fas" | bcftools consensus -m "n100.r03.s004_output/n100.r03.s004.low_depth.tsv" tmp.vcf.gz > "n100.r03.s004_output/n100.r03.s004.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s004_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:33 scheduler task c3688bf6 (flow a83f360e): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:33 scheduler task c3688bf6 (flow a83f360e): waiting for completion (try 0): started
2021/07/08 16:44:33  ->  n100.r03.s047.Main.out_file a83f360e exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:33 n100.r03.s047.Main.out_file a83f360e n100/r03/n100.r03.s047.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c1b60b3b37cc47874ad52c4a4b31aba48d8e7b2ab522e350575cd87183b4d83d
	sha256:a83f360e35f71f7f1af1b53ff9439373cd2da073e04dc0aae64e1b4cf09eba5e
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c3688bf605797010a29c37419cc710aff72a8ec92c8ee73cdd9911d6f4d09212
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s047_output"
	    wget -O "n100.r03.s047_output/n100.r03.s047.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s047_output/n100.r03.s047.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s047_output/n100.r03.s047.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s047_output/n100.r03.s047.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s047_output/n100.r03.s047.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s047_output/n100.r03.s047.reference.fas" "n100.r03.s047_output/n100.r03.s047.fq1.fastq" "n100.r03.s047_output/n100.r03.s047.fq2.fastq" | samtools view -bS - > "n100.r03.s047_output/n100.r03.s047.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s047_output/n100.r03.s047.untrimmed.sorted.bam" "n100.r03.s047_output/n100.r03.s047.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s047_output/n100.r03.s047.untrimmed.sorted.bam" -b "n100.r03.s047_output/n100.r03.s047.primers.bed" -p "n100.r03.s047_output/n100.r03.s047.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s047_output/n100.r03.s047.trimmed.sorted.bam" "n100.r03.s047_output/n100.r03.s047.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s047_output/n100.r03.s047.reference.fas" "n100.r03.s047_output/n100.r03.s047.trimmed.sorted.bam" > "n100.r03.s047_output/n100.r03.s047.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s047_output/n100.r03.s047.reference.fas" --call-indels "n100.r03.s047_output/n100.r03.s047.trimmed.sorted.bam" > "n100.r03.s047_output/n100.r03.s047.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s047_output/n100.r03.s047.trimmed.sorted.bam" > "n100.r03.s047_output/n100.r03.s047.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s047_output/n100.r03.s047.depth.txt" "n100.r03.s047_output/n100.r03.s047.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s047_output/n100.r03.s047.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s047_output/n100.r03.s047.reference.fas" | bcftools consensus -m "n100.r03.s047_output/n100.r03.s047.low_depth.tsv" tmp.vcf.gz > "n100.r03.s047_output/n100.r03.s047.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s047_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:33 scheduler task f0203609 (flow f72aefa7): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:33 scheduler task f0203609 (flow f72aefa7): waiting for completion (try 0): started
2021/07/08 16:44:33  ->  n100.r03.s082.Main.out_file f72aefa7 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:33 n100.r03.s082.Main.out_file f72aefa7 n100/r03/n100.r03.s082.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:38fcf99b1775e189c36fd9459b1d0914a9c93a3817db113913018f9d9f400fa8
	sha256:f72aefa7f6a52bb2c007cdc1ab4d7126342073cb3787e9f75169953ca2575eaa
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f0203609f422e346938ab760b51e3d25127c8f415d021a05bde63c955e0a0e2b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s082_output"
	    wget -O "n100.r03.s082_output/n100.r03.s082.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s082_output/n100.r03.s082.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s082_output/n100.r03.s082.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s082_output/n100.r03.s082.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s082_output/n100.r03.s082.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s082_output/n100.r03.s082.reference.fas" "n100.r03.s082_output/n100.r03.s082.fq1.fastq" "n100.r03.s082_output/n100.r03.s082.fq2.fastq" | samtools view -bS - > "n100.r03.s082_output/n100.r03.s082.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s082_output/n100.r03.s082.untrimmed.sorted.bam" "n100.r03.s082_output/n100.r03.s082.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s082_output/n100.r03.s082.untrimmed.sorted.bam" -b "n100.r03.s082_output/n100.r03.s082.primers.bed" -p "n100.r03.s082_output/n100.r03.s082.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s082_output/n100.r03.s082.trimmed.sorted.bam" "n100.r03.s082_output/n100.r03.s082.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s082_output/n100.r03.s082.reference.fas" "n100.r03.s082_output/n100.r03.s082.trimmed.sorted.bam" > "n100.r03.s082_output/n100.r03.s082.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s082_output/n100.r03.s082.reference.fas" --call-indels "n100.r03.s082_output/n100.r03.s082.trimmed.sorted.bam" > "n100.r03.s082_output/n100.r03.s082.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s082_output/n100.r03.s082.trimmed.sorted.bam" > "n100.r03.s082_output/n100.r03.s082.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s082_output/n100.r03.s082.depth.txt" "n100.r03.s082_output/n100.r03.s082.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s082_output/n100.r03.s082.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s082_output/n100.r03.s082.reference.fas" | bcftools consensus -m "n100.r03.s082_output/n100.r03.s082.low_depth.tsv" tmp.vcf.gz > "n100.r03.s082_output/n100.r03.s082.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s082_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:33 scheduler task 642b8dce (flow da07df2f): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:33 scheduler task 642b8dce (flow da07df2f): waiting for completion (try 0): started
2021/07/08 16:44:33  ->  n100.r03.s096.Main.out_file da07df2f exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:33 n100.r03.s096.Main.out_file da07df2f n100/r03/n100.r03.s096.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1fb68521e8dd6b136667999097a02fc5a4c8ff757ec7bd403004d4ddead7bfd3
	sha256:da07df2fad3b7cbd0f7040fe8c60f256a3803f32ef2b0a91311f43786ebc70a1
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/642b8dce51ff3fe93345ac74d439af00cc418ee4202a1951757a92c2a0bfbc72
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s096_output"
	    wget -O "n100.r03.s096_output/n100.r03.s096.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s096_output/n100.r03.s096.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s096_output/n100.r03.s096.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s096_output/n100.r03.s096.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s096_output/n100.r03.s096.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s096_output/n100.r03.s096.reference.fas" "n100.r03.s096_output/n100.r03.s096.fq1.fastq" "n100.r03.s096_output/n100.r03.s096.fq2.fastq" | samtools view -bS - > "n100.r03.s096_output/n100.r03.s096.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s096_output/n100.r03.s096.untrimmed.sorted.bam" "n100.r03.s096_output/n100.r03.s096.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s096_output/n100.r03.s096.untrimmed.sorted.bam" -b "n100.r03.s096_output/n100.r03.s096.primers.bed" -p "n100.r03.s096_output/n100.r03.s096.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s096_output/n100.r03.s096.trimmed.sorted.bam" "n100.r03.s096_output/n100.r03.s096.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s096_output/n100.r03.s096.reference.fas" "n100.r03.s096_output/n100.r03.s096.trimmed.sorted.bam" > "n100.r03.s096_output/n100.r03.s096.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s096_output/n100.r03.s096.reference.fas" --call-indels "n100.r03.s096_output/n100.r03.s096.trimmed.sorted.bam" > "n100.r03.s096_output/n100.r03.s096.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s096_output/n100.r03.s096.trimmed.sorted.bam" > "n100.r03.s096_output/n100.r03.s096.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s096_output/n100.r03.s096.depth.txt" "n100.r03.s096_output/n100.r03.s096.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s096_output/n100.r03.s096.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s096_output/n100.r03.s096.reference.fas" | bcftools consensus -m "n100.r03.s096_output/n100.r03.s096.low_depth.tsv" tmp.vcf.gz > "n100.r03.s096_output/n100.r03.s096.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s096_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:33 scheduler task bd82dc2a (flow d0504b1f): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:33 scheduler task bd82dc2a (flow d0504b1f): waiting for completion (try 0): started
2021/07/08 16:44:33  ->  n100.r03.s099.Main.out_file d0504b1f exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:33 n100.r03.s099.Main.out_file d0504b1f n100/r03/n100.r03.s099.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:57879e78d43813d5eb8193788ba7b33328a2000c3023afc24aafca9f26ddf658
	sha256:d0504b1f4f0f54874ed340754fb107735ed9de855230f991b6aede6e23068f6b
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bd82dc2a4f05159ccafa17f8519cfe89be2ccb30fc68c35a02512e74b1bd56e0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s099_output"
	    wget -O "n100.r03.s099_output/n100.r03.s099.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s099_output/n100.r03.s099.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s099_output/n100.r03.s099.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s099_output/n100.r03.s099.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s099_output/n100.r03.s099.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s099_output/n100.r03.s099.reference.fas" "n100.r03.s099_output/n100.r03.s099.fq1.fastq" "n100.r03.s099_output/n100.r03.s099.fq2.fastq" | samtools view -bS - > "n100.r03.s099_output/n100.r03.s099.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s099_output/n100.r03.s099.untrimmed.sorted.bam" "n100.r03.s099_output/n100.r03.s099.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s099_output/n100.r03.s099.untrimmed.sorted.bam" -b "n100.r03.s099_output/n100.r03.s099.primers.bed" -p "n100.r03.s099_output/n100.r03.s099.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s099_output/n100.r03.s099.trimmed.sorted.bam" "n100.r03.s099_output/n100.r03.s099.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s099_output/n100.r03.s099.reference.fas" "n100.r03.s099_output/n100.r03.s099.trimmed.sorted.bam" > "n100.r03.s099_output/n100.r03.s099.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s099_output/n100.r03.s099.reference.fas" --call-indels "n100.r03.s099_output/n100.r03.s099.trimmed.sorted.bam" > "n100.r03.s099_output/n100.r03.s099.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s099_output/n100.r03.s099.trimmed.sorted.bam" > "n100.r03.s099_output/n100.r03.s099.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s099_output/n100.r03.s099.depth.txt" "n100.r03.s099_output/n100.r03.s099.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s099_output/n100.r03.s099.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s099_output/n100.r03.s099.reference.fas" | bcftools consensus -m "n100.r03.s099_output/n100.r03.s099.low_depth.tsv" tmp.vcf.gz > "n100.r03.s099_output/n100.r03.s099.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s099_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:33 scheduler task bbcfd2b5 (flow 2ac719fa): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:33 scheduler task bbcfd2b5 (flow 2ac719fa): waiting for completion (try 0): started
2021/07/08 16:44:33  ->  n100.r03.s016.Main.out_file 2ac719fa exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:33 n100.r03.s016.Main.out_file 2ac719fa n100/r03/n100.r03.s016.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:59f57d096e324089b6e38c49593708bac86344c6a465986af8c22cd2ddbf3852
	sha256:2ac719faeb5717c85c22d2af26cb45c5977db71f54ab2670079db4bed872a98e
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bbcfd2b5b3d207cc51cfb3112daf6ae59d3eb6bb4ac260948dccef64f745c66b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s016_output"
	    wget -O "n100.r03.s016_output/n100.r03.s016.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s016_output/n100.r03.s016.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s016_output/n100.r03.s016.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s016_output/n100.r03.s016.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s016_output/n100.r03.s016.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s016_output/n100.r03.s016.reference.fas" "n100.r03.s016_output/n100.r03.s016.fq1.fastq" "n100.r03.s016_output/n100.r03.s016.fq2.fastq" | samtools view -bS - > "n100.r03.s016_output/n100.r03.s016.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s016_output/n100.r03.s016.untrimmed.sorted.bam" "n100.r03.s016_output/n100.r03.s016.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s016_output/n100.r03.s016.untrimmed.sorted.bam" -b "n100.r03.s016_output/n100.r03.s016.primers.bed" -p "n100.r03.s016_output/n100.r03.s016.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s016_output/n100.r03.s016.trimmed.sorted.bam" "n100.r03.s016_output/n100.r03.s016.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s016_output/n100.r03.s016.reference.fas" "n100.r03.s016_output/n100.r03.s016.trimmed.sorted.bam" > "n100.r03.s016_output/n100.r03.s016.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s016_output/n100.r03.s016.reference.fas" --call-indels "n100.r03.s016_output/n100.r03.s016.trimmed.sorted.bam" > "n100.r03.s016_output/n100.r03.s016.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s016_output/n100.r03.s016.trimmed.sorted.bam" > "n100.r03.s016_output/n100.r03.s016.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s016_output/n100.r03.s016.depth.txt" "n100.r03.s016_output/n100.r03.s016.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s016_output/n100.r03.s016.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s016_output/n100.r03.s016.reference.fas" | bcftools consensus -m "n100.r03.s016_output/n100.r03.s016.low_depth.tsv" tmp.vcf.gz > "n100.r03.s016_output/n100.r03.s016.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s016_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:33 scheduler task 529ecf42 (flow e43f35d3): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:33 scheduler task 529ecf42 (flow e43f35d3): waiting for completion (try 0): started
2021/07/08 16:44:33  ->  n100.r03.s075.Main.out_file e43f35d3 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:33 n100.r03.s075.Main.out_file e43f35d3 n100/r03/n100.r03.s075.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c9df3e9c2c197796726365988b8b755ba982f676c9a1e5873459d3440ad2b75f
	sha256:e43f35d3867a298306e2843aadbc27f3fda1b88bee1d0bbedbe04108fcbb45fe
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/529ecf42cb3bf0b947737280a70b19ea9433f74259ac79a2eac36ac48b152be2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s075_output"
	    wget -O "n100.r03.s075_output/n100.r03.s075.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s075_output/n100.r03.s075.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s075_output/n100.r03.s075.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s075_output/n100.r03.s075.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s075_output/n100.r03.s075.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s075_output/n100.r03.s075.reference.fas" "n100.r03.s075_output/n100.r03.s075.fq1.fastq" "n100.r03.s075_output/n100.r03.s075.fq2.fastq" | samtools view -bS - > "n100.r03.s075_output/n100.r03.s075.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s075_output/n100.r03.s075.untrimmed.sorted.bam" "n100.r03.s075_output/n100.r03.s075.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s075_output/n100.r03.s075.untrimmed.sorted.bam" -b "n100.r03.s075_output/n100.r03.s075.primers.bed" -p "n100.r03.s075_output/n100.r03.s075.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s075_output/n100.r03.s075.trimmed.sorted.bam" "n100.r03.s075_output/n100.r03.s075.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s075_output/n100.r03.s075.reference.fas" "n100.r03.s075_output/n100.r03.s075.trimmed.sorted.bam" > "n100.r03.s075_output/n100.r03.s075.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s075_output/n100.r03.s075.reference.fas" --call-indels "n100.r03.s075_output/n100.r03.s075.trimmed.sorted.bam" > "n100.r03.s075_output/n100.r03.s075.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s075_output/n100.r03.s075.trimmed.sorted.bam" > "n100.r03.s075_output/n100.r03.s075.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s075_output/n100.r03.s075.depth.txt" "n100.r03.s075_output/n100.r03.s075.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s075_output/n100.r03.s075.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s075_output/n100.r03.s075.reference.fas" | bcftools consensus -m "n100.r03.s075_output/n100.r03.s075.low_depth.tsv" tmp.vcf.gz > "n100.r03.s075_output/n100.r03.s075.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s075_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:34 scheduler task 6ab20197 (flow e04e53c6): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:34 scheduler task 6ab20197 (flow e04e53c6): waiting for completion (try 0): started
2021/07/08 16:44:34  ->  n100.r03.s073.Main.out_file e04e53c6 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:34 n100.r03.s073.Main.out_file e04e53c6 n100/r03/n100.r03.s073.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f5b033cde1e803845ea6a6a0036900cfb2fc6d848d59e27094ceba042b03415a
	sha256:e04e53c62879726c2cefa16b5a92b022d22d5ae6f7f1884028ffb3573d673512
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6ab201975f136cfa914c8a825bcef2330a4bf83a33bd20e67e4677d0bb91fb16
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s073_output"
	    wget -O "n100.r03.s073_output/n100.r03.s073.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s073_output/n100.r03.s073.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s073_output/n100.r03.s073.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s073_output/n100.r03.s073.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s073_output/n100.r03.s073.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s073_output/n100.r03.s073.reference.fas" "n100.r03.s073_output/n100.r03.s073.fq1.fastq" "n100.r03.s073_output/n100.r03.s073.fq2.fastq" | samtools view -bS - > "n100.r03.s073_output/n100.r03.s073.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s073_output/n100.r03.s073.untrimmed.sorted.bam" "n100.r03.s073_output/n100.r03.s073.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s073_output/n100.r03.s073.untrimmed.sorted.bam" -b "n100.r03.s073_output/n100.r03.s073.primers.bed" -p "n100.r03.s073_output/n100.r03.s073.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s073_output/n100.r03.s073.trimmed.sorted.bam" "n100.r03.s073_output/n100.r03.s073.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s073_output/n100.r03.s073.reference.fas" "n100.r03.s073_output/n100.r03.s073.trimmed.sorted.bam" > "n100.r03.s073_output/n100.r03.s073.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s073_output/n100.r03.s073.reference.fas" --call-indels "n100.r03.s073_output/n100.r03.s073.trimmed.sorted.bam" > "n100.r03.s073_output/n100.r03.s073.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s073_output/n100.r03.s073.trimmed.sorted.bam" > "n100.r03.s073_output/n100.r03.s073.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s073_output/n100.r03.s073.depth.txt" "n100.r03.s073_output/n100.r03.s073.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s073_output/n100.r03.s073.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s073_output/n100.r03.s073.reference.fas" | bcftools consensus -m "n100.r03.s073_output/n100.r03.s073.low_depth.tsv" tmp.vcf.gz > "n100.r03.s073_output/n100.r03.s073.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s073_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:34 scheduler task df81b75e (flow c2a25c99): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:34 scheduler task df81b75e (flow c2a25c99): waiting for completion (try 0): started
2021/07/08 16:44:34  ->  n100.r03.s008.Main.out_file c2a25c99 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:34 n100.r03.s008.Main.out_file c2a25c99 n100/r03/n100.r03.s008.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:42a400b7ec7b240f27084b928143cd5c1596910646725c130fd8d8da4976b2c3
	sha256:c2a25c99bd2f0262707e7733e10aa74666b031d04b84057c68074e75623a1593
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/df81b75e15668f634b923eb595e0dbfd78c3eabf54fce65b242587da239ad4ff
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s008_output"
	    wget -O "n100.r03.s008_output/n100.r03.s008.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s008_output/n100.r03.s008.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s008_output/n100.r03.s008.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s008_output/n100.r03.s008.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s008_output/n100.r03.s008.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s008_output/n100.r03.s008.reference.fas" "n100.r03.s008_output/n100.r03.s008.fq1.fastq" "n100.r03.s008_output/n100.r03.s008.fq2.fastq" | samtools view -bS - > "n100.r03.s008_output/n100.r03.s008.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s008_output/n100.r03.s008.untrimmed.sorted.bam" "n100.r03.s008_output/n100.r03.s008.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s008_output/n100.r03.s008.untrimmed.sorted.bam" -b "n100.r03.s008_output/n100.r03.s008.primers.bed" -p "n100.r03.s008_output/n100.r03.s008.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s008_output/n100.r03.s008.trimmed.sorted.bam" "n100.r03.s008_output/n100.r03.s008.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s008_output/n100.r03.s008.reference.fas" "n100.r03.s008_output/n100.r03.s008.trimmed.sorted.bam" > "n100.r03.s008_output/n100.r03.s008.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s008_output/n100.r03.s008.reference.fas" --call-indels "n100.r03.s008_output/n100.r03.s008.trimmed.sorted.bam" > "n100.r03.s008_output/n100.r03.s008.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s008_output/n100.r03.s008.trimmed.sorted.bam" > "n100.r03.s008_output/n100.r03.s008.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s008_output/n100.r03.s008.depth.txt" "n100.r03.s008_output/n100.r03.s008.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s008_output/n100.r03.s008.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s008_output/n100.r03.s008.reference.fas" | bcftools consensus -m "n100.r03.s008_output/n100.r03.s008.low_depth.tsv" tmp.vcf.gz > "n100.r03.s008_output/n100.r03.s008.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s008_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:34 scheduler task 7194b040 (flow e2be785d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:34 scheduler task 7194b040 (flow e2be785d): waiting for completion (try 0): started
2021/07/08 16:44:34  ->  n100.r03.s067.Main.out_file e2be785d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:34 n100.r03.s067.Main.out_file e2be785d n100/r03/n100.r03.s067.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4accf0c59fdf52df70e5c93a8a59062547f26c8d70f42a52b8cabbdd7edaecf2
	sha256:e2be785d56ec5d002120b57ca1b00c0fa2f5e194522fc4daff3579ae2bce2dd2
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7194b040b6d51f7d7f703f2a10794cf14c9ae3ba933ac5f41b91824bc652185f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s067_output"
	    wget -O "n100.r03.s067_output/n100.r03.s067.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s067_output/n100.r03.s067.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s067_output/n100.r03.s067.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s067_output/n100.r03.s067.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s067_output/n100.r03.s067.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s067_output/n100.r03.s067.reference.fas" "n100.r03.s067_output/n100.r03.s067.fq1.fastq" "n100.r03.s067_output/n100.r03.s067.fq2.fastq" | samtools view -bS - > "n100.r03.s067_output/n100.r03.s067.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s067_output/n100.r03.s067.untrimmed.sorted.bam" "n100.r03.s067_output/n100.r03.s067.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s067_output/n100.r03.s067.untrimmed.sorted.bam" -b "n100.r03.s067_output/n100.r03.s067.primers.bed" -p "n100.r03.s067_output/n100.r03.s067.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s067_output/n100.r03.s067.trimmed.sorted.bam" "n100.r03.s067_output/n100.r03.s067.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s067_output/n100.r03.s067.reference.fas" "n100.r03.s067_output/n100.r03.s067.trimmed.sorted.bam" > "n100.r03.s067_output/n100.r03.s067.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s067_output/n100.r03.s067.reference.fas" --call-indels "n100.r03.s067_output/n100.r03.s067.trimmed.sorted.bam" > "n100.r03.s067_output/n100.r03.s067.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s067_output/n100.r03.s067.trimmed.sorted.bam" > "n100.r03.s067_output/n100.r03.s067.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s067_output/n100.r03.s067.depth.txt" "n100.r03.s067_output/n100.r03.s067.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s067_output/n100.r03.s067.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s067_output/n100.r03.s067.reference.fas" | bcftools consensus -m "n100.r03.s067_output/n100.r03.s067.low_depth.tsv" tmp.vcf.gz > "n100.r03.s067_output/n100.r03.s067.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s067_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:34 scheduler task 755dfd3e (flow 34520b39): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:34 scheduler task 755dfd3e (flow 34520b39): waiting for completion (try 0): started
2021/07/08 16:44:34  ->  n100.r03.s074.Main.out_file 34520b39 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:34 n100.r03.s074.Main.out_file 34520b39 n100/r03/n100.r03.s074.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:74defd34fbc6b7189a72a9733be80f2ace562648afc98f1813c221cac77e7926
	sha256:34520b39139d59b297f6c953fc18145f9036d60de3e14a0aee5c04b4b4dea2f0
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/755dfd3ef41a9aae7bbee9f65b8291950e40fb3368013e7eadf4bf60979801f1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s074_output"
	    wget -O "n100.r03.s074_output/n100.r03.s074.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s074_output/n100.r03.s074.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s074_output/n100.r03.s074.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s074_output/n100.r03.s074.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s074_output/n100.r03.s074.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s074_output/n100.r03.s074.reference.fas" "n100.r03.s074_output/n100.r03.s074.fq1.fastq" "n100.r03.s074_output/n100.r03.s074.fq2.fastq" | samtools view -bS - > "n100.r03.s074_output/n100.r03.s074.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s074_output/n100.r03.s074.untrimmed.sorted.bam" "n100.r03.s074_output/n100.r03.s074.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s074_output/n100.r03.s074.untrimmed.sorted.bam" -b "n100.r03.s074_output/n100.r03.s074.primers.bed" -p "n100.r03.s074_output/n100.r03.s074.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s074_output/n100.r03.s074.trimmed.sorted.bam" "n100.r03.s074_output/n100.r03.s074.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s074_output/n100.r03.s074.reference.fas" "n100.r03.s074_output/n100.r03.s074.trimmed.sorted.bam" > "n100.r03.s074_output/n100.r03.s074.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s074_output/n100.r03.s074.reference.fas" --call-indels "n100.r03.s074_output/n100.r03.s074.trimmed.sorted.bam" > "n100.r03.s074_output/n100.r03.s074.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s074_output/n100.r03.s074.trimmed.sorted.bam" > "n100.r03.s074_output/n100.r03.s074.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s074_output/n100.r03.s074.depth.txt" "n100.r03.s074_output/n100.r03.s074.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s074_output/n100.r03.s074.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s074_output/n100.r03.s074.reference.fas" | bcftools consensus -m "n100.r03.s074_output/n100.r03.s074.low_depth.tsv" tmp.vcf.gz > "n100.r03.s074_output/n100.r03.s074.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s074_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:34 scheduler task e7b857e8 (flow 4dfce054): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:34 scheduler task e7b857e8 (flow 4dfce054): waiting for completion (try 0): started
2021/07/08 16:44:34  ->  n100.r03.s049.Main.out_file 4dfce054 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:34 n100.r03.s049.Main.out_file 4dfce054 n100/r03/n100.r03.s049.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1d25ed1e1a6ce0941e1cf23f97b96d6623171a2046df205b16afdc339c2814e5
	sha256:4dfce054ad308155dd60547b5d82460d277e291aedde57b9406ac03742b50f0d
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e7b857e83c05a20442c0820a9a62e54fb67749c806d8c9bf78c7305eb975be90
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s049_output"
	    wget -O "n100.r03.s049_output/n100.r03.s049.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s049_output/n100.r03.s049.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s049_output/n100.r03.s049.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s049_output/n100.r03.s049.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s049_output/n100.r03.s049.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s049_output/n100.r03.s049.reference.fas" "n100.r03.s049_output/n100.r03.s049.fq1.fastq" "n100.r03.s049_output/n100.r03.s049.fq2.fastq" | samtools view -bS - > "n100.r03.s049_output/n100.r03.s049.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s049_output/n100.r03.s049.untrimmed.sorted.bam" "n100.r03.s049_output/n100.r03.s049.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s049_output/n100.r03.s049.untrimmed.sorted.bam" -b "n100.r03.s049_output/n100.r03.s049.primers.bed" -p "n100.r03.s049_output/n100.r03.s049.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s049_output/n100.r03.s049.trimmed.sorted.bam" "n100.r03.s049_output/n100.r03.s049.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s049_output/n100.r03.s049.reference.fas" "n100.r03.s049_output/n100.r03.s049.trimmed.sorted.bam" > "n100.r03.s049_output/n100.r03.s049.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s049_output/n100.r03.s049.reference.fas" --call-indels "n100.r03.s049_output/n100.r03.s049.trimmed.sorted.bam" > "n100.r03.s049_output/n100.r03.s049.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s049_output/n100.r03.s049.trimmed.sorted.bam" > "n100.r03.s049_output/n100.r03.s049.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s049_output/n100.r03.s049.depth.txt" "n100.r03.s049_output/n100.r03.s049.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s049_output/n100.r03.s049.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s049_output/n100.r03.s049.reference.fas" | bcftools consensus -m "n100.r03.s049_output/n100.r03.s049.low_depth.tsv" tmp.vcf.gz > "n100.r03.s049_output/n100.r03.s049.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s049_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:34 scheduler task f8950918 (flow 8df3e478): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:34 scheduler task f8950918 (flow 8df3e478): waiting for completion (try 0): started
2021/07/08 16:44:34  ->  n100.r03.s061.Main.out_file 8df3e478 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:34 n100.r03.s061.Main.out_file 8df3e478 n100/r03/n100.r03.s061.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8694e27565d8ba232cbce6ad84a0cf98b67f8b63fdeee453939d1bcdb32d337e
	sha256:8df3e4782cf3d1ba83cdea2563fb17ec5a7fcd1ad49bb3a23ad19fc1fce132bb
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f89509189bd3974839dc92500367fa849bad51a85fe097e3be3185c9a1606cfd
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s061_output"
	    wget -O "n100.r03.s061_output/n100.r03.s061.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s061_output/n100.r03.s061.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s061_output/n100.r03.s061.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s061_output/n100.r03.s061.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s061_output/n100.r03.s061.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s061_output/n100.r03.s061.reference.fas" "n100.r03.s061_output/n100.r03.s061.fq1.fastq" "n100.r03.s061_output/n100.r03.s061.fq2.fastq" | samtools view -bS - > "n100.r03.s061_output/n100.r03.s061.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s061_output/n100.r03.s061.untrimmed.sorted.bam" "n100.r03.s061_output/n100.r03.s061.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s061_output/n100.r03.s061.untrimmed.sorted.bam" -b "n100.r03.s061_output/n100.r03.s061.primers.bed" -p "n100.r03.s061_output/n100.r03.s061.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s061_output/n100.r03.s061.trimmed.sorted.bam" "n100.r03.s061_output/n100.r03.s061.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s061_output/n100.r03.s061.reference.fas" "n100.r03.s061_output/n100.r03.s061.trimmed.sorted.bam" > "n100.r03.s061_output/n100.r03.s061.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s061_output/n100.r03.s061.reference.fas" --call-indels "n100.r03.s061_output/n100.r03.s061.trimmed.sorted.bam" > "n100.r03.s061_output/n100.r03.s061.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s061_output/n100.r03.s061.trimmed.sorted.bam" > "n100.r03.s061_output/n100.r03.s061.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s061_output/n100.r03.s061.depth.txt" "n100.r03.s061_output/n100.r03.s061.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s061_output/n100.r03.s061.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s061_output/n100.r03.s061.reference.fas" | bcftools consensus -m "n100.r03.s061_output/n100.r03.s061.low_depth.tsv" tmp.vcf.gz > "n100.r03.s061_output/n100.r03.s061.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s061_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:35 scheduler task 2128313b (flow 9e4c852f): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:35 scheduler task 2128313b (flow 9e4c852f): waiting for completion (try 0): started
2021/07/08 16:44:35  ->  n100.r03.s041.Main.out_file 9e4c852f exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:35 n100.r03.s041.Main.out_file 9e4c852f n100/r03/n100.r03.s041.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:33a3e1cee9e4caef33727e3bff541e5e5507ee7a34d39147032979db6f6830b8
	sha256:9e4c852f77f5e84c49aedd026de0bb3273537b59b338aaa9cf66c369c85459d5
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2128313be759c33cb41a44111e63e6944de98327a4da53be90b9a318fbc670ec
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s041_output"
	    wget -O "n100.r03.s041_output/n100.r03.s041.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s041_output/n100.r03.s041.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s041_output/n100.r03.s041.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s041_output/n100.r03.s041.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s041_output/n100.r03.s041.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s041_output/n100.r03.s041.reference.fas" "n100.r03.s041_output/n100.r03.s041.fq1.fastq" "n100.r03.s041_output/n100.r03.s041.fq2.fastq" | samtools view -bS - > "n100.r03.s041_output/n100.r03.s041.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s041_output/n100.r03.s041.untrimmed.sorted.bam" "n100.r03.s041_output/n100.r03.s041.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s041_output/n100.r03.s041.untrimmed.sorted.bam" -b "n100.r03.s041_output/n100.r03.s041.primers.bed" -p "n100.r03.s041_output/n100.r03.s041.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s041_output/n100.r03.s041.trimmed.sorted.bam" "n100.r03.s041_output/n100.r03.s041.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s041_output/n100.r03.s041.reference.fas" "n100.r03.s041_output/n100.r03.s041.trimmed.sorted.bam" > "n100.r03.s041_output/n100.r03.s041.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s041_output/n100.r03.s041.reference.fas" --call-indels "n100.r03.s041_output/n100.r03.s041.trimmed.sorted.bam" > "n100.r03.s041_output/n100.r03.s041.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s041_output/n100.r03.s041.trimmed.sorted.bam" > "n100.r03.s041_output/n100.r03.s041.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s041_output/n100.r03.s041.depth.txt" "n100.r03.s041_output/n100.r03.s041.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s041_output/n100.r03.s041.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s041_output/n100.r03.s041.reference.fas" | bcftools consensus -m "n100.r03.s041_output/n100.r03.s041.low_depth.tsv" tmp.vcf.gz > "n100.r03.s041_output/n100.r03.s041.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s041_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:35 scheduler task 5009eabe (flow 942ecb0a): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:35 scheduler task 5009eabe (flow 942ecb0a): waiting for completion (try 0): started
2021/07/08 16:44:35  ->  n100.r03.s039.Main.out_file 942ecb0a exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:35 n100.r03.s039.Main.out_file 942ecb0a n100/r03/n100.r03.s039.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f1f7e96c3e3c1910e1bdac783dd39eac471d228b47bfc938bdedb19041c1dc9d
	sha256:942ecb0a8ce51ec04d61836a7f1310a58eacb7791b445dfd081b2f146d7219df
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5009eabe1ce91bf19c802b55ac41d12913e6e52aba49a1720c90582427294b7e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s039_output"
	    wget -O "n100.r03.s039_output/n100.r03.s039.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s039_output/n100.r03.s039.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s039_output/n100.r03.s039.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s039_output/n100.r03.s039.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s039_output/n100.r03.s039.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s039_output/n100.r03.s039.reference.fas" "n100.r03.s039_output/n100.r03.s039.fq1.fastq" "n100.r03.s039_output/n100.r03.s039.fq2.fastq" | samtools view -bS - > "n100.r03.s039_output/n100.r03.s039.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s039_output/n100.r03.s039.untrimmed.sorted.bam" "n100.r03.s039_output/n100.r03.s039.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s039_output/n100.r03.s039.untrimmed.sorted.bam" -b "n100.r03.s039_output/n100.r03.s039.primers.bed" -p "n100.r03.s039_output/n100.r03.s039.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s039_output/n100.r03.s039.trimmed.sorted.bam" "n100.r03.s039_output/n100.r03.s039.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s039_output/n100.r03.s039.reference.fas" "n100.r03.s039_output/n100.r03.s039.trimmed.sorted.bam" > "n100.r03.s039_output/n100.r03.s039.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s039_output/n100.r03.s039.reference.fas" --call-indels "n100.r03.s039_output/n100.r03.s039.trimmed.sorted.bam" > "n100.r03.s039_output/n100.r03.s039.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s039_output/n100.r03.s039.trimmed.sorted.bam" > "n100.r03.s039_output/n100.r03.s039.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s039_output/n100.r03.s039.depth.txt" "n100.r03.s039_output/n100.r03.s039.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s039_output/n100.r03.s039.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s039_output/n100.r03.s039.reference.fas" | bcftools consensus -m "n100.r03.s039_output/n100.r03.s039.low_depth.tsv" tmp.vcf.gz > "n100.r03.s039_output/n100.r03.s039.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s039_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:35 scheduler task 86cdbd24 (flow ec5d5436): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:35 scheduler task 86cdbd24 (flow ec5d5436): waiting for completion (try 0): started
2021/07/08 16:44:35  ->  n100.r03.s066.Main.out_file ec5d5436 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:35 n100.r03.s066.Main.out_file ec5d5436 n100/r03/n100.r03.s066.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a162691d93d1cdaf6bae8e21bebf581387d99adf589b62c7a23ffad0f29fecab
	sha256:ec5d5436c5577d3c0b9821d1b2d031768f27dbb91b3a3132d20c5a5bba2b252f
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/86cdbd24fb924c2b4ffd22858ab881a021cd5f28ca4c66225d2cdf6fcc4f373a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s066_output"
	    wget -O "n100.r03.s066_output/n100.r03.s066.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s066_output/n100.r03.s066.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s066_output/n100.r03.s066.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s066_output/n100.r03.s066.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s066_output/n100.r03.s066.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s066_output/n100.r03.s066.reference.fas" "n100.r03.s066_output/n100.r03.s066.fq1.fastq" "n100.r03.s066_output/n100.r03.s066.fq2.fastq" | samtools view -bS - > "n100.r03.s066_output/n100.r03.s066.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s066_output/n100.r03.s066.untrimmed.sorted.bam" "n100.r03.s066_output/n100.r03.s066.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s066_output/n100.r03.s066.untrimmed.sorted.bam" -b "n100.r03.s066_output/n100.r03.s066.primers.bed" -p "n100.r03.s066_output/n100.r03.s066.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s066_output/n100.r03.s066.trimmed.sorted.bam" "n100.r03.s066_output/n100.r03.s066.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s066_output/n100.r03.s066.reference.fas" "n100.r03.s066_output/n100.r03.s066.trimmed.sorted.bam" > "n100.r03.s066_output/n100.r03.s066.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s066_output/n100.r03.s066.reference.fas" --call-indels "n100.r03.s066_output/n100.r03.s066.trimmed.sorted.bam" > "n100.r03.s066_output/n100.r03.s066.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s066_output/n100.r03.s066.trimmed.sorted.bam" > "n100.r03.s066_output/n100.r03.s066.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s066_output/n100.r03.s066.depth.txt" "n100.r03.s066_output/n100.r03.s066.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s066_output/n100.r03.s066.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s066_output/n100.r03.s066.reference.fas" | bcftools consensus -m "n100.r03.s066_output/n100.r03.s066.low_depth.tsv" tmp.vcf.gz > "n100.r03.s066_output/n100.r03.s066.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s066_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:35 scheduler task 693e99fc (flow 13424ad8): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:35 scheduler task 693e99fc (flow 13424ad8): waiting for completion (try 0): started
2021/07/08 16:44:35  ->  n100.r03.s081.Main.out_file 13424ad8 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:35 n100.r03.s081.Main.out_file 13424ad8 n100/r03/n100.r03.s081.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c55a02878f0b30c649b72a705bf0f662ce1ffd491334a41f3f1e49d0d6b173d6
	sha256:13424ad8f301195c530de7ec9c194266499ec308f8e4cd5811c9f5b549100cbb
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/693e99fc44a5aefee5d4e9b9b3bbf2a646e52f512164388eb0d0f957e7fb741b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s081_output"
	    wget -O "n100.r03.s081_output/n100.r03.s081.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s081_output/n100.r03.s081.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s081_output/n100.r03.s081.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s081_output/n100.r03.s081.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s081_output/n100.r03.s081.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s081_output/n100.r03.s081.reference.fas" "n100.r03.s081_output/n100.r03.s081.fq1.fastq" "n100.r03.s081_output/n100.r03.s081.fq2.fastq" | samtools view -bS - > "n100.r03.s081_output/n100.r03.s081.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s081_output/n100.r03.s081.untrimmed.sorted.bam" "n100.r03.s081_output/n100.r03.s081.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s081_output/n100.r03.s081.untrimmed.sorted.bam" -b "n100.r03.s081_output/n100.r03.s081.primers.bed" -p "n100.r03.s081_output/n100.r03.s081.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s081_output/n100.r03.s081.trimmed.sorted.bam" "n100.r03.s081_output/n100.r03.s081.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s081_output/n100.r03.s081.reference.fas" "n100.r03.s081_output/n100.r03.s081.trimmed.sorted.bam" > "n100.r03.s081_output/n100.r03.s081.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s081_output/n100.r03.s081.reference.fas" --call-indels "n100.r03.s081_output/n100.r03.s081.trimmed.sorted.bam" > "n100.r03.s081_output/n100.r03.s081.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s081_output/n100.r03.s081.trimmed.sorted.bam" > "n100.r03.s081_output/n100.r03.s081.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s081_output/n100.r03.s081.depth.txt" "n100.r03.s081_output/n100.r03.s081.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s081_output/n100.r03.s081.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s081_output/n100.r03.s081.reference.fas" | bcftools consensus -m "n100.r03.s081_output/n100.r03.s081.low_depth.tsv" tmp.vcf.gz > "n100.r03.s081_output/n100.r03.s081.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s081_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:35 scheduler task ca4ff408 (flow 5e2cc6ee): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:35 scheduler task ca4ff408 (flow 5e2cc6ee): waiting for completion (try 0): started
2021/07/08 16:44:35  ->  n100.r03.s051.Main.out_file 5e2cc6ee exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:35 n100.r03.s051.Main.out_file 5e2cc6ee n100/r03/n100.r03.s051.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c1df2badb5ac8e29c96b153054ab56f03139131d138e9f2011ff99943eeab5f0
	sha256:5e2cc6eeba44a8083e6c9ab39f70d6f6d36e65aa5b15cad5678398771e1ee423
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ca4ff408f4f394fdc0bff2f43e63e4a3ae6ea9c4756e6450dab8ceb03529f2a7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s051_output"
	    wget -O "n100.r03.s051_output/n100.r03.s051.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s051_output/n100.r03.s051.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s051_output/n100.r03.s051.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s051_output/n100.r03.s051.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s051_output/n100.r03.s051.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s051_output/n100.r03.s051.reference.fas" "n100.r03.s051_output/n100.r03.s051.fq1.fastq" "n100.r03.s051_output/n100.r03.s051.fq2.fastq" | samtools view -bS - > "n100.r03.s051_output/n100.r03.s051.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s051_output/n100.r03.s051.untrimmed.sorted.bam" "n100.r03.s051_output/n100.r03.s051.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s051_output/n100.r03.s051.untrimmed.sorted.bam" -b "n100.r03.s051_output/n100.r03.s051.primers.bed" -p "n100.r03.s051_output/n100.r03.s051.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s051_output/n100.r03.s051.trimmed.sorted.bam" "n100.r03.s051_output/n100.r03.s051.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s051_output/n100.r03.s051.reference.fas" "n100.r03.s051_output/n100.r03.s051.trimmed.sorted.bam" > "n100.r03.s051_output/n100.r03.s051.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s051_output/n100.r03.s051.reference.fas" --call-indels "n100.r03.s051_output/n100.r03.s051.trimmed.sorted.bam" > "n100.r03.s051_output/n100.r03.s051.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s051_output/n100.r03.s051.trimmed.sorted.bam" > "n100.r03.s051_output/n100.r03.s051.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s051_output/n100.r03.s051.depth.txt" "n100.r03.s051_output/n100.r03.s051.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s051_output/n100.r03.s051.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s051_output/n100.r03.s051.reference.fas" | bcftools consensus -m "n100.r03.s051_output/n100.r03.s051.low_depth.tsv" tmp.vcf.gz > "n100.r03.s051_output/n100.r03.s051.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s051_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:35 scheduler task 06223123 (flow ffbd06ba): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:35 scheduler task 06223123 (flow ffbd06ba): waiting for completion (try 0): started
2021/07/08 16:44:35  ->  n100.r03.s034.Main.out_file ffbd06ba exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:35 n100.r03.s034.Main.out_file ffbd06ba n100/r03/n100.r03.s034.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ef978fd25275e4d32b11e8cd07d830af8888d3cea63bcc0b66f4e9de4dc9d7f7
	sha256:ffbd06bac9541ad1452d0e2fc653684861f07ba8243dba3fef308927a4cee7eb
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/06223123ff926c41becc30381c7532e2ee57fc6f2d8612f53daa6ac4bd3bfbe1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s034_output"
	    wget -O "n100.r03.s034_output/n100.r03.s034.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s034_output/n100.r03.s034.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s034_output/n100.r03.s034.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s034_output/n100.r03.s034.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s034_output/n100.r03.s034.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s034_output/n100.r03.s034.reference.fas" "n100.r03.s034_output/n100.r03.s034.fq1.fastq" "n100.r03.s034_output/n100.r03.s034.fq2.fastq" | samtools view -bS - > "n100.r03.s034_output/n100.r03.s034.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s034_output/n100.r03.s034.untrimmed.sorted.bam" "n100.r03.s034_output/n100.r03.s034.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s034_output/n100.r03.s034.untrimmed.sorted.bam" -b "n100.r03.s034_output/n100.r03.s034.primers.bed" -p "n100.r03.s034_output/n100.r03.s034.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s034_output/n100.r03.s034.trimmed.sorted.bam" "n100.r03.s034_output/n100.r03.s034.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s034_output/n100.r03.s034.reference.fas" "n100.r03.s034_output/n100.r03.s034.trimmed.sorted.bam" > "n100.r03.s034_output/n100.r03.s034.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s034_output/n100.r03.s034.reference.fas" --call-indels "n100.r03.s034_output/n100.r03.s034.trimmed.sorted.bam" > "n100.r03.s034_output/n100.r03.s034.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s034_output/n100.r03.s034.trimmed.sorted.bam" > "n100.r03.s034_output/n100.r03.s034.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s034_output/n100.r03.s034.depth.txt" "n100.r03.s034_output/n100.r03.s034.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s034_output/n100.r03.s034.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s034_output/n100.r03.s034.reference.fas" | bcftools consensus -m "n100.r03.s034_output/n100.r03.s034.low_depth.tsv" tmp.vcf.gz > "n100.r03.s034_output/n100.r03.s034.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s034_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:36 scheduler task 97699c51 (flow ea5d62c8): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:36 scheduler task 97699c51 (flow ea5d62c8): waiting for completion (try 0): started
2021/07/08 16:44:36  ->  n100.r03.s001.Main.out_file ea5d62c8 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:36 n100.r03.s001.Main.out_file ea5d62c8 n100/r03/n100.r03.s001.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:dbb3b8debdb41fe52e632ed1c7a00a700ab2805b64a18ed5b589812e7e376f2a
	sha256:ea5d62c89870254ef61e7c4d7e49c97eda4c303ae520b495e2d368b624f82e8c
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/97699c515100e17d1b0a74a6408c22acf195a27bf6e042a3502c8c4c71d400c9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s001_output"
	    wget -O "n100.r03.s001_output/n100.r03.s001.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s001_output/n100.r03.s001.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s001_output/n100.r03.s001.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s001_output/n100.r03.s001.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s001_output/n100.r03.s001.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s001_output/n100.r03.s001.reference.fas" "n100.r03.s001_output/n100.r03.s001.fq1.fastq" "n100.r03.s001_output/n100.r03.s001.fq2.fastq" | samtools view -bS - > "n100.r03.s001_output/n100.r03.s001.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s001_output/n100.r03.s001.untrimmed.sorted.bam" "n100.r03.s001_output/n100.r03.s001.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s001_output/n100.r03.s001.untrimmed.sorted.bam" -b "n100.r03.s001_output/n100.r03.s001.primers.bed" -p "n100.r03.s001_output/n100.r03.s001.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s001_output/n100.r03.s001.trimmed.sorted.bam" "n100.r03.s001_output/n100.r03.s001.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s001_output/n100.r03.s001.reference.fas" "n100.r03.s001_output/n100.r03.s001.trimmed.sorted.bam" > "n100.r03.s001_output/n100.r03.s001.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s001_output/n100.r03.s001.reference.fas" --call-indels "n100.r03.s001_output/n100.r03.s001.trimmed.sorted.bam" > "n100.r03.s001_output/n100.r03.s001.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s001_output/n100.r03.s001.trimmed.sorted.bam" > "n100.r03.s001_output/n100.r03.s001.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s001_output/n100.r03.s001.depth.txt" "n100.r03.s001_output/n100.r03.s001.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s001_output/n100.r03.s001.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s001_output/n100.r03.s001.reference.fas" | bcftools consensus -m "n100.r03.s001_output/n100.r03.s001.low_depth.tsv" tmp.vcf.gz > "n100.r03.s001_output/n100.r03.s001.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s001_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:36 scheduler task 754701b2 (flow a896295a): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:36 scheduler task 754701b2 (flow a896295a): waiting for completion (try 0): started
2021/07/08 16:44:36  ->  n100.r03.s069.Main.out_file a896295a exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:36 n100.r03.s069.Main.out_file a896295a n100/r03/n100.r03.s069.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1d941d7ef69747946216c38d7c7e551b11cad51fac7eca9f47e391f3ccca3912
	sha256:a896295abfb941bb4b6d4ee4e685b0cb86e0958295bf937addad60dae137ed4f
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/754701b2a68e33516d1b959cf8dd96297a156894d024b5107a3c21aa25603400
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s069_output"
	    wget -O "n100.r03.s069_output/n100.r03.s069.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s069_output/n100.r03.s069.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s069_output/n100.r03.s069.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s069_output/n100.r03.s069.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s069_output/n100.r03.s069.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s069_output/n100.r03.s069.reference.fas" "n100.r03.s069_output/n100.r03.s069.fq1.fastq" "n100.r03.s069_output/n100.r03.s069.fq2.fastq" | samtools view -bS - > "n100.r03.s069_output/n100.r03.s069.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s069_output/n100.r03.s069.untrimmed.sorted.bam" "n100.r03.s069_output/n100.r03.s069.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s069_output/n100.r03.s069.untrimmed.sorted.bam" -b "n100.r03.s069_output/n100.r03.s069.primers.bed" -p "n100.r03.s069_output/n100.r03.s069.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s069_output/n100.r03.s069.trimmed.sorted.bam" "n100.r03.s069_output/n100.r03.s069.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s069_output/n100.r03.s069.reference.fas" "n100.r03.s069_output/n100.r03.s069.trimmed.sorted.bam" > "n100.r03.s069_output/n100.r03.s069.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s069_output/n100.r03.s069.reference.fas" --call-indels "n100.r03.s069_output/n100.r03.s069.trimmed.sorted.bam" > "n100.r03.s069_output/n100.r03.s069.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s069_output/n100.r03.s069.trimmed.sorted.bam" > "n100.r03.s069_output/n100.r03.s069.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s069_output/n100.r03.s069.depth.txt" "n100.r03.s069_output/n100.r03.s069.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s069_output/n100.r03.s069.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s069_output/n100.r03.s069.reference.fas" | bcftools consensus -m "n100.r03.s069_output/n100.r03.s069.low_depth.tsv" tmp.vcf.gz > "n100.r03.s069_output/n100.r03.s069.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s069_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:36 scheduler task 9fef0d8c (flow f673c693): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:36 scheduler task 9fef0d8c (flow f673c693): waiting for completion (try 0): started
2021/07/08 16:44:36  ->  n100.r03.s091.Main.out_file f673c693 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:36 n100.r03.s091.Main.out_file f673c693 n100/r03/n100.r03.s091.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:cebbc5478268d80bf17550116de75359ad4d42becc1e13e03071c8fc7e841d57
	sha256:f673c693108b7654e4ad7c02af0e0b4d896b545927e7c696f146d412e05ed6a3
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9fef0d8ca4892d4781cf792e265180c1c8dcfacc552097f471fe65363ec5e708
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s091_output"
	    wget -O "n100.r03.s091_output/n100.r03.s091.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s091_output/n100.r03.s091.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s091_output/n100.r03.s091.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s091_output/n100.r03.s091.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s091_output/n100.r03.s091.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s091_output/n100.r03.s091.reference.fas" "n100.r03.s091_output/n100.r03.s091.fq1.fastq" "n100.r03.s091_output/n100.r03.s091.fq2.fastq" | samtools view -bS - > "n100.r03.s091_output/n100.r03.s091.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s091_output/n100.r03.s091.untrimmed.sorted.bam" "n100.r03.s091_output/n100.r03.s091.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s091_output/n100.r03.s091.untrimmed.sorted.bam" -b "n100.r03.s091_output/n100.r03.s091.primers.bed" -p "n100.r03.s091_output/n100.r03.s091.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s091_output/n100.r03.s091.trimmed.sorted.bam" "n100.r03.s091_output/n100.r03.s091.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s091_output/n100.r03.s091.reference.fas" "n100.r03.s091_output/n100.r03.s091.trimmed.sorted.bam" > "n100.r03.s091_output/n100.r03.s091.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s091_output/n100.r03.s091.reference.fas" --call-indels "n100.r03.s091_output/n100.r03.s091.trimmed.sorted.bam" > "n100.r03.s091_output/n100.r03.s091.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s091_output/n100.r03.s091.trimmed.sorted.bam" > "n100.r03.s091_output/n100.r03.s091.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s091_output/n100.r03.s091.depth.txt" "n100.r03.s091_output/n100.r03.s091.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s091_output/n100.r03.s091.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s091_output/n100.r03.s091.reference.fas" | bcftools consensus -m "n100.r03.s091_output/n100.r03.s091.low_depth.tsv" tmp.vcf.gz > "n100.r03.s091_output/n100.r03.s091.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s091_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:36 scheduler task a64ed56a (flow dcbde93f): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:36 scheduler task a64ed56a (flow dcbde93f): waiting for completion (try 0): started
2021/07/08 16:44:36  ->  n100.r03.s030.Main.out_file dcbde93f exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:36 n100.r03.s030.Main.out_file dcbde93f n100/r03/n100.r03.s030.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e09ac3330ea125f29e6a5dd74af31eaa7e30f94a087040fe0f8614a5337d3078
	sha256:dcbde93f291f626dcade5d69a7bea49744ca5b38c26969421dd81804192f4e7c
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a64ed56a9e859acab53eb03b96e065f7fca8a5daaa6a629065953a94f8b69379
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s030_output"
	    wget -O "n100.r03.s030_output/n100.r03.s030.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s030_output/n100.r03.s030.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s030_output/n100.r03.s030.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s030_output/n100.r03.s030.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s030_output/n100.r03.s030.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s030_output/n100.r03.s030.reference.fas" "n100.r03.s030_output/n100.r03.s030.fq1.fastq" "n100.r03.s030_output/n100.r03.s030.fq2.fastq" | samtools view -bS - > "n100.r03.s030_output/n100.r03.s030.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s030_output/n100.r03.s030.untrimmed.sorted.bam" "n100.r03.s030_output/n100.r03.s030.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s030_output/n100.r03.s030.untrimmed.sorted.bam" -b "n100.r03.s030_output/n100.r03.s030.primers.bed" -p "n100.r03.s030_output/n100.r03.s030.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s030_output/n100.r03.s030.trimmed.sorted.bam" "n100.r03.s030_output/n100.r03.s030.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s030_output/n100.r03.s030.reference.fas" "n100.r03.s030_output/n100.r03.s030.trimmed.sorted.bam" > "n100.r03.s030_output/n100.r03.s030.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s030_output/n100.r03.s030.reference.fas" --call-indels "n100.r03.s030_output/n100.r03.s030.trimmed.sorted.bam" > "n100.r03.s030_output/n100.r03.s030.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s030_output/n100.r03.s030.trimmed.sorted.bam" > "n100.r03.s030_output/n100.r03.s030.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s030_output/n100.r03.s030.depth.txt" "n100.r03.s030_output/n100.r03.s030.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s030_output/n100.r03.s030.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s030_output/n100.r03.s030.reference.fas" | bcftools consensus -m "n100.r03.s030_output/n100.r03.s030.low_depth.tsv" tmp.vcf.gz > "n100.r03.s030_output/n100.r03.s030.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s030_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:36 scheduler task f165135f (flow b485700d): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:36 scheduler task f165135f (flow b485700d): waiting for completion (try 0): started
2021/07/08 16:44:36  ->  n100.r03.s085.Main.out_file b485700d exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:36 n100.r03.s085.Main.out_file b485700d n100/r03/n100.r03.s085.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8e48465798709c978ad3dc149a97f58359f866a0b7c49059162353b2f8f16486
	sha256:b485700dc2c226054fd089ee67f8f0291c1211f19b9a62180a30019776952d71
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f165135f382e84850a84eeb8307ee02c145d44f5a14a8e5cea0567edfce3ecbc
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s085_output"
	    wget -O "n100.r03.s085_output/n100.r03.s085.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s085_output/n100.r03.s085.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s085_output/n100.r03.s085.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s085_output/n100.r03.s085.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s085_output/n100.r03.s085.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s085_output/n100.r03.s085.reference.fas" "n100.r03.s085_output/n100.r03.s085.fq1.fastq" "n100.r03.s085_output/n100.r03.s085.fq2.fastq" | samtools view -bS - > "n100.r03.s085_output/n100.r03.s085.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s085_output/n100.r03.s085.untrimmed.sorted.bam" "n100.r03.s085_output/n100.r03.s085.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s085_output/n100.r03.s085.untrimmed.sorted.bam" -b "n100.r03.s085_output/n100.r03.s085.primers.bed" -p "n100.r03.s085_output/n100.r03.s085.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s085_output/n100.r03.s085.trimmed.sorted.bam" "n100.r03.s085_output/n100.r03.s085.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s085_output/n100.r03.s085.reference.fas" "n100.r03.s085_output/n100.r03.s085.trimmed.sorted.bam" > "n100.r03.s085_output/n100.r03.s085.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s085_output/n100.r03.s085.reference.fas" --call-indels "n100.r03.s085_output/n100.r03.s085.trimmed.sorted.bam" > "n100.r03.s085_output/n100.r03.s085.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s085_output/n100.r03.s085.trimmed.sorted.bam" > "n100.r03.s085_output/n100.r03.s085.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s085_output/n100.r03.s085.depth.txt" "n100.r03.s085_output/n100.r03.s085.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s085_output/n100.r03.s085.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s085_output/n100.r03.s085.reference.fas" | bcftools consensus -m "n100.r03.s085_output/n100.r03.s085.low_depth.tsv" tmp.vcf.gz > "n100.r03.s085_output/n100.r03.s085.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s085_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:36 scheduler task ad11b6f1 (flow b407f183): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:36 scheduler task ad11b6f1 (flow b407f183): waiting for completion (try 0): started
2021/07/08 16:44:36  ->  n100.r03.s046.Main.out_file b407f183 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:36 n100.r03.s046.Main.out_file b407f183 n100/r03/n100.r03.s046.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f1b74809b43a376e3de3538b7860f719c5295e33ae4ca00d389483e5282a2aa5
	sha256:b407f18375a7d787e8d0ad64cbb0ba8699d72d25522462e4a5b5d9aeba3c4430
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ad11b6f168de20994f56a60324e3907689c7ed6d21da748789ad32abff3ddd22
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s046_output"
	    wget -O "n100.r03.s046_output/n100.r03.s046.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s046_output/n100.r03.s046.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s046_output/n100.r03.s046.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s046_output/n100.r03.s046.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s046_output/n100.r03.s046.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s046_output/n100.r03.s046.reference.fas" "n100.r03.s046_output/n100.r03.s046.fq1.fastq" "n100.r03.s046_output/n100.r03.s046.fq2.fastq" | samtools view -bS - > "n100.r03.s046_output/n100.r03.s046.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s046_output/n100.r03.s046.untrimmed.sorted.bam" "n100.r03.s046_output/n100.r03.s046.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s046_output/n100.r03.s046.untrimmed.sorted.bam" -b "n100.r03.s046_output/n100.r03.s046.primers.bed" -p "n100.r03.s046_output/n100.r03.s046.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s046_output/n100.r03.s046.trimmed.sorted.bam" "n100.r03.s046_output/n100.r03.s046.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s046_output/n100.r03.s046.reference.fas" "n100.r03.s046_output/n100.r03.s046.trimmed.sorted.bam" > "n100.r03.s046_output/n100.r03.s046.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s046_output/n100.r03.s046.reference.fas" --call-indels "n100.r03.s046_output/n100.r03.s046.trimmed.sorted.bam" > "n100.r03.s046_output/n100.r03.s046.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s046_output/n100.r03.s046.trimmed.sorted.bam" > "n100.r03.s046_output/n100.r03.s046.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s046_output/n100.r03.s046.depth.txt" "n100.r03.s046_output/n100.r03.s046.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s046_output/n100.r03.s046.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s046_output/n100.r03.s046.reference.fas" | bcftools consensus -m "n100.r03.s046_output/n100.r03.s046.low_depth.tsv" tmp.vcf.gz > "n100.r03.s046_output/n100.r03.s046.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s046_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:37 scheduler task 80669d3f (flow fe21aeeb): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:37 scheduler task 80669d3f (flow fe21aeeb): waiting for completion (try 0): started
2021/07/08 16:44:37  ->  n100.r03.s026.Main.out_file fe21aeeb exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:37 n100.r03.s026.Main.out_file fe21aeeb n100/r03/n100.r03.s026.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:55a287870612a9002fb0d269439e6eeccc4717a7a6dff5e46690e06f367af6c7
	sha256:fe21aeeb51ab52bdf6ef5736776997d9746a5ac9d1b9431c60dbd542a9cdc22a
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/80669d3ff48d97d1ffd912d15419d9a83d12605b91861da28f43fc1b76232cb8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s026_output"
	    wget -O "n100.r03.s026_output/n100.r03.s026.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s026_output/n100.r03.s026.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s026_output/n100.r03.s026.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s026_output/n100.r03.s026.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s026_output/n100.r03.s026.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s026_output/n100.r03.s026.reference.fas" "n100.r03.s026_output/n100.r03.s026.fq1.fastq" "n100.r03.s026_output/n100.r03.s026.fq2.fastq" | samtools view -bS - > "n100.r03.s026_output/n100.r03.s026.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s026_output/n100.r03.s026.untrimmed.sorted.bam" "n100.r03.s026_output/n100.r03.s026.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s026_output/n100.r03.s026.untrimmed.sorted.bam" -b "n100.r03.s026_output/n100.r03.s026.primers.bed" -p "n100.r03.s026_output/n100.r03.s026.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s026_output/n100.r03.s026.trimmed.sorted.bam" "n100.r03.s026_output/n100.r03.s026.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s026_output/n100.r03.s026.reference.fas" "n100.r03.s026_output/n100.r03.s026.trimmed.sorted.bam" > "n100.r03.s026_output/n100.r03.s026.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s026_output/n100.r03.s026.reference.fas" --call-indels "n100.r03.s026_output/n100.r03.s026.trimmed.sorted.bam" > "n100.r03.s026_output/n100.r03.s026.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s026_output/n100.r03.s026.trimmed.sorted.bam" > "n100.r03.s026_output/n100.r03.s026.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s026_output/n100.r03.s026.depth.txt" "n100.r03.s026_output/n100.r03.s026.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s026_output/n100.r03.s026.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s026_output/n100.r03.s026.reference.fas" | bcftools consensus -m "n100.r03.s026_output/n100.r03.s026.low_depth.tsv" tmp.vcf.gz > "n100.r03.s026_output/n100.r03.s026.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s026_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:37 scheduler task 82950da3 (flow a420f865): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:37 scheduler task 82950da3 (flow a420f865): waiting for completion (try 0): started
2021/07/08 16:44:37  ->  n100.r03.s005.Main.out_file a420f865 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:37 n100.r03.s005.Main.out_file a420f865 n100/r03/n100.r03.s005.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3b90fe76e5d8bfe3fda72c92b5ae5233ea32fc9728db7ac450b820800df6ec08
	sha256:a420f86593cb6a697b702227b74f44fd1bce1e2c64a2fb3043610de7ad8fab05
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/82950da383e9eb3ef33400b02fc8a067b966327fe1e56fa23a76c980917b9c69
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s005_output"
	    wget -O "n100.r03.s005_output/n100.r03.s005.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s005_output/n100.r03.s005.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s005_output/n100.r03.s005.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s005_output/n100.r03.s005.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s005_output/n100.r03.s005.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s005_output/n100.r03.s005.reference.fas" "n100.r03.s005_output/n100.r03.s005.fq1.fastq" "n100.r03.s005_output/n100.r03.s005.fq2.fastq" | samtools view -bS - > "n100.r03.s005_output/n100.r03.s005.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s005_output/n100.r03.s005.untrimmed.sorted.bam" "n100.r03.s005_output/n100.r03.s005.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s005_output/n100.r03.s005.untrimmed.sorted.bam" -b "n100.r03.s005_output/n100.r03.s005.primers.bed" -p "n100.r03.s005_output/n100.r03.s005.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s005_output/n100.r03.s005.trimmed.sorted.bam" "n100.r03.s005_output/n100.r03.s005.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s005_output/n100.r03.s005.reference.fas" "n100.r03.s005_output/n100.r03.s005.trimmed.sorted.bam" > "n100.r03.s005_output/n100.r03.s005.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s005_output/n100.r03.s005.reference.fas" --call-indels "n100.r03.s005_output/n100.r03.s005.trimmed.sorted.bam" > "n100.r03.s005_output/n100.r03.s005.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s005_output/n100.r03.s005.trimmed.sorted.bam" > "n100.r03.s005_output/n100.r03.s005.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s005_output/n100.r03.s005.depth.txt" "n100.r03.s005_output/n100.r03.s005.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s005_output/n100.r03.s005.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s005_output/n100.r03.s005.reference.fas" | bcftools consensus -m "n100.r03.s005_output/n100.r03.s005.low_depth.tsv" tmp.vcf.gz > "n100.r03.s005_output/n100.r03.s005.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s005_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:37 scheduler task 11b3b7c2 (flow 7b9422b3): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:37 scheduler task 11b3b7c2 (flow 7b9422b3): waiting for completion (try 0): started
2021/07/08 16:44:37  ->  n100.r03.s071.Main.out_file 7b9422b3 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:37 n100.r03.s071.Main.out_file 7b9422b3 n100/r03/n100.r03.s071.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:cf2de270b0fd98a863667ea832487aec32eb2aca7788a6911eee8e1b8139dae4
	sha256:7b9422b37d3fb761f55a25e30173d9defc280cc52855869274f1c61e13e59a75
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/11b3b7c276a50d66511b7b7cde1e1d0a72ce6a7804263814f0401b1e07a0e43a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s071_output"
	    wget -O "n100.r03.s071_output/n100.r03.s071.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s071_output/n100.r03.s071.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s071_output/n100.r03.s071.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s071_output/n100.r03.s071.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s071_output/n100.r03.s071.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s071_output/n100.r03.s071.reference.fas" "n100.r03.s071_output/n100.r03.s071.fq1.fastq" "n100.r03.s071_output/n100.r03.s071.fq2.fastq" | samtools view -bS - > "n100.r03.s071_output/n100.r03.s071.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s071_output/n100.r03.s071.untrimmed.sorted.bam" "n100.r03.s071_output/n100.r03.s071.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s071_output/n100.r03.s071.untrimmed.sorted.bam" -b "n100.r03.s071_output/n100.r03.s071.primers.bed" -p "n100.r03.s071_output/n100.r03.s071.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s071_output/n100.r03.s071.trimmed.sorted.bam" "n100.r03.s071_output/n100.r03.s071.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s071_output/n100.r03.s071.reference.fas" "n100.r03.s071_output/n100.r03.s071.trimmed.sorted.bam" > "n100.r03.s071_output/n100.r03.s071.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s071_output/n100.r03.s071.reference.fas" --call-indels "n100.r03.s071_output/n100.r03.s071.trimmed.sorted.bam" > "n100.r03.s071_output/n100.r03.s071.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s071_output/n100.r03.s071.trimmed.sorted.bam" > "n100.r03.s071_output/n100.r03.s071.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s071_output/n100.r03.s071.depth.txt" "n100.r03.s071_output/n100.r03.s071.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s071_output/n100.r03.s071.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s071_output/n100.r03.s071.reference.fas" | bcftools consensus -m "n100.r03.s071_output/n100.r03.s071.low_depth.tsv" tmp.vcf.gz > "n100.r03.s071_output/n100.r03.s071.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s071_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:37 scheduler task 484b3ade (flow 1ea7c425): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:37 scheduler task 484b3ade (flow 1ea7c425): waiting for completion (try 0): started
2021/07/08 16:44:37  ->  n100.r03.s063.Main.out_file 1ea7c425 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:37 n100.r03.s063.Main.out_file 1ea7c425 n100/r03/n100.r03.s063.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c0a73e409c09b15d60bdbe7875a4a54bb613cf7b94c0d87c173bbf6aa5794d5e
	sha256:1ea7c42599e66e0ef3dfbff1b7ad36b62b488d324d8c5c63e9e97ff8d8267b38
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/484b3adee8c62e7c8252c9fd46b6a7927cc435fd7b02d337e5be5d9148957dac
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s063_output"
	    wget -O "n100.r03.s063_output/n100.r03.s063.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s063_output/n100.r03.s063.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s063_output/n100.r03.s063.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s063_output/n100.r03.s063.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s063_output/n100.r03.s063.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s063_output/n100.r03.s063.reference.fas" "n100.r03.s063_output/n100.r03.s063.fq1.fastq" "n100.r03.s063_output/n100.r03.s063.fq2.fastq" | samtools view -bS - > "n100.r03.s063_output/n100.r03.s063.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s063_output/n100.r03.s063.untrimmed.sorted.bam" "n100.r03.s063_output/n100.r03.s063.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s063_output/n100.r03.s063.untrimmed.sorted.bam" -b "n100.r03.s063_output/n100.r03.s063.primers.bed" -p "n100.r03.s063_output/n100.r03.s063.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s063_output/n100.r03.s063.trimmed.sorted.bam" "n100.r03.s063_output/n100.r03.s063.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s063_output/n100.r03.s063.reference.fas" "n100.r03.s063_output/n100.r03.s063.trimmed.sorted.bam" > "n100.r03.s063_output/n100.r03.s063.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s063_output/n100.r03.s063.reference.fas" --call-indels "n100.r03.s063_output/n100.r03.s063.trimmed.sorted.bam" > "n100.r03.s063_output/n100.r03.s063.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s063_output/n100.r03.s063.trimmed.sorted.bam" > "n100.r03.s063_output/n100.r03.s063.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s063_output/n100.r03.s063.depth.txt" "n100.r03.s063_output/n100.r03.s063.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s063_output/n100.r03.s063.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s063_output/n100.r03.s063.reference.fas" | bcftools consensus -m "n100.r03.s063_output/n100.r03.s063.low_depth.tsv" tmp.vcf.gz > "n100.r03.s063_output/n100.r03.s063.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s063_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:37 scheduler task 13667c21 (flow da42f528): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:37 scheduler task 13667c21 (flow da42f528): waiting for completion (try 0): started
2021/07/08 16:44:37  ->  n100.r03.s072.Main.out_file da42f528 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:37 n100.r03.s072.Main.out_file da42f528 n100/r03/n100.r03.s072.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ac4c53ddc55d0881e3a1a3d407556377f88a99508d4a104a43864545ffc14f55
	sha256:da42f52820baef49609d84b9482429104b032aed89905176799c3ca09263268d
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/13667c210c651faa8c3d53651cc0fa3772d800a00f7643beb7a6ae8c5f0c259a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s072_output"
	    wget -O "n100.r03.s072_output/n100.r03.s072.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s072_output/n100.r03.s072.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s072_output/n100.r03.s072.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s072_output/n100.r03.s072.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s072_output/n100.r03.s072.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s072_output/n100.r03.s072.reference.fas" "n100.r03.s072_output/n100.r03.s072.fq1.fastq" "n100.r03.s072_output/n100.r03.s072.fq2.fastq" | samtools view -bS - > "n100.r03.s072_output/n100.r03.s072.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s072_output/n100.r03.s072.untrimmed.sorted.bam" "n100.r03.s072_output/n100.r03.s072.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s072_output/n100.r03.s072.untrimmed.sorted.bam" -b "n100.r03.s072_output/n100.r03.s072.primers.bed" -p "n100.r03.s072_output/n100.r03.s072.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s072_output/n100.r03.s072.trimmed.sorted.bam" "n100.r03.s072_output/n100.r03.s072.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s072_output/n100.r03.s072.reference.fas" "n100.r03.s072_output/n100.r03.s072.trimmed.sorted.bam" > "n100.r03.s072_output/n100.r03.s072.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s072_output/n100.r03.s072.reference.fas" --call-indels "n100.r03.s072_output/n100.r03.s072.trimmed.sorted.bam" > "n100.r03.s072_output/n100.r03.s072.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s072_output/n100.r03.s072.trimmed.sorted.bam" > "n100.r03.s072_output/n100.r03.s072.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s072_output/n100.r03.s072.depth.txt" "n100.r03.s072_output/n100.r03.s072.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s072_output/n100.r03.s072.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s072_output/n100.r03.s072.reference.fas" | bcftools consensus -m "n100.r03.s072_output/n100.r03.s072.low_depth.tsv" tmp.vcf.gz > "n100.r03.s072_output/n100.r03.s072.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s072_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:37 scheduler task a03fdbd6 (flow f12c01f7): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:37 scheduler task a03fdbd6 (flow f12c01f7): waiting for completion (try 0): started
2021/07/08 16:44:37  ->  n100.r03.s094.Main.out_file f12c01f7 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:37 n100.r03.s094.Main.out_file f12c01f7 n100/r03/n100.r03.s094.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f4e7cb07065c64ced6f204321138463e0249f5fb7ee1a52ed2246ff501ef3542
	sha256:f12c01f71deeea00487d9de269965e6626c13469099dbf33fb8b506106bc9212
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a03fdbd6b01c0e8a720cf7ee794ede8f0fc49139d01a2775651ce333a14836c7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s094_output"
	    wget -O "n100.r03.s094_output/n100.r03.s094.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s094_output/n100.r03.s094.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s094_output/n100.r03.s094.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s094_output/n100.r03.s094.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s094_output/n100.r03.s094.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s094_output/n100.r03.s094.reference.fas" "n100.r03.s094_output/n100.r03.s094.fq1.fastq" "n100.r03.s094_output/n100.r03.s094.fq2.fastq" | samtools view -bS - > "n100.r03.s094_output/n100.r03.s094.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s094_output/n100.r03.s094.untrimmed.sorted.bam" "n100.r03.s094_output/n100.r03.s094.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s094_output/n100.r03.s094.untrimmed.sorted.bam" -b "n100.r03.s094_output/n100.r03.s094.primers.bed" -p "n100.r03.s094_output/n100.r03.s094.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s094_output/n100.r03.s094.trimmed.sorted.bam" "n100.r03.s094_output/n100.r03.s094.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s094_output/n100.r03.s094.reference.fas" "n100.r03.s094_output/n100.r03.s094.trimmed.sorted.bam" > "n100.r03.s094_output/n100.r03.s094.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s094_output/n100.r03.s094.reference.fas" --call-indels "n100.r03.s094_output/n100.r03.s094.trimmed.sorted.bam" > "n100.r03.s094_output/n100.r03.s094.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s094_output/n100.r03.s094.trimmed.sorted.bam" > "n100.r03.s094_output/n100.r03.s094.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s094_output/n100.r03.s094.depth.txt" "n100.r03.s094_output/n100.r03.s094.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s094_output/n100.r03.s094.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s094_output/n100.r03.s094.reference.fas" | bcftools consensus -m "n100.r03.s094_output/n100.r03.s094.low_depth.tsv" tmp.vcf.gz > "n100.r03.s094_output/n100.r03.s094.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s094_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:37 scheduler task ab470caf (flow 74da68ff): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:37 scheduler task ab470caf (flow 74da68ff): waiting for completion (try 0): started
2021/07/08 16:44:37  ->  n100.r03.s027.Main.out_file 74da68ff exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:37 n100.r03.s027.Main.out_file 74da68ff n100/r03/n100.r03.s027.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:693f8d3f9434ed46e3e296c7a68f2b0e58297d8423fdfcb42a77bab1c9cc114d
	sha256:74da68ffdc5a37395a466cc49fb8a14391cb767ead749e4982b185088e000b97
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ab470cafee5a64b3052612a203b2cea0b7cc02f37344cd05ee8aa77f70342366
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s027_output"
	    wget -O "n100.r03.s027_output/n100.r03.s027.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s027_output/n100.r03.s027.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s027_output/n100.r03.s027.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s027_output/n100.r03.s027.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s027_output/n100.r03.s027.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s027_output/n100.r03.s027.reference.fas" "n100.r03.s027_output/n100.r03.s027.fq1.fastq" "n100.r03.s027_output/n100.r03.s027.fq2.fastq" | samtools view -bS - > "n100.r03.s027_output/n100.r03.s027.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s027_output/n100.r03.s027.untrimmed.sorted.bam" "n100.r03.s027_output/n100.r03.s027.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s027_output/n100.r03.s027.untrimmed.sorted.bam" -b "n100.r03.s027_output/n100.r03.s027.primers.bed" -p "n100.r03.s027_output/n100.r03.s027.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s027_output/n100.r03.s027.trimmed.sorted.bam" "n100.r03.s027_output/n100.r03.s027.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s027_output/n100.r03.s027.reference.fas" "n100.r03.s027_output/n100.r03.s027.trimmed.sorted.bam" > "n100.r03.s027_output/n100.r03.s027.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s027_output/n100.r03.s027.reference.fas" --call-indels "n100.r03.s027_output/n100.r03.s027.trimmed.sorted.bam" > "n100.r03.s027_output/n100.r03.s027.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s027_output/n100.r03.s027.trimmed.sorted.bam" > "n100.r03.s027_output/n100.r03.s027.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s027_output/n100.r03.s027.depth.txt" "n100.r03.s027_output/n100.r03.s027.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s027_output/n100.r03.s027.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s027_output/n100.r03.s027.reference.fas" | bcftools consensus -m "n100.r03.s027_output/n100.r03.s027.low_depth.tsv" tmp.vcf.gz > "n100.r03.s027_output/n100.r03.s027.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s027_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:38 scheduler task c688ac3a (flow 62629a74): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:38 scheduler task c688ac3a (flow 62629a74): waiting for completion (try 0): started
2021/07/08 16:44:38  ->  n100.r03.s076.Main.out_file 62629a74 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:38 n100.r03.s076.Main.out_file 62629a74 n100/r03/n100.r03.s076.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a4670f863d25754325acdb6dd428cb7d497bcc7e35fc59db8bc97f684397ff45
	sha256:62629a7448be71bf3d127e3a6235f3f95a772ff976077816cf4467d42908f7a1
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c688ac3a938a6efb4caa49a4e136982cb19c86f3b15c30479faf941a13078f35
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s076_output"
	    wget -O "n100.r03.s076_output/n100.r03.s076.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s076_output/n100.r03.s076.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s076_output/n100.r03.s076.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s076_output/n100.r03.s076.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s076_output/n100.r03.s076.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s076_output/n100.r03.s076.reference.fas" "n100.r03.s076_output/n100.r03.s076.fq1.fastq" "n100.r03.s076_output/n100.r03.s076.fq2.fastq" | samtools view -bS - > "n100.r03.s076_output/n100.r03.s076.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s076_output/n100.r03.s076.untrimmed.sorted.bam" "n100.r03.s076_output/n100.r03.s076.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s076_output/n100.r03.s076.untrimmed.sorted.bam" -b "n100.r03.s076_output/n100.r03.s076.primers.bed" -p "n100.r03.s076_output/n100.r03.s076.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s076_output/n100.r03.s076.trimmed.sorted.bam" "n100.r03.s076_output/n100.r03.s076.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s076_output/n100.r03.s076.reference.fas" "n100.r03.s076_output/n100.r03.s076.trimmed.sorted.bam" > "n100.r03.s076_output/n100.r03.s076.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s076_output/n100.r03.s076.reference.fas" --call-indels "n100.r03.s076_output/n100.r03.s076.trimmed.sorted.bam" > "n100.r03.s076_output/n100.r03.s076.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s076_output/n100.r03.s076.trimmed.sorted.bam" > "n100.r03.s076_output/n100.r03.s076.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s076_output/n100.r03.s076.depth.txt" "n100.r03.s076_output/n100.r03.s076.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s076_output/n100.r03.s076.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s076_output/n100.r03.s076.reference.fas" | bcftools consensus -m "n100.r03.s076_output/n100.r03.s076.low_depth.tsv" tmp.vcf.gz > "n100.r03.s076_output/n100.r03.s076.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s076_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:38 scheduler task a4048ae2 (flow 062ec948): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:38 scheduler task a4048ae2 (flow 062ec948): waiting for completion (try 0): started
2021/07/08 16:44:38  ->  n100.r03.s083.Main.out_file 062ec948 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:38 n100.r03.s083.Main.out_file 062ec948 n100/r03/n100.r03.s083.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:32b2b93bb827bc926ba4f282da72333eaa74ceb6950eb9849dda78317cbfec28
	sha256:062ec94870d12a734e7b827e66ed0bda3ea5125092a578f105e8834c8f895557
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a4048ae2794b28ac58d3e3effe297c02a12ad7c88beda903f063f9e2f71b9090
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s083_output"
	    wget -O "n100.r03.s083_output/n100.r03.s083.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s083_output/n100.r03.s083.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s083_output/n100.r03.s083.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s083_output/n100.r03.s083.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s083_output/n100.r03.s083.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s083_output/n100.r03.s083.reference.fas" "n100.r03.s083_output/n100.r03.s083.fq1.fastq" "n100.r03.s083_output/n100.r03.s083.fq2.fastq" | samtools view -bS - > "n100.r03.s083_output/n100.r03.s083.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s083_output/n100.r03.s083.untrimmed.sorted.bam" "n100.r03.s083_output/n100.r03.s083.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s083_output/n100.r03.s083.untrimmed.sorted.bam" -b "n100.r03.s083_output/n100.r03.s083.primers.bed" -p "n100.r03.s083_output/n100.r03.s083.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s083_output/n100.r03.s083.trimmed.sorted.bam" "n100.r03.s083_output/n100.r03.s083.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s083_output/n100.r03.s083.reference.fas" "n100.r03.s083_output/n100.r03.s083.trimmed.sorted.bam" > "n100.r03.s083_output/n100.r03.s083.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s083_output/n100.r03.s083.reference.fas" --call-indels "n100.r03.s083_output/n100.r03.s083.trimmed.sorted.bam" > "n100.r03.s083_output/n100.r03.s083.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s083_output/n100.r03.s083.trimmed.sorted.bam" > "n100.r03.s083_output/n100.r03.s083.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s083_output/n100.r03.s083.depth.txt" "n100.r03.s083_output/n100.r03.s083.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s083_output/n100.r03.s083.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s083_output/n100.r03.s083.reference.fas" | bcftools consensus -m "n100.r03.s083_output/n100.r03.s083.low_depth.tsv" tmp.vcf.gz > "n100.r03.s083_output/n100.r03.s083.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s083_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:38 scheduler task 94f5f6bc (flow 213b5afb): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:38 scheduler task 94f5f6bc (flow 213b5afb): waiting for completion (try 0): started
2021/07/08 16:44:38  ->  n100.r03.s050.Main.out_file 213b5afb exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:38 n100.r03.s050.Main.out_file 213b5afb n100/r03/n100.r03.s050.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a5af6fdb6f235c5fa563f2e5fc1ed62dabbfefa9290ebf9a3e5f156af38adefb
	sha256:213b5afb5be458caf95e4a99b9d27f193c7eeaa42a8c4673dfd5b3935cc78cc9
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/94f5f6bc1b70ba5dec37596f74b10b7af52b79c5e0dddc0a2be7b4572566fa13
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s050_output"
	    wget -O "n100.r03.s050_output/n100.r03.s050.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s050_output/n100.r03.s050.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s050_output/n100.r03.s050.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s050_output/n100.r03.s050.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s050_output/n100.r03.s050.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s050_output/n100.r03.s050.reference.fas" "n100.r03.s050_output/n100.r03.s050.fq1.fastq" "n100.r03.s050_output/n100.r03.s050.fq2.fastq" | samtools view -bS - > "n100.r03.s050_output/n100.r03.s050.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s050_output/n100.r03.s050.untrimmed.sorted.bam" "n100.r03.s050_output/n100.r03.s050.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s050_output/n100.r03.s050.untrimmed.sorted.bam" -b "n100.r03.s050_output/n100.r03.s050.primers.bed" -p "n100.r03.s050_output/n100.r03.s050.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s050_output/n100.r03.s050.trimmed.sorted.bam" "n100.r03.s050_output/n100.r03.s050.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s050_output/n100.r03.s050.reference.fas" "n100.r03.s050_output/n100.r03.s050.trimmed.sorted.bam" > "n100.r03.s050_output/n100.r03.s050.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s050_output/n100.r03.s050.reference.fas" --call-indels "n100.r03.s050_output/n100.r03.s050.trimmed.sorted.bam" > "n100.r03.s050_output/n100.r03.s050.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s050_output/n100.r03.s050.trimmed.sorted.bam" > "n100.r03.s050_output/n100.r03.s050.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s050_output/n100.r03.s050.depth.txt" "n100.r03.s050_output/n100.r03.s050.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s050_output/n100.r03.s050.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s050_output/n100.r03.s050.reference.fas" | bcftools consensus -m "n100.r03.s050_output/n100.r03.s050.low_depth.tsv" tmp.vcf.gz > "n100.r03.s050_output/n100.r03.s050.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s050_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:44:38 scheduler task bc6b82f2 (flow 159f3125): submitting (try 0): successful, next state: waiting for completion
2021/07/08 16:44:38 scheduler task bc6b82f2 (flow 159f3125): waiting for completion (try 0): started
2021/07/08 16:44:38  ->  n100.r03.s028.Main.out_file 159f3125 exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 16:44:38 n100.r03.s028.Main.out_file 159f3125 n100/r03/n100.r03.s028.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d46955519bf0872277522bb0e5bc7c2202d8344341ce33f160c2839232e4db12
	sha256:159f31250140bf24a64b8ac408f369de201ff3e37d3e15d21158c28571910e63
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bc6b82f2d2b8dec674cda3cc0b31dc9720d5f9b1dc6740c7eb7c3d5050b9103a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s028_output"
	    wget -O "n100.r03.s028_output/n100.r03.s028.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s028_output/n100.r03.s028.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s028_output/n100.r03.s028.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s028_output/n100.r03.s028.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s028_output/n100.r03.s028.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s028_output/n100.r03.s028.reference.fas" "n100.r03.s028_output/n100.r03.s028.fq1.fastq" "n100.r03.s028_output/n100.r03.s028.fq2.fastq" | samtools view -bS - > "n100.r03.s028_output/n100.r03.s028.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s028_output/n100.r03.s028.untrimmed.sorted.bam" "n100.r03.s028_output/n100.r03.s028.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s028_output/n100.r03.s028.untrimmed.sorted.bam" -b "n100.r03.s028_output/n100.r03.s028.primers.bed" -p "n100.r03.s028_output/n100.r03.s028.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s028_output/n100.r03.s028.trimmed.sorted.bam" "n100.r03.s028_output/n100.r03.s028.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s028_output/n100.r03.s028.reference.fas" "n100.r03.s028_output/n100.r03.s028.trimmed.sorted.bam" > "n100.r03.s028_output/n100.r03.s028.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s028_output/n100.r03.s028.reference.fas" --call-indels "n100.r03.s028_output/n100.r03.s028.trimmed.sorted.bam" > "n100.r03.s028_output/n100.r03.s028.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s028_output/n100.r03.s028.trimmed.sorted.bam" > "n100.r03.s028_output/n100.r03.s028.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s028_output/n100.r03.s028.depth.txt" "n100.r03.s028_output/n100.r03.s028.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s028_output/n100.r03.s028.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s028_output/n100.r03.s028.reference.fas" | bcftools consensus -m "n100.r03.s028_output/n100.r03.s028.low_depth.tsv" tmp.vcf.gz > "n100.r03.s028_output/n100.r03.s028.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s028_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 16:48:37 scheduler task e3632693 (flow add09463): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:48:37 scheduler task e3632693 (flow add09463): promoting objects (try 0): started
2021/07/08 16:48:37 scheduler task e3632693 (flow add09463): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:48:37 scheduler task e3632693 (flow add09463): retrieving diagnostic output (try 0): started
2021/07/08 16:48:37 scheduler task e3632693 (flow add09463): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:48:37 scheduler task e3632693 (flow add09463): retrieving result (try 0): started
2021/07/08 16:48:37 scheduler task e3632693 (flow add09463): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:48:37 scheduler task e3632693 (flow add09463): transferring output (try 0): started
2021/07/08 16:48:38 scheduler task e3632693 (flow add09463): transferring output (try 0): successful, next state: unloading
2021/07/08 16:48:38 scheduler task e3632693 (flow add09463): unloading (try 0): started
2021/07/08 16:48:38 scheduler task e3632693 (flow add09463): unloading list<val<.=febe4ad9 35.7MiB> 35.7MiB>
2021/07/08 16:48:38 scheduler task e3632693 (flow add09463): unloading val<.=8d3c785e 35.4MiB>
2021/07/08 16:48:38 scheduler task e3632693 (flow add09463): unloading val<.=3e00b3a5 35.4MiB>
2021/07/08 16:48:38 scheduler task e3632693 (flow add09463): unloaded val<.=3e00b3a5 35.4MiB>
2021/07/08 16:48:38 scheduler task e3632693 (flow add09463): unloaded val<.=8d3c785e 35.4MiB>
2021/07/08 16:48:38 scheduler task e3632693 (flow add09463): unloaded list<val<.=febe4ad9 35.7MiB> 35.7MiB>
2021/07/08 16:48:38 scheduler task e3632693 (flow add09463): unloading (try 0): successful, next state: complete
2021/07/08 16:48:38 scheduler task ab96201c (flow 531faab0): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:48:38  <-  n100.r03.s078.Main.out_file add09463 ok     exec 3m56s 35.7MiB
2021/07/08 16:48:38 n100.r03.s078.Main.out_file add09463 n100/r03/n100.r03.s078.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b489cbde4b83fdf123263167123e14aa232754a4eba2bedb0d2d844f736562c6
	sha256:add09463453061926863983481d13a65d0ada71888e182a9cc28c73f3002de52
	ec2-3-139-69-133.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e363269332e9552efbca0098e84285d79a234f398aafc2a6ed31eb9b75c73d7e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s078_output"
	    wget -O "n100.r03.s078_output/n100.r03.s078.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s078_output/n100.r03.s078.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s078_output/n100.r03.s078.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s078_output/n100.r03.s078.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s078_output/n100.r03.s078.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s078_output/n100.r03.s078.reference.fas" "n100.r03.s078_output/n100.r03.s078.fq1.fastq" "n100.r03.s078_output/n100.r03.s078.fq2.fastq" | samtools view -bS - > "n100.r03.s078_output/n100.r03.s078.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s078_output/n100.r03.s078.untrimmed.sorted.bam" "n100.r03.s078_output/n100.r03.s078.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s078_output/n100.r03.s078.untrimmed.sorted.bam" -b "n100.r03.s078_output/n100.r03.s078.primers.bed" -p "n100.r03.s078_output/n100.r03.s078.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s078_output/n100.r03.s078.trimmed.sorted.bam" "n100.r03.s078_output/n100.r03.s078.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s078_output/n100.r03.s078.reference.fas" "n100.r03.s078_output/n100.r03.s078.trimmed.sorted.bam" > "n100.r03.s078_output/n100.r03.s078.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s078_output/n100.r03.s078.reference.fas" --call-indels "n100.r03.s078_output/n100.r03.s078.trimmed.sorted.bam" > "n100.r03.s078_output/n100.r03.s078.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s078_output/n100.r03.s078.trimmed.sorted.bam" > "n100.r03.s078_output/n100.r03.s078.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s078_output/n100.r03.s078.depth.txt" "n100.r03.s078_output/n100.r03.s078.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s078_output/n100.r03.s078.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s078_output/n100.r03.s078.reference.fas" | bcftools consensus -m "n100.r03.s078_output/n100.r03.s078.low_depth.tsv" tmp.vcf.gz > "n100.r03.s078_output/n100.r03.s078.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s078_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:febe4ad98833f4b229c0381ea527924758dbc5f66fed2daedab587981d97856f 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=17.0MiB max=126.0MiB
	    disk mean=8.9MiB max=35.7MiB
	    tmp mean=262B max=1.0KiB
2021/07/08 16:48:38 scheduler task b47e8ad9 (flow 9eceb5a2): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s078.tar.gz resources {}
2021/07/08 16:48:38  ->  n100.r03.s078.Main.cp_out_file 9eceb5a2 exec extern s3://niema-test/n100/r03/n100.r03.s078.tar.gz 35.7MiB
2021/07/08 16:48:38 scheduler task ab96201c (flow 531faab0): promoting objects (try 0): started
2021/07/08 16:48:38 scheduler task 23f2b555 (flow d34a4a98): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:48:38 scheduler task 23f2b555 (flow d34a4a98): promoting objects (try 0): started
2021/07/08 16:48:38 scheduler task ab96201c (flow 531faab0): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:48:38 scheduler task ab96201c (flow 531faab0): retrieving diagnostic output (try 0): started
2021/07/08 16:48:38 scheduler task 23f2b555 (flow d34a4a98): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:48:38 scheduler task 23f2b555 (flow d34a4a98): retrieving diagnostic output (try 0): started
2021/07/08 16:48:38 scheduler task ab96201c (flow 531faab0): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:48:38 scheduler task ab96201c (flow 531faab0): retrieving result (try 0): started
2021/07/08 16:48:38 scheduler task 23f2b555 (flow d34a4a98): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:48:38 scheduler task 23f2b555 (flow d34a4a98): retrieving result (try 0): started
2021/07/08 16:48:38 scheduler task ab96201c (flow 531faab0): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:48:38 scheduler task ab96201c (flow 531faab0): transferring output (try 0): started
2021/07/08 16:48:38 scheduler task 23f2b555 (flow d34a4a98): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:48:38 scheduler task 23f2b555 (flow d34a4a98): transferring output (try 0): started
2021/07/08 16:48:39 scheduler task 961bc0f7 (flow a0d2eb2b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:48:39 scheduler task 961bc0f7 (flow a0d2eb2b): promoting objects (try 0): started
2021/07/08 16:48:39 scheduler task 961bc0f7 (flow a0d2eb2b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:48:39 scheduler task 961bc0f7 (flow a0d2eb2b): retrieving diagnostic output (try 0): started
2021/07/08 16:48:39 scheduler task 961bc0f7 (flow a0d2eb2b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:48:39 scheduler task 961bc0f7 (flow a0d2eb2b): retrieving result (try 0): started
2021/07/08 16:48:39 scheduler task 961bc0f7 (flow a0d2eb2b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:48:39 scheduler task 961bc0f7 (flow a0d2eb2b): transferring output (try 0): started
2021/07/08 16:48:39 scheduler task ab96201c (flow 531faab0): transferring output (try 0): successful, next state: unloading
2021/07/08 16:48:39 scheduler task ab96201c (flow 531faab0): unloading (try 0): started
2021/07/08 16:48:39 scheduler task ab96201c (flow 531faab0): unloading list<val<.=223468f8 35.7MiB> 35.7MiB>
2021/07/08 16:48:39 scheduler task ab96201c (flow 531faab0): unloading val<.=60943a70 35.4MiB>
2021/07/08 16:48:39 scheduler task ab96201c (flow 531faab0): unloading val<.=8d67d046 35.4MiB>
2021/07/08 16:48:39 scheduler task 23f2b555 (flow d34a4a98): transferring output (try 0): successful, next state: unloading
2021/07/08 16:48:39 scheduler task 23f2b555 (flow d34a4a98): unloading (try 0): started
2021/07/08 16:48:39 scheduler task 23f2b555 (flow d34a4a98): unloading list<val<.=b8cd8168 35.8MiB> 35.8MiB>
2021/07/08 16:48:39 scheduler task 23f2b555 (flow d34a4a98): unloading val<.=c5fbc5fc 35.4MiB>
2021/07/08 16:48:39 scheduler task 23f2b555 (flow d34a4a98): unloading val<.=16477602 35.4MiB>
2021/07/08 16:48:39 scheduler task ab96201c (flow 531faab0): unloaded val<.=8d67d046 35.4MiB>
2021/07/08 16:48:39 scheduler task ab96201c (flow 531faab0): unloaded val<.=60943a70 35.4MiB>
2021/07/08 16:48:39 scheduler task ab96201c (flow 531faab0): unloaded list<val<.=223468f8 35.7MiB> 35.7MiB>
2021/07/08 16:48:39 scheduler task ab96201c (flow 531faab0): unloading (try 0): successful, next state: complete
2021/07/08 16:48:39  <-  n100.r03.s054.Main.out_file 531faab0 ok     exec 3m58s 35.7MiB
2021/07/08 16:48:39 n100.r03.s054.Main.out_file 531faab0 n100/r03/n100.r03.s054.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a9a5cd514aa2b7fe0cc9e1530a67fcb485abaadcc0e9d18e269a5c4b4deecc86
	sha256:531faab0b9050deeeea4f2aa58941938beffce96388ec583151c59a1091efe31
	ec2-3-139-69-133.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ab96201c1359417f3b3400dfd96ab17d8692e5bf2aae81af4fbb4d40e5c27760
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s054_output"
	    wget -O "n100.r03.s054_output/n100.r03.s054.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s054_output/n100.r03.s054.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s054_output/n100.r03.s054.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s054_output/n100.r03.s054.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s054_output/n100.r03.s054.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s054_output/n100.r03.s054.reference.fas" "n100.r03.s054_output/n100.r03.s054.fq1.fastq" "n100.r03.s054_output/n100.r03.s054.fq2.fastq" | samtools view -bS - > "n100.r03.s054_output/n100.r03.s054.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s054_output/n100.r03.s054.untrimmed.sorted.bam" "n100.r03.s054_output/n100.r03.s054.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s054_output/n100.r03.s054.untrimmed.sorted.bam" -b "n100.r03.s054_output/n100.r03.s054.primers.bed" -p "n100.r03.s054_output/n100.r03.s054.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s054_output/n100.r03.s054.trimmed.sorted.bam" "n100.r03.s054_output/n100.r03.s054.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s054_output/n100.r03.s054.reference.fas" "n100.r03.s054_output/n100.r03.s054.trimmed.sorted.bam" > "n100.r03.s054_output/n100.r03.s054.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s054_output/n100.r03.s054.reference.fas" --call-indels "n100.r03.s054_output/n100.r03.s054.trimmed.sorted.bam" > "n100.r03.s054_output/n100.r03.s054.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s054_output/n100.r03.s054.trimmed.sorted.bam" > "n100.r03.s054_output/n100.r03.s054.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s054_output/n100.r03.s054.depth.txt" "n100.r03.s054_output/n100.r03.s054.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s054_output/n100.r03.s054.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s054_output/n100.r03.s054.reference.fas" | bcftools consensus -m "n100.r03.s054_output/n100.r03.s054.low_depth.tsv" tmp.vcf.gz > "n100.r03.s054_output/n100.r03.s054.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s054_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:223468f8360fc110b84cba202329df9b90d5a71d7457aa2332e6c17bb07a8606 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=16.8MiB max=125.1MiB
	    disk mean=8.9MiB max=35.7MiB
	    tmp mean=259B max=1.0KiB
2021/07/08 16:48:39 scheduler task ff0ed504 (flow 68367aee): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s054.tar.gz resources {}
2021/07/08 16:48:39  ->  n100.r03.s054.Main.cp_out_file 68367aee exec extern s3://niema-test/n100/r03/n100.r03.s054.tar.gz 35.7MiB
2021/07/08 16:48:39 scheduler task 23f2b555 (flow d34a4a98): unloaded val<.=c5fbc5fc 35.4MiB>
2021/07/08 16:48:39 scheduler task 23f2b555 (flow d34a4a98): unloaded val<.=16477602 35.4MiB>
2021/07/08 16:48:39 scheduler task 23f2b555 (flow d34a4a98): unloaded list<val<.=b8cd8168 35.8MiB> 35.8MiB>
2021/07/08 16:48:39 scheduler task 23f2b555 (flow d34a4a98): unloading (try 0): successful, next state: complete
2021/07/08 16:48:39  <-  n100.r03.s040.Main.out_file d34a4a98 ok     exec 3m58s 35.8MiB
2021/07/08 16:48:39 n100.r03.s040.Main.out_file d34a4a98 n100/r03/n100.r03.s040.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:dfa7bbc52c83ab71ea8f338f01e6357ac88331cc3310029535e2c8097cf992a7
	sha256:d34a4a98dad57160bf1304c5b5b88db7710e09be84bc7267614fef086c10ea00
	ec2-3-139-69-133.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/23f2b555c93a05cd6c9fa24509eb1b0739b7a25886e61ba2004eec3faae17546
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s040_output"
	    wget -O "n100.r03.s040_output/n100.r03.s040.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s040_output/n100.r03.s040.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s040_output/n100.r03.s040.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s040_output/n100.r03.s040.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s040_output/n100.r03.s040.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s040_output/n100.r03.s040.reference.fas" "n100.r03.s040_output/n100.r03.s040.fq1.fastq" "n100.r03.s040_output/n100.r03.s040.fq2.fastq" | samtools view -bS - > "n100.r03.s040_output/n100.r03.s040.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s040_output/n100.r03.s040.untrimmed.sorted.bam" "n100.r03.s040_output/n100.r03.s040.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s040_output/n100.r03.s040.untrimmed.sorted.bam" -b "n100.r03.s040_output/n100.r03.s040.primers.bed" -p "n100.r03.s040_output/n100.r03.s040.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s040_output/n100.r03.s040.trimmed.sorted.bam" "n100.r03.s040_output/n100.r03.s040.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s040_output/n100.r03.s040.reference.fas" "n100.r03.s040_output/n100.r03.s040.trimmed.sorted.bam" > "n100.r03.s040_output/n100.r03.s040.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s040_output/n100.r03.s040.reference.fas" --call-indels "n100.r03.s040_output/n100.r03.s040.trimmed.sorted.bam" > "n100.r03.s040_output/n100.r03.s040.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s040_output/n100.r03.s040.trimmed.sorted.bam" > "n100.r03.s040_output/n100.r03.s040.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s040_output/n100.r03.s040.depth.txt" "n100.r03.s040_output/n100.r03.s040.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s040_output/n100.r03.s040.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s040_output/n100.r03.s040.reference.fas" | bcftools consensus -m "n100.r03.s040_output/n100.r03.s040.low_depth.tsv" tmp.vcf.gz > "n100.r03.s040_output/n100.r03.s040.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s040_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:b8cd81687d919124f186f6698843b865299032263f36249b6d8455c9f07f288f 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=16.7MiB max=124.3MiB
	    disk mean=9.0MiB max=35.8MiB
	    tmp mean=259B max=1.0KiB
2021/07/08 16:48:39 scheduler task 0b5ce5c5 (flow 6501f0da): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s040.tar.gz resources {}
2021/07/08 16:48:39  ->  n100.r03.s040.Main.cp_out_file 6501f0da exec extern s3://niema-test/n100/r03/n100.r03.s040.tar.gz 35.8MiB
2021/07/08 16:48:39 scheduler task b47e8ad9 (flow 9eceb5a2): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:febe4ad98833f4b229c0381ea527924758dbc5f66fed2daedab587981d97856f -> s3://niema-test/n100/r03/n100.r03.s078.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:48:39  <-  n100.r03.s078.Main.cp_out_file 9eceb5a2 ok   extern 0s 35.7MiB
2021/07/08 16:48:39 scheduler task 961bc0f7 (flow a0d2eb2b): transferring output (try 0): successful, next state: unloading
2021/07/08 16:48:39 scheduler task 961bc0f7 (flow a0d2eb2b): unloading (try 0): started
2021/07/08 16:48:39 scheduler task 961bc0f7 (flow a0d2eb2b): unloading list<val<.=318ad476 35.7MiB> 35.7MiB>
2021/07/08 16:48:39 scheduler task 961bc0f7 (flow a0d2eb2b): unloading val<.=ff409a68 35.4MiB>
2021/07/08 16:48:39 scheduler task 961bc0f7 (flow a0d2eb2b): unloading val<.=5f541a7e 35.4MiB>
2021/07/08 16:48:40 scheduler task 961bc0f7 (flow a0d2eb2b): unloaded list<val<.=318ad476 35.7MiB> 35.7MiB>
2021/07/08 16:48:40 scheduler task 961bc0f7 (flow a0d2eb2b): unloaded val<.=ff409a68 35.4MiB>
2021/07/08 16:48:40 scheduler task 961bc0f7 (flow a0d2eb2b): unloaded val<.=5f541a7e 35.4MiB>
2021/07/08 16:48:40 scheduler task 961bc0f7 (flow a0d2eb2b): unloading (try 0): successful, next state: complete
2021/07/08 16:48:40  <-  n100.r03.s009.Main.out_file a0d2eb2b ok     exec 3m58s 35.7MiB
2021/07/08 16:48:40 n100.r03.s009.Main.out_file a0d2eb2b n100/r03/n100.r03.s009.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:222ed146e761d820d2842e7ac246274668bbcfe047fc8bf810cd4fe2d7e89d9d
	sha256:a0d2eb2b64d92d302afdfbb1dd5b001b62372371894e88342f3e69f7d89323c2
	ec2-3-139-69-133.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/961bc0f711b030c5e0d915ca5a45e1d9127ea41271ce46c1b27b6e57a360d08b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s009_output"
	    wget -O "n100.r03.s009_output/n100.r03.s009.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s009_output/n100.r03.s009.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s009_output/n100.r03.s009.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s009_output/n100.r03.s009.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s009_output/n100.r03.s009.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s009_output/n100.r03.s009.reference.fas" "n100.r03.s009_output/n100.r03.s009.fq1.fastq" "n100.r03.s009_output/n100.r03.s009.fq2.fastq" | samtools view -bS - > "n100.r03.s009_output/n100.r03.s009.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s009_output/n100.r03.s009.untrimmed.sorted.bam" "n100.r03.s009_output/n100.r03.s009.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s009_output/n100.r03.s009.untrimmed.sorted.bam" -b "n100.r03.s009_output/n100.r03.s009.primers.bed" -p "n100.r03.s009_output/n100.r03.s009.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s009_output/n100.r03.s009.trimmed.sorted.bam" "n100.r03.s009_output/n100.r03.s009.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s009_output/n100.r03.s009.reference.fas" "n100.r03.s009_output/n100.r03.s009.trimmed.sorted.bam" > "n100.r03.s009_output/n100.r03.s009.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s009_output/n100.r03.s009.reference.fas" --call-indels "n100.r03.s009_output/n100.r03.s009.trimmed.sorted.bam" > "n100.r03.s009_output/n100.r03.s009.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s009_output/n100.r03.s009.trimmed.sorted.bam" > "n100.r03.s009_output/n100.r03.s009.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s009_output/n100.r03.s009.depth.txt" "n100.r03.s009_output/n100.r03.s009.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s009_output/n100.r03.s009.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s009_output/n100.r03.s009.reference.fas" | bcftools consensus -m "n100.r03.s009_output/n100.r03.s009.low_depth.tsv" tmp.vcf.gz > "n100.r03.s009_output/n100.r03.s009.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s009_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:318ad4766f43b75ef3fa8e705e18cf2e407bb33fda0381dcfd884a2f2fb20694 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=16.9MiB max=125.7MiB
	    disk mean=8.9MiB max=35.7MiB
	    tmp mean=259B max=1.0KiB
2021/07/08 16:48:40 scheduler task d15cab5f (flow aff1a3f0): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s009.tar.gz resources {}
2021/07/08 16:48:40  ->  n100.r03.s009.Main.cp_out_file aff1a3f0 exec extern s3://niema-test/n100/r03/n100.r03.s009.tar.gz 35.7MiB
2021/07/08 16:48:40 scheduler task ff0ed504 (flow 68367aee): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:223468f8360fc110b84cba202329df9b90d5a71d7457aa2332e6c17bb07a8606 -> s3://niema-test/n100/r03/n100.r03.s054.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:48:40  <-  n100.r03.s054.Main.cp_out_file 68367aee ok   extern 0s 35.7MiB
2021/07/08 16:48:40 scheduler task 0b5ce5c5 (flow 6501f0da): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:b8cd81687d919124f186f6698843b865299032263f36249b6d8455c9f07f288f -> s3://niema-test/n100/r03/n100.r03.s040.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:48:40  <-  n100.r03.s040.Main.cp_out_file 6501f0da ok   extern 0s 35.8MiB
2021/07/08 16:48:40 scheduler task d15cab5f (flow aff1a3f0): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:318ad4766f43b75ef3fa8e705e18cf2e407bb33fda0381dcfd884a2f2fb20694 -> s3://niema-test/n100/r03/n100.r03.s009.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:48:40  <-  n100.r03.s009.Main.cp_out_file aff1a3f0 ok   extern 0s 35.7MiB
2021/07/08 16:49:31 scheduler task 755dfd3e (flow 34520b39): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:31 scheduler task 755dfd3e (flow 34520b39): promoting objects (try 0): started
2021/07/08 16:49:31 scheduler task 755dfd3e (flow 34520b39): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:31 scheduler task 755dfd3e (flow 34520b39): retrieving diagnostic output (try 0): started
2021/07/08 16:49:31 scheduler task 755dfd3e (flow 34520b39): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:31 scheduler task 755dfd3e (flow 34520b39): retrieving result (try 0): started
2021/07/08 16:49:31 scheduler task 755dfd3e (flow 34520b39): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:31 scheduler task 755dfd3e (flow 34520b39): transferring output (try 0): started
2021/07/08 16:49:32 scheduler task 755dfd3e (flow 34520b39): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:32 scheduler task 755dfd3e (flow 34520b39): unloading (try 0): started
2021/07/08 16:49:32 scheduler task 755dfd3e (flow 34520b39): unloading val<.=26c42d0e 35.4MiB>
2021/07/08 16:49:32 scheduler task 755dfd3e (flow 34520b39): unloading list<val<.=657e827b 35.7MiB> 35.7MiB>
2021/07/08 16:49:32 scheduler task 755dfd3e (flow 34520b39): unloading val<.=6ad53ea9 35.4MiB>
2021/07/08 16:49:32 scheduler task 755dfd3e (flow 34520b39): unloaded list<val<.=657e827b 35.7MiB> 35.7MiB>
2021/07/08 16:49:32 scheduler task 755dfd3e (flow 34520b39): unloaded val<.=26c42d0e 35.4MiB>
2021/07/08 16:49:32 scheduler task 755dfd3e (flow 34520b39): unloaded val<.=6ad53ea9 35.4MiB>
2021/07/08 16:49:32 scheduler task 755dfd3e (flow 34520b39): unloading (try 0): successful, next state: complete
2021/07/08 16:49:32  <-  n100.r03.s074.Main.out_file 34520b39 ok     exec 4m51s 35.7MiB
2021/07/08 16:49:32 n100.r03.s074.Main.out_file 34520b39 n100/r03/n100.r03.s074.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:74defd34fbc6b7189a72a9733be80f2ace562648afc98f1813c221cac77e7926
	sha256:34520b39139d59b297f6c953fc18145f9036d60de3e14a0aee5c04b4b4dea2f0
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/755dfd3ef41a9aae7bbee9f65b8291950e40fb3368013e7eadf4bf60979801f1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s074_output"
	    wget -O "n100.r03.s074_output/n100.r03.s074.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s074_output/n100.r03.s074.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s074_output/n100.r03.s074.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s074_output/n100.r03.s074.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s074_output/n100.r03.s074.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s074_output/n100.r03.s074.reference.fas" "n100.r03.s074_output/n100.r03.s074.fq1.fastq" "n100.r03.s074_output/n100.r03.s074.fq2.fastq" | samtools view -bS - > "n100.r03.s074_output/n100.r03.s074.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s074_output/n100.r03.s074.untrimmed.sorted.bam" "n100.r03.s074_output/n100.r03.s074.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s074_output/n100.r03.s074.untrimmed.sorted.bam" -b "n100.r03.s074_output/n100.r03.s074.primers.bed" -p "n100.r03.s074_output/n100.r03.s074.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s074_output/n100.r03.s074.trimmed.sorted.bam" "n100.r03.s074_output/n100.r03.s074.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s074_output/n100.r03.s074.reference.fas" "n100.r03.s074_output/n100.r03.s074.trimmed.sorted.bam" > "n100.r03.s074_output/n100.r03.s074.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s074_output/n100.r03.s074.reference.fas" --call-indels "n100.r03.s074_output/n100.r03.s074.trimmed.sorted.bam" > "n100.r03.s074_output/n100.r03.s074.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s074_output/n100.r03.s074.trimmed.sorted.bam" > "n100.r03.s074_output/n100.r03.s074.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s074_output/n100.r03.s074.depth.txt" "n100.r03.s074_output/n100.r03.s074.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s074_output/n100.r03.s074.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s074_output/n100.r03.s074.reference.fas" | bcftools consensus -m "n100.r03.s074_output/n100.r03.s074.low_depth.tsv" tmp.vcf.gz > "n100.r03.s074_output/n100.r03.s074.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s074_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:657e827bb177f68a39eab91b13d6e1337db6534f77a091f4facbab9403b0494c 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.7MiB max=128.6MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=631B max=2.1KiB
2021/07/08 16:49:32 scheduler task 0d0507d8 (flow 788b1c4f): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s074.tar.gz resources {}
2021/07/08 16:49:32  ->  n100.r03.s074.Main.cp_out_file 788b1c4f exec extern s3://niema-test/n100/r03/n100.r03.s074.tar.gz 35.7MiB
2021/07/08 16:49:33 scheduler task 0d0507d8 (flow 788b1c4f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:657e827bb177f68a39eab91b13d6e1337db6534f77a091f4facbab9403b0494c -> s3://niema-test/n100/r03/n100.r03.s074.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:49:33  <-  n100.r03.s074.Main.cp_out_file 788b1c4f ok   extern 0s 35.7MiB
2021/07/08 16:49:33 scheduler task f0203609 (flow f72aefa7): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:33 scheduler task f0203609 (flow f72aefa7): promoting objects (try 0): started
2021/07/08 16:49:33 scheduler task f0203609 (flow f72aefa7): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:33 scheduler task f0203609 (flow f72aefa7): retrieving diagnostic output (try 0): started
2021/07/08 16:49:33 scheduler task f0203609 (flow f72aefa7): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:33 scheduler task f0203609 (flow f72aefa7): retrieving result (try 0): started
2021/07/08 16:49:33 scheduler task f0203609 (flow f72aefa7): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:33 scheduler task f0203609 (flow f72aefa7): transferring output (try 0): started
2021/07/08 16:49:33 scheduler task 4268bbce (flow e09dd2be): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:33 scheduler task 4268bbce (flow e09dd2be): promoting objects (try 0): started
2021/07/08 16:49:34 scheduler task 4268bbce (flow e09dd2be): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:34 scheduler task 4268bbce (flow e09dd2be): retrieving diagnostic output (try 0): started
2021/07/08 16:49:34 scheduler task 4268bbce (flow e09dd2be): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:34 scheduler task 4268bbce (flow e09dd2be): retrieving result (try 0): started
2021/07/08 16:49:34 scheduler task 4268bbce (flow e09dd2be): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:34 scheduler task 4268bbce (flow e09dd2be): transferring output (try 0): started
2021/07/08 16:49:34 scheduler task f0203609 (flow f72aefa7): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:34 scheduler task f0203609 (flow f72aefa7): unloading (try 0): started
2021/07/08 16:49:34 scheduler task f0203609 (flow f72aefa7): unloading list<val<.=27717487 35.7MiB> 35.7MiB>
2021/07/08 16:49:34 scheduler task f0203609 (flow f72aefa7): unloading val<.=1d21d4b4 35.4MiB>
2021/07/08 16:49:34 scheduler task f0203609 (flow f72aefa7): unloading val<.=49531745 35.4MiB>
2021/07/08 16:49:34 scheduler task f0203609 (flow f72aefa7): unloaded list<val<.=27717487 35.7MiB> 35.7MiB>
2021/07/08 16:49:34 scheduler task f0203609 (flow f72aefa7): unloaded val<.=1d21d4b4 35.4MiB>
2021/07/08 16:49:34 scheduler task f0203609 (flow f72aefa7): unloaded val<.=49531745 35.4MiB>
2021/07/08 16:49:34 scheduler task f0203609 (flow f72aefa7): unloading (try 0): successful, next state: complete
2021/07/08 16:49:34  <-  n100.r03.s082.Main.out_file f72aefa7 ok     exec 4m53s 35.7MiB
2021/07/08 16:49:34 n100.r03.s082.Main.out_file f72aefa7 n100/r03/n100.r03.s082.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:38fcf99b1775e189c36fd9459b1d0914a9c93a3817db113913018f9d9f400fa8
	sha256:f72aefa7f6a52bb2c007cdc1ab4d7126342073cb3787e9f75169953ca2575eaa
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f0203609f422e346938ab760b51e3d25127c8f415d021a05bde63c955e0a0e2b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s082_output"
	    wget -O "n100.r03.s082_output/n100.r03.s082.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s082_output/n100.r03.s082.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s082_output/n100.r03.s082.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s082_output/n100.r03.s082.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s082_output/n100.r03.s082.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s082_output/n100.r03.s082.reference.fas" "n100.r03.s082_output/n100.r03.s082.fq1.fastq" "n100.r03.s082_output/n100.r03.s082.fq2.fastq" | samtools view -bS - > "n100.r03.s082_output/n100.r03.s082.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s082_output/n100.r03.s082.untrimmed.sorted.bam" "n100.r03.s082_output/n100.r03.s082.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s082_output/n100.r03.s082.untrimmed.sorted.bam" -b "n100.r03.s082_output/n100.r03.s082.primers.bed" -p "n100.r03.s082_output/n100.r03.s082.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s082_output/n100.r03.s082.trimmed.sorted.bam" "n100.r03.s082_output/n100.r03.s082.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s082_output/n100.r03.s082.reference.fas" "n100.r03.s082_output/n100.r03.s082.trimmed.sorted.bam" > "n100.r03.s082_output/n100.r03.s082.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s082_output/n100.r03.s082.reference.fas" --call-indels "n100.r03.s082_output/n100.r03.s082.trimmed.sorted.bam" > "n100.r03.s082_output/n100.r03.s082.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s082_output/n100.r03.s082.trimmed.sorted.bam" > "n100.r03.s082_output/n100.r03.s082.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s082_output/n100.r03.s082.depth.txt" "n100.r03.s082_output/n100.r03.s082.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s082_output/n100.r03.s082.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s082_output/n100.r03.s082.reference.fas" | bcftools consensus -m "n100.r03.s082_output/n100.r03.s082.low_depth.tsv" tmp.vcf.gz > "n100.r03.s082_output/n100.r03.s082.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s082_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:2771748746e3715a5c9195b9a7ec19174f84877982e1ce0fb1e1fb84ebc64692 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.7MiB max=128.0MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=627B max=2.1KiB
2021/07/08 16:49:34 scheduler task 5b1587da (flow e9f8a00d): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s082.tar.gz resources {}
2021/07/08 16:49:34  ->  n100.r03.s082.Main.cp_out_file e9f8a00d exec extern s3://niema-test/n100/r03/n100.r03.s082.tar.gz 35.7MiB
2021/07/08 16:49:34 scheduler task 4268bbce (flow e09dd2be): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:34 scheduler task c3343c1f (flow 1aa8e12b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:34 scheduler task 4268bbce (flow e09dd2be): unloading (try 0): started
2021/07/08 16:49:34 scheduler task 4268bbce (flow e09dd2be): unloading list<val<.=cf6e9259 35.7MiB> 35.7MiB>
2021/07/08 16:49:34 scheduler task 4268bbce (flow e09dd2be): unloading val<.=9366d84d 35.4MiB>
2021/07/08 16:49:34 scheduler task 4268bbce (flow e09dd2be): unloading val<.=295f5629 35.4MiB>
2021/07/08 16:49:34 scheduler task c3343c1f (flow 1aa8e12b): promoting objects (try 0): started
2021/07/08 16:49:34 scheduler task c3343c1f (flow 1aa8e12b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:34 scheduler task 4268bbce (flow e09dd2be): unloaded val<.=9366d84d 35.4MiB>
2021/07/08 16:49:34 scheduler task 4268bbce (flow e09dd2be): unloaded list<val<.=cf6e9259 35.7MiB> 35.7MiB>
2021/07/08 16:49:34 scheduler task 4268bbce (flow e09dd2be): unloaded val<.=295f5629 35.4MiB>
2021/07/08 16:49:34 scheduler task 4268bbce (flow e09dd2be): unloading (try 0): successful, next state: complete
2021/07/08 16:49:34 scheduler task c3343c1f (flow 1aa8e12b): retrieving diagnostic output (try 0): started
2021/07/08 16:49:34  <-  n100.r03.s038.Main.out_file e09dd2be ok     exec 4m54s 35.7MiB
2021/07/08 16:49:34 n100.r03.s038.Main.out_file e09dd2be n100/r03/n100.r03.s038.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:6850c69624cfaee4e1dabc9f5458a0f440cdb213feaeb2b1ffb103ed488ff6c7
	sha256:e09dd2be34adf64f49a2f1581e0d558bd01c0c88a1ec7e87aebfa534e04d6c89
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4268bbce6787522bc079a2e11805aa325a6c788c35617975ee89885f71692cc2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s038_output"
	    wget -O "n100.r03.s038_output/n100.r03.s038.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s038_output/n100.r03.s038.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s038_output/n100.r03.s038.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s038_output/n100.r03.s038.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s038_output/n100.r03.s038.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s038_output/n100.r03.s038.reference.fas" "n100.r03.s038_output/n100.r03.s038.fq1.fastq" "n100.r03.s038_output/n100.r03.s038.fq2.fastq" | samtools view -bS - > "n100.r03.s038_output/n100.r03.s038.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s038_output/n100.r03.s038.untrimmed.sorted.bam" "n100.r03.s038_output/n100.r03.s038.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s038_output/n100.r03.s038.untrimmed.sorted.bam" -b "n100.r03.s038_output/n100.r03.s038.primers.bed" -p "n100.r03.s038_output/n100.r03.s038.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s038_output/n100.r03.s038.trimmed.sorted.bam" "n100.r03.s038_output/n100.r03.s038.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s038_output/n100.r03.s038.reference.fas" "n100.r03.s038_output/n100.r03.s038.trimmed.sorted.bam" > "n100.r03.s038_output/n100.r03.s038.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s038_output/n100.r03.s038.reference.fas" --call-indels "n100.r03.s038_output/n100.r03.s038.trimmed.sorted.bam" > "n100.r03.s038_output/n100.r03.s038.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s038_output/n100.r03.s038.trimmed.sorted.bam" > "n100.r03.s038_output/n100.r03.s038.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s038_output/n100.r03.s038.depth.txt" "n100.r03.s038_output/n100.r03.s038.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s038_output/n100.r03.s038.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s038_output/n100.r03.s038.reference.fas" | bcftools consensus -m "n100.r03.s038_output/n100.r03.s038.low_depth.tsv" tmp.vcf.gz > "n100.r03.s038_output/n100.r03.s038.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s038_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:cf6e92598457560272cd6b6131e13282914326c869b3d3c598cad1bf7c01ae8a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.4MiB max=129.3MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=632B max=2.1KiB
2021/07/08 16:49:34 scheduler task 8cee772d (flow e45d1f22): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s038.tar.gz resources {}
2021/07/08 16:49:34  ->  n100.r03.s038.Main.cp_out_file e45d1f22 exec extern s3://niema-test/n100/r03/n100.r03.s038.tar.gz 35.7MiB
2021/07/08 16:49:34 scheduler task dd443953 (flow 3816e5c5): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:34 scheduler task dd443953 (flow 3816e5c5): promoting objects (try 0): started
2021/07/08 16:49:34 scheduler task c3343c1f (flow 1aa8e12b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:34 scheduler task c3343c1f (flow 1aa8e12b): retrieving result (try 0): started
2021/07/08 16:49:34 scheduler task dd443953 (flow 3816e5c5): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:34 scheduler task c3343c1f (flow 1aa8e12b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:34 scheduler task dd443953 (flow 3816e5c5): retrieving diagnostic output (try 0): started
2021/07/08 16:49:34 scheduler task c3343c1f (flow 1aa8e12b): transferring output (try 0): started
2021/07/08 16:49:35 scheduler task dd443953 (flow 3816e5c5): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:35 scheduler task dd443953 (flow 3816e5c5): retrieving result (try 0): started
2021/07/08 16:49:35 scheduler task 5b1587da (flow e9f8a00d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:2771748746e3715a5c9195b9a7ec19174f84877982e1ce0fb1e1fb84ebc64692 -> s3://niema-test/n100/r03/n100.r03.s082.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:49:35  <-  n100.r03.s082.Main.cp_out_file e9f8a00d ok   extern 0s 35.7MiB
2021/07/08 16:49:35 scheduler task dd443953 (flow 3816e5c5): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:35 scheduler task dd443953 (flow 3816e5c5): transferring output (try 0): started
2021/07/08 16:49:35 scheduler task c3343c1f (flow 1aa8e12b): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:35 scheduler task c3343c1f (flow 1aa8e12b): unloading (try 0): started
2021/07/08 16:49:35 scheduler task c3343c1f (flow 1aa8e12b): unloading list<val<.=fe745419 35.7MiB> 35.7MiB>
2021/07/08 16:49:35 scheduler task c3343c1f (flow 1aa8e12b): unloading val<.=fcc41be7 35.4MiB>
2021/07/08 16:49:35 scheduler task c3343c1f (flow 1aa8e12b): unloading val<.=1669ea9f 35.4MiB>
2021/07/08 16:49:35 scheduler task 8cee772d (flow e45d1f22): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:cf6e92598457560272cd6b6131e13282914326c869b3d3c598cad1bf7c01ae8a -> s3://niema-test/n100/r03/n100.r03.s038.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:49:35  <-  n100.r03.s038.Main.cp_out_file e45d1f22 ok   extern 0s 35.7MiB
2021/07/08 16:49:35 scheduler task c3343c1f (flow 1aa8e12b): unloaded list<val<.=fe745419 35.7MiB> 35.7MiB>
2021/07/08 16:49:35 scheduler task c3343c1f (flow 1aa8e12b): unloaded val<.=fcc41be7 35.4MiB>
2021/07/08 16:49:35 scheduler task c3343c1f (flow 1aa8e12b): unloaded val<.=1669ea9f 35.4MiB>
2021/07/08 16:49:35 scheduler task c3343c1f (flow 1aa8e12b): unloading (try 0): successful, next state: complete
2021/07/08 16:49:35  <-  n100.r03.s079.Main.out_file 1aa8e12b ok     exec 4m55s 35.7MiB
2021/07/08 16:49:35 n100.r03.s079.Main.out_file 1aa8e12b n100/r03/n100.r03.s079.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4df613b4201edbbfb1e0ceed723b429081ac892bf8d2537456b817ad1f1995fa
	sha256:1aa8e12b3b884c63d49d4877cf210f49e66c99b47f9483778ee1a6863302b895
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c3343c1f6c956f88d75f1134421fed3a687e7be3bd7b1f27c50f914d31c38a6a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s079_output"
	    wget -O "n100.r03.s079_output/n100.r03.s079.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s079_output/n100.r03.s079.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s079_output/n100.r03.s079.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s079_output/n100.r03.s079.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s079_output/n100.r03.s079.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s079_output/n100.r03.s079.reference.fas" "n100.r03.s079_output/n100.r03.s079.fq1.fastq" "n100.r03.s079_output/n100.r03.s079.fq2.fastq" | samtools view -bS - > "n100.r03.s079_output/n100.r03.s079.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s079_output/n100.r03.s079.untrimmed.sorted.bam" "n100.r03.s079_output/n100.r03.s079.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s079_output/n100.r03.s079.untrimmed.sorted.bam" -b "n100.r03.s079_output/n100.r03.s079.primers.bed" -p "n100.r03.s079_output/n100.r03.s079.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s079_output/n100.r03.s079.trimmed.sorted.bam" "n100.r03.s079_output/n100.r03.s079.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s079_output/n100.r03.s079.reference.fas" "n100.r03.s079_output/n100.r03.s079.trimmed.sorted.bam" > "n100.r03.s079_output/n100.r03.s079.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s079_output/n100.r03.s079.reference.fas" --call-indels "n100.r03.s079_output/n100.r03.s079.trimmed.sorted.bam" > "n100.r03.s079_output/n100.r03.s079.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s079_output/n100.r03.s079.trimmed.sorted.bam" > "n100.r03.s079_output/n100.r03.s079.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s079_output/n100.r03.s079.depth.txt" "n100.r03.s079_output/n100.r03.s079.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s079_output/n100.r03.s079.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s079_output/n100.r03.s079.reference.fas" | bcftools consensus -m "n100.r03.s079_output/n100.r03.s079.low_depth.tsv" tmp.vcf.gz > "n100.r03.s079_output/n100.r03.s079.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s079_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:fe745419a9ba42e3ec0728976b4ebf3635b27709e0c6238e8e5bd8b28bf0dcea 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.3MiB max=129.0MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=625B max=2.0KiB
2021/07/08 16:49:35 scheduler task 7bb09cc2 (flow 9a29e41d): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s079.tar.gz resources {}
2021/07/08 16:49:35  ->  n100.r03.s079.Main.cp_out_file 9a29e41d exec extern s3://niema-test/n100/r03/n100.r03.s079.tar.gz 35.7MiB
2021/07/08 16:49:35 scheduler task dd443953 (flow 3816e5c5): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:35 scheduler task ca4ff408 (flow 5e2cc6ee): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:35 scheduler task dd443953 (flow 3816e5c5): unloading (try 0): started
2021/07/08 16:49:35 scheduler task dd443953 (flow 3816e5c5): unloading list<val<.=2c31da6a 35.7MiB> 35.7MiB>
2021/07/08 16:49:35 scheduler task dd443953 (flow 3816e5c5): unloading val<.=25d6d601 35.4MiB>
2021/07/08 16:49:35 scheduler task dd443953 (flow 3816e5c5): unloading val<.=9a15a3e8 35.4MiB>
2021/07/08 16:49:35 scheduler task ca4ff408 (flow 5e2cc6ee): promoting objects (try 0): started
2021/07/08 16:49:35 scheduler task a64ed56a (flow dcbde93f): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:35 scheduler task a64ed56a (flow dcbde93f): promoting objects (try 0): started
2021/07/08 16:49:35 scheduler task dd443953 (flow 3816e5c5): unloaded val<.=9a15a3e8 35.4MiB>
2021/07/08 16:49:35 scheduler task dd443953 (flow 3816e5c5): unloaded list<val<.=2c31da6a 35.7MiB> 35.7MiB>
2021/07/08 16:49:35 scheduler task dd443953 (flow 3816e5c5): unloaded val<.=25d6d601 35.4MiB>
2021/07/08 16:49:35 scheduler task dd443953 (flow 3816e5c5): unloading (try 0): successful, next state: complete
2021/07/08 16:49:35  <-  n100.r03.s043.Main.out_file 3816e5c5 ok     exec 4m55s 35.7MiB
2021/07/08 16:49:35 n100.r03.s043.Main.out_file 3816e5c5 n100/r03/n100.r03.s043.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fbd4b81a3d40848bfd98284c0865c5c13b6850fd17e194711a1ec6f1f0155c1c
	sha256:3816e5c50dc53777450cf6ee1ae02615329ac49de564b7709b0d66c1d1bbc80f
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/dd443953f37d62a5175750bafa0a107b90b92516abd24104e2281467f6b7cad4
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s043_output"
	    wget -O "n100.r03.s043_output/n100.r03.s043.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s043_output/n100.r03.s043.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s043_output/n100.r03.s043.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s043_output/n100.r03.s043.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s043_output/n100.r03.s043.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s043_output/n100.r03.s043.reference.fas" "n100.r03.s043_output/n100.r03.s043.fq1.fastq" "n100.r03.s043_output/n100.r03.s043.fq2.fastq" | samtools view -bS - > "n100.r03.s043_output/n100.r03.s043.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s043_output/n100.r03.s043.untrimmed.sorted.bam" "n100.r03.s043_output/n100.r03.s043.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s043_output/n100.r03.s043.untrimmed.sorted.bam" -b "n100.r03.s043_output/n100.r03.s043.primers.bed" -p "n100.r03.s043_output/n100.r03.s043.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s043_output/n100.r03.s043.trimmed.sorted.bam" "n100.r03.s043_output/n100.r03.s043.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s043_output/n100.r03.s043.reference.fas" "n100.r03.s043_output/n100.r03.s043.trimmed.sorted.bam" > "n100.r03.s043_output/n100.r03.s043.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s043_output/n100.r03.s043.reference.fas" --call-indels "n100.r03.s043_output/n100.r03.s043.trimmed.sorted.bam" > "n100.r03.s043_output/n100.r03.s043.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s043_output/n100.r03.s043.trimmed.sorted.bam" > "n100.r03.s043_output/n100.r03.s043.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s043_output/n100.r03.s043.depth.txt" "n100.r03.s043_output/n100.r03.s043.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s043_output/n100.r03.s043.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s043_output/n100.r03.s043.reference.fas" | bcftools consensus -m "n100.r03.s043_output/n100.r03.s043.low_depth.tsv" tmp.vcf.gz > "n100.r03.s043_output/n100.r03.s043.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s043_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:2c31da6ad7e8b503b3da937523299e72e3b196f9ae5b679d0c00162ef1ae02ee 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.1MiB max=131.4MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 16:49:35 scheduler task 0b05efbb (flow b6a34ec7): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s043.tar.gz resources {}
2021/07/08 16:49:35  ->  n100.r03.s043.Main.cp_out_file b6a34ec7 exec extern s3://niema-test/n100/r03/n100.r03.s043.tar.gz 35.7MiB
2021/07/08 16:49:35 scheduler task ca4ff408 (flow 5e2cc6ee): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:35 scheduler task bbcfd2b5 (flow 2ac719fa): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:35 scheduler task ca4ff408 (flow 5e2cc6ee): retrieving diagnostic output (try 0): started
2021/07/08 16:49:35 scheduler task bbcfd2b5 (flow 2ac719fa): promoting objects (try 0): started
2021/07/08 16:49:35 scheduler task a64ed56a (flow dcbde93f): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:35 scheduler task ca4ff408 (flow 5e2cc6ee): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:35 scheduler task a64ed56a (flow dcbde93f): retrieving diagnostic output (try 0): started
2021/07/08 16:49:35 scheduler task bbcfd2b5 (flow 2ac719fa): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:35 scheduler task ca4ff408 (flow 5e2cc6ee): retrieving result (try 0): started
2021/07/08 16:49:35 scheduler task bbcfd2b5 (flow 2ac719fa): retrieving diagnostic output (try 0): started
2021/07/08 16:49:35 scheduler task a64ed56a (flow dcbde93f): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:35 scheduler task ca4ff408 (flow 5e2cc6ee): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:35 scheduler task a64ed56a (flow dcbde93f): retrieving result (try 0): started
2021/07/08 16:49:35 scheduler task ca4ff408 (flow 5e2cc6ee): transferring output (try 0): started
2021/07/08 16:49:36 scheduler task bbcfd2b5 (flow 2ac719fa): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:36 scheduler task a64ed56a (flow dcbde93f): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:36 scheduler task bbcfd2b5 (flow 2ac719fa): retrieving result (try 0): started
2021/07/08 16:49:36 scheduler task a64ed56a (flow dcbde93f): transferring output (try 0): started
2021/07/08 16:49:36 scheduler task bbcfd2b5 (flow 2ac719fa): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:36 scheduler task bbcfd2b5 (flow 2ac719fa): transferring output (try 0): started
2021/07/08 16:49:36 scheduler task 7bb09cc2 (flow 9a29e41d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:fe745419a9ba42e3ec0728976b4ebf3635b27709e0c6238e8e5bd8b28bf0dcea -> s3://niema-test/n100/r03/n100.r03.s079.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:49:36  <-  n100.r03.s079.Main.cp_out_file 9a29e41d ok   extern 0s 35.7MiB
2021/07/08 16:49:36 scheduler task 0b05efbb (flow b6a34ec7): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:2c31da6ad7e8b503b3da937523299e72e3b196f9ae5b679d0c00162ef1ae02ee -> s3://niema-test/n100/r03/n100.r03.s043.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:49:36  <-  n100.r03.s043.Main.cp_out_file b6a34ec7 ok   extern 0s 35.7MiB
2021/07/08 16:49:36 scheduler task ca4ff408 (flow 5e2cc6ee): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:36 scheduler task 29f0c020 (flow 17bef574): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:36 scheduler task 5009eabe (flow 942ecb0a): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:36 scheduler task ca4ff408 (flow 5e2cc6ee): unloading (try 0): started
2021/07/08 16:49:36 scheduler task ca4ff408 (flow 5e2cc6ee): unloading list<val<.=978cd3ba 35.7MiB> 35.7MiB>
2021/07/08 16:49:36 scheduler task ca4ff408 (flow 5e2cc6ee): unloading val<.=4fee6658 35.4MiB>
2021/07/08 16:49:36 scheduler task ca4ff408 (flow 5e2cc6ee): unloading val<.=a1abc23f 35.4MiB>
2021/07/08 16:49:36 scheduler task 29f0c020 (flow 17bef574): promoting objects (try 0): started
2021/07/08 16:49:36 scheduler task 5009eabe (flow 942ecb0a): promoting objects (try 0): started
2021/07/08 16:49:36 scheduler task a64ed56a (flow dcbde93f): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:36 scheduler task a64ed56a (flow dcbde93f): unloading (try 0): started
2021/07/08 16:49:36 scheduler task a64ed56a (flow dcbde93f): unloading list<val<.=b3eae8b0 35.7MiB> 35.7MiB>
2021/07/08 16:49:36 scheduler task a64ed56a (flow dcbde93f): unloading val<.=77dc6664 35.4MiB>
2021/07/08 16:49:36 scheduler task a64ed56a (flow dcbde93f): unloading val<.=c2e89ac2 35.4MiB>
2021/07/08 16:49:36 scheduler task ca4ff408 (flow 5e2cc6ee): unloaded list<val<.=978cd3ba 35.7MiB> 35.7MiB>
2021/07/08 16:49:36 scheduler task ca4ff408 (flow 5e2cc6ee): unloaded val<.=a1abc23f 35.4MiB>
2021/07/08 16:49:36 scheduler task ca4ff408 (flow 5e2cc6ee): unloaded val<.=4fee6658 35.4MiB>
2021/07/08 16:49:36 scheduler task ca4ff408 (flow 5e2cc6ee): unloading (try 0): successful, next state: complete
2021/07/08 16:49:36 scheduler task 29f0c020 (flow 17bef574): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:36  <-  n100.r03.s051.Main.out_file 5e2cc6ee ok     exec 4m55s 35.7MiB
2021/07/08 16:49:36 n100.r03.s051.Main.out_file 5e2cc6ee n100/r03/n100.r03.s051.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c1df2badb5ac8e29c96b153054ab56f03139131d138e9f2011ff99943eeab5f0
	sha256:5e2cc6eeba44a8083e6c9ab39f70d6f6d36e65aa5b15cad5678398771e1ee423
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ca4ff408f4f394fdc0bff2f43e63e4a3ae6ea9c4756e6450dab8ceb03529f2a7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s051_output"
	    wget -O "n100.r03.s051_output/n100.r03.s051.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s051_output/n100.r03.s051.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s051_output/n100.r03.s051.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s051_output/n100.r03.s051.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s051_output/n100.r03.s051.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s051_output/n100.r03.s051.reference.fas" "n100.r03.s051_output/n100.r03.s051.fq1.fastq" "n100.r03.s051_output/n100.r03.s051.fq2.fastq" | samtools view -bS - > "n100.r03.s051_output/n100.r03.s051.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s051_output/n100.r03.s051.untrimmed.sorted.bam" "n100.r03.s051_output/n100.r03.s051.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s051_output/n100.r03.s051.untrimmed.sorted.bam" -b "n100.r03.s051_output/n100.r03.s051.primers.bed" -p "n100.r03.s051_output/n100.r03.s051.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s051_output/n100.r03.s051.trimmed.sorted.bam" "n100.r03.s051_output/n100.r03.s051.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s051_output/n100.r03.s051.reference.fas" "n100.r03.s051_output/n100.r03.s051.trimmed.sorted.bam" > "n100.r03.s051_output/n100.r03.s051.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s051_output/n100.r03.s051.reference.fas" --call-indels "n100.r03.s051_output/n100.r03.s051.trimmed.sorted.bam" > "n100.r03.s051_output/n100.r03.s051.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s051_output/n100.r03.s051.trimmed.sorted.bam" > "n100.r03.s051_output/n100.r03.s051.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s051_output/n100.r03.s051.depth.txt" "n100.r03.s051_output/n100.r03.s051.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s051_output/n100.r03.s051.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s051_output/n100.r03.s051.reference.fas" | bcftools consensus -m "n100.r03.s051_output/n100.r03.s051.low_depth.tsv" tmp.vcf.gz > "n100.r03.s051_output/n100.r03.s051.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s051_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:978cd3ba8ca240c26e5c4a529434b8b500ec3f41f8e8abd400ddee82707273e6 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.6MiB max=130.0MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=627B max=2.0KiB
2021/07/08 16:49:36 scheduler task ff510fc8 (flow 7fb374f8): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s051.tar.gz resources {}
2021/07/08 16:49:36  ->  n100.r03.s051.Main.cp_out_file 7fb374f8 exec extern s3://niema-test/n100/r03/n100.r03.s051.tar.gz 35.7MiB
2021/07/08 16:49:36 scheduler task 29f0c020 (flow 17bef574): retrieving diagnostic output (try 0): started
2021/07/08 16:49:36 scheduler task bbcfd2b5 (flow 2ac719fa): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:36 scheduler task bbcfd2b5 (flow 2ac719fa): unloading (try 0): started
2021/07/08 16:49:36 scheduler task bbcfd2b5 (flow 2ac719fa): unloading list<val<.=9e4e585d 35.7MiB> 35.7MiB>
2021/07/08 16:49:36 scheduler task bbcfd2b5 (flow 2ac719fa): unloading val<.=89597b58 35.4MiB>
2021/07/08 16:49:36 scheduler task bbcfd2b5 (flow 2ac719fa): unloading val<.=5184750e 35.4MiB>
2021/07/08 16:49:36 scheduler task bc51d36b (flow 29867b33): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:36 scheduler task 5009eabe (flow 942ecb0a): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:36 scheduler task a64ed56a (flow dcbde93f): unloaded val<.=77dc6664 35.4MiB>
2021/07/08 16:49:36 scheduler task a64ed56a (flow dcbde93f): unloaded list<val<.=b3eae8b0 35.7MiB> 35.7MiB>
2021/07/08 16:49:36 scheduler task 16ea2db5 (flow ff2c5c89): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:36 scheduler task a64ed56a (flow dcbde93f): unloaded val<.=c2e89ac2 35.4MiB>
2021/07/08 16:49:36 scheduler task a64ed56a (flow dcbde93f): unloading (try 0): successful, next state: complete
2021/07/08 16:49:36 scheduler task bc51d36b (flow 29867b33): promoting objects (try 0): started
2021/07/08 16:49:36 scheduler task 29f0c020 (flow 17bef574): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:36 scheduler task 5009eabe (flow 942ecb0a): retrieving diagnostic output (try 0): started
2021/07/08 16:49:36 scheduler task 16ea2db5 (flow ff2c5c89): promoting objects (try 0): started
2021/07/08 16:49:36  <-  n100.r03.s030.Main.out_file dcbde93f ok     exec 4m55s 35.7MiB
2021/07/08 16:49:36 n100.r03.s030.Main.out_file dcbde93f n100/r03/n100.r03.s030.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e09ac3330ea125f29e6a5dd74af31eaa7e30f94a087040fe0f8614a5337d3078
	sha256:dcbde93f291f626dcade5d69a7bea49744ca5b38c26969421dd81804192f4e7c
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a64ed56a9e859acab53eb03b96e065f7fca8a5daaa6a629065953a94f8b69379
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s030_output"
	    wget -O "n100.r03.s030_output/n100.r03.s030.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s030_output/n100.r03.s030.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s030_output/n100.r03.s030.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s030_output/n100.r03.s030.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s030_output/n100.r03.s030.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s030_output/n100.r03.s030.reference.fas" "n100.r03.s030_output/n100.r03.s030.fq1.fastq" "n100.r03.s030_output/n100.r03.s030.fq2.fastq" | samtools view -bS - > "n100.r03.s030_output/n100.r03.s030.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s030_output/n100.r03.s030.untrimmed.sorted.bam" "n100.r03.s030_output/n100.r03.s030.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s030_output/n100.r03.s030.untrimmed.sorted.bam" -b "n100.r03.s030_output/n100.r03.s030.primers.bed" -p "n100.r03.s030_output/n100.r03.s030.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s030_output/n100.r03.s030.trimmed.sorted.bam" "n100.r03.s030_output/n100.r03.s030.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s030_output/n100.r03.s030.reference.fas" "n100.r03.s030_output/n100.r03.s030.trimmed.sorted.bam" > "n100.r03.s030_output/n100.r03.s030.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s030_output/n100.r03.s030.reference.fas" --call-indels "n100.r03.s030_output/n100.r03.s030.trimmed.sorted.bam" > "n100.r03.s030_output/n100.r03.s030.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s030_output/n100.r03.s030.trimmed.sorted.bam" > "n100.r03.s030_output/n100.r03.s030.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s030_output/n100.r03.s030.depth.txt" "n100.r03.s030_output/n100.r03.s030.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s030_output/n100.r03.s030.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s030_output/n100.r03.s030.reference.fas" | bcftools consensus -m "n100.r03.s030_output/n100.r03.s030.low_depth.tsv" tmp.vcf.gz > "n100.r03.s030_output/n100.r03.s030.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s030_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:b3eae8b05377465dc44bc727dfd91add0b5f02cb3bf517740c23ad449cfb19ae 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.0MiB max=130.6MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=631B max=2.1KiB
2021/07/08 16:49:36 scheduler task 4ce5a017 (flow b40dafa9): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s030.tar.gz resources {}
2021/07/08 16:49:36  ->  n100.r03.s030.Main.cp_out_file b40dafa9 exec extern s3://niema-test/n100/r03/n100.r03.s030.tar.gz 35.7MiB
2021/07/08 16:49:36 scheduler task 29f0c020 (flow 17bef574): retrieving result (try 0): started
2021/07/08 16:49:36 scheduler task bbcfd2b5 (flow 2ac719fa): unloaded list<val<.=9e4e585d 35.7MiB> 35.7MiB>
2021/07/08 16:49:36 scheduler task bbcfd2b5 (flow 2ac719fa): unloaded val<.=5184750e 35.4MiB>
2021/07/08 16:49:36 scheduler task bbcfd2b5 (flow 2ac719fa): unloaded val<.=89597b58 35.4MiB>
2021/07/08 16:49:36 scheduler task bbcfd2b5 (flow 2ac719fa): unloading (try 0): successful, next state: complete
2021/07/08 16:49:36 scheduler task e7da8eee (flow 3523219a): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:36  <-  n100.r03.s016.Main.out_file 2ac719fa ok     exec 4m56s 35.7MiB
2021/07/08 16:49:36 n100.r03.s016.Main.out_file 2ac719fa n100/r03/n100.r03.s016.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:59f57d096e324089b6e38c49593708bac86344c6a465986af8c22cd2ddbf3852
	sha256:2ac719faeb5717c85c22d2af26cb45c5977db71f54ab2670079db4bed872a98e
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bbcfd2b5b3d207cc51cfb3112daf6ae59d3eb6bb4ac260948dccef64f745c66b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s016_output"
	    wget -O "n100.r03.s016_output/n100.r03.s016.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s016_output/n100.r03.s016.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s016_output/n100.r03.s016.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s016_output/n100.r03.s016.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s016_output/n100.r03.s016.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s016_output/n100.r03.s016.reference.fas" "n100.r03.s016_output/n100.r03.s016.fq1.fastq" "n100.r03.s016_output/n100.r03.s016.fq2.fastq" | samtools view -bS - > "n100.r03.s016_output/n100.r03.s016.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s016_output/n100.r03.s016.untrimmed.sorted.bam" "n100.r03.s016_output/n100.r03.s016.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s016_output/n100.r03.s016.untrimmed.sorted.bam" -b "n100.r03.s016_output/n100.r03.s016.primers.bed" -p "n100.r03.s016_output/n100.r03.s016.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s016_output/n100.r03.s016.trimmed.sorted.bam" "n100.r03.s016_output/n100.r03.s016.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s016_output/n100.r03.s016.reference.fas" "n100.r03.s016_output/n100.r03.s016.trimmed.sorted.bam" > "n100.r03.s016_output/n100.r03.s016.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s016_output/n100.r03.s016.reference.fas" --call-indels "n100.r03.s016_output/n100.r03.s016.trimmed.sorted.bam" > "n100.r03.s016_output/n100.r03.s016.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s016_output/n100.r03.s016.trimmed.sorted.bam" > "n100.r03.s016_output/n100.r03.s016.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s016_output/n100.r03.s016.depth.txt" "n100.r03.s016_output/n100.r03.s016.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s016_output/n100.r03.s016.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s016_output/n100.r03.s016.reference.fas" | bcftools consensus -m "n100.r03.s016_output/n100.r03.s016.low_depth.tsv" tmp.vcf.gz > "n100.r03.s016_output/n100.r03.s016.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s016_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9e4e585d2dbb2e873461065375f1498ae0aa62c5cfafa765a5a5a8425214e7c0 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.9MiB max=130.7MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=627B max=2.1KiB
2021/07/08 16:49:36 scheduler task 557bc560 (flow 3842668c): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s016.tar.gz resources {}
2021/07/08 16:49:36  ->  n100.r03.s016.Main.cp_out_file 3842668c exec extern s3://niema-test/n100/r03/n100.r03.s016.tar.gz 35.7MiB
2021/07/08 16:49:36 scheduler task bc51d36b (flow 29867b33): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:36 scheduler task e7da8eee (flow 3523219a): promoting objects (try 0): started
2021/07/08 16:49:36 scheduler task bc51d36b (flow 29867b33): retrieving diagnostic output (try 0): started
2021/07/08 16:49:37 scheduler task 16ea2db5 (flow ff2c5c89): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:37 scheduler task 29f0c020 (flow 17bef574): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:37 scheduler task 5009eabe (flow 942ecb0a): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:37 scheduler task 16ea2db5 (flow ff2c5c89): retrieving diagnostic output (try 0): started
2021/07/08 16:49:37 scheduler task 29f0c020 (flow 17bef574): transferring output (try 0): started
2021/07/08 16:49:37 scheduler task 5009eabe (flow 942ecb0a): retrieving result (try 0): started
2021/07/08 16:49:37 scheduler task 651abeff (flow f2593f6b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:37 scheduler task 651abeff (flow f2593f6b): promoting objects (try 0): started
2021/07/08 16:49:37 scheduler task e7da8eee (flow 3523219a): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:37 scheduler task bc51d36b (flow 29867b33): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:37 scheduler task e7da8eee (flow 3523219a): retrieving diagnostic output (try 0): started
2021/07/08 16:49:37 scheduler task bc51d36b (flow 29867b33): retrieving result (try 0): started
2021/07/08 16:49:37 scheduler task 651abeff (flow f2593f6b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:37 scheduler task b4bc837b (flow d79d1747): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:37 scheduler task 5009eabe (flow 942ecb0a): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:37 scheduler task 16ea2db5 (flow ff2c5c89): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:37 scheduler task bc51d36b (flow 29867b33): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:37 scheduler task 651abeff (flow f2593f6b): retrieving diagnostic output (try 0): started
2021/07/08 16:49:37 scheduler task b4bc837b (flow d79d1747): promoting objects (try 0): started
2021/07/08 16:49:37 scheduler task 5009eabe (flow 942ecb0a): transferring output (try 0): started
2021/07/08 16:49:37 scheduler task 16ea2db5 (flow ff2c5c89): retrieving result (try 0): started
2021/07/08 16:49:37 scheduler task bc51d36b (flow 29867b33): transferring output (try 0): started
2021/07/08 16:49:37 scheduler task 9a3d3840 (flow be1bb147): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:37 scheduler task e7da8eee (flow 3523219a): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:37 scheduler task 9a3d3840 (flow be1bb147): promoting objects (try 0): started
2021/07/08 16:49:37 scheduler task e7da8eee (flow 3523219a): retrieving result (try 0): started
2021/07/08 16:49:37 scheduler task b4bc837b (flow d79d1747): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:37 scheduler task 16ea2db5 (flow ff2c5c89): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:37 scheduler task 651abeff (flow f2593f6b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:37 scheduler task ff510fc8 (flow 7fb374f8): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:978cd3ba8ca240c26e5c4a529434b8b500ec3f41f8e8abd400ddee82707273e6 -> s3://niema-test/n100/r03/n100.r03.s051.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:49:37  <-  n100.r03.s051.Main.cp_out_file 7fb374f8 ok   extern 0s 35.7MiB
2021/07/08 16:49:37 scheduler task b4bc837b (flow d79d1747): retrieving diagnostic output (try 0): started
2021/07/08 16:49:37 scheduler task 16ea2db5 (flow ff2c5c89): transferring output (try 0): started
2021/07/08 16:49:37 scheduler task 651abeff (flow f2593f6b): retrieving result (try 0): started
2021/07/08 16:49:37 scheduler task e7da8eee (flow 3523219a): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:37 scheduler task 9a3d3840 (flow be1bb147): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:37 scheduler task e7da8eee (flow 3523219a): transferring output (try 0): started
2021/07/08 16:49:37 scheduler task 9a3d3840 (flow be1bb147): retrieving diagnostic output (try 0): started
2021/07/08 16:49:37 scheduler task b4bc837b (flow d79d1747): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:37 scheduler task 651abeff (flow f2593f6b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:37 scheduler task b4bc837b (flow d79d1747): retrieving result (try 0): started
2021/07/08 16:49:37 scheduler task 651abeff (flow f2593f6b): transferring output (try 0): started
2021/07/08 16:49:37 scheduler task 9a3d3840 (flow be1bb147): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:37 scheduler task 29f0c020 (flow 17bef574): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:37 scheduler task b4bc837b (flow d79d1747): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:37 scheduler task 9a3d3840 (flow be1bb147): retrieving result (try 0): started
2021/07/08 16:49:37 scheduler task 29f0c020 (flow 17bef574): unloading (try 0): started
2021/07/08 16:49:37 scheduler task 29f0c020 (flow 17bef574): unloading list<val<.=d81c30cf 35.8MiB> 35.8MiB>
2021/07/08 16:49:37 scheduler task 29f0c020 (flow 17bef574): unloading val<.=561825aa 35.4MiB>
2021/07/08 16:49:37 scheduler task 29f0c020 (flow 17bef574): unloading val<.=326627c6 35.4MiB>
2021/07/08 16:49:37 scheduler task b4bc837b (flow d79d1747): transferring output (try 0): started
2021/07/08 16:49:37 scheduler task 9a3d3840 (flow be1bb147): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:37 scheduler task 557bc560 (flow 3842668c): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9e4e585d2dbb2e873461065375f1498ae0aa62c5cfafa765a5a5a8425214e7c0 -> s3://niema-test/n100/r03/n100.r03.s016.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:49:37 scheduler task 29f0c020 (flow 17bef574): unloaded val<.=326627c6 35.4MiB>
2021/07/08 16:49:37 scheduler task 29f0c020 (flow 17bef574): unloaded list<val<.=d81c30cf 35.8MiB> 35.8MiB>
2021/07/08 16:49:37  <-  n100.r03.s016.Main.cp_out_file 3842668c ok   extern 0s 35.7MiB
2021/07/08 16:49:37 scheduler task 29f0c020 (flow 17bef574): unloaded val<.=561825aa 35.4MiB>
2021/07/08 16:49:37 scheduler task 29f0c020 (flow 17bef574): unloading (try 0): successful, next state: complete
2021/07/08 16:49:37 scheduler task 9a3d3840 (flow be1bb147): transferring output (try 0): started
2021/07/08 16:49:37  <-  n100.r03.s064.Main.out_file 17bef574 ok     exec 4m57s 35.8MiB
2021/07/08 16:49:37 n100.r03.s064.Main.out_file 17bef574 n100/r03/n100.r03.s064.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8f3e8f1cc0e81f6341edfeb11ecbfae5e97b0e57832c66b1096c507dd121faea
	sha256:17bef5747981a2122b3596b3365a2e0e965614940f1011fcb5e473c62ab9b94c
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/29f0c020d5a0ad7b82db28e4ad984d553d37d8d6077c89b2ccad30fed87172a2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s064_output"
	    wget -O "n100.r03.s064_output/n100.r03.s064.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s064_output/n100.r03.s064.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s064_output/n100.r03.s064.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s064_output/n100.r03.s064.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s064_output/n100.r03.s064.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s064_output/n100.r03.s064.reference.fas" "n100.r03.s064_output/n100.r03.s064.fq1.fastq" "n100.r03.s064_output/n100.r03.s064.fq2.fastq" | samtools view -bS - > "n100.r03.s064_output/n100.r03.s064.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s064_output/n100.r03.s064.untrimmed.sorted.bam" "n100.r03.s064_output/n100.r03.s064.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s064_output/n100.r03.s064.untrimmed.sorted.bam" -b "n100.r03.s064_output/n100.r03.s064.primers.bed" -p "n100.r03.s064_output/n100.r03.s064.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s064_output/n100.r03.s064.trimmed.sorted.bam" "n100.r03.s064_output/n100.r03.s064.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s064_output/n100.r03.s064.reference.fas" "n100.r03.s064_output/n100.r03.s064.trimmed.sorted.bam" > "n100.r03.s064_output/n100.r03.s064.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s064_output/n100.r03.s064.reference.fas" --call-indels "n100.r03.s064_output/n100.r03.s064.trimmed.sorted.bam" > "n100.r03.s064_output/n100.r03.s064.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s064_output/n100.r03.s064.trimmed.sorted.bam" > "n100.r03.s064_output/n100.r03.s064.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s064_output/n100.r03.s064.depth.txt" "n100.r03.s064_output/n100.r03.s064.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s064_output/n100.r03.s064.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s064_output/n100.r03.s064.reference.fas" | bcftools consensus -m "n100.r03.s064_output/n100.r03.s064.low_depth.tsv" tmp.vcf.gz > "n100.r03.s064_output/n100.r03.s064.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s064_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d81c30cf6cde3c6a19a62f05ef33f57e6b46cab11a3c855523ab809d60518659 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.6MiB max=128.2MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=630B max=2.1KiB
2021/07/08 16:49:37 scheduler task 82795b65 (flow 056fb97a): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s064.tar.gz resources {}
2021/07/08 16:49:37  ->  n100.r03.s064.Main.cp_out_file 056fb97a exec extern s3://niema-test/n100/r03/n100.r03.s064.tar.gz 35.8MiB
2021/07/08 16:49:37 scheduler task 5009eabe (flow 942ecb0a): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:37 scheduler task 5009eabe (flow 942ecb0a): unloading (try 0): started
2021/07/08 16:49:37 scheduler task 5009eabe (flow 942ecb0a): unloading val<.=ac0801ee 35.4MiB>
2021/07/08 16:49:37 scheduler task 5009eabe (flow 942ecb0a): unloading list<val<.=aae29cf9 35.7MiB> 35.7MiB>
2021/07/08 16:49:37 scheduler task 5009eabe (flow 942ecb0a): unloading val<.=1ca00f88 35.4MiB>
2021/07/08 16:49:38 scheduler task bc51d36b (flow 29867b33): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:38 scheduler task 4ce5a017 (flow b40dafa9): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:b3eae8b05377465dc44bc727dfd91add0b5f02cb3bf517740c23ad449cfb19ae -> s3://niema-test/n100/r03/n100.r03.s030.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:49:38  <-  n100.r03.s030.Main.cp_out_file b40dafa9 ok   extern 0s 35.7MiB
2021/07/08 16:49:38 scheduler task bc51d36b (flow 29867b33): unloading (try 0): started
2021/07/08 16:49:38 scheduler task bc51d36b (flow 29867b33): unloading list<val<.=e04cead1 35.7MiB> 35.7MiB>
2021/07/08 16:49:38 scheduler task bc51d36b (flow 29867b33): unloading val<.=bddb4242 35.4MiB>
2021/07/08 16:49:38 scheduler task bc51d36b (flow 29867b33): unloading val<.=0d19a551 35.4MiB>
2021/07/08 16:49:38 scheduler task 651abeff (flow f2593f6b): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:38 scheduler task 651abeff (flow f2593f6b): unloading (try 0): started
2021/07/08 16:49:38 scheduler task 651abeff (flow f2593f6b): unloading val<.=aa0b5195 35.4MiB>
2021/07/08 16:49:38 scheduler task 651abeff (flow f2593f6b): unloading list<val<.=947d0fa9 35.7MiB> 35.7MiB>
2021/07/08 16:49:38 scheduler task 651abeff (flow f2593f6b): unloading val<.=3069ebe4 35.4MiB>
2021/07/08 16:49:38 scheduler task e7da8eee (flow 3523219a): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:38 scheduler task 6c9931f7 (flow 84fe3b5f): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:38 scheduler task 5009eabe (flow 942ecb0a): unloaded val<.=ac0801ee 35.4MiB>
2021/07/08 16:49:38 scheduler task e7da8eee (flow 3523219a): unloading (try 0): started
2021/07/08 16:49:38 scheduler task e7da8eee (flow 3523219a): unloading list<val<.=d6dcaab8 35.8MiB> 35.8MiB>
2021/07/08 16:49:38 scheduler task e7da8eee (flow 3523219a): unloading val<.=f75047c0 35.4MiB>
2021/07/08 16:49:38 scheduler task e7da8eee (flow 3523219a): unloading val<.=a7d2c084 35.4MiB>
2021/07/08 16:49:38 scheduler task 5009eabe (flow 942ecb0a): unloaded list<val<.=aae29cf9 35.7MiB> 35.7MiB>
2021/07/08 16:49:38 scheduler task 5009eabe (flow 942ecb0a): unloaded val<.=1ca00f88 35.4MiB>
2021/07/08 16:49:38 scheduler task 5009eabe (flow 942ecb0a): unloading (try 0): successful, next state: complete
2021/07/08 16:49:38 scheduler task 6c9931f7 (flow 84fe3b5f): promoting objects (try 0): started
2021/07/08 16:49:38 scheduler task bc51d36b (flow 29867b33): unloaded list<val<.=e04cead1 35.7MiB> 35.7MiB>
2021/07/08 16:49:38 scheduler task bc51d36b (flow 29867b33): unloaded val<.=bddb4242 35.4MiB>
2021/07/08 16:49:38  <-  n100.r03.s039.Main.out_file 942ecb0a ok     exec 4m57s 35.7MiB
2021/07/08 16:49:38 n100.r03.s039.Main.out_file 942ecb0a n100/r03/n100.r03.s039.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f1f7e96c3e3c1910e1bdac783dd39eac471d228b47bfc938bdedb19041c1dc9d
	sha256:942ecb0a8ce51ec04d61836a7f1310a58eacb7791b445dfd081b2f146d7219df
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5009eabe1ce91bf19c802b55ac41d12913e6e52aba49a1720c90582427294b7e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s039_output"
	    wget -O "n100.r03.s039_output/n100.r03.s039.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s039_output/n100.r03.s039.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s039_output/n100.r03.s039.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s039_output/n100.r03.s039.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s039_output/n100.r03.s039.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s039_output/n100.r03.s039.reference.fas" "n100.r03.s039_output/n100.r03.s039.fq1.fastq" "n100.r03.s039_output/n100.r03.s039.fq2.fastq" | samtools view -bS - > "n100.r03.s039_output/n100.r03.s039.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s039_output/n100.r03.s039.untrimmed.sorted.bam" "n100.r03.s039_output/n100.r03.s039.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s039_output/n100.r03.s039.untrimmed.sorted.bam" -b "n100.r03.s039_output/n100.r03.s039.primers.bed" -p "n100.r03.s039_output/n100.r03.s039.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s039_output/n100.r03.s039.trimmed.sorted.bam" "n100.r03.s039_output/n100.r03.s039.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s039_output/n100.r03.s039.reference.fas" "n100.r03.s039_output/n100.r03.s039.trimmed.sorted.bam" > "n100.r03.s039_output/n100.r03.s039.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s039_output/n100.r03.s039.reference.fas" --call-indels "n100.r03.s039_output/n100.r03.s039.trimmed.sorted.bam" > "n100.r03.s039_output/n100.r03.s039.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s039_output/n100.r03.s039.trimmed.sorted.bam" > "n100.r03.s039_output/n100.r03.s039.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s039_output/n100.r03.s039.depth.txt" "n100.r03.s039_output/n100.r03.s039.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s039_output/n100.r03.s039.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s039_output/n100.r03.s039.reference.fas" | bcftools consensus -m "n100.r03.s039_output/n100.r03.s039.low_depth.tsv" tmp.vcf.gz > "n100.r03.s039_output/n100.r03.s039.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s039_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:aae29cf9331cee2dce84341a651d77e118f8bd1220c165ba0637a612294cc83e 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.4MiB max=131.9MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=619B max=2.0KiB
2021/07/08 16:49:38 scheduler task 59688436 (flow b5a93a47): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s039.tar.gz resources {}
2021/07/08 16:49:38  ->  n100.r03.s039.Main.cp_out_file b5a93a47 exec extern s3://niema-test/n100/r03/n100.r03.s039.tar.gz 35.7MiB
2021/07/08 16:49:38 scheduler task 651abeff (flow f2593f6b): unloaded val<.=3069ebe4 35.4MiB>
2021/07/08 16:49:38 scheduler task 651abeff (flow f2593f6b): unloaded list<val<.=947d0fa9 35.7MiB> 35.7MiB>
2021/07/08 16:49:38 scheduler task bc51d36b (flow 29867b33): unloaded val<.=0d19a551 35.4MiB>
2021/07/08 16:49:38 scheduler task bc51d36b (flow 29867b33): unloading (try 0): successful, next state: complete
2021/07/08 16:49:38 scheduler task 16ea2db5 (flow ff2c5c89): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:38 scheduler task 651abeff (flow f2593f6b): unloaded val<.=aa0b5195 35.4MiB>
2021/07/08 16:49:38 scheduler task 651abeff (flow f2593f6b): unloading (try 0): successful, next state: complete
2021/07/08 16:49:38 scheduler task e7da8eee (flow 3523219a): unloaded val<.=f75047c0 35.4MiB>
2021/07/08 16:49:38 scheduler task e7da8eee (flow 3523219a): unloaded val<.=a7d2c084 35.4MiB>
2021/07/08 16:49:38 scheduler task e7da8eee (flow 3523219a): unloaded list<val<.=d6dcaab8 35.8MiB> 35.8MiB>
2021/07/08 16:49:38 scheduler task e7da8eee (flow 3523219a): unloading (try 0): successful, next state: complete
2021/07/08 16:49:38 scheduler task 6c9931f7 (flow 84fe3b5f): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:38  <-  n100.r03.s013.Main.out_file 29867b33 ok     exec 4m57s 35.7MiB
2021/07/08 16:49:38 n100.r03.s013.Main.out_file 29867b33 n100/r03/n100.r03.s013.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:b5ebacec4adc44dfa3ee0a6b611cbbb7bd50d377a32385fb58b2b639cc4991c7
	sha256:29867b3351cafda60e810a8c375344fd0d2d507069a80ef30b55cde16ea7aa3c
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bc51d36bc3ef683912ab2b9b07db7e07dda6fb973d62ca5968403e4f4784f01f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s013_output"
	    wget -O "n100.r03.s013_output/n100.r03.s013.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s013_output/n100.r03.s013.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s013_output/n100.r03.s013.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s013_output/n100.r03.s013.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s013_output/n100.r03.s013.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s013_output/n100.r03.s013.reference.fas" "n100.r03.s013_output/n100.r03.s013.fq1.fastq" "n100.r03.s013_output/n100.r03.s013.fq2.fastq" | samtools view -bS - > "n100.r03.s013_output/n100.r03.s013.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s013_output/n100.r03.s013.untrimmed.sorted.bam" "n100.r03.s013_output/n100.r03.s013.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s013_output/n100.r03.s013.untrimmed.sorted.bam" -b "n100.r03.s013_output/n100.r03.s013.primers.bed" -p "n100.r03.s013_output/n100.r03.s013.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s013_output/n100.r03.s013.trimmed.sorted.bam" "n100.r03.s013_output/n100.r03.s013.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s013_output/n100.r03.s013.reference.fas" "n100.r03.s013_output/n100.r03.s013.trimmed.sorted.bam" > "n100.r03.s013_output/n100.r03.s013.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s013_output/n100.r03.s013.reference.fas" --call-indels "n100.r03.s013_output/n100.r03.s013.trimmed.sorted.bam" > "n100.r03.s013_output/n100.r03.s013.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s013_output/n100.r03.s013.trimmed.sorted.bam" > "n100.r03.s013_output/n100.r03.s013.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s013_output/n100.r03.s013.depth.txt" "n100.r03.s013_output/n100.r03.s013.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s013_output/n100.r03.s013.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s013_output/n100.r03.s013.reference.fas" | bcftools consensus -m "n100.r03.s013_output/n100.r03.s013.low_depth.tsv" tmp.vcf.gz > "n100.r03.s013_output/n100.r03.s013.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s013_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:e04cead1d309a057eb778f220ef88973dd7a8a466a673421239900f8f5db5872 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.6MiB max=131.2MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=628B max=2.1KiB
2021/07/08 16:49:38 scheduler task 6860403d (flow 711fdcb8): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s013.tar.gz resources {}
2021/07/08 16:49:38  ->  n100.r03.s013.Main.cp_out_file 711fdcb8 exec extern s3://niema-test/n100/r03/n100.r03.s013.tar.gz 35.7MiB
2021/07/08 16:49:38 scheduler task 16ea2db5 (flow ff2c5c89): unloading (try 0): started
2021/07/08 16:49:38 scheduler task 16ea2db5 (flow ff2c5c89): unloading list<val<.=9a67d9e6 35.7MiB> 35.7MiB>
2021/07/08 16:49:38 scheduler task 16ea2db5 (flow ff2c5c89): unloading val<.=82e574ed 35.4MiB>
2021/07/08 16:49:38 scheduler task 16ea2db5 (flow ff2c5c89): unloading val<.=06bb5ad3 35.4MiB>
2021/07/08 16:49:38  <-  n100.r03.s007.Main.out_file f2593f6b ok     exec 4m57s 35.7MiB
2021/07/08 16:49:38 n100.r03.s007.Main.out_file f2593f6b n100/r03/n100.r03.s007.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7d02129461812b8ec4a9f6c2e63f0d3dceb970e12a6c1aa9bd2a24822be19948
	sha256:f2593f6bd992cd7699158959511b0615255dc4cadce146dcc62a5a9e6f993bee
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/651abeff588b325b4f9174038c226c4f62a5eaa3caf9ddef6b6078ebfb5481ad
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s007_output"
	    wget -O "n100.r03.s007_output/n100.r03.s007.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s007_output/n100.r03.s007.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s007_output/n100.r03.s007.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s007_output/n100.r03.s007.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s007_output/n100.r03.s007.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s007_output/n100.r03.s007.reference.fas" "n100.r03.s007_output/n100.r03.s007.fq1.fastq" "n100.r03.s007_output/n100.r03.s007.fq2.fastq" | samtools view -bS - > "n100.r03.s007_output/n100.r03.s007.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s007_output/n100.r03.s007.untrimmed.sorted.bam" "n100.r03.s007_output/n100.r03.s007.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s007_output/n100.r03.s007.untrimmed.sorted.bam" -b "n100.r03.s007_output/n100.r03.s007.primers.bed" -p "n100.r03.s007_output/n100.r03.s007.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s007_output/n100.r03.s007.trimmed.sorted.bam" "n100.r03.s007_output/n100.r03.s007.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s007_output/n100.r03.s007.reference.fas" "n100.r03.s007_output/n100.r03.s007.trimmed.sorted.bam" > "n100.r03.s007_output/n100.r03.s007.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s007_output/n100.r03.s007.reference.fas" --call-indels "n100.r03.s007_output/n100.r03.s007.trimmed.sorted.bam" > "n100.r03.s007_output/n100.r03.s007.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s007_output/n100.r03.s007.trimmed.sorted.bam" > "n100.r03.s007_output/n100.r03.s007.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s007_output/n100.r03.s007.depth.txt" "n100.r03.s007_output/n100.r03.s007.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s007_output/n100.r03.s007.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s007_output/n100.r03.s007.reference.fas" | bcftools consensus -m "n100.r03.s007_output/n100.r03.s007.low_depth.tsv" tmp.vcf.gz > "n100.r03.s007_output/n100.r03.s007.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s007_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:947d0fa9ec59ead1c33c6ea938bb4eeb587e12ef4d79d440013dd1b01c94336b 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.0MiB max=130.8MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=625B max=2.0KiB
2021/07/08 16:49:38 scheduler task d2dab026 (flow b2c52274): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s007.tar.gz resources {}
2021/07/08 16:49:38  ->  n100.r03.s007.Main.cp_out_file b2c52274 exec extern s3://niema-test/n100/r03/n100.r03.s007.tar.gz 35.7MiB
2021/07/08 16:49:38  <-  n100.r03.s012.Main.out_file 3523219a ok     exec 4m57s 35.8MiB
2021/07/08 16:49:38 n100.r03.s012.Main.out_file 3523219a n100/r03/n100.r03.s012.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:92b6f74ca1e2ac4359b0a9412223eef78c71c908f6201ffc919de14eb59df8d0
	sha256:3523219a867b0440be2ca851e07aec2c314c56fe88b22700213dbd8108006016
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e7da8eeebb00b2a15132d050b2b263387a14d4edb2d2e365076198096c787c0b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s012_output"
	    wget -O "n100.r03.s012_output/n100.r03.s012.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s012_output/n100.r03.s012.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s012_output/n100.r03.s012.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s012_output/n100.r03.s012.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s012_output/n100.r03.s012.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s012_output/n100.r03.s012.reference.fas" "n100.r03.s012_output/n100.r03.s012.fq1.fastq" "n100.r03.s012_output/n100.r03.s012.fq2.fastq" | samtools view -bS - > "n100.r03.s012_output/n100.r03.s012.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s012_output/n100.r03.s012.untrimmed.sorted.bam" "n100.r03.s012_output/n100.r03.s012.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s012_output/n100.r03.s012.untrimmed.sorted.bam" -b "n100.r03.s012_output/n100.r03.s012.primers.bed" -p "n100.r03.s012_output/n100.r03.s012.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s012_output/n100.r03.s012.trimmed.sorted.bam" "n100.r03.s012_output/n100.r03.s012.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s012_output/n100.r03.s012.reference.fas" "n100.r03.s012_output/n100.r03.s012.trimmed.sorted.bam" > "n100.r03.s012_output/n100.r03.s012.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s012_output/n100.r03.s012.reference.fas" --call-indels "n100.r03.s012_output/n100.r03.s012.trimmed.sorted.bam" > "n100.r03.s012_output/n100.r03.s012.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s012_output/n100.r03.s012.trimmed.sorted.bam" > "n100.r03.s012_output/n100.r03.s012.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s012_output/n100.r03.s012.depth.txt" "n100.r03.s012_output/n100.r03.s012.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s012_output/n100.r03.s012.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s012_output/n100.r03.s012.reference.fas" | bcftools consensus -m "n100.r03.s012_output/n100.r03.s012.low_depth.tsv" tmp.vcf.gz > "n100.r03.s012_output/n100.r03.s012.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s012_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d6dcaab82bb813ad90fa36b96a95612fb9d8a04ecd6cedc93b728cd607b7dcfe 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.7MiB max=130.8MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=627B max=2.0KiB
2021/07/08 16:49:38 scheduler task c2f98b1b (flow 8ade9df9): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s012.tar.gz resources {}
2021/07/08 16:49:38  ->  n100.r03.s012.Main.cp_out_file 8ade9df9 exec extern s3://niema-test/n100/r03/n100.r03.s012.tar.gz 35.8MiB
2021/07/08 16:49:38 scheduler task 6c9931f7 (flow 84fe3b5f): retrieving diagnostic output (try 0): started
2021/07/08 16:49:38 scheduler task b4bc837b (flow d79d1747): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:38 scheduler task b4bc837b (flow d79d1747): unloading (try 0): started
2021/07/08 16:49:38 scheduler task b4bc837b (flow d79d1747): unloading list<val<.=cd469e6b 35.7MiB> 35.7MiB>
2021/07/08 16:49:38 scheduler task b4bc837b (flow d79d1747): unloading val<.=7d0b8800 35.4MiB>
2021/07/08 16:49:38 scheduler task b4bc837b (flow d79d1747): unloading val<.=b08a89ec 35.4MiB>
2021/07/08 16:49:38 scheduler task 16ea2db5 (flow ff2c5c89): unloaded list<val<.=9a67d9e6 35.7MiB> 35.7MiB>
2021/07/08 16:49:38 scheduler task 16ea2db5 (flow ff2c5c89): unloaded val<.=06bb5ad3 35.4MiB>
2021/07/08 16:49:38 scheduler task 16ea2db5 (flow ff2c5c89): unloaded val<.=82e574ed 35.4MiB>
2021/07/08 16:49:38 scheduler task 16ea2db5 (flow ff2c5c89): unloading (try 0): successful, next state: complete
2021/07/08 16:49:38 scheduler task b4bc837b (flow d79d1747): unloaded list<val<.=cd469e6b 35.7MiB> 35.7MiB>
2021/07/08 16:49:38 scheduler task 6c9931f7 (flow 84fe3b5f): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:38 scheduler task b4bc837b (flow d79d1747): unloaded val<.=b08a89ec 35.4MiB>
2021/07/08 16:49:38 scheduler task 9a3d3840 (flow be1bb147): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:38 scheduler task b4bc837b (flow d79d1747): unloaded val<.=7d0b8800 35.4MiB>
2021/07/08 16:49:38 scheduler task b4bc837b (flow d79d1747): unloading (try 0): successful, next state: complete
2021/07/08 16:49:38  <-  n100.r03.s092.Main.out_file ff2c5c89 ok     exec 4m57s 35.7MiB
2021/07/08 16:49:38 n100.r03.s092.Main.out_file ff2c5c89 n100/r03/n100.r03.s092.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:73d1abb52c4a82fb86ab927ae02421d6dd88922ff9b00b21677b15720a384b41
	sha256:ff2c5c89e2ae3a86341030bd648b38f784ffbf93ffca60c25b9a3aaa90986f08
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/16ea2db55ae35a94b84a090b912c33640de51074fb9603ac9c8fb59a0a3932a7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s092_output"
	    wget -O "n100.r03.s092_output/n100.r03.s092.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s092_output/n100.r03.s092.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s092_output/n100.r03.s092.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s092_output/n100.r03.s092.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s092_output/n100.r03.s092.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s092_output/n100.r03.s092.reference.fas" "n100.r03.s092_output/n100.r03.s092.fq1.fastq" "n100.r03.s092_output/n100.r03.s092.fq2.fastq" | samtools view -bS - > "n100.r03.s092_output/n100.r03.s092.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s092_output/n100.r03.s092.untrimmed.sorted.bam" "n100.r03.s092_output/n100.r03.s092.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s092_output/n100.r03.s092.untrimmed.sorted.bam" -b "n100.r03.s092_output/n100.r03.s092.primers.bed" -p "n100.r03.s092_output/n100.r03.s092.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s092_output/n100.r03.s092.trimmed.sorted.bam" "n100.r03.s092_output/n100.r03.s092.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s092_output/n100.r03.s092.reference.fas" "n100.r03.s092_output/n100.r03.s092.trimmed.sorted.bam" > "n100.r03.s092_output/n100.r03.s092.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s092_output/n100.r03.s092.reference.fas" --call-indels "n100.r03.s092_output/n100.r03.s092.trimmed.sorted.bam" > "n100.r03.s092_output/n100.r03.s092.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s092_output/n100.r03.s092.trimmed.sorted.bam" > "n100.r03.s092_output/n100.r03.s092.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s092_output/n100.r03.s092.depth.txt" "n100.r03.s092_output/n100.r03.s092.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s092_output/n100.r03.s092.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s092_output/n100.r03.s092.reference.fas" | bcftools consensus -m "n100.r03.s092_output/n100.r03.s092.low_depth.tsv" tmp.vcf.gz > "n100.r03.s092_output/n100.r03.s092.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s092_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9a67d9e6a93c017957cfd52c708f269bbb1caccfbd0ceb628ac2e327c4aa1931 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.6MiB max=131.1MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=624B max=2.0KiB
2021/07/08 16:49:38 scheduler task 81706f24 (flow 3cd35634): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s092.tar.gz resources {}
2021/07/08 16:49:38  ->  n100.r03.s092.Main.cp_out_file 3cd35634 exec extern s3://niema-test/n100/r03/n100.r03.s092.tar.gz 35.7MiB
2021/07/08 16:49:38 scheduler task 6c9931f7 (flow 84fe3b5f): retrieving result (try 0): started
2021/07/08 16:49:38 scheduler task 9a3d3840 (flow be1bb147): unloading (try 0): started
2021/07/08 16:49:38 scheduler task 9a3d3840 (flow be1bb147): unloading list<val<.=9cd1456e 35.7MiB> 35.7MiB>
2021/07/08 16:49:38 scheduler task 9a3d3840 (flow be1bb147): unloading val<.=b3f73073 35.4MiB>
2021/07/08 16:49:38 scheduler task 9a3d3840 (flow be1bb147): unloading val<.=c8cc99f3 35.4MiB>
2021/07/08 16:49:38  <-  n100.r03.s077.Main.out_file d79d1747 ok     exec 4m56s 35.7MiB
2021/07/08 16:49:38 n100.r03.s077.Main.out_file d79d1747 n100/r03/n100.r03.s077.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:03b8bb6fc1ed415c0ed4c285003640df9d2ec9fcd8509bcf268996816a9fc74c
	sha256:d79d174741766462ebff58c04e6780716049234955e59567b21b7ba4c124a904
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b4bc837b472494c451239c8196f39980e4a0cbfdfa97e426516bbc1d8dab8474
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s077_output"
	    wget -O "n100.r03.s077_output/n100.r03.s077.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s077_output/n100.r03.s077.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s077_output/n100.r03.s077.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s077_output/n100.r03.s077.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s077_output/n100.r03.s077.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s077_output/n100.r03.s077.reference.fas" "n100.r03.s077_output/n100.r03.s077.fq1.fastq" "n100.r03.s077_output/n100.r03.s077.fq2.fastq" | samtools view -bS - > "n100.r03.s077_output/n100.r03.s077.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s077_output/n100.r03.s077.untrimmed.sorted.bam" "n100.r03.s077_output/n100.r03.s077.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s077_output/n100.r03.s077.untrimmed.sorted.bam" -b "n100.r03.s077_output/n100.r03.s077.primers.bed" -p "n100.r03.s077_output/n100.r03.s077.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s077_output/n100.r03.s077.trimmed.sorted.bam" "n100.r03.s077_output/n100.r03.s077.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s077_output/n100.r03.s077.reference.fas" "n100.r03.s077_output/n100.r03.s077.trimmed.sorted.bam" > "n100.r03.s077_output/n100.r03.s077.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s077_output/n100.r03.s077.reference.fas" --call-indels "n100.r03.s077_output/n100.r03.s077.trimmed.sorted.bam" > "n100.r03.s077_output/n100.r03.s077.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s077_output/n100.r03.s077.trimmed.sorted.bam" > "n100.r03.s077_output/n100.r03.s077.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s077_output/n100.r03.s077.depth.txt" "n100.r03.s077_output/n100.r03.s077.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s077_output/n100.r03.s077.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s077_output/n100.r03.s077.reference.fas" | bcftools consensus -m "n100.r03.s077_output/n100.r03.s077.low_depth.tsv" tmp.vcf.gz > "n100.r03.s077_output/n100.r03.s077.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s077_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:cd469e6bf00f261506b1e4ceb01c9bde5b2a2f79ebf40515c701e8ddcbca914a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=18.8MiB max=126.0MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=630B max=2.1KiB
2021/07/08 16:49:38 scheduler task dfe7e581 (flow 7f9164e1): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s077.tar.gz resources {}
2021/07/08 16:49:38  ->  n100.r03.s077.Main.cp_out_file 7f9164e1 exec extern s3://niema-test/n100/r03/n100.r03.s077.tar.gz 35.7MiB
2021/07/08 16:49:38 scheduler task 82795b65 (flow 056fb97a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d81c30cf6cde3c6a19a62f05ef33f57e6b46cab11a3c855523ab809d60518659 -> s3://niema-test/n100/r03/n100.r03.s064.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:49:38  <-  n100.r03.s064.Main.cp_out_file 056fb97a ok   extern 0s 35.8MiB
2021/07/08 16:49:38 scheduler task 9a3d3840 (flow be1bb147): unloaded list<val<.=9cd1456e 35.7MiB> 35.7MiB>
2021/07/08 16:49:38 scheduler task 9a3d3840 (flow be1bb147): unloaded val<.=b3f73073 35.4MiB>
2021/07/08 16:49:38 scheduler task 9a3d3840 (flow be1bb147): unloaded val<.=c8cc99f3 35.4MiB>
2021/07/08 16:49:38 scheduler task 9a3d3840 (flow be1bb147): unloading (try 0): successful, next state: complete
2021/07/08 16:49:38 scheduler task 6c9931f7 (flow 84fe3b5f): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:38  <-  n100.r03.s058.Main.out_file be1bb147 ok     exec 4m57s 35.7MiB
2021/07/08 16:49:38 n100.r03.s058.Main.out_file be1bb147 n100/r03/n100.r03.s058.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:86c46e5cac020b6df5d3cd4533c80be3fd900d66a990d473ffa7b8b486adb6f3
	sha256:be1bb147ed76f6b04f2a00154d5cc4169c1937801d2bb606d0f0e9563690e762
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9a3d384096bec8d2237fc73e5e1e6b716f782f3d678e9a355d76d5236a49c53c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s058_output"
	    wget -O "n100.r03.s058_output/n100.r03.s058.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s058_output/n100.r03.s058.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s058_output/n100.r03.s058.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s058_output/n100.r03.s058.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s058_output/n100.r03.s058.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s058_output/n100.r03.s058.reference.fas" "n100.r03.s058_output/n100.r03.s058.fq1.fastq" "n100.r03.s058_output/n100.r03.s058.fq2.fastq" | samtools view -bS - > "n100.r03.s058_output/n100.r03.s058.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s058_output/n100.r03.s058.untrimmed.sorted.bam" "n100.r03.s058_output/n100.r03.s058.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s058_output/n100.r03.s058.untrimmed.sorted.bam" -b "n100.r03.s058_output/n100.r03.s058.primers.bed" -p "n100.r03.s058_output/n100.r03.s058.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s058_output/n100.r03.s058.trimmed.sorted.bam" "n100.r03.s058_output/n100.r03.s058.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s058_output/n100.r03.s058.reference.fas" "n100.r03.s058_output/n100.r03.s058.trimmed.sorted.bam" > "n100.r03.s058_output/n100.r03.s058.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s058_output/n100.r03.s058.reference.fas" --call-indels "n100.r03.s058_output/n100.r03.s058.trimmed.sorted.bam" > "n100.r03.s058_output/n100.r03.s058.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s058_output/n100.r03.s058.trimmed.sorted.bam" > "n100.r03.s058_output/n100.r03.s058.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s058_output/n100.r03.s058.depth.txt" "n100.r03.s058_output/n100.r03.s058.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s058_output/n100.r03.s058.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s058_output/n100.r03.s058.reference.fas" | bcftools consensus -m "n100.r03.s058_output/n100.r03.s058.low_depth.tsv" tmp.vcf.gz > "n100.r03.s058_output/n100.r03.s058.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s058_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9cd1456e750ef074a37c30deeed1260bcd210b2ac103322aa43fd7c91b998c1f 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.1MiB max=129.6MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=632B max=2.1KiB
2021/07/08 16:49:38 scheduler task 395d199a (flow 97249de4): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s058.tar.gz resources {}
2021/07/08 16:49:38  ->  n100.r03.s058.Main.cp_out_file 97249de4 exec extern s3://niema-test/n100/r03/n100.r03.s058.tar.gz 35.7MiB
2021/07/08 16:49:38 scheduler task 6c9931f7 (flow 84fe3b5f): transferring output (try 0): started
2021/07/08 16:49:38 scheduler task 86cdbd24 (flow ec5d5436): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:38 scheduler task 86cdbd24 (flow ec5d5436): promoting objects (try 0): started
2021/07/08 16:49:39 scheduler task 86cdbd24 (flow ec5d5436): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:39 scheduler task 86cdbd24 (flow ec5d5436): retrieving diagnostic output (try 0): started
2021/07/08 16:49:39 scheduler task 86cdbd24 (flow ec5d5436): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:39 scheduler task 86cdbd24 (flow ec5d5436): retrieving result (try 0): started
2021/07/08 16:49:39 scheduler task 59688436 (flow b5a93a47): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:aae29cf9331cee2dce84341a651d77e118f8bd1220c165ba0637a612294cc83e -> s3://niema-test/n100/r03/n100.r03.s039.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:49:39 scheduler task 86cdbd24 (flow ec5d5436): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:39 scheduler task 6860403d (flow 711fdcb8): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:e04cead1d309a057eb778f220ef88973dd7a8a466a673421239900f8f5db5872 -> s3://niema-test/n100/r03/n100.r03.s013.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:49:39  <-  n100.r03.s039.Main.cp_out_file b5a93a47 ok   extern 0s 35.7MiB
2021/07/08 16:49:39  <-  n100.r03.s013.Main.cp_out_file 711fdcb8 ok   extern 0s 35.7MiB
2021/07/08 16:49:39 scheduler task 86cdbd24 (flow ec5d5436): transferring output (try 0): started
2021/07/08 16:49:40 scheduler task d2dab026 (flow b2c52274): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:947d0fa9ec59ead1c33c6ea938bb4eeb587e12ef4d79d440013dd1b01c94336b -> s3://niema-test/n100/r03/n100.r03.s007.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:49:40  <-  n100.r03.s007.Main.cp_out_file b2c52274 ok   extern 0s 35.7MiB
2021/07/08 16:49:40 scheduler task 6c9931f7 (flow 84fe3b5f): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:40 scheduler task c2f98b1b (flow 8ade9df9): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d6dcaab82bb813ad90fa36b96a95612fb9d8a04ecd6cedc93b728cd607b7dcfe -> s3://niema-test/n100/r03/n100.r03.s012.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:49:40  <-  n100.r03.s012.Main.cp_out_file 8ade9df9 ok   extern 0s 35.8MiB
2021/07/08 16:49:40 scheduler task 6c9931f7 (flow 84fe3b5f): unloading (try 0): started
2021/07/08 16:49:40 scheduler task 6c9931f7 (flow 84fe3b5f): unloading list<val<.=bfe3a6c7 35.8MiB> 35.8MiB>
2021/07/08 16:49:40 scheduler task 6c9931f7 (flow 84fe3b5f): unloading val<.=ff8ea847 35.4MiB>
2021/07/08 16:49:40 scheduler task 6c9931f7 (flow 84fe3b5f): unloading val<.=6e16c009 35.4MiB>
2021/07/08 16:49:40 scheduler task 6c9931f7 (flow 84fe3b5f): unloaded list<val<.=bfe3a6c7 35.8MiB> 35.8MiB>
2021/07/08 16:49:40 scheduler task 6c9931f7 (flow 84fe3b5f): unloaded val<.=ff8ea847 35.4MiB>
2021/07/08 16:49:40 scheduler task 6c9931f7 (flow 84fe3b5f): unloaded val<.=6e16c009 35.4MiB>
2021/07/08 16:49:40 scheduler task 6c9931f7 (flow 84fe3b5f): unloading (try 0): successful, next state: complete
2021/07/08 16:49:40  <-  n100.r03.s065.Main.out_file 84fe3b5f ok     exec 4m57s 35.8MiB
2021/07/08 16:49:40 n100.r03.s065.Main.out_file 84fe3b5f n100/r03/n100.r03.s065.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:fc8b8ac9e612c57fef644b3c78622f6e4d4d27be102dbc8b589debfaa76d43e5
	sha256:84fe3b5f7c6e4b8136c0a7bb2fa8bfe56263e4d5da4080384fabd8f89bb27f16
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6c9931f75a6cfcc252bbac229ff4c6bdd47bb34db15d72003c29f18c2a4ab260
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s065_output"
	    wget -O "n100.r03.s065_output/n100.r03.s065.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s065_output/n100.r03.s065.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s065_output/n100.r03.s065.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s065_output/n100.r03.s065.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s065_output/n100.r03.s065.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s065_output/n100.r03.s065.reference.fas" "n100.r03.s065_output/n100.r03.s065.fq1.fastq" "n100.r03.s065_output/n100.r03.s065.fq2.fastq" | samtools view -bS - > "n100.r03.s065_output/n100.r03.s065.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s065_output/n100.r03.s065.untrimmed.sorted.bam" "n100.r03.s065_output/n100.r03.s065.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s065_output/n100.r03.s065.untrimmed.sorted.bam" -b "n100.r03.s065_output/n100.r03.s065.primers.bed" -p "n100.r03.s065_output/n100.r03.s065.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s065_output/n100.r03.s065.trimmed.sorted.bam" "n100.r03.s065_output/n100.r03.s065.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s065_output/n100.r03.s065.reference.fas" "n100.r03.s065_output/n100.r03.s065.trimmed.sorted.bam" > "n100.r03.s065_output/n100.r03.s065.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s065_output/n100.r03.s065.reference.fas" --call-indels "n100.r03.s065_output/n100.r03.s065.trimmed.sorted.bam" > "n100.r03.s065_output/n100.r03.s065.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s065_output/n100.r03.s065.trimmed.sorted.bam" > "n100.r03.s065_output/n100.r03.s065.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s065_output/n100.r03.s065.depth.txt" "n100.r03.s065_output/n100.r03.s065.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s065_output/n100.r03.s065.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s065_output/n100.r03.s065.reference.fas" | bcftools consensus -m "n100.r03.s065_output/n100.r03.s065.low_depth.tsv" tmp.vcf.gz > "n100.r03.s065_output/n100.r03.s065.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s065_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:bfe3a6c7687b3a9819aba2acdaf6f1b58e9e9a8828f3672062de881c4bde87b9 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=18.8MiB max=126.0MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=631B max=2.1KiB
2021/07/08 16:49:40 scheduler task 571eaccd (flow 7028a5c2): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s065.tar.gz resources {}
2021/07/08 16:49:40  ->  n100.r03.s065.Main.cp_out_file 7028a5c2 exec extern s3://niema-test/n100/r03/n100.r03.s065.tar.gz 35.8MiB
2021/07/08 16:49:40 scheduler task bd82dc2a (flow d0504b1f): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:40 scheduler task 86cdbd24 (flow ec5d5436): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:40 scheduler task dfe7e581 (flow 7f9164e1): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:cd469e6bf00f261506b1e4ceb01c9bde5b2a2f79ebf40515c701e8ddcbca914a -> s3://niema-test/n100/r03/n100.r03.s077.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:49:40  <-  n100.r03.s077.Main.cp_out_file 7f9164e1 ok   extern 0s 35.7MiB
2021/07/08 16:49:40 scheduler task 395d199a (flow 97249de4): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9cd1456e750ef074a37c30deeed1260bcd210b2ac103322aa43fd7c91b998c1f -> s3://niema-test/n100/r03/n100.r03.s058.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:49:40 scheduler task 81706f24 (flow 3cd35634): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9a67d9e6a93c017957cfd52c708f269bbb1caccfbd0ceb628ac2e327c4aa1931 -> s3://niema-test/n100/r03/n100.r03.s092.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:49:40  <-  n100.r03.s058.Main.cp_out_file 97249de4 ok   extern 0s 35.7MiB
2021/07/08 16:49:40  <-  n100.r03.s092.Main.cp_out_file 3cd35634 ok   extern 0s 35.7MiB
2021/07/08 16:49:40 scheduler task bd82dc2a (flow d0504b1f): promoting objects (try 0): started
2021/07/08 16:49:40 scheduler task 79b42f3c (flow 250ebac9): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:40 scheduler task 86cdbd24 (flow ec5d5436): unloading (try 0): started
2021/07/08 16:49:40 scheduler task 86cdbd24 (flow ec5d5436): unloading list<val<.=7233af6b 35.7MiB> 35.7MiB>
2021/07/08 16:49:40 scheduler task 86cdbd24 (flow ec5d5436): unloading val<.=c18b018c 35.4MiB>
2021/07/08 16:49:40 scheduler task 86cdbd24 (flow ec5d5436): unloading val<.=6f8f6556 35.4MiB>
2021/07/08 16:49:40 scheduler task 79b42f3c (flow 250ebac9): promoting objects (try 0): started
2021/07/08 16:49:40 scheduler task bd82dc2a (flow d0504b1f): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:40 scheduler task 86cdbd24 (flow ec5d5436): unloaded list<val<.=7233af6b 35.7MiB> 35.7MiB>
2021/07/08 16:49:40 scheduler task bd82dc2a (flow d0504b1f): retrieving diagnostic output (try 0): started
2021/07/08 16:49:40 scheduler task 86cdbd24 (flow ec5d5436): unloaded val<.=c18b018c 35.4MiB>
2021/07/08 16:49:40 scheduler task 86cdbd24 (flow ec5d5436): unloaded val<.=6f8f6556 35.4MiB>
2021/07/08 16:49:40 scheduler task 86cdbd24 (flow ec5d5436): unloading (try 0): successful, next state: complete
2021/07/08 16:49:40  <-  n100.r03.s066.Main.out_file ec5d5436 ok     exec 4m59s 35.7MiB
2021/07/08 16:49:40 n100.r03.s066.Main.out_file ec5d5436 n100/r03/n100.r03.s066.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a162691d93d1cdaf6bae8e21bebf581387d99adf589b62c7a23ffad0f29fecab
	sha256:ec5d5436c5577d3c0b9821d1b2d031768f27dbb91b3a3132d20c5a5bba2b252f
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/86cdbd24fb924c2b4ffd22858ab881a021cd5f28ca4c66225d2cdf6fcc4f373a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s066_output"
	    wget -O "n100.r03.s066_output/n100.r03.s066.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s066_output/n100.r03.s066.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s066_output/n100.r03.s066.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s066_output/n100.r03.s066.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s066_output/n100.r03.s066.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s066_output/n100.r03.s066.reference.fas" "n100.r03.s066_output/n100.r03.s066.fq1.fastq" "n100.r03.s066_output/n100.r03.s066.fq2.fastq" | samtools view -bS - > "n100.r03.s066_output/n100.r03.s066.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s066_output/n100.r03.s066.untrimmed.sorted.bam" "n100.r03.s066_output/n100.r03.s066.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s066_output/n100.r03.s066.untrimmed.sorted.bam" -b "n100.r03.s066_output/n100.r03.s066.primers.bed" -p "n100.r03.s066_output/n100.r03.s066.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s066_output/n100.r03.s066.trimmed.sorted.bam" "n100.r03.s066_output/n100.r03.s066.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s066_output/n100.r03.s066.reference.fas" "n100.r03.s066_output/n100.r03.s066.trimmed.sorted.bam" > "n100.r03.s066_output/n100.r03.s066.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s066_output/n100.r03.s066.reference.fas" --call-indels "n100.r03.s066_output/n100.r03.s066.trimmed.sorted.bam" > "n100.r03.s066_output/n100.r03.s066.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s066_output/n100.r03.s066.trimmed.sorted.bam" > "n100.r03.s066_output/n100.r03.s066.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s066_output/n100.r03.s066.depth.txt" "n100.r03.s066_output/n100.r03.s066.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s066_output/n100.r03.s066.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s066_output/n100.r03.s066.reference.fas" | bcftools consensus -m "n100.r03.s066_output/n100.r03.s066.low_depth.tsv" tmp.vcf.gz > "n100.r03.s066_output/n100.r03.s066.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s066_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:7233af6bd8e3f3e517d3eb5eff326e566cf699be8fe3f2c0751315569925c508 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.0MiB max=128.7MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=628B max=2.1KiB
2021/07/08 16:49:40 scheduler task 389e72c3 (flow 646fac7b): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s066.tar.gz resources {}
2021/07/08 16:49:40  ->  n100.r03.s066.Main.cp_out_file 646fac7b exec extern s3://niema-test/n100/r03/n100.r03.s066.tar.gz 35.7MiB
2021/07/08 16:49:40 scheduler task 79b42f3c (flow 250ebac9): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:40 scheduler task 79b42f3c (flow 250ebac9): retrieving diagnostic output (try 0): started
2021/07/08 16:49:40 scheduler task bd82dc2a (flow d0504b1f): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:40 scheduler task bd82dc2a (flow d0504b1f): retrieving result (try 0): started
2021/07/08 16:49:40 scheduler task 3edff482 (flow afc84f13): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:40 scheduler task 3edff482 (flow afc84f13): promoting objects (try 0): started
2021/07/08 16:49:40 scheduler task 79b42f3c (flow 250ebac9): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:40 scheduler task 79b42f3c (flow 250ebac9): retrieving result (try 0): started
2021/07/08 16:49:40 scheduler task 192e5535 (flow e589bead): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:40 scheduler task bd82dc2a (flow d0504b1f): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:40 scheduler task 192e5535 (flow e589bead): promoting objects (try 0): started
2021/07/08 16:49:40 scheduler task bd82dc2a (flow d0504b1f): transferring output (try 0): started
2021/07/08 16:49:40 scheduler task 79b42f3c (flow 250ebac9): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:40 scheduler task 3edff482 (flow afc84f13): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:40 scheduler task 79b42f3c (flow 250ebac9): transferring output (try 0): started
2021/07/08 16:49:40 scheduler task 3edff482 (flow afc84f13): retrieving diagnostic output (try 0): started
2021/07/08 16:49:40 scheduler task 192e5535 (flow e589bead): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:40 scheduler task 192e5535 (flow e589bead): retrieving diagnostic output (try 0): started
2021/07/08 16:49:40 scheduler task 3edff482 (flow afc84f13): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:40 scheduler task 3edff482 (flow afc84f13): retrieving result (try 0): started
2021/07/08 16:49:40 scheduler task 571eaccd (flow 7028a5c2): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:bfe3a6c7687b3a9819aba2acdaf6f1b58e9e9a8828f3672062de881c4bde87b9 -> s3://niema-test/n100/r03/n100.r03.s065.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:49:40  <-  n100.r03.s065.Main.cp_out_file 7028a5c2 ok   extern 0s 35.8MiB
2021/07/08 16:49:40 scheduler task 192e5535 (flow e589bead): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:40 scheduler task 3edff482 (flow afc84f13): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:40 scheduler task 192e5535 (flow e589bead): retrieving result (try 0): started
2021/07/08 16:49:40 scheduler task 3edff482 (flow afc84f13): transferring output (try 0): started
2021/07/08 16:49:40 scheduler task 192e5535 (flow e589bead): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:40 scheduler task 192e5535 (flow e589bead): transferring output (try 0): started
2021/07/08 16:49:41 scheduler task 389e72c3 (flow 646fac7b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:7233af6bd8e3f3e517d3eb5eff326e566cf699be8fe3f2c0751315569925c508 -> s3://niema-test/n100/r03/n100.r03.s066.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:49:41  <-  n100.r03.s066.Main.cp_out_file 646fac7b ok   extern 0s 35.7MiB
2021/07/08 16:49:41 scheduler task 9fb665b0 (flow c77a5486): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:41 scheduler task 9fb665b0 (flow c77a5486): promoting objects (try 0): started
2021/07/08 16:49:41 scheduler task 9fb665b0 (flow c77a5486): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:41 scheduler task 9fb665b0 (flow c77a5486): retrieving diagnostic output (try 0): started
2021/07/08 16:49:41 scheduler task 79b42f3c (flow 250ebac9): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:41 scheduler task 79b42f3c (flow 250ebac9): unloading (try 0): started
2021/07/08 16:49:41 scheduler task 79b42f3c (flow 250ebac9): unloading list<val<.=bf3a0099 35.7MiB> 35.7MiB>
2021/07/08 16:49:41 scheduler task 79b42f3c (flow 250ebac9): unloading val<.=08ec15f9 35.4MiB>
2021/07/08 16:49:41 scheduler task 79b42f3c (flow 250ebac9): unloading val<.=cfade87b 35.4MiB>
2021/07/08 16:49:41 scheduler task bd82dc2a (flow d0504b1f): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:41 scheduler task bd82dc2a (flow d0504b1f): unloading (try 0): started
2021/07/08 16:49:41 scheduler task bd82dc2a (flow d0504b1f): unloading list<val<.=97b959b1 35.7MiB> 35.7MiB>
2021/07/08 16:49:41 scheduler task bd82dc2a (flow d0504b1f): unloading val<.=4da19169 35.4MiB>
2021/07/08 16:49:41 scheduler task bd82dc2a (flow d0504b1f): unloading val<.=805f55a9 35.4MiB>
2021/07/08 16:49:41 scheduler task 9fb665b0 (flow c77a5486): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:41 scheduler task 9fb665b0 (flow c77a5486): retrieving result (try 0): started
2021/07/08 16:49:41 scheduler task 79b42f3c (flow 250ebac9): unloaded val<.=cfade87b 35.4MiB>
2021/07/08 16:49:41 scheduler task 79b42f3c (flow 250ebac9): unloaded list<val<.=bf3a0099 35.7MiB> 35.7MiB>
2021/07/08 16:49:41 scheduler task 79b42f3c (flow 250ebac9): unloaded val<.=08ec15f9 35.4MiB>
2021/07/08 16:49:41 scheduler task 79b42f3c (flow 250ebac9): unloading (try 0): successful, next state: complete
2021/07/08 16:49:41  <-  n100.r03.s045.Main.out_file 250ebac9 ok     exec 5m0s 35.7MiB
2021/07/08 16:49:41 n100.r03.s045.Main.out_file 250ebac9 n100/r03/n100.r03.s045.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c675467c2162ceccd4e46b110d0e0688fae89074753a1de8337270a1f32ca658
	sha256:250ebac9a75adb3c23049a538c9b9209882f93a265db0e34e11642e5c2b25125
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/79b42f3c8e48c15da33b4680543c5d813de5200642bbdf1e466c30e466f501bf
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s045_output"
	    wget -O "n100.r03.s045_output/n100.r03.s045.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s045_output/n100.r03.s045.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s045_output/n100.r03.s045.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s045_output/n100.r03.s045.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s045_output/n100.r03.s045.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s045_output/n100.r03.s045.reference.fas" "n100.r03.s045_output/n100.r03.s045.fq1.fastq" "n100.r03.s045_output/n100.r03.s045.fq2.fastq" | samtools view -bS - > "n100.r03.s045_output/n100.r03.s045.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s045_output/n100.r03.s045.untrimmed.sorted.bam" "n100.r03.s045_output/n100.r03.s045.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s045_output/n100.r03.s045.untrimmed.sorted.bam" -b "n100.r03.s045_output/n100.r03.s045.primers.bed" -p "n100.r03.s045_output/n100.r03.s045.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s045_output/n100.r03.s045.trimmed.sorted.bam" "n100.r03.s045_output/n100.r03.s045.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s045_output/n100.r03.s045.reference.fas" "n100.r03.s045_output/n100.r03.s045.trimmed.sorted.bam" > "n100.r03.s045_output/n100.r03.s045.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s045_output/n100.r03.s045.reference.fas" --call-indels "n100.r03.s045_output/n100.r03.s045.trimmed.sorted.bam" > "n100.r03.s045_output/n100.r03.s045.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s045_output/n100.r03.s045.trimmed.sorted.bam" > "n100.r03.s045_output/n100.r03.s045.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s045_output/n100.r03.s045.depth.txt" "n100.r03.s045_output/n100.r03.s045.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s045_output/n100.r03.s045.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s045_output/n100.r03.s045.reference.fas" | bcftools consensus -m "n100.r03.s045_output/n100.r03.s045.low_depth.tsv" tmp.vcf.gz > "n100.r03.s045_output/n100.r03.s045.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s045_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:bf3a0099836f74f09ce5e61e79855a0c79a74d5f77b80e99c00af8eb4da5a9da 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.0MiB max=129.3MiB
	    disk mean=10.1MiB max=35.7MiB
	    tmp mean=521B max=2.0KiB
2021/07/08 16:49:41 scheduler task 1a756629 (flow b70aabf3): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s045.tar.gz resources {}
2021/07/08 16:49:41  ->  n100.r03.s045.Main.cp_out_file b70aabf3 exec extern s3://niema-test/n100/r03/n100.r03.s045.tar.gz 35.7MiB
2021/07/08 16:49:41 scheduler task bd82dc2a (flow d0504b1f): unloaded val<.=4da19169 35.4MiB>
2021/07/08 16:49:41 scheduler task bd82dc2a (flow d0504b1f): unloaded val<.=805f55a9 35.4MiB>
2021/07/08 16:49:41 scheduler task bd82dc2a (flow d0504b1f): unloaded list<val<.=97b959b1 35.7MiB> 35.7MiB>
2021/07/08 16:49:41 scheduler task bd82dc2a (flow d0504b1f): unloading (try 0): successful, next state: complete
2021/07/08 16:49:41  <-  n100.r03.s099.Main.out_file d0504b1f ok     exec 5m0s 35.7MiB
2021/07/08 16:49:41 n100.r03.s099.Main.out_file d0504b1f n100/r03/n100.r03.s099.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:57879e78d43813d5eb8193788ba7b33328a2000c3023afc24aafca9f26ddf658
	sha256:d0504b1f4f0f54874ed340754fb107735ed9de855230f991b6aede6e23068f6b
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bd82dc2a4f05159ccafa17f8519cfe89be2ccb30fc68c35a02512e74b1bd56e0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s099_output"
	    wget -O "n100.r03.s099_output/n100.r03.s099.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s099_output/n100.r03.s099.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s099_output/n100.r03.s099.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s099_output/n100.r03.s099.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s099_output/n100.r03.s099.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s099_output/n100.r03.s099.reference.fas" "n100.r03.s099_output/n100.r03.s099.fq1.fastq" "n100.r03.s099_output/n100.r03.s099.fq2.fastq" | samtools view -bS - > "n100.r03.s099_output/n100.r03.s099.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s099_output/n100.r03.s099.untrimmed.sorted.bam" "n100.r03.s099_output/n100.r03.s099.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s099_output/n100.r03.s099.untrimmed.sorted.bam" -b "n100.r03.s099_output/n100.r03.s099.primers.bed" -p "n100.r03.s099_output/n100.r03.s099.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s099_output/n100.r03.s099.trimmed.sorted.bam" "n100.r03.s099_output/n100.r03.s099.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s099_output/n100.r03.s099.reference.fas" "n100.r03.s099_output/n100.r03.s099.trimmed.sorted.bam" > "n100.r03.s099_output/n100.r03.s099.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s099_output/n100.r03.s099.reference.fas" --call-indels "n100.r03.s099_output/n100.r03.s099.trimmed.sorted.bam" > "n100.r03.s099_output/n100.r03.s099.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s099_output/n100.r03.s099.trimmed.sorted.bam" > "n100.r03.s099_output/n100.r03.s099.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s099_output/n100.r03.s099.depth.txt" "n100.r03.s099_output/n100.r03.s099.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s099_output/n100.r03.s099.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s099_output/n100.r03.s099.reference.fas" | bcftools consensus -m "n100.r03.s099_output/n100.r03.s099.low_depth.tsv" tmp.vcf.gz > "n100.r03.s099_output/n100.r03.s099.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s099_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:97b959b1b543dc7517f483355c874f3ca0ab5904a834143a7e29bfb729573ddf 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.6MiB max=127.9MiB
	    disk mean=10.7MiB max=35.7MiB
	    tmp mean=524B max=2.0KiB
2021/07/08 16:49:41 scheduler task dd4e9bea (flow a718019f): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s099.tar.gz resources {}
2021/07/08 16:49:41  ->  n100.r03.s099.Main.cp_out_file a718019f exec extern s3://niema-test/n100/r03/n100.r03.s099.tar.gz 35.7MiB
2021/07/08 16:49:41 scheduler task 9fb665b0 (flow c77a5486): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:41 scheduler task 9fb665b0 (flow c77a5486): transferring output (try 0): started
2021/07/08 16:49:41 scheduler task 3edff482 (flow afc84f13): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:41 scheduler task 3edff482 (flow afc84f13): unloading (try 0): started
2021/07/08 16:49:41 scheduler task 3edff482 (flow afc84f13): unloading list<val<.=581eec7b 35.7MiB> 35.7MiB>
2021/07/08 16:49:41 scheduler task 3edff482 (flow afc84f13): unloading val<.=ffccb364 35.4MiB>
2021/07/08 16:49:41 scheduler task 3edff482 (flow afc84f13): unloading val<.=28959c7e 35.4MiB>
2021/07/08 16:49:41 scheduler task 3edff482 (flow afc84f13): unloaded list<val<.=581eec7b 35.7MiB> 35.7MiB>
2021/07/08 16:49:41 scheduler task 3edff482 (flow afc84f13): unloaded val<.=ffccb364 35.4MiB>
2021/07/08 16:49:41 scheduler task 3edff482 (flow afc84f13): unloaded val<.=28959c7e 35.4MiB>
2021/07/08 16:49:41 scheduler task 3edff482 (flow afc84f13): unloading (try 0): successful, next state: complete
2021/07/08 16:49:41  <-  n100.r03.s014.Main.out_file afc84f13 ok     exec 5m1s 35.7MiB
2021/07/08 16:49:41 n100.r03.s014.Main.out_file afc84f13 n100/r03/n100.r03.s014.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5a5fb63f0a3ffba5853697cafd2944f7f0799cc4b092906299ce0624b1df0da4
	sha256:afc84f13222d0e13121c68aef4beb6cad67086677c45545ae87922ef3e51a3f8
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3edff482a5dfe86c867085d0069a0276438ba04e5c4d2e9af84a33658338cb03
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s014_output"
	    wget -O "n100.r03.s014_output/n100.r03.s014.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s014_output/n100.r03.s014.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s014_output/n100.r03.s014.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s014_output/n100.r03.s014.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s014_output/n100.r03.s014.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s014_output/n100.r03.s014.reference.fas" "n100.r03.s014_output/n100.r03.s014.fq1.fastq" "n100.r03.s014_output/n100.r03.s014.fq2.fastq" | samtools view -bS - > "n100.r03.s014_output/n100.r03.s014.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s014_output/n100.r03.s014.untrimmed.sorted.bam" "n100.r03.s014_output/n100.r03.s014.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s014_output/n100.r03.s014.untrimmed.sorted.bam" -b "n100.r03.s014_output/n100.r03.s014.primers.bed" -p "n100.r03.s014_output/n100.r03.s014.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s014_output/n100.r03.s014.trimmed.sorted.bam" "n100.r03.s014_output/n100.r03.s014.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s014_output/n100.r03.s014.reference.fas" "n100.r03.s014_output/n100.r03.s014.trimmed.sorted.bam" > "n100.r03.s014_output/n100.r03.s014.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s014_output/n100.r03.s014.reference.fas" --call-indels "n100.r03.s014_output/n100.r03.s014.trimmed.sorted.bam" > "n100.r03.s014_output/n100.r03.s014.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s014_output/n100.r03.s014.trimmed.sorted.bam" > "n100.r03.s014_output/n100.r03.s014.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s014_output/n100.r03.s014.depth.txt" "n100.r03.s014_output/n100.r03.s014.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s014_output/n100.r03.s014.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s014_output/n100.r03.s014.reference.fas" | bcftools consensus -m "n100.r03.s014_output/n100.r03.s014.low_depth.tsv" tmp.vcf.gz > "n100.r03.s014_output/n100.r03.s014.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s014_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:581eec7bfda5f299c9c80431f9ff2d7247058e4ef544277824ef94f0a11f26d0 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.1MiB max=128.7MiB
	    disk mean=9.1MiB max=35.7MiB
	    tmp mean=345B max=1.0KiB
2021/07/08 16:49:41 scheduler task 6af402a5 (flow 28aef52e): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s014.tar.gz resources {}
2021/07/08 16:49:41  ->  n100.r03.s014.Main.cp_out_file 28aef52e exec extern s3://niema-test/n100/r03/n100.r03.s014.tar.gz 35.7MiB
2021/07/08 16:49:41 scheduler task 192e5535 (flow e589bead): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:41 scheduler task 192e5535 (flow e589bead): unloading (try 0): started
2021/07/08 16:49:41 scheduler task 192e5535 (flow e589bead): unloading list<val<.=6a47fa3e 35.7MiB> 35.7MiB>
2021/07/08 16:49:41 scheduler task 192e5535 (flow e589bead): unloading val<.=d00afa3c 35.4MiB>
2021/07/08 16:49:41 scheduler task 192e5535 (flow e589bead): unloading val<.=13330d75 35.4MiB>
2021/07/08 16:49:41 scheduler task 192e5535 (flow e589bead): unloaded val<.=13330d75 35.4MiB>
2021/07/08 16:49:41 scheduler task 192e5535 (flow e589bead): unloaded val<.=d00afa3c 35.4MiB>
2021/07/08 16:49:41 scheduler task 192e5535 (flow e589bead): unloaded list<val<.=6a47fa3e 35.7MiB> 35.7MiB>
2021/07/08 16:49:41 scheduler task 192e5535 (flow e589bead): unloading (try 0): successful, next state: complete
2021/07/08 16:49:41  <-  n100.r03.s002.Main.out_file e589bead ok     exec 5m1s 35.7MiB
2021/07/08 16:49:41 n100.r03.s002.Main.out_file e589bead n100/r03/n100.r03.s002.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ebc574d21ae3c29defc10c1829a6e34fe507a771a007c9ddb988c4d46713685d
	sha256:e589bead199e8837dba052ce3d42b2eab655848a38d2005288c6e5afcaba0e27
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/192e5535e6bfb9fabca84fcd462bc8d14d7ec60de325aaf57446a7ce992e5886
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s002_output"
	    wget -O "n100.r03.s002_output/n100.r03.s002.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s002_output/n100.r03.s002.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s002_output/n100.r03.s002.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s002_output/n100.r03.s002.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s002_output/n100.r03.s002.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s002_output/n100.r03.s002.reference.fas" "n100.r03.s002_output/n100.r03.s002.fq1.fastq" "n100.r03.s002_output/n100.r03.s002.fq2.fastq" | samtools view -bS - > "n100.r03.s002_output/n100.r03.s002.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s002_output/n100.r03.s002.untrimmed.sorted.bam" "n100.r03.s002_output/n100.r03.s002.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s002_output/n100.r03.s002.untrimmed.sorted.bam" -b "n100.r03.s002_output/n100.r03.s002.primers.bed" -p "n100.r03.s002_output/n100.r03.s002.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s002_output/n100.r03.s002.trimmed.sorted.bam" "n100.r03.s002_output/n100.r03.s002.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s002_output/n100.r03.s002.reference.fas" "n100.r03.s002_output/n100.r03.s002.trimmed.sorted.bam" > "n100.r03.s002_output/n100.r03.s002.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s002_output/n100.r03.s002.reference.fas" --call-indels "n100.r03.s002_output/n100.r03.s002.trimmed.sorted.bam" > "n100.r03.s002_output/n100.r03.s002.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s002_output/n100.r03.s002.trimmed.sorted.bam" > "n100.r03.s002_output/n100.r03.s002.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s002_output/n100.r03.s002.depth.txt" "n100.r03.s002_output/n100.r03.s002.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s002_output/n100.r03.s002.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s002_output/n100.r03.s002.reference.fas" | bcftools consensus -m "n100.r03.s002_output/n100.r03.s002.low_depth.tsv" tmp.vcf.gz > "n100.r03.s002_output/n100.r03.s002.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s002_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:6a47fa3ed4b7603753a5c7db6afcd2c6e0e247684a7cee02de43ea6727088792 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.1MiB max=130.5MiB
	    disk mean=9.3MiB max=35.7MiB
	    tmp mean=527B max=2.1KiB
2021/07/08 16:49:41 scheduler task 39c91c6b (flow cade779d): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s002.tar.gz resources {}
2021/07/08 16:49:41  ->  n100.r03.s002.Main.cp_out_file cade779d exec extern s3://niema-test/n100/r03/n100.r03.s002.tar.gz 35.7MiB
2021/07/08 16:49:41 scheduler task 529ecf42 (flow e43f35d3): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:41 scheduler task 529ecf42 (flow e43f35d3): promoting objects (try 0): started
2021/07/08 16:49:41 scheduler task 529ecf42 (flow e43f35d3): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:41 scheduler task 529ecf42 (flow e43f35d3): retrieving diagnostic output (try 0): started
2021/07/08 16:49:41 scheduler task 529ecf42 (flow e43f35d3): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:41 scheduler task 529ecf42 (flow e43f35d3): retrieving result (try 0): started
2021/07/08 16:49:41 scheduler task 1a756629 (flow b70aabf3): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:bf3a0099836f74f09ce5e61e79855a0c79a74d5f77b80e99c00af8eb4da5a9da -> s3://niema-test/n100/r03/n100.r03.s045.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:49:41  <-  n100.r03.s045.Main.cp_out_file b70aabf3 ok   extern 0s 35.7MiB
2021/07/08 16:49:41 scheduler task dd4e9bea (flow a718019f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:97b959b1b543dc7517f483355c874f3ca0ab5904a834143a7e29bfb729573ddf -> s3://niema-test/n100/r03/n100.r03.s099.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:49:41  <-  n100.r03.s099.Main.cp_out_file a718019f ok   extern 0s 35.7MiB
2021/07/08 16:49:41 scheduler task 529ecf42 (flow e43f35d3): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:41 scheduler task 529ecf42 (flow e43f35d3): transferring output (try 0): started
2021/07/08 16:49:42 scheduler task 9fb665b0 (flow c77a5486): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:42 scheduler task 9fb665b0 (flow c77a5486): unloading (try 0): started
2021/07/08 16:49:42 scheduler task 9fb665b0 (flow c77a5486): unloading list<val<.=f8247351 35.7MiB> 35.7MiB>
2021/07/08 16:49:42 scheduler task 9fb665b0 (flow c77a5486): unloading val<.=226fe010 35.4MiB>
2021/07/08 16:49:42 scheduler task 9fb665b0 (flow c77a5486): unloading val<.=2103be3c 35.4MiB>
2021/07/08 16:49:42 scheduler task 9fb665b0 (flow c77a5486): unloaded val<.=2103be3c 35.4MiB>
2021/07/08 16:49:42 scheduler task 9fb665b0 (flow c77a5486): unloaded val<.=226fe010 35.4MiB>
2021/07/08 16:49:42 scheduler task 9fb665b0 (flow c77a5486): unloaded list<val<.=f8247351 35.7MiB> 35.7MiB>
2021/07/08 16:49:42 scheduler task 9fb665b0 (flow c77a5486): unloading (try 0): successful, next state: complete
2021/07/08 16:49:42  <-  n100.r03.s057.Main.out_file c77a5486 ok     exec 5m1s 35.7MiB
2021/07/08 16:49:42 n100.r03.s057.Main.out_file c77a5486 n100/r03/n100.r03.s057.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:9c9fe791d225668510dee8d09fed9fd30e954d9e30881b8bc6617531700e987d
	sha256:c77a5486694713708235bd3a1fd5c04e3ff1f974bb42910022f4348ba17b843e
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9fb665b08990a1c06e7aef37bce6634bf50c87f6c6f4b335fa029fc66cec6215
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s057_output"
	    wget -O "n100.r03.s057_output/n100.r03.s057.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s057_output/n100.r03.s057.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s057_output/n100.r03.s057.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s057_output/n100.r03.s057.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s057_output/n100.r03.s057.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s057_output/n100.r03.s057.reference.fas" "n100.r03.s057_output/n100.r03.s057.fq1.fastq" "n100.r03.s057_output/n100.r03.s057.fq2.fastq" | samtools view -bS - > "n100.r03.s057_output/n100.r03.s057.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s057_output/n100.r03.s057.untrimmed.sorted.bam" "n100.r03.s057_output/n100.r03.s057.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s057_output/n100.r03.s057.untrimmed.sorted.bam" -b "n100.r03.s057_output/n100.r03.s057.primers.bed" -p "n100.r03.s057_output/n100.r03.s057.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s057_output/n100.r03.s057.trimmed.sorted.bam" "n100.r03.s057_output/n100.r03.s057.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s057_output/n100.r03.s057.reference.fas" "n100.r03.s057_output/n100.r03.s057.trimmed.sorted.bam" > "n100.r03.s057_output/n100.r03.s057.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s057_output/n100.r03.s057.reference.fas" --call-indels "n100.r03.s057_output/n100.r03.s057.trimmed.sorted.bam" > "n100.r03.s057_output/n100.r03.s057.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s057_output/n100.r03.s057.trimmed.sorted.bam" > "n100.r03.s057_output/n100.r03.s057.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s057_output/n100.r03.s057.depth.txt" "n100.r03.s057_output/n100.r03.s057.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s057_output/n100.r03.s057.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s057_output/n100.r03.s057.reference.fas" | bcftools consensus -m "n100.r03.s057_output/n100.r03.s057.low_depth.tsv" tmp.vcf.gz > "n100.r03.s057_output/n100.r03.s057.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s057_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f8247351de939bb03523d03ccca532b31006136b9553cd892de5fc831646a192 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.5MiB max=129.5MiB
	    disk mean=6.9MiB max=35.7MiB
	    tmp mean=523B max=2.1KiB
2021/07/08 16:49:42 scheduler task 6ea04e59 (flow 3634f320): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s057.tar.gz resources {}
2021/07/08 16:49:42  ->  n100.r03.s057.Main.cp_out_file 3634f320 exec extern s3://niema-test/n100/r03/n100.r03.s057.tar.gz 35.7MiB
2021/07/08 16:49:42 scheduler task 39c91c6b (flow cade779d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:6a47fa3ed4b7603753a5c7db6afcd2c6e0e247684a7cee02de43ea6727088792 -> s3://niema-test/n100/r03/n100.r03.s002.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:49:42 scheduler task 6af402a5 (flow 28aef52e): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:581eec7bfda5f299c9c80431f9ff2d7247058e4ef544277824ef94f0a11f26d0 -> s3://niema-test/n100/r03/n100.r03.s014.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:49:42  <-  n100.r03.s002.Main.cp_out_file cade779d ok   extern 0s 35.7MiB
2021/07/08 16:49:42  <-  n100.r03.s014.Main.cp_out_file 28aef52e ok   extern 0s 35.7MiB
2021/07/08 16:49:42 scheduler task 529ecf42 (flow e43f35d3): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:42 scheduler task 529ecf42 (flow e43f35d3): unloading (try 0): started
2021/07/08 16:49:42 scheduler task 529ecf42 (flow e43f35d3): unloading list<val<.=c1688ae1 35.7MiB> 35.7MiB>
2021/07/08 16:49:42 scheduler task 529ecf42 (flow e43f35d3): unloading val<.=701a3003 35.4MiB>
2021/07/08 16:49:42 scheduler task 529ecf42 (flow e43f35d3): unloading val<.=25926c0c 35.4MiB>
2021/07/08 16:49:42 scheduler task 529ecf42 (flow e43f35d3): unloaded val<.=701a3003 35.4MiB>
2021/07/08 16:49:42 scheduler task 529ecf42 (flow e43f35d3): unloaded list<val<.=c1688ae1 35.7MiB> 35.7MiB>
2021/07/08 16:49:42 scheduler task 529ecf42 (flow e43f35d3): unloaded val<.=25926c0c 35.4MiB>
2021/07/08 16:49:42 scheduler task 529ecf42 (flow e43f35d3): unloading (try 0): successful, next state: complete
2021/07/08 16:49:42  <-  n100.r03.s075.Main.out_file e43f35d3 ok     exec 5m2s 35.7MiB
2021/07/08 16:49:42 n100.r03.s075.Main.out_file e43f35d3 n100/r03/n100.r03.s075.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c9df3e9c2c197796726365988b8b755ba982f676c9a1e5873459d3440ad2b75f
	sha256:e43f35d3867a298306e2843aadbc27f3fda1b88bee1d0bbedbe04108fcbb45fe
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/529ecf42cb3bf0b947737280a70b19ea9433f74259ac79a2eac36ac48b152be2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s075_output"
	    wget -O "n100.r03.s075_output/n100.r03.s075.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s075_output/n100.r03.s075.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s075_output/n100.r03.s075.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s075_output/n100.r03.s075.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s075_output/n100.r03.s075.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s075_output/n100.r03.s075.reference.fas" "n100.r03.s075_output/n100.r03.s075.fq1.fastq" "n100.r03.s075_output/n100.r03.s075.fq2.fastq" | samtools view -bS - > "n100.r03.s075_output/n100.r03.s075.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s075_output/n100.r03.s075.untrimmed.sorted.bam" "n100.r03.s075_output/n100.r03.s075.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s075_output/n100.r03.s075.untrimmed.sorted.bam" -b "n100.r03.s075_output/n100.r03.s075.primers.bed" -p "n100.r03.s075_output/n100.r03.s075.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s075_output/n100.r03.s075.trimmed.sorted.bam" "n100.r03.s075_output/n100.r03.s075.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s075_output/n100.r03.s075.reference.fas" "n100.r03.s075_output/n100.r03.s075.trimmed.sorted.bam" > "n100.r03.s075_output/n100.r03.s075.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s075_output/n100.r03.s075.reference.fas" --call-indels "n100.r03.s075_output/n100.r03.s075.trimmed.sorted.bam" > "n100.r03.s075_output/n100.r03.s075.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s075_output/n100.r03.s075.trimmed.sorted.bam" > "n100.r03.s075_output/n100.r03.s075.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s075_output/n100.r03.s075.depth.txt" "n100.r03.s075_output/n100.r03.s075.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s075_output/n100.r03.s075.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s075_output/n100.r03.s075.reference.fas" | bcftools consensus -m "n100.r03.s075_output/n100.r03.s075.low_depth.tsv" tmp.vcf.gz > "n100.r03.s075_output/n100.r03.s075.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s075_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:c1688ae1c39341478f032eac4b078d276960fd43c4a4a69c093be1190e966af7 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.0MiB max=130.2MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 16:49:42 scheduler task fef6d3c2 (flow b7e5460e): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s075.tar.gz resources {}
2021/07/08 16:49:42  ->  n100.r03.s075.Main.cp_out_file b7e5460e exec extern s3://niema-test/n100/r03/n100.r03.s075.tar.gz 35.7MiB
2021/07/08 16:49:42 scheduler task 6ea04e59 (flow 3634f320): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f8247351de939bb03523d03ccca532b31006136b9553cd892de5fc831646a192 -> s3://niema-test/n100/r03/n100.r03.s057.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:49:42  <-  n100.r03.s057.Main.cp_out_file 3634f320 ok   extern 0s 35.7MiB
2021/07/08 16:49:43 scheduler task fef6d3c2 (flow b7e5460e): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:c1688ae1c39341478f032eac4b078d276960fd43c4a4a69c093be1190e966af7 -> s3://niema-test/n100/r03/n100.r03.s075.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:49:43  <-  n100.r03.s075.Main.cp_out_file b7e5460e ok   extern 0s 35.7MiB
2021/07/08 16:49:44 scheduler task 7a62ec14 (flow e8c1c4e4): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:44 scheduler task 7a62ec14 (flow e8c1c4e4): promoting objects (try 0): started
2021/07/08 16:49:44 scheduler task 7a62ec14 (flow e8c1c4e4): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:44 scheduler task 7a62ec14 (flow e8c1c4e4): retrieving diagnostic output (try 0): started
2021/07/08 16:49:44 scheduler task 7a62ec14 (flow e8c1c4e4): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:44 scheduler task 7a62ec14 (flow e8c1c4e4): retrieving result (try 0): started
2021/07/08 16:49:44 scheduler task 7a62ec14 (flow e8c1c4e4): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:44 scheduler task 7a62ec14 (flow e8c1c4e4): transferring output (try 0): started
2021/07/08 16:49:45 scheduler task 7a62ec14 (flow e8c1c4e4): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:45 scheduler task 7a62ec14 (flow e8c1c4e4): unloading (try 0): started
2021/07/08 16:49:45 scheduler task 7a62ec14 (flow e8c1c4e4): unloading list<val<.=2652f560 35.8MiB> 35.8MiB>
2021/07/08 16:49:45 scheduler task 7a62ec14 (flow e8c1c4e4): unloading val<.=88561216 35.4MiB>
2021/07/08 16:49:45 scheduler task 7a62ec14 (flow e8c1c4e4): unloading val<.=97027b48 35.4MiB>
2021/07/08 16:49:45 scheduler task 7a62ec14 (flow e8c1c4e4): unloaded val<.=97027b48 35.4MiB>
2021/07/08 16:49:45 scheduler task 7a62ec14 (flow e8c1c4e4): unloaded val<.=88561216 35.4MiB>
2021/07/08 16:49:45 scheduler task 7a62ec14 (flow e8c1c4e4): unloaded list<val<.=2652f560 35.8MiB> 35.8MiB>
2021/07/08 16:49:45 scheduler task 7a62ec14 (flow e8c1c4e4): unloading (try 0): successful, next state: complete
2021/07/08 16:49:45  <-  n100.r03.s044.Main.out_file e8c1c4e4 ok     exec 5m4s 35.8MiB
2021/07/08 16:49:45 n100.r03.s044.Main.out_file e8c1c4e4 n100/r03/n100.r03.s044.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:37d09670fcc978aec1a464e3304e88224e9ca6136528cbf762e2336da0a8da50
	sha256:e8c1c4e4632b8ee5cbf9317ebd2fbe962a6d63110bd5223aff6dac8787164cb1
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7a62ec14bf01af1ab03bf2eaee92f3ddac440a46a6eab488164f26ddd1a06633
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s044_output"
	    wget -O "n100.r03.s044_output/n100.r03.s044.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s044_output/n100.r03.s044.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s044_output/n100.r03.s044.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s044_output/n100.r03.s044.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s044_output/n100.r03.s044.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s044_output/n100.r03.s044.reference.fas" "n100.r03.s044_output/n100.r03.s044.fq1.fastq" "n100.r03.s044_output/n100.r03.s044.fq2.fastq" | samtools view -bS - > "n100.r03.s044_output/n100.r03.s044.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s044_output/n100.r03.s044.untrimmed.sorted.bam" "n100.r03.s044_output/n100.r03.s044.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s044_output/n100.r03.s044.untrimmed.sorted.bam" -b "n100.r03.s044_output/n100.r03.s044.primers.bed" -p "n100.r03.s044_output/n100.r03.s044.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s044_output/n100.r03.s044.trimmed.sorted.bam" "n100.r03.s044_output/n100.r03.s044.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s044_output/n100.r03.s044.reference.fas" "n100.r03.s044_output/n100.r03.s044.trimmed.sorted.bam" > "n100.r03.s044_output/n100.r03.s044.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s044_output/n100.r03.s044.reference.fas" --call-indels "n100.r03.s044_output/n100.r03.s044.trimmed.sorted.bam" > "n100.r03.s044_output/n100.r03.s044.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s044_output/n100.r03.s044.trimmed.sorted.bam" > "n100.r03.s044_output/n100.r03.s044.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s044_output/n100.r03.s044.depth.txt" "n100.r03.s044_output/n100.r03.s044.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s044_output/n100.r03.s044.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s044_output/n100.r03.s044.reference.fas" | bcftools consensus -m "n100.r03.s044_output/n100.r03.s044.low_depth.tsv" tmp.vcf.gz > "n100.r03.s044_output/n100.r03.s044.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s044_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:2652f560a9d09740d719ddb6ea88b40a99c746dc3b8c6f1d4a3c2808ca65dddd 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.6MiB max=128.2MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 16:49:45 scheduler task b2e8e9ca (flow 849d378a): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s044.tar.gz resources {}
2021/07/08 16:49:45  ->  n100.r03.s044.Main.cp_out_file 849d378a exec extern s3://niema-test/n100/r03/n100.r03.s044.tar.gz 35.8MiB
2021/07/08 16:49:46 scheduler task b2e8e9ca (flow 849d378a): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:2652f560a9d09740d719ddb6ea88b40a99c746dc3b8c6f1d4a3c2808ca65dddd -> s3://niema-test/n100/r03/n100.r03.s044.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:49:46  <-  n100.r03.s044.Main.cp_out_file 849d378a ok   extern 0s 35.8MiB
2021/07/08 16:49:48 scheduler task df81b75e (flow c2a25c99): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:48 scheduler task df81b75e (flow c2a25c99): promoting objects (try 0): started
2021/07/08 16:49:48 scheduler task df81b75e (flow c2a25c99): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:48 scheduler task df81b75e (flow c2a25c99): retrieving diagnostic output (try 0): started
2021/07/08 16:49:48 scheduler task df81b75e (flow c2a25c99): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:48 scheduler task df81b75e (flow c2a25c99): retrieving result (try 0): started
2021/07/08 16:49:48 scheduler task df81b75e (flow c2a25c99): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:48 scheduler task df81b75e (flow c2a25c99): transferring output (try 0): started
2021/07/08 16:49:49 scheduler task df81b75e (flow c2a25c99): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:49 scheduler task df81b75e (flow c2a25c99): unloading (try 0): started
2021/07/08 16:49:49 scheduler task df81b75e (flow c2a25c99): unloading list<val<.=4e1cd3b9 35.8MiB> 35.8MiB>
2021/07/08 16:49:49 scheduler task df81b75e (flow c2a25c99): unloading val<.=86e59c7c 35.4MiB>
2021/07/08 16:49:49 scheduler task df81b75e (flow c2a25c99): unloading val<.=925f76f8 35.4MiB>
2021/07/08 16:49:49 scheduler task 2292bb40 (flow 3abe7efe): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:49 scheduler task 2292bb40 (flow 3abe7efe): promoting objects (try 0): started
2021/07/08 16:49:49 scheduler task df81b75e (flow c2a25c99): unloaded val<.=925f76f8 35.4MiB>
2021/07/08 16:49:49 scheduler task df81b75e (flow c2a25c99): unloaded list<val<.=4e1cd3b9 35.8MiB> 35.8MiB>
2021/07/08 16:49:49 scheduler task df81b75e (flow c2a25c99): unloaded val<.=86e59c7c 35.4MiB>
2021/07/08 16:49:49 scheduler task df81b75e (flow c2a25c99): unloading (try 0): successful, next state: complete
2021/07/08 16:49:49  <-  n100.r03.s008.Main.out_file c2a25c99 ok     exec 4m58s 35.8MiB
2021/07/08 16:49:49 n100.r03.s008.Main.out_file c2a25c99 n100/r03/n100.r03.s008.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:42a400b7ec7b240f27084b928143cd5c1596910646725c130fd8d8da4976b2c3
	sha256:c2a25c99bd2f0262707e7733e10aa74666b031d04b84057c68074e75623a1593
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/df81b75e15668f634b923eb595e0dbfd78c3eabf54fce65b242587da239ad4ff
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s008_output"
	    wget -O "n100.r03.s008_output/n100.r03.s008.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s008_output/n100.r03.s008.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s008_output/n100.r03.s008.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s008_output/n100.r03.s008.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s008_output/n100.r03.s008.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s008_output/n100.r03.s008.reference.fas" "n100.r03.s008_output/n100.r03.s008.fq1.fastq" "n100.r03.s008_output/n100.r03.s008.fq2.fastq" | samtools view -bS - > "n100.r03.s008_output/n100.r03.s008.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s008_output/n100.r03.s008.untrimmed.sorted.bam" "n100.r03.s008_output/n100.r03.s008.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s008_output/n100.r03.s008.untrimmed.sorted.bam" -b "n100.r03.s008_output/n100.r03.s008.primers.bed" -p "n100.r03.s008_output/n100.r03.s008.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s008_output/n100.r03.s008.trimmed.sorted.bam" "n100.r03.s008_output/n100.r03.s008.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s008_output/n100.r03.s008.reference.fas" "n100.r03.s008_output/n100.r03.s008.trimmed.sorted.bam" > "n100.r03.s008_output/n100.r03.s008.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s008_output/n100.r03.s008.reference.fas" --call-indels "n100.r03.s008_output/n100.r03.s008.trimmed.sorted.bam" > "n100.r03.s008_output/n100.r03.s008.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s008_output/n100.r03.s008.trimmed.sorted.bam" > "n100.r03.s008_output/n100.r03.s008.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s008_output/n100.r03.s008.depth.txt" "n100.r03.s008_output/n100.r03.s008.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s008_output/n100.r03.s008.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s008_output/n100.r03.s008.reference.fas" | bcftools consensus -m "n100.r03.s008_output/n100.r03.s008.low_depth.tsv" tmp.vcf.gz > "n100.r03.s008_output/n100.r03.s008.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s008_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:4e1cd3b928b851469eeec84896118d77597957791e693bd05ef7552eb76e4e4c 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.5MiB max=124.5MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=627B max=2.1KiB
2021/07/08 16:49:49 scheduler task 24b98a15 (flow d30af7d7): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s008.tar.gz resources {}
2021/07/08 16:49:49  ->  n100.r03.s008.Main.cp_out_file d30af7d7 exec extern s3://niema-test/n100/r03/n100.r03.s008.tar.gz 35.8MiB
2021/07/08 16:49:49 scheduler task 2292bb40 (flow 3abe7efe): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:49 scheduler task 2292bb40 (flow 3abe7efe): retrieving diagnostic output (try 0): started
2021/07/08 16:49:49 scheduler task 79e1224c (flow 7dc6a89a): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:49 scheduler task 79e1224c (flow 7dc6a89a): promoting objects (try 0): started
2021/07/08 16:49:49 scheduler task 79e1224c (flow 7dc6a89a): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:49 scheduler task 2292bb40 (flow 3abe7efe): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:49 scheduler task 79e1224c (flow 7dc6a89a): retrieving diagnostic output (try 0): started
2021/07/08 16:49:49 scheduler task 2292bb40 (flow 3abe7efe): retrieving result (try 0): started
2021/07/08 16:49:49 scheduler task 2292bb40 (flow 3abe7efe): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:49 scheduler task 79e1224c (flow 7dc6a89a): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:49 scheduler task 2292bb40 (flow 3abe7efe): transferring output (try 0): started
2021/07/08 16:49:49 scheduler task 79e1224c (flow 7dc6a89a): retrieving result (try 0): started
2021/07/08 16:49:49 scheduler task 79e1224c (flow 7dc6a89a): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:49 scheduler task 79e1224c (flow 7dc6a89a): transferring output (try 0): started
2021/07/08 16:49:50 scheduler task 24b98a15 (flow d30af7d7): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:4e1cd3b928b851469eeec84896118d77597957791e693bd05ef7552eb76e4e4c -> s3://niema-test/n100/r03/n100.r03.s008.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:49:50  <-  n100.r03.s008.Main.cp_out_file d30af7d7 ok   extern 0s 35.8MiB
2021/07/08 16:49:50 scheduler task 2292bb40 (flow 3abe7efe): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:50 scheduler task 2292bb40 (flow 3abe7efe): unloading (try 0): started
2021/07/08 16:49:50 scheduler task 2292bb40 (flow 3abe7efe): unloading list<val<.=6e0e8baa 35.7MiB> 35.7MiB>
2021/07/08 16:49:50 scheduler task 2292bb40 (flow 3abe7efe): unloading val<.=055fb7ed 35.4MiB>
2021/07/08 16:49:50 scheduler task 2292bb40 (flow 3abe7efe): unloading val<.=01cb57f5 35.4MiB>
2021/07/08 16:49:50 scheduler task 2292bb40 (flow 3abe7efe): unloaded list<val<.=6e0e8baa 35.7MiB> 35.7MiB>
2021/07/08 16:49:50 scheduler task 2292bb40 (flow 3abe7efe): unloaded val<.=01cb57f5 35.4MiB>
2021/07/08 16:49:50 scheduler task 2292bb40 (flow 3abe7efe): unloaded val<.=055fb7ed 35.4MiB>
2021/07/08 16:49:50 scheduler task 2292bb40 (flow 3abe7efe): unloading (try 0): successful, next state: complete
2021/07/08 16:49:50  <-  n100.r03.s086.Main.out_file 3abe7efe ok     exec 4m59s 35.7MiB
2021/07/08 16:49:50 n100.r03.s086.Main.out_file 3abe7efe n100/r03/n100.r03.s086.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ae552765ba33663dfd1d8514489c99b91195f5385fc762459a5d913209b07ed4
	sha256:3abe7efeb3981057f284f24fa113cd1abfc79dc866c3a461d59f953da8331da9
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2292bb4092396b64db1ec5fea53ca7c6cfa98e7098c5416eb3782ce146d793a9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s086_output"
	    wget -O "n100.r03.s086_output/n100.r03.s086.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s086_output/n100.r03.s086.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s086_output/n100.r03.s086.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s086_output/n100.r03.s086.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s086_output/n100.r03.s086.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s086_output/n100.r03.s086.reference.fas" "n100.r03.s086_output/n100.r03.s086.fq1.fastq" "n100.r03.s086_output/n100.r03.s086.fq2.fastq" | samtools view -bS - > "n100.r03.s086_output/n100.r03.s086.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s086_output/n100.r03.s086.untrimmed.sorted.bam" "n100.r03.s086_output/n100.r03.s086.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s086_output/n100.r03.s086.untrimmed.sorted.bam" -b "n100.r03.s086_output/n100.r03.s086.primers.bed" -p "n100.r03.s086_output/n100.r03.s086.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s086_output/n100.r03.s086.trimmed.sorted.bam" "n100.r03.s086_output/n100.r03.s086.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s086_output/n100.r03.s086.reference.fas" "n100.r03.s086_output/n100.r03.s086.trimmed.sorted.bam" > "n100.r03.s086_output/n100.r03.s086.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s086_output/n100.r03.s086.reference.fas" --call-indels "n100.r03.s086_output/n100.r03.s086.trimmed.sorted.bam" > "n100.r03.s086_output/n100.r03.s086.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s086_output/n100.r03.s086.trimmed.sorted.bam" > "n100.r03.s086_output/n100.r03.s086.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s086_output/n100.r03.s086.depth.txt" "n100.r03.s086_output/n100.r03.s086.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s086_output/n100.r03.s086.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s086_output/n100.r03.s086.reference.fas" | bcftools consensus -m "n100.r03.s086_output/n100.r03.s086.low_depth.tsv" tmp.vcf.gz > "n100.r03.s086_output/n100.r03.s086.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s086_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:6e0e8baaf05b286c5c5be706ac6c8140a53bce49ae6586bff279255f22c77459 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.2MiB max=124.0MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=419B max=1.0KiB
2021/07/08 16:49:50 scheduler task 2a65eee9 (flow 67493555): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s086.tar.gz resources {}
2021/07/08 16:49:50  ->  n100.r03.s086.Main.cp_out_file 67493555 exec extern s3://niema-test/n100/r03/n100.r03.s086.tar.gz 35.7MiB
2021/07/08 16:49:50 scheduler task 79e1224c (flow 7dc6a89a): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:50 scheduler task 79e1224c (flow 7dc6a89a): unloading (try 0): started
2021/07/08 16:49:50 scheduler task 79e1224c (flow 7dc6a89a): unloading list<val<.=9d4e9ea6 35.7MiB> 35.7MiB>
2021/07/08 16:49:50 scheduler task 79e1224c (flow 7dc6a89a): unloading val<.=2f332ec2 35.4MiB>
2021/07/08 16:49:50 scheduler task 79e1224c (flow 7dc6a89a): unloading val<.=b31fab2c 35.4MiB>
2021/07/08 16:49:50 scheduler task 6ab20197 (flow e04e53c6): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:50 scheduler task 6ab20197 (flow e04e53c6): promoting objects (try 0): started
2021/07/08 16:49:50 scheduler task 79e1224c (flow 7dc6a89a): unloaded list<val<.=9d4e9ea6 35.7MiB> 35.7MiB>
2021/07/08 16:49:50 scheduler task 79e1224c (flow 7dc6a89a): unloaded val<.=b31fab2c 35.4MiB>
2021/07/08 16:49:50 scheduler task 79e1224c (flow 7dc6a89a): unloaded val<.=2f332ec2 35.4MiB>
2021/07/08 16:49:50 scheduler task 79e1224c (flow 7dc6a89a): unloading (try 0): successful, next state: complete
2021/07/08 16:49:50  <-  n100.r03.s100.Main.out_file 7dc6a89a ok     exec 4m59s 35.7MiB
2021/07/08 16:49:50 n100.r03.s100.Main.out_file 7dc6a89a n100/r03/n100.r03.s100.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f39a6eb67e1ff403e8adce6b5c16d33d670c0e389537a0bde801113224bbd32e
	sha256:7dc6a89a4e79ad35108438668980c13470ddff8e5d9ee17cb32fcc1c5d9a351f
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/79e1224c0ede1f327704b37a96c6ef012bda4ffcf32964a6317bf16866e5c86a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s100_output"
	    wget -O "n100.r03.s100_output/n100.r03.s100.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s100_output/n100.r03.s100.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s100_output/n100.r03.s100.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s100_output/n100.r03.s100.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s100_output/n100.r03.s100.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s100_output/n100.r03.s100.reference.fas" "n100.r03.s100_output/n100.r03.s100.fq1.fastq" "n100.r03.s100_output/n100.r03.s100.fq2.fastq" | samtools view -bS - > "n100.r03.s100_output/n100.r03.s100.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s100_output/n100.r03.s100.untrimmed.sorted.bam" "n100.r03.s100_output/n100.r03.s100.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s100_output/n100.r03.s100.untrimmed.sorted.bam" -b "n100.r03.s100_output/n100.r03.s100.primers.bed" -p "n100.r03.s100_output/n100.r03.s100.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s100_output/n100.r03.s100.trimmed.sorted.bam" "n100.r03.s100_output/n100.r03.s100.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s100_output/n100.r03.s100.reference.fas" "n100.r03.s100_output/n100.r03.s100.trimmed.sorted.bam" > "n100.r03.s100_output/n100.r03.s100.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s100_output/n100.r03.s100.reference.fas" --call-indels "n100.r03.s100_output/n100.r03.s100.trimmed.sorted.bam" > "n100.r03.s100_output/n100.r03.s100.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s100_output/n100.r03.s100.trimmed.sorted.bam" > "n100.r03.s100_output/n100.r03.s100.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s100_output/n100.r03.s100.depth.txt" "n100.r03.s100_output/n100.r03.s100.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s100_output/n100.r03.s100.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s100_output/n100.r03.s100.reference.fas" | bcftools consensus -m "n100.r03.s100_output/n100.r03.s100.low_depth.tsv" tmp.vcf.gz > "n100.r03.s100_output/n100.r03.s100.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s100_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9d4e9ea66cf9ec6a3e785fb4f0e0fd019ed094317e5869bc58cf0c8aeab27013 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.3MiB max=125.3MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 16:49:50 scheduler task b15f0465 (flow 86952886): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s100.tar.gz resources {}
2021/07/08 16:49:50  ->  n100.r03.s100.Main.cp_out_file 86952886 exec extern s3://niema-test/n100/r03/n100.r03.s100.tar.gz 35.7MiB
2021/07/08 16:49:50 scheduler task 6ab20197 (flow e04e53c6): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:50 scheduler task 6ab20197 (flow e04e53c6): retrieving diagnostic output (try 0): started
2021/07/08 16:49:50 scheduler task 6ab20197 (flow e04e53c6): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:50 scheduler task 6ab20197 (flow e04e53c6): retrieving result (try 0): started
2021/07/08 16:49:50 scheduler task 6ab20197 (flow e04e53c6): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:50 scheduler task 169fa905 (flow 9b3c4623): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:50 scheduler task 6ab20197 (flow e04e53c6): transferring output (try 0): started
2021/07/08 16:49:50 scheduler task 169fa905 (flow 9b3c4623): promoting objects (try 0): started
2021/07/08 16:49:50 scheduler task 169fa905 (flow 9b3c4623): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:50 scheduler task 169fa905 (flow 9b3c4623): retrieving diagnostic output (try 0): started
2021/07/08 16:49:50 scheduler task 169fa905 (flow 9b3c4623): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:50 scheduler task 169fa905 (flow 9b3c4623): retrieving result (try 0): started
2021/07/08 16:49:50 scheduler task 169fa905 (flow 9b3c4623): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:50 scheduler task 169fa905 (flow 9b3c4623): transferring output (try 0): started
2021/07/08 16:49:50 scheduler task 2a65eee9 (flow 67493555): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:6e0e8baaf05b286c5c5be706ac6c8140a53bce49ae6586bff279255f22c77459 -> s3://niema-test/n100/r03/n100.r03.s086.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:49:50  <-  n100.r03.s086.Main.cp_out_file 67493555 ok   extern 0s 35.7MiB
2021/07/08 16:49:51 scheduler task 6ab20197 (flow e04e53c6): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:51 scheduler task 6ab20197 (flow e04e53c6): unloading (try 0): started
2021/07/08 16:49:51 scheduler task 6ab20197 (flow e04e53c6): unloading list<val<.=d316135c 35.7MiB> 35.7MiB>
2021/07/08 16:49:51 scheduler task 6ab20197 (flow e04e53c6): unloading val<.=e240484c 35.4MiB>
2021/07/08 16:49:51 scheduler task 6ab20197 (flow e04e53c6): unloading val<.=b61eeb7c 35.4MiB>
2021/07/08 16:49:51 scheduler task b15f0465 (flow 86952886): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9d4e9ea66cf9ec6a3e785fb4f0e0fd019ed094317e5869bc58cf0c8aeab27013 -> s3://niema-test/n100/r03/n100.r03.s100.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:49:51  <-  n100.r03.s100.Main.cp_out_file 86952886 ok   extern 0s 35.7MiB
2021/07/08 16:49:51 scheduler task 6ab20197 (flow e04e53c6): unloaded val<.=e240484c 35.4MiB>
2021/07/08 16:49:51 scheduler task 6ab20197 (flow e04e53c6): unloaded list<val<.=d316135c 35.7MiB> 35.7MiB>
2021/07/08 16:49:51 scheduler task 6ab20197 (flow e04e53c6): unloaded val<.=b61eeb7c 35.4MiB>
2021/07/08 16:49:51 scheduler task 6ab20197 (flow e04e53c6): unloading (try 0): successful, next state: complete
2021/07/08 16:49:51  <-  n100.r03.s073.Main.out_file e04e53c6 ok     exec 5m0s 35.7MiB
2021/07/08 16:49:51 n100.r03.s073.Main.out_file e04e53c6 n100/r03/n100.r03.s073.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f5b033cde1e803845ea6a6a0036900cfb2fc6d848d59e27094ceba042b03415a
	sha256:e04e53c62879726c2cefa16b5a92b022d22d5ae6f7f1884028ffb3573d673512
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/6ab201975f136cfa914c8a825bcef2330a4bf83a33bd20e67e4677d0bb91fb16
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s073_output"
	    wget -O "n100.r03.s073_output/n100.r03.s073.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s073_output/n100.r03.s073.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s073_output/n100.r03.s073.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s073_output/n100.r03.s073.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s073_output/n100.r03.s073.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s073_output/n100.r03.s073.reference.fas" "n100.r03.s073_output/n100.r03.s073.fq1.fastq" "n100.r03.s073_output/n100.r03.s073.fq2.fastq" | samtools view -bS - > "n100.r03.s073_output/n100.r03.s073.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s073_output/n100.r03.s073.untrimmed.sorted.bam" "n100.r03.s073_output/n100.r03.s073.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s073_output/n100.r03.s073.untrimmed.sorted.bam" -b "n100.r03.s073_output/n100.r03.s073.primers.bed" -p "n100.r03.s073_output/n100.r03.s073.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s073_output/n100.r03.s073.trimmed.sorted.bam" "n100.r03.s073_output/n100.r03.s073.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s073_output/n100.r03.s073.reference.fas" "n100.r03.s073_output/n100.r03.s073.trimmed.sorted.bam" > "n100.r03.s073_output/n100.r03.s073.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s073_output/n100.r03.s073.reference.fas" --call-indels "n100.r03.s073_output/n100.r03.s073.trimmed.sorted.bam" > "n100.r03.s073_output/n100.r03.s073.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s073_output/n100.r03.s073.trimmed.sorted.bam" > "n100.r03.s073_output/n100.r03.s073.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s073_output/n100.r03.s073.depth.txt" "n100.r03.s073_output/n100.r03.s073.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s073_output/n100.r03.s073.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s073_output/n100.r03.s073.reference.fas" | bcftools consensus -m "n100.r03.s073_output/n100.r03.s073.low_depth.tsv" tmp.vcf.gz > "n100.r03.s073_output/n100.r03.s073.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s073_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d316135c22e7644ec601798c834839186d8370da448ac354ac920f3721f635e3 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.9MiB max=127.6MiB
	    disk mean=11.3MiB max=35.7MiB
	    tmp mean=522B max=2.1KiB
2021/07/08 16:49:51 scheduler task 11be132e (flow 6ae67d31): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s073.tar.gz resources {}
2021/07/08 16:49:51  ->  n100.r03.s073.Main.cp_out_file 6ae67d31 exec extern s3://niema-test/n100/r03/n100.r03.s073.tar.gz 35.7MiB
2021/07/08 16:49:51 scheduler task 169fa905 (flow 9b3c4623): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:51 scheduler task 169fa905 (flow 9b3c4623): unloading (try 0): started
2021/07/08 16:49:51 scheduler task 169fa905 (flow 9b3c4623): unloading list<val<.=235b5276 35.7MiB> 35.7MiB>
2021/07/08 16:49:51 scheduler task 169fa905 (flow 9b3c4623): unloading val<.=bc5ea7bd 35.4MiB>
2021/07/08 16:49:51 scheduler task 169fa905 (flow 9b3c4623): unloading val<.=72128fd4 35.4MiB>
2021/07/08 16:49:51 scheduler task 169fa905 (flow 9b3c4623): unloaded val<.=bc5ea7bd 35.4MiB>
2021/07/08 16:49:51 scheduler task 169fa905 (flow 9b3c4623): unloaded val<.=72128fd4 35.4MiB>
2021/07/08 16:49:51 scheduler task 169fa905 (flow 9b3c4623): unloaded list<val<.=235b5276 35.7MiB> 35.7MiB>
2021/07/08 16:49:51 scheduler task 169fa905 (flow 9b3c4623): unloading (try 0): successful, next state: complete
2021/07/08 16:49:51  <-  n100.r03.s062.Main.out_file 9b3c4623 ok     exec 5m0s 35.7MiB
2021/07/08 16:49:51 n100.r03.s062.Main.out_file 9b3c4623 n100/r03/n100.r03.s062.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e7e8cf890c6a3aa10fb2ba6698d9d47a1d8f8b55ba3c39896f6e52742a340268
	sha256:9b3c46235f9501b548873ab872f36677ac82637ab25929d950bb56d7d4577641
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/169fa9052f0364f9543f0cfc1954e6ef76e0d7b54affbbe1c50969ae4bcb01f5
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s062_output"
	    wget -O "n100.r03.s062_output/n100.r03.s062.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s062_output/n100.r03.s062.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s062_output/n100.r03.s062.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s062_output/n100.r03.s062.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s062_output/n100.r03.s062.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s062_output/n100.r03.s062.reference.fas" "n100.r03.s062_output/n100.r03.s062.fq1.fastq" "n100.r03.s062_output/n100.r03.s062.fq2.fastq" | samtools view -bS - > "n100.r03.s062_output/n100.r03.s062.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s062_output/n100.r03.s062.untrimmed.sorted.bam" "n100.r03.s062_output/n100.r03.s062.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s062_output/n100.r03.s062.untrimmed.sorted.bam" -b "n100.r03.s062_output/n100.r03.s062.primers.bed" -p "n100.r03.s062_output/n100.r03.s062.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s062_output/n100.r03.s062.trimmed.sorted.bam" "n100.r03.s062_output/n100.r03.s062.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s062_output/n100.r03.s062.reference.fas" "n100.r03.s062_output/n100.r03.s062.trimmed.sorted.bam" > "n100.r03.s062_output/n100.r03.s062.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s062_output/n100.r03.s062.reference.fas" --call-indels "n100.r03.s062_output/n100.r03.s062.trimmed.sorted.bam" > "n100.r03.s062_output/n100.r03.s062.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s062_output/n100.r03.s062.trimmed.sorted.bam" > "n100.r03.s062_output/n100.r03.s062.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s062_output/n100.r03.s062.depth.txt" "n100.r03.s062_output/n100.r03.s062.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s062_output/n100.r03.s062.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s062_output/n100.r03.s062.reference.fas" | bcftools consensus -m "n100.r03.s062_output/n100.r03.s062.low_depth.tsv" tmp.vcf.gz > "n100.r03.s062_output/n100.r03.s062.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s062_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:235b5276211f2635c3037af9ddab890f55fdb3b9432284ef53444240881a992b 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.7MiB max=125.5MiB
	    disk mean=9.4MiB max=35.7MiB
	    tmp mean=525B max=2.1KiB
2021/07/08 16:49:51 scheduler task 559f8585 (flow 1708ec70): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s062.tar.gz resources {}
2021/07/08 16:49:51  ->  n100.r03.s062.Main.cp_out_file 1708ec70 exec extern s3://niema-test/n100/r03/n100.r03.s062.tar.gz 35.7MiB
2021/07/08 16:49:51 scheduler task 11be132e (flow 6ae67d31): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d316135c22e7644ec601798c834839186d8370da448ac354ac920f3721f635e3 -> s3://niema-test/n100/r03/n100.r03.s073.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:49:51  <-  n100.r03.s073.Main.cp_out_file 6ae67d31 ok   extern 0s 35.7MiB
2021/07/08 16:49:52 scheduler task 559f8585 (flow 1708ec70): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:235b5276211f2635c3037af9ddab890f55fdb3b9432284ef53444240881a992b -> s3://niema-test/n100/r03/n100.r03.s062.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:49:52  <-  n100.r03.s062.Main.cp_out_file 1708ec70 ok   extern 0s 35.7MiB
2021/07/08 16:49:52 scheduler task c3a30d01 (flow d81cbbca): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:52 scheduler task c3a30d01 (flow d81cbbca): promoting objects (try 0): started
2021/07/08 16:49:52 scheduler task c3a30d01 (flow d81cbbca): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:52 scheduler task c3a30d01 (flow d81cbbca): retrieving diagnostic output (try 0): started
2021/07/08 16:49:52 scheduler task c3a30d01 (flow d81cbbca): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:52 scheduler task c3a30d01 (flow d81cbbca): retrieving result (try 0): started
2021/07/08 16:49:52 scheduler task c3a30d01 (flow d81cbbca): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:52 scheduler task c3a30d01 (flow d81cbbca): transferring output (try 0): started
2021/07/08 16:49:53 scheduler task 5a370c3c (flow f85ec8d5): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:53 scheduler task 5a370c3c (flow f85ec8d5): promoting objects (try 0): started
2021/07/08 16:49:53 scheduler task 21089e1a (flow c279c2df): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:53 scheduler task 21089e1a (flow c279c2df): promoting objects (try 0): started
2021/07/08 16:49:53 scheduler task 5a370c3c (flow f85ec8d5): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:53 scheduler task 5a370c3c (flow f85ec8d5): retrieving diagnostic output (try 0): started
2021/07/08 16:49:53 scheduler task 21089e1a (flow c279c2df): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:53 scheduler task 21089e1a (flow c279c2df): retrieving diagnostic output (try 0): started
2021/07/08 16:49:53 scheduler task 5a370c3c (flow f85ec8d5): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:53 scheduler task 77a22266 (flow ad2de73d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:53 scheduler task 5a370c3c (flow f85ec8d5): retrieving result (try 0): started
2021/07/08 16:49:53 scheduler task 77a22266 (flow ad2de73d): promoting objects (try 0): started
2021/07/08 16:49:53 scheduler task 21089e1a (flow c279c2df): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:53 scheduler task c3a30d01 (flow d81cbbca): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:53 scheduler task 21089e1a (flow c279c2df): retrieving result (try 0): started
2021/07/08 16:49:53 scheduler task c3a30d01 (flow d81cbbca): unloading (try 0): started
2021/07/08 16:49:53 scheduler task c3a30d01 (flow d81cbbca): unloading list<val<.=55178f3b 35.8MiB> 35.8MiB>
2021/07/08 16:49:53 scheduler task c3a30d01 (flow d81cbbca): unloading val<.=236c102f 35.4MiB>
2021/07/08 16:49:53 scheduler task c3a30d01 (flow d81cbbca): unloading val<.=01b07836 35.4MiB>
2021/07/08 16:49:53 scheduler task 5a370c3c (flow f85ec8d5): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:53 scheduler task 5a370c3c (flow f85ec8d5): transferring output (try 0): started
2021/07/08 16:49:53 scheduler task 77a22266 (flow ad2de73d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:53 scheduler task 60be6b51 (flow a0f712d0): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:53 scheduler task 77a22266 (flow ad2de73d): retrieving diagnostic output (try 0): started
2021/07/08 16:49:53 scheduler task 60be6b51 (flow a0f712d0): promoting objects (try 0): started
2021/07/08 16:49:53 scheduler task 21089e1a (flow c279c2df): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:53 scheduler task c3a30d01 (flow d81cbbca): unloaded list<val<.=55178f3b 35.8MiB> 35.8MiB>
2021/07/08 16:49:53 scheduler task 21089e1a (flow c279c2df): transferring output (try 0): started
2021/07/08 16:49:53 scheduler task c3a30d01 (flow d81cbbca): unloaded val<.=01b07836 35.4MiB>
2021/07/08 16:49:53 scheduler task c3a30d01 (flow d81cbbca): unloaded val<.=236c102f 35.4MiB>
2021/07/08 16:49:53 scheduler task c3a30d01 (flow d81cbbca): unloading (try 0): successful, next state: complete
2021/07/08 16:49:53  <-  n100.r03.s003.Main.out_file d81cbbca ok     exec 5m2s 35.8MiB
2021/07/08 16:49:53 n100.r03.s003.Main.out_file d81cbbca n100/r03/n100.r03.s003.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:bc30612ddb32570d06c65abff81a1631f0799252531836c296806ef6076e6c63
	sha256:d81cbbcaa342b291f230848053ad181e0b9aad6519f4bce7285209932ebb91e7
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c3a30d016f100d6828cdf523a1536c9c2b5f6a71d41c2dec765d1507d809067f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s003_output"
	    wget -O "n100.r03.s003_output/n100.r03.s003.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s003_output/n100.r03.s003.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s003_output/n100.r03.s003.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s003_output/n100.r03.s003.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s003_output/n100.r03.s003.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s003_output/n100.r03.s003.reference.fas" "n100.r03.s003_output/n100.r03.s003.fq1.fastq" "n100.r03.s003_output/n100.r03.s003.fq2.fastq" | samtools view -bS - > "n100.r03.s003_output/n100.r03.s003.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s003_output/n100.r03.s003.untrimmed.sorted.bam" "n100.r03.s003_output/n100.r03.s003.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s003_output/n100.r03.s003.untrimmed.sorted.bam" -b "n100.r03.s003_output/n100.r03.s003.primers.bed" -p "n100.r03.s003_output/n100.r03.s003.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s003_output/n100.r03.s003.trimmed.sorted.bam" "n100.r03.s003_output/n100.r03.s003.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s003_output/n100.r03.s003.reference.fas" "n100.r03.s003_output/n100.r03.s003.trimmed.sorted.bam" > "n100.r03.s003_output/n100.r03.s003.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s003_output/n100.r03.s003.reference.fas" --call-indels "n100.r03.s003_output/n100.r03.s003.trimmed.sorted.bam" > "n100.r03.s003_output/n100.r03.s003.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s003_output/n100.r03.s003.trimmed.sorted.bam" > "n100.r03.s003_output/n100.r03.s003.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s003_output/n100.r03.s003.depth.txt" "n100.r03.s003_output/n100.r03.s003.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s003_output/n100.r03.s003.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s003_output/n100.r03.s003.reference.fas" | bcftools consensus -m "n100.r03.s003_output/n100.r03.s003.low_depth.tsv" tmp.vcf.gz > "n100.r03.s003_output/n100.r03.s003.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s003_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:55178f3b2b6775c0f18ca849859647164a9cab378471dc8fb8c20ede2e04b146 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.4MiB max=128.8MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=521B max=2.0KiB
2021/07/08 16:49:53 scheduler task b4869f5b (flow c7171f40): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s003.tar.gz resources {}
2021/07/08 16:49:53  ->  n100.r03.s003.Main.cp_out_file c7171f40 exec extern s3://niema-test/n100/r03/n100.r03.s003.tar.gz 35.8MiB
2021/07/08 16:49:53 scheduler task 60be6b51 (flow a0f712d0): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:53 scheduler task 77a22266 (flow ad2de73d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:53 scheduler task 60be6b51 (flow a0f712d0): retrieving diagnostic output (try 0): started
2021/07/08 16:49:53 scheduler task 77a22266 (flow ad2de73d): retrieving result (try 0): started
2021/07/08 16:49:53 scheduler task 60be6b51 (flow a0f712d0): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:53 scheduler task 77a22266 (flow ad2de73d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:53 scheduler task 60be6b51 (flow a0f712d0): retrieving result (try 0): started
2021/07/08 16:49:53 scheduler task 77a22266 (flow ad2de73d): transferring output (try 0): started
2021/07/08 16:49:53 scheduler task 60be6b51 (flow a0f712d0): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:53 scheduler task 60be6b51 (flow a0f712d0): transferring output (try 0): started
2021/07/08 16:49:54 scheduler task c63135f5 (flow b89df6be): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:54 scheduler task c63135f5 (flow b89df6be): promoting objects (try 0): started
2021/07/08 16:49:54 scheduler task 5a370c3c (flow f85ec8d5): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:54 scheduler task 21089e1a (flow c279c2df): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:54 scheduler task 5a370c3c (flow f85ec8d5): unloading (try 0): started
2021/07/08 16:49:54 scheduler task 5a370c3c (flow f85ec8d5): unloading list<val<.=90bec765 35.8MiB> 35.8MiB>
2021/07/08 16:49:54 scheduler task 5a370c3c (flow f85ec8d5): unloading val<.=7c5b9480 35.4MiB>
2021/07/08 16:49:54 scheduler task 5a370c3c (flow f85ec8d5): unloading val<.=99c75e10 35.4MiB>
2021/07/08 16:49:54 scheduler task 21089e1a (flow c279c2df): unloading (try 0): started
2021/07/08 16:49:54 scheduler task 21089e1a (flow c279c2df): unloading list<val<.=0c0d99b6 35.8MiB> 35.8MiB>
2021/07/08 16:49:54 scheduler task 21089e1a (flow c279c2df): unloading val<.=a6ad8432 35.4MiB>
2021/07/08 16:49:54 scheduler task 21089e1a (flow c279c2df): unloading val<.=a892305f 35.4MiB>
2021/07/08 16:49:54 scheduler task c63135f5 (flow b89df6be): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:54 scheduler task c63135f5 (flow b89df6be): retrieving diagnostic output (try 0): started
2021/07/08 16:49:54 scheduler task 9fef0d8c (flow f673c693): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:54 scheduler task 5a370c3c (flow f85ec8d5): unloaded val<.=99c75e10 35.4MiB>
2021/07/08 16:49:54 scheduler task 5a370c3c (flow f85ec8d5): unloaded val<.=7c5b9480 35.4MiB>
2021/07/08 16:49:54 scheduler task 5a370c3c (flow f85ec8d5): unloaded list<val<.=90bec765 35.8MiB> 35.8MiB>
2021/07/08 16:49:54 scheduler task 5a370c3c (flow f85ec8d5): unloading (try 0): successful, next state: complete
2021/07/08 16:49:54 scheduler task 77a22266 (flow ad2de73d): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:54 scheduler task 9fef0d8c (flow f673c693): promoting objects (try 0): started
2021/07/08 16:49:54 scheduler task 21089e1a (flow c279c2df): unloaded list<val<.=0c0d99b6 35.8MiB> 35.8MiB>
2021/07/08 16:49:54 scheduler task 21089e1a (flow c279c2df): unloaded val<.=a6ad8432 35.4MiB>
2021/07/08 16:49:54 scheduler task 21089e1a (flow c279c2df): unloaded val<.=a892305f 35.4MiB>
2021/07/08 16:49:54 scheduler task 21089e1a (flow c279c2df): unloading (try 0): successful, next state: complete
2021/07/08 16:49:54  <-  n100.r03.s006.Main.out_file f85ec8d5 ok     exec 5m3s 35.8MiB
2021/07/08 16:49:54 n100.r03.s006.Main.out_file f85ec8d5 n100/r03/n100.r03.s006.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f578f4294543a79c9638cfaae7878403bece34c19b2551e3b21b9ba8e66acc7e
	sha256:f85ec8d593eda5a2d5972ed6fb217f75ff03a62728513bf0bfb23d5953a4abc0
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5a370c3c297f3ddb75afd39412f61b05793f9f050e3dba2dabe317889dd173c2
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s006_output"
	    wget -O "n100.r03.s006_output/n100.r03.s006.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s006_output/n100.r03.s006.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s006_output/n100.r03.s006.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s006_output/n100.r03.s006.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s006_output/n100.r03.s006.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s006_output/n100.r03.s006.reference.fas" "n100.r03.s006_output/n100.r03.s006.fq1.fastq" "n100.r03.s006_output/n100.r03.s006.fq2.fastq" | samtools view -bS - > "n100.r03.s006_output/n100.r03.s006.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s006_output/n100.r03.s006.untrimmed.sorted.bam" "n100.r03.s006_output/n100.r03.s006.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s006_output/n100.r03.s006.untrimmed.sorted.bam" -b "n100.r03.s006_output/n100.r03.s006.primers.bed" -p "n100.r03.s006_output/n100.r03.s006.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s006_output/n100.r03.s006.trimmed.sorted.bam" "n100.r03.s006_output/n100.r03.s006.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s006_output/n100.r03.s006.reference.fas" "n100.r03.s006_output/n100.r03.s006.trimmed.sorted.bam" > "n100.r03.s006_output/n100.r03.s006.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s006_output/n100.r03.s006.reference.fas" --call-indels "n100.r03.s006_output/n100.r03.s006.trimmed.sorted.bam" > "n100.r03.s006_output/n100.r03.s006.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s006_output/n100.r03.s006.trimmed.sorted.bam" > "n100.r03.s006_output/n100.r03.s006.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s006_output/n100.r03.s006.depth.txt" "n100.r03.s006_output/n100.r03.s006.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s006_output/n100.r03.s006.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s006_output/n100.r03.s006.reference.fas" | bcftools consensus -m "n100.r03.s006_output/n100.r03.s006.low_depth.tsv" tmp.vcf.gz > "n100.r03.s006_output/n100.r03.s006.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s006_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:90bec76558e4226e5c144b5c8b455ce4fbd0212670c5d60ac05931467a910baf 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.8MiB max=131.2MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=701B max=2.1KiB
2021/07/08 16:49:54 scheduler task e815d9a1 (flow 14183c70): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s006.tar.gz resources {}
2021/07/08 16:49:54  ->  n100.r03.s006.Main.cp_out_file 14183c70 exec extern s3://niema-test/n100/r03/n100.r03.s006.tar.gz 35.8MiB
2021/07/08 16:49:54 scheduler task 77a22266 (flow ad2de73d): unloading (try 0): started
2021/07/08 16:49:54 scheduler task 77a22266 (flow ad2de73d): unloading list<val<.=b6eae931 35.8MiB> 35.8MiB>
2021/07/08 16:49:54 scheduler task 77a22266 (flow ad2de73d): unloading val<.=efde44c5 35.4MiB>
2021/07/08 16:49:54 scheduler task 77a22266 (flow ad2de73d): unloading val<.=123838e0 35.4MiB>
2021/07/08 16:49:54  <-  n100.r03.s084.Main.out_file c279c2df ok     exec 5m3s 35.8MiB
2021/07/08 16:49:54 n100.r03.s084.Main.out_file c279c2df n100/r03/n100.r03.s084.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8a3714689c367da354416e5d261e2d38acb00174aa4b9a6e3921f45cf582f232
	sha256:c279c2dfd93cd2f1d7d73c1b4ba05397b45ce8891b2a1a5b6ba11170a85c58ce
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/21089e1a950d4411d234374c404b17423d909f856839899b250691cc79121efb
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s084_output"
	    wget -O "n100.r03.s084_output/n100.r03.s084.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s084_output/n100.r03.s084.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s084_output/n100.r03.s084.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s084_output/n100.r03.s084.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s084_output/n100.r03.s084.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s084_output/n100.r03.s084.reference.fas" "n100.r03.s084_output/n100.r03.s084.fq1.fastq" "n100.r03.s084_output/n100.r03.s084.fq2.fastq" | samtools view -bS - > "n100.r03.s084_output/n100.r03.s084.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s084_output/n100.r03.s084.untrimmed.sorted.bam" "n100.r03.s084_output/n100.r03.s084.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s084_output/n100.r03.s084.untrimmed.sorted.bam" -b "n100.r03.s084_output/n100.r03.s084.primers.bed" -p "n100.r03.s084_output/n100.r03.s084.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s084_output/n100.r03.s084.trimmed.sorted.bam" "n100.r03.s084_output/n100.r03.s084.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s084_output/n100.r03.s084.reference.fas" "n100.r03.s084_output/n100.r03.s084.trimmed.sorted.bam" > "n100.r03.s084_output/n100.r03.s084.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s084_output/n100.r03.s084.reference.fas" --call-indels "n100.r03.s084_output/n100.r03.s084.trimmed.sorted.bam" > "n100.r03.s084_output/n100.r03.s084.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s084_output/n100.r03.s084.trimmed.sorted.bam" > "n100.r03.s084_output/n100.r03.s084.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s084_output/n100.r03.s084.depth.txt" "n100.r03.s084_output/n100.r03.s084.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s084_output/n100.r03.s084.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s084_output/n100.r03.s084.reference.fas" | bcftools consensus -m "n100.r03.s084_output/n100.r03.s084.low_depth.tsv" tmp.vcf.gz > "n100.r03.s084_output/n100.r03.s084.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s084_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:0c0d99b6f8326c28141949731a9da54e63ae75c0f588bf8fc50a315e4265c9a9 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.8MiB max=131.1MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 16:49:54 scheduler task 9679d27c (flow 7684a534): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s084.tar.gz resources {}
2021/07/08 16:49:54  ->  n100.r03.s084.Main.cp_out_file 7684a534 exec extern s3://niema-test/n100/r03/n100.r03.s084.tar.gz 35.8MiB
2021/07/08 16:49:54 scheduler task c63135f5 (flow b89df6be): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:54 scheduler task c63135f5 (flow b89df6be): retrieving result (try 0): started
2021/07/08 16:49:54 scheduler task 9fef0d8c (flow f673c693): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:54 scheduler task 77a22266 (flow ad2de73d): unloaded list<val<.=b6eae931 35.8MiB> 35.8MiB>
2021/07/08 16:49:54 scheduler task 9fef0d8c (flow f673c693): retrieving diagnostic output (try 0): started
2021/07/08 16:49:54 scheduler task 77a22266 (flow ad2de73d): unloaded val<.=efde44c5 35.4MiB>
2021/07/08 16:49:54 scheduler task 60be6b51 (flow a0f712d0): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:54 scheduler task 77a22266 (flow ad2de73d): unloaded val<.=123838e0 35.4MiB>
2021/07/08 16:49:54 scheduler task 77a22266 (flow ad2de73d): unloading (try 0): successful, next state: complete
2021/07/08 16:49:54 scheduler task 60be6b51 (flow a0f712d0): unloading (try 0): started
2021/07/08 16:49:54 scheduler task 60be6b51 (flow a0f712d0): unloading list<val<.=b8d517b2 35.7MiB> 35.7MiB>
2021/07/08 16:49:54 scheduler task 60be6b51 (flow a0f712d0): unloading val<.=4fd9a4f7 35.4MiB>
2021/07/08 16:49:54 scheduler task 60be6b51 (flow a0f712d0): unloading val<.=d23b7389 35.4MiB>
2021/07/08 16:49:54 scheduler task c63135f5 (flow b89df6be): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:54  <-  n100.r03.s068.Main.out_file ad2de73d ok     exec 5m3s 35.8MiB
2021/07/08 16:49:54 n100.r03.s068.Main.out_file ad2de73d n100/r03/n100.r03.s068.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3cd64c32a4a5725fa60319f73770af2e4e7fe6166d5904d3c6c5c64216885ebc
	sha256:ad2de73d71c7ec1805f6d31c98aa54031830763408eafe979375e9ed3c527f25
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/77a2226671dddfb2e3cc98279bd6ce2cb4a65befb4bd792f01ddff1c4b9b26cd
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s068_output"
	    wget -O "n100.r03.s068_output/n100.r03.s068.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s068_output/n100.r03.s068.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s068_output/n100.r03.s068.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s068_output/n100.r03.s068.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s068_output/n100.r03.s068.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s068_output/n100.r03.s068.reference.fas" "n100.r03.s068_output/n100.r03.s068.fq1.fastq" "n100.r03.s068_output/n100.r03.s068.fq2.fastq" | samtools view -bS - > "n100.r03.s068_output/n100.r03.s068.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s068_output/n100.r03.s068.untrimmed.sorted.bam" "n100.r03.s068_output/n100.r03.s068.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s068_output/n100.r03.s068.untrimmed.sorted.bam" -b "n100.r03.s068_output/n100.r03.s068.primers.bed" -p "n100.r03.s068_output/n100.r03.s068.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s068_output/n100.r03.s068.trimmed.sorted.bam" "n100.r03.s068_output/n100.r03.s068.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s068_output/n100.r03.s068.reference.fas" "n100.r03.s068_output/n100.r03.s068.trimmed.sorted.bam" > "n100.r03.s068_output/n100.r03.s068.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s068_output/n100.r03.s068.reference.fas" --call-indels "n100.r03.s068_output/n100.r03.s068.trimmed.sorted.bam" > "n100.r03.s068_output/n100.r03.s068.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s068_output/n100.r03.s068.trimmed.sorted.bam" > "n100.r03.s068_output/n100.r03.s068.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s068_output/n100.r03.s068.depth.txt" "n100.r03.s068_output/n100.r03.s068.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s068_output/n100.r03.s068.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s068_output/n100.r03.s068.reference.fas" | bcftools consensus -m "n100.r03.s068_output/n100.r03.s068.low_depth.tsv" tmp.vcf.gz > "n100.r03.s068_output/n100.r03.s068.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s068_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:b6eae93105b721b24f3e12f54ec93fd225e2cdcd8371c2c03bec2b79e4435dee 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.8MiB max=129.1MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 16:49:54 scheduler task e3ec5d51 (flow e69cf101): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s068.tar.gz resources {}
2021/07/08 16:49:54  ->  n100.r03.s068.Main.cp_out_file e69cf101 exec extern s3://niema-test/n100/r03/n100.r03.s068.tar.gz 35.8MiB
2021/07/08 16:49:54 scheduler task c63135f5 (flow b89df6be): transferring output (try 0): started
2021/07/08 16:49:54 scheduler task b4869f5b (flow c7171f40): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:55178f3b2b6775c0f18ca849859647164a9cab378471dc8fb8c20ede2e04b146 -> s3://niema-test/n100/r03/n100.r03.s003.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:49:54  <-  n100.r03.s003.Main.cp_out_file c7171f40 ok   extern 0s 35.8MiB
2021/07/08 16:49:54 scheduler task 9fef0d8c (flow f673c693): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:54 scheduler task 9fef0d8c (flow f673c693): retrieving result (try 0): started
2021/07/08 16:49:54 scheduler task 60be6b51 (flow a0f712d0): unloaded val<.=4fd9a4f7 35.4MiB>
2021/07/08 16:49:54 scheduler task 60be6b51 (flow a0f712d0): unloaded val<.=d23b7389 35.4MiB>
2021/07/08 16:49:54 scheduler task 60be6b51 (flow a0f712d0): unloaded list<val<.=b8d517b2 35.7MiB> 35.7MiB>
2021/07/08 16:49:54 scheduler task 60be6b51 (flow a0f712d0): unloading (try 0): successful, next state: complete
2021/07/08 16:49:54  <-  n100.r03.s048.Main.out_file a0f712d0 ok     exec 4m56s 35.7MiB
2021/07/08 16:49:54 n100.r03.s048.Main.out_file a0f712d0 n100/r03/n100.r03.s048.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:70dbee780a2166e2db5080eb3a6b38f36bdf860c7a037d57ba62b8f8a16a2fb9
	sha256:a0f712d0bad8c2dd608f92971435c2b999242080cf82a8c896e41cd87a0b0123
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/60be6b51b84b425b1fdc59c0a1d72cb11af21fd57182db5eb2d4b4ec84760259
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s048_output"
	    wget -O "n100.r03.s048_output/n100.r03.s048.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s048_output/n100.r03.s048.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s048_output/n100.r03.s048.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s048_output/n100.r03.s048.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s048_output/n100.r03.s048.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s048_output/n100.r03.s048.reference.fas" "n100.r03.s048_output/n100.r03.s048.fq1.fastq" "n100.r03.s048_output/n100.r03.s048.fq2.fastq" | samtools view -bS - > "n100.r03.s048_output/n100.r03.s048.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s048_output/n100.r03.s048.untrimmed.sorted.bam" "n100.r03.s048_output/n100.r03.s048.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s048_output/n100.r03.s048.untrimmed.sorted.bam" -b "n100.r03.s048_output/n100.r03.s048.primers.bed" -p "n100.r03.s048_output/n100.r03.s048.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s048_output/n100.r03.s048.trimmed.sorted.bam" "n100.r03.s048_output/n100.r03.s048.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s048_output/n100.r03.s048.reference.fas" "n100.r03.s048_output/n100.r03.s048.trimmed.sorted.bam" > "n100.r03.s048_output/n100.r03.s048.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s048_output/n100.r03.s048.reference.fas" --call-indels "n100.r03.s048_output/n100.r03.s048.trimmed.sorted.bam" > "n100.r03.s048_output/n100.r03.s048.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s048_output/n100.r03.s048.trimmed.sorted.bam" > "n100.r03.s048_output/n100.r03.s048.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s048_output/n100.r03.s048.depth.txt" "n100.r03.s048_output/n100.r03.s048.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s048_output/n100.r03.s048.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s048_output/n100.r03.s048.reference.fas" | bcftools consensus -m "n100.r03.s048_output/n100.r03.s048.low_depth.tsv" tmp.vcf.gz > "n100.r03.s048_output/n100.r03.s048.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s048_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:b8d517b26de2b26c68ace92f6a33b5b3e12aabbebf4934ee9dd2b538e9dfeb97 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=19.8MiB max=126.7MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=626B max=2.0KiB
2021/07/08 16:49:54 scheduler task e61a9471 (flow 904a7407): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s048.tar.gz resources {}
2021/07/08 16:49:54  ->  n100.r03.s048.Main.cp_out_file 904a7407 exec extern s3://niema-test/n100/r03/n100.r03.s048.tar.gz 35.7MiB
2021/07/08 16:49:54 scheduler task 9fef0d8c (flow f673c693): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:54 scheduler task 9fef0d8c (flow f673c693): transferring output (try 0): started
2021/07/08 16:49:54 scheduler task c63135f5 (flow b89df6be): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:54 scheduler task 9679d27c (flow 7684a534): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:0c0d99b6f8326c28141949731a9da54e63ae75c0f588bf8fc50a315e4265c9a9 -> s3://niema-test/n100/r03/n100.r03.s084.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:49:54  <-  n100.r03.s084.Main.cp_out_file 7684a534 ok   extern 0s 35.8MiB
2021/07/08 16:49:54 scheduler task c63135f5 (flow b89df6be): unloading (try 0): started
2021/07/08 16:49:54 scheduler task c63135f5 (flow b89df6be): unloading list<val<.=05baa883 35.8MiB> 35.8MiB>
2021/07/08 16:49:54 scheduler task c63135f5 (flow b89df6be): unloading val<.=a26695dc 35.4MiB>
2021/07/08 16:49:54 scheduler task c63135f5 (flow b89df6be): unloading val<.=190f3a68 35.4MiB>
2021/07/08 16:49:54 scheduler task c63135f5 (flow b89df6be): unloaded val<.=a26695dc 35.4MiB>
2021/07/08 16:49:54 scheduler task c63135f5 (flow b89df6be): unloaded list<val<.=05baa883 35.8MiB> 35.8MiB>
2021/07/08 16:49:54 scheduler task c63135f5 (flow b89df6be): unloaded val<.=190f3a68 35.4MiB>
2021/07/08 16:49:54 scheduler task c63135f5 (flow b89df6be): unloading (try 0): successful, next state: complete
2021/07/08 16:49:54  <-  n100.r03.s090.Main.out_file b89df6be ok     exec 5m4s 35.8MiB
2021/07/08 16:49:54 n100.r03.s090.Main.out_file b89df6be n100/r03/n100.r03.s090.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:721e3662c35859ce696ef89d8ae43a200f925b2794f9ec635231640686b95034
	sha256:b89df6bea53bf4d544e6ad1cd37045bfb90934326cb8d06b4e973d14e88f4663
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c63135f5bd76bd3acdcf0662e20229e65d9193e6f1ed328da0f8f338da8d53aa
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s090_output"
	    wget -O "n100.r03.s090_output/n100.r03.s090.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s090_output/n100.r03.s090.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s090_output/n100.r03.s090.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s090_output/n100.r03.s090.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s090_output/n100.r03.s090.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s090_output/n100.r03.s090.reference.fas" "n100.r03.s090_output/n100.r03.s090.fq1.fastq" "n100.r03.s090_output/n100.r03.s090.fq2.fastq" | samtools view -bS - > "n100.r03.s090_output/n100.r03.s090.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s090_output/n100.r03.s090.untrimmed.sorted.bam" "n100.r03.s090_output/n100.r03.s090.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s090_output/n100.r03.s090.untrimmed.sorted.bam" -b "n100.r03.s090_output/n100.r03.s090.primers.bed" -p "n100.r03.s090_output/n100.r03.s090.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s090_output/n100.r03.s090.trimmed.sorted.bam" "n100.r03.s090_output/n100.r03.s090.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s090_output/n100.r03.s090.reference.fas" "n100.r03.s090_output/n100.r03.s090.trimmed.sorted.bam" > "n100.r03.s090_output/n100.r03.s090.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s090_output/n100.r03.s090.reference.fas" --call-indels "n100.r03.s090_output/n100.r03.s090.trimmed.sorted.bam" > "n100.r03.s090_output/n100.r03.s090.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s090_output/n100.r03.s090.trimmed.sorted.bam" > "n100.r03.s090_output/n100.r03.s090.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s090_output/n100.r03.s090.depth.txt" "n100.r03.s090_output/n100.r03.s090.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s090_output/n100.r03.s090.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s090_output/n100.r03.s090.reference.fas" | bcftools consensus -m "n100.r03.s090_output/n100.r03.s090.low_depth.tsv" tmp.vcf.gz > "n100.r03.s090_output/n100.r03.s090.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s090_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:05baa883a525b67223318bb61d1220e4f7e81539cfb81b589b402d673e5e8253 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.6MiB max=129.9MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=701B max=2.1KiB
2021/07/08 16:49:54 scheduler task 87d54380 (flow ac807d57): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s090.tar.gz resources {}
2021/07/08 16:49:54  ->  n100.r03.s090.Main.cp_out_file ac807d57 exec extern s3://niema-test/n100/r03/n100.r03.s090.tar.gz 35.8MiB
2021/07/08 16:49:55 scheduler task e815d9a1 (flow 14183c70): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:90bec76558e4226e5c144b5c8b455ce4fbd0212670c5d60ac05931467a910baf -> s3://niema-test/n100/r03/n100.r03.s006.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:49:55  <-  n100.r03.s006.Main.cp_out_file 14183c70 ok   extern 0s 35.8MiB
2021/07/08 16:49:55 scheduler task 9fef0d8c (flow f673c693): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:55 scheduler task 9fef0d8c (flow f673c693): unloading (try 0): started
2021/07/08 16:49:55 scheduler task 9fef0d8c (flow f673c693): unloading list<val<.=2c843849 35.8MiB> 35.8MiB>
2021/07/08 16:49:55 scheduler task 9fef0d8c (flow f673c693): unloading val<.=de355e5c 35.4MiB>
2021/07/08 16:49:55 scheduler task 9fef0d8c (flow f673c693): unloading val<.=c32c7cab 35.4MiB>
2021/07/08 16:49:55 scheduler task 9fef0d8c (flow f673c693): unloaded val<.=c32c7cab 35.4MiB>
2021/07/08 16:49:55 scheduler task 9fef0d8c (flow f673c693): unloaded list<val<.=2c843849 35.8MiB> 35.8MiB>
2021/07/08 16:49:55 scheduler task 9fef0d8c (flow f673c693): unloaded val<.=de355e5c 35.4MiB>
2021/07/08 16:49:55 scheduler task 9fef0d8c (flow f673c693): unloading (try 0): successful, next state: complete
2021/07/08 16:49:55  <-  n100.r03.s091.Main.out_file f673c693 ok     exec 5m3s 35.8MiB
2021/07/08 16:49:55 n100.r03.s091.Main.out_file f673c693 n100/r03/n100.r03.s091.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:cebbc5478268d80bf17550116de75359ad4d42becc1e13e03071c8fc7e841d57
	sha256:f673c693108b7654e4ad7c02af0e0b4d896b545927e7c696f146d412e05ed6a3
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/9fef0d8ca4892d4781cf792e265180c1c8dcfacc552097f471fe65363ec5e708
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s091_output"
	    wget -O "n100.r03.s091_output/n100.r03.s091.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s091_output/n100.r03.s091.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s091_output/n100.r03.s091.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s091_output/n100.r03.s091.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s091_output/n100.r03.s091.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s091_output/n100.r03.s091.reference.fas" "n100.r03.s091_output/n100.r03.s091.fq1.fastq" "n100.r03.s091_output/n100.r03.s091.fq2.fastq" | samtools view -bS - > "n100.r03.s091_output/n100.r03.s091.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s091_output/n100.r03.s091.untrimmed.sorted.bam" "n100.r03.s091_output/n100.r03.s091.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s091_output/n100.r03.s091.untrimmed.sorted.bam" -b "n100.r03.s091_output/n100.r03.s091.primers.bed" -p "n100.r03.s091_output/n100.r03.s091.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s091_output/n100.r03.s091.trimmed.sorted.bam" "n100.r03.s091_output/n100.r03.s091.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s091_output/n100.r03.s091.reference.fas" "n100.r03.s091_output/n100.r03.s091.trimmed.sorted.bam" > "n100.r03.s091_output/n100.r03.s091.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s091_output/n100.r03.s091.reference.fas" --call-indels "n100.r03.s091_output/n100.r03.s091.trimmed.sorted.bam" > "n100.r03.s091_output/n100.r03.s091.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s091_output/n100.r03.s091.trimmed.sorted.bam" > "n100.r03.s091_output/n100.r03.s091.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s091_output/n100.r03.s091.depth.txt" "n100.r03.s091_output/n100.r03.s091.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s091_output/n100.r03.s091.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s091_output/n100.r03.s091.reference.fas" | bcftools consensus -m "n100.r03.s091_output/n100.r03.s091.low_depth.tsv" tmp.vcf.gz > "n100.r03.s091_output/n100.r03.s091.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s091_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:2c84384927424e20cf44a82dbe6028613c3c50f522ea6d9f923be8bf2e9d71fa 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.4MiB max=127.2MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=694B max=2.0KiB
2021/07/08 16:49:55 scheduler task 7bce4211 (flow eddc7ac6): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s091.tar.gz resources {}
2021/07/08 16:49:55  ->  n100.r03.s091.Main.cp_out_file eddc7ac6 exec extern s3://niema-test/n100/r03/n100.r03.s091.tar.gz 35.8MiB
2021/07/08 16:49:55 scheduler task e61a9471 (flow 904a7407): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:b8d517b26de2b26c68ace92f6a33b5b3e12aabbebf4934ee9dd2b538e9dfeb97 -> s3://niema-test/n100/r03/n100.r03.s048.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:49:55  <-  n100.r03.s048.Main.cp_out_file 904a7407 ok   extern 0s 35.7MiB
2021/07/08 16:49:55 scheduler task f165135f (flow b485700d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:55 scheduler task f165135f (flow b485700d): promoting objects (try 0): started
2021/07/08 16:49:55 scheduler task f165135f (flow b485700d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:55 scheduler task f165135f (flow b485700d): retrieving diagnostic output (try 0): started
2021/07/08 16:49:55 scheduler task 87d54380 (flow ac807d57): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:05baa883a525b67223318bb61d1220e4f7e81539cfb81b589b402d673e5e8253 -> s3://niema-test/n100/r03/n100.r03.s090.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:49:55  <-  n100.r03.s090.Main.cp_out_file ac807d57 ok   extern 0s 35.8MiB
2021/07/08 16:49:55 scheduler task f165135f (flow b485700d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:55 scheduler task f165135f (flow b485700d): retrieving result (try 0): started
2021/07/08 16:49:55 scheduler task f165135f (flow b485700d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:55 scheduler task f165135f (flow b485700d): transferring output (try 0): started
2021/07/08 16:49:55 scheduler task 7bce4211 (flow eddc7ac6): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:2c84384927424e20cf44a82dbe6028613c3c50f522ea6d9f923be8bf2e9d71fa -> s3://niema-test/n100/r03/n100.r03.s091.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:49:55  <-  n100.r03.s091.Main.cp_out_file eddc7ac6 ok   extern 0s 35.8MiB
2021/07/08 16:49:55 scheduler task 06223123 (flow ffbd06ba): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:55 scheduler task 06223123 (flow ffbd06ba): promoting objects (try 0): started
2021/07/08 16:49:56 scheduler task 06223123 (flow ffbd06ba): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:56 scheduler task 06223123 (flow ffbd06ba): retrieving diagnostic output (try 0): started
2021/07/08 16:49:56 scheduler task 06223123 (flow ffbd06ba): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:56 scheduler task 06223123 (flow ffbd06ba): retrieving result (try 0): started
2021/07/08 16:49:56 scheduler task 06223123 (flow ffbd06ba): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:56 scheduler task 06223123 (flow ffbd06ba): transferring output (try 0): started
2021/07/08 16:49:56 scheduler task f165135f (flow b485700d): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:56 scheduler task f165135f (flow b485700d): unloading (try 0): started
2021/07/08 16:49:56 scheduler task f165135f (flow b485700d): unloading list<val<.=e4168e78 35.7MiB> 35.7MiB>
2021/07/08 16:49:56 scheduler task f165135f (flow b485700d): unloading val<.=a2ded69a 35.4MiB>
2021/07/08 16:49:56 scheduler task f165135f (flow b485700d): unloading val<.=24eac277 35.4MiB>
2021/07/08 16:49:56 scheduler task e3ec5d51 (flow e69cf101): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:b6eae93105b721b24f3e12f54ec93fd225e2cdcd8371c2c03bec2b79e4435dee -> s3://niema-test/n100/r03/n100.r03.s068.tar.gz (35.8MiB) in 2s (17.9MiB/s) 
2021/07/08 16:49:56  <-  n100.r03.s068.Main.cp_out_file e69cf101 ok   extern 0s 35.8MiB
2021/07/08 16:49:56 scheduler task cb3be4a9 (flow 7f1435b4): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:56 scheduler task cb3be4a9 (flow 7f1435b4): promoting objects (try 0): started
2021/07/08 16:49:56 scheduler task f165135f (flow b485700d): unloaded val<.=24eac277 35.4MiB>
2021/07/08 16:49:56 scheduler task f165135f (flow b485700d): unloaded list<val<.=e4168e78 35.7MiB> 35.7MiB>
2021/07/08 16:49:56 scheduler task f165135f (flow b485700d): unloaded val<.=a2ded69a 35.4MiB>
2021/07/08 16:49:56 scheduler task f165135f (flow b485700d): unloading (try 0): successful, next state: complete
2021/07/08 16:49:56  <-  n100.r03.s085.Main.out_file b485700d ok     exec 5m5s 35.7MiB
2021/07/08 16:49:56 n100.r03.s085.Main.out_file b485700d n100/r03/n100.r03.s085.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8e48465798709c978ad3dc149a97f58359f866a0b7c49059162353b2f8f16486
	sha256:b485700dc2c226054fd089ee67f8f0291c1211f19b9a62180a30019776952d71
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f165135f382e84850a84eeb8307ee02c145d44f5a14a8e5cea0567edfce3ecbc
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s085_output"
	    wget -O "n100.r03.s085_output/n100.r03.s085.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s085_output/n100.r03.s085.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s085_output/n100.r03.s085.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s085_output/n100.r03.s085.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s085_output/n100.r03.s085.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s085_output/n100.r03.s085.reference.fas" "n100.r03.s085_output/n100.r03.s085.fq1.fastq" "n100.r03.s085_output/n100.r03.s085.fq2.fastq" | samtools view -bS - > "n100.r03.s085_output/n100.r03.s085.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s085_output/n100.r03.s085.untrimmed.sorted.bam" "n100.r03.s085_output/n100.r03.s085.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s085_output/n100.r03.s085.untrimmed.sorted.bam" -b "n100.r03.s085_output/n100.r03.s085.primers.bed" -p "n100.r03.s085_output/n100.r03.s085.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s085_output/n100.r03.s085.trimmed.sorted.bam" "n100.r03.s085_output/n100.r03.s085.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s085_output/n100.r03.s085.reference.fas" "n100.r03.s085_output/n100.r03.s085.trimmed.sorted.bam" > "n100.r03.s085_output/n100.r03.s085.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s085_output/n100.r03.s085.reference.fas" --call-indels "n100.r03.s085_output/n100.r03.s085.trimmed.sorted.bam" > "n100.r03.s085_output/n100.r03.s085.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s085_output/n100.r03.s085.trimmed.sorted.bam" > "n100.r03.s085_output/n100.r03.s085.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s085_output/n100.r03.s085.depth.txt" "n100.r03.s085_output/n100.r03.s085.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s085_output/n100.r03.s085.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s085_output/n100.r03.s085.reference.fas" | bcftools consensus -m "n100.r03.s085_output/n100.r03.s085.low_depth.tsv" tmp.vcf.gz > "n100.r03.s085_output/n100.r03.s085.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s085_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:e4168e78dc4d5f142d17ebd8c993f4d8c3427231aa80bc3ef2154bef5331d504 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.8MiB max=130.2MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=695B max=2.0KiB
2021/07/08 16:49:56 scheduler task 74d52a38 (flow 40986c40): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s085.tar.gz resources {}
2021/07/08 16:49:56  ->  n100.r03.s085.Main.cp_out_file 40986c40 exec extern s3://niema-test/n100/r03/n100.r03.s085.tar.gz 35.7MiB
2021/07/08 16:49:56 scheduler task cb3be4a9 (flow 7f1435b4): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:56 scheduler task cb3be4a9 (flow 7f1435b4): retrieving diagnostic output (try 0): started
2021/07/08 16:49:56 scheduler task cb3be4a9 (flow 7f1435b4): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:56 scheduler task cb3be4a9 (flow 7f1435b4): retrieving result (try 0): started
2021/07/08 16:49:56 scheduler task e35b1ff3 (flow b911e660): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:56 scheduler task e35b1ff3 (flow b911e660): promoting objects (try 0): started
2021/07/08 16:49:56 scheduler task cb3be4a9 (flow 7f1435b4): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:56 scheduler task cb3be4a9 (flow 7f1435b4): transferring output (try 0): started
2021/07/08 16:49:56 scheduler task 7194b040 (flow e2be785d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:56 scheduler task e35b1ff3 (flow b911e660): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:56 scheduler task 7194b040 (flow e2be785d): promoting objects (try 0): started
2021/07/08 16:49:56 scheduler task e35b1ff3 (flow b911e660): retrieving diagnostic output (try 0): started
2021/07/08 16:49:56 scheduler task 7194b040 (flow e2be785d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:56 scheduler task 7194b040 (flow e2be785d): retrieving diagnostic output (try 0): started
2021/07/08 16:49:56 scheduler task e35b1ff3 (flow b911e660): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:56 scheduler task e35b1ff3 (flow b911e660): retrieving result (try 0): started
2021/07/08 16:49:56 scheduler task 7194b040 (flow e2be785d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:56 scheduler task 7194b040 (flow e2be785d): retrieving result (try 0): started
2021/07/08 16:49:56 scheduler task e35b1ff3 (flow b911e660): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:56 scheduler task e35b1ff3 (flow b911e660): transferring output (try 0): started
2021/07/08 16:49:56 scheduler task 7194b040 (flow e2be785d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:56 scheduler task 7194b040 (flow e2be785d): transferring output (try 0): started
2021/07/08 16:49:57 scheduler task 06223123 (flow ffbd06ba): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:57 scheduler task 06223123 (flow ffbd06ba): unloading (try 0): started
2021/07/08 16:49:57 scheduler task 06223123 (flow ffbd06ba): unloading list<val<.=5bcf6a58 35.7MiB> 35.7MiB>
2021/07/08 16:49:57 scheduler task 06223123 (flow ffbd06ba): unloading val<.=7bc0fcfa 35.4MiB>
2021/07/08 16:49:57 scheduler task 06223123 (flow ffbd06ba): unloading val<.=8d0051cc 35.4MiB>
2021/07/08 16:49:57 scheduler task cb3be4a9 (flow 7f1435b4): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:57 scheduler task cb3be4a9 (flow 7f1435b4): unloading (try 0): started
2021/07/08 16:49:57 scheduler task cb3be4a9 (flow 7f1435b4): unloading list<val<.=69fd1e1a 35.7MiB> 35.7MiB>
2021/07/08 16:49:57 scheduler task cb3be4a9 (flow 7f1435b4): unloading val<.=a20107ac 35.4MiB>
2021/07/08 16:49:57 scheduler task cb3be4a9 (flow 7f1435b4): unloading val<.=87b6976a 35.4MiB>
2021/07/08 16:49:57 scheduler task 74d52a38 (flow 40986c40): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:e4168e78dc4d5f142d17ebd8c993f4d8c3427231aa80bc3ef2154bef5331d504 -> s3://niema-test/n100/r03/n100.r03.s085.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:49:57  <-  n100.r03.s085.Main.cp_out_file 40986c40 ok   extern 0s 35.7MiB
2021/07/08 16:49:57 scheduler task 06223123 (flow ffbd06ba): unloaded val<.=7bc0fcfa 35.4MiB>
2021/07/08 16:49:57 scheduler task 06223123 (flow ffbd06ba): unloaded val<.=8d0051cc 35.4MiB>
2021/07/08 16:49:57 scheduler task 06223123 (flow ffbd06ba): unloaded list<val<.=5bcf6a58 35.7MiB> 35.7MiB>
2021/07/08 16:49:57 scheduler task 06223123 (flow ffbd06ba): unloading (try 0): successful, next state: complete
2021/07/08 16:49:57  <-  n100.r03.s034.Main.out_file ffbd06ba ok     exec 5m5s 35.7MiB
2021/07/08 16:49:57 n100.r03.s034.Main.out_file ffbd06ba n100/r03/n100.r03.s034.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ef978fd25275e4d32b11e8cd07d830af8888d3cea63bcc0b66f4e9de4dc9d7f7
	sha256:ffbd06bac9541ad1452d0e2fc653684861f07ba8243dba3fef308927a4cee7eb
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/06223123ff926c41becc30381c7532e2ee57fc6f2d8612f53daa6ac4bd3bfbe1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s034_output"
	    wget -O "n100.r03.s034_output/n100.r03.s034.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s034_output/n100.r03.s034.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s034_output/n100.r03.s034.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s034_output/n100.r03.s034.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s034_output/n100.r03.s034.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s034_output/n100.r03.s034.reference.fas" "n100.r03.s034_output/n100.r03.s034.fq1.fastq" "n100.r03.s034_output/n100.r03.s034.fq2.fastq" | samtools view -bS - > "n100.r03.s034_output/n100.r03.s034.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s034_output/n100.r03.s034.untrimmed.sorted.bam" "n100.r03.s034_output/n100.r03.s034.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s034_output/n100.r03.s034.untrimmed.sorted.bam" -b "n100.r03.s034_output/n100.r03.s034.primers.bed" -p "n100.r03.s034_output/n100.r03.s034.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s034_output/n100.r03.s034.trimmed.sorted.bam" "n100.r03.s034_output/n100.r03.s034.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s034_output/n100.r03.s034.reference.fas" "n100.r03.s034_output/n100.r03.s034.trimmed.sorted.bam" > "n100.r03.s034_output/n100.r03.s034.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s034_output/n100.r03.s034.reference.fas" --call-indels "n100.r03.s034_output/n100.r03.s034.trimmed.sorted.bam" > "n100.r03.s034_output/n100.r03.s034.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s034_output/n100.r03.s034.trimmed.sorted.bam" > "n100.r03.s034_output/n100.r03.s034.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s034_output/n100.r03.s034.depth.txt" "n100.r03.s034_output/n100.r03.s034.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s034_output/n100.r03.s034.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s034_output/n100.r03.s034.reference.fas" | bcftools consensus -m "n100.r03.s034_output/n100.r03.s034.low_depth.tsv" tmp.vcf.gz > "n100.r03.s034_output/n100.r03.s034.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s034_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:5bcf6a58bd83f8bfdd0d9a4d98c9c631a702c1a974c14e3223d109763a804b7a 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.0MiB max=131.3MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=695B max=2.1KiB
2021/07/08 16:49:57 scheduler task 470f3c52 (flow f64da859): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s034.tar.gz resources {}
2021/07/08 16:49:57  ->  n100.r03.s034.Main.cp_out_file f64da859 exec extern s3://niema-test/n100/r03/n100.r03.s034.tar.gz 35.7MiB
2021/07/08 16:49:57 scheduler task 733e004a (flow 98beb4a2): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:57 scheduler task cb3be4a9 (flow 7f1435b4): unloaded list<val<.=69fd1e1a 35.7MiB> 35.7MiB>
2021/07/08 16:49:57 scheduler task cb3be4a9 (flow 7f1435b4): unloaded val<.=a20107ac 35.4MiB>
2021/07/08 16:49:57 scheduler task cb3be4a9 (flow 7f1435b4): unloaded val<.=87b6976a 35.4MiB>
2021/07/08 16:49:57 scheduler task cb3be4a9 (flow 7f1435b4): unloading (try 0): successful, next state: complete
2021/07/08 16:49:57 scheduler task 733e004a (flow 98beb4a2): promoting objects (try 0): started
2021/07/08 16:49:57  <-  n100.r03.s017.Main.out_file 7f1435b4 ok     exec 5m5s 35.7MiB
2021/07/08 16:49:57 n100.r03.s017.Main.out_file 7f1435b4 n100/r03/n100.r03.s017.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7af74b220cb9a030b9614ebdf6544c2b870116ca219772c18e4a36d700031e40
	sha256:7f1435b4d62a7c5f38a5c91e54b6fba6ffd0118b5e4b0f294db785f15f654f44
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cb3be4a9668f2a11f02fc67e51b1ca481051223f0751e0a38d13d621c859ef96
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s017_output"
	    wget -O "n100.r03.s017_output/n100.r03.s017.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s017_output/n100.r03.s017.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s017_output/n100.r03.s017.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s017_output/n100.r03.s017.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s017_output/n100.r03.s017.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s017_output/n100.r03.s017.reference.fas" "n100.r03.s017_output/n100.r03.s017.fq1.fastq" "n100.r03.s017_output/n100.r03.s017.fq2.fastq" | samtools view -bS - > "n100.r03.s017_output/n100.r03.s017.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s017_output/n100.r03.s017.untrimmed.sorted.bam" "n100.r03.s017_output/n100.r03.s017.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s017_output/n100.r03.s017.untrimmed.sorted.bam" -b "n100.r03.s017_output/n100.r03.s017.primers.bed" -p "n100.r03.s017_output/n100.r03.s017.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s017_output/n100.r03.s017.trimmed.sorted.bam" "n100.r03.s017_output/n100.r03.s017.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s017_output/n100.r03.s017.reference.fas" "n100.r03.s017_output/n100.r03.s017.trimmed.sorted.bam" > "n100.r03.s017_output/n100.r03.s017.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s017_output/n100.r03.s017.reference.fas" --call-indels "n100.r03.s017_output/n100.r03.s017.trimmed.sorted.bam" > "n100.r03.s017_output/n100.r03.s017.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s017_output/n100.r03.s017.trimmed.sorted.bam" > "n100.r03.s017_output/n100.r03.s017.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s017_output/n100.r03.s017.depth.txt" "n100.r03.s017_output/n100.r03.s017.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s017_output/n100.r03.s017.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s017_output/n100.r03.s017.reference.fas" | bcftools consensus -m "n100.r03.s017_output/n100.r03.s017.low_depth.tsv" tmp.vcf.gz > "n100.r03.s017_output/n100.r03.s017.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s017_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:69fd1e1afc194b1e00d0117a4aff032170f15400ebc0c458f0c251fb2f24c0e3 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=19.4MiB max=125.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.0KiB
2021/07/08 16:49:57 scheduler task ec705b7c (flow 6d4e1cba): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s017.tar.gz resources {}
2021/07/08 16:49:57  ->  n100.r03.s017.Main.cp_out_file 6d4e1cba exec extern s3://niema-test/n100/r03/n100.r03.s017.tar.gz 35.7MiB
2021/07/08 16:49:57 scheduler task 733e004a (flow 98beb4a2): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:57 scheduler task 733e004a (flow 98beb4a2): retrieving diagnostic output (try 0): started
2021/07/08 16:49:57 scheduler task 733e004a (flow 98beb4a2): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:57 scheduler task 733e004a (flow 98beb4a2): retrieving result (try 0): started
2021/07/08 16:49:57 scheduler task e35b1ff3 (flow b911e660): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:57 scheduler task e35b1ff3 (flow b911e660): unloading (try 0): started
2021/07/08 16:49:57 scheduler task e35b1ff3 (flow b911e660): unloading list<val<.=72673507 35.8MiB> 35.8MiB>
2021/07/08 16:49:57 scheduler task e35b1ff3 (flow b911e660): unloading val<.=cf29c3db 35.4MiB>
2021/07/08 16:49:57 scheduler task e35b1ff3 (flow b911e660): unloading val<.=12293d99 35.4MiB>
2021/07/08 16:49:57 scheduler task 733e004a (flow 98beb4a2): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:57 scheduler task 733e004a (flow 98beb4a2): transferring output (try 0): started
2021/07/08 16:49:57 scheduler task e35b1ff3 (flow b911e660): unloaded val<.=12293d99 35.4MiB>
2021/07/08 16:49:57 scheduler task e35b1ff3 (flow b911e660): unloaded list<val<.=72673507 35.8MiB> 35.8MiB>
2021/07/08 16:49:57 scheduler task e35b1ff3 (flow b911e660): unloaded val<.=cf29c3db 35.4MiB>
2021/07/08 16:49:57 scheduler task e35b1ff3 (flow b911e660): unloading (try 0): successful, next state: complete
2021/07/08 16:49:57  <-  n100.r03.s011.Main.out_file b911e660 ok     exec 5m0s 35.8MiB
2021/07/08 16:49:57 n100.r03.s011.Main.out_file b911e660 n100/r03/n100.r03.s011.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ce639bec79a0757dd01bd38c114025e9a8538b114dc97ebdcbfe87882880c793
	sha256:b911e660a339249df7a4f9b9e9de5ee514f49b8c954eba337d5a82725662f0e2
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e35b1ff388c6ef97575fb50dcddb7a64aff0c4b012bf2cd1efb630fded03140a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s011_output"
	    wget -O "n100.r03.s011_output/n100.r03.s011.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s011_output/n100.r03.s011.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s011_output/n100.r03.s011.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s011_output/n100.r03.s011.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s011_output/n100.r03.s011.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s011_output/n100.r03.s011.reference.fas" "n100.r03.s011_output/n100.r03.s011.fq1.fastq" "n100.r03.s011_output/n100.r03.s011.fq2.fastq" | samtools view -bS - > "n100.r03.s011_output/n100.r03.s011.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s011_output/n100.r03.s011.untrimmed.sorted.bam" "n100.r03.s011_output/n100.r03.s011.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s011_output/n100.r03.s011.untrimmed.sorted.bam" -b "n100.r03.s011_output/n100.r03.s011.primers.bed" -p "n100.r03.s011_output/n100.r03.s011.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s011_output/n100.r03.s011.trimmed.sorted.bam" "n100.r03.s011_output/n100.r03.s011.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s011_output/n100.r03.s011.reference.fas" "n100.r03.s011_output/n100.r03.s011.trimmed.sorted.bam" > "n100.r03.s011_output/n100.r03.s011.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s011_output/n100.r03.s011.reference.fas" --call-indels "n100.r03.s011_output/n100.r03.s011.trimmed.sorted.bam" > "n100.r03.s011_output/n100.r03.s011.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s011_output/n100.r03.s011.trimmed.sorted.bam" > "n100.r03.s011_output/n100.r03.s011.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s011_output/n100.r03.s011.depth.txt" "n100.r03.s011_output/n100.r03.s011.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s011_output/n100.r03.s011.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s011_output/n100.r03.s011.reference.fas" | bcftools consensus -m "n100.r03.s011_output/n100.r03.s011.low_depth.tsv" tmp.vcf.gz > "n100.r03.s011_output/n100.r03.s011.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s011_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:72673507acd49080802694026774cdfccbbe6940258f93cfc9f0ab60bdc48a6b 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.6MiB max=127.6MiB
	    disk mean=11.9MiB max=35.8MiB
	    tmp mean=348B max=1.0KiB
2021/07/08 16:49:57 scheduler task d4ed04d0 (flow bb289e68): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s011.tar.gz resources {}
2021/07/08 16:49:57  ->  n100.r03.s011.Main.cp_out_file bb289e68 exec extern s3://niema-test/n100/r03/n100.r03.s011.tar.gz 35.8MiB
2021/07/08 16:49:57 scheduler task 7194b040 (flow e2be785d): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:57 scheduler task 7194b040 (flow e2be785d): unloading (try 0): started
2021/07/08 16:49:57 scheduler task 7194b040 (flow e2be785d): unloading list<val<.=d56c2ad3 35.7MiB> 35.7MiB>
2021/07/08 16:49:57 scheduler task 7194b040 (flow e2be785d): unloading val<.=d4e320a4 35.4MiB>
2021/07/08 16:49:57 scheduler task 7194b040 (flow e2be785d): unloading val<.=f7264c76 35.4MiB>
2021/07/08 16:49:57 scheduler task 97699c51 (flow ea5d62c8): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:57 scheduler task 97699c51 (flow ea5d62c8): promoting objects (try 0): started
2021/07/08 16:49:57 scheduler task 7194b040 (flow e2be785d): unloaded list<val<.=d56c2ad3 35.7MiB> 35.7MiB>
2021/07/08 16:49:57 scheduler task 7194b040 (flow e2be785d): unloaded val<.=d4e320a4 35.4MiB>
2021/07/08 16:49:57 scheduler task 7194b040 (flow e2be785d): unloaded val<.=f7264c76 35.4MiB>
2021/07/08 16:49:57 scheduler task 7194b040 (flow e2be785d): unloading (try 0): successful, next state: complete
2021/07/08 16:49:57  <-  n100.r03.s067.Main.out_file e2be785d ok     exec 5m0s 35.7MiB
2021/07/08 16:49:57 n100.r03.s067.Main.out_file e2be785d n100/r03/n100.r03.s067.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4accf0c59fdf52df70e5c93a8a59062547f26c8d70f42a52b8cabbdd7edaecf2
	sha256:e2be785d56ec5d002120b57ca1b00c0fa2f5e194522fc4daff3579ae2bce2dd2
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7194b040b6d51f7d7f703f2a10794cf14c9ae3ba933ac5f41b91824bc652185f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s067_output"
	    wget -O "n100.r03.s067_output/n100.r03.s067.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s067_output/n100.r03.s067.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s067_output/n100.r03.s067.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s067_output/n100.r03.s067.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s067_output/n100.r03.s067.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s067_output/n100.r03.s067.reference.fas" "n100.r03.s067_output/n100.r03.s067.fq1.fastq" "n100.r03.s067_output/n100.r03.s067.fq2.fastq" | samtools view -bS - > "n100.r03.s067_output/n100.r03.s067.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s067_output/n100.r03.s067.untrimmed.sorted.bam" "n100.r03.s067_output/n100.r03.s067.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s067_output/n100.r03.s067.untrimmed.sorted.bam" -b "n100.r03.s067_output/n100.r03.s067.primers.bed" -p "n100.r03.s067_output/n100.r03.s067.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s067_output/n100.r03.s067.trimmed.sorted.bam" "n100.r03.s067_output/n100.r03.s067.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s067_output/n100.r03.s067.reference.fas" "n100.r03.s067_output/n100.r03.s067.trimmed.sorted.bam" > "n100.r03.s067_output/n100.r03.s067.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s067_output/n100.r03.s067.reference.fas" --call-indels "n100.r03.s067_output/n100.r03.s067.trimmed.sorted.bam" > "n100.r03.s067_output/n100.r03.s067.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s067_output/n100.r03.s067.trimmed.sorted.bam" > "n100.r03.s067_output/n100.r03.s067.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s067_output/n100.r03.s067.depth.txt" "n100.r03.s067_output/n100.r03.s067.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s067_output/n100.r03.s067.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s067_output/n100.r03.s067.reference.fas" | bcftools consensus -m "n100.r03.s067_output/n100.r03.s067.low_depth.tsv" tmp.vcf.gz > "n100.r03.s067_output/n100.r03.s067.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s067_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d56c2ad329d1514c8fb42ff5b3e7c0ef55827740ec6966e3236385d6cd351004 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.8MiB max=126.7MiB
	    disk mean=9.2MiB max=35.7MiB
	    tmp mean=349B max=2.0KiB
2021/07/08 16:49:57 scheduler task dbb508b8 (flow 086331b5): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s067.tar.gz resources {}
2021/07/08 16:49:57  ->  n100.r03.s067.Main.cp_out_file 086331b5 exec extern s3://niema-test/n100/r03/n100.r03.s067.tar.gz 35.7MiB
2021/07/08 16:49:57 scheduler task 97699c51 (flow ea5d62c8): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:57 scheduler task 97699c51 (flow ea5d62c8): retrieving diagnostic output (try 0): started
2021/07/08 16:49:57 scheduler task 97699c51 (flow ea5d62c8): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:57 scheduler task 97699c51 (flow ea5d62c8): retrieving result (try 0): started
2021/07/08 16:49:57 scheduler task 97699c51 (flow ea5d62c8): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:57 scheduler task 470f3c52 (flow f64da859): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:5bcf6a58bd83f8bfdd0d9a4d98c9c631a702c1a974c14e3223d109763a804b7a -> s3://niema-test/n100/r03/n100.r03.s034.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:49:57  <-  n100.r03.s034.Main.cp_out_file f64da859 ok   extern 0s 35.7MiB
2021/07/08 16:49:57 scheduler task 97699c51 (flow ea5d62c8): transferring output (try 0): started
2021/07/08 16:49:57 scheduler task ec705b7c (flow 6d4e1cba): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:69fd1e1afc194b1e00d0117a4aff032170f15400ebc0c458f0c251fb2f24c0e3 -> s3://niema-test/n100/r03/n100.r03.s017.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:49:57  <-  n100.r03.s017.Main.cp_out_file 6d4e1cba ok   extern 0s 35.7MiB
2021/07/08 16:49:57 scheduler task 733e004a (flow 98beb4a2): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:57 scheduler task 733e004a (flow 98beb4a2): unloading (try 0): started
2021/07/08 16:49:57 scheduler task 733e004a (flow 98beb4a2): unloading list<val<.=9649f5d2 35.7MiB> 35.7MiB>
2021/07/08 16:49:57 scheduler task 733e004a (flow 98beb4a2): unloading val<.=be2af9c2 35.4MiB>
2021/07/08 16:49:57 scheduler task 733e004a (flow 98beb4a2): unloading val<.=24e3495e 35.4MiB>
2021/07/08 16:49:57 scheduler task 733e004a (flow 98beb4a2): unloaded list<val<.=9649f5d2 35.7MiB> 35.7MiB>
2021/07/08 16:49:57 scheduler task 733e004a (flow 98beb4a2): unloaded val<.=be2af9c2 35.4MiB>
2021/07/08 16:49:57 scheduler task 733e004a (flow 98beb4a2): unloaded val<.=24e3495e 35.4MiB>
2021/07/08 16:49:57 scheduler task 733e004a (flow 98beb4a2): unloading (try 0): successful, next state: complete
2021/07/08 16:49:58  <-  n100.r03.s010.Main.out_file 98beb4a2 ok     exec 5m1s 35.7MiB
2021/07/08 16:49:58 n100.r03.s010.Main.out_file 98beb4a2 n100/r03/n100.r03.s010.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:556003129b076a6ebbe21a0ba5fc5d21ca7526e68171c350719b812a1e7992f7
	sha256:98beb4a2f78d4b345590f2a45c2b6c734cebb2e74d52da21ac007c8606448714
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/733e004abc31270c2453a2b4a474cc2bfc4a91c66becac4e4614645fb5a579e0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s010_output"
	    wget -O "n100.r03.s010_output/n100.r03.s010.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s010_output/n100.r03.s010.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s010_output/n100.r03.s010.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s010_output/n100.r03.s010.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s010_output/n100.r03.s010.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s010_output/n100.r03.s010.reference.fas" "n100.r03.s010_output/n100.r03.s010.fq1.fastq" "n100.r03.s010_output/n100.r03.s010.fq2.fastq" | samtools view -bS - > "n100.r03.s010_output/n100.r03.s010.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s010_output/n100.r03.s010.untrimmed.sorted.bam" "n100.r03.s010_output/n100.r03.s010.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s010_output/n100.r03.s010.untrimmed.sorted.bam" -b "n100.r03.s010_output/n100.r03.s010.primers.bed" -p "n100.r03.s010_output/n100.r03.s010.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s010_output/n100.r03.s010.trimmed.sorted.bam" "n100.r03.s010_output/n100.r03.s010.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s010_output/n100.r03.s010.reference.fas" "n100.r03.s010_output/n100.r03.s010.trimmed.sorted.bam" > "n100.r03.s010_output/n100.r03.s010.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s010_output/n100.r03.s010.reference.fas" --call-indels "n100.r03.s010_output/n100.r03.s010.trimmed.sorted.bam" > "n100.r03.s010_output/n100.r03.s010.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s010_output/n100.r03.s010.trimmed.sorted.bam" > "n100.r03.s010_output/n100.r03.s010.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s010_output/n100.r03.s010.depth.txt" "n100.r03.s010_output/n100.r03.s010.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s010_output/n100.r03.s010.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s010_output/n100.r03.s010.reference.fas" | bcftools consensus -m "n100.r03.s010_output/n100.r03.s010.low_depth.tsv" tmp.vcf.gz > "n100.r03.s010_output/n100.r03.s010.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s010_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9649f5d2bc2915e71ae9b62890cce03d9bb5b6da91a4937bf36610d9c696876c 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.5MiB max=129.8MiB
	    disk mean=8.7MiB max=35.7MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 16:49:58 scheduler task 87080980 (flow bd48e30b): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s010.tar.gz resources {}
2021/07/08 16:49:58  ->  n100.r03.s010.Main.cp_out_file bd48e30b exec extern s3://niema-test/n100/r03/n100.r03.s010.tar.gz 35.7MiB
2021/07/08 16:49:58 scheduler task f158a18a (flow 6b8f67c3): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:58 scheduler task f158a18a (flow 6b8f67c3): promoting objects (try 0): started
2021/07/08 16:49:58 scheduler task f158a18a (flow 6b8f67c3): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:58 scheduler task f158a18a (flow 6b8f67c3): retrieving diagnostic output (try 0): started
2021/07/08 16:49:58 scheduler task 26ddd9e4 (flow 7219908c): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:58 scheduler task 26ddd9e4 (flow 7219908c): promoting objects (try 0): started
2021/07/08 16:49:58 scheduler task f158a18a (flow 6b8f67c3): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:58 scheduler task f158a18a (flow 6b8f67c3): retrieving result (try 0): started
2021/07/08 16:49:58 scheduler task 26ddd9e4 (flow 7219908c): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:58 scheduler task 26ddd9e4 (flow 7219908c): retrieving diagnostic output (try 0): started
2021/07/08 16:49:58 scheduler task f158a18a (flow 6b8f67c3): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:58 scheduler task f158a18a (flow 6b8f67c3): transferring output (try 0): started
2021/07/08 16:49:58 scheduler task 97699c51 (flow ea5d62c8): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:58 scheduler task 97699c51 (flow ea5d62c8): unloading (try 0): started
2021/07/08 16:49:58 scheduler task 97699c51 (flow ea5d62c8): unloading list<val<.=e426ba43 35.8MiB> 35.8MiB>
2021/07/08 16:49:58 scheduler task 97699c51 (flow ea5d62c8): unloading val<.=0d128113 35.4MiB>
2021/07/08 16:49:58 scheduler task 97699c51 (flow ea5d62c8): unloading val<.=84819bea 35.4MiB>
2021/07/08 16:49:58 scheduler task dbb508b8 (flow 086331b5): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d56c2ad329d1514c8fb42ff5b3e7c0ef55827740ec6966e3236385d6cd351004 -> s3://niema-test/n100/r03/n100.r03.s067.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:49:58  <-  n100.r03.s067.Main.cp_out_file 086331b5 ok   extern 0s 35.7MiB
2021/07/08 16:49:58 scheduler task 26ddd9e4 (flow 7219908c): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:58 scheduler task 26ddd9e4 (flow 7219908c): retrieving result (try 0): started
2021/07/08 16:49:58 scheduler task 97699c51 (flow ea5d62c8): unloaded val<.=0d128113 35.4MiB>
2021/07/08 16:49:58 scheduler task 97699c51 (flow ea5d62c8): unloaded list<val<.=e426ba43 35.8MiB> 35.8MiB>
2021/07/08 16:49:58 scheduler task 97699c51 (flow ea5d62c8): unloaded val<.=84819bea 35.4MiB>
2021/07/08 16:49:58 scheduler task 97699c51 (flow ea5d62c8): unloading (try 0): successful, next state: complete
2021/07/08 16:49:58  <-  n100.r03.s001.Main.out_file ea5d62c8 ok     exec 4m53s 35.8MiB
2021/07/08 16:49:58 n100.r03.s001.Main.out_file ea5d62c8 n100/r03/n100.r03.s001.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:dbb3b8debdb41fe52e632ed1c7a00a700ab2805b64a18ed5b589812e7e376f2a
	sha256:ea5d62c89870254ef61e7c4d7e49c97eda4c303ae520b495e2d368b624f82e8c
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/97699c515100e17d1b0a74a6408c22acf195a27bf6e042a3502c8c4c71d400c9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s001_output"
	    wget -O "n100.r03.s001_output/n100.r03.s001.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s001_output/n100.r03.s001.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s001_output/n100.r03.s001.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s001_output/n100.r03.s001.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s001_output/n100.r03.s001.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s001_output/n100.r03.s001.reference.fas" "n100.r03.s001_output/n100.r03.s001.fq1.fastq" "n100.r03.s001_output/n100.r03.s001.fq2.fastq" | samtools view -bS - > "n100.r03.s001_output/n100.r03.s001.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s001_output/n100.r03.s001.untrimmed.sorted.bam" "n100.r03.s001_output/n100.r03.s001.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s001_output/n100.r03.s001.untrimmed.sorted.bam" -b "n100.r03.s001_output/n100.r03.s001.primers.bed" -p "n100.r03.s001_output/n100.r03.s001.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s001_output/n100.r03.s001.trimmed.sorted.bam" "n100.r03.s001_output/n100.r03.s001.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s001_output/n100.r03.s001.reference.fas" "n100.r03.s001_output/n100.r03.s001.trimmed.sorted.bam" > "n100.r03.s001_output/n100.r03.s001.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s001_output/n100.r03.s001.reference.fas" --call-indels "n100.r03.s001_output/n100.r03.s001.trimmed.sorted.bam" > "n100.r03.s001_output/n100.r03.s001.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s001_output/n100.r03.s001.trimmed.sorted.bam" > "n100.r03.s001_output/n100.r03.s001.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s001_output/n100.r03.s001.depth.txt" "n100.r03.s001_output/n100.r03.s001.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s001_output/n100.r03.s001.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s001_output/n100.r03.s001.reference.fas" | bcftools consensus -m "n100.r03.s001_output/n100.r03.s001.low_depth.tsv" tmp.vcf.gz > "n100.r03.s001_output/n100.r03.s001.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s001_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:e426ba4310d38f44d9de3fb76a4a979c9752399a290ca80668fd70ba9a959924 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=22.2MiB max=128.2MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 16:49:58 scheduler task 26f1bbe1 (flow 7e8c25e8): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s001.tar.gz resources {}
2021/07/08 16:49:58  ->  n100.r03.s001.Main.cp_out_file 7e8c25e8 exec extern s3://niema-test/n100/r03/n100.r03.s001.tar.gz 35.8MiB
2021/07/08 16:49:58 scheduler task d4ed04d0 (flow bb289e68): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:72673507acd49080802694026774cdfccbbe6940258f93cfc9f0ab60bdc48a6b -> s3://niema-test/n100/r03/n100.r03.s011.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:49:58  <-  n100.r03.s011.Main.cp_out_file bb289e68 ok   extern 0s 35.8MiB
2021/07/08 16:49:58 scheduler task 26ddd9e4 (flow 7219908c): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:58 scheduler task 26ddd9e4 (flow 7219908c): transferring output (try 0): started
2021/07/08 16:49:58 scheduler task 07b1d571 (flow 47420793): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:58 scheduler task 07b1d571 (flow 47420793): promoting objects (try 0): started
2021/07/08 16:49:58 scheduler task 5a0c62bc (flow 2cec23de): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:58 scheduler task 5a0c62bc (flow 2cec23de): promoting objects (try 0): started
2021/07/08 16:49:58 scheduler task 07b1d571 (flow 47420793): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:58 scheduler task 07b1d571 (flow 47420793): retrieving diagnostic output (try 0): started
2021/07/08 16:49:58 scheduler task 87080980 (flow bd48e30b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9649f5d2bc2915e71ae9b62890cce03d9bb5b6da91a4937bf36610d9c696876c -> s3://niema-test/n100/r03/n100.r03.s010.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:49:58  <-  n100.r03.s010.Main.cp_out_file bd48e30b ok   extern 0s 35.7MiB
2021/07/08 16:49:58 scheduler task 5a0c62bc (flow 2cec23de): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:58 scheduler task 5a0c62bc (flow 2cec23de): retrieving diagnostic output (try 0): started
2021/07/08 16:49:58 scheduler task f158a18a (flow 6b8f67c3): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:58 scheduler task 07b1d571 (flow 47420793): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:58 scheduler task f158a18a (flow 6b8f67c3): unloading (try 0): started
2021/07/08 16:49:58 scheduler task f158a18a (flow 6b8f67c3): unloading list<val<.=9aafdcb5 35.7MiB> 35.7MiB>
2021/07/08 16:49:58 scheduler task f158a18a (flow 6b8f67c3): unloading val<.=3cbb58db 35.4MiB>
2021/07/08 16:49:58 scheduler task f158a18a (flow 6b8f67c3): unloading val<.=ca945a47 35.4MiB>
2021/07/08 16:49:58 scheduler task 07b1d571 (flow 47420793): retrieving result (try 0): started
2021/07/08 16:49:58 scheduler task 5a0c62bc (flow 2cec23de): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:58 scheduler task 5a0c62bc (flow 2cec23de): retrieving result (try 0): started
2021/07/08 16:49:58 scheduler task f158a18a (flow 6b8f67c3): unloaded val<.=3cbb58db 35.4MiB>
2021/07/08 16:49:58 scheduler task f158a18a (flow 6b8f67c3): unloaded list<val<.=9aafdcb5 35.7MiB> 35.7MiB>
2021/07/08 16:49:58 scheduler task f158a18a (flow 6b8f67c3): unloaded val<.=ca945a47 35.4MiB>
2021/07/08 16:49:58 scheduler task f158a18a (flow 6b8f67c3): unloading (try 0): successful, next state: complete
2021/07/08 16:49:58 scheduler task 27950794 (flow 1e078488): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:58 scheduler task 07b1d571 (flow 47420793): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:58  <-  n100.r03.s023.Main.out_file 6b8f67c3 ok     exec 4m52s 35.7MiB
2021/07/08 16:49:58 n100.r03.s023.Main.out_file 6b8f67c3 n100/r03/n100.r03.s023.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5c42d36bfdd9731dd9c98f5f1417a2d58d3ad3493aabb4538d26afe158c54451
	sha256:6b8f67c37f24a1b203ac05f303eb311be95e642ff87c12e7a9f0d768ce01d16e
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f158a18a15460380d8182c6e4a02d4f13a65de60c4a8065295259b5fd0e89083
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s023_output"
	    wget -O "n100.r03.s023_output/n100.r03.s023.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s023_output/n100.r03.s023.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s023_output/n100.r03.s023.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s023_output/n100.r03.s023.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s023_output/n100.r03.s023.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s023_output/n100.r03.s023.reference.fas" "n100.r03.s023_output/n100.r03.s023.fq1.fastq" "n100.r03.s023_output/n100.r03.s023.fq2.fastq" | samtools view -bS - > "n100.r03.s023_output/n100.r03.s023.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s023_output/n100.r03.s023.untrimmed.sorted.bam" "n100.r03.s023_output/n100.r03.s023.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s023_output/n100.r03.s023.untrimmed.sorted.bam" -b "n100.r03.s023_output/n100.r03.s023.primers.bed" -p "n100.r03.s023_output/n100.r03.s023.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s023_output/n100.r03.s023.trimmed.sorted.bam" "n100.r03.s023_output/n100.r03.s023.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s023_output/n100.r03.s023.reference.fas" "n100.r03.s023_output/n100.r03.s023.trimmed.sorted.bam" > "n100.r03.s023_output/n100.r03.s023.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s023_output/n100.r03.s023.reference.fas" --call-indels "n100.r03.s023_output/n100.r03.s023.trimmed.sorted.bam" > "n100.r03.s023_output/n100.r03.s023.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s023_output/n100.r03.s023.trimmed.sorted.bam" > "n100.r03.s023_output/n100.r03.s023.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s023_output/n100.r03.s023.depth.txt" "n100.r03.s023_output/n100.r03.s023.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s023_output/n100.r03.s023.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s023_output/n100.r03.s023.reference.fas" | bcftools consensus -m "n100.r03.s023_output/n100.r03.s023.low_depth.tsv" tmp.vcf.gz > "n100.r03.s023_output/n100.r03.s023.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s023_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9aafdcb5b31bbdb9625ab647564c25aaa5b3350dc230302e267997785bd5fa46 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.2MiB max=124.2MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 16:49:58 scheduler task b4e13fa8 (flow 597de06f): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s023.tar.gz resources {}
2021/07/08 16:49:58  ->  n100.r03.s023.Main.cp_out_file 597de06f exec extern s3://niema-test/n100/r03/n100.r03.s023.tar.gz 35.7MiB
2021/07/08 16:49:58 scheduler task 27950794 (flow 1e078488): promoting objects (try 0): started
2021/07/08 16:49:58 scheduler task 07b1d571 (flow 47420793): transferring output (try 0): started
2021/07/08 16:49:58 scheduler task 5a0c62bc (flow 2cec23de): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:58 scheduler task 5a0c62bc (flow 2cec23de): transferring output (try 0): started
2021/07/08 16:49:58 scheduler task 26ddd9e4 (flow 7219908c): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:58 scheduler task 26ddd9e4 (flow 7219908c): unloading (try 0): started
2021/07/08 16:49:58 scheduler task 26ddd9e4 (flow 7219908c): unloading list<val<.=b994005a 35.7MiB> 35.7MiB>
2021/07/08 16:49:58 scheduler task 26ddd9e4 (flow 7219908c): unloading val<.=7f498893 35.4MiB>
2021/07/08 16:49:58 scheduler task 26ddd9e4 (flow 7219908c): unloading val<.=b06fc655 35.4MiB>
2021/07/08 16:49:58 scheduler task 27950794 (flow 1e078488): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:58 scheduler task 27950794 (flow 1e078488): retrieving diagnostic output (try 0): started
2021/07/08 16:49:59 scheduler task 26ddd9e4 (flow 7219908c): unloaded list<val<.=b994005a 35.7MiB> 35.7MiB>
2021/07/08 16:49:59 scheduler task 26ddd9e4 (flow 7219908c): unloaded val<.=b06fc655 35.4MiB>
2021/07/08 16:49:59 scheduler task 26ddd9e4 (flow 7219908c): unloaded val<.=7f498893 35.4MiB>
2021/07/08 16:49:59 scheduler task 26ddd9e4 (flow 7219908c): unloading (try 0): successful, next state: complete
2021/07/08 16:49:59  <-  n100.r03.s098.Main.out_file 7219908c ok     exec 5m2s 35.7MiB
2021/07/08 16:49:59 n100.r03.s098.Main.out_file 7219908c n100/r03/n100.r03.s098.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ad1fe129dccc3c9a050cb10a98943ced9802b9be8cb33c69256aee23a99a6e44
	sha256:7219908c196af3bb79cf055088578c86ddc2c959503f772cb0e6164d5a04f248
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/26ddd9e40c2612a8c2717f18e5599b903124b87fceda34f0137deba5370d946c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s098_output"
	    wget -O "n100.r03.s098_output/n100.r03.s098.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s098_output/n100.r03.s098.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s098_output/n100.r03.s098.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s098_output/n100.r03.s098.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s098_output/n100.r03.s098.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s098_output/n100.r03.s098.reference.fas" "n100.r03.s098_output/n100.r03.s098.fq1.fastq" "n100.r03.s098_output/n100.r03.s098.fq2.fastq" | samtools view -bS - > "n100.r03.s098_output/n100.r03.s098.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s098_output/n100.r03.s098.untrimmed.sorted.bam" "n100.r03.s098_output/n100.r03.s098.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s098_output/n100.r03.s098.untrimmed.sorted.bam" -b "n100.r03.s098_output/n100.r03.s098.primers.bed" -p "n100.r03.s098_output/n100.r03.s098.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s098_output/n100.r03.s098.trimmed.sorted.bam" "n100.r03.s098_output/n100.r03.s098.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s098_output/n100.r03.s098.reference.fas" "n100.r03.s098_output/n100.r03.s098.trimmed.sorted.bam" > "n100.r03.s098_output/n100.r03.s098.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s098_output/n100.r03.s098.reference.fas" --call-indels "n100.r03.s098_output/n100.r03.s098.trimmed.sorted.bam" > "n100.r03.s098_output/n100.r03.s098.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s098_output/n100.r03.s098.trimmed.sorted.bam" > "n100.r03.s098_output/n100.r03.s098.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s098_output/n100.r03.s098.depth.txt" "n100.r03.s098_output/n100.r03.s098.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s098_output/n100.r03.s098.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s098_output/n100.r03.s098.reference.fas" | bcftools consensus -m "n100.r03.s098_output/n100.r03.s098.low_depth.tsv" tmp.vcf.gz > "n100.r03.s098_output/n100.r03.s098.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s098_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:b994005a1e844b4978caf10b644fdaf2cb4cd83d40367a0d2036ba9a5b343f89 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.0MiB max=128.8MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=345B max=1.0KiB
2021/07/08 16:49:59 scheduler task 5cccc37e (flow 5729da2b): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s098.tar.gz resources {}
2021/07/08 16:49:59  ->  n100.r03.s098.Main.cp_out_file 5729da2b exec extern s3://niema-test/n100/r03/n100.r03.s098.tar.gz 35.7MiB
2021/07/08 16:49:59 scheduler task 27950794 (flow 1e078488): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:59 scheduler task 27950794 (flow 1e078488): retrieving result (try 0): started
2021/07/08 16:49:59 scheduler task 26f1bbe1 (flow 7e8c25e8): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:e426ba4310d38f44d9de3fb76a4a979c9752399a290ca80668fd70ba9a959924 -> s3://niema-test/n100/r03/n100.r03.s001.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:49:59  <-  n100.r03.s001.Main.cp_out_file 7e8c25e8 ok   extern 0s 35.8MiB
2021/07/08 16:49:59 scheduler task 27950794 (flow 1e078488): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:59 scheduler task 27950794 (flow 1e078488): transferring output (try 0): started
2021/07/08 16:49:59 scheduler task bffb2e9f (flow f9db9957): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:59 scheduler task bffb2e9f (flow f9db9957): promoting objects (try 0): started
2021/07/08 16:49:59 scheduler task bffb2e9f (flow f9db9957): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:59 scheduler task bffb2e9f (flow f9db9957): retrieving diagnostic output (try 0): started
2021/07/08 16:49:59 scheduler task bffb2e9f (flow f9db9957): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:59 scheduler task bffb2e9f (flow f9db9957): retrieving result (try 0): started
2021/07/08 16:49:59 scheduler task 5f06865c (flow a8ad97f1): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:59 scheduler task 5f06865c (flow a8ad97f1): promoting objects (try 0): started
2021/07/08 16:49:59 scheduler task 07b1d571 (flow 47420793): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:59 scheduler task 07b1d571 (flow 47420793): unloading (try 0): started
2021/07/08 16:49:59 scheduler task 07b1d571 (flow 47420793): unloading list<val<.=588bebe4 35.7MiB> 35.7MiB>
2021/07/08 16:49:59 scheduler task 07b1d571 (flow 47420793): unloading val<.=aefd4b5e 35.4MiB>
2021/07/08 16:49:59 scheduler task 07b1d571 (flow 47420793): unloading val<.=2998e219 35.4MiB>
2021/07/08 16:49:59 scheduler task bffb2e9f (flow f9db9957): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:59 scheduler task bffb2e9f (flow f9db9957): transferring output (try 0): started
2021/07/08 16:49:59 scheduler task 909853ee (flow 3857dd67): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:59 scheduler task 07b1d571 (flow 47420793): unloaded list<val<.=588bebe4 35.7MiB> 35.7MiB>
2021/07/08 16:49:59 scheduler task 5f06865c (flow a8ad97f1): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:59 scheduler task 5a0c62bc (flow 2cec23de): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:59 scheduler task e071a634 (flow 3d4ece28): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:59 scheduler task 07b1d571 (flow 47420793): unloaded val<.=2998e219 35.4MiB>
2021/07/08 16:49:59 scheduler task 07b1d571 (flow 47420793): unloaded val<.=aefd4b5e 35.4MiB>
2021/07/08 16:49:59 scheduler task 07b1d571 (flow 47420793): unloading (try 0): successful, next state: complete
2021/07/08 16:49:59 scheduler task 909853ee (flow 3857dd67): promoting objects (try 0): started
2021/07/08 16:49:59 scheduler task 5f06865c (flow a8ad97f1): retrieving diagnostic output (try 0): started
2021/07/08 16:49:59 scheduler task 5a0c62bc (flow 2cec23de): unloading (try 0): started
2021/07/08 16:49:59 scheduler task 5a0c62bc (flow 2cec23de): unloading list<val<.=8f72a5a4 35.8MiB> 35.8MiB>
2021/07/08 16:49:59 scheduler task 5a0c62bc (flow 2cec23de): unloading val<.=1b14bd81 35.4MiB>
2021/07/08 16:49:59 scheduler task 5a0c62bc (flow 2cec23de): unloading val<.=4c428d25 35.4MiB>
2021/07/08 16:49:59 scheduler task e071a634 (flow 3d4ece28): promoting objects (try 0): started
2021/07/08 16:49:59  <-  n100.r03.s021.Main.out_file 47420793 ok     exec 5m8s 35.7MiB
2021/07/08 16:49:59 n100.r03.s021.Main.out_file 47420793 n100/r03/n100.r03.s021.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e001b750e7d8ac157da9ed207001358344599f6afcc6544119847d3146c9d312
	sha256:47420793c27b71a77441b691878a674f524bd313473ab982fbbcaaaa0a6d1f12
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/07b1d57159cb2aff42c309121ed4b90cc3a3bd9feba3834181ffeb9a278e5b87
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s021_output"
	    wget -O "n100.r03.s021_output/n100.r03.s021.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s021_output/n100.r03.s021.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s021_output/n100.r03.s021.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s021_output/n100.r03.s021.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s021_output/n100.r03.s021.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s021_output/n100.r03.s021.reference.fas" "n100.r03.s021_output/n100.r03.s021.fq1.fastq" "n100.r03.s021_output/n100.r03.s021.fq2.fastq" | samtools view -bS - > "n100.r03.s021_output/n100.r03.s021.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s021_output/n100.r03.s021.untrimmed.sorted.bam" "n100.r03.s021_output/n100.r03.s021.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s021_output/n100.r03.s021.untrimmed.sorted.bam" -b "n100.r03.s021_output/n100.r03.s021.primers.bed" -p "n100.r03.s021_output/n100.r03.s021.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s021_output/n100.r03.s021.trimmed.sorted.bam" "n100.r03.s021_output/n100.r03.s021.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s021_output/n100.r03.s021.reference.fas" "n100.r03.s021_output/n100.r03.s021.trimmed.sorted.bam" > "n100.r03.s021_output/n100.r03.s021.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s021_output/n100.r03.s021.reference.fas" --call-indels "n100.r03.s021_output/n100.r03.s021.trimmed.sorted.bam" > "n100.r03.s021_output/n100.r03.s021.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s021_output/n100.r03.s021.trimmed.sorted.bam" > "n100.r03.s021_output/n100.r03.s021.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s021_output/n100.r03.s021.depth.txt" "n100.r03.s021_output/n100.r03.s021.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s021_output/n100.r03.s021.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s021_output/n100.r03.s021.reference.fas" | bcftools consensus -m "n100.r03.s021_output/n100.r03.s021.low_depth.tsv" tmp.vcf.gz > "n100.r03.s021_output/n100.r03.s021.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s021_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:588bebe42b0b3101d03a7737f2c123d8b4b95041d01d0140f593e28a2ef602d8 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=20.1MiB max=127.2MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=689B max=2.0KiB
2021/07/08 16:49:59 scheduler task f752138d (flow 227ab454): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s021.tar.gz resources {}
2021/07/08 16:49:59  ->  n100.r03.s021.Main.cp_out_file 227ab454 exec extern s3://niema-test/n100/r03/n100.r03.s021.tar.gz 35.7MiB
2021/07/08 16:49:59 scheduler task 27950794 (flow 1e078488): transferring output (try 0): successful, next state: unloading
2021/07/08 16:49:59 scheduler task 27950794 (flow 1e078488): unloading (try 0): started
2021/07/08 16:49:59 scheduler task 27950794 (flow 1e078488): unloading list<val<.=bfab64ee 35.8MiB> 35.8MiB>
2021/07/08 16:49:59 scheduler task 27950794 (flow 1e078488): unloading val<.=81a9d6ac 35.4MiB>
2021/07/08 16:49:59 scheduler task 27950794 (flow 1e078488): unloading val<.=9030f39f 35.4MiB>
2021/07/08 16:49:59 scheduler task 909853ee (flow 3857dd67): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:59 scheduler task 909853ee (flow 3857dd67): retrieving diagnostic output (try 0): started
2021/07/08 16:49:59 scheduler task 13345758 (flow d19b125a): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:49:59 scheduler task 5f06865c (flow a8ad97f1): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:59 scheduler task 13345758 (flow d19b125a): promoting objects (try 0): started
2021/07/08 16:49:59 scheduler task 5f06865c (flow a8ad97f1): retrieving result (try 0): started
2021/07/08 16:49:59 scheduler task 5a0c62bc (flow 2cec23de): unloaded list<val<.=8f72a5a4 35.8MiB> 35.8MiB>
2021/07/08 16:49:59 scheduler task e071a634 (flow 3d4ece28): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:59 scheduler task 5a0c62bc (flow 2cec23de): unloaded val<.=1b14bd81 35.4MiB>
2021/07/08 16:49:59 scheduler task 5a0c62bc (flow 2cec23de): unloaded val<.=4c428d25 35.4MiB>
2021/07/08 16:49:59 scheduler task 5a0c62bc (flow 2cec23de): unloading (try 0): successful, next state: complete
2021/07/08 16:49:59 scheduler task e071a634 (flow 3d4ece28): retrieving diagnostic output (try 0): started
2021/07/08 16:49:59  <-  n100.r03.s042.Main.out_file 2cec23de ok     exec 5m2s 35.8MiB
2021/07/08 16:49:59 n100.r03.s042.Main.out_file 2cec23de n100/r03/n100.r03.s042.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:36b9a2ca973396ff76c996cdfbd1fd2c70fd27db2fcff9e1fa198134eda14a61
	sha256:2cec23de6da1bb0cce54c1582f626927c59b522b82c25035d70509a5b15c1934
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5a0c62bc226608c5293ac26c58dad9a630241a898bfae44fe06f1fc16d63b0ce
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s042_output"
	    wget -O "n100.r03.s042_output/n100.r03.s042.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s042_output/n100.r03.s042.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s042_output/n100.r03.s042.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s042_output/n100.r03.s042.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s042_output/n100.r03.s042.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s042_output/n100.r03.s042.reference.fas" "n100.r03.s042_output/n100.r03.s042.fq1.fastq" "n100.r03.s042_output/n100.r03.s042.fq2.fastq" | samtools view -bS - > "n100.r03.s042_output/n100.r03.s042.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s042_output/n100.r03.s042.untrimmed.sorted.bam" "n100.r03.s042_output/n100.r03.s042.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s042_output/n100.r03.s042.untrimmed.sorted.bam" -b "n100.r03.s042_output/n100.r03.s042.primers.bed" -p "n100.r03.s042_output/n100.r03.s042.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s042_output/n100.r03.s042.trimmed.sorted.bam" "n100.r03.s042_output/n100.r03.s042.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s042_output/n100.r03.s042.reference.fas" "n100.r03.s042_output/n100.r03.s042.trimmed.sorted.bam" > "n100.r03.s042_output/n100.r03.s042.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s042_output/n100.r03.s042.reference.fas" --call-indels "n100.r03.s042_output/n100.r03.s042.trimmed.sorted.bam" > "n100.r03.s042_output/n100.r03.s042.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s042_output/n100.r03.s042.trimmed.sorted.bam" > "n100.r03.s042_output/n100.r03.s042.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s042_output/n100.r03.s042.depth.txt" "n100.r03.s042_output/n100.r03.s042.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s042_output/n100.r03.s042.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s042_output/n100.r03.s042.reference.fas" | bcftools consensus -m "n100.r03.s042_output/n100.r03.s042.low_depth.tsv" tmp.vcf.gz > "n100.r03.s042_output/n100.r03.s042.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s042_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:8f72a5a4eb7c5424cf69945a6062ed46a90ea9a0fcd1da4cbe4ea37d71fe9c33 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.5MiB max=130.4MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=522B max=2.0KiB
2021/07/08 16:49:59 scheduler task 8be37bab (flow dcf01f00): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s042.tar.gz resources {}
2021/07/08 16:49:59  ->  n100.r03.s042.Main.cp_out_file dcf01f00 exec extern s3://niema-test/n100/r03/n100.r03.s042.tar.gz 35.8MiB
2021/07/08 16:49:59 scheduler task 5cccc37e (flow 5729da2b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:b994005a1e844b4978caf10b644fdaf2cb4cd83d40367a0d2036ba9a5b343f89 -> s3://niema-test/n100/r03/n100.r03.s098.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:49:59  <-  n100.r03.s098.Main.cp_out_file 5729da2b ok   extern 0s 35.7MiB
2021/07/08 16:49:59 scheduler task 27950794 (flow 1e078488): unloaded val<.=9030f39f 35.4MiB>
2021/07/08 16:49:59 scheduler task 27950794 (flow 1e078488): unloaded list<val<.=bfab64ee 35.8MiB> 35.8MiB>
2021/07/08 16:49:59 scheduler task 27950794 (flow 1e078488): unloaded val<.=81a9d6ac 35.4MiB>
2021/07/08 16:49:59 scheduler task 27950794 (flow 1e078488): unloading (try 0): successful, next state: complete
2021/07/08 16:49:59 scheduler task 909853ee (flow 3857dd67): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:59 scheduler task 13345758 (flow d19b125a): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:49:59  <-  n100.r03.s037.Main.out_file 1e078488 ok     exec 5m2s 35.8MiB
2021/07/08 16:49:59 n100.r03.s037.Main.out_file 1e078488 n100/r03/n100.r03.s037.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1754f0666eaa2729f8593c22f8b6307e45a93448fd5e58e1fc867d75a8a6ab87
	sha256:1e07848803b2839c1d755741b60b83dc749944d777b828d6637ff16f061da61f
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/27950794e8ba3154e6ae1bf3a1a7a9ba8e430b96beb6b1582a8adf4af071484f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s037_output"
	    wget -O "n100.r03.s037_output/n100.r03.s037.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s037_output/n100.r03.s037.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s037_output/n100.r03.s037.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s037_output/n100.r03.s037.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s037_output/n100.r03.s037.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s037_output/n100.r03.s037.reference.fas" "n100.r03.s037_output/n100.r03.s037.fq1.fastq" "n100.r03.s037_output/n100.r03.s037.fq2.fastq" | samtools view -bS - > "n100.r03.s037_output/n100.r03.s037.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s037_output/n100.r03.s037.untrimmed.sorted.bam" "n100.r03.s037_output/n100.r03.s037.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s037_output/n100.r03.s037.untrimmed.sorted.bam" -b "n100.r03.s037_output/n100.r03.s037.primers.bed" -p "n100.r03.s037_output/n100.r03.s037.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s037_output/n100.r03.s037.trimmed.sorted.bam" "n100.r03.s037_output/n100.r03.s037.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s037_output/n100.r03.s037.reference.fas" "n100.r03.s037_output/n100.r03.s037.trimmed.sorted.bam" > "n100.r03.s037_output/n100.r03.s037.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s037_output/n100.r03.s037.reference.fas" --call-indels "n100.r03.s037_output/n100.r03.s037.trimmed.sorted.bam" > "n100.r03.s037_output/n100.r03.s037.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s037_output/n100.r03.s037.trimmed.sorted.bam" > "n100.r03.s037_output/n100.r03.s037.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s037_output/n100.r03.s037.depth.txt" "n100.r03.s037_output/n100.r03.s037.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s037_output/n100.r03.s037.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s037_output/n100.r03.s037.reference.fas" | bcftools consensus -m "n100.r03.s037_output/n100.r03.s037.low_depth.tsv" tmp.vcf.gz > "n100.r03.s037_output/n100.r03.s037.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s037_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:bfab64eec8cb90d998c3b2e56647d0e51c866d0dc41e97bce53073794798fead 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.3MiB max=126.8MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=521B max=2.0KiB
2021/07/08 16:49:59 scheduler task 813264d5 (flow 72fb4d39): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s037.tar.gz resources {}
2021/07/08 16:49:59  ->  n100.r03.s037.Main.cp_out_file 72fb4d39 exec extern s3://niema-test/n100/r03/n100.r03.s037.tar.gz 35.8MiB
2021/07/08 16:49:59 scheduler task 5f06865c (flow a8ad97f1): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:59 scheduler task 909853ee (flow 3857dd67): retrieving result (try 0): started
2021/07/08 16:49:59 scheduler task 13345758 (flow d19b125a): retrieving diagnostic output (try 0): started
2021/07/08 16:49:59 scheduler task 5f06865c (flow a8ad97f1): transferring output (try 0): started
2021/07/08 16:49:59 scheduler task b4e13fa8 (flow 597de06f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9aafdcb5b31bbdb9625ab647564c25aaa5b3350dc230302e267997785bd5fa46 -> s3://niema-test/n100/r03/n100.r03.s023.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:49:59  <-  n100.r03.s023.Main.cp_out_file 597de06f ok   extern 0s 35.7MiB
2021/07/08 16:49:59 scheduler task e071a634 (flow 3d4ece28): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:59 scheduler task e071a634 (flow 3d4ece28): retrieving result (try 0): started
2021/07/08 16:49:59 scheduler task 909853ee (flow 3857dd67): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:59 scheduler task 909853ee (flow 3857dd67): transferring output (try 0): started
2021/07/08 16:49:59 scheduler task 13345758 (flow d19b125a): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:49:59 scheduler task 13345758 (flow d19b125a): retrieving result (try 0): started
2021/07/08 16:49:59 scheduler task e071a634 (flow 3d4ece28): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:49:59 scheduler task e071a634 (flow 3d4ece28): transferring output (try 0): started
2021/07/08 16:50:00 scheduler task bffb2e9f (flow f9db9957): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:00 scheduler task bffb2e9f (flow f9db9957): unloading (try 0): started
2021/07/08 16:50:00 scheduler task bffb2e9f (flow f9db9957): unloading list<val<.=77b70eb8 35.7MiB> 35.7MiB>
2021/07/08 16:50:00 scheduler task bffb2e9f (flow f9db9957): unloading val<.=4949dfc6 35.4MiB>
2021/07/08 16:50:00 scheduler task bffb2e9f (flow f9db9957): unloading val<.=a73b153e 35.4MiB>
2021/07/08 16:50:00 scheduler task 13345758 (flow d19b125a): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:00 scheduler task 13345758 (flow d19b125a): transferring output (try 0): started
2021/07/08 16:50:00 scheduler task bffb2e9f (flow f9db9957): unloaded val<.=4949dfc6 35.4MiB>
2021/07/08 16:50:00 scheduler task bffb2e9f (flow f9db9957): unloaded list<val<.=77b70eb8 35.7MiB> 35.7MiB>
2021/07/08 16:50:00 scheduler task bffb2e9f (flow f9db9957): unloaded val<.=a73b153e 35.4MiB>
2021/07/08 16:50:00 scheduler task bffb2e9f (flow f9db9957): unloading (try 0): successful, next state: complete
2021/07/08 16:50:00  <-  n100.r03.s029.Main.out_file f9db9957 ok     exec 4m54s 35.7MiB
2021/07/08 16:50:00 n100.r03.s029.Main.out_file f9db9957 n100/r03/n100.r03.s029.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:cebf9527cdde3c2163dfcdfa5bd7597359a2e21c3505dbac6019e336b02db979
	sha256:f9db995706b314123d2f70922d4f0015e62ba47e747328894cdedc5231d28b3b
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bffb2e9f44884c77bb3171fcd8aa920295c25c79326f8a8e8c747ff74b22b4be
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s029_output"
	    wget -O "n100.r03.s029_output/n100.r03.s029.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s029_output/n100.r03.s029.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s029_output/n100.r03.s029.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s029_output/n100.r03.s029.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s029_output/n100.r03.s029.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s029_output/n100.r03.s029.reference.fas" "n100.r03.s029_output/n100.r03.s029.fq1.fastq" "n100.r03.s029_output/n100.r03.s029.fq2.fastq" | samtools view -bS - > "n100.r03.s029_output/n100.r03.s029.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s029_output/n100.r03.s029.untrimmed.sorted.bam" "n100.r03.s029_output/n100.r03.s029.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s029_output/n100.r03.s029.untrimmed.sorted.bam" -b "n100.r03.s029_output/n100.r03.s029.primers.bed" -p "n100.r03.s029_output/n100.r03.s029.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s029_output/n100.r03.s029.trimmed.sorted.bam" "n100.r03.s029_output/n100.r03.s029.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s029_output/n100.r03.s029.reference.fas" "n100.r03.s029_output/n100.r03.s029.trimmed.sorted.bam" > "n100.r03.s029_output/n100.r03.s029.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s029_output/n100.r03.s029.reference.fas" --call-indels "n100.r03.s029_output/n100.r03.s029.trimmed.sorted.bam" > "n100.r03.s029_output/n100.r03.s029.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s029_output/n100.r03.s029.trimmed.sorted.bam" > "n100.r03.s029_output/n100.r03.s029.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s029_output/n100.r03.s029.depth.txt" "n100.r03.s029_output/n100.r03.s029.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s029_output/n100.r03.s029.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s029_output/n100.r03.s029.reference.fas" | bcftools consensus -m "n100.r03.s029_output/n100.r03.s029.low_depth.tsv" tmp.vcf.gz > "n100.r03.s029_output/n100.r03.s029.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s029_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:77b70eb8cbb4e20576af222216abb81281d5587993224477ed2b00d24e00f472 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.6MiB max=129.2MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=419B max=2.0KiB
2021/07/08 16:50:00 scheduler task 4e980e69 (flow d53cff82): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s029.tar.gz resources {}
2021/07/08 16:50:00  ->  n100.r03.s029.Main.cp_out_file d53cff82 exec extern s3://niema-test/n100/r03/n100.r03.s029.tar.gz 35.7MiB
2021/07/08 16:50:00 scheduler task a1c1b94c (flow 41d7dc2a): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:00 scheduler task a1c1b94c (flow 41d7dc2a): promoting objects (try 0): started
2021/07/08 16:50:00 scheduler task a1c1b94c (flow 41d7dc2a): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:00 scheduler task a1c1b94c (flow 41d7dc2a): retrieving diagnostic output (try 0): started
2021/07/08 16:50:00 scheduler task f752138d (flow 227ab454): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:588bebe42b0b3101d03a7737f2c123d8b4b95041d01d0140f593e28a2ef602d8 -> s3://niema-test/n100/r03/n100.r03.s021.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:50:00  <-  n100.r03.s021.Main.cp_out_file 227ab454 ok   extern 0s 35.7MiB
2021/07/08 16:50:00 scheduler task a1c1b94c (flow 41d7dc2a): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:00 scheduler task a1c1b94c (flow 41d7dc2a): retrieving result (try 0): started
2021/07/08 16:50:00 scheduler task 77c68cbe (flow 6fd9782d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:00 scheduler task 77c68cbe (flow 6fd9782d): promoting objects (try 0): started
2021/07/08 16:50:00 scheduler task 5f06865c (flow a8ad97f1): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:00 scheduler task a1c1b94c (flow 41d7dc2a): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:00 scheduler task 5f06865c (flow a8ad97f1): unloading (try 0): started
2021/07/08 16:50:00 scheduler task 5f06865c (flow a8ad97f1): unloading list<val<.=454e4f66 35.7MiB> 35.7MiB>
2021/07/08 16:50:00 scheduler task 5f06865c (flow a8ad97f1): unloading val<.=084f890a 35.4MiB>
2021/07/08 16:50:00 scheduler task 5f06865c (flow a8ad97f1): unloading val<.=10093c9b 35.4MiB>
2021/07/08 16:50:00 scheduler task a1c1b94c (flow 41d7dc2a): transferring output (try 0): started
2021/07/08 16:50:00 scheduler task 2cffe22c (flow 53f15bbb): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:00 scheduler task 2cffe22c (flow 53f15bbb): promoting objects (try 0): started
2021/07/08 16:50:00 scheduler task 77c68cbe (flow 6fd9782d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:00 scheduler task 77c68cbe (flow 6fd9782d): retrieving diagnostic output (try 0): started
2021/07/08 16:50:00 scheduler task 5f06865c (flow a8ad97f1): unloaded val<.=10093c9b 35.4MiB>
2021/07/08 16:50:00 scheduler task 5f06865c (flow a8ad97f1): unloaded list<val<.=454e4f66 35.7MiB> 35.7MiB>
2021/07/08 16:50:00 scheduler task 5f06865c (flow a8ad97f1): unloaded val<.=084f890a 35.4MiB>
2021/07/08 16:50:00 scheduler task 5f06865c (flow a8ad97f1): unloading (try 0): successful, next state: complete
2021/07/08 16:50:00 scheduler task 909853ee (flow 3857dd67): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:00  <-  n100.r03.s089.Main.out_file a8ad97f1 ok     exec 5m3s 35.7MiB
2021/07/08 16:50:00 n100.r03.s089.Main.out_file a8ad97f1 n100/r03/n100.r03.s089.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:4c928116fb1cb7799509b35aa8202c8197121fe34f4c183095b8c7d7e76812bf
	sha256:a8ad97f1f732fbdf1b9898eaaf86bb24baed7456a06395b8427729c9b1eb0863
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/5f06865c7d49377fa0ad9be463c47f1270264894fa4067adfeab9c69775480ee
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s089_output"
	    wget -O "n100.r03.s089_output/n100.r03.s089.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s089_output/n100.r03.s089.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s089_output/n100.r03.s089.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s089_output/n100.r03.s089.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s089_output/n100.r03.s089.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s089_output/n100.r03.s089.reference.fas" "n100.r03.s089_output/n100.r03.s089.fq1.fastq" "n100.r03.s089_output/n100.r03.s089.fq2.fastq" | samtools view -bS - > "n100.r03.s089_output/n100.r03.s089.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s089_output/n100.r03.s089.untrimmed.sorted.bam" "n100.r03.s089_output/n100.r03.s089.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s089_output/n100.r03.s089.untrimmed.sorted.bam" -b "n100.r03.s089_output/n100.r03.s089.primers.bed" -p "n100.r03.s089_output/n100.r03.s089.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s089_output/n100.r03.s089.trimmed.sorted.bam" "n100.r03.s089_output/n100.r03.s089.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s089_output/n100.r03.s089.reference.fas" "n100.r03.s089_output/n100.r03.s089.trimmed.sorted.bam" > "n100.r03.s089_output/n100.r03.s089.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s089_output/n100.r03.s089.reference.fas" --call-indels "n100.r03.s089_output/n100.r03.s089.trimmed.sorted.bam" > "n100.r03.s089_output/n100.r03.s089.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s089_output/n100.r03.s089.trimmed.sorted.bam" > "n100.r03.s089_output/n100.r03.s089.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s089_output/n100.r03.s089.depth.txt" "n100.r03.s089_output/n100.r03.s089.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s089_output/n100.r03.s089.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s089_output/n100.r03.s089.reference.fas" | bcftools consensus -m "n100.r03.s089_output/n100.r03.s089.low_depth.tsv" tmp.vcf.gz > "n100.r03.s089_output/n100.r03.s089.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s089_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:454e4f66f3004f365ffeb1780faf05f7794aaa3783ddc52954c23ec33e83b452 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.2MiB max=129.0MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 16:50:00 scheduler task c7f230db (flow 9070e4d3): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s089.tar.gz resources {}
2021/07/08 16:50:00  ->  n100.r03.s089.Main.cp_out_file 9070e4d3 exec extern s3://niema-test/n100/r03/n100.r03.s089.tar.gz 35.7MiB
2021/07/08 16:50:00 scheduler task 909853ee (flow 3857dd67): unloading (try 0): started
2021/07/08 16:50:00 scheduler task 909853ee (flow 3857dd67): unloading list<val<.=807582dd 35.8MiB> 35.8MiB>
2021/07/08 16:50:00 scheduler task 909853ee (flow 3857dd67): unloading val<.=d0f6a8c4 35.4MiB>
2021/07/08 16:50:00 scheduler task 909853ee (flow 3857dd67): unloading val<.=ae806d3a 35.4MiB>
2021/07/08 16:50:00 scheduler task 2cffe22c (flow 53f15bbb): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:00 scheduler task 77c68cbe (flow 6fd9782d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:00 scheduler task e071a634 (flow 3d4ece28): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:00 scheduler task 2cffe22c (flow 53f15bbb): retrieving diagnostic output (try 0): started
2021/07/08 16:50:00 scheduler task 77c68cbe (flow 6fd9782d): retrieving result (try 0): started
2021/07/08 16:50:00 scheduler task e071a634 (flow 3d4ece28): unloading (try 0): started
2021/07/08 16:50:00 scheduler task e071a634 (flow 3d4ece28): unloading list<val<.=ed2f04a0 35.8MiB> 35.8MiB>
2021/07/08 16:50:00 scheduler task e071a634 (flow 3d4ece28): unloading val<.=ce841175 35.4MiB>
2021/07/08 16:50:00 scheduler task e071a634 (flow 3d4ece28): unloading val<.=2963c212 35.4MiB>
2021/07/08 16:50:00 scheduler task 909853ee (flow 3857dd67): unloaded list<val<.=807582dd 35.8MiB> 35.8MiB>
2021/07/08 16:50:00 scheduler task 13345758 (flow d19b125a): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:00 scheduler task 909853ee (flow 3857dd67): unloaded val<.=ae806d3a 35.4MiB>
2021/07/08 16:50:00 scheduler task 909853ee (flow 3857dd67): unloaded val<.=d0f6a8c4 35.4MiB>
2021/07/08 16:50:00 scheduler task 909853ee (flow 3857dd67): unloading (try 0): successful, next state: complete
2021/07/08 16:50:00 scheduler task 13345758 (flow d19b125a): unloading (try 0): started
2021/07/08 16:50:00 scheduler task 13345758 (flow d19b125a): unloading list<val<.=6c9d0503 35.7MiB> 35.7MiB>
2021/07/08 16:50:00 scheduler task 13345758 (flow d19b125a): unloading val<.=1b67595e 35.4MiB>
2021/07/08 16:50:00 scheduler task 13345758 (flow d19b125a): unloading val<.=c52ec5ea 35.4MiB>
2021/07/08 16:50:00  <-  n100.r03.s095.Main.out_file 3857dd67 ok     exec 5m3s 35.8MiB
2021/07/08 16:50:00 n100.r03.s095.Main.out_file 3857dd67 n100/r03/n100.r03.s095.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:590f495e47f35d67e4e951d7ca13013c98851ecff5fd7f31e4d1fca7a9650f16
	sha256:3857dd6704ba3f1dd5d56424503399093392da925c6b02e67e8729320aee1bfe
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/909853ee28e3e3827ebda898abb44c562ce14d13c4d55898d49424ad608dec2b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s095_output"
	    wget -O "n100.r03.s095_output/n100.r03.s095.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s095_output/n100.r03.s095.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s095_output/n100.r03.s095.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s095_output/n100.r03.s095.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s095_output/n100.r03.s095.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s095_output/n100.r03.s095.reference.fas" "n100.r03.s095_output/n100.r03.s095.fq1.fastq" "n100.r03.s095_output/n100.r03.s095.fq2.fastq" | samtools view -bS - > "n100.r03.s095_output/n100.r03.s095.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s095_output/n100.r03.s095.untrimmed.sorted.bam" "n100.r03.s095_output/n100.r03.s095.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s095_output/n100.r03.s095.untrimmed.sorted.bam" -b "n100.r03.s095_output/n100.r03.s095.primers.bed" -p "n100.r03.s095_output/n100.r03.s095.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s095_output/n100.r03.s095.trimmed.sorted.bam" "n100.r03.s095_output/n100.r03.s095.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s095_output/n100.r03.s095.reference.fas" "n100.r03.s095_output/n100.r03.s095.trimmed.sorted.bam" > "n100.r03.s095_output/n100.r03.s095.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s095_output/n100.r03.s095.reference.fas" --call-indels "n100.r03.s095_output/n100.r03.s095.trimmed.sorted.bam" > "n100.r03.s095_output/n100.r03.s095.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s095_output/n100.r03.s095.trimmed.sorted.bam" > "n100.r03.s095_output/n100.r03.s095.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s095_output/n100.r03.s095.depth.txt" "n100.r03.s095_output/n100.r03.s095.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s095_output/n100.r03.s095.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s095_output/n100.r03.s095.reference.fas" | bcftools consensus -m "n100.r03.s095_output/n100.r03.s095.low_depth.tsv" tmp.vcf.gz > "n100.r03.s095_output/n100.r03.s095.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s095_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:807582dd27c8e37a28082a96e48dd54cbc219307cd4b6dd095ba7065a3a3e83e 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.2MiB max=125.3MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 16:50:00 scheduler task c4380085 (flow 9b8fed89): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s095.tar.gz resources {}
2021/07/08 16:50:00  ->  n100.r03.s095.Main.cp_out_file 9b8fed89 exec extern s3://niema-test/n100/r03/n100.r03.s095.tar.gz 35.8MiB
2021/07/08 16:50:00 scheduler task 2cffe22c (flow 53f15bbb): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:00 scheduler task 2cffe22c (flow 53f15bbb): retrieving result (try 0): started
2021/07/08 16:50:00 scheduler task 21f0e678 (flow e70dcb06): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:00 scheduler task 21f0e678 (flow e70dcb06): promoting objects (try 0): started
2021/07/08 16:50:00 scheduler task e071a634 (flow 3d4ece28): unloaded val<.=ce841175 35.4MiB>
2021/07/08 16:50:00 scheduler task e071a634 (flow 3d4ece28): unloaded list<val<.=ed2f04a0 35.8MiB> 35.8MiB>
2021/07/08 16:50:00 scheduler task 77c68cbe (flow 6fd9782d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:00 scheduler task e071a634 (flow 3d4ece28): unloaded val<.=2963c212 35.4MiB>
2021/07/08 16:50:00 scheduler task e071a634 (flow 3d4ece28): unloading (try 0): successful, next state: complete
2021/07/08 16:50:00 scheduler task 77c68cbe (flow 6fd9782d): transferring output (try 0): started
2021/07/08 16:50:00  <-  n100.r03.s004.Main.out_file 3d4ece28 ok     exec 5m3s 35.8MiB
2021/07/08 16:50:00 n100.r03.s004.Main.out_file 3d4ece28 n100/r03/n100.r03.s004.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7c964cfc4cb696222030271c84b0adfc1a8b65a2582aa8a3efc7147a8c742c98
	sha256:3d4ece28a7986b631eb3e8bb6e1ef1b1614b18150c2348a3a79e1d53ab126b11
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e071a6344f0ce705c8ee6324ded41ec456e1087c596885ac813349046b9b1a4d
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s004_output"
	    wget -O "n100.r03.s004_output/n100.r03.s004.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s004_output/n100.r03.s004.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s004_output/n100.r03.s004.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s004_output/n100.r03.s004.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s004_output/n100.r03.s004.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s004_output/n100.r03.s004.reference.fas" "n100.r03.s004_output/n100.r03.s004.fq1.fastq" "n100.r03.s004_output/n100.r03.s004.fq2.fastq" | samtools view -bS - > "n100.r03.s004_output/n100.r03.s004.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s004_output/n100.r03.s004.untrimmed.sorted.bam" "n100.r03.s004_output/n100.r03.s004.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s004_output/n100.r03.s004.untrimmed.sorted.bam" -b "n100.r03.s004_output/n100.r03.s004.primers.bed" -p "n100.r03.s004_output/n100.r03.s004.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s004_output/n100.r03.s004.trimmed.sorted.bam" "n100.r03.s004_output/n100.r03.s004.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s004_output/n100.r03.s004.reference.fas" "n100.r03.s004_output/n100.r03.s004.trimmed.sorted.bam" > "n100.r03.s004_output/n100.r03.s004.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s004_output/n100.r03.s004.reference.fas" --call-indels "n100.r03.s004_output/n100.r03.s004.trimmed.sorted.bam" > "n100.r03.s004_output/n100.r03.s004.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s004_output/n100.r03.s004.trimmed.sorted.bam" > "n100.r03.s004_output/n100.r03.s004.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s004_output/n100.r03.s004.depth.txt" "n100.r03.s004_output/n100.r03.s004.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s004_output/n100.r03.s004.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s004_output/n100.r03.s004.reference.fas" | bcftools consensus -m "n100.r03.s004_output/n100.r03.s004.low_depth.tsv" tmp.vcf.gz > "n100.r03.s004_output/n100.r03.s004.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s004_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:ed2f04a03e282e86db4f8f8332d32d83c279276f6f130adf1911b5e09fb89709 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.6MiB max=128.5MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=695B max=2.0KiB
2021/07/08 16:50:00 scheduler task e18366f1 (flow 89102b03): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s004.tar.gz resources {}
2021/07/08 16:50:00  ->  n100.r03.s004.Main.cp_out_file 89102b03 exec extern s3://niema-test/n100/r03/n100.r03.s004.tar.gz 35.8MiB
2021/07/08 16:50:00 scheduler task 13345758 (flow d19b125a): unloaded val<.=c52ec5ea 35.4MiB>
2021/07/08 16:50:00 scheduler task 13345758 (flow d19b125a): unloaded list<val<.=6c9d0503 35.7MiB> 35.7MiB>
2021/07/08 16:50:00 scheduler task 8be37bab (flow dcf01f00): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:8f72a5a4eb7c5424cf69945a6062ed46a90ea9a0fcd1da4cbe4ea37d71fe9c33 -> s3://niema-test/n100/r03/n100.r03.s042.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:50:00 scheduler task 13345758 (flow d19b125a): unloaded val<.=1b67595e 35.4MiB>
2021/07/08 16:50:00 scheduler task 13345758 (flow d19b125a): unloading (try 0): successful, next state: complete
2021/07/08 16:50:00  <-  n100.r03.s042.Main.cp_out_file dcf01f00 ok   extern 0s 35.8MiB
2021/07/08 16:50:00  <-  n100.r03.s056.Main.out_file d19b125a ok     exec 5m3s 35.7MiB
2021/07/08 16:50:00 n100.r03.s056.Main.out_file d19b125a n100/r03/n100.r03.s056.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8eb17cc1e3c0a5060ad6099a016e4c4744363a7d9cda0690d6b339be3b94166f
	sha256:d19b125a8964fc8262608d3543eb8a431c23b17dc197c2c8b2dc98090ff041f2
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/133457588da65c11fc1d2def18f477ae4708af193012cfd64d5c87db0e27d137
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s056_output"
	    wget -O "n100.r03.s056_output/n100.r03.s056.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s056_output/n100.r03.s056.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s056_output/n100.r03.s056.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s056_output/n100.r03.s056.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s056_output/n100.r03.s056.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s056_output/n100.r03.s056.reference.fas" "n100.r03.s056_output/n100.r03.s056.fq1.fastq" "n100.r03.s056_output/n100.r03.s056.fq2.fastq" | samtools view -bS - > "n100.r03.s056_output/n100.r03.s056.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s056_output/n100.r03.s056.untrimmed.sorted.bam" "n100.r03.s056_output/n100.r03.s056.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s056_output/n100.r03.s056.untrimmed.sorted.bam" -b "n100.r03.s056_output/n100.r03.s056.primers.bed" -p "n100.r03.s056_output/n100.r03.s056.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s056_output/n100.r03.s056.trimmed.sorted.bam" "n100.r03.s056_output/n100.r03.s056.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s056_output/n100.r03.s056.reference.fas" "n100.r03.s056_output/n100.r03.s056.trimmed.sorted.bam" > "n100.r03.s056_output/n100.r03.s056.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s056_output/n100.r03.s056.reference.fas" --call-indels "n100.r03.s056_output/n100.r03.s056.trimmed.sorted.bam" > "n100.r03.s056_output/n100.r03.s056.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s056_output/n100.r03.s056.trimmed.sorted.bam" > "n100.r03.s056_output/n100.r03.s056.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s056_output/n100.r03.s056.depth.txt" "n100.r03.s056_output/n100.r03.s056.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s056_output/n100.r03.s056.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s056_output/n100.r03.s056.reference.fas" | bcftools consensus -m "n100.r03.s056_output/n100.r03.s056.low_depth.tsv" tmp.vcf.gz > "n100.r03.s056_output/n100.r03.s056.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s056_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:6c9d0503346a6ab34cae5d3b2f136d7ec74276f2a2b3b9103aa6294324250ce5 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.5MiB max=124.9MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 16:50:00 scheduler task 48fd88e3 (flow 226d0154): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s056.tar.gz resources {}
2021/07/08 16:50:00  ->  n100.r03.s056.Main.cp_out_file 226d0154 exec extern s3://niema-test/n100/r03/n100.r03.s056.tar.gz 35.7MiB
2021/07/08 16:50:00 scheduler task 2cffe22c (flow 53f15bbb): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:00 scheduler task 2cffe22c (flow 53f15bbb): transferring output (try 0): started
2021/07/08 16:50:00 scheduler task 21f0e678 (flow e70dcb06): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:00 scheduler task 21f0e678 (flow e70dcb06): retrieving diagnostic output (try 0): started
2021/07/08 16:50:00 scheduler task 21f0e678 (flow e70dcb06): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:00 scheduler task 21f0e678 (flow e70dcb06): retrieving result (try 0): started
2021/07/08 16:50:00 scheduler task 813264d5 (flow 72fb4d39): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:bfab64eec8cb90d998c3b2e56647d0e51c866d0dc41e97bce53073794798fead -> s3://niema-test/n100/r03/n100.r03.s037.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:50:00  <-  n100.r03.s037.Main.cp_out_file 72fb4d39 ok   extern 0s 35.8MiB
2021/07/08 16:50:00 scheduler task a1c1b94c (flow 41d7dc2a): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:00 scheduler task 4e980e69 (flow d53cff82): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:77b70eb8cbb4e20576af222216abb81281d5587993224477ed2b00d24e00f472 -> s3://niema-test/n100/r03/n100.r03.s029.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:50:00  <-  n100.r03.s029.Main.cp_out_file d53cff82 ok   extern 0s 35.7MiB
2021/07/08 16:50:00 scheduler task a1c1b94c (flow 41d7dc2a): unloading (try 0): started
2021/07/08 16:50:00 scheduler task a1c1b94c (flow 41d7dc2a): unloading list<val<.=0bd79a66 35.7MiB> 35.7MiB>
2021/07/08 16:50:00 scheduler task a1c1b94c (flow 41d7dc2a): unloading val<.=dc7783c4 35.4MiB>
2021/07/08 16:50:00 scheduler task a1c1b94c (flow 41d7dc2a): unloading val<.=23cd70d2 35.4MiB>
2021/07/08 16:50:00 scheduler task 21f0e678 (flow e70dcb06): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:00 scheduler task 21f0e678 (flow e70dcb06): transferring output (try 0): started
2021/07/08 16:50:01 scheduler task a1c1b94c (flow 41d7dc2a): unloaded list<val<.=0bd79a66 35.7MiB> 35.7MiB>
2021/07/08 16:50:01 scheduler task a1c1b94c (flow 41d7dc2a): unloaded val<.=dc7783c4 35.4MiB>
2021/07/08 16:50:01 scheduler task a1c1b94c (flow 41d7dc2a): unloaded val<.=23cd70d2 35.4MiB>
2021/07/08 16:50:01 scheduler task a1c1b94c (flow 41d7dc2a): unloading (try 0): successful, next state: complete
2021/07/08 16:50:01  <-  n100.r03.s059.Main.out_file 41d7dc2a ok     exec 4m55s 35.7MiB
2021/07/08 16:50:01 n100.r03.s059.Main.out_file 41d7dc2a n100/r03/n100.r03.s059.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:668d18ab5b78b922026fe2ca2e89d5a8a3367b80ad22727df17009ef54cc0814
	sha256:41d7dc2a99583ea815dcc7ddd39bd70c0f166cef085e93fcc168233c79a70468
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a1c1b94cc02a5d8bfcd660bd41a05fb09ecea0668c3aaa02beffaf0edd4eb8e9
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s059_output"
	    wget -O "n100.r03.s059_output/n100.r03.s059.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s059_output/n100.r03.s059.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s059_output/n100.r03.s059.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s059_output/n100.r03.s059.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s059_output/n100.r03.s059.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s059_output/n100.r03.s059.reference.fas" "n100.r03.s059_output/n100.r03.s059.fq1.fastq" "n100.r03.s059_output/n100.r03.s059.fq2.fastq" | samtools view -bS - > "n100.r03.s059_output/n100.r03.s059.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s059_output/n100.r03.s059.untrimmed.sorted.bam" "n100.r03.s059_output/n100.r03.s059.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s059_output/n100.r03.s059.untrimmed.sorted.bam" -b "n100.r03.s059_output/n100.r03.s059.primers.bed" -p "n100.r03.s059_output/n100.r03.s059.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s059_output/n100.r03.s059.trimmed.sorted.bam" "n100.r03.s059_output/n100.r03.s059.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s059_output/n100.r03.s059.reference.fas" "n100.r03.s059_output/n100.r03.s059.trimmed.sorted.bam" > "n100.r03.s059_output/n100.r03.s059.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s059_output/n100.r03.s059.reference.fas" --call-indels "n100.r03.s059_output/n100.r03.s059.trimmed.sorted.bam" > "n100.r03.s059_output/n100.r03.s059.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s059_output/n100.r03.s059.trimmed.sorted.bam" > "n100.r03.s059_output/n100.r03.s059.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s059_output/n100.r03.s059.depth.txt" "n100.r03.s059_output/n100.r03.s059.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s059_output/n100.r03.s059.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s059_output/n100.r03.s059.reference.fas" | bcftools consensus -m "n100.r03.s059_output/n100.r03.s059.low_depth.tsv" tmp.vcf.gz > "n100.r03.s059_output/n100.r03.s059.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s059_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:0bd79a66c1b0145a848bfe8c6eeaf80d59de53fe3f0347bdddc8fb55793caf4c 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.7MiB max=126.3MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 16:50:01 scheduler task f33de464 (flow 00238322): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s059.tar.gz resources {}
2021/07/08 16:50:01  ->  n100.r03.s059.Main.cp_out_file 00238322 exec extern s3://niema-test/n100/r03/n100.r03.s059.tar.gz 35.7MiB
2021/07/08 16:50:01 scheduler task 77c68cbe (flow 6fd9782d): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:01 scheduler task 77c68cbe (flow 6fd9782d): unloading (try 0): started
2021/07/08 16:50:01 scheduler task 77c68cbe (flow 6fd9782d): unloading list<val<.=10851c74 35.8MiB> 35.8MiB>
2021/07/08 16:50:01 scheduler task 77c68cbe (flow 6fd9782d): unloading val<.=1700afce 35.4MiB>
2021/07/08 16:50:01 scheduler task 77c68cbe (flow 6fd9782d): unloading val<.=f0dcb327 35.4MiB>
2021/07/08 16:50:01 scheduler task d3c3f174 (flow eb36d115): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:01 scheduler task d3c3f174 (flow eb36d115): promoting objects (try 0): started
2021/07/08 16:50:01 scheduler task c81055a4 (flow d0b7bfb6): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:01 scheduler task c81055a4 (flow d0b7bfb6): promoting objects (try 0): started
2021/07/08 16:50:01 scheduler task c7f230db (flow 9070e4d3): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:454e4f66f3004f365ffeb1780faf05f7794aaa3783ddc52954c23ec33e83b452 -> s3://niema-test/n100/r03/n100.r03.s089.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:50:01  <-  n100.r03.s089.Main.cp_out_file 9070e4d3 ok   extern 0s 35.7MiB
2021/07/08 16:50:01 scheduler task 77c68cbe (flow 6fd9782d): unloaded list<val<.=10851c74 35.8MiB> 35.8MiB>
2021/07/08 16:50:01 scheduler task 77c68cbe (flow 6fd9782d): unloaded val<.=1700afce 35.4MiB>
2021/07/08 16:50:01 scheduler task 77c68cbe (flow 6fd9782d): unloaded val<.=f0dcb327 35.4MiB>
2021/07/08 16:50:01 scheduler task 77c68cbe (flow 6fd9782d): unloading (try 0): successful, next state: complete
2021/07/08 16:50:01  <-  n100.r03.s060.Main.out_file 6fd9782d ok     exec 4m56s 35.8MiB
2021/07/08 16:50:01 n100.r03.s060.Main.out_file 6fd9782d n100/r03/n100.r03.s060.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:37c377b862fe8e5ab35e4bedfaab256975f3593dcbee1eae417c3dadc1bdd2d2
	sha256:6fd9782dfd4d28049cae8769d8cee3d55f32b71107a7678b50cdbf5bde05de44
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/77c68cbe719d415f33bbe430aed9bea10db1f25d4eddbf23b9688484afb7efa7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s060_output"
	    wget -O "n100.r03.s060_output/n100.r03.s060.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s060_output/n100.r03.s060.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s060_output/n100.r03.s060.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s060_output/n100.r03.s060.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s060_output/n100.r03.s060.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s060_output/n100.r03.s060.reference.fas" "n100.r03.s060_output/n100.r03.s060.fq1.fastq" "n100.r03.s060_output/n100.r03.s060.fq2.fastq" | samtools view -bS - > "n100.r03.s060_output/n100.r03.s060.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s060_output/n100.r03.s060.untrimmed.sorted.bam" "n100.r03.s060_output/n100.r03.s060.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s060_output/n100.r03.s060.untrimmed.sorted.bam" -b "n100.r03.s060_output/n100.r03.s060.primers.bed" -p "n100.r03.s060_output/n100.r03.s060.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s060_output/n100.r03.s060.trimmed.sorted.bam" "n100.r03.s060_output/n100.r03.s060.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s060_output/n100.r03.s060.reference.fas" "n100.r03.s060_output/n100.r03.s060.trimmed.sorted.bam" > "n100.r03.s060_output/n100.r03.s060.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s060_output/n100.r03.s060.reference.fas" --call-indels "n100.r03.s060_output/n100.r03.s060.trimmed.sorted.bam" > "n100.r03.s060_output/n100.r03.s060.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s060_output/n100.r03.s060.trimmed.sorted.bam" > "n100.r03.s060_output/n100.r03.s060.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s060_output/n100.r03.s060.depth.txt" "n100.r03.s060_output/n100.r03.s060.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s060_output/n100.r03.s060.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s060_output/n100.r03.s060.reference.fas" | bcftools consensus -m "n100.r03.s060_output/n100.r03.s060.low_depth.tsv" tmp.vcf.gz > "n100.r03.s060_output/n100.r03.s060.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s060_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:10851c74081340b6d6bbd953d77c5842c77043b74c98a48d93ed39bb26b0174b 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.9MiB max=124.2MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=419B max=2.0KiB
2021/07/08 16:50:01 scheduler task 3b890c43 (flow 9cb869e4): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s060.tar.gz resources {}
2021/07/08 16:50:01  ->  n100.r03.s060.Main.cp_out_file 9cb869e4 exec extern s3://niema-test/n100/r03/n100.r03.s060.tar.gz 35.8MiB
2021/07/08 16:50:01 scheduler task d3c3f174 (flow eb36d115): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:01 scheduler task 2cffe22c (flow 53f15bbb): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:01 scheduler task d3c3f174 (flow eb36d115): retrieving diagnostic output (try 0): started
2021/07/08 16:50:01 scheduler task cc866163 (flow 7b73dcd0): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:01 scheduler task 2cffe22c (flow 53f15bbb): unloading (try 0): started
2021/07/08 16:50:01 scheduler task 2cffe22c (flow 53f15bbb): unloading list<val<.=afdc560e 35.7MiB> 35.7MiB>
2021/07/08 16:50:01 scheduler task 2cffe22c (flow 53f15bbb): unloading val<.=2d2249e9 35.4MiB>
2021/07/08 16:50:01 scheduler task 2cffe22c (flow 53f15bbb): unloading val<.=2c97a10a 35.4MiB>
2021/07/08 16:50:01 scheduler task c81055a4 (flow d0b7bfb6): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:01 scheduler task cc866163 (flow 7b73dcd0): promoting objects (try 0): started
2021/07/08 16:50:01 scheduler task c81055a4 (flow d0b7bfb6): retrieving diagnostic output (try 0): started
2021/07/08 16:50:01 scheduler task d3c3f174 (flow eb36d115): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:01 scheduler task d3c3f174 (flow eb36d115): retrieving result (try 0): started
2021/07/08 16:50:01 scheduler task c4380085 (flow 9b8fed89): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:807582dd27c8e37a28082a96e48dd54cbc219307cd4b6dd095ba7065a3a3e83e -> s3://niema-test/n100/r03/n100.r03.s095.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:50:01  <-  n100.r03.s095.Main.cp_out_file 9b8fed89 ok   extern 0s 35.8MiB
2021/07/08 16:50:01 scheduler task 2cffe22c (flow 53f15bbb): unloaded list<val<.=afdc560e 35.7MiB> 35.7MiB>
2021/07/08 16:50:01 scheduler task 2cffe22c (flow 53f15bbb): unloaded val<.=2d2249e9 35.4MiB>
2021/07/08 16:50:01 scheduler task 2cffe22c (flow 53f15bbb): unloaded val<.=2c97a10a 35.4MiB>
2021/07/08 16:50:01 scheduler task 2cffe22c (flow 53f15bbb): unloading (try 0): successful, next state: complete
2021/07/08 16:50:01 scheduler task cc866163 (flow 7b73dcd0): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:01  <-  n100.r03.s080.Main.out_file 53f15bbb ok     exec 4m56s 35.7MiB
2021/07/08 16:50:01 n100.r03.s080.Main.out_file 53f15bbb n100/r03/n100.r03.s080.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:321862bb930d2314b8a04fd48aaab35c19f86d725a87df7dd7e20e5bb5f512ad
	sha256:53f15bbb70db4ce07bb6337bbd435e20a7647f07e84355227195f00cc6ca9c77
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2cffe22ce5382cbe63b6f9c2884353e59e1938dee1edf3bbbaa7c11d09fc1010
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s080_output"
	    wget -O "n100.r03.s080_output/n100.r03.s080.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s080_output/n100.r03.s080.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s080_output/n100.r03.s080.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s080_output/n100.r03.s080.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s080_output/n100.r03.s080.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s080_output/n100.r03.s080.reference.fas" "n100.r03.s080_output/n100.r03.s080.fq1.fastq" "n100.r03.s080_output/n100.r03.s080.fq2.fastq" | samtools view -bS - > "n100.r03.s080_output/n100.r03.s080.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s080_output/n100.r03.s080.untrimmed.sorted.bam" "n100.r03.s080_output/n100.r03.s080.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s080_output/n100.r03.s080.untrimmed.sorted.bam" -b "n100.r03.s080_output/n100.r03.s080.primers.bed" -p "n100.r03.s080_output/n100.r03.s080.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s080_output/n100.r03.s080.trimmed.sorted.bam" "n100.r03.s080_output/n100.r03.s080.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s080_output/n100.r03.s080.reference.fas" "n100.r03.s080_output/n100.r03.s080.trimmed.sorted.bam" > "n100.r03.s080_output/n100.r03.s080.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s080_output/n100.r03.s080.reference.fas" --call-indels "n100.r03.s080_output/n100.r03.s080.trimmed.sorted.bam" > "n100.r03.s080_output/n100.r03.s080.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s080_output/n100.r03.s080.trimmed.sorted.bam" > "n100.r03.s080_output/n100.r03.s080.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s080_output/n100.r03.s080.depth.txt" "n100.r03.s080_output/n100.r03.s080.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s080_output/n100.r03.s080.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s080_output/n100.r03.s080.reference.fas" | bcftools consensus -m "n100.r03.s080_output/n100.r03.s080.low_depth.tsv" tmp.vcf.gz > "n100.r03.s080_output/n100.r03.s080.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s080_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:afdc560ebdbebb863c87cca3a65a4cd08b6d7421af3a4fc0704d68e4615744c6 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.7MiB max=128.9MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 16:50:01 scheduler task a012a678 (flow c8d67eb9): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s080.tar.gz resources {}
2021/07/08 16:50:01  ->  n100.r03.s080.Main.cp_out_file c8d67eb9 exec extern s3://niema-test/n100/r03/n100.r03.s080.tar.gz 35.7MiB
2021/07/08 16:50:01 scheduler task cc866163 (flow 7b73dcd0): retrieving diagnostic output (try 0): started
2021/07/08 16:50:01 scheduler task c81055a4 (flow d0b7bfb6): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:01 scheduler task c81055a4 (flow d0b7bfb6): retrieving result (try 0): started
2021/07/08 16:50:01 scheduler task e18366f1 (flow 89102b03): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:ed2f04a03e282e86db4f8f8332d32d83c279276f6f130adf1911b5e09fb89709 -> s3://niema-test/n100/r03/n100.r03.s004.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:50:01  <-  n100.r03.s004.Main.cp_out_file 89102b03 ok   extern 0s 35.8MiB
2021/07/08 16:50:01 scheduler task 21f0e678 (flow e70dcb06): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:01 scheduler task 21f0e678 (flow e70dcb06): unloading (try 0): started
2021/07/08 16:50:01 scheduler task 21f0e678 (flow e70dcb06): unloading list<val<.=1dba1de4 35.8MiB> 35.8MiB>
2021/07/08 16:50:01 scheduler task 21f0e678 (flow e70dcb06): unloading val<.=3b763edc 35.4MiB>
2021/07/08 16:50:01 scheduler task 21f0e678 (flow e70dcb06): unloading val<.=4bf5ddde 35.4MiB>
2021/07/08 16:50:01 scheduler task d3c3f174 (flow eb36d115): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:01 scheduler task d3c3f174 (flow eb36d115): transferring output (try 0): started
2021/07/08 16:50:01 scheduler task c81055a4 (flow d0b7bfb6): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:01 scheduler task cc866163 (flow 7b73dcd0): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:01 scheduler task c81055a4 (flow d0b7bfb6): transferring output (try 0): started
2021/07/08 16:50:01 scheduler task cc866163 (flow 7b73dcd0): retrieving result (try 0): started
2021/07/08 16:50:01 scheduler task 21f0e678 (flow e70dcb06): unloaded val<.=4bf5ddde 35.4MiB>
2021/07/08 16:50:01 scheduler task 21f0e678 (flow e70dcb06): unloaded list<val<.=1dba1de4 35.8MiB> 35.8MiB>
2021/07/08 16:50:01 scheduler task 21f0e678 (flow e70dcb06): unloaded val<.=3b763edc 35.4MiB>
2021/07/08 16:50:01 scheduler task 21f0e678 (flow e70dcb06): unloading (try 0): successful, next state: complete
2021/07/08 16:50:01  <-  n100.r03.s053.Main.out_file e70dcb06 ok     exec 5m4s 35.8MiB
2021/07/08 16:50:01 n100.r03.s053.Main.out_file e70dcb06 n100/r03/n100.r03.s053.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:e3ba1195a30b2d0158fbe91d581a45181b9ec2296437c909c038d5d11a576d80
	sha256:e70dcb06a6b4a5cf2f2d74373c22798d4234f1dc40c9b0efd218774e9a5fc8f8
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/21f0e678840c16a444561921d2b22c7914a079f387b8fbe4d24b85db092b47c1
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s053_output"
	    wget -O "n100.r03.s053_output/n100.r03.s053.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s053_output/n100.r03.s053.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s053_output/n100.r03.s053.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s053_output/n100.r03.s053.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s053_output/n100.r03.s053.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s053_output/n100.r03.s053.reference.fas" "n100.r03.s053_output/n100.r03.s053.fq1.fastq" "n100.r03.s053_output/n100.r03.s053.fq2.fastq" | samtools view -bS - > "n100.r03.s053_output/n100.r03.s053.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s053_output/n100.r03.s053.untrimmed.sorted.bam" "n100.r03.s053_output/n100.r03.s053.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s053_output/n100.r03.s053.untrimmed.sorted.bam" -b "n100.r03.s053_output/n100.r03.s053.primers.bed" -p "n100.r03.s053_output/n100.r03.s053.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s053_output/n100.r03.s053.trimmed.sorted.bam" "n100.r03.s053_output/n100.r03.s053.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s053_output/n100.r03.s053.reference.fas" "n100.r03.s053_output/n100.r03.s053.trimmed.sorted.bam" > "n100.r03.s053_output/n100.r03.s053.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s053_output/n100.r03.s053.reference.fas" --call-indels "n100.r03.s053_output/n100.r03.s053.trimmed.sorted.bam" > "n100.r03.s053_output/n100.r03.s053.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s053_output/n100.r03.s053.trimmed.sorted.bam" > "n100.r03.s053_output/n100.r03.s053.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s053_output/n100.r03.s053.depth.txt" "n100.r03.s053_output/n100.r03.s053.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s053_output/n100.r03.s053.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s053_output/n100.r03.s053.reference.fas" | bcftools consensus -m "n100.r03.s053_output/n100.r03.s053.low_depth.tsv" tmp.vcf.gz > "n100.r03.s053_output/n100.r03.s053.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s053_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:1dba1de42d1d8a3671579602c9873fca7ece64068a5c7e061e7f8b0f8fc6cd41 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.9MiB max=128.4MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=516B max=2.0KiB
2021/07/08 16:50:01 scheduler task 9d46551d (flow dc9e38c3): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s053.tar.gz resources {}
2021/07/08 16:50:01  ->  n100.r03.s053.Main.cp_out_file dc9e38c3 exec extern s3://niema-test/n100/r03/n100.r03.s053.tar.gz 35.8MiB
2021/07/08 16:50:01 scheduler task cc866163 (flow 7b73dcd0): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:01 scheduler task cc866163 (flow 7b73dcd0): transferring output (try 0): started
2021/07/08 16:50:01 scheduler task 48fd88e3 (flow 226d0154): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:6c9d0503346a6ab34cae5d3b2f136d7ec74276f2a2b3b9103aa6294324250ce5 -> s3://niema-test/n100/r03/n100.r03.s056.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:50:01  <-  n100.r03.s056.Main.cp_out_file 226d0154 ok   extern 0s 35.7MiB
2021/07/08 16:50:02 scheduler task 3b890c43 (flow 9cb869e4): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:10851c74081340b6d6bbd953d77c5842c77043b74c98a48d93ed39bb26b0174b -> s3://niema-test/n100/r03/n100.r03.s060.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:50:02  <-  n100.r03.s060.Main.cp_out_file 9cb869e4 ok   extern 0s 35.8MiB
2021/07/08 16:50:02 scheduler task cffdf651 (flow 46b547c0): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:02 scheduler task cffdf651 (flow 46b547c0): promoting objects (try 0): started
2021/07/08 16:50:02 scheduler task cffdf651 (flow 46b547c0): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:02 scheduler task cffdf651 (flow 46b547c0): retrieving diagnostic output (try 0): started
2021/07/08 16:50:02 scheduler task d3c3f174 (flow eb36d115): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:02 scheduler task c81055a4 (flow d0b7bfb6): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:02 scheduler task d3c3f174 (flow eb36d115): unloading (try 0): started
2021/07/08 16:50:02 scheduler task d3c3f174 (flow eb36d115): unloading list<val<.=72168003 35.7MiB> 35.7MiB>
2021/07/08 16:50:02 scheduler task d3c3f174 (flow eb36d115): unloading val<.=e574ab0a 35.4MiB>
2021/07/08 16:50:02 scheduler task d3c3f174 (flow eb36d115): unloading val<.=10cf35ec 35.4MiB>
2021/07/08 16:50:02 scheduler task c81055a4 (flow d0b7bfb6): unloading (try 0): started
2021/07/08 16:50:02 scheduler task c81055a4 (flow d0b7bfb6): unloading val<.=07437692 35.4MiB>
2021/07/08 16:50:02 scheduler task c81055a4 (flow d0b7bfb6): unloading val<.=bb460290 35.4MiB>
2021/07/08 16:50:02 scheduler task c81055a4 (flow d0b7bfb6): unloading list<val<.=abf9f85a 35.7MiB> 35.7MiB>
2021/07/08 16:50:02 scheduler task cffdf651 (flow 46b547c0): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:02 scheduler task a012a678 (flow c8d67eb9): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:afdc560ebdbebb863c87cca3a65a4cd08b6d7421af3a4fc0704d68e4615744c6 -> s3://niema-test/n100/r03/n100.r03.s080.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:50:02 scheduler task f8950918 (flow 8df3e478): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:02  <-  n100.r03.s080.Main.cp_out_file c8d67eb9 ok   extern 0s 35.7MiB
2021/07/08 16:50:02 scheduler task cffdf651 (flow 46b547c0): retrieving result (try 0): started
2021/07/08 16:50:02 scheduler task f8950918 (flow 8df3e478): promoting objects (try 0): started
2021/07/08 16:50:02 scheduler task d3c3f174 (flow eb36d115): unloaded val<.=e574ab0a 35.4MiB>
2021/07/08 16:50:02 scheduler task d3c3f174 (flow eb36d115): unloaded val<.=10cf35ec 35.4MiB>
2021/07/08 16:50:02 scheduler task d3c3f174 (flow eb36d115): unloaded list<val<.=72168003 35.7MiB> 35.7MiB>
2021/07/08 16:50:02 scheduler task d3c3f174 (flow eb36d115): unloading (try 0): successful, next state: complete
2021/07/08 16:50:02 scheduler task c81055a4 (flow d0b7bfb6): unloaded val<.=07437692 35.4MiB>
2021/07/08 16:50:02 scheduler task c81055a4 (flow d0b7bfb6): unloaded list<val<.=abf9f85a 35.7MiB> 35.7MiB>
2021/07/08 16:50:02 scheduler task c81055a4 (flow d0b7bfb6): unloaded val<.=bb460290 35.4MiB>
2021/07/08 16:50:02 scheduler task c81055a4 (flow d0b7bfb6): unloading (try 0): successful, next state: complete
2021/07/08 16:50:02  <-  n100.r03.s033.Main.out_file eb36d115 ok     exec 5m5s 35.7MiB
2021/07/08 16:50:02 n100.r03.s033.Main.out_file eb36d115 n100/r03/n100.r03.s033.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:56b0ebb42a3e80375439174973244d2be6addc13f0665dc7f4a197687775dece
	sha256:eb36d115dbc636907d7cd7d9a064841c191169e01219781d1b1291b336cf0f1e
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d3c3f174e3666bf09c411cf5d500c216a32143456682fe7b21bc6526ab9fa8f8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s033_output"
	    wget -O "n100.r03.s033_output/n100.r03.s033.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s033_output/n100.r03.s033.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s033_output/n100.r03.s033.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s033_output/n100.r03.s033.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s033_output/n100.r03.s033.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s033_output/n100.r03.s033.reference.fas" "n100.r03.s033_output/n100.r03.s033.fq1.fastq" "n100.r03.s033_output/n100.r03.s033.fq2.fastq" | samtools view -bS - > "n100.r03.s033_output/n100.r03.s033.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s033_output/n100.r03.s033.untrimmed.sorted.bam" "n100.r03.s033_output/n100.r03.s033.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s033_output/n100.r03.s033.untrimmed.sorted.bam" -b "n100.r03.s033_output/n100.r03.s033.primers.bed" -p "n100.r03.s033_output/n100.r03.s033.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s033_output/n100.r03.s033.trimmed.sorted.bam" "n100.r03.s033_output/n100.r03.s033.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s033_output/n100.r03.s033.reference.fas" "n100.r03.s033_output/n100.r03.s033.trimmed.sorted.bam" > "n100.r03.s033_output/n100.r03.s033.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s033_output/n100.r03.s033.reference.fas" --call-indels "n100.r03.s033_output/n100.r03.s033.trimmed.sorted.bam" > "n100.r03.s033_output/n100.r03.s033.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s033_output/n100.r03.s033.trimmed.sorted.bam" > "n100.r03.s033_output/n100.r03.s033.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s033_output/n100.r03.s033.depth.txt" "n100.r03.s033_output/n100.r03.s033.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s033_output/n100.r03.s033.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s033_output/n100.r03.s033.reference.fas" | bcftools consensus -m "n100.r03.s033_output/n100.r03.s033.low_depth.tsv" tmp.vcf.gz > "n100.r03.s033_output/n100.r03.s033.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s033_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:72168003c57b052662cdfd515cbf41145c06fc8970892e7b9303fed397eaf93e 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.3MiB max=129.2MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=878B max=3.1KiB
2021/07/08 16:50:02 scheduler task c3ad574b (flow 0a0e0e1f): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s033.tar.gz resources {}
2021/07/08 16:50:02  ->  n100.r03.s033.Main.cp_out_file 0a0e0e1f exec extern s3://niema-test/n100/r03/n100.r03.s033.tar.gz 35.7MiB
2021/07/08 16:50:02  <-  n100.r03.s036.Main.out_file d0b7bfb6 ok     exec 5m3s 35.7MiB
2021/07/08 16:50:02 n100.r03.s036.Main.out_file d0b7bfb6 n100/r03/n100.r03.s036.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a18f32cfeaf9f26afdda9f34820b43cfe0a646e35ed8627c42bf307006de02b4
	sha256:d0b7bfb66da13f710b55e31892bf2955a7105800443c65b2e06085acfaa91a9f
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c81055a472e41c0eeac5654f945f1b1068fa6f1aed44eb43784f664d23aa1e44
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s036_output"
	    wget -O "n100.r03.s036_output/n100.r03.s036.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s036_output/n100.r03.s036.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s036_output/n100.r03.s036.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s036_output/n100.r03.s036.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s036_output/n100.r03.s036.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s036_output/n100.r03.s036.reference.fas" "n100.r03.s036_output/n100.r03.s036.fq1.fastq" "n100.r03.s036_output/n100.r03.s036.fq2.fastq" | samtools view -bS - > "n100.r03.s036_output/n100.r03.s036.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s036_output/n100.r03.s036.untrimmed.sorted.bam" "n100.r03.s036_output/n100.r03.s036.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s036_output/n100.r03.s036.untrimmed.sorted.bam" -b "n100.r03.s036_output/n100.r03.s036.primers.bed" -p "n100.r03.s036_output/n100.r03.s036.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s036_output/n100.r03.s036.trimmed.sorted.bam" "n100.r03.s036_output/n100.r03.s036.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s036_output/n100.r03.s036.reference.fas" "n100.r03.s036_output/n100.r03.s036.trimmed.sorted.bam" > "n100.r03.s036_output/n100.r03.s036.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s036_output/n100.r03.s036.reference.fas" --call-indels "n100.r03.s036_output/n100.r03.s036.trimmed.sorted.bam" > "n100.r03.s036_output/n100.r03.s036.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s036_output/n100.r03.s036.trimmed.sorted.bam" > "n100.r03.s036_output/n100.r03.s036.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s036_output/n100.r03.s036.depth.txt" "n100.r03.s036_output/n100.r03.s036.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s036_output/n100.r03.s036.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s036_output/n100.r03.s036.reference.fas" | bcftools consensus -m "n100.r03.s036_output/n100.r03.s036.low_depth.tsv" tmp.vcf.gz > "n100.r03.s036_output/n100.r03.s036.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s036_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:abf9f85ab87f439ecff47c9d3b68d75a961217f275b7a207d073701ee2a9e597 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=19.7MiB max=127.9MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=869B max=3.0KiB
2021/07/08 16:50:02 scheduler task c1b6a27f (flow 859efa3c): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s036.tar.gz resources {}
2021/07/08 16:50:02  ->  n100.r03.s036.Main.cp_out_file 859efa3c exec extern s3://niema-test/n100/r03/n100.r03.s036.tar.gz 35.7MiB
2021/07/08 16:50:02 scheduler task cc866163 (flow 7b73dcd0): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:02 scheduler task cc866163 (flow 7b73dcd0): unloading (try 0): started
2021/07/08 16:50:02 scheduler task cc866163 (flow 7b73dcd0): unloading list<val<.=e1f90f15 35.8MiB> 35.8MiB>
2021/07/08 16:50:02 scheduler task cc866163 (flow 7b73dcd0): unloading val<.=1a3ef645 35.4MiB>
2021/07/08 16:50:02 scheduler task cc866163 (flow 7b73dcd0): unloading val<.=865cca9e 35.4MiB>
2021/07/08 16:50:02 scheduler task cffdf651 (flow 46b547c0): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:02 scheduler task f8950918 (flow 8df3e478): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:02 scheduler task cffdf651 (flow 46b547c0): transferring output (try 0): started
2021/07/08 16:50:02 scheduler task f8950918 (flow 8df3e478): retrieving diagnostic output (try 0): started
2021/07/08 16:50:02 scheduler task cc866163 (flow 7b73dcd0): unloaded list<val<.=e1f90f15 35.8MiB> 35.8MiB>
2021/07/08 16:50:02 scheduler task cc866163 (flow 7b73dcd0): unloaded val<.=865cca9e 35.4MiB>
2021/07/08 16:50:02 scheduler task cc866163 (flow 7b73dcd0): unloaded val<.=1a3ef645 35.4MiB>
2021/07/08 16:50:02 scheduler task cc866163 (flow 7b73dcd0): unloading (try 0): successful, next state: complete
2021/07/08 16:50:02  <-  n100.r03.s093.Main.out_file 7b73dcd0 ok     exec 5m5s 35.8MiB
2021/07/08 16:50:02 n100.r03.s093.Main.out_file 7b73dcd0 n100/r03/n100.r03.s093.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:cb4e83cc0a987fb6d89aa2180f337efa06f4a7b105f172352efe4a68a3723bd1
	sha256:7b73dcd075a8f19e4ed3f8d6b04f5470027e41256d134f8984a3f312e93199fe
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cc8661638508fce846a53afeda7fac2846633dc7ee5b1396a7dfefc798280c89
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s093_output"
	    wget -O "n100.r03.s093_output/n100.r03.s093.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s093_output/n100.r03.s093.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s093_output/n100.r03.s093.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s093_output/n100.r03.s093.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s093_output/n100.r03.s093.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s093_output/n100.r03.s093.reference.fas" "n100.r03.s093_output/n100.r03.s093.fq1.fastq" "n100.r03.s093_output/n100.r03.s093.fq2.fastq" | samtools view -bS - > "n100.r03.s093_output/n100.r03.s093.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s093_output/n100.r03.s093.untrimmed.sorted.bam" "n100.r03.s093_output/n100.r03.s093.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s093_output/n100.r03.s093.untrimmed.sorted.bam" -b "n100.r03.s093_output/n100.r03.s093.primers.bed" -p "n100.r03.s093_output/n100.r03.s093.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s093_output/n100.r03.s093.trimmed.sorted.bam" "n100.r03.s093_output/n100.r03.s093.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s093_output/n100.r03.s093.reference.fas" "n100.r03.s093_output/n100.r03.s093.trimmed.sorted.bam" > "n100.r03.s093_output/n100.r03.s093.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s093_output/n100.r03.s093.reference.fas" --call-indels "n100.r03.s093_output/n100.r03.s093.trimmed.sorted.bam" > "n100.r03.s093_output/n100.r03.s093.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s093_output/n100.r03.s093.trimmed.sorted.bam" > "n100.r03.s093_output/n100.r03.s093.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s093_output/n100.r03.s093.depth.txt" "n100.r03.s093_output/n100.r03.s093.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s093_output/n100.r03.s093.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s093_output/n100.r03.s093.reference.fas" | bcftools consensus -m "n100.r03.s093_output/n100.r03.s093.low_depth.tsv" tmp.vcf.gz > "n100.r03.s093_output/n100.r03.s093.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s093_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:e1f90f15d2abd6b498613677d6004fd856f4df9cc2aa1e5edbcee2b368e284d4 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.0MiB max=129.2MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=871B max=3.1KiB
2021/07/08 16:50:02 scheduler task 96ba3ff8 (flow a28b52d6): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s093.tar.gz resources {}
2021/07/08 16:50:02  ->  n100.r03.s093.Main.cp_out_file a28b52d6 exec extern s3://niema-test/n100/r03/n100.r03.s093.tar.gz 35.8MiB
2021/07/08 16:50:02 scheduler task f8950918 (flow 8df3e478): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:02 scheduler task 898bb586 (flow f0229179): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:02 scheduler task f8950918 (flow 8df3e478): retrieving result (try 0): started
2021/07/08 16:50:02 scheduler task 9d46551d (flow dc9e38c3): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:1dba1de42d1d8a3671579602c9873fca7ece64068a5c7e061e7f8b0f8fc6cd41 -> s3://niema-test/n100/r03/n100.r03.s053.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:50:02  <-  n100.r03.s053.Main.cp_out_file dc9e38c3 ok   extern 0s 35.8MiB
2021/07/08 16:50:02 scheduler task 898bb586 (flow f0229179): promoting objects (try 0): started
2021/07/08 16:50:02 scheduler task f8950918 (flow 8df3e478): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:02 scheduler task 898bb586 (flow f0229179): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:02 scheduler task f8950918 (flow 8df3e478): transferring output (try 0): started
2021/07/08 16:50:02 scheduler task 898bb586 (flow f0229179): retrieving diagnostic output (try 0): started
2021/07/08 16:50:02 scheduler task f33de464 (flow 00238322): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:0bd79a66c1b0145a848bfe8c6eeaf80d59de53fe3f0347bdddc8fb55793caf4c -> s3://niema-test/n100/r03/n100.r03.s059.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:50:02  <-  n100.r03.s059.Main.cp_out_file 00238322 ok   extern 0s 35.7MiB
2021/07/08 16:50:02 scheduler task 898bb586 (flow f0229179): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:02 scheduler task 898bb586 (flow f0229179): retrieving result (try 0): started
2021/07/08 16:50:02 scheduler task 898bb586 (flow f0229179): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:02 scheduler task 898bb586 (flow f0229179): transferring output (try 0): started
2021/07/08 16:50:02 scheduler task cffdf651 (flow 46b547c0): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:02 scheduler task cffdf651 (flow 46b547c0): unloading (try 0): started
2021/07/08 16:50:02 scheduler task cffdf651 (flow 46b547c0): unloading list<val<.=51e44e06 35.7MiB> 35.7MiB>
2021/07/08 16:50:02 scheduler task cffdf651 (flow 46b547c0): unloading val<.=2f84626d 35.4MiB>
2021/07/08 16:50:02 scheduler task cffdf651 (flow 46b547c0): unloading val<.=e9428c99 35.4MiB>
2021/07/08 16:50:02 scheduler task cffdf651 (flow 46b547c0): unloaded val<.=2f84626d 35.4MiB>
2021/07/08 16:50:02 scheduler task cffdf651 (flow 46b547c0): unloaded list<val<.=51e44e06 35.7MiB> 35.7MiB>
2021/07/08 16:50:02 scheduler task cffdf651 (flow 46b547c0): unloaded val<.=e9428c99 35.4MiB>
2021/07/08 16:50:02 scheduler task cffdf651 (flow 46b547c0): unloading (try 0): successful, next state: complete
2021/07/08 16:50:02  <-  n100.r03.s097.Main.out_file 46b547c0 ok     exec 4m57s 35.7MiB
2021/07/08 16:50:02 n100.r03.s097.Main.out_file 46b547c0 n100/r03/n100.r03.s097.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:67f4bfd37ae71baa98eeca6b1afcae39ce2de52a9b1057350094a500582273c2
	sha256:46b547c04e1dce78f253f78e1b39f1e3ac334412fd85370704e29f9bafd84ae5
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/cffdf651757048b1b2bfef702e1e08a5c5c0c9718286bf7ef6d5cf293fbe653e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s097_output"
	    wget -O "n100.r03.s097_output/n100.r03.s097.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s097_output/n100.r03.s097.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s097_output/n100.r03.s097.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s097_output/n100.r03.s097.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s097_output/n100.r03.s097.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s097_output/n100.r03.s097.reference.fas" "n100.r03.s097_output/n100.r03.s097.fq1.fastq" "n100.r03.s097_output/n100.r03.s097.fq2.fastq" | samtools view -bS - > "n100.r03.s097_output/n100.r03.s097.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s097_output/n100.r03.s097.untrimmed.sorted.bam" "n100.r03.s097_output/n100.r03.s097.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s097_output/n100.r03.s097.untrimmed.sorted.bam" -b "n100.r03.s097_output/n100.r03.s097.primers.bed" -p "n100.r03.s097_output/n100.r03.s097.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s097_output/n100.r03.s097.trimmed.sorted.bam" "n100.r03.s097_output/n100.r03.s097.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s097_output/n100.r03.s097.reference.fas" "n100.r03.s097_output/n100.r03.s097.trimmed.sorted.bam" > "n100.r03.s097_output/n100.r03.s097.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s097_output/n100.r03.s097.reference.fas" --call-indels "n100.r03.s097_output/n100.r03.s097.trimmed.sorted.bam" > "n100.r03.s097_output/n100.r03.s097.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s097_output/n100.r03.s097.trimmed.sorted.bam" > "n100.r03.s097_output/n100.r03.s097.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s097_output/n100.r03.s097.depth.txt" "n100.r03.s097_output/n100.r03.s097.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s097_output/n100.r03.s097.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s097_output/n100.r03.s097.reference.fas" | bcftools consensus -m "n100.r03.s097_output/n100.r03.s097.low_depth.tsv" tmp.vcf.gz > "n100.r03.s097_output/n100.r03.s097.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s097_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:51e44e06680eac7491ae11d8f7d4e01fc09f1503d0f0e971eb98654aac471a83 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.4MiB max=125.4MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=419B max=2.0KiB
2021/07/08 16:50:02 scheduler task 3391a3fb (flow 36fda3f3): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s097.tar.gz resources {}
2021/07/08 16:50:02  ->  n100.r03.s097.Main.cp_out_file 36fda3f3 exec extern s3://niema-test/n100/r03/n100.r03.s097.tar.gz 35.7MiB
2021/07/08 16:50:02 scheduler task c1b6a27f (flow 859efa3c): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:abf9f85ab87f439ecff47c9d3b68d75a961217f275b7a207d073701ee2a9e597 -> s3://niema-test/n100/r03/n100.r03.s036.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:50:02  <-  n100.r03.s036.Main.cp_out_file 859efa3c ok   extern 0s 35.7MiB
2021/07/08 16:50:03 scheduler task c3ad574b (flow 0a0e0e1f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:72168003c57b052662cdfd515cbf41145c06fc8970892e7b9303fed397eaf93e -> s3://niema-test/n100/r03/n100.r03.s033.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:50:03  <-  n100.r03.s033.Main.cp_out_file 0a0e0e1f ok   extern 0s 35.7MiB
2021/07/08 16:50:03 scheduler task f8950918 (flow 8df3e478): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:03 scheduler task f8950918 (flow 8df3e478): unloading (try 0): started
2021/07/08 16:50:03 scheduler task f8950918 (flow 8df3e478): unloading list<val<.=377d892d 35.7MiB> 35.7MiB>
2021/07/08 16:50:03 scheduler task f8950918 (flow 8df3e478): unloading val<.=df9236e2 35.4MiB>
2021/07/08 16:50:03 scheduler task f8950918 (flow 8df3e478): unloading val<.=e5808cdf 35.4MiB>
2021/07/08 16:50:03 scheduler task f8950918 (flow 8df3e478): unloaded list<val<.=377d892d 35.7MiB> 35.7MiB>
2021/07/08 16:50:03 scheduler task f8950918 (flow 8df3e478): unloaded val<.=e5808cdf 35.4MiB>
2021/07/08 16:50:03 scheduler task f8950918 (flow 8df3e478): unloaded val<.=df9236e2 35.4MiB>
2021/07/08 16:50:03 scheduler task f8950918 (flow 8df3e478): unloading (try 0): successful, next state: complete
2021/07/08 16:50:03  <-  n100.r03.s061.Main.out_file 8df3e478 ok     exec 5m5s 35.7MiB
2021/07/08 16:50:03 n100.r03.s061.Main.out_file 8df3e478 n100/r03/n100.r03.s061.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:8694e27565d8ba232cbce6ad84a0cf98b67f8b63fdeee453939d1bcdb32d337e
	sha256:8df3e4782cf3d1ba83cdea2563fb17ec5a7fcd1ad49bb3a23ad19fc1fce132bb
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/f89509189bd3974839dc92500367fa849bad51a85fe097e3be3185c9a1606cfd
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s061_output"
	    wget -O "n100.r03.s061_output/n100.r03.s061.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s061_output/n100.r03.s061.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s061_output/n100.r03.s061.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s061_output/n100.r03.s061.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s061_output/n100.r03.s061.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s061_output/n100.r03.s061.reference.fas" "n100.r03.s061_output/n100.r03.s061.fq1.fastq" "n100.r03.s061_output/n100.r03.s061.fq2.fastq" | samtools view -bS - > "n100.r03.s061_output/n100.r03.s061.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s061_output/n100.r03.s061.untrimmed.sorted.bam" "n100.r03.s061_output/n100.r03.s061.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s061_output/n100.r03.s061.untrimmed.sorted.bam" -b "n100.r03.s061_output/n100.r03.s061.primers.bed" -p "n100.r03.s061_output/n100.r03.s061.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s061_output/n100.r03.s061.trimmed.sorted.bam" "n100.r03.s061_output/n100.r03.s061.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s061_output/n100.r03.s061.reference.fas" "n100.r03.s061_output/n100.r03.s061.trimmed.sorted.bam" > "n100.r03.s061_output/n100.r03.s061.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s061_output/n100.r03.s061.reference.fas" --call-indels "n100.r03.s061_output/n100.r03.s061.trimmed.sorted.bam" > "n100.r03.s061_output/n100.r03.s061.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s061_output/n100.r03.s061.trimmed.sorted.bam" > "n100.r03.s061_output/n100.r03.s061.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s061_output/n100.r03.s061.depth.txt" "n100.r03.s061_output/n100.r03.s061.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s061_output/n100.r03.s061.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s061_output/n100.r03.s061.reference.fas" | bcftools consensus -m "n100.r03.s061_output/n100.r03.s061.low_depth.tsv" tmp.vcf.gz > "n100.r03.s061_output/n100.r03.s061.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s061_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:377d892d138a17365a34084d9e68a41983f0715a27a3f502781b9b3b2cec7ac9 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.6MiB max=128.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=1.0KiB max=3.1KiB
2021/07/08 16:50:03 scheduler task d8c77ebb (flow d88bb05b): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s061.tar.gz resources {}
2021/07/08 16:50:03  ->  n100.r03.s061.Main.cp_out_file d88bb05b exec extern s3://niema-test/n100/r03/n100.r03.s061.tar.gz 35.7MiB
2021/07/08 16:50:03 scheduler task 96ba3ff8 (flow a28b52d6): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:e1f90f15d2abd6b498613677d6004fd856f4df9cc2aa1e5edbcee2b368e284d4 -> s3://niema-test/n100/r03/n100.r03.s093.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:50:03  <-  n100.r03.s093.Main.cp_out_file a28b52d6 ok   extern 0s 35.8MiB
2021/07/08 16:50:03 scheduler task 898bb586 (flow f0229179): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:03 scheduler task 898bb586 (flow f0229179): unloading (try 0): started
2021/07/08 16:50:03 scheduler task 898bb586 (flow f0229179): unloading list<val<.=433be2f3 35.7MiB> 35.7MiB>
2021/07/08 16:50:03 scheduler task 898bb586 (flow f0229179): unloading val<.=9677db4d 35.4MiB>
2021/07/08 16:50:03 scheduler task 898bb586 (flow f0229179): unloading val<.=8cd91356 35.4MiB>
2021/07/08 16:50:03 scheduler task 898bb586 (flow f0229179): unloaded val<.=8cd91356 35.4MiB>
2021/07/08 16:50:03 scheduler task 898bb586 (flow f0229179): unloaded val<.=9677db4d 35.4MiB>
2021/07/08 16:50:03 scheduler task 898bb586 (flow f0229179): unloaded list<val<.=433be2f3 35.7MiB> 35.7MiB>
2021/07/08 16:50:03 scheduler task 898bb586 (flow f0229179): unloading (try 0): successful, next state: complete
2021/07/08 16:50:03  <-  n100.r03.s019.Main.out_file f0229179 ok     exec 4m58s 35.7MiB
2021/07/08 16:50:03 n100.r03.s019.Main.out_file f0229179 n100/r03/n100.r03.s019.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ebd3807d35f599fd21a3e363af8066a82db5c55a9adefd9c5b0a867769f48a49
	sha256:f02291790e13aad9a131334d4589f2d633bbd7c5558bb271f26f0e93f01e9383
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/898bb5863172da9c2c9c69c862827bf3aef400d2dc27d7ce44c423e0f0647289
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s019_output"
	    wget -O "n100.r03.s019_output/n100.r03.s019.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s019_output/n100.r03.s019.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s019_output/n100.r03.s019.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s019_output/n100.r03.s019.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s019_output/n100.r03.s019.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s019_output/n100.r03.s019.reference.fas" "n100.r03.s019_output/n100.r03.s019.fq1.fastq" "n100.r03.s019_output/n100.r03.s019.fq2.fastq" | samtools view -bS - > "n100.r03.s019_output/n100.r03.s019.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s019_output/n100.r03.s019.untrimmed.sorted.bam" "n100.r03.s019_output/n100.r03.s019.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s019_output/n100.r03.s019.untrimmed.sorted.bam" -b "n100.r03.s019_output/n100.r03.s019.primers.bed" -p "n100.r03.s019_output/n100.r03.s019.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s019_output/n100.r03.s019.trimmed.sorted.bam" "n100.r03.s019_output/n100.r03.s019.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s019_output/n100.r03.s019.reference.fas" "n100.r03.s019_output/n100.r03.s019.trimmed.sorted.bam" > "n100.r03.s019_output/n100.r03.s019.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s019_output/n100.r03.s019.reference.fas" --call-indels "n100.r03.s019_output/n100.r03.s019.trimmed.sorted.bam" > "n100.r03.s019_output/n100.r03.s019.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s019_output/n100.r03.s019.trimmed.sorted.bam" > "n100.r03.s019_output/n100.r03.s019.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s019_output/n100.r03.s019.depth.txt" "n100.r03.s019_output/n100.r03.s019.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s019_output/n100.r03.s019.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s019_output/n100.r03.s019.reference.fas" | bcftools consensus -m "n100.r03.s019_output/n100.r03.s019.low_depth.tsv" tmp.vcf.gz > "n100.r03.s019_output/n100.r03.s019.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s019_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:433be2f3cc6c215a7acdf7327d4007aa9332913e469baa99f76eabdde0370e56 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.9MiB max=126.1MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 16:50:03 scheduler task 03ce9a91 (flow ce79caf2): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s019.tar.gz resources {}
2021/07/08 16:50:03  ->  n100.r03.s019.Main.cp_out_file ce79caf2 exec extern s3://niema-test/n100/r03/n100.r03.s019.tar.gz 35.7MiB
2021/07/08 16:50:03 scheduler task eb1b1e87 (flow eacb1e8b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:03 scheduler task eb1b1e87 (flow eacb1e8b): promoting objects (try 0): started
2021/07/08 16:50:03 scheduler task eb1b1e87 (flow eacb1e8b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:03 scheduler task 3391a3fb (flow 36fda3f3): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:51e44e06680eac7491ae11d8f7d4e01fc09f1503d0f0e971eb98654aac471a83 -> s3://niema-test/n100/r03/n100.r03.s097.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:50:03  <-  n100.r03.s097.Main.cp_out_file 36fda3f3 ok   extern 0s 35.7MiB
2021/07/08 16:50:03 scheduler task eb1b1e87 (flow eacb1e8b): retrieving diagnostic output (try 0): started
2021/07/08 16:50:03 scheduler task 693e99fc (flow 13424ad8): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:03 scheduler task eb1b1e87 (flow eacb1e8b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:03 scheduler task 693e99fc (flow 13424ad8): promoting objects (try 0): started
2021/07/08 16:50:03 scheduler task eb1b1e87 (flow eacb1e8b): retrieving result (try 0): started
2021/07/08 16:50:03 scheduler task 693e99fc (flow 13424ad8): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:03 scheduler task eb1b1e87 (flow eacb1e8b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:03 scheduler task 693e99fc (flow 13424ad8): retrieving diagnostic output (try 0): started
2021/07/08 16:50:03 scheduler task eb1b1e87 (flow eacb1e8b): transferring output (try 0): started
2021/07/08 16:50:03 scheduler task 693e99fc (flow 13424ad8): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:03 scheduler task d8c77ebb (flow d88bb05b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:377d892d138a17365a34084d9e68a41983f0715a27a3f502781b9b3b2cec7ac9 -> s3://niema-test/n100/r03/n100.r03.s061.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:50:03  <-  n100.r03.s061.Main.cp_out_file d88bb05b ok   extern 0s 35.7MiB
2021/07/08 16:50:03 scheduler task 693e99fc (flow 13424ad8): retrieving result (try 0): started
2021/07/08 16:50:03 scheduler task 693e99fc (flow 13424ad8): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:03 scheduler task 693e99fc (flow 13424ad8): transferring output (try 0): started
2021/07/08 16:50:03 scheduler task 301a76b8 (flow ea41a4f2): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:03 scheduler task 301a76b8 (flow ea41a4f2): promoting objects (try 0): started
2021/07/08 16:50:04 scheduler task 95b9c199 (flow d919402c): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:04 scheduler task 95b9c199 (flow d919402c): promoting objects (try 0): started
2021/07/08 16:50:04 scheduler task 27604f83 (flow 1f71c589): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:04 scheduler task 27604f83 (flow 1f71c589): promoting objects (try 0): started
2021/07/08 16:50:04 scheduler task 301a76b8 (flow ea41a4f2): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:04 scheduler task 301a76b8 (flow ea41a4f2): retrieving diagnostic output (try 0): started
2021/07/08 16:50:04 scheduler task 03ce9a91 (flow ce79caf2): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:433be2f3cc6c215a7acdf7327d4007aa9332913e469baa99f76eabdde0370e56 -> s3://niema-test/n100/r03/n100.r03.s019.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:50:04  <-  n100.r03.s019.Main.cp_out_file ce79caf2 ok   extern 0s 35.7MiB
2021/07/08 16:50:04 scheduler task 95b9c199 (flow d919402c): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:04 scheduler task 95b9c199 (flow d919402c): retrieving diagnostic output (try 0): started
2021/07/08 16:50:04 scheduler task 27604f83 (flow 1f71c589): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:04 scheduler task 27604f83 (flow 1f71c589): retrieving diagnostic output (try 0): started
2021/07/08 16:50:04 scheduler task 301a76b8 (flow ea41a4f2): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:04 scheduler task 301a76b8 (flow ea41a4f2): retrieving result (try 0): started
2021/07/08 16:50:04 scheduler task 95b9c199 (flow d919402c): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:04 scheduler task 95b9c199 (flow d919402c): retrieving result (try 0): started
2021/07/08 16:50:04 scheduler task 301a76b8 (flow ea41a4f2): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:04 scheduler task 27604f83 (flow 1f71c589): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:04 scheduler task 301a76b8 (flow ea41a4f2): transferring output (try 0): started
2021/07/08 16:50:04 scheduler task 27604f83 (flow 1f71c589): retrieving result (try 0): started
2021/07/08 16:50:04 scheduler task 95b9c199 (flow d919402c): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:04 scheduler task 95b9c199 (flow d919402c): transferring output (try 0): started
2021/07/08 16:50:04 scheduler task eb1b1e87 (flow eacb1e8b): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:04 scheduler task eb1b1e87 (flow eacb1e8b): unloading (try 0): started
2021/07/08 16:50:04 scheduler task eb1b1e87 (flow eacb1e8b): unloading list<val<.=4cf92b1e 35.7MiB> 35.7MiB>
2021/07/08 16:50:04 scheduler task eb1b1e87 (flow eacb1e8b): unloading val<.=0c71a1d2 35.4MiB>
2021/07/08 16:50:04 scheduler task eb1b1e87 (flow eacb1e8b): unloading val<.=19aeed88 35.4MiB>
2021/07/08 16:50:04 scheduler task 27604f83 (flow 1f71c589): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:04 scheduler task 27604f83 (flow 1f71c589): transferring output (try 0): started
2021/07/08 16:50:04 scheduler task eb1b1e87 (flow eacb1e8b): unloaded list<val<.=4cf92b1e 35.7MiB> 35.7MiB>
2021/07/08 16:50:04 scheduler task eb1b1e87 (flow eacb1e8b): unloaded val<.=0c71a1d2 35.4MiB>
2021/07/08 16:50:04 scheduler task eb1b1e87 (flow eacb1e8b): unloaded val<.=19aeed88 35.4MiB>
2021/07/08 16:50:04 scheduler task eb1b1e87 (flow eacb1e8b): unloading (try 0): successful, next state: complete
2021/07/08 16:50:04  <-  n100.r03.s087.Main.out_file eacb1e8b ok     exec 4m58s 35.7MiB
2021/07/08 16:50:04 n100.r03.s087.Main.out_file eacb1e8b n100/r03/n100.r03.s087.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:71bedd345546389962f3a910e456d8881eb0101bf26b532b49ba3fccb99e93ea
	sha256:eacb1e8bd547b7bae02662fb564409074e888876d44c5fdcb13756712f160f0f
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/eb1b1e879310ae4668a6ea9a95bafbc8d0248734b4cc8538f5510dfc5a903d40
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s087_output"
	    wget -O "n100.r03.s087_output/n100.r03.s087.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s087_output/n100.r03.s087.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s087_output/n100.r03.s087.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s087_output/n100.r03.s087.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s087_output/n100.r03.s087.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s087_output/n100.r03.s087.reference.fas" "n100.r03.s087_output/n100.r03.s087.fq1.fastq" "n100.r03.s087_output/n100.r03.s087.fq2.fastq" | samtools view -bS - > "n100.r03.s087_output/n100.r03.s087.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s087_output/n100.r03.s087.untrimmed.sorted.bam" "n100.r03.s087_output/n100.r03.s087.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s087_output/n100.r03.s087.untrimmed.sorted.bam" -b "n100.r03.s087_output/n100.r03.s087.primers.bed" -p "n100.r03.s087_output/n100.r03.s087.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s087_output/n100.r03.s087.trimmed.sorted.bam" "n100.r03.s087_output/n100.r03.s087.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s087_output/n100.r03.s087.reference.fas" "n100.r03.s087_output/n100.r03.s087.trimmed.sorted.bam" > "n100.r03.s087_output/n100.r03.s087.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s087_output/n100.r03.s087.reference.fas" --call-indels "n100.r03.s087_output/n100.r03.s087.trimmed.sorted.bam" > "n100.r03.s087_output/n100.r03.s087.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s087_output/n100.r03.s087.trimmed.sorted.bam" > "n100.r03.s087_output/n100.r03.s087.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s087_output/n100.r03.s087.depth.txt" "n100.r03.s087_output/n100.r03.s087.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s087_output/n100.r03.s087.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s087_output/n100.r03.s087.reference.fas" | bcftools consensus -m "n100.r03.s087_output/n100.r03.s087.low_depth.tsv" tmp.vcf.gz > "n100.r03.s087_output/n100.r03.s087.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s087_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:4cf92b1ec9f37f81f563c139608e6c9312a892849bacc3ead5192f2c48640b7f 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=22.4MiB max=127.4MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 16:50:04 scheduler task 90eb0116 (flow 2ab86576): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s087.tar.gz resources {}
2021/07/08 16:50:04  ->  n100.r03.s087.Main.cp_out_file 2ab86576 exec extern s3://niema-test/n100/r03/n100.r03.s087.tar.gz 35.7MiB
2021/07/08 16:50:04 scheduler task 693e99fc (flow 13424ad8): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:04 scheduler task 693e99fc (flow 13424ad8): unloading (try 0): started
2021/07/08 16:50:04 scheduler task 693e99fc (flow 13424ad8): unloading list<val<.=1392cba0 35.7MiB> 35.7MiB>
2021/07/08 16:50:04 scheduler task 693e99fc (flow 13424ad8): unloading val<.=982ee4d9 35.4MiB>
2021/07/08 16:50:04 scheduler task 693e99fc (flow 13424ad8): unloading val<.=803ce343 35.4MiB>
2021/07/08 16:50:04 scheduler task 693e99fc (flow 13424ad8): unloaded val<.=982ee4d9 35.4MiB>
2021/07/08 16:50:04 scheduler task 693e99fc (flow 13424ad8): unloaded val<.=803ce343 35.4MiB>
2021/07/08 16:50:04 scheduler task 693e99fc (flow 13424ad8): unloaded list<val<.=1392cba0 35.7MiB> 35.7MiB>
2021/07/08 16:50:04 scheduler task 693e99fc (flow 13424ad8): unloading (try 0): successful, next state: complete
2021/07/08 16:50:04  <-  n100.r03.s081.Main.out_file 13424ad8 ok     exec 5m7s 35.7MiB
2021/07/08 16:50:04 n100.r03.s081.Main.out_file 13424ad8 n100/r03/n100.r03.s081.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c55a02878f0b30c649b72a705bf0f662ce1ffd491334a41f3f1e49d0d6b173d6
	sha256:13424ad8f301195c530de7ec9c194266499ec308f8e4cd5811c9f5b549100cbb
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/693e99fc44a5aefee5d4e9b9b3bbf2a646e52f512164388eb0d0f957e7fb741b
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s081_output"
	    wget -O "n100.r03.s081_output/n100.r03.s081.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s081_output/n100.r03.s081.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s081_output/n100.r03.s081.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s081_output/n100.r03.s081.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s081_output/n100.r03.s081.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s081_output/n100.r03.s081.reference.fas" "n100.r03.s081_output/n100.r03.s081.fq1.fastq" "n100.r03.s081_output/n100.r03.s081.fq2.fastq" | samtools view -bS - > "n100.r03.s081_output/n100.r03.s081.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s081_output/n100.r03.s081.untrimmed.sorted.bam" "n100.r03.s081_output/n100.r03.s081.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s081_output/n100.r03.s081.untrimmed.sorted.bam" -b "n100.r03.s081_output/n100.r03.s081.primers.bed" -p "n100.r03.s081_output/n100.r03.s081.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s081_output/n100.r03.s081.trimmed.sorted.bam" "n100.r03.s081_output/n100.r03.s081.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s081_output/n100.r03.s081.reference.fas" "n100.r03.s081_output/n100.r03.s081.trimmed.sorted.bam" > "n100.r03.s081_output/n100.r03.s081.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s081_output/n100.r03.s081.reference.fas" --call-indels "n100.r03.s081_output/n100.r03.s081.trimmed.sorted.bam" > "n100.r03.s081_output/n100.r03.s081.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s081_output/n100.r03.s081.trimmed.sorted.bam" > "n100.r03.s081_output/n100.r03.s081.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s081_output/n100.r03.s081.depth.txt" "n100.r03.s081_output/n100.r03.s081.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s081_output/n100.r03.s081.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s081_output/n100.r03.s081.reference.fas" | bcftools consensus -m "n100.r03.s081_output/n100.r03.s081.low_depth.tsv" tmp.vcf.gz > "n100.r03.s081_output/n100.r03.s081.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s081_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:1392cba0fbb1e6c0375760092fd983e97adb8facf30e5e4d75e6964d2a2234bc 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=20.1MiB max=131.8MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=526B max=2.1KiB
2021/07/08 16:50:04 scheduler task 62200d57 (flow 4c3a10bc): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s081.tar.gz resources {}
2021/07/08 16:50:04  ->  n100.r03.s081.Main.cp_out_file 4c3a10bc exec extern s3://niema-test/n100/r03/n100.r03.s081.tar.gz 35.7MiB
2021/07/08 16:50:04 scheduler task 95b9c199 (flow d919402c): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:04 scheduler task 301a76b8 (flow ea41a4f2): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:04 scheduler task 95b9c199 (flow d919402c): unloading (try 0): started
2021/07/08 16:50:04 scheduler task 95b9c199 (flow d919402c): unloading list<val<.=549fcb47 35.7MiB> 35.7MiB>
2021/07/08 16:50:04 scheduler task 95b9c199 (flow d919402c): unloading val<.=8f918acf 35.4MiB>
2021/07/08 16:50:04 scheduler task 95b9c199 (flow d919402c): unloading val<.=71918f03 35.4MiB>
2021/07/08 16:50:04 scheduler task 301a76b8 (flow ea41a4f2): unloading (try 0): started
2021/07/08 16:50:04 scheduler task 301a76b8 (flow ea41a4f2): unloading list<val<.=f09bc74c 35.7MiB> 35.7MiB>
2021/07/08 16:50:04 scheduler task 301a76b8 (flow ea41a4f2): unloading val<.=ad159c86 35.4MiB>
2021/07/08 16:50:04 scheduler task 301a76b8 (flow ea41a4f2): unloading val<.=19a2f8a1 35.4MiB>
2021/07/08 16:50:04 scheduler task 27604f83 (flow 1f71c589): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:04 scheduler task d3dd0d64 (flow 7e374560): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:04 scheduler task 27604f83 (flow 1f71c589): unloading (try 0): started
2021/07/08 16:50:04 scheduler task 27604f83 (flow 1f71c589): unloading list<val<.=11de22e3 35.7MiB> 35.7MiB>
2021/07/08 16:50:04 scheduler task 27604f83 (flow 1f71c589): unloading val<.=07912513 35.4MiB>
2021/07/08 16:50:04 scheduler task 27604f83 (flow 1f71c589): unloading val<.=01952c2a 35.4MiB>
2021/07/08 16:50:04 scheduler task d3dd0d64 (flow 7e374560): promoting objects (try 0): started
2021/07/08 16:50:04 scheduler task 95b9c199 (flow d919402c): unloaded val<.=8f918acf 35.4MiB>
2021/07/08 16:50:04 scheduler task 95b9c199 (flow d919402c): unloaded list<val<.=549fcb47 35.7MiB> 35.7MiB>
2021/07/08 16:50:04 scheduler task 95b9c199 (flow d919402c): unloaded val<.=71918f03 35.4MiB>
2021/07/08 16:50:04 scheduler task 95b9c199 (flow d919402c): unloading (try 0): successful, next state: complete
2021/07/08 16:50:04 scheduler task 301a76b8 (flow ea41a4f2): unloaded val<.=19a2f8a1 35.4MiB>
2021/07/08 16:50:04 scheduler task 301a76b8 (flow ea41a4f2): unloaded val<.=ad159c86 35.4MiB>
2021/07/08 16:50:04 scheduler task 301a76b8 (flow ea41a4f2): unloaded list<val<.=f09bc74c 35.7MiB> 35.7MiB>
2021/07/08 16:50:04 scheduler task 301a76b8 (flow ea41a4f2): unloading (try 0): successful, next state: complete
2021/07/08 16:50:04  <-  n100.r03.s052.Main.out_file d919402c ok     exec 4m50s 35.7MiB
2021/07/08 16:50:04 n100.r03.s052.Main.out_file d919402c n100/r03/n100.r03.s052.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:27f1f0cfae28602d38f05b4acdeb5fab38d8ba88fe0430b469a0b7cf6ef1f4ed
	sha256:d919402cbff003b7dc8cb9967dfe1750f78308d929cd4916bf16ebf97eab3a93
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/95b9c1998fda493d5d5e4612f0759e801e042c66c8918d0a28cf133763c61524
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s052_output"
	    wget -O "n100.r03.s052_output/n100.r03.s052.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s052_output/n100.r03.s052.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s052_output/n100.r03.s052.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s052_output/n100.r03.s052.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s052_output/n100.r03.s052.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s052_output/n100.r03.s052.reference.fas" "n100.r03.s052_output/n100.r03.s052.fq1.fastq" "n100.r03.s052_output/n100.r03.s052.fq2.fastq" | samtools view -bS - > "n100.r03.s052_output/n100.r03.s052.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s052_output/n100.r03.s052.untrimmed.sorted.bam" "n100.r03.s052_output/n100.r03.s052.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s052_output/n100.r03.s052.untrimmed.sorted.bam" -b "n100.r03.s052_output/n100.r03.s052.primers.bed" -p "n100.r03.s052_output/n100.r03.s052.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s052_output/n100.r03.s052.trimmed.sorted.bam" "n100.r03.s052_output/n100.r03.s052.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s052_output/n100.r03.s052.reference.fas" "n100.r03.s052_output/n100.r03.s052.trimmed.sorted.bam" > "n100.r03.s052_output/n100.r03.s052.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s052_output/n100.r03.s052.reference.fas" --call-indels "n100.r03.s052_output/n100.r03.s052.trimmed.sorted.bam" > "n100.r03.s052_output/n100.r03.s052.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s052_output/n100.r03.s052.trimmed.sorted.bam" > "n100.r03.s052_output/n100.r03.s052.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s052_output/n100.r03.s052.depth.txt" "n100.r03.s052_output/n100.r03.s052.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s052_output/n100.r03.s052.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s052_output/n100.r03.s052.reference.fas" | bcftools consensus -m "n100.r03.s052_output/n100.r03.s052.low_depth.tsv" tmp.vcf.gz > "n100.r03.s052_output/n100.r03.s052.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s052_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:549fcb47a7910adbd1726ecf4e7d939b5e3b1b6b71c2bce0994b659cefc6ab85 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=23.5MiB max=129.0MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 16:50:04 scheduler task e4cfcea6 (flow 4dc9ef39): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s052.tar.gz resources {}
2021/07/08 16:50:04  ->  n100.r03.s052.Main.cp_out_file 4dc9ef39 exec extern s3://niema-test/n100/r03/n100.r03.s052.tar.gz 35.7MiB
2021/07/08 16:50:04  <-  n100.r03.s025.Main.out_file ea41a4f2 ok     exec 4m59s 35.7MiB
2021/07/08 16:50:04 n100.r03.s025.Main.out_file ea41a4f2 n100/r03/n100.r03.s025.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:964730d9547fbec82375e0b0b2307d0a0df95895ffde0563c364de34caa59cef
	sha256:ea41a4f22273aecedbac09203761dc1fd3fc0ea8d0cc17018a1be1e4d955b0e1
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/301a76b811f6d0df5069f047aef486f20908538d8f98ff7970be5b58a7bada9c
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s025_output"
	    wget -O "n100.r03.s025_output/n100.r03.s025.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s025_output/n100.r03.s025.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s025_output/n100.r03.s025.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s025_output/n100.r03.s025.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s025_output/n100.r03.s025.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s025_output/n100.r03.s025.reference.fas" "n100.r03.s025_output/n100.r03.s025.fq1.fastq" "n100.r03.s025_output/n100.r03.s025.fq2.fastq" | samtools view -bS - > "n100.r03.s025_output/n100.r03.s025.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s025_output/n100.r03.s025.untrimmed.sorted.bam" "n100.r03.s025_output/n100.r03.s025.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s025_output/n100.r03.s025.untrimmed.sorted.bam" -b "n100.r03.s025_output/n100.r03.s025.primers.bed" -p "n100.r03.s025_output/n100.r03.s025.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s025_output/n100.r03.s025.trimmed.sorted.bam" "n100.r03.s025_output/n100.r03.s025.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s025_output/n100.r03.s025.reference.fas" "n100.r03.s025_output/n100.r03.s025.trimmed.sorted.bam" > "n100.r03.s025_output/n100.r03.s025.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s025_output/n100.r03.s025.reference.fas" --call-indels "n100.r03.s025_output/n100.r03.s025.trimmed.sorted.bam" > "n100.r03.s025_output/n100.r03.s025.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s025_output/n100.r03.s025.trimmed.sorted.bam" > "n100.r03.s025_output/n100.r03.s025.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s025_output/n100.r03.s025.depth.txt" "n100.r03.s025_output/n100.r03.s025.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s025_output/n100.r03.s025.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s025_output/n100.r03.s025.reference.fas" | bcftools consensus -m "n100.r03.s025_output/n100.r03.s025.low_depth.tsv" tmp.vcf.gz > "n100.r03.s025_output/n100.r03.s025.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s025_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f09bc74c89826535545b3daaece21f1f55b5609140e5bab75420e22325b015d5 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=22.6MiB max=127.1MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=420B max=2.1KiB
2021/07/08 16:50:04 scheduler task 27c0f2e6 (flow 56270e22): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s025.tar.gz resources {}
2021/07/08 16:50:04  ->  n100.r03.s025.Main.cp_out_file 56270e22 exec extern s3://niema-test/n100/r03/n100.r03.s025.tar.gz 35.7MiB
2021/07/08 16:50:04 scheduler task 27604f83 (flow 1f71c589): unloaded list<val<.=11de22e3 35.7MiB> 35.7MiB>
2021/07/08 16:50:04 scheduler task 27604f83 (flow 1f71c589): unloaded val<.=07912513 35.4MiB>
2021/07/08 16:50:04 scheduler task 27604f83 (flow 1f71c589): unloaded val<.=01952c2a 35.4MiB>
2021/07/08 16:50:04 scheduler task 27604f83 (flow 1f71c589): unloading (try 0): successful, next state: complete
2021/07/08 16:50:04 scheduler task d3dd0d64 (flow 7e374560): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:04  <-  n100.r03.s055.Main.out_file 1f71c589 ok     exec 5m0s 35.7MiB
2021/07/08 16:50:04 n100.r03.s055.Main.out_file 1f71c589 n100/r03/n100.r03.s055.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:628fa48e68b2ccaaeb504dc4126176a133c93da5d1cfc762d9438d371dfff314
	sha256:1f71c589b42d15a7925901ea72bc9dcb70dff995416aaf7ff91729c8c8e965b9
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/27604f83bed4712a1b4fa3ea9c427a3bfece08aaf771f380221eeb5aad48d9dd
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s055_output"
	    wget -O "n100.r03.s055_output/n100.r03.s055.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s055_output/n100.r03.s055.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s055_output/n100.r03.s055.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s055_output/n100.r03.s055.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s055_output/n100.r03.s055.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s055_output/n100.r03.s055.reference.fas" "n100.r03.s055_output/n100.r03.s055.fq1.fastq" "n100.r03.s055_output/n100.r03.s055.fq2.fastq" | samtools view -bS - > "n100.r03.s055_output/n100.r03.s055.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s055_output/n100.r03.s055.untrimmed.sorted.bam" "n100.r03.s055_output/n100.r03.s055.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s055_output/n100.r03.s055.untrimmed.sorted.bam" -b "n100.r03.s055_output/n100.r03.s055.primers.bed" -p "n100.r03.s055_output/n100.r03.s055.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s055_output/n100.r03.s055.trimmed.sorted.bam" "n100.r03.s055_output/n100.r03.s055.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s055_output/n100.r03.s055.reference.fas" "n100.r03.s055_output/n100.r03.s055.trimmed.sorted.bam" > "n100.r03.s055_output/n100.r03.s055.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s055_output/n100.r03.s055.reference.fas" --call-indels "n100.r03.s055_output/n100.r03.s055.trimmed.sorted.bam" > "n100.r03.s055_output/n100.r03.s055.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s055_output/n100.r03.s055.trimmed.sorted.bam" > "n100.r03.s055_output/n100.r03.s055.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s055_output/n100.r03.s055.depth.txt" "n100.r03.s055_output/n100.r03.s055.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s055_output/n100.r03.s055.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s055_output/n100.r03.s055.reference.fas" | bcftools consensus -m "n100.r03.s055_output/n100.r03.s055.low_depth.tsv" tmp.vcf.gz > "n100.r03.s055_output/n100.r03.s055.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s055_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:11de22e3ebd7ce0f01341021a3b91b0626e6004b6f31167d9fcb06fc1087797d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=22.0MiB max=129.4MiB
	    disk mean=11.9MiB max=35.7MiB
	    tmp mean=349B max=2.0KiB
2021/07/08 16:50:04 scheduler task 79bb0fef (flow dc003a1b): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s055.tar.gz resources {}
2021/07/08 16:50:04  ->  n100.r03.s055.Main.cp_out_file dc003a1b exec extern s3://niema-test/n100/r03/n100.r03.s055.tar.gz 35.7MiB
2021/07/08 16:50:04 scheduler task d3dd0d64 (flow 7e374560): retrieving diagnostic output (try 0): started
2021/07/08 16:50:05 scheduler task d3dd0d64 (flow 7e374560): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:05 scheduler task d3dd0d64 (flow 7e374560): retrieving result (try 0): started
2021/07/08 16:50:05 scheduler task d3dd0d64 (flow 7e374560): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:05 scheduler task d3dd0d64 (flow 7e374560): transferring output (try 0): started
2021/07/08 16:50:05 scheduler task 70fc136d (flow 3be0544d): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:05 scheduler task 70fc136d (flow 3be0544d): promoting objects (try 0): started
2021/07/08 16:50:05 scheduler task 90eb0116 (flow 2ab86576): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:4cf92b1ec9f37f81f563c139608e6c9312a892849bacc3ead5192f2c48640b7f -> s3://niema-test/n100/r03/n100.r03.s087.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:50:05  <-  n100.r03.s087.Main.cp_out_file 2ab86576 ok   extern 0s 35.7MiB
2021/07/08 16:50:05 scheduler task 62200d57 (flow 4c3a10bc): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:1392cba0fbb1e6c0375760092fd983e97adb8facf30e5e4d75e6964d2a2234bc -> s3://niema-test/n100/r03/n100.r03.s081.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:50:05  <-  n100.r03.s081.Main.cp_out_file 4c3a10bc ok   extern 0s 35.7MiB
2021/07/08 16:50:05 scheduler task 70fc136d (flow 3be0544d): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:05 scheduler task 70fc136d (flow 3be0544d): retrieving diagnostic output (try 0): started
2021/07/08 16:50:05 scheduler task 70fc136d (flow 3be0544d): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:05 scheduler task 70fc136d (flow 3be0544d): retrieving result (try 0): started
2021/07/08 16:50:05 scheduler task 70fc136d (flow 3be0544d): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:05 scheduler task 70fc136d (flow 3be0544d): transferring output (try 0): started
2021/07/08 16:50:05 scheduler task 11b3b7c2 (flow 7b9422b3): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:05 scheduler task 11b3b7c2 (flow 7b9422b3): promoting objects (try 0): started
2021/07/08 16:50:05 scheduler task 4e63d0ea (flow c209d771): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:05 scheduler task 4e63d0ea (flow c209d771): promoting objects (try 0): started
2021/07/08 16:50:05 scheduler task 11b3b7c2 (flow 7b9422b3): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:05 scheduler task 11b3b7c2 (flow 7b9422b3): retrieving diagnostic output (try 0): started
2021/07/08 16:50:05 scheduler task 4e63d0ea (flow c209d771): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:05 scheduler task 4e63d0ea (flow c209d771): retrieving diagnostic output (try 0): started
2021/07/08 16:50:05 scheduler task d3dd0d64 (flow 7e374560): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:05 scheduler task d3dd0d64 (flow 7e374560): unloading (try 0): started
2021/07/08 16:50:05 scheduler task d3dd0d64 (flow 7e374560): unloading list<val<.=9a0ee0ee 35.7MiB> 35.7MiB>
2021/07/08 16:50:05 scheduler task d3dd0d64 (flow 7e374560): unloading val<.=2de214e7 35.4MiB>
2021/07/08 16:50:05 scheduler task d3dd0d64 (flow 7e374560): unloading val<.=96a91d4a 35.4MiB>
2021/07/08 16:50:05 scheduler task 80669d3f (flow fe21aeeb): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:05 scheduler task e4cfcea6 (flow 4dc9ef39): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:549fcb47a7910adbd1726ecf4e7d939b5e3b1b6b71c2bce0994b659cefc6ab85 -> s3://niema-test/n100/r03/n100.r03.s052.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:50:05  <-  n100.r03.s052.Main.cp_out_file 4dc9ef39 ok   extern 0s 35.7MiB
2021/07/08 16:50:05 scheduler task 79bb0fef (flow dc003a1b): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:11de22e3ebd7ce0f01341021a3b91b0626e6004b6f31167d9fcb06fc1087797d -> s3://niema-test/n100/r03/n100.r03.s055.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:50:05  <-  n100.r03.s055.Main.cp_out_file dc003a1b ok   extern 0s 35.7MiB
2021/07/08 16:50:05 scheduler task c3688bf6 (flow a83f360e): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:05 scheduler task 11b3b7c2 (flow 7b9422b3): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:05 scheduler task 80669d3f (flow fe21aeeb): promoting objects (try 0): started
2021/07/08 16:50:05 scheduler task 27c0f2e6 (flow 56270e22): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f09bc74c89826535545b3daaece21f1f55b5609140e5bab75420e22325b015d5 -> s3://niema-test/n100/r03/n100.r03.s025.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:50:05  <-  n100.r03.s025.Main.cp_out_file 56270e22 ok   extern 0s 35.7MiB
2021/07/08 16:50:05 scheduler task c3688bf6 (flow a83f360e): promoting objects (try 0): started
2021/07/08 16:50:05 scheduler task 11b3b7c2 (flow 7b9422b3): retrieving result (try 0): started
2021/07/08 16:50:05 scheduler task 4e63d0ea (flow c209d771): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:05 scheduler task d3dd0d64 (flow 7e374560): unloaded list<val<.=9a0ee0ee 35.7MiB> 35.7MiB>
2021/07/08 16:50:05 scheduler task d3dd0d64 (flow 7e374560): unloaded val<.=96a91d4a 35.4MiB>
2021/07/08 16:50:05 scheduler task d3dd0d64 (flow 7e374560): unloaded val<.=2de214e7 35.4MiB>
2021/07/08 16:50:05 scheduler task d3dd0d64 (flow 7e374560): unloading (try 0): successful, next state: complete
2021/07/08 16:50:05 scheduler task 4e63d0ea (flow c209d771): retrieving result (try 0): started
2021/07/08 16:50:05  <-  n100.r03.s070.Main.out_file 7e374560 ok     exec 5m0s 35.7MiB
2021/07/08 16:50:05 n100.r03.s070.Main.out_file 7e374560 n100/r03/n100.r03.s070.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:478c356548d3c8d470343f184b67c490886effd01b60f2a73d982bd100aa1f6d
	sha256:7e374560cb0e7dc4515909b7fc8e795e1c460d2aaf5311396629afdd3dd8f9a3
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/d3dd0d64f2df1162c4a9419ad25412281c47e9668733abe841ba1e76f85515ed
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s070_output"
	    wget -O "n100.r03.s070_output/n100.r03.s070.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s070_output/n100.r03.s070.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s070_output/n100.r03.s070.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s070_output/n100.r03.s070.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s070_output/n100.r03.s070.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s070_output/n100.r03.s070.reference.fas" "n100.r03.s070_output/n100.r03.s070.fq1.fastq" "n100.r03.s070_output/n100.r03.s070.fq2.fastq" | samtools view -bS - > "n100.r03.s070_output/n100.r03.s070.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s070_output/n100.r03.s070.untrimmed.sorted.bam" "n100.r03.s070_output/n100.r03.s070.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s070_output/n100.r03.s070.untrimmed.sorted.bam" -b "n100.r03.s070_output/n100.r03.s070.primers.bed" -p "n100.r03.s070_output/n100.r03.s070.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s070_output/n100.r03.s070.trimmed.sorted.bam" "n100.r03.s070_output/n100.r03.s070.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s070_output/n100.r03.s070.reference.fas" "n100.r03.s070_output/n100.r03.s070.trimmed.sorted.bam" > "n100.r03.s070_output/n100.r03.s070.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s070_output/n100.r03.s070.reference.fas" --call-indels "n100.r03.s070_output/n100.r03.s070.trimmed.sorted.bam" > "n100.r03.s070_output/n100.r03.s070.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s070_output/n100.r03.s070.trimmed.sorted.bam" > "n100.r03.s070_output/n100.r03.s070.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s070_output/n100.r03.s070.depth.txt" "n100.r03.s070_output/n100.r03.s070.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s070_output/n100.r03.s070.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s070_output/n100.r03.s070.reference.fas" | bcftools consensus -m "n100.r03.s070_output/n100.r03.s070.low_depth.tsv" tmp.vcf.gz > "n100.r03.s070_output/n100.r03.s070.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s070_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:9a0ee0ee796076733ae383024c78d45119385d77a83e8ccf2a8243ba7f1fbfb5 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.7MiB max=130.1MiB
	    disk mean=10.3MiB max=35.7MiB
	    tmp mean=174B max=1.0KiB
2021/07/08 16:50:05 scheduler task fc594dfb (flow 68b7a84f): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s070.tar.gz resources {}
2021/07/08 16:50:05  ->  n100.r03.s070.Main.cp_out_file 68b7a84f exec extern s3://niema-test/n100/r03/n100.r03.s070.tar.gz 35.7MiB
2021/07/08 16:50:05 scheduler task 80669d3f (flow fe21aeeb): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:05 scheduler task 80669d3f (flow fe21aeeb): retrieving diagnostic output (try 0): started
2021/07/08 16:50:05 scheduler task c3688bf6 (flow a83f360e): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:05 scheduler task 11b3b7c2 (flow 7b9422b3): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:05 scheduler task c3688bf6 (flow a83f360e): retrieving diagnostic output (try 0): started
2021/07/08 16:50:05 scheduler task a03fdbd6 (flow f12c01f7): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:05 scheduler task 11b3b7c2 (flow 7b9422b3): transferring output (try 0): started
2021/07/08 16:50:05 scheduler task a03fdbd6 (flow f12c01f7): promoting objects (try 0): started
2021/07/08 16:50:05 scheduler task 4e63d0ea (flow c209d771): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:05 scheduler task e7b857e8 (flow 4dfce054): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:05 scheduler task 4e63d0ea (flow c209d771): transferring output (try 0): started
2021/07/08 16:50:05 scheduler task e7b857e8 (flow 4dfce054): promoting objects (try 0): started
2021/07/08 16:50:05 scheduler task 2128313b (flow 9e4c852f): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:05 scheduler task 70fc136d (flow 3be0544d): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:05 scheduler task 80669d3f (flow fe21aeeb): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:05 scheduler task c3688bf6 (flow a83f360e): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:05 scheduler task 2128313b (flow 9e4c852f): promoting objects (try 0): started
2021/07/08 16:50:05 scheduler task a03fdbd6 (flow f12c01f7): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:05 scheduler task 70fc136d (flow 3be0544d): unloading (try 0): started
2021/07/08 16:50:05 scheduler task 70fc136d (flow 3be0544d): unloading list<val<.=38eb3edd 35.7MiB> 35.7MiB>
2021/07/08 16:50:05 scheduler task 70fc136d (flow 3be0544d): unloading val<.=44ba9f97 35.4MiB>
2021/07/08 16:50:05 scheduler task 70fc136d (flow 3be0544d): unloading val<.=bab27f72 35.4MiB>
2021/07/08 16:50:05 scheduler task 80669d3f (flow fe21aeeb): retrieving result (try 0): started
2021/07/08 16:50:05 scheduler task e7b857e8 (flow 4dfce054): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:05 scheduler task c3688bf6 (flow a83f360e): retrieving result (try 0): started
2021/07/08 16:50:05 scheduler task a03fdbd6 (flow f12c01f7): retrieving diagnostic output (try 0): started
2021/07/08 16:50:05 scheduler task e7b857e8 (flow 4dfce054): retrieving diagnostic output (try 0): started
2021/07/08 16:50:06 scheduler task 2128313b (flow 9e4c852f): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:06 scheduler task 70fc136d (flow 3be0544d): unloaded val<.=44ba9f97 35.4MiB>
2021/07/08 16:50:06 scheduler task 70fc136d (flow 3be0544d): unloaded list<val<.=38eb3edd 35.7MiB> 35.7MiB>
2021/07/08 16:50:06 scheduler task 2128313b (flow 9e4c852f): retrieving diagnostic output (try 0): started
2021/07/08 16:50:06 scheduler task 70fc136d (flow 3be0544d): unloaded val<.=bab27f72 35.4MiB>
2021/07/08 16:50:06 scheduler task 70fc136d (flow 3be0544d): unloading (try 0): successful, next state: complete
2021/07/08 16:50:06  <-  n100.r03.s024.Main.out_file 3be0544d ok     exec 4m51s 35.7MiB
2021/07/08 16:50:06 n100.r03.s024.Main.out_file 3be0544d n100/r03/n100.r03.s024.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:69d16fa164f9dd238708c39124d0ba16a3591d9548da2d4e7697346cf75417b8
	sha256:3be0544d08d8e10468e9bf299308123850e12ba66cb17fccdd26b72647d7a893
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/70fc136d12810a350dd36631d280ede4bbaec87c58c5a4672d9696985c464e2e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s024_output"
	    wget -O "n100.r03.s024_output/n100.r03.s024.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s024_output/n100.r03.s024.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s024_output/n100.r03.s024.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s024_output/n100.r03.s024.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s024_output/n100.r03.s024.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s024_output/n100.r03.s024.reference.fas" "n100.r03.s024_output/n100.r03.s024.fq1.fastq" "n100.r03.s024_output/n100.r03.s024.fq2.fastq" | samtools view -bS - > "n100.r03.s024_output/n100.r03.s024.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s024_output/n100.r03.s024.untrimmed.sorted.bam" "n100.r03.s024_output/n100.r03.s024.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s024_output/n100.r03.s024.untrimmed.sorted.bam" -b "n100.r03.s024_output/n100.r03.s024.primers.bed" -p "n100.r03.s024_output/n100.r03.s024.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s024_output/n100.r03.s024.trimmed.sorted.bam" "n100.r03.s024_output/n100.r03.s024.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s024_output/n100.r03.s024.reference.fas" "n100.r03.s024_output/n100.r03.s024.trimmed.sorted.bam" > "n100.r03.s024_output/n100.r03.s024.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s024_output/n100.r03.s024.reference.fas" --call-indels "n100.r03.s024_output/n100.r03.s024.trimmed.sorted.bam" > "n100.r03.s024_output/n100.r03.s024.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s024_output/n100.r03.s024.trimmed.sorted.bam" > "n100.r03.s024_output/n100.r03.s024.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s024_output/n100.r03.s024.depth.txt" "n100.r03.s024_output/n100.r03.s024.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s024_output/n100.r03.s024.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s024_output/n100.r03.s024.reference.fas" | bcftools consensus -m "n100.r03.s024_output/n100.r03.s024.low_depth.tsv" tmp.vcf.gz > "n100.r03.s024_output/n100.r03.s024.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s024_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:38eb3edd4b5bc8a4aeae1a74cf01c454fbed104fa0ef60a59913ad873162f433 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.1MiB max=128.9MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=210B max=1.0KiB
2021/07/08 16:50:06 scheduler task f5058066 (flow 9cf488a2): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s024.tar.gz resources {}
2021/07/08 16:50:06  ->  n100.r03.s024.Main.cp_out_file 9cf488a2 exec extern s3://niema-test/n100/r03/n100.r03.s024.tar.gz 35.7MiB
2021/07/08 16:50:06 scheduler task c688ac3a (flow 62629a74): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:06 scheduler task 80669d3f (flow fe21aeeb): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:06 scheduler task c3688bf6 (flow a83f360e): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:06 scheduler task c688ac3a (flow 62629a74): promoting objects (try 0): started
2021/07/08 16:50:06 scheduler task 80669d3f (flow fe21aeeb): transferring output (try 0): started
2021/07/08 16:50:06 scheduler task c3688bf6 (flow a83f360e): transferring output (try 0): started
2021/07/08 16:50:06 scheduler task e7b857e8 (flow 4dfce054): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:06 scheduler task e7b857e8 (flow 4dfce054): retrieving result (try 0): started
2021/07/08 16:50:06 scheduler task a03fdbd6 (flow f12c01f7): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:06 scheduler task a03fdbd6 (flow f12c01f7): retrieving result (try 0): started
2021/07/08 16:50:06 scheduler task c688ac3a (flow 62629a74): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:06 scheduler task 2128313b (flow 9e4c852f): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:06 scheduler task c688ac3a (flow 62629a74): retrieving diagnostic output (try 0): started
2021/07/08 16:50:06 scheduler task 2128313b (flow 9e4c852f): retrieving result (try 0): started
2021/07/08 16:50:06 scheduler task e1c62bb9 (flow 5ae9b7e9): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:06 scheduler task e7b857e8 (flow 4dfce054): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:06 scheduler task e1c62bb9 (flow 5ae9b7e9): promoting objects (try 0): started
2021/07/08 16:50:06 scheduler task a03fdbd6 (flow f12c01f7): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:06 scheduler task e7b857e8 (flow 4dfce054): transferring output (try 0): started
2021/07/08 16:50:06 scheduler task a03fdbd6 (flow f12c01f7): transferring output (try 0): started
2021/07/08 16:50:06 scheduler task c688ac3a (flow 62629a74): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:06 scheduler task 2128313b (flow 9e4c852f): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:06 scheduler task c688ac3a (flow 62629a74): retrieving result (try 0): started
2021/07/08 16:50:06 scheduler task 2128313b (flow 9e4c852f): transferring output (try 0): started
2021/07/08 16:50:06 scheduler task e1c62bb9 (flow 5ae9b7e9): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:06 scheduler task e1c62bb9 (flow 5ae9b7e9): retrieving diagnostic output (try 0): started
2021/07/08 16:50:06 scheduler task c688ac3a (flow 62629a74): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:06 scheduler task c688ac3a (flow 62629a74): transferring output (try 0): started
2021/07/08 16:50:06 scheduler task ee5e2b4e (flow b8e1f21b): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:06 scheduler task ee5e2b4e (flow b8e1f21b): promoting objects (try 0): started
2021/07/08 16:50:06 scheduler task 11b3b7c2 (flow 7b9422b3): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:06 scheduler task e1c62bb9 (flow 5ae9b7e9): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:06 scheduler task 11b3b7c2 (flow 7b9422b3): unloading (try 0): started
2021/07/08 16:50:06 scheduler task 11b3b7c2 (flow 7b9422b3): unloading list<val<.=f7517aa2 35.8MiB> 35.8MiB>
2021/07/08 16:50:06 scheduler task 11b3b7c2 (flow 7b9422b3): unloading val<.=b14af575 35.4MiB>
2021/07/08 16:50:06 scheduler task 11b3b7c2 (flow 7b9422b3): unloading val<.=86ba2255 35.4MiB>
2021/07/08 16:50:06 scheduler task e1c62bb9 (flow 5ae9b7e9): retrieving result (try 0): started
2021/07/08 16:50:06 scheduler task 4e63d0ea (flow c209d771): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:06 scheduler task 4e63d0ea (flow c209d771): unloading (try 0): started
2021/07/08 16:50:06 scheduler task 4e63d0ea (flow c209d771): unloading list<val<.=4c449794 35.7MiB> 35.7MiB>
2021/07/08 16:50:06 scheduler task 4e63d0ea (flow c209d771): unloading val<.=bae15681 35.4MiB>
2021/07/08 16:50:06 scheduler task 4e63d0ea (flow c209d771): unloading val<.=2e41da65 35.4MiB>
2021/07/08 16:50:06 scheduler task ee5e2b4e (flow b8e1f21b): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:06 scheduler task ee5e2b4e (flow b8e1f21b): retrieving diagnostic output (try 0): started
2021/07/08 16:50:06 scheduler task 11b3b7c2 (flow 7b9422b3): unloaded val<.=b14af575 35.4MiB>
2021/07/08 16:50:06 scheduler task 11b3b7c2 (flow 7b9422b3): unloaded list<val<.=f7517aa2 35.8MiB> 35.8MiB>
2021/07/08 16:50:06 scheduler task 11b3b7c2 (flow 7b9422b3): unloaded val<.=86ba2255 35.4MiB>
2021/07/08 16:50:06 scheduler task 11b3b7c2 (flow 7b9422b3): unloading (try 0): successful, next state: complete
2021/07/08 16:50:06 scheduler task e1c62bb9 (flow 5ae9b7e9): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:06  <-  n100.r03.s071.Main.out_file 7b9422b3 ok     exec 4m51s 35.8MiB
2021/07/08 16:50:06 n100.r03.s071.Main.out_file 7b9422b3 n100/r03/n100.r03.s071.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:cf2de270b0fd98a863667ea832487aec32eb2aca7788a6911eee8e1b8139dae4
	sha256:7b9422b37d3fb761f55a25e30173d9defc280cc52855869274f1c61e13e59a75
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/11b3b7c276a50d66511b7b7cde1e1d0a72ce6a7804263814f0401b1e07a0e43a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s071_output"
	    wget -O "n100.r03.s071_output/n100.r03.s071.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s071_output/n100.r03.s071.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s071_output/n100.r03.s071.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s071_output/n100.r03.s071.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s071_output/n100.r03.s071.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s071_output/n100.r03.s071.reference.fas" "n100.r03.s071_output/n100.r03.s071.fq1.fastq" "n100.r03.s071_output/n100.r03.s071.fq2.fastq" | samtools view -bS - > "n100.r03.s071_output/n100.r03.s071.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s071_output/n100.r03.s071.untrimmed.sorted.bam" "n100.r03.s071_output/n100.r03.s071.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s071_output/n100.r03.s071.untrimmed.sorted.bam" -b "n100.r03.s071_output/n100.r03.s071.primers.bed" -p "n100.r03.s071_output/n100.r03.s071.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s071_output/n100.r03.s071.trimmed.sorted.bam" "n100.r03.s071_output/n100.r03.s071.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s071_output/n100.r03.s071.reference.fas" "n100.r03.s071_output/n100.r03.s071.trimmed.sorted.bam" > "n100.r03.s071_output/n100.r03.s071.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s071_output/n100.r03.s071.reference.fas" --call-indels "n100.r03.s071_output/n100.r03.s071.trimmed.sorted.bam" > "n100.r03.s071_output/n100.r03.s071.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s071_output/n100.r03.s071.trimmed.sorted.bam" > "n100.r03.s071_output/n100.r03.s071.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s071_output/n100.r03.s071.depth.txt" "n100.r03.s071_output/n100.r03.s071.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s071_output/n100.r03.s071.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s071_output/n100.r03.s071.reference.fas" | bcftools consensus -m "n100.r03.s071_output/n100.r03.s071.low_depth.tsv" tmp.vcf.gz > "n100.r03.s071_output/n100.r03.s071.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s071_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f7517aa27f44f37d44f9f1e4a312030680a4c86c3694694228a50f2d1a163fc5 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.5MiB max=127.3MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 16:50:06 scheduler task eae0da4d (flow 06cd7cd7): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s071.tar.gz resources {}
2021/07/08 16:50:06  ->  n100.r03.s071.Main.cp_out_file 06cd7cd7 exec extern s3://niema-test/n100/r03/n100.r03.s071.tar.gz 35.8MiB
2021/07/08 16:50:06 scheduler task 4e63d0ea (flow c209d771): unloaded list<val<.=4c449794 35.7MiB> 35.7MiB>
2021/07/08 16:50:06 scheduler task 4e63d0ea (flow c209d771): unloaded val<.=2e41da65 35.4MiB>
2021/07/08 16:50:06 scheduler task 4e63d0ea (flow c209d771): unloaded val<.=bae15681 35.4MiB>
2021/07/08 16:50:06 scheduler task 4e63d0ea (flow c209d771): unloading (try 0): successful, next state: complete
2021/07/08 16:50:06 scheduler task e1c62bb9 (flow 5ae9b7e9): transferring output (try 0): started
2021/07/08 16:50:06  <-  n100.r03.s022.Main.out_file c209d771 ok     exec 5m1s 35.7MiB
2021/07/08 16:50:06 n100.r03.s022.Main.out_file c209d771 n100/r03/n100.r03.s022.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:85940a13cdbb7cfaf4f619fb3ddb065a874492d8f3a3e4a638075b3ccc2f84f0
	sha256:c209d77157b3e2e5edaaae9058cad5cbfb4bd369648cb2e6d3172447dc6a79df
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4e63d0ea20700afe9203fc0ecf976972edb0e0b8f3cda86a3633319ebc7d7732
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s022_output"
	    wget -O "n100.r03.s022_output/n100.r03.s022.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s022_output/n100.r03.s022.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s022_output/n100.r03.s022.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s022_output/n100.r03.s022.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s022_output/n100.r03.s022.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s022_output/n100.r03.s022.reference.fas" "n100.r03.s022_output/n100.r03.s022.fq1.fastq" "n100.r03.s022_output/n100.r03.s022.fq2.fastq" | samtools view -bS - > "n100.r03.s022_output/n100.r03.s022.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s022_output/n100.r03.s022.untrimmed.sorted.bam" "n100.r03.s022_output/n100.r03.s022.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s022_output/n100.r03.s022.untrimmed.sorted.bam" -b "n100.r03.s022_output/n100.r03.s022.primers.bed" -p "n100.r03.s022_output/n100.r03.s022.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s022_output/n100.r03.s022.trimmed.sorted.bam" "n100.r03.s022_output/n100.r03.s022.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s022_output/n100.r03.s022.reference.fas" "n100.r03.s022_output/n100.r03.s022.trimmed.sorted.bam" > "n100.r03.s022_output/n100.r03.s022.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s022_output/n100.r03.s022.reference.fas" --call-indels "n100.r03.s022_output/n100.r03.s022.trimmed.sorted.bam" > "n100.r03.s022_output/n100.r03.s022.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s022_output/n100.r03.s022.trimmed.sorted.bam" > "n100.r03.s022_output/n100.r03.s022.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s022_output/n100.r03.s022.depth.txt" "n100.r03.s022_output/n100.r03.s022.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s022_output/n100.r03.s022.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s022_output/n100.r03.s022.reference.fas" | bcftools consensus -m "n100.r03.s022_output/n100.r03.s022.low_depth.tsv" tmp.vcf.gz > "n100.r03.s022_output/n100.r03.s022.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s022_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:4c44979447cda011ff75422359e4e053d62bf7bb50a849ad027677ddbb8de23f 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=21.4MiB max=129.1MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=172B max=1.0KiB
2021/07/08 16:50:06 scheduler task 4323b583 (flow ee417539): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s022.tar.gz resources {}
2021/07/08 16:50:06  ->  n100.r03.s022.Main.cp_out_file ee417539 exec extern s3://niema-test/n100/r03/n100.r03.s022.tar.gz 35.7MiB
2021/07/08 16:50:06 scheduler task ee5e2b4e (flow b8e1f21b): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:06 scheduler task ee5e2b4e (flow b8e1f21b): retrieving result (try 0): started
2021/07/08 16:50:06 scheduler task fc594dfb (flow 68b7a84f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:9a0ee0ee796076733ae383024c78d45119385d77a83e8ccf2a8243ba7f1fbfb5 -> s3://niema-test/n100/r03/n100.r03.s070.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:50:06  <-  n100.r03.s070.Main.cp_out_file 68b7a84f ok   extern 0s 35.7MiB
2021/07/08 16:50:06 scheduler task ee5e2b4e (flow b8e1f21b): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:06 scheduler task 80669d3f (flow fe21aeeb): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:06 scheduler task e7b857e8 (flow 4dfce054): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:06 scheduler task c3688bf6 (flow a83f360e): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:06 scheduler task ee5e2b4e (flow b8e1f21b): transferring output (try 0): started
2021/07/08 16:50:06 scheduler task 80669d3f (flow fe21aeeb): unloading (try 0): started
2021/07/08 16:50:06 scheduler task 80669d3f (flow fe21aeeb): unloading list<val<.=fbd765a6 35.8MiB> 35.8MiB>
2021/07/08 16:50:06 scheduler task 80669d3f (flow fe21aeeb): unloading val<.=1b88560b 35.4MiB>
2021/07/08 16:50:06 scheduler task 80669d3f (flow fe21aeeb): unloading val<.=4c0bab0d 35.4MiB>
2021/07/08 16:50:06 scheduler task e7b857e8 (flow 4dfce054): unloading (try 0): started
2021/07/08 16:50:06 scheduler task e7b857e8 (flow 4dfce054): unloading list<val<.=b1fc012d 35.7MiB> 35.7MiB>
2021/07/08 16:50:06 scheduler task e7b857e8 (flow 4dfce054): unloading val<.=60f83df1 35.4MiB>
2021/07/08 16:50:06 scheduler task e7b857e8 (flow 4dfce054): unloading val<.=c76a2048 35.4MiB>
2021/07/08 16:50:06 scheduler task c3688bf6 (flow a83f360e): unloading (try 0): started
2021/07/08 16:50:06 scheduler task c3688bf6 (flow a83f360e): unloading list<val<.=b42cd5e4 35.7MiB> 35.7MiB>
2021/07/08 16:50:06 scheduler task c3688bf6 (flow a83f360e): unloading val<.=960c242f 35.4MiB>
2021/07/08 16:50:06 scheduler task c3688bf6 (flow a83f360e): unloading val<.=a5dd78d2 35.4MiB>
2021/07/08 16:50:06 scheduler task a03fdbd6 (flow f12c01f7): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:06 scheduler task f5058066 (flow 9cf488a2): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:38eb3edd4b5bc8a4aeae1a74cf01c454fbed104fa0ef60a59913ad873162f433 -> s3://niema-test/n100/r03/n100.r03.s024.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:50:06  <-  n100.r03.s024.Main.cp_out_file 9cf488a2 ok   extern 0s 35.7MiB
2021/07/08 16:50:06 scheduler task a03fdbd6 (flow f12c01f7): unloading (try 0): started
2021/07/08 16:50:06 scheduler task a03fdbd6 (flow f12c01f7): unloading val<.=bbd9d1bb 35.4MiB>
2021/07/08 16:50:06 scheduler task a03fdbd6 (flow f12c01f7): unloading val<.=3abb74bd 35.4MiB>
2021/07/08 16:50:06 scheduler task a03fdbd6 (flow f12c01f7): unloading list<val<.=18253a8f 35.7MiB> 35.7MiB>
2021/07/08 16:50:06 scheduler task 2128313b (flow 9e4c852f): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:06 scheduler task 2128313b (flow 9e4c852f): unloading (try 0): started
2021/07/08 16:50:06 scheduler task 2128313b (flow 9e4c852f): unloading list<val<.=8d743a35 35.8MiB> 35.8MiB>
2021/07/08 16:50:06 scheduler task 2128313b (flow 9e4c852f): unloading val<.=8d40f527 35.4MiB>
2021/07/08 16:50:06 scheduler task 2128313b (flow 9e4c852f): unloading val<.=31daf582 35.4MiB>
2021/07/08 16:50:06 scheduler task 80669d3f (flow fe21aeeb): unloaded list<val<.=fbd765a6 35.8MiB> 35.8MiB>
2021/07/08 16:50:06 scheduler task 80669d3f (flow fe21aeeb): unloaded val<.=1b88560b 35.4MiB>
2021/07/08 16:50:06 scheduler task 80669d3f (flow fe21aeeb): unloaded val<.=4c0bab0d 35.4MiB>
2021/07/08 16:50:06 scheduler task 80669d3f (flow fe21aeeb): unloading (try 0): successful, next state: complete
2021/07/08 16:50:06  <-  n100.r03.s026.Main.out_file fe21aeeb ok     exec 4m51s 35.8MiB
2021/07/08 16:50:06 n100.r03.s026.Main.out_file fe21aeeb n100/r03/n100.r03.s026.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:55a287870612a9002fb0d269439e6eeccc4717a7a6dff5e46690e06f367af6c7
	sha256:fe21aeeb51ab52bdf6ef5736776997d9746a5ac9d1b9431c60dbd542a9cdc22a
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/80669d3ff48d97d1ffd912d15419d9a83d12605b91861da28f43fc1b76232cb8
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s026_output"
	    wget -O "n100.r03.s026_output/n100.r03.s026.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s026_output/n100.r03.s026.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s026_output/n100.r03.s026.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s026_output/n100.r03.s026.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s026_output/n100.r03.s026.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s026_output/n100.r03.s026.reference.fas" "n100.r03.s026_output/n100.r03.s026.fq1.fastq" "n100.r03.s026_output/n100.r03.s026.fq2.fastq" | samtools view -bS - > "n100.r03.s026_output/n100.r03.s026.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s026_output/n100.r03.s026.untrimmed.sorted.bam" "n100.r03.s026_output/n100.r03.s026.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s026_output/n100.r03.s026.untrimmed.sorted.bam" -b "n100.r03.s026_output/n100.r03.s026.primers.bed" -p "n100.r03.s026_output/n100.r03.s026.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s026_output/n100.r03.s026.trimmed.sorted.bam" "n100.r03.s026_output/n100.r03.s026.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s026_output/n100.r03.s026.reference.fas" "n100.r03.s026_output/n100.r03.s026.trimmed.sorted.bam" > "n100.r03.s026_output/n100.r03.s026.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s026_output/n100.r03.s026.reference.fas" --call-indels "n100.r03.s026_output/n100.r03.s026.trimmed.sorted.bam" > "n100.r03.s026_output/n100.r03.s026.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s026_output/n100.r03.s026.trimmed.sorted.bam" > "n100.r03.s026_output/n100.r03.s026.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s026_output/n100.r03.s026.depth.txt" "n100.r03.s026_output/n100.r03.s026.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s026_output/n100.r03.s026.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s026_output/n100.r03.s026.reference.fas" | bcftools consensus -m "n100.r03.s026_output/n100.r03.s026.low_depth.tsv" tmp.vcf.gz > "n100.r03.s026_output/n100.r03.s026.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s026_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:fbd765a6adc3108e95fe22d2e78a7096aeb3e856d9a89de8d79d620703076293 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.3MiB max=130.8MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 16:50:06 scheduler task 50030731 (flow 596285ad): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s026.tar.gz resources {}
2021/07/08 16:50:06  ->  n100.r03.s026.Main.cp_out_file 596285ad exec extern s3://niema-test/n100/r03/n100.r03.s026.tar.gz 35.8MiB
2021/07/08 16:50:06 scheduler task e7b857e8 (flow 4dfce054): unloaded list<val<.=b1fc012d 35.7MiB> 35.7MiB>
2021/07/08 16:50:06 scheduler task e7b857e8 (flow 4dfce054): unloaded val<.=c76a2048 35.4MiB>
2021/07/08 16:50:06 scheduler task e7b857e8 (flow 4dfce054): unloaded val<.=60f83df1 35.4MiB>
2021/07/08 16:50:06 scheduler task e7b857e8 (flow 4dfce054): unloading (try 0): successful, next state: complete
2021/07/08 16:50:06 scheduler task c3688bf6 (flow a83f360e): unloaded list<val<.=b42cd5e4 35.7MiB> 35.7MiB>
2021/07/08 16:50:06 scheduler task c3688bf6 (flow a83f360e): unloaded val<.=960c242f 35.4MiB>
2021/07/08 16:50:06  <-  n100.r03.s049.Main.out_file 4dfce054 ok     exec 5m1s 35.7MiB
2021/07/08 16:50:06 n100.r03.s049.Main.out_file 4dfce054 n100/r03/n100.r03.s049.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1d25ed1e1a6ce0941e1cf23f97b96d6623171a2046df205b16afdc339c2814e5
	sha256:4dfce054ad308155dd60547b5d82460d277e291aedde57b9406ac03742b50f0d
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e7b857e83c05a20442c0820a9a62e54fb67749c806d8c9bf78c7305eb975be90
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s049_output"
	    wget -O "n100.r03.s049_output/n100.r03.s049.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s049_output/n100.r03.s049.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s049_output/n100.r03.s049.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s049_output/n100.r03.s049.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s049_output/n100.r03.s049.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s049_output/n100.r03.s049.reference.fas" "n100.r03.s049_output/n100.r03.s049.fq1.fastq" "n100.r03.s049_output/n100.r03.s049.fq2.fastq" | samtools view -bS - > "n100.r03.s049_output/n100.r03.s049.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s049_output/n100.r03.s049.untrimmed.sorted.bam" "n100.r03.s049_output/n100.r03.s049.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s049_output/n100.r03.s049.untrimmed.sorted.bam" -b "n100.r03.s049_output/n100.r03.s049.primers.bed" -p "n100.r03.s049_output/n100.r03.s049.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s049_output/n100.r03.s049.trimmed.sorted.bam" "n100.r03.s049_output/n100.r03.s049.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s049_output/n100.r03.s049.reference.fas" "n100.r03.s049_output/n100.r03.s049.trimmed.sorted.bam" > "n100.r03.s049_output/n100.r03.s049.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s049_output/n100.r03.s049.reference.fas" --call-indels "n100.r03.s049_output/n100.r03.s049.trimmed.sorted.bam" > "n100.r03.s049_output/n100.r03.s049.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s049_output/n100.r03.s049.trimmed.sorted.bam" > "n100.r03.s049_output/n100.r03.s049.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s049_output/n100.r03.s049.depth.txt" "n100.r03.s049_output/n100.r03.s049.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s049_output/n100.r03.s049.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s049_output/n100.r03.s049.reference.fas" | bcftools consensus -m "n100.r03.s049_output/n100.r03.s049.low_depth.tsv" tmp.vcf.gz > "n100.r03.s049_output/n100.r03.s049.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s049_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:b1fc012d5c2f0c95fb116afe1f11c4c7d5fb6750b7eeb3205afabd925be87005 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=22.1MiB max=129.7MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=174B max=1.0KiB
2021/07/08 16:50:06 scheduler task 4ad48ec7 (flow 1d6055e2): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s049.tar.gz resources {}
2021/07/08 16:50:06  ->  n100.r03.s049.Main.cp_out_file 1d6055e2 exec extern s3://niema-test/n100/r03/n100.r03.s049.tar.gz 35.7MiB
2021/07/08 16:50:06 scheduler task c3688bf6 (flow a83f360e): unloaded val<.=a5dd78d2 35.4MiB>
2021/07/08 16:50:06 scheduler task c3688bf6 (flow a83f360e): unloading (try 0): successful, next state: complete
2021/07/08 16:50:06  <-  n100.r03.s047.Main.out_file a83f360e ok     exec 5m1s 35.7MiB
2021/07/08 16:50:06 n100.r03.s047.Main.out_file a83f360e n100/r03/n100.r03.s047.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c1b60b3b37cc47874ad52c4a4b31aba48d8e7b2ab522e350575cd87183b4d83d
	sha256:a83f360e35f71f7f1af1b53ff9439373cd2da073e04dc0aae64e1b4cf09eba5e
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c3688bf605797010a29c37419cc710aff72a8ec92c8ee73cdd9911d6f4d09212
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s047_output"
	    wget -O "n100.r03.s047_output/n100.r03.s047.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s047_output/n100.r03.s047.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s047_output/n100.r03.s047.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s047_output/n100.r03.s047.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s047_output/n100.r03.s047.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s047_output/n100.r03.s047.reference.fas" "n100.r03.s047_output/n100.r03.s047.fq1.fastq" "n100.r03.s047_output/n100.r03.s047.fq2.fastq" | samtools view -bS - > "n100.r03.s047_output/n100.r03.s047.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s047_output/n100.r03.s047.untrimmed.sorted.bam" "n100.r03.s047_output/n100.r03.s047.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s047_output/n100.r03.s047.untrimmed.sorted.bam" -b "n100.r03.s047_output/n100.r03.s047.primers.bed" -p "n100.r03.s047_output/n100.r03.s047.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s047_output/n100.r03.s047.trimmed.sorted.bam" "n100.r03.s047_output/n100.r03.s047.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s047_output/n100.r03.s047.reference.fas" "n100.r03.s047_output/n100.r03.s047.trimmed.sorted.bam" > "n100.r03.s047_output/n100.r03.s047.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s047_output/n100.r03.s047.reference.fas" --call-indels "n100.r03.s047_output/n100.r03.s047.trimmed.sorted.bam" > "n100.r03.s047_output/n100.r03.s047.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s047_output/n100.r03.s047.trimmed.sorted.bam" > "n100.r03.s047_output/n100.r03.s047.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s047_output/n100.r03.s047.depth.txt" "n100.r03.s047_output/n100.r03.s047.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s047_output/n100.r03.s047.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s047_output/n100.r03.s047.reference.fas" | bcftools consensus -m "n100.r03.s047_output/n100.r03.s047.low_depth.tsv" tmp.vcf.gz > "n100.r03.s047_output/n100.r03.s047.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s047_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:b42cd5e40ef9ad5673f2df743c627d798bcc97c18f97dce359f34f70cb18afe5 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=23.0MiB max=130.2MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=347B max=2.0KiB
2021/07/08 16:50:06 scheduler task 4ebcd882 (flow de0b4e8d): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s047.tar.gz resources {}
2021/07/08 16:50:06  ->  n100.r03.s047.Main.cp_out_file de0b4e8d exec extern s3://niema-test/n100/r03/n100.r03.s047.tar.gz 35.7MiB
2021/07/08 16:50:06 scheduler task a03fdbd6 (flow f12c01f7): unloaded val<.=bbd9d1bb 35.4MiB>
2021/07/08 16:50:06 scheduler task a03fdbd6 (flow f12c01f7): unloaded list<val<.=18253a8f 35.7MiB> 35.7MiB>
2021/07/08 16:50:06 scheduler task a03fdbd6 (flow f12c01f7): unloaded val<.=3abb74bd 35.4MiB>
2021/07/08 16:50:06 scheduler task a03fdbd6 (flow f12c01f7): unloading (try 0): successful, next state: complete
2021/07/08 16:50:06  <-  n100.r03.s094.Main.out_file f12c01f7 ok     exec 4m51s 35.7MiB
2021/07/08 16:50:06 n100.r03.s094.Main.out_file f12c01f7 n100/r03/n100.r03.s094.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f4e7cb07065c64ced6f204321138463e0249f5fb7ee1a52ed2246ff501ef3542
	sha256:f12c01f71deeea00487d9de269965e6626c13469099dbf33fb8b506106bc9212
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a03fdbd6b01c0e8a720cf7ee794ede8f0fc49139d01a2775651ce333a14836c7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s094_output"
	    wget -O "n100.r03.s094_output/n100.r03.s094.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s094_output/n100.r03.s094.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s094_output/n100.r03.s094.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s094_output/n100.r03.s094.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s094_output/n100.r03.s094.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s094_output/n100.r03.s094.reference.fas" "n100.r03.s094_output/n100.r03.s094.fq1.fastq" "n100.r03.s094_output/n100.r03.s094.fq2.fastq" | samtools view -bS - > "n100.r03.s094_output/n100.r03.s094.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s094_output/n100.r03.s094.untrimmed.sorted.bam" "n100.r03.s094_output/n100.r03.s094.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s094_output/n100.r03.s094.untrimmed.sorted.bam" -b "n100.r03.s094_output/n100.r03.s094.primers.bed" -p "n100.r03.s094_output/n100.r03.s094.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s094_output/n100.r03.s094.trimmed.sorted.bam" "n100.r03.s094_output/n100.r03.s094.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s094_output/n100.r03.s094.reference.fas" "n100.r03.s094_output/n100.r03.s094.trimmed.sorted.bam" > "n100.r03.s094_output/n100.r03.s094.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s094_output/n100.r03.s094.reference.fas" --call-indels "n100.r03.s094_output/n100.r03.s094.trimmed.sorted.bam" > "n100.r03.s094_output/n100.r03.s094.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s094_output/n100.r03.s094.trimmed.sorted.bam" > "n100.r03.s094_output/n100.r03.s094.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s094_output/n100.r03.s094.depth.txt" "n100.r03.s094_output/n100.r03.s094.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s094_output/n100.r03.s094.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s094_output/n100.r03.s094.reference.fas" | bcftools consensus -m "n100.r03.s094_output/n100.r03.s094.low_depth.tsv" tmp.vcf.gz > "n100.r03.s094_output/n100.r03.s094.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s094_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:18253a8f46c9c6611baf5179dad8ebdd7760caaa675a83be3d9e289663bbcfa2 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.4MiB max=126.9MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 16:50:06 scheduler task e7d8a16f (flow 1baf5846): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s094.tar.gz resources {}
2021/07/08 16:50:06  ->  n100.r03.s094.Main.cp_out_file 1baf5846 exec extern s3://niema-test/n100/r03/n100.r03.s094.tar.gz 35.7MiB
2021/07/08 16:50:06 scheduler task 2128313b (flow 9e4c852f): unloaded list<val<.=8d743a35 35.8MiB> 35.8MiB>
2021/07/08 16:50:06 scheduler task 2128313b (flow 9e4c852f): unloaded val<.=31daf582 35.4MiB>
2021/07/08 16:50:06 scheduler task 2128313b (flow 9e4c852f): unloaded val<.=8d40f527 35.4MiB>
2021/07/08 16:50:06 scheduler task 2128313b (flow 9e4c852f): unloading (try 0): successful, next state: complete
2021/07/08 16:50:06  <-  n100.r03.s041.Main.out_file 9e4c852f ok     exec 5m1s 35.8MiB
2021/07/08 16:50:06 n100.r03.s041.Main.out_file 9e4c852f n100/r03/n100.r03.s041.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:33a3e1cee9e4caef33727e3bff541e5e5507ee7a34d39147032979db6f6830b8
	sha256:9e4c852f77f5e84c49aedd026de0bb3273537b59b338aaa9cf66c369c85459d5
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/2128313be759c33cb41a44111e63e6944de98327a4da53be90b9a318fbc670ec
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s041_output"
	    wget -O "n100.r03.s041_output/n100.r03.s041.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s041_output/n100.r03.s041.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s041_output/n100.r03.s041.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s041_output/n100.r03.s041.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s041_output/n100.r03.s041.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s041_output/n100.r03.s041.reference.fas" "n100.r03.s041_output/n100.r03.s041.fq1.fastq" "n100.r03.s041_output/n100.r03.s041.fq2.fastq" | samtools view -bS - > "n100.r03.s041_output/n100.r03.s041.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s041_output/n100.r03.s041.untrimmed.sorted.bam" "n100.r03.s041_output/n100.r03.s041.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s041_output/n100.r03.s041.untrimmed.sorted.bam" -b "n100.r03.s041_output/n100.r03.s041.primers.bed" -p "n100.r03.s041_output/n100.r03.s041.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s041_output/n100.r03.s041.trimmed.sorted.bam" "n100.r03.s041_output/n100.r03.s041.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s041_output/n100.r03.s041.reference.fas" "n100.r03.s041_output/n100.r03.s041.trimmed.sorted.bam" > "n100.r03.s041_output/n100.r03.s041.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s041_output/n100.r03.s041.reference.fas" --call-indels "n100.r03.s041_output/n100.r03.s041.trimmed.sorted.bam" > "n100.r03.s041_output/n100.r03.s041.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s041_output/n100.r03.s041.trimmed.sorted.bam" > "n100.r03.s041_output/n100.r03.s041.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s041_output/n100.r03.s041.depth.txt" "n100.r03.s041_output/n100.r03.s041.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s041_output/n100.r03.s041.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s041_output/n100.r03.s041.reference.fas" | bcftools consensus -m "n100.r03.s041_output/n100.r03.s041.low_depth.tsv" tmp.vcf.gz > "n100.r03.s041_output/n100.r03.s041.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s041_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:8d743a3559c1626ba7a2025eb52832b46fe024dd1730f9651a0ff87b0d93940b 35.8MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=23.3MiB max=127.9MiB
	    disk mean=6.8MiB max=35.8MiB
	    tmp mean=349B max=2.0KiB
2021/07/08 16:50:06 scheduler task 454f0299 (flow afd570c1): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s041.tar.gz resources {}
2021/07/08 16:50:06  ->  n100.r03.s041.Main.cp_out_file afd570c1 exec extern s3://niema-test/n100/r03/n100.r03.s041.tar.gz 35.8MiB
2021/07/08 16:50:06 scheduler task c688ac3a (flow 62629a74): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:06 scheduler task c688ac3a (flow 62629a74): unloading (try 0): started
2021/07/08 16:50:06 scheduler task c688ac3a (flow 62629a74): unloading list<val<.=60861d97 35.7MiB> 35.7MiB>
2021/07/08 16:50:06 scheduler task c688ac3a (flow 62629a74): unloading val<.=f61ddbbd 35.4MiB>
2021/07/08 16:50:06 scheduler task c688ac3a (flow 62629a74): unloading val<.=28d1d1d1 35.4MiB>
2021/07/08 16:50:06 scheduler task c688ac3a (flow 62629a74): unloaded val<.=f61ddbbd 35.4MiB>
2021/07/08 16:50:06 scheduler task c688ac3a (flow 62629a74): unloaded list<val<.=60861d97 35.7MiB> 35.7MiB>
2021/07/08 16:50:06 scheduler task c688ac3a (flow 62629a74): unloaded val<.=28d1d1d1 35.4MiB>
2021/07/08 16:50:06 scheduler task c688ac3a (flow 62629a74): unloading (try 0): successful, next state: complete
2021/07/08 16:50:06  <-  n100.r03.s076.Main.out_file 62629a74 ok     exec 4m52s 35.7MiB
2021/07/08 16:50:06 n100.r03.s076.Main.out_file 62629a74 n100/r03/n100.r03.s076.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a4670f863d25754325acdb6dd428cb7d497bcc7e35fc59db8bc97f684397ff45
	sha256:62629a7448be71bf3d127e3a6235f3f95a772ff976077816cf4467d42908f7a1
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/c688ac3a938a6efb4caa49a4e136982cb19c86f3b15c30479faf941a13078f35
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s076_output"
	    wget -O "n100.r03.s076_output/n100.r03.s076.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s076_output/n100.r03.s076.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s076_output/n100.r03.s076.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s076_output/n100.r03.s076.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s076_output/n100.r03.s076.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s076_output/n100.r03.s076.reference.fas" "n100.r03.s076_output/n100.r03.s076.fq1.fastq" "n100.r03.s076_output/n100.r03.s076.fq2.fastq" | samtools view -bS - > "n100.r03.s076_output/n100.r03.s076.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s076_output/n100.r03.s076.untrimmed.sorted.bam" "n100.r03.s076_output/n100.r03.s076.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s076_output/n100.r03.s076.untrimmed.sorted.bam" -b "n100.r03.s076_output/n100.r03.s076.primers.bed" -p "n100.r03.s076_output/n100.r03.s076.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s076_output/n100.r03.s076.trimmed.sorted.bam" "n100.r03.s076_output/n100.r03.s076.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s076_output/n100.r03.s076.reference.fas" "n100.r03.s076_output/n100.r03.s076.trimmed.sorted.bam" > "n100.r03.s076_output/n100.r03.s076.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s076_output/n100.r03.s076.reference.fas" --call-indels "n100.r03.s076_output/n100.r03.s076.trimmed.sorted.bam" > "n100.r03.s076_output/n100.r03.s076.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s076_output/n100.r03.s076.trimmed.sorted.bam" > "n100.r03.s076_output/n100.r03.s076.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s076_output/n100.r03.s076.depth.txt" "n100.r03.s076_output/n100.r03.s076.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s076_output/n100.r03.s076.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s076_output/n100.r03.s076.reference.fas" | bcftools consensus -m "n100.r03.s076_output/n100.r03.s076.low_depth.tsv" tmp.vcf.gz > "n100.r03.s076_output/n100.r03.s076.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s076_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:60861d97b99f08a9b2aab2e221dc7a64445fc9d7aea0433ba25121a11d9b342d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.2MiB max=127.3MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=419B max=2.0KiB
2021/07/08 16:50:06 scheduler task 6ac0ca32 (flow 4a48fd86): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s076.tar.gz resources {}
2021/07/08 16:50:06  ->  n100.r03.s076.Main.cp_out_file 4a48fd86 exec extern s3://niema-test/n100/r03/n100.r03.s076.tar.gz 35.7MiB
2021/07/08 16:50:06 scheduler task e1c62bb9 (flow 5ae9b7e9): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:06 scheduler task e1c62bb9 (flow 5ae9b7e9): unloading (try 0): started
2021/07/08 16:50:06 scheduler task e1c62bb9 (flow 5ae9b7e9): unloading list<val<.=12514dd6 35.8MiB> 35.8MiB>
2021/07/08 16:50:06 scheduler task e1c62bb9 (flow 5ae9b7e9): unloading val<.=24e593dc 35.4MiB>
2021/07/08 16:50:06 scheduler task e1c62bb9 (flow 5ae9b7e9): unloading val<.=37f870be 35.4MiB>
2021/07/08 16:50:07 scheduler task e1c62bb9 (flow 5ae9b7e9): unloaded list<val<.=12514dd6 35.8MiB> 35.8MiB>
2021/07/08 16:50:07 scheduler task e1c62bb9 (flow 5ae9b7e9): unloaded val<.=24e593dc 35.4MiB>
2021/07/08 16:50:07 scheduler task e1c62bb9 (flow 5ae9b7e9): unloaded val<.=37f870be 35.4MiB>
2021/07/08 16:50:07 scheduler task e1c62bb9 (flow 5ae9b7e9): unloading (try 0): successful, next state: complete
2021/07/08 16:50:07  <-  n100.r03.s088.Main.out_file 5ae9b7e9 ok     exec 5m2s 35.8MiB
2021/07/08 16:50:07 n100.r03.s088.Main.out_file 5ae9b7e9 n100/r03/n100.r03.s088.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3d0261d986df6662d36f608ce6e5407f67947a639d3c305b7446fbec12d2fa22
	sha256:5ae9b7e92d72c73170a79f73b8bb88b8494ef3cf068750d0f6fbc2078a844679
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/e1c62bb92e58afc32530b92440ca865b4bc0f57e3149f42428642effcb18421f
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s088_output"
	    wget -O "n100.r03.s088_output/n100.r03.s088.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s088_output/n100.r03.s088.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s088_output/n100.r03.s088.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s088_output/n100.r03.s088.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s088_output/n100.r03.s088.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s088_output/n100.r03.s088.reference.fas" "n100.r03.s088_output/n100.r03.s088.fq1.fastq" "n100.r03.s088_output/n100.r03.s088.fq2.fastq" | samtools view -bS - > "n100.r03.s088_output/n100.r03.s088.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s088_output/n100.r03.s088.untrimmed.sorted.bam" "n100.r03.s088_output/n100.r03.s088.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s088_output/n100.r03.s088.untrimmed.sorted.bam" -b "n100.r03.s088_output/n100.r03.s088.primers.bed" -p "n100.r03.s088_output/n100.r03.s088.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s088_output/n100.r03.s088.trimmed.sorted.bam" "n100.r03.s088_output/n100.r03.s088.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s088_output/n100.r03.s088.reference.fas" "n100.r03.s088_output/n100.r03.s088.trimmed.sorted.bam" > "n100.r03.s088_output/n100.r03.s088.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s088_output/n100.r03.s088.reference.fas" --call-indels "n100.r03.s088_output/n100.r03.s088.trimmed.sorted.bam" > "n100.r03.s088_output/n100.r03.s088.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s088_output/n100.r03.s088.trimmed.sorted.bam" > "n100.r03.s088_output/n100.r03.s088.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s088_output/n100.r03.s088.depth.txt" "n100.r03.s088_output/n100.r03.s088.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s088_output/n100.r03.s088.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s088_output/n100.r03.s088.reference.fas" | bcftools consensus -m "n100.r03.s088_output/n100.r03.s088.low_depth.tsv" tmp.vcf.gz > "n100.r03.s088_output/n100.r03.s088.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s088_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:12514dd6ecfedf06fcd7f14e9712e17d826b18b4a917c14a91656b3618573fff 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=23.4MiB max=128.2MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=349B max=2.0KiB
2021/07/08 16:50:07 scheduler task 571a32ed (flow 398f523f): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s088.tar.gz resources {}
2021/07/08 16:50:07  ->  n100.r03.s088.Main.cp_out_file 398f523f exec extern s3://niema-test/n100/r03/n100.r03.s088.tar.gz 35.8MiB
2021/07/08 16:50:07 scheduler task eae0da4d (flow 06cd7cd7): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f7517aa27f44f37d44f9f1e4a312030680a4c86c3694694228a50f2d1a163fc5 -> s3://niema-test/n100/r03/n100.r03.s071.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:50:07  <-  n100.r03.s071.Main.cp_out_file 06cd7cd7 ok   extern 0s 35.8MiB
2021/07/08 16:50:07 scheduler task ee5e2b4e (flow b8e1f21b): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:07 scheduler task ee5e2b4e (flow b8e1f21b): unloading (try 0): started
2021/07/08 16:50:07 scheduler task ee5e2b4e (flow b8e1f21b): unloading list<val<.=891320b3 35.7MiB> 35.7MiB>
2021/07/08 16:50:07 scheduler task ee5e2b4e (flow b8e1f21b): unloading val<.=68ab5861 35.4MiB>
2021/07/08 16:50:07 scheduler task ee5e2b4e (flow b8e1f21b): unloading val<.=b293c838 35.4MiB>
2021/07/08 16:50:07 scheduler task ee5e2b4e (flow b8e1f21b): unloaded list<val<.=891320b3 35.7MiB> 35.7MiB>
2021/07/08 16:50:07 scheduler task ee5e2b4e (flow b8e1f21b): unloaded val<.=68ab5861 35.4MiB>
2021/07/08 16:50:07 scheduler task ee5e2b4e (flow b8e1f21b): unloaded val<.=b293c838 35.4MiB>
2021/07/08 16:50:07 scheduler task ee5e2b4e (flow b8e1f21b): unloading (try 0): successful, next state: complete
2021/07/08 16:50:07  <-  n100.r03.s018.Main.out_file b8e1f21b ok     exec 4m52s 35.7MiB
2021/07/08 16:50:07 n100.r03.s018.Main.out_file b8e1f21b n100/r03/n100.r03.s018.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a4014a3a00e3cadae467a258cbf5a652765f77cf9fde39ded754732925f81ab8
	sha256:b8e1f21be10cb7b57a0eaeeff9577bd9caf80ed9934e012c6de22020fcce3d1f
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ee5e2b4e29fb1470c4d83d7dee8e9a197b7c0116d120c42ede36b42111dfbde7
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s018_output"
	    wget -O "n100.r03.s018_output/n100.r03.s018.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s018_output/n100.r03.s018.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s018_output/n100.r03.s018.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s018_output/n100.r03.s018.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s018_output/n100.r03.s018.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s018_output/n100.r03.s018.reference.fas" "n100.r03.s018_output/n100.r03.s018.fq1.fastq" "n100.r03.s018_output/n100.r03.s018.fq2.fastq" | samtools view -bS - > "n100.r03.s018_output/n100.r03.s018.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s018_output/n100.r03.s018.untrimmed.sorted.bam" "n100.r03.s018_output/n100.r03.s018.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s018_output/n100.r03.s018.untrimmed.sorted.bam" -b "n100.r03.s018_output/n100.r03.s018.primers.bed" -p "n100.r03.s018_output/n100.r03.s018.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s018_output/n100.r03.s018.trimmed.sorted.bam" "n100.r03.s018_output/n100.r03.s018.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s018_output/n100.r03.s018.reference.fas" "n100.r03.s018_output/n100.r03.s018.trimmed.sorted.bam" > "n100.r03.s018_output/n100.r03.s018.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s018_output/n100.r03.s018.reference.fas" --call-indels "n100.r03.s018_output/n100.r03.s018.trimmed.sorted.bam" > "n100.r03.s018_output/n100.r03.s018.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s018_output/n100.r03.s018.trimmed.sorted.bam" > "n100.r03.s018_output/n100.r03.s018.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s018_output/n100.r03.s018.depth.txt" "n100.r03.s018_output/n100.r03.s018.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s018_output/n100.r03.s018.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s018_output/n100.r03.s018.reference.fas" | bcftools consensus -m "n100.r03.s018_output/n100.r03.s018.low_depth.tsv" tmp.vcf.gz > "n100.r03.s018_output/n100.r03.s018.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s018_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:891320b39da644a918e8aa51f80a2d4ec49f76955cdcdc7ca63dcd0934f7cdc0 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.7MiB max=132.7MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 16:50:07 scheduler task bb0952b9 (flow fc333760): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s018.tar.gz resources {}
2021/07/08 16:50:07  ->  n100.r03.s018.Main.cp_out_file fc333760 exec extern s3://niema-test/n100/r03/n100.r03.s018.tar.gz 35.7MiB
2021/07/08 16:50:07 scheduler task b3ec1597 (flow 56168040): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:07 scheduler task b3ec1597 (flow 56168040): promoting objects (try 0): started
2021/07/08 16:50:07 scheduler task 4323b583 (flow ee417539): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:4c44979447cda011ff75422359e4e053d62bf7bb50a849ad027677ddbb8de23f -> s3://niema-test/n100/r03/n100.r03.s022.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:50:07  <-  n100.r03.s022.Main.cp_out_file ee417539 ok   extern 0s 35.7MiB
2021/07/08 16:50:07 scheduler task b3ec1597 (flow 56168040): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:07 scheduler task b3ec1597 (flow 56168040): retrieving diagnostic output (try 0): started
2021/07/08 16:50:07 scheduler task b3ec1597 (flow 56168040): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:07 scheduler task b3ec1597 (flow 56168040): retrieving result (try 0): started
2021/07/08 16:50:07 scheduler task 50030731 (flow 596285ad): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:fbd765a6adc3108e95fe22d2e78a7096aeb3e856d9a89de8d79d620703076293 -> s3://niema-test/n100/r03/n100.r03.s026.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:50:07  <-  n100.r03.s026.Main.cp_out_file 596285ad ok   extern 0s 35.8MiB
2021/07/08 16:50:07 scheduler task b3ec1597 (flow 56168040): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:07 scheduler task b3ec1597 (flow 56168040): transferring output (try 0): started
2021/07/08 16:50:07 scheduler task a4048ae2 (flow 062ec948): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:07 scheduler task a4048ae2 (flow 062ec948): promoting objects (try 0): started
2021/07/08 16:50:07 scheduler task a4048ae2 (flow 062ec948): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:07 scheduler task a4048ae2 (flow 062ec948): retrieving diagnostic output (try 0): started
2021/07/08 16:50:07 scheduler task 4ebcd882 (flow de0b4e8d): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:b42cd5e40ef9ad5673f2df743c627d798bcc97c18f97dce359f34f70cb18afe5 -> s3://niema-test/n100/r03/n100.r03.s047.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:50:07  <-  n100.r03.s047.Main.cp_out_file de0b4e8d ok   extern 0s 35.7MiB
2021/07/08 16:50:07 scheduler task a4048ae2 (flow 062ec948): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:07 scheduler task a4048ae2 (flow 062ec948): retrieving result (try 0): started
2021/07/08 16:50:07 scheduler task 6ac0ca32 (flow 4a48fd86): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:60861d97b99f08a9b2aab2e221dc7a64445fc9d7aea0433ba25121a11d9b342d -> s3://niema-test/n100/r03/n100.r03.s076.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:50:07  <-  n100.r03.s076.Main.cp_out_file 4a48fd86 ok   extern 0s 35.7MiB
2021/07/08 16:50:07 scheduler task 4ad48ec7 (flow 1d6055e2): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:b1fc012d5c2f0c95fb116afe1f11c4c7d5fb6750b7eeb3205afabd925be87005 -> s3://niema-test/n100/r03/n100.r03.s049.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:50:07  <-  n100.r03.s049.Main.cp_out_file 1d6055e2 ok   extern 0s 35.7MiB
2021/07/08 16:50:07 scheduler task a4048ae2 (flow 062ec948): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:07 scheduler task a4048ae2 (flow 062ec948): transferring output (try 0): started
2021/07/08 16:50:07 scheduler task 571a32ed (flow 398f523f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:12514dd6ecfedf06fcd7f14e9712e17d826b18b4a917c14a91656b3618573fff -> s3://niema-test/n100/r03/n100.r03.s088.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:50:07  <-  n100.r03.s088.Main.cp_out_file 398f523f ok   extern 0s 35.8MiB
2021/07/08 16:50:07 scheduler task 7d7ed1d5 (flow 12b846cf): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:07 scheduler task 7d7ed1d5 (flow 12b846cf): promoting objects (try 0): started
2021/07/08 16:50:07 scheduler task e7d8a16f (flow 1baf5846): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:18253a8f46c9c6611baf5179dad8ebdd7760caaa675a83be3d9e289663bbcfa2 -> s3://niema-test/n100/r03/n100.r03.s094.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:50:07  <-  n100.r03.s094.Main.cp_out_file 1baf5846 ok   extern 0s 35.7MiB
2021/07/08 16:50:08 scheduler task 7d7ed1d5 (flow 12b846cf): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:08 scheduler task b3ec1597 (flow 56168040): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:08 scheduler task 7d7ed1d5 (flow 12b846cf): retrieving diagnostic output (try 0): started
2021/07/08 16:50:08 scheduler task b3ec1597 (flow 56168040): unloading (try 0): started
2021/07/08 16:50:08 scheduler task b3ec1597 (flow 56168040): unloading list<val<.=288fde8b 35.7MiB> 35.7MiB>
2021/07/08 16:50:08 scheduler task b3ec1597 (flow 56168040): unloading val<.=d217db0d 35.4MiB>
2021/07/08 16:50:08 scheduler task b3ec1597 (flow 56168040): unloading val<.=4a6cbf3c 35.4MiB>
2021/07/08 16:50:08 scheduler task bb0952b9 (flow fc333760): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:891320b39da644a918e8aa51f80a2d4ec49f76955cdcdc7ca63dcd0934f7cdc0 -> s3://niema-test/n100/r03/n100.r03.s018.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:50:08  <-  n100.r03.s018.Main.cp_out_file fc333760 ok   extern 0s 35.7MiB
2021/07/08 16:50:08 scheduler task 7d7ed1d5 (flow 12b846cf): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:08 scheduler task b3ec1597 (flow 56168040): unloaded val<.=4a6cbf3c 35.4MiB>
2021/07/08 16:50:08 scheduler task b3ec1597 (flow 56168040): unloaded list<val<.=288fde8b 35.7MiB> 35.7MiB>
2021/07/08 16:50:08 scheduler task b3ec1597 (flow 56168040): unloaded val<.=d217db0d 35.4MiB>
2021/07/08 16:50:08 scheduler task b3ec1597 (flow 56168040): unloading (try 0): successful, next state: complete
2021/07/08 16:50:08 scheduler task 7d7ed1d5 (flow 12b846cf): retrieving result (try 0): started
2021/07/08 16:50:08  <-  n100.r03.s032.Main.out_file 56168040 ok     exec 5m3s 35.7MiB
2021/07/08 16:50:08 n100.r03.s032.Main.out_file 56168040 n100/r03/n100.r03.s032.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:51ad86752f19d841592f661547c7123761e993a543d1616015651766ec3da501
	sha256:56168040d4eb6addba017882f02ff85483837159502c622affc978bc4ec65a4d
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/b3ec1597421aee011ef6f981499a2ea1d54944bdba62732b2a82ec38a2f1b511
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s032_output"
	    wget -O "n100.r03.s032_output/n100.r03.s032.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s032_output/n100.r03.s032.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s032_output/n100.r03.s032.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s032_output/n100.r03.s032.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s032_output/n100.r03.s032.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s032_output/n100.r03.s032.reference.fas" "n100.r03.s032_output/n100.r03.s032.fq1.fastq" "n100.r03.s032_output/n100.r03.s032.fq2.fastq" | samtools view -bS - > "n100.r03.s032_output/n100.r03.s032.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s032_output/n100.r03.s032.untrimmed.sorted.bam" "n100.r03.s032_output/n100.r03.s032.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s032_output/n100.r03.s032.untrimmed.sorted.bam" -b "n100.r03.s032_output/n100.r03.s032.primers.bed" -p "n100.r03.s032_output/n100.r03.s032.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s032_output/n100.r03.s032.trimmed.sorted.bam" "n100.r03.s032_output/n100.r03.s032.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s032_output/n100.r03.s032.reference.fas" "n100.r03.s032_output/n100.r03.s032.trimmed.sorted.bam" > "n100.r03.s032_output/n100.r03.s032.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s032_output/n100.r03.s032.reference.fas" --call-indels "n100.r03.s032_output/n100.r03.s032.trimmed.sorted.bam" > "n100.r03.s032_output/n100.r03.s032.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s032_output/n100.r03.s032.trimmed.sorted.bam" > "n100.r03.s032_output/n100.r03.s032.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s032_output/n100.r03.s032.depth.txt" "n100.r03.s032_output/n100.r03.s032.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s032_output/n100.r03.s032.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s032_output/n100.r03.s032.reference.fas" | bcftools consensus -m "n100.r03.s032_output/n100.r03.s032.low_depth.tsv" tmp.vcf.gz > "n100.r03.s032_output/n100.r03.s032.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s032_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:288fde8b8950aac3e304b0217f153b0317fa956e0486972b244853670bb46c93 35.7MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.8MiB max=129.1MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=693B max=3.0KiB
2021/07/08 16:50:08 scheduler task ae88e40f (flow a87c1d25): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s032.tar.gz resources {}
2021/07/08 16:50:08  ->  n100.r03.s032.Main.cp_out_file a87c1d25 exec extern s3://niema-test/n100/r03/n100.r03.s032.tar.gz 35.7MiB
2021/07/08 16:50:08 scheduler task 7d7ed1d5 (flow 12b846cf): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:08 scheduler task 7d7ed1d5 (flow 12b846cf): transferring output (try 0): started
2021/07/08 16:50:08 scheduler task 454f0299 (flow afd570c1): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:8d743a3559c1626ba7a2025eb52832b46fe024dd1730f9651a0ff87b0d93940b -> s3://niema-test/n100/r03/n100.r03.s041.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:50:08  <-  n100.r03.s041.Main.cp_out_file afd570c1 ok   extern 0s 35.8MiB
2021/07/08 16:50:08 scheduler task a4048ae2 (flow 062ec948): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:08 scheduler task a4048ae2 (flow 062ec948): unloading (try 0): started
2021/07/08 16:50:08 scheduler task a4048ae2 (flow 062ec948): unloading list<val<.=225a0de1 35.8MiB> 35.8MiB>
2021/07/08 16:50:08 scheduler task a4048ae2 (flow 062ec948): unloading val<.=fc44b171 35.4MiB>
2021/07/08 16:50:08 scheduler task a4048ae2 (flow 062ec948): unloading val<.=a8703526 35.4MiB>
2021/07/08 16:50:08 scheduler task a4048ae2 (flow 062ec948): unloaded val<.=a8703526 35.4MiB>
2021/07/08 16:50:08 scheduler task a4048ae2 (flow 062ec948): unloaded list<val<.=225a0de1 35.8MiB> 35.8MiB>
2021/07/08 16:50:08 scheduler task a4048ae2 (flow 062ec948): unloaded val<.=fc44b171 35.4MiB>
2021/07/08 16:50:08 scheduler task a4048ae2 (flow 062ec948): unloading (try 0): successful, next state: complete
2021/07/08 16:50:08  <-  n100.r03.s083.Main.out_file 062ec948 ok     exec 4m53s 35.8MiB
2021/07/08 16:50:08 n100.r03.s083.Main.out_file 062ec948 n100/r03/n100.r03.s083.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:32b2b93bb827bc926ba4f282da72333eaa74ceb6950eb9849dda78317cbfec28
	sha256:062ec94870d12a734e7b827e66ed0bda3ea5125092a578f105e8834c8f895557
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/a4048ae2794b28ac58d3e3effe297c02a12ad7c88beda903f063f9e2f71b9090
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s083_output"
	    wget -O "n100.r03.s083_output/n100.r03.s083.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s083_output/n100.r03.s083.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s083_output/n100.r03.s083.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s083_output/n100.r03.s083.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s083_output/n100.r03.s083.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s083_output/n100.r03.s083.reference.fas" "n100.r03.s083_output/n100.r03.s083.fq1.fastq" "n100.r03.s083_output/n100.r03.s083.fq2.fastq" | samtools view -bS - > "n100.r03.s083_output/n100.r03.s083.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s083_output/n100.r03.s083.untrimmed.sorted.bam" "n100.r03.s083_output/n100.r03.s083.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s083_output/n100.r03.s083.untrimmed.sorted.bam" -b "n100.r03.s083_output/n100.r03.s083.primers.bed" -p "n100.r03.s083_output/n100.r03.s083.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s083_output/n100.r03.s083.trimmed.sorted.bam" "n100.r03.s083_output/n100.r03.s083.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s083_output/n100.r03.s083.reference.fas" "n100.r03.s083_output/n100.r03.s083.trimmed.sorted.bam" > "n100.r03.s083_output/n100.r03.s083.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s083_output/n100.r03.s083.reference.fas" --call-indels "n100.r03.s083_output/n100.r03.s083.trimmed.sorted.bam" > "n100.r03.s083_output/n100.r03.s083.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s083_output/n100.r03.s083.trimmed.sorted.bam" > "n100.r03.s083_output/n100.r03.s083.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s083_output/n100.r03.s083.depth.txt" "n100.r03.s083_output/n100.r03.s083.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s083_output/n100.r03.s083.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s083_output/n100.r03.s083.reference.fas" | bcftools consensus -m "n100.r03.s083_output/n100.r03.s083.low_depth.tsv" tmp.vcf.gz > "n100.r03.s083_output/n100.r03.s083.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s083_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:225a0de1e76f008dd275c51ad78187ea302089e1a490f81892adaebd776daace 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.6MiB max=126.8MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=210B max=1.0KiB
2021/07/08 16:50:08 scheduler task 44b2c002 (flow 3a3816e3): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s083.tar.gz resources {}
2021/07/08 16:50:08  ->  n100.r03.s083.Main.cp_out_file 3a3816e3 exec extern s3://niema-test/n100/r03/n100.r03.s083.tar.gz 35.8MiB
2021/07/08 16:50:08 scheduler task ab470caf (flow 74da68ff): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:08 scheduler task ab470caf (flow 74da68ff): promoting objects (try 0): started
2021/07/08 16:50:08 scheduler task 642b8dce (flow da07df2f): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:08 scheduler task 642b8dce (flow da07df2f): promoting objects (try 0): started
2021/07/08 16:50:08 scheduler task ab470caf (flow 74da68ff): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:08 scheduler task ab470caf (flow 74da68ff): retrieving diagnostic output (try 0): started
2021/07/08 16:50:08 scheduler task 642b8dce (flow da07df2f): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:08 scheduler task 642b8dce (flow da07df2f): retrieving diagnostic output (try 0): started
2021/07/08 16:50:08 scheduler task 7d7ed1d5 (flow 12b846cf): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:08 scheduler task ab470caf (flow 74da68ff): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:08 scheduler task 7d7ed1d5 (flow 12b846cf): unloading (try 0): started
2021/07/08 16:50:08 scheduler task 7d7ed1d5 (flow 12b846cf): unloading list<val<.=907f9b1a 35.8MiB> 35.8MiB>
2021/07/08 16:50:08 scheduler task 7d7ed1d5 (flow 12b846cf): unloading val<.=a7a41f6b 35.4MiB>
2021/07/08 16:50:08 scheduler task 7d7ed1d5 (flow 12b846cf): unloading val<.=b0051e66 35.4MiB>
2021/07/08 16:50:08 scheduler task ab470caf (flow 74da68ff): retrieving result (try 0): started
2021/07/08 16:50:08 scheduler task 642b8dce (flow da07df2f): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:08 scheduler task 642b8dce (flow da07df2f): retrieving result (try 0): started
2021/07/08 16:50:08 scheduler task 7d7ed1d5 (flow 12b846cf): unloaded list<val<.=907f9b1a 35.8MiB> 35.8MiB>
2021/07/08 16:50:08 scheduler task 7d7ed1d5 (flow 12b846cf): unloaded val<.=b0051e66 35.4MiB>
2021/07/08 16:50:08 scheduler task 7d7ed1d5 (flow 12b846cf): unloaded val<.=a7a41f6b 35.4MiB>
2021/07/08 16:50:08 scheduler task 7d7ed1d5 (flow 12b846cf): unloading (try 0): successful, next state: complete
2021/07/08 16:50:08  <-  n100.r03.s031.Main.out_file 12b846cf ok     exec 5m3s 35.8MiB
2021/07/08 16:50:08 n100.r03.s031.Main.out_file 12b846cf n100/r03/n100.r03.s031.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:7e126b7789d19d876a156055adc58b3edd583694debf2877f431925f237de963
	sha256:12b846cf9ac8b931abbebf6710a8f8629af4bc9bddcee8682703bd29dcecf417
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/7d7ed1d50dd1e7e2d861da1f345da841e35e3193939d8586a4cdde6c3b6d8946
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s031_output"
	    wget -O "n100.r03.s031_output/n100.r03.s031.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s031_output/n100.r03.s031.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s031_output/n100.r03.s031.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s031_output/n100.r03.s031.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s031_output/n100.r03.s031.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s031_output/n100.r03.s031.reference.fas" "n100.r03.s031_output/n100.r03.s031.fq1.fastq" "n100.r03.s031_output/n100.r03.s031.fq2.fastq" | samtools view -bS - > "n100.r03.s031_output/n100.r03.s031.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s031_output/n100.r03.s031.untrimmed.sorted.bam" "n100.r03.s031_output/n100.r03.s031.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s031_output/n100.r03.s031.untrimmed.sorted.bam" -b "n100.r03.s031_output/n100.r03.s031.primers.bed" -p "n100.r03.s031_output/n100.r03.s031.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s031_output/n100.r03.s031.trimmed.sorted.bam" "n100.r03.s031_output/n100.r03.s031.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s031_output/n100.r03.s031.reference.fas" "n100.r03.s031_output/n100.r03.s031.trimmed.sorted.bam" > "n100.r03.s031_output/n100.r03.s031.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s031_output/n100.r03.s031.reference.fas" --call-indels "n100.r03.s031_output/n100.r03.s031.trimmed.sorted.bam" > "n100.r03.s031_output/n100.r03.s031.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s031_output/n100.r03.s031.trimmed.sorted.bam" > "n100.r03.s031_output/n100.r03.s031.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s031_output/n100.r03.s031.depth.txt" "n100.r03.s031_output/n100.r03.s031.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s031_output/n100.r03.s031.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s031_output/n100.r03.s031.reference.fas" | bcftools consensus -m "n100.r03.s031_output/n100.r03.s031.low_depth.tsv" tmp.vcf.gz > "n100.r03.s031_output/n100.r03.s031.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s031_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:907f9b1a723785df9527c0b0db5a42b7dc70093c3947e804dabbc5bcff2fed23 35.8MiB
	profile:
	    cpu mean=1.0 max=1.1
	    mem mean=21.6MiB max=127.2MiB
	    disk mean=6.0MiB max=35.8MiB
	    tmp mean=700B max=3.1KiB
2021/07/08 16:50:08 scheduler task 4de60cc7 (flow 7923712c): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s031.tar.gz resources {}
2021/07/08 16:50:08  ->  n100.r03.s031.Main.cp_out_file 7923712c exec extern s3://niema-test/n100/r03/n100.r03.s031.tar.gz 35.8MiB
2021/07/08 16:50:08 scheduler task ab470caf (flow 74da68ff): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:08 scheduler task 642b8dce (flow da07df2f): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:08 scheduler task ab470caf (flow 74da68ff): transferring output (try 0): started
2021/07/08 16:50:08 scheduler task 642b8dce (flow da07df2f): transferring output (try 0): started
2021/07/08 16:50:08 scheduler task ae88e40f (flow a87c1d25): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:288fde8b8950aac3e304b0217f153b0317fa956e0486972b244853670bb46c93 -> s3://niema-test/n100/r03/n100.r03.s032.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:50:08  <-  n100.r03.s032.Main.cp_out_file a87c1d25 ok   extern 0s 35.7MiB
2021/07/08 16:50:09 scheduler task 44b2c002 (flow 3a3816e3): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:225a0de1e76f008dd275c51ad78187ea302089e1a490f81892adaebd776daace -> s3://niema-test/n100/r03/n100.r03.s083.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:50:09  <-  n100.r03.s083.Main.cp_out_file 3a3816e3 ok   extern 0s 35.8MiB
2021/07/08 16:50:09 scheduler task ab470caf (flow 74da68ff): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:09 scheduler task 94f5f6bc (flow 213b5afb): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:09 scheduler task ab470caf (flow 74da68ff): unloading (try 0): started
2021/07/08 16:50:09 scheduler task ab470caf (flow 74da68ff): unloading list<val<.=479ecb46 35.8MiB> 35.8MiB>
2021/07/08 16:50:09 scheduler task ab470caf (flow 74da68ff): unloading val<.=99e6b2af 35.4MiB>
2021/07/08 16:50:09 scheduler task ab470caf (flow 74da68ff): unloading val<.=d5396137 35.4MiB>
2021/07/08 16:50:09 scheduler task 94f5f6bc (flow 213b5afb): promoting objects (try 0): started
2021/07/08 16:50:09 scheduler task 642b8dce (flow da07df2f): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:09 scheduler task 642b8dce (flow da07df2f): unloading (try 0): started
2021/07/08 16:50:09 scheduler task 642b8dce (flow da07df2f): unloading list<val<.=3216fe41 35.7MiB> 35.7MiB>
2021/07/08 16:50:09 scheduler task 642b8dce (flow da07df2f): unloading val<.=1b86c196 35.4MiB>
2021/07/08 16:50:09 scheduler task 642b8dce (flow da07df2f): unloading val<.=1a3af3e3 35.4MiB>
2021/07/08 16:50:09 scheduler task ab470caf (flow 74da68ff): unloaded list<val<.=479ecb46 35.8MiB> 35.8MiB>
2021/07/08 16:50:09 scheduler task ab470caf (flow 74da68ff): unloaded val<.=99e6b2af 35.4MiB>
2021/07/08 16:50:09 scheduler task ab470caf (flow 74da68ff): unloaded val<.=d5396137 35.4MiB>
2021/07/08 16:50:09 scheduler task ab470caf (flow 74da68ff): unloading (try 0): successful, next state: complete
2021/07/08 16:50:09 scheduler task 94f5f6bc (flow 213b5afb): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:09 scheduler task 642b8dce (flow da07df2f): unloaded val<.=1b86c196 35.4MiB>
2021/07/08 16:50:09 scheduler task 642b8dce (flow da07df2f): unloaded val<.=1a3af3e3 35.4MiB>
2021/07/08 16:50:09 scheduler task 642b8dce (flow da07df2f): unloaded list<val<.=3216fe41 35.7MiB> 35.7MiB>
2021/07/08 16:50:09 scheduler task 642b8dce (flow da07df2f): unloading (try 0): successful, next state: complete
2021/07/08 16:50:09  <-  n100.r03.s027.Main.out_file 74da68ff ok     exec 4m54s 35.8MiB
2021/07/08 16:50:09 n100.r03.s027.Main.out_file 74da68ff n100/r03/n100.r03.s027.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:693f8d3f9434ed46e3e296c7a68f2b0e58297d8423fdfcb42a77bab1c9cc114d
	sha256:74da68ffdc5a37395a466cc49fb8a14391cb767ead749e4982b185088e000b97
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ab470cafee5a64b3052612a203b2cea0b7cc02f37344cd05ee8aa77f70342366
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s027_output"
	    wget -O "n100.r03.s027_output/n100.r03.s027.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s027_output/n100.r03.s027.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s027_output/n100.r03.s027.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s027_output/n100.r03.s027.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s027_output/n100.r03.s027.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s027_output/n100.r03.s027.reference.fas" "n100.r03.s027_output/n100.r03.s027.fq1.fastq" "n100.r03.s027_output/n100.r03.s027.fq2.fastq" | samtools view -bS - > "n100.r03.s027_output/n100.r03.s027.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s027_output/n100.r03.s027.untrimmed.sorted.bam" "n100.r03.s027_output/n100.r03.s027.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s027_output/n100.r03.s027.untrimmed.sorted.bam" -b "n100.r03.s027_output/n100.r03.s027.primers.bed" -p "n100.r03.s027_output/n100.r03.s027.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s027_output/n100.r03.s027.trimmed.sorted.bam" "n100.r03.s027_output/n100.r03.s027.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s027_output/n100.r03.s027.reference.fas" "n100.r03.s027_output/n100.r03.s027.trimmed.sorted.bam" > "n100.r03.s027_output/n100.r03.s027.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s027_output/n100.r03.s027.reference.fas" --call-indels "n100.r03.s027_output/n100.r03.s027.trimmed.sorted.bam" > "n100.r03.s027_output/n100.r03.s027.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s027_output/n100.r03.s027.trimmed.sorted.bam" > "n100.r03.s027_output/n100.r03.s027.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s027_output/n100.r03.s027.depth.txt" "n100.r03.s027_output/n100.r03.s027.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s027_output/n100.r03.s027.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s027_output/n100.r03.s027.reference.fas" | bcftools consensus -m "n100.r03.s027_output/n100.r03.s027.low_depth.tsv" tmp.vcf.gz > "n100.r03.s027_output/n100.r03.s027.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s027_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:479ecb4677fd8b3e0ae350e93708249f7de058f9d80d08cf9b94abad9ba3405f 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.4MiB max=127.9MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 16:50:09 scheduler task e8d688a8 (flow 5113b8cf): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s027.tar.gz resources {}
2021/07/08 16:50:09  ->  n100.r03.s027.Main.cp_out_file 5113b8cf exec extern s3://niema-test/n100/r03/n100.r03.s027.tar.gz 35.8MiB
2021/07/08 16:50:09 scheduler task 94f5f6bc (flow 213b5afb): retrieving diagnostic output (try 0): started
2021/07/08 16:50:09  <-  n100.r03.s096.Main.out_file da07df2f ok     exec 5m4s 35.7MiB
2021/07/08 16:50:09 n100.r03.s096.Main.out_file da07df2f n100/r03/n100.r03.s096.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1fb68521e8dd6b136667999097a02fc5a4c8ff757ec7bd403004d4ddead7bfd3
	sha256:da07df2fad3b7cbd0f7040fe8c60f256a3803f32ef2b0a91311f43786ebc70a1
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/642b8dce51ff3fe93345ac74d439af00cc418ee4202a1951757a92c2a0bfbc72
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s096_output"
	    wget -O "n100.r03.s096_output/n100.r03.s096.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s096_output/n100.r03.s096.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s096_output/n100.r03.s096.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s096_output/n100.r03.s096.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s096_output/n100.r03.s096.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s096_output/n100.r03.s096.reference.fas" "n100.r03.s096_output/n100.r03.s096.fq1.fastq" "n100.r03.s096_output/n100.r03.s096.fq2.fastq" | samtools view -bS - > "n100.r03.s096_output/n100.r03.s096.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s096_output/n100.r03.s096.untrimmed.sorted.bam" "n100.r03.s096_output/n100.r03.s096.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s096_output/n100.r03.s096.untrimmed.sorted.bam" -b "n100.r03.s096_output/n100.r03.s096.primers.bed" -p "n100.r03.s096_output/n100.r03.s096.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s096_output/n100.r03.s096.trimmed.sorted.bam" "n100.r03.s096_output/n100.r03.s096.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s096_output/n100.r03.s096.reference.fas" "n100.r03.s096_output/n100.r03.s096.trimmed.sorted.bam" > "n100.r03.s096_output/n100.r03.s096.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s096_output/n100.r03.s096.reference.fas" --call-indels "n100.r03.s096_output/n100.r03.s096.trimmed.sorted.bam" > "n100.r03.s096_output/n100.r03.s096.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s096_output/n100.r03.s096.trimmed.sorted.bam" > "n100.r03.s096_output/n100.r03.s096.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s096_output/n100.r03.s096.depth.txt" "n100.r03.s096_output/n100.r03.s096.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s096_output/n100.r03.s096.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s096_output/n100.r03.s096.reference.fas" | bcftools consensus -m "n100.r03.s096_output/n100.r03.s096.low_depth.tsv" tmp.vcf.gz > "n100.r03.s096_output/n100.r03.s096.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s096_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:3216fe4105899a0f6d0ef734e4b2d32e7c26144a968a13b96e74cbed01d5ae2d 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.7MiB max=128.6MiB
	    disk mean=6.0MiB max=35.7MiB
	    tmp mean=692B max=3.0KiB
2021/07/08 16:50:09 scheduler task 3ec2d2e5 (flow cb47e595): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s096.tar.gz resources {}
2021/07/08 16:50:09  ->  n100.r03.s096.Main.cp_out_file cb47e595 exec extern s3://niema-test/n100/r03/n100.r03.s096.tar.gz 35.7MiB
2021/07/08 16:50:09 scheduler task bc6b82f2 (flow 159f3125): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:09 scheduler task bc6b82f2 (flow 159f3125): promoting objects (try 0): started
2021/07/08 16:50:09 scheduler task 94f5f6bc (flow 213b5afb): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:09 scheduler task 4de60cc7 (flow 7923712c): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:907f9b1a723785df9527c0b0db5a42b7dc70093c3947e804dabbc5bcff2fed23 -> s3://niema-test/n100/r03/n100.r03.s031.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:50:09  <-  n100.r03.s031.Main.cp_out_file 7923712c ok   extern 0s 35.8MiB
2021/07/08 16:50:09 scheduler task 94f5f6bc (flow 213b5afb): retrieving result (try 0): started
2021/07/08 16:50:09 scheduler task bc6b82f2 (flow 159f3125): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:09 scheduler task bc6b82f2 (flow 159f3125): retrieving diagnostic output (try 0): started
2021/07/08 16:50:09 scheduler task 94f5f6bc (flow 213b5afb): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:09 scheduler task 94f5f6bc (flow 213b5afb): transferring output (try 0): started
2021/07/08 16:50:09 scheduler task bc6b82f2 (flow 159f3125): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:09 scheduler task bc6b82f2 (flow 159f3125): retrieving result (try 0): started
2021/07/08 16:50:09 scheduler task bc6b82f2 (flow 159f3125): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:09 scheduler task bc6b82f2 (flow 159f3125): transferring output (try 0): started
2021/07/08 16:50:10 scheduler task e8d688a8 (flow 5113b8cf): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:479ecb4677fd8b3e0ae350e93708249f7de058f9d80d08cf9b94abad9ba3405f -> s3://niema-test/n100/r03/n100.r03.s027.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:50:10  <-  n100.r03.s027.Main.cp_out_file 5113b8cf ok   extern 0s 35.8MiB
2021/07/08 16:50:10 scheduler task 94f5f6bc (flow 213b5afb): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:10 scheduler task 94f5f6bc (flow 213b5afb): unloading (try 0): started
2021/07/08 16:50:10 scheduler task 94f5f6bc (flow 213b5afb): unloading list<val<.=262b78d0 35.8MiB> 35.8MiB>
2021/07/08 16:50:10 scheduler task 94f5f6bc (flow 213b5afb): unloading val<.=f858cbb2 35.4MiB>
2021/07/08 16:50:10 scheduler task 94f5f6bc (flow 213b5afb): unloading val<.=8f06dc03 35.4MiB>
2021/07/08 16:50:10 scheduler task 3ec2d2e5 (flow cb47e595): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:3216fe4105899a0f6d0ef734e4b2d32e7c26144a968a13b96e74cbed01d5ae2d -> s3://niema-test/n100/r03/n100.r03.s096.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:50:10  <-  n100.r03.s096.Main.cp_out_file cb47e595 ok   extern 0s 35.7MiB
2021/07/08 16:50:10 scheduler task 94f5f6bc (flow 213b5afb): unloaded val<.=8f06dc03 35.4MiB>
2021/07/08 16:50:10 scheduler task 94f5f6bc (flow 213b5afb): unloaded list<val<.=262b78d0 35.8MiB> 35.8MiB>
2021/07/08 16:50:10 scheduler task 94f5f6bc (flow 213b5afb): unloaded val<.=f858cbb2 35.4MiB>
2021/07/08 16:50:10 scheduler task 94f5f6bc (flow 213b5afb): unloading (try 0): successful, next state: complete
2021/07/08 16:50:10  <-  n100.r03.s050.Main.out_file 213b5afb ok     exec 4m55s 35.8MiB
2021/07/08 16:50:10 n100.r03.s050.Main.out_file 213b5afb n100/r03/n100.r03.s050.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a5af6fdb6f235c5fa563f2e5fc1ed62dabbfefa9290ebf9a3e5f156af38adefb
	sha256:213b5afb5be458caf95e4a99b9d27f193c7eeaa42a8c4673dfd5b3935cc78cc9
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/94f5f6bc1b70ba5dec37596f74b10b7af52b79c5e0dddc0a2be7b4572566fa13
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s050_output"
	    wget -O "n100.r03.s050_output/n100.r03.s050.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s050_output/n100.r03.s050.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s050_output/n100.r03.s050.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s050_output/n100.r03.s050.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s050_output/n100.r03.s050.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s050_output/n100.r03.s050.reference.fas" "n100.r03.s050_output/n100.r03.s050.fq1.fastq" "n100.r03.s050_output/n100.r03.s050.fq2.fastq" | samtools view -bS - > "n100.r03.s050_output/n100.r03.s050.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s050_output/n100.r03.s050.untrimmed.sorted.bam" "n100.r03.s050_output/n100.r03.s050.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s050_output/n100.r03.s050.untrimmed.sorted.bam" -b "n100.r03.s050_output/n100.r03.s050.primers.bed" -p "n100.r03.s050_output/n100.r03.s050.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s050_output/n100.r03.s050.trimmed.sorted.bam" "n100.r03.s050_output/n100.r03.s050.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s050_output/n100.r03.s050.reference.fas" "n100.r03.s050_output/n100.r03.s050.trimmed.sorted.bam" > "n100.r03.s050_output/n100.r03.s050.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s050_output/n100.r03.s050.reference.fas" --call-indels "n100.r03.s050_output/n100.r03.s050.trimmed.sorted.bam" > "n100.r03.s050_output/n100.r03.s050.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s050_output/n100.r03.s050.trimmed.sorted.bam" > "n100.r03.s050_output/n100.r03.s050.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s050_output/n100.r03.s050.depth.txt" "n100.r03.s050_output/n100.r03.s050.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s050_output/n100.r03.s050.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s050_output/n100.r03.s050.reference.fas" | bcftools consensus -m "n100.r03.s050_output/n100.r03.s050.low_depth.tsv" tmp.vcf.gz > "n100.r03.s050_output/n100.r03.s050.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s050_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:262b78d049e849183af3201956f387e19fb840350904b9aecf7401b172dd0e98 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.9MiB max=128.4MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 16:50:10 scheduler task f739a254 (flow 4506631c): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s050.tar.gz resources {}
2021/07/08 16:50:10  ->  n100.r03.s050.Main.cp_out_file 4506631c exec extern s3://niema-test/n100/r03/n100.r03.s050.tar.gz 35.8MiB
2021/07/08 16:50:10 scheduler task bc6b82f2 (flow 159f3125): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:10 scheduler task bc6b82f2 (flow 159f3125): unloading (try 0): started
2021/07/08 16:50:10 scheduler task bc6b82f2 (flow 159f3125): unloading list<val<.=e37c1a8a 35.8MiB> 35.8MiB>
2021/07/08 16:50:10 scheduler task bc6b82f2 (flow 159f3125): unloading val<.=e9ce399b 35.4MiB>
2021/07/08 16:50:10 scheduler task bc6b82f2 (flow 159f3125): unloading val<.=83f087b8 35.4MiB>
2021/07/08 16:50:10 scheduler task bc6b82f2 (flow 159f3125): unloaded list<val<.=e37c1a8a 35.8MiB> 35.8MiB>
2021/07/08 16:50:10 scheduler task bc6b82f2 (flow 159f3125): unloaded val<.=e9ce399b 35.4MiB>
2021/07/08 16:50:10 scheduler task bc6b82f2 (flow 159f3125): unloaded val<.=83f087b8 35.4MiB>
2021/07/08 16:50:10 scheduler task bc6b82f2 (flow 159f3125): unloading (try 0): successful, next state: complete
2021/07/08 16:50:10  <-  n100.r03.s028.Main.out_file 159f3125 ok     exec 4m55s 35.8MiB
2021/07/08 16:50:10 n100.r03.s028.Main.out_file 159f3125 n100/r03/n100.r03.s028.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:d46955519bf0872277522bb0e5bc7c2202d8344341ce33f160c2839232e4db12
	sha256:159f31250140bf24a64b8ac408f369de201ff3e37d3e15d21158c28571910e63
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/bc6b82f2d2b8dec674cda3cc0b31dc9720d5f9b1dc6740c7eb7c3d5050b9103a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s028_output"
	    wget -O "n100.r03.s028_output/n100.r03.s028.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s028_output/n100.r03.s028.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s028_output/n100.r03.s028.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s028_output/n100.r03.s028.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s028_output/n100.r03.s028.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s028_output/n100.r03.s028.reference.fas" "n100.r03.s028_output/n100.r03.s028.fq1.fastq" "n100.r03.s028_output/n100.r03.s028.fq2.fastq" | samtools view -bS - > "n100.r03.s028_output/n100.r03.s028.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s028_output/n100.r03.s028.untrimmed.sorted.bam" "n100.r03.s028_output/n100.r03.s028.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s028_output/n100.r03.s028.untrimmed.sorted.bam" -b "n100.r03.s028_output/n100.r03.s028.primers.bed" -p "n100.r03.s028_output/n100.r03.s028.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s028_output/n100.r03.s028.trimmed.sorted.bam" "n100.r03.s028_output/n100.r03.s028.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s028_output/n100.r03.s028.reference.fas" "n100.r03.s028_output/n100.r03.s028.trimmed.sorted.bam" > "n100.r03.s028_output/n100.r03.s028.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s028_output/n100.r03.s028.reference.fas" --call-indels "n100.r03.s028_output/n100.r03.s028.trimmed.sorted.bam" > "n100.r03.s028_output/n100.r03.s028.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s028_output/n100.r03.s028.trimmed.sorted.bam" > "n100.r03.s028_output/n100.r03.s028.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s028_output/n100.r03.s028.depth.txt" "n100.r03.s028_output/n100.r03.s028.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s028_output/n100.r03.s028.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s028_output/n100.r03.s028.reference.fas" | bcftools consensus -m "n100.r03.s028_output/n100.r03.s028.low_depth.tsv" tmp.vcf.gz > "n100.r03.s028_output/n100.r03.s028.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s028_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:e37c1a8a8608d1b2efcdaa8ac7b12228907dae177ddb88ccb18c31f6c7fbd0b8 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.1MiB max=127.3MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 16:50:10 scheduler task b62c0887 (flow 0999fd94): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s028.tar.gz resources {}
2021/07/08 16:50:10  ->  n100.r03.s028.Main.cp_out_file 0999fd94 exec extern s3://niema-test/n100/r03/n100.r03.s028.tar.gz 35.8MiB
2021/07/08 16:50:10 scheduler task 3d6f2242 (flow 88b2cc74): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:10 scheduler task 3d6f2242 (flow 88b2cc74): promoting objects (try 0): started
2021/07/08 16:50:10 scheduler task 13667c21 (flow da42f528): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:10 scheduler task 13667c21 (flow da42f528): promoting objects (try 0): started
2021/07/08 16:50:10 scheduler task 3d6f2242 (flow 88b2cc74): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:10 scheduler task 484b3ade (flow 1ea7c425): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:10 scheduler task 3d6f2242 (flow 88b2cc74): retrieving diagnostic output (try 0): started
2021/07/08 16:50:10 scheduler task 484b3ade (flow 1ea7c425): promoting objects (try 0): started
2021/07/08 16:50:10 scheduler task 13667c21 (flow da42f528): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:10 scheduler task 13667c21 (flow da42f528): retrieving diagnostic output (try 0): started
2021/07/08 16:50:10 scheduler task 3d6f2242 (flow 88b2cc74): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:10 scheduler task ad11b6f1 (flow b407f183): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:10 scheduler task 3d6f2242 (flow 88b2cc74): retrieving result (try 0): started
2021/07/08 16:50:10 scheduler task 484b3ade (flow 1ea7c425): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:10 scheduler task ad11b6f1 (flow b407f183): promoting objects (try 0): started
2021/07/08 16:50:10 scheduler task 484b3ade (flow 1ea7c425): retrieving diagnostic output (try 0): started
2021/07/08 16:50:10 scheduler task 13667c21 (flow da42f528): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:10 scheduler task 13667c21 (flow da42f528): retrieving result (try 0): started
2021/07/08 16:50:10 scheduler task ad11b6f1 (flow b407f183): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:10 scheduler task 3d6f2242 (flow 88b2cc74): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:10 scheduler task ad11b6f1 (flow b407f183): retrieving diagnostic output (try 0): started
2021/07/08 16:50:10 scheduler task 3d6f2242 (flow 88b2cc74): transferring output (try 0): started
2021/07/08 16:50:10 scheduler task 484b3ade (flow 1ea7c425): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:10 scheduler task 13667c21 (flow da42f528): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:10 scheduler task 484b3ade (flow 1ea7c425): retrieving result (try 0): started
2021/07/08 16:50:10 scheduler task 13667c21 (flow da42f528): transferring output (try 0): started
2021/07/08 16:50:10 scheduler task ad11b6f1 (flow b407f183): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:10 scheduler task ad11b6f1 (flow b407f183): retrieving result (try 0): started
2021/07/08 16:50:10 scheduler task 484b3ade (flow 1ea7c425): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:10 scheduler task 484b3ade (flow 1ea7c425): transferring output (try 0): started
2021/07/08 16:50:11 scheduler task f739a254 (flow 4506631c): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:262b78d049e849183af3201956f387e19fb840350904b9aecf7401b172dd0e98 -> s3://niema-test/n100/r03/n100.r03.s050.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:50:11  <-  n100.r03.s050.Main.cp_out_file 4506631c ok   extern 0s 35.8MiB
2021/07/08 16:50:11 scheduler task b62c0887 (flow 0999fd94): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:e37c1a8a8608d1b2efcdaa8ac7b12228907dae177ddb88ccb18c31f6c7fbd0b8 -> s3://niema-test/n100/r03/n100.r03.s028.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:50:11  <-  n100.r03.s028.Main.cp_out_file 0999fd94 ok   extern 0s 35.8MiB
2021/07/08 16:50:11 scheduler task ad11b6f1 (flow b407f183): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:11 scheduler task ad11b6f1 (flow b407f183): transferring output (try 0): started
2021/07/08 16:50:11 scheduler task 4396f600 (flow e90de21c): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:11 scheduler task 4396f600 (flow e90de21c): promoting objects (try 0): started
2021/07/08 16:50:11 scheduler task 3d6f2242 (flow 88b2cc74): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:11 scheduler task 3d6f2242 (flow 88b2cc74): unloading (try 0): started
2021/07/08 16:50:11 scheduler task 3d6f2242 (flow 88b2cc74): unloading list<val<.=f22fff61 35.8MiB> 35.8MiB>
2021/07/08 16:50:11 scheduler task 3d6f2242 (flow 88b2cc74): unloading val<.=509a2929 35.4MiB>
2021/07/08 16:50:11 scheduler task 3d6f2242 (flow 88b2cc74): unloading val<.=5626b62e 35.4MiB>
2021/07/08 16:50:11 scheduler task 13667c21 (flow da42f528): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:11 scheduler task 13667c21 (flow da42f528): unloading (try 0): started
2021/07/08 16:50:11 scheduler task 13667c21 (flow da42f528): unloading list<val<.=6a7711a6 35.7MiB> 35.7MiB>
2021/07/08 16:50:11 scheduler task 13667c21 (flow da42f528): unloading val<.=3efe206e 35.4MiB>
2021/07/08 16:50:11 scheduler task 13667c21 (flow da42f528): unloading val<.=148f3e3f 35.4MiB>
2021/07/08 16:50:11 scheduler task 484b3ade (flow 1ea7c425): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:11 scheduler task 484b3ade (flow 1ea7c425): unloading (try 0): started
2021/07/08 16:50:11 scheduler task 484b3ade (flow 1ea7c425): unloading list<val<.=d0349892 35.7MiB> 35.7MiB>
2021/07/08 16:50:11 scheduler task 484b3ade (flow 1ea7c425): unloading val<.=8e380a55 35.4MiB>
2021/07/08 16:50:11 scheduler task 484b3ade (flow 1ea7c425): unloading val<.=d6231270 35.4MiB>
2021/07/08 16:50:11 scheduler task 3d6f2242 (flow 88b2cc74): unloaded list<val<.=f22fff61 35.8MiB> 35.8MiB>
2021/07/08 16:50:11 scheduler task 3d6f2242 (flow 88b2cc74): unloaded val<.=509a2929 35.4MiB>
2021/07/08 16:50:11 scheduler task 3d6f2242 (flow 88b2cc74): unloaded val<.=5626b62e 35.4MiB>
2021/07/08 16:50:11 scheduler task 3d6f2242 (flow 88b2cc74): unloading (try 0): successful, next state: complete
2021/07/08 16:50:11 scheduler task 4396f600 (flow e90de21c): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:11  <-  n100.r03.s020.Main.out_file 88b2cc74 ok     exec 4m56s 35.8MiB
2021/07/08 16:50:11 n100.r03.s020.Main.out_file 88b2cc74 n100/r03/n100.r03.s020.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:61093992f56ef1f594348d1f7d3f95abb3434f4cf7b6584256f01764f3e867b6
	sha256:88b2cc740b30fc8b0ea700e74a5ecbd178b07112e69eb3e423893d6d013ae7b7
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3d6f2242c43cdf5e71afa07543507dc6cb8e1f8fc435eef72f450eb281658722
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s020_output"
	    wget -O "n100.r03.s020_output/n100.r03.s020.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s020_output/n100.r03.s020.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s020_output/n100.r03.s020.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s020_output/n100.r03.s020.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s020_output/n100.r03.s020.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s020_output/n100.r03.s020.reference.fas" "n100.r03.s020_output/n100.r03.s020.fq1.fastq" "n100.r03.s020_output/n100.r03.s020.fq2.fastq" | samtools view -bS - > "n100.r03.s020_output/n100.r03.s020.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s020_output/n100.r03.s020.untrimmed.sorted.bam" "n100.r03.s020_output/n100.r03.s020.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s020_output/n100.r03.s020.untrimmed.sorted.bam" -b "n100.r03.s020_output/n100.r03.s020.primers.bed" -p "n100.r03.s020_output/n100.r03.s020.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s020_output/n100.r03.s020.trimmed.sorted.bam" "n100.r03.s020_output/n100.r03.s020.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s020_output/n100.r03.s020.reference.fas" "n100.r03.s020_output/n100.r03.s020.trimmed.sorted.bam" > "n100.r03.s020_output/n100.r03.s020.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s020_output/n100.r03.s020.reference.fas" --call-indels "n100.r03.s020_output/n100.r03.s020.trimmed.sorted.bam" > "n100.r03.s020_output/n100.r03.s020.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s020_output/n100.r03.s020.trimmed.sorted.bam" > "n100.r03.s020_output/n100.r03.s020.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s020_output/n100.r03.s020.depth.txt" "n100.r03.s020_output/n100.r03.s020.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s020_output/n100.r03.s020.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s020_output/n100.r03.s020.reference.fas" | bcftools consensus -m "n100.r03.s020_output/n100.r03.s020.low_depth.tsv" tmp.vcf.gz > "n100.r03.s020_output/n100.r03.s020.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s020_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:f22fff617eeb36c52a558f0bf2a7e34aca9fe74890684bfc036d43d47b083399 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=23.2MiB max=131.8MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 16:50:11 scheduler task a92d208a (flow ede6e93f): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s020.tar.gz resources {}
2021/07/08 16:50:11  ->  n100.r03.s020.Main.cp_out_file ede6e93f exec extern s3://niema-test/n100/r03/n100.r03.s020.tar.gz 35.8MiB
2021/07/08 16:50:11 scheduler task 4396f600 (flow e90de21c): retrieving diagnostic output (try 0): started
2021/07/08 16:50:11 scheduler task 13667c21 (flow da42f528): unloaded val<.=148f3e3f 35.4MiB>
2021/07/08 16:50:11 scheduler task 13667c21 (flow da42f528): unloaded val<.=3efe206e 35.4MiB>
2021/07/08 16:50:11 scheduler task 13667c21 (flow da42f528): unloaded list<val<.=6a7711a6 35.7MiB> 35.7MiB>
2021/07/08 16:50:11 scheduler task 13667c21 (flow da42f528): unloading (try 0): successful, next state: complete
2021/07/08 16:50:11  <-  n100.r03.s072.Main.out_file da42f528 ok     exec 4m56s 35.7MiB
2021/07/08 16:50:11 n100.r03.s072.Main.out_file da42f528 n100/r03/n100.r03.s072.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:ac4c53ddc55d0881e3a1a3d407556377f88a99508d4a104a43864545ffc14f55
	sha256:da42f52820baef49609d84b9482429104b032aed89905176799c3ca09263268d
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/13667c210c651faa8c3d53651cc0fa3772d800a00f7643beb7a6ae8c5f0c259a
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s072_output"
	    wget -O "n100.r03.s072_output/n100.r03.s072.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s072_output/n100.r03.s072.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s072_output/n100.r03.s072.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s072_output/n100.r03.s072.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s072_output/n100.r03.s072.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s072_output/n100.r03.s072.reference.fas" "n100.r03.s072_output/n100.r03.s072.fq1.fastq" "n100.r03.s072_output/n100.r03.s072.fq2.fastq" | samtools view -bS - > "n100.r03.s072_output/n100.r03.s072.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s072_output/n100.r03.s072.untrimmed.sorted.bam" "n100.r03.s072_output/n100.r03.s072.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s072_output/n100.r03.s072.untrimmed.sorted.bam" -b "n100.r03.s072_output/n100.r03.s072.primers.bed" -p "n100.r03.s072_output/n100.r03.s072.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s072_output/n100.r03.s072.trimmed.sorted.bam" "n100.r03.s072_output/n100.r03.s072.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s072_output/n100.r03.s072.reference.fas" "n100.r03.s072_output/n100.r03.s072.trimmed.sorted.bam" > "n100.r03.s072_output/n100.r03.s072.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s072_output/n100.r03.s072.reference.fas" --call-indels "n100.r03.s072_output/n100.r03.s072.trimmed.sorted.bam" > "n100.r03.s072_output/n100.r03.s072.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s072_output/n100.r03.s072.trimmed.sorted.bam" > "n100.r03.s072_output/n100.r03.s072.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s072_output/n100.r03.s072.depth.txt" "n100.r03.s072_output/n100.r03.s072.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s072_output/n100.r03.s072.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s072_output/n100.r03.s072.reference.fas" | bcftools consensus -m "n100.r03.s072_output/n100.r03.s072.low_depth.tsv" tmp.vcf.gz > "n100.r03.s072_output/n100.r03.s072.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s072_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:6a7711a621f022135cf7163d48a3c3d2c765c4afc7251ab137a4a58812d45dfa 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=23.2MiB max=129.5MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 16:50:11 scheduler task a141e5b2 (flow e001fa5e): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s072.tar.gz resources {}
2021/07/08 16:50:11  ->  n100.r03.s072.Main.cp_out_file e001fa5e exec extern s3://niema-test/n100/r03/n100.r03.s072.tar.gz 35.7MiB
2021/07/08 16:50:11 scheduler task 484b3ade (flow 1ea7c425): unloaded val<.=8e380a55 35.4MiB>
2021/07/08 16:50:11 scheduler task 484b3ade (flow 1ea7c425): unloaded val<.=d6231270 35.4MiB>
2021/07/08 16:50:11 scheduler task 484b3ade (flow 1ea7c425): unloaded list<val<.=d0349892 35.7MiB> 35.7MiB>
2021/07/08 16:50:11 scheduler task 484b3ade (flow 1ea7c425): unloading (try 0): successful, next state: complete
2021/07/08 16:50:11  <-  n100.r03.s063.Main.out_file 1ea7c425 ok     exec 4m56s 35.7MiB
2021/07/08 16:50:11 n100.r03.s063.Main.out_file 1ea7c425 n100/r03/n100.r03.s063.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:c0a73e409c09b15d60bdbe7875a4a54bb613cf7b94c0d87c173bbf6aa5794d5e
	sha256:1ea7c42599e66e0ef3dfbff1b7ad36b62b488d324d8c5c63e9e97ff8d8267b38
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/484b3adee8c62e7c8252c9fd46b6a7927cc435fd7b02d337e5be5d9148957dac
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s063_output"
	    wget -O "n100.r03.s063_output/n100.r03.s063.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s063_output/n100.r03.s063.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s063_output/n100.r03.s063.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s063_output/n100.r03.s063.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s063_output/n100.r03.s063.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s063_output/n100.r03.s063.reference.fas" "n100.r03.s063_output/n100.r03.s063.fq1.fastq" "n100.r03.s063_output/n100.r03.s063.fq2.fastq" | samtools view -bS - > "n100.r03.s063_output/n100.r03.s063.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s063_output/n100.r03.s063.untrimmed.sorted.bam" "n100.r03.s063_output/n100.r03.s063.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s063_output/n100.r03.s063.untrimmed.sorted.bam" -b "n100.r03.s063_output/n100.r03.s063.primers.bed" -p "n100.r03.s063_output/n100.r03.s063.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s063_output/n100.r03.s063.trimmed.sorted.bam" "n100.r03.s063_output/n100.r03.s063.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s063_output/n100.r03.s063.reference.fas" "n100.r03.s063_output/n100.r03.s063.trimmed.sorted.bam" > "n100.r03.s063_output/n100.r03.s063.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s063_output/n100.r03.s063.reference.fas" --call-indels "n100.r03.s063_output/n100.r03.s063.trimmed.sorted.bam" > "n100.r03.s063_output/n100.r03.s063.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s063_output/n100.r03.s063.trimmed.sorted.bam" > "n100.r03.s063_output/n100.r03.s063.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s063_output/n100.r03.s063.depth.txt" "n100.r03.s063_output/n100.r03.s063.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s063_output/n100.r03.s063.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s063_output/n100.r03.s063.reference.fas" | bcftools consensus -m "n100.r03.s063_output/n100.r03.s063.low_depth.tsv" tmp.vcf.gz > "n100.r03.s063_output/n100.r03.s063.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s063_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:d0349892f508d595c54f5e06e6a8c7db96edb2868c07e39a0d1c4f4633252a29 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.6MiB max=130.0MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 16:50:11 scheduler task 1947bde2 (flow 00f2f17c): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s063.tar.gz resources {}
2021/07/08 16:50:11  ->  n100.r03.s063.Main.cp_out_file 00f2f17c exec extern s3://niema-test/n100/r03/n100.r03.s063.tar.gz 35.7MiB
2021/07/08 16:50:11 scheduler task 4396f600 (flow e90de21c): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:11 scheduler task 4396f600 (flow e90de21c): retrieving result (try 0): started
2021/07/08 16:50:11 scheduler task ad11b6f1 (flow b407f183): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:11 scheduler task ad11b6f1 (flow b407f183): unloading (try 0): started
2021/07/08 16:50:11 scheduler task ad11b6f1 (flow b407f183): unloading list<val<.=bbb22775 35.8MiB> 35.8MiB>
2021/07/08 16:50:11 scheduler task ad11b6f1 (flow b407f183): unloading val<.=a5634123 35.4MiB>
2021/07/08 16:50:11 scheduler task ad11b6f1 (flow b407f183): unloading val<.=be6033c4 35.4MiB>
2021/07/08 16:50:11 scheduler task 82950da3 (flow a420f865): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:11 scheduler task 4396f600 (flow e90de21c): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:11 scheduler task 82950da3 (flow a420f865): promoting objects (try 0): started
2021/07/08 16:50:11 scheduler task 4396f600 (flow e90de21c): transferring output (try 0): started
2021/07/08 16:50:11 scheduler task ad11b6f1 (flow b407f183): unloaded list<val<.=bbb22775 35.8MiB> 35.8MiB>
2021/07/08 16:50:11 scheduler task ad11b6f1 (flow b407f183): unloaded val<.=be6033c4 35.4MiB>
2021/07/08 16:50:11 scheduler task ad11b6f1 (flow b407f183): unloaded val<.=a5634123 35.4MiB>
2021/07/08 16:50:11 scheduler task ad11b6f1 (flow b407f183): unloading (try 0): successful, next state: complete
2021/07/08 16:50:11  <-  n100.r03.s046.Main.out_file b407f183 ok     exec 4m57s 35.8MiB
2021/07/08 16:50:11 n100.r03.s046.Main.out_file b407f183 n100/r03/n100.r03.s046.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:f1b74809b43a376e3de3538b7860f719c5295e33ae4ca00d389483e5282a2aa5
	sha256:b407f18375a7d787e8d0ad64cbb0ba8699d72d25522462e4a5b5d9aeba3c4430
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ad11b6f168de20994f56a60324e3907689c7ed6d21da748789ad32abff3ddd22
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s046_output"
	    wget -O "n100.r03.s046_output/n100.r03.s046.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s046_output/n100.r03.s046.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s046_output/n100.r03.s046.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s046_output/n100.r03.s046.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s046_output/n100.r03.s046.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s046_output/n100.r03.s046.reference.fas" "n100.r03.s046_output/n100.r03.s046.fq1.fastq" "n100.r03.s046_output/n100.r03.s046.fq2.fastq" | samtools view -bS - > "n100.r03.s046_output/n100.r03.s046.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s046_output/n100.r03.s046.untrimmed.sorted.bam" "n100.r03.s046_output/n100.r03.s046.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s046_output/n100.r03.s046.untrimmed.sorted.bam" -b "n100.r03.s046_output/n100.r03.s046.primers.bed" -p "n100.r03.s046_output/n100.r03.s046.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s046_output/n100.r03.s046.trimmed.sorted.bam" "n100.r03.s046_output/n100.r03.s046.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s046_output/n100.r03.s046.reference.fas" "n100.r03.s046_output/n100.r03.s046.trimmed.sorted.bam" > "n100.r03.s046_output/n100.r03.s046.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s046_output/n100.r03.s046.reference.fas" --call-indels "n100.r03.s046_output/n100.r03.s046.trimmed.sorted.bam" > "n100.r03.s046_output/n100.r03.s046.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s046_output/n100.r03.s046.trimmed.sorted.bam" > "n100.r03.s046_output/n100.r03.s046.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s046_output/n100.r03.s046.depth.txt" "n100.r03.s046_output/n100.r03.s046.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s046_output/n100.r03.s046.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s046_output/n100.r03.s046.reference.fas" | bcftools consensus -m "n100.r03.s046_output/n100.r03.s046.low_depth.tsv" tmp.vcf.gz > "n100.r03.s046_output/n100.r03.s046.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s046_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:bbb22775eb8aa52ff4a9238e1956dd423c5fbaa1c36b01fa0d1034b3b7debdca 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.0MiB max=128.2MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 16:50:11 scheduler task fa86c5d6 (flow afaf2924): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s046.tar.gz resources {}
2021/07/08 16:50:11  ->  n100.r03.s046.Main.cp_out_file afaf2924 exec extern s3://niema-test/n100/r03/n100.r03.s046.tar.gz 35.8MiB
2021/07/08 16:50:11 scheduler task 82950da3 (flow a420f865): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:11 scheduler task 82950da3 (flow a420f865): retrieving diagnostic output (try 0): started
2021/07/08 16:50:11 scheduler task 82950da3 (flow a420f865): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:11 scheduler task 82950da3 (flow a420f865): retrieving result (try 0): started
2021/07/08 16:50:11 scheduler task 82950da3 (flow a420f865): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:11 scheduler task 82950da3 (flow a420f865): transferring output (try 0): started
2021/07/08 16:50:12 scheduler task a92d208a (flow ede6e93f): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:f22fff617eeb36c52a558f0bf2a7e34aca9fe74890684bfc036d43d47b083399 -> s3://niema-test/n100/r03/n100.r03.s020.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:50:12  <-  n100.r03.s020.Main.cp_out_file ede6e93f ok   extern 0s 35.8MiB
2021/07/08 16:50:12 scheduler task 754701b2 (flow a896295a): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:12 scheduler task 754701b2 (flow a896295a): promoting objects (try 0): started
2021/07/08 16:50:12 scheduler task 4396f600 (flow e90de21c): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:12 scheduler task 754701b2 (flow a896295a): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:12 scheduler task 4396f600 (flow e90de21c): unloading (try 0): started
2021/07/08 16:50:12 scheduler task 4396f600 (flow e90de21c): unloading list<val<.=8ce18736 35.8MiB> 35.8MiB>
2021/07/08 16:50:12 scheduler task 4396f600 (flow e90de21c): unloading val<.=2fcc8616 35.4MiB>
2021/07/08 16:50:12 scheduler task 4396f600 (flow e90de21c): unloading val<.=056f0be4 35.4MiB>
2021/07/08 16:50:12 scheduler task 754701b2 (flow a896295a): retrieving diagnostic output (try 0): started
2021/07/08 16:50:12 scheduler task 4396f600 (flow e90de21c): unloaded val<.=2fcc8616 35.4MiB>
2021/07/08 16:50:12 scheduler task 4396f600 (flow e90de21c): unloaded val<.=056f0be4 35.4MiB>
2021/07/08 16:50:12 scheduler task 4396f600 (flow e90de21c): unloaded list<val<.=8ce18736 35.8MiB> 35.8MiB>
2021/07/08 16:50:12 scheduler task 4396f600 (flow e90de21c): unloading (try 0): successful, next state: complete
2021/07/08 16:50:12  <-  n100.r03.s035.Main.out_file e90de21c ok     exec 4m57s 35.8MiB
2021/07/08 16:50:12 n100.r03.s035.Main.out_file e90de21c n100/r03/n100.r03.s035.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:a769419d9aae5676baabef4be78e5ec70238f18efe23274955886a333b9a3621
	sha256:e90de21c991d3b0d59c4047a7799cb3ed5c4771aaad7bf5226661828b4a9534a
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/4396f6009cdee6035aa9634cf5eae40832a63c1b1eb64dd9e9ba1e1ab6cb025e
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s035_output"
	    wget -O "n100.r03.s035_output/n100.r03.s035.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s035_output/n100.r03.s035.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s035_output/n100.r03.s035.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s035_output/n100.r03.s035.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s035_output/n100.r03.s035.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s035_output/n100.r03.s035.reference.fas" "n100.r03.s035_output/n100.r03.s035.fq1.fastq" "n100.r03.s035_output/n100.r03.s035.fq2.fastq" | samtools view -bS - > "n100.r03.s035_output/n100.r03.s035.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s035_output/n100.r03.s035.untrimmed.sorted.bam" "n100.r03.s035_output/n100.r03.s035.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s035_output/n100.r03.s035.untrimmed.sorted.bam" -b "n100.r03.s035_output/n100.r03.s035.primers.bed" -p "n100.r03.s035_output/n100.r03.s035.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s035_output/n100.r03.s035.trimmed.sorted.bam" "n100.r03.s035_output/n100.r03.s035.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s035_output/n100.r03.s035.reference.fas" "n100.r03.s035_output/n100.r03.s035.trimmed.sorted.bam" > "n100.r03.s035_output/n100.r03.s035.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s035_output/n100.r03.s035.reference.fas" --call-indels "n100.r03.s035_output/n100.r03.s035.trimmed.sorted.bam" > "n100.r03.s035_output/n100.r03.s035.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s035_output/n100.r03.s035.trimmed.sorted.bam" > "n100.r03.s035_output/n100.r03.s035.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s035_output/n100.r03.s035.depth.txt" "n100.r03.s035_output/n100.r03.s035.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s035_output/n100.r03.s035.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s035_output/n100.r03.s035.reference.fas" | bcftools consensus -m "n100.r03.s035_output/n100.r03.s035.low_depth.tsv" tmp.vcf.gz > "n100.r03.s035_output/n100.r03.s035.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s035_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:8ce187361c123baa88920ac956a87474a1082779c22f262b4ca3910f2fc24edf 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=22.5MiB max=129.9MiB
	    disk mean=7.2MiB max=35.8MiB
	    tmp mean=209B max=1.0KiB
2021/07/08 16:50:12 scheduler task 184413c4 (flow b516e772): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s035.tar.gz resources {}
2021/07/08 16:50:12  ->  n100.r03.s035.Main.cp_out_file b516e772 exec extern s3://niema-test/n100/r03/n100.r03.s035.tar.gz 35.8MiB
2021/07/08 16:50:12 scheduler task 754701b2 (flow a896295a): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:12 scheduler task 754701b2 (flow a896295a): retrieving result (try 0): started
2021/07/08 16:50:12 scheduler task a141e5b2 (flow e001fa5e): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:6a7711a621f022135cf7163d48a3c3d2c765c4afc7251ab137a4a58812d45dfa -> s3://niema-test/n100/r03/n100.r03.s072.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:50:12  <-  n100.r03.s072.Main.cp_out_file e001fa5e ok   extern 0s 35.7MiB
2021/07/08 16:50:12 scheduler task 754701b2 (flow a896295a): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:12 scheduler task 754701b2 (flow a896295a): transferring output (try 0): started
2021/07/08 16:50:12 scheduler task 1947bde2 (flow 00f2f17c): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:d0349892f508d595c54f5e06e6a8c7db96edb2868c07e39a0d1c4f4633252a29 -> s3://niema-test/n100/r03/n100.r03.s063.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:50:12  <-  n100.r03.s063.Main.cp_out_file 00f2f17c ok   extern 0s 35.7MiB
2021/07/08 16:50:12 scheduler task ac3fb0dc (flow 785ffd27): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 16:50:12 scheduler task ac3fb0dc (flow 785ffd27): promoting objects (try 0): started
2021/07/08 16:50:12 scheduler task 82950da3 (flow a420f865): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:12 scheduler task 82950da3 (flow a420f865): unloading (try 0): started
2021/07/08 16:50:12 scheduler task 82950da3 (flow a420f865): unloading list<val<.=b0b311bf 35.7MiB> 35.7MiB>
2021/07/08 16:50:12 scheduler task 82950da3 (flow a420f865): unloading val<.=c317d93c 35.4MiB>
2021/07/08 16:50:12 scheduler task 82950da3 (flow a420f865): unloading val<.=8ba8b233 35.4MiB>
2021/07/08 16:50:12 scheduler task ac3fb0dc (flow 785ffd27): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 16:50:12 scheduler task ac3fb0dc (flow 785ffd27): retrieving diagnostic output (try 0): started
2021/07/08 16:50:12 scheduler task 82950da3 (flow a420f865): unloaded list<val<.=b0b311bf 35.7MiB> 35.7MiB>
2021/07/08 16:50:12 scheduler task 82950da3 (flow a420f865): unloaded val<.=c317d93c 35.4MiB>
2021/07/08 16:50:12 scheduler task 82950da3 (flow a420f865): unloaded val<.=8ba8b233 35.4MiB>
2021/07/08 16:50:12 scheduler task 82950da3 (flow a420f865): unloading (try 0): successful, next state: complete
2021/07/08 16:50:12  <-  n100.r03.s005.Main.out_file a420f865 ok     exec 4m57s 35.7MiB
2021/07/08 16:50:12 n100.r03.s005.Main.out_file a420f865 n100/r03/n100.r03.s005.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:3b90fe76e5d8bfe3fda72c92b5ae5233ea32fc9728db7ac450b820800df6ec08
	sha256:a420f86593cb6a697b702227b74f44fd1bce1e2c64a2fb3043610de7ad8fab05
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/82950da383e9eb3ef33400b02fc8a067b966327fe1e56fa23a76c980917b9c69
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s005_output"
	    wget -O "n100.r03.s005_output/n100.r03.s005.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s005_output/n100.r03.s005.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s005_output/n100.r03.s005.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s005_output/n100.r03.s005.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s005_output/n100.r03.s005.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s005_output/n100.r03.s005.reference.fas" "n100.r03.s005_output/n100.r03.s005.fq1.fastq" "n100.r03.s005_output/n100.r03.s005.fq2.fastq" | samtools view -bS - > "n100.r03.s005_output/n100.r03.s005.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s005_output/n100.r03.s005.untrimmed.sorted.bam" "n100.r03.s005_output/n100.r03.s005.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s005_output/n100.r03.s005.untrimmed.sorted.bam" -b "n100.r03.s005_output/n100.r03.s005.primers.bed" -p "n100.r03.s005_output/n100.r03.s005.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s005_output/n100.r03.s005.trimmed.sorted.bam" "n100.r03.s005_output/n100.r03.s005.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s005_output/n100.r03.s005.reference.fas" "n100.r03.s005_output/n100.r03.s005.trimmed.sorted.bam" > "n100.r03.s005_output/n100.r03.s005.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s005_output/n100.r03.s005.reference.fas" --call-indels "n100.r03.s005_output/n100.r03.s005.trimmed.sorted.bam" > "n100.r03.s005_output/n100.r03.s005.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s005_output/n100.r03.s005.trimmed.sorted.bam" > "n100.r03.s005_output/n100.r03.s005.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s005_output/n100.r03.s005.depth.txt" "n100.r03.s005_output/n100.r03.s005.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s005_output/n100.r03.s005.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s005_output/n100.r03.s005.reference.fas" | bcftools consensus -m "n100.r03.s005_output/n100.r03.s005.low_depth.tsv" tmp.vcf.gz > "n100.r03.s005_output/n100.r03.s005.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s005_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:b0b311bf7b7751de0c4a1822c3909b50128de4130cbd2b999ac420b135e618fe 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=23.3MiB max=130.0MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=210B max=1.0KiB
2021/07/08 16:50:12 scheduler task 99be7b37 (flow ffae86b0): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s005.tar.gz resources {}
2021/07/08 16:50:12  ->  n100.r03.s005.Main.cp_out_file ffae86b0 exec extern s3://niema-test/n100/r03/n100.r03.s005.tar.gz 35.7MiB
2021/07/08 16:50:12 scheduler task fa86c5d6 (flow afaf2924): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:bbb22775eb8aa52ff4a9238e1956dd423c5fbaa1c36b01fa0d1034b3b7debdca -> s3://niema-test/n100/r03/n100.r03.s046.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:50:12  <-  n100.r03.s046.Main.cp_out_file afaf2924 ok   extern 0s 35.8MiB
2021/07/08 16:50:12 scheduler task ac3fb0dc (flow 785ffd27): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 16:50:12 scheduler task ac3fb0dc (flow 785ffd27): retrieving result (try 0): started
2021/07/08 16:50:12 scheduler task ac3fb0dc (flow 785ffd27): retrieving result (try 0): successful, next state: transferring output
2021/07/08 16:50:12 scheduler task ac3fb0dc (flow 785ffd27): transferring output (try 0): started
2021/07/08 16:50:12 scheduler task 754701b2 (flow a896295a): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:12 scheduler task 754701b2 (flow a896295a): unloading (try 0): started
2021/07/08 16:50:12 scheduler task 754701b2 (flow a896295a): unloading list<val<.=bda18b06 35.7MiB> 35.7MiB>
2021/07/08 16:50:12 scheduler task 754701b2 (flow a896295a): unloading val<.=2a4ea417 35.4MiB>
2021/07/08 16:50:12 scheduler task 754701b2 (flow a896295a): unloading val<.=c7330d2d 35.4MiB>
2021/07/08 16:50:12 scheduler task 754701b2 (flow a896295a): unloaded val<.=2a4ea417 35.4MiB>
2021/07/08 16:50:12 scheduler task 754701b2 (flow a896295a): unloaded list<val<.=bda18b06 35.7MiB> 35.7MiB>
2021/07/08 16:50:12 scheduler task 754701b2 (flow a896295a): unloaded val<.=c7330d2d 35.4MiB>
2021/07/08 16:50:12 scheduler task 754701b2 (flow a896295a): unloading (try 0): successful, next state: complete
2021/07/08 16:50:12  <-  n100.r03.s069.Main.out_file a896295a ok     exec 4m58s 35.7MiB
2021/07/08 16:50:12 n100.r03.s069.Main.out_file a896295a n100/r03/n100.r03.s069.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:1d941d7ef69747946216c38d7c7e551b11cad51fac7eca9f47e391f3ccca3912
	sha256:a896295abfb941bb4b6d4ee4e685b0cb86e0958295bf937addad60dae137ed4f
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/754701b2a68e33516d1b959cf8dd96297a156894d024b5107a3c21aa25603400
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s069_output"
	    wget -O "n100.r03.s069_output/n100.r03.s069.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s069_output/n100.r03.s069.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s069_output/n100.r03.s069.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s069_output/n100.r03.s069.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s069_output/n100.r03.s069.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s069_output/n100.r03.s069.reference.fas" "n100.r03.s069_output/n100.r03.s069.fq1.fastq" "n100.r03.s069_output/n100.r03.s069.fq2.fastq" | samtools view -bS - > "n100.r03.s069_output/n100.r03.s069.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s069_output/n100.r03.s069.untrimmed.sorted.bam" "n100.r03.s069_output/n100.r03.s069.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s069_output/n100.r03.s069.untrimmed.sorted.bam" -b "n100.r03.s069_output/n100.r03.s069.primers.bed" -p "n100.r03.s069_output/n100.r03.s069.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s069_output/n100.r03.s069.trimmed.sorted.bam" "n100.r03.s069_output/n100.r03.s069.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s069_output/n100.r03.s069.reference.fas" "n100.r03.s069_output/n100.r03.s069.trimmed.sorted.bam" > "n100.r03.s069_output/n100.r03.s069.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s069_output/n100.r03.s069.reference.fas" --call-indels "n100.r03.s069_output/n100.r03.s069.trimmed.sorted.bam" > "n100.r03.s069_output/n100.r03.s069.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s069_output/n100.r03.s069.trimmed.sorted.bam" > "n100.r03.s069_output/n100.r03.s069.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s069_output/n100.r03.s069.depth.txt" "n100.r03.s069_output/n100.r03.s069.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s069_output/n100.r03.s069.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s069_output/n100.r03.s069.reference.fas" | bcftools consensus -m "n100.r03.s069_output/n100.r03.s069.low_depth.tsv" tmp.vcf.gz > "n100.r03.s069_output/n100.r03.s069.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s069_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:bda18b0658361539f67bc144b83cee927ea5dc3c0bed9ee370ebbc095c162be0 35.7MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=21.9MiB max=129.1MiB
	    disk mean=7.1MiB max=35.7MiB
	    tmp mean=207B max=1.0KiB
2021/07/08 16:50:12 scheduler task 696b28a6 (flow 6ade02fd): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s069.tar.gz resources {}
2021/07/08 16:50:12  ->  n100.r03.s069.Main.cp_out_file 6ade02fd exec extern s3://niema-test/n100/r03/n100.r03.s069.tar.gz 35.7MiB
2021/07/08 16:50:13 scheduler task 184413c4 (flow b516e772): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:8ce187361c123baa88920ac956a87474a1082779c22f262b4ca3910f2fc24edf -> s3://niema-test/n100/r03/n100.r03.s035.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:50:13  <-  n100.r03.s035.Main.cp_out_file b516e772 ok   extern 0s 35.8MiB
2021/07/08 16:50:13 scheduler task ac3fb0dc (flow 785ffd27): transferring output (try 0): successful, next state: unloading
2021/07/08 16:50:13 scheduler task ac3fb0dc (flow 785ffd27): unloading (try 0): started
2021/07/08 16:50:13 scheduler task ac3fb0dc (flow 785ffd27): unloading list<val<.=26f373e3 35.8MiB> 35.8MiB>
2021/07/08 16:50:13 scheduler task ac3fb0dc (flow 785ffd27): unloading val<.=b631ebe8 35.4MiB>
2021/07/08 16:50:13 scheduler task ac3fb0dc (flow 785ffd27): unloading val<.=549b5f76 35.4MiB>
2021/07/08 16:50:13 scheduler task ac3fb0dc (flow 785ffd27): unloaded val<.=b631ebe8 35.4MiB>
2021/07/08 16:50:13 scheduler task ac3fb0dc (flow 785ffd27): unloaded list<val<.=26f373e3 35.8MiB> 35.8MiB>
2021/07/08 16:50:13 scheduler task ac3fb0dc (flow 785ffd27): unloaded val<.=549b5f76 35.4MiB>
2021/07/08 16:50:13 scheduler task ac3fb0dc (flow 785ffd27): unloading (try 0): successful, next state: complete
2021/07/08 16:50:13  <-  n100.r03.s015.Main.out_file 785ffd27 ok     exec 5m1s 35.8MiB
2021/07/08 16:50:13 n100.r03.s015.Main.out_file 785ffd27 n100/r03/n100.r03.s015.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:484062e894ce6e2d60b62aa7a43276af682b64f29d3feb22b94460f278fdb7b6
	sha256:785ffd27d1ed8c8e7bd5d9e7901497bd6912e1bd7555c3585f5e38af127e4cf5
	ec2-18-119-116-234.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/ac3fb0dce2e7c7b65a9a3553d5fe5b2816d4f3ab85fb0bd5adcd0bdc45345277
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n100.r03.s015_output"
	    wget -O "n100.r03.s015_output/n100.r03.s015.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n100.r03.s015_output/n100.r03.s015.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n100.r03.s015_output/n100.r03.s015.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n100.r03.s015_output/n100.r03.s015.fq1.fastq"
	    cp "{{fq2}}" "n100.r03.s015_output/n100.r03.s015.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n100.r03.s015_output/n100.r03.s015.reference.fas" "n100.r03.s015_output/n100.r03.s015.fq1.fastq" "n100.r03.s015_output/n100.r03.s015.fq2.fastq" | samtools view -bS - > "n100.r03.s015_output/n100.r03.s015.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s015_output/n100.r03.s015.untrimmed.sorted.bam" "n100.r03.s015_output/n100.r03.s015.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n100.r03.s015_output/n100.r03.s015.untrimmed.sorted.bam" -b "n100.r03.s015_output/n100.r03.s015.primers.bed" -p "n100.r03.s015_output/n100.r03.s015.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n100.r03.s015_output/n100.r03.s015.trimmed.sorted.bam" "n100.r03.s015_output/n100.r03.s015.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n100.r03.s015_output/n100.r03.s015.reference.fas" "n100.r03.s015_output/n100.r03.s015.trimmed.sorted.bam" > "n100.r03.s015_output/n100.r03.s015.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n100.r03.s015_output/n100.r03.s015.reference.fas" --call-indels "n100.r03.s015_output/n100.r03.s015.trimmed.sorted.bam" > "n100.r03.s015_output/n100.r03.s015.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n100.r03.s015_output/n100.r03.s015.trimmed.sorted.bam" > "n100.r03.s015_output/n100.r03.s015.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n100.r03.s015_output/n100.r03.s015.depth.txt" "n100.r03.s015_output/n100.r03.s015.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n100.r03.s015_output/n100.r03.s015.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n100.r03.s015_output/n100.r03.s015.reference.fas" | bcftools consensus -m "n100.r03.s015_output/n100.r03.s015.low_depth.tsv" tmp.vcf.gz > "n100.r03.s015_output/n100.r03.s015.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n100.r03.s015_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:26f373e395af30cacf7f9590608d89c4414adbf98abedeb731d401a77148e2c4 35.8MiB
	profile:
	    cpu mean=1.0 max=1.0
	    mem mean=20.9MiB max=126.4MiB
	    disk mean=6.4MiB max=35.8MiB
	    tmp mean=172B max=1.0KiB
2021/07/08 16:50:13 scheduler task cb8b1eb4 (flow d6bedde9): submitted with execconfig extern url s3://niema-test/n100/r03/n100.r03.s015.tar.gz resources {}
2021/07/08 16:50:13  ->  n100.r03.s015.Main.cp_out_file d6bedde9 exec extern s3://niema-test/n100/r03/n100.r03.s015.tar.gz 35.8MiB
2021/07/08 16:50:13 scheduler task 99be7b37 (flow ffae86b0): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:b0b311bf7b7751de0c4a1822c3909b50128de4130cbd2b999ac420b135e618fe -> s3://niema-test/n100/r03/n100.r03.s005.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:50:13  <-  n100.r03.s005.Main.cp_out_file ffae86b0 ok   extern 0s 35.7MiB
2021/07/08 16:50:13 scheduler task 696b28a6 (flow 6ade02fd): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:bda18b0658361539f67bc144b83cee927ea5dc3c0bed9ee370ebbc095c162be0 -> s3://niema-test/n100/r03/n100.r03.s069.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 16:50:13  <-  n100.r03.s069.Main.cp_out_file 6ade02fd ok   extern 0s 35.7MiB
2021/07/08 16:50:14 scheduler task cb8b1eb4 (flow d6bedde9): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:26f373e395af30cacf7f9590608d89c4414adbf98abedeb731d401a77148e2c4 -> s3://niema-test/n100/r03/n100.r03.s015.tar.gz (35.8MiB) in 1s (35.8MiB/s) 
2021/07/08 16:50:14  <-  n100.r03.s015.Main.cp_out_file d6bedde9 ok   extern 0s 35.8MiB
2021/07/08 16:50:14 total n=400 time=6m37s
	ident                          n   ncache transfer runtime(m) cpu         mem(GiB)    disk(GiB)   tmp(GiB) requested
	n100.r03.s001.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s001.Main.fq1         1   0      0B                                                      
	n100.r03.s001.Main.fq2         1   0      0B                                                      
	n100.r03.s001.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s002.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s002.Main.fq1         1   0      0B                                                      
	n100.r03.s002.Main.fq2         1   0      0B                                                      
	n100.r03.s002.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s003.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s003.Main.fq1         1   0      0B                                                      
	n100.r03.s003.Main.fq2         1   0      0B                                                      
	n100.r03.s003.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s004.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s004.Main.fq1         1   0      0B                                                      
	n100.r03.s004.Main.fq2         1   0      0B                                                      
	n100.r03.s004.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s005.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s005.Main.fq1         1   0      0B                                                      
	n100.r03.s005.Main.fq2         1   0      0B                                                      
	n100.r03.s005.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s006.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s006.Main.fq1         1   0      0B                                                      
	n100.r03.s006.Main.fq2         1   0      0B                                                      
	n100.r03.s006.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s007.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s007.Main.fq1         1   0      0B                                                      
	n100.r03.s007.Main.fq2         1   0      0B                                                      
	n100.r03.s007.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s008.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s008.Main.fq1         1   0      0B                                                      
	n100.r03.s008.Main.fq2         1   0      0B                                                      
	n100.r03.s008.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s009.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s009.Main.fq1         1   0      0B                                                      
	n100.r03.s009.Main.fq2         1   0      0B                                                      
	n100.r03.s009.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s010.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s010.Main.fq1         1   0      0B                                                      
	n100.r03.s010.Main.fq2         1   0      0B                                                      
	n100.r03.s010.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s011.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s011.Main.fq1         1   0      0B                                                      
	n100.r03.s011.Main.fq2         1   0      0B                                                      
	n100.r03.s011.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s012.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s012.Main.fq1         1   0      0B                                                      
	n100.r03.s012.Main.fq2         1   0      0B                                                      
	n100.r03.s012.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s013.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s013.Main.fq1         1   0      0B                                                      
	n100.r03.s013.Main.fq2         1   0      0B                                                      
	n100.r03.s013.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s014.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s014.Main.fq1         1   0      0B                                                      
	n100.r03.s014.Main.fq2         1   0      0B                                                      
	n100.r03.s014.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s015.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s015.Main.fq1         1   0      0B                                                      
	n100.r03.s015.Main.fq2         1   0      0B                                                      
	n100.r03.s015.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s016.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s016.Main.fq1         1   0      0B                                                      
	n100.r03.s016.Main.fq2         1   0      0B                                                      
	n100.r03.s016.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s017.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s017.Main.fq1         1   0      0B                                                      
	n100.r03.s017.Main.fq2         1   0      0B                                                      
	n100.r03.s017.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s018.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s018.Main.fq1         1   0      0B                                                      
	n100.r03.s018.Main.fq2         1   0      0B                                                      
	n100.r03.s018.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s019.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s019.Main.fq1         1   0      0B                                                      
	n100.r03.s019.Main.fq2         1   0      0B                                                      
	n100.r03.s019.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s020.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s020.Main.fq1         1   0      0B                                                      
	n100.r03.s020.Main.fq2         1   0      0B                                                      
	n100.r03.s020.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s021.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s021.Main.fq1         1   0      0B                                                      
	n100.r03.s021.Main.fq2         1   0      0B                                                      
	n100.r03.s021.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s022.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s022.Main.fq1         1   0      0B                                                      
	n100.r03.s022.Main.fq2         1   0      0B                                                      
	n100.r03.s022.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s023.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s023.Main.fq1         1   0      0B                                                      
	n100.r03.s023.Main.fq2         1   0      0B                                                      
	n100.r03.s023.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s024.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s024.Main.fq1         1   0      0B                                                      
	n100.r03.s024.Main.fq2         1   0      0B                                                      
	n100.r03.s024.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s025.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s025.Main.fq1         1   0      0B                                                      
	n100.r03.s025.Main.fq2         1   0      0B                                                      
	n100.r03.s025.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s026.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s026.Main.fq1         1   0      0B                                                      
	n100.r03.s026.Main.fq2         1   0      0B                                                      
	n100.r03.s026.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s027.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s027.Main.fq1         1   0      0B                                                      
	n100.r03.s027.Main.fq2         1   0      0B                                                      
	n100.r03.s027.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s028.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s028.Main.fq1         1   0      0B                                                      
	n100.r03.s028.Main.fq2         1   0      0B                                                      
	n100.r03.s028.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s029.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s029.Main.fq1         1   0      0B                                                      
	n100.r03.s029.Main.fq2         1   0      0B                                                      
	n100.r03.s029.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s030.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s030.Main.fq1         1   0      0B                                                      
	n100.r03.s030.Main.fq2         1   0      0B                                                      
	n100.r03.s030.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s031.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s031.Main.fq1         1   0      0B                                                      
	n100.r03.s031.Main.fq2         1   0      0B                                                      
	n100.r03.s031.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s032.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s032.Main.fq1         1   0      0B                                                      
	n100.r03.s032.Main.fq2         1   0      0B                                                      
	n100.r03.s032.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s033.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s033.Main.fq1         1   0      0B                                                      
	n100.r03.s033.Main.fq2         1   0      0B                                                      
	n100.r03.s033.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s034.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s034.Main.fq1         1   0      0B                                                      
	n100.r03.s034.Main.fq2         1   0      0B                                                      
	n100.r03.s034.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s035.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s035.Main.fq1         1   0      0B                                                      
	n100.r03.s035.Main.fq2         1   0      0B                                                      
	n100.r03.s035.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s036.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s036.Main.fq1         1   0      0B                                                      
	n100.r03.s036.Main.fq2         1   0      0B                                                      
	n100.r03.s036.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s037.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s037.Main.fq1         1   0      0B                                                      
	n100.r03.s037.Main.fq2         1   0      0B                                                      
	n100.r03.s037.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s038.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s038.Main.fq1         1   0      0B                                                      
	n100.r03.s038.Main.fq2         1   0      0B                                                      
	n100.r03.s038.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s039.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s039.Main.fq1         1   0      0B                                                      
	n100.r03.s039.Main.fq2         1   0      0B                                                      
	n100.r03.s039.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s040.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s040.Main.fq1         1   0      0B                                                      
	n100.r03.s040.Main.fq2         1   0      0B                                                      
	n100.r03.s040.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s041.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s041.Main.fq1         1   0      0B                                                      
	n100.r03.s041.Main.fq2         1   0      0B                                                      
	n100.r03.s041.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s042.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s042.Main.fq1         1   0      0B                                                      
	n100.r03.s042.Main.fq2         1   0      0B                                                      
	n100.r03.s042.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s043.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s043.Main.fq1         1   0      0B                                                      
	n100.r03.s043.Main.fq2         1   0      0B                                                      
	n100.r03.s043.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s044.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s044.Main.fq1         1   0      0B                                                      
	n100.r03.s044.Main.fq2         1   0      0B                                                      
	n100.r03.s044.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s045.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s045.Main.fq1         1   0      0B                                                      
	n100.r03.s045.Main.fq2         1   0      0B                                                      
	n100.r03.s045.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s046.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s046.Main.fq1         1   0      0B                                                      
	n100.r03.s046.Main.fq2         1   0      0B                                                      
	n100.r03.s046.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s047.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s047.Main.fq1         1   0      0B                                                      
	n100.r03.s047.Main.fq2         1   0      0B                                                      
	n100.r03.s047.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s048.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s048.Main.fq1         1   0      0B                                                      
	n100.r03.s048.Main.fq2         1   0      0B                                                      
	n100.r03.s048.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s049.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s049.Main.fq1         1   0      0B                                                      
	n100.r03.s049.Main.fq2         1   0      0B                                                      
	n100.r03.s049.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s050.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s050.Main.fq1         1   0      0B                                                      
	n100.r03.s050.Main.fq2         1   0      0B                                                      
	n100.r03.s050.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s051.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s051.Main.fq1         1   0      0B                                                      
	n100.r03.s051.Main.fq2         1   0      0B                                                      
	n100.r03.s051.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s052.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s052.Main.fq1         1   0      0B                                                      
	n100.r03.s052.Main.fq2         1   0      0B                                                      
	n100.r03.s052.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s053.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s053.Main.fq1         1   0      0B                                                      
	n100.r03.s053.Main.fq2         1   0      0B                                                      
	n100.r03.s053.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s054.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s054.Main.fq1         1   0      0B                                                      
	n100.r03.s054.Main.fq2         1   0      0B                                                      
	n100.r03.s054.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s055.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s055.Main.fq1         1   0      0B                                                      
	n100.r03.s055.Main.fq2         1   0      0B                                                      
	n100.r03.s055.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s056.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s056.Main.fq1         1   0      0B                                                      
	n100.r03.s056.Main.fq2         1   0      0B                                                      
	n100.r03.s056.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s057.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s057.Main.fq1         1   0      0B                                                      
	n100.r03.s057.Main.fq2         1   0      0B                                                      
	n100.r03.s057.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s058.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s058.Main.fq1         1   0      0B                                                      
	n100.r03.s058.Main.fq2         1   0      0B                                                      
	n100.r03.s058.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s059.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s059.Main.fq1         1   0      0B                                                      
	n100.r03.s059.Main.fq2         1   0      0B                                                      
	n100.r03.s059.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s060.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s060.Main.fq1         1   0      0B                                                      
	n100.r03.s060.Main.fq2         1   0      0B                                                      
	n100.r03.s060.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s061.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s061.Main.fq1         1   0      0B                                                      
	n100.r03.s061.Main.fq2         1   0      0B                                                      
	n100.r03.s061.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s062.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s062.Main.fq1         1   0      0B                                                      
	n100.r03.s062.Main.fq2         1   0      0B                                                      
	n100.r03.s062.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s063.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s063.Main.fq1         1   0      0B                                                      
	n100.r03.s063.Main.fq2         1   0      0B                                                      
	n100.r03.s063.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s064.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s064.Main.fq1         1   0      0B                                                      
	n100.r03.s064.Main.fq2         1   0      0B                                                      
	n100.r03.s064.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s065.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s065.Main.fq1         1   0      0B                                                      
	n100.r03.s065.Main.fq2         1   0      0B                                                      
	n100.r03.s065.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s066.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s066.Main.fq1         1   0      0B                                                      
	n100.r03.s066.Main.fq2         1   0      0B                                                      
	n100.r03.s066.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s067.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s067.Main.fq1         1   0      0B                                                      
	n100.r03.s067.Main.fq2         1   0      0B                                                      
	n100.r03.s067.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s068.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s068.Main.fq1         1   0      0B                                                      
	n100.r03.s068.Main.fq2         1   0      0B                                                      
	n100.r03.s068.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s069.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s069.Main.fq1         1   0      0B                                                      
	n100.r03.s069.Main.fq2         1   0      0B                                                      
	n100.r03.s069.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s070.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s070.Main.fq1         1   0      0B                                                      
	n100.r03.s070.Main.fq2         1   0      0B                                                      
	n100.r03.s070.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s071.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s071.Main.fq1         1   0      0B                                                      
	n100.r03.s071.Main.fq2         1   0      0B                                                      
	n100.r03.s071.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s072.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s072.Main.fq1         1   0      0B                                                      
	n100.r03.s072.Main.fq2         1   0      0B                                                      
	n100.r03.s072.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s073.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s073.Main.fq1         1   0      0B                                                      
	n100.r03.s073.Main.fq2         1   0      0B                                                      
	n100.r03.s073.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s074.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s074.Main.fq1         1   0      0B                                                      
	n100.r03.s074.Main.fq2         1   0      0B                                                      
	n100.r03.s074.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s075.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s075.Main.fq1         1   0      0B                                                      
	n100.r03.s075.Main.fq2         1   0      0B                                                      
	n100.r03.s075.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s076.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s076.Main.fq1         1   0      0B                                                      
	n100.r03.s076.Main.fq2         1   0      0B                                                      
	n100.r03.s076.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s077.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s077.Main.fq1         1   0      0B                                                      
	n100.r03.s077.Main.fq2         1   0      0B                                                      
	n100.r03.s077.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s078.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s078.Main.fq1         1   0      0B                                                      
	n100.r03.s078.Main.fq2         1   0      0B                                                      
	n100.r03.s078.Main.out_file    1   0      0B       4/4/4      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s079.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s079.Main.fq1         1   0      0B                                                      
	n100.r03.s079.Main.fq2         1   0      0B                                                      
	n100.r03.s079.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s080.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s080.Main.fq1         1   0      0B                                                      
	n100.r03.s080.Main.fq2         1   0      0B                                                      
	n100.r03.s080.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s081.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s081.Main.fq1         1   0      0B                                                      
	n100.r03.s081.Main.fq2         1   0      0B                                                      
	n100.r03.s081.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s082.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s082.Main.fq1         1   0      0B                                                      
	n100.r03.s082.Main.fq2         1   0      0B                                                      
	n100.r03.s082.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s083.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s083.Main.fq1         1   0      0B                                                      
	n100.r03.s083.Main.fq2         1   0      0B                                                      
	n100.r03.s083.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s084.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s084.Main.fq1         1   0      0B                                                      
	n100.r03.s084.Main.fq2         1   0      0B                                                      
	n100.r03.s084.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s085.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s085.Main.fq1         1   0      0B                                                      
	n100.r03.s085.Main.fq2         1   0      0B                                                      
	n100.r03.s085.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s086.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s086.Main.fq1         1   0      0B                                                      
	n100.r03.s086.Main.fq2         1   0      0B                                                      
	n100.r03.s086.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s087.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s087.Main.fq1         1   0      0B                                                      
	n100.r03.s087.Main.fq2         1   0      0B                                                      
	n100.r03.s087.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s088.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s088.Main.fq1         1   0      0B                                                      
	n100.r03.s088.Main.fq2         1   0      0B                                                      
	n100.r03.s088.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s089.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s089.Main.fq1         1   0      0B                                                      
	n100.r03.s089.Main.fq2         1   0      0B                                                      
	n100.r03.s089.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s090.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s090.Main.fq1         1   0      0B                                                      
	n100.r03.s090.Main.fq2         1   0      0B                                                      
	n100.r03.s090.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s091.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s091.Main.fq1         1   0      0B                                                      
	n100.r03.s091.Main.fq2         1   0      0B                                                      
	n100.r03.s091.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s092.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s092.Main.fq1         1   0      0B                                                      
	n100.r03.s092.Main.fq2         1   0      0B                                                      
	n100.r03.s092.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s093.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s093.Main.fq1         1   0      0B                                                      
	n100.r03.s093.Main.fq2         1   0      0B                                                      
	n100.r03.s093.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s094.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s094.Main.fq1         1   0      0B                                                      
	n100.r03.s094.Main.fq2         1   0      0B                                                      
	n100.r03.s094.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s095.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s095.Main.fq1         1   0      0B                                                      
	n100.r03.s095.Main.fq2         1   0      0B                                                      
	n100.r03.s095.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s096.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s096.Main.fq1         1   0      0B                                                      
	n100.r03.s096.Main.fq2         1   0      0B                                                      
	n100.r03.s096.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s097.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s097.Main.fq1         1   0      0B                                                      
	n100.r03.s097.Main.fq2         1   0      0B                                                      
	n100.r03.s097.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s098.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s098.Main.fq1         1   0      0B                                                      
	n100.r03.s098.Main.fq2         1   0      0B                                                      
	n100.r03.s098.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s099.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s099.Main.fq1         1   0      0B                                                      
	n100.r03.s099.Main.fq2         1   0      0B                                                      
	n100.r03.s099.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	n100.r03.s100.Main.cp_out_file 1   0      0B                                                      
	n100.r03.s100.Main.fq1         1   0      0B                                                      
	n100.r03.s100.Main.fq2         1   0      0B                                                      
	n100.r03.s100.Main.out_file    1   0      0B       5/5/5      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	warning: reduce memory requirements for over-allocating execs: n100.r03.s001.Main.out_file, n100.r03.s002.Main.out_file, n100.r03.s003.Main.out_file, n100.r03.s004.Main.out_file, n100.r03.s005.Main.out_file, n100.r03.s006.Main.out_file, n100.r03.s007.Main.out_file, n100.r03.s008.Main.out_file, n100.r03.s009.Main.out_file, n100.r03.s010.Main.out_file, n100.r03.s011.Main.out_file, n100.r03.s012.Main.out_file, n100.r03.s013.Main.out_file, n100.r03.s014.Main.out_file, n100.r03.s015.Main.out_file, n100.r03.s016.Main.out_file, n100.r03.s017.Main.out_file, n100.r03.s018.Main.out_file, n100.r03.s019.Main.out_file, n100.r03.s020.Main.out_file, n100.r03.s021.Main.out_file, n100.r03.s022.Main.out_file, n100.r03.s023.Main.out_file, n100.r03.s024.Main.out_file, n100.r03.s025.Main.out_file, n100.r03.s026.Main.out_file, n100.r03.s027.Main.out_file, n100.r03.s028.Main.out_file, n100.r03.s029.Main.out_file, n100.r03.s030.Main.out_file, n100.r03.s031.Main.out_file, n100.r03.s032.Main.out_file, n100.r03.s033.Main.out_file, n100.r03.s034.Main.out_file, n100.r03.s035.Main.out_file, n100.r03.s036.Main.out_file, n100.r03.s037.Main.out_file, n100.r03.s038.Main.out_file, n100.r03.s039.Main.out_file, n100.r03.s040.Main.out_file, n100.r03.s041.Main.out_file, n100.r03.s042.Main.out_file, n100.r03.s043.Main.out_file, n100.r03.s044.Main.out_file, n100.r03.s045.Main.out_file, n100.r03.s046.Main.out_file, n100.r03.s047.Main.out_file, n100.r03.s048.Main.out_file, n100.r03.s049.Main.out_file, n100.r03.s050.Main.out_file, n100.r03.s051.Main.out_file, n100.r03.s052.Main.out_file, n100.r03.s053.Main.out_file, n100.r03.s054.Main.out_file, n100.r03.s055.Main.out_file, n100.r03.s056.Main.out_file, n100.r03.s057.Main.out_file, n100.r03.s058.Main.out_file, n100.r03.s059.Main.out_file, n100.r03.s060.Main.out_file, n100.r03.s061.Main.out_file, n100.r03.s062.Main.out_file, n100.r03.s063.Main.out_file, n100.r03.s064.Main.out_file, n100.r03.s065.Main.out_file, n100.r03.s066.Main.out_file, n100.r03.s067.Main.out_file, n100.r03.s068.Main.out_file, n100.r03.s069.Main.out_file, n100.r03.s070.Main.out_file, n100.r03.s071.Main.out_file, n100.r03.s072.Main.out_file, n100.r03.s073.Main.out_file, n100.r03.s074.Main.out_file, n100.r03.s075.Main.out_file, n100.r03.s076.Main.out_file, n100.r03.s077.Main.out_file, n100.r03.s078.Main.out_file, n100.r03.s079.Main.out_file, n100.r03.s080.Main.out_file, n100.r03.s081.Main.out_file, n100.r03.s082.Main.out_file, n100.r03.s083.Main.out_file, n100.r03.s084.Main.out_file, n100.r03.s085.Main.out_file, n100.r03.s086.Main.out_file, n100.r03.s087.Main.out_file, n100.r03.s088.Main.out_file, n100.r03.s089.Main.out_file, n100.r03.s090.Main.out_file, n100.r03.s091.Main.out_file, n100.r03.s092.Main.out_file, n100.r03.s093.Main.out_file, n100.r03.s094.Main.out_file, n100.r03.s095.Main.out_file, n100.r03.s096.Main.out_file, n100.r03.s097.Main.out_file, n100.r03.s098.Main.out_file, n100.r03.s099.Main.out_file, n100.r03.s100.Main.out_file
2021/07/08 16:50:14 result: [val<.=e426ba43 35.8MiB>, val<.=6a47fa3e 35.7MiB>, val<.=55178f3b 35.8MiB>, val<.=ed2f04a0 35.8MiB>, val<.=b0b311bf 35.7MiB>, val<.=90bec765 35.8MiB>, val<.=947d0fa9 35.7MiB>, val<.=4e1cd3b9 35.8MiB>, val<.=318ad476 35.7MiB>, val<.=9649f5d2 35.7MiB>, val<.=72673507 35.8MiB>, val<.=d6dcaab8 35.8MiB>, val<.=e04cead1 35.7MiB>, val<.=581eec7b 35.7MiB>, val<.=26f373e3 35.8MiB>, val<.=9e4e585d 35.7MiB>, val<.=69fd1e1a 35.7MiB>, val<.=891320b3 35.7MiB>, val<.=433be2f3 35.7MiB>, val<.=f22fff61 35.8MiB>, val<.=588bebe4 35.7MiB>, val<.=4c449794 35.7MiB>, val<.=9aafdcb5 35.7MiB>, val<.=38eb3edd 35.7MiB>, val<.=f09bc74c 35.7MiB>, val<.=fbd765a6 35.8MiB>, val<.=479ecb46 35.8MiB>, val<.=e37c1a8a 35.8MiB>, val<.=77b70eb8 35.7MiB>, val<.=b3eae8b0 35.7MiB>, val<.=907f9b1a 35.8MiB>, val<.=288fde8b 35.7MiB>, val<.=72168003 35.7MiB>, val<.=5bcf6a58 35.7MiB>, val<.=8ce18736 35.8MiB>, val<.=abf9f85a 35.7MiB>, val<.=bfab64ee 35.8MiB>, val<.=cf6e9259 35.7MiB>, val<.=aae29cf9 35.7MiB>, val<.=b8cd8168 35.8MiB>, val<.=8d743a35 35.8MiB>, val<.=8f72a5a4 35.8MiB>, val<.=2c31da6a 35.7MiB>, val<.=2652f560 35.8MiB>, val<.=bf3a0099 35.7MiB>, val<.=bbb22775 35.8MiB>, val<.=b42cd5e4 35.7MiB>, val<.=b8d517b2 35.7MiB>, val<.=b1fc012d 35.7MiB>, val<.=262b78d0 35.8MiB>, val<.=978cd3ba 35.7MiB>, val<.=549fcb47 35.7MiB>, val<.=1dba1de4 35.8MiB>, val<.=223468f8 35.7MiB>, val<.=11de22e3 35.7MiB>, val<.=6c9d0503 35.7MiB>, val<.=f8247351 35.7MiB>, val<.=9cd1456e 35.7MiB>, val<.=0bd79a66 35.7MiB>, val<.=10851c74 35.8MiB>, val<.=377d892d 35.7MiB>, val<.=235b5276 35.7MiB>, val<.=d0349892 35.7MiB>, val<.=d81c30cf 35.8MiB>, val<.=bfe3a6c7 35.8MiB>, val<.=7233af6b 35.7MiB>, val<.=d56c2ad3 35.7MiB>, val<.=b6eae931 35.8MiB>, val<.=bda18b06 35.7MiB>, val<.=9a0ee0ee 35.7MiB>, val<.=f7517aa2 35.8MiB>, val<.=6a7711a6 35.7MiB>, val<.=d316135c 35.7MiB>, val<.=657e827b 35.7MiB>, val<.=c1688ae1 35.7MiB>, val<.=60861d97 35.7MiB>, val<.=cd469e6b 35.7MiB>, val<.=febe4ad9 35.7MiB>, val<.=fe745419 35.7MiB>, val<.=afdc560e 35.7MiB>, val<.=1392cba0 35.7MiB>, val<.=27717487 35.7MiB>, val<.=225a0de1 35.8MiB>, val<.=0c0d99b6 35.8MiB>, val<.=e4168e78 35.7MiB>, val<.=6e0e8baa 35.7MiB>, val<.=4cf92b1e 35.7MiB>, val<.=12514dd6 35.8MiB>, val<.=454e4f66 35.7MiB>, val<.=05baa883 35.8MiB>, val<.=2c843849 35.8MiB>, val<.=9a67d9e6 35.7MiB>, val<.=e1f90f15 35.8MiB>, val<.=18253a8f 35.7MiB>, val<.=807582dd 35.8MiB>, val<.=3216fe41 35.7MiB>, val<.=51e44e06 35.7MiB>, val<.=b994005a 35.7MiB>, val<.=97b959b1 35.7MiB>, val<.=9d4e9ea6 35.7MiB>]
2021/07/08 16:50:14 waiting for 1 background tasks to complete
