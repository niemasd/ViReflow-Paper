2021/07/08 12:37:48 reflow version: reflow1.6.0 (go1.13.15)
2021/07/08 12:37:48 run ID: 201976d2
2021/07/08 12:37:48 evaluating program /home/niema/ViReflow-Paper/data/sarscov2/n1/n1.r02.rf
	(no params)
	(no arguments)
2021/07/08 12:37:48 Trace: /home/niema/.reflow/runs/201976d287fd355039c028984530990ca5a4453771aee3719d89914a53e14d7a.trace
2021/07/08 12:37:48 evaluating with configuration: scheduler *sched.Scheduler snapshotter blob.Mux transferer *repository.Manager repository *blobrepo.Repository,url=s3://niema-test-quickstart-cache/ assoc *dydbassoc.Assoc,TableName=niema-test-quickstart flags cacheextern,nocache,nogc,norecomputeempty,topdown flowconfig hashv2 cachelookuptimeout 20m0s imagemap map[] dotwriter(*os.File)
2021/07/08 12:37:49 scheduler task 3a9008ca (flow c3326fda): submitted with execconfig exec image niemasd/vireflow:latest cmd "\n        # Copy input files locally\n        mkdir \"n1.r02.s1_output\"\n        wget -O \"n1.r02.s1_output/n1.r02.s1.reference.fas\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas\"\n        wget -O \"n1.r02.s1_output/n1.r02.s1.reference.gff\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3\"\n        wget -O \"n1.r02.s1_output/n1.r02.s1.primers.bed\" \"https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed\"\n        cp \"%s\" \"n1.r02.s1_output/n1.r02.s1.fq1.fastq\"\n        cp \"%s\" \"n1.r02.s1_output/n1.r02.s1.fq2.fastq\"\n\n        # Map reads using minimap2\n        minimap2 -t 1 -a -x sr \"n1.r02.s1_output/n1.r02.s1.reference.fas\" \"n1.r02.s1_output/n1.r02.s1.fq1.fastq\" \"n1.r02.s1_output/n1.r02.s1.fq2.fastq\" | samtools view -bS - > \"n1.r02.s1_output/n1.r02.s1.untrimmed.bam\"\n\n        # Sort mapped reads\n        samtools sort --threads 1 -O bam -o \"n1.r02.s1_output/n1.r02.s1.untrimmed.sorted.bam\" \"n1.r02.s1_output/n1.r02.s1.untrimmed.bam\" 1>&2\n\n        # Trim mapped reads using ivar\n        ivar trim -x 5 -e -i \"n1.r02.s1_output/n1.r02.s1.untrimmed.sorted.bam\" -b \"n1.r02.s1_output/n1.r02.s1.primers.bed\" -p \"n1.r02.s1_output/n1.r02.s1.trimmed\" 1>&2\n\n        # Sort trimmed mapped reads\n        samtools sort --threads 1 -O bam -o \"n1.r02.s1_output/n1.r02.s1.trimmed.sorted.bam\" \"n1.r02.s1_output/n1.r02.s1.trimmed.bam\" 1>&2\n\n        # Generate pile-up from sorted trimmed BAM\n        samtools mpileup -A -aa -d 0 -Q 0 --reference \"n1.r02.s1_output/n1.r02.s1.reference.fas\" \"n1.r02.s1_output/n1.r02.s1.trimmed.sorted.bam\" > \"n1.r02.s1_output/n1.r02.s1.pileup.txt\"\n\n        # Call variants using lofreq\"\n        lofreq call -f \"n1.r02.s1_output/n1.r02.s1.reference.fas\" --call-indels \"n1.r02.s1_output/n1.r02.s1.trimmed.sorted.bam\" > \"n1.r02.s1_output/n1.r02.s1.variants.vcf\"\n\n        # Call depth from trimmed BAM\n        samtools depth -d 0 -Q 0 -q 0 -aa \"n1.r02.s1_output/n1.r02.s1.trimmed.sorted.bam\" > \"n1.r02.s1_output/n1.r02.s1.depth.txt\"\n\n        # Find low-depth regions\n        low_depth_regions \"n1.r02.s1_output/n1.r02.s1.depth.txt\" \"n1.r02.s1_output/n1.r02.s1.low_depth.tsv\" 10 1>&2\n\n        # Generate consensus sequence\n        alt_vars.py -i \"n1.r02.s1_output/n1.r02.s1.variants.vcf\" -o tmp.vcf -v lofreq\n        bgzip tmp.vcf\n        bcftools index tmp.vcf.gz\n        cat \"n1.r02.s1_output/n1.r02.s1.reference.fas\" | bcftools consensus -m \"n1.r02.s1_output/n1.r02.s1.low_depth.tsv\" tmp.vcf.gz > \"n1.r02.s1_output/n1.r02.s1.consensus.fas\"\n\n        # Remove redundant output files before compressing\n        rm */*trimmed.bam\n\n        # Compress output files\n        tar cvf - \"n1.r02.s1_output\" | pigz -1 -p 1 > \"%s\"\n    " args [val<.=s3://niema-test/n1/r02/n1.r02.s1_R1.fastq 35.4MiB>, val<.=s3://niema-test/n1/r02/n1.r02.s1_R2.fastq 35.4MiB>, out[0]] resources {mem:1.0GiB cpu:1 disk:0B}
2021/07/08 12:38:48 scheduler task 3a9008ca (flow c3326fda): assigning to alloc ec2-3-23-89-11.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8 available {mem:0B cpu:0 disk:1.0GiB}
2021/07/08 12:38:48 scheduler task 3a9008ca (flow c3326fda): loading (try 0): started
2021/07/08 12:38:48 scheduler task 3a9008ca (flow c3326fda): loading val<.=s3://niema-test/n1/r02/n1.r02.s1_R2.fastq 35.4MiB>
2021/07/08 12:38:48 scheduler task 3a9008ca (flow c3326fda): loading val<.=s3://niema-test/n1/r02/n1.r02.s1_R1.fastq 35.4MiB>
2021/07/08 12:38:49 scheduler task 3a9008ca (flow c3326fda): loaded val<.=f7dfc689 35.4MiB>
2021/07/08 12:38:49 scheduler task 3a9008ca (flow c3326fda): loaded val<.=e0805f8f 35.4MiB>
2021/07/08 12:38:49 scheduler task 3a9008ca (flow c3326fda): loading (try 0): successful, next state: submitting
2021/07/08 12:38:49 scheduler task 3a9008ca (flow c3326fda): submitting (try 0): started
2021/07/08 12:38:49 scheduler task 3a9008ca (flow c3326fda): submitting (try 0): successful, next state: waiting for completion
2021/07/08 12:38:49 scheduler task 3a9008ca (flow c3326fda): waiting for completion (try 0): started
2021/07/08 12:38:49  ->  n1.r02.s1.Main.out_file c3326fda exec   exec niemasd/vireflow:latest # Copy input files locally.mk..t" | pigz -1 -p 1 > "{{out}}"
2021/07/08 12:38:49 n1.r02.s1.Main.out_file c3326fda n1/r02/n1.r02.s1.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5cb1f62060afe3d5ef82ccd44fbf971c9e506799e09c0a37d683c41ac091980b
	sha256:c3326fda84e9fa1dd952e139e2bad3bbdac401bb1ee83b149f26353108acd4b2
	ec2-3-23-89-11.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3a9008caeddd5becbef5076a399bc7fc76a9e933bfc4746f36f16b9293d93ec0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n1.r02.s1_output"
	    wget -O "n1.r02.s1_output/n1.r02.s1.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n1.r02.s1_output/n1.r02.s1.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n1.r02.s1_output/n1.r02.s1.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n1.r02.s1_output/n1.r02.s1.fq1.fastq"
	    cp "{{fq2}}" "n1.r02.s1_output/n1.r02.s1.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n1.r02.s1_output/n1.r02.s1.reference.fas" "n1.r02.s1_output/n1.r02.s1.fq1.fastq" "n1.r02.s1_output/n1.r02.s1.fq2.fastq" | samtools view -bS - > "n1.r02.s1_output/n1.r02.s1.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n1.r02.s1_output/n1.r02.s1.untrimmed.sorted.bam" "n1.r02.s1_output/n1.r02.s1.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n1.r02.s1_output/n1.r02.s1.untrimmed.sorted.bam" -b "n1.r02.s1_output/n1.r02.s1.primers.bed" -p "n1.r02.s1_output/n1.r02.s1.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n1.r02.s1_output/n1.r02.s1.trimmed.sorted.bam" "n1.r02.s1_output/n1.r02.s1.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n1.r02.s1_output/n1.r02.s1.reference.fas" "n1.r02.s1_output/n1.r02.s1.trimmed.sorted.bam" > "n1.r02.s1_output/n1.r02.s1.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n1.r02.s1_output/n1.r02.s1.reference.fas" --call-indels "n1.r02.s1_output/n1.r02.s1.trimmed.sorted.bam" > "n1.r02.s1_output/n1.r02.s1.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n1.r02.s1_output/n1.r02.s1.trimmed.sorted.bam" > "n1.r02.s1_output/n1.r02.s1.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n1.r02.s1_output/n1.r02.s1.depth.txt" "n1.r02.s1_output/n1.r02.s1.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n1.r02.s1_output/n1.r02.s1.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n1.r02.s1_output/n1.r02.s1.reference.fas" | bcftools consensus -m "n1.r02.s1_output/n1.r02.s1.low_depth.tsv" tmp.vcf.gz > "n1.r02.s1_output/n1.r02.s1.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n1.r02.s1_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
2021/07/08 12:42:34 scheduler task 3a9008ca (flow c3326fda): waiting for completion (try 0): successful, next state: promoting objects
2021/07/08 12:42:34 scheduler task 3a9008ca (flow c3326fda): promoting objects (try 0): started
2021/07/08 12:42:34 scheduler task 3a9008ca (flow c3326fda): promoting objects (try 0): successful, next state: retrieving diagnostic output
2021/07/08 12:42:34 scheduler task 3a9008ca (flow c3326fda): retrieving diagnostic output (try 0): started
2021/07/08 12:42:35 scheduler task 3a9008ca (flow c3326fda): retrieving diagnostic output (try 0): successful, next state: retrieving result
2021/07/08 12:42:35 scheduler task 3a9008ca (flow c3326fda): retrieving result (try 0): started
2021/07/08 12:42:35 scheduler task 3a9008ca (flow c3326fda): retrieving result (try 0): successful, next state: transferring output
2021/07/08 12:42:35 scheduler task 3a9008ca (flow c3326fda): transferring output (try 0): started
2021/07/08 12:42:36 scheduler task 3a9008ca (flow c3326fda): transferring output (try 0): successful, next state: unloading
2021/07/08 12:42:36 scheduler task 3a9008ca (flow c3326fda): unloading (try 0): started
2021/07/08 12:42:36 scheduler task 3a9008ca (flow c3326fda): unloading list<val<.=5153eee1 35.7MiB> 35.7MiB>
2021/07/08 12:42:36 scheduler task 3a9008ca (flow c3326fda): unloading val<.=e0805f8f 35.4MiB>
2021/07/08 12:42:36 scheduler task 3a9008ca (flow c3326fda): unloading val<.=f7dfc689 35.4MiB>
2021/07/08 12:42:36 scheduler task 3a9008ca (flow c3326fda): unloaded val<.=e0805f8f 35.4MiB>
2021/07/08 12:42:36 scheduler task 3a9008ca (flow c3326fda): unloaded val<.=f7dfc689 35.4MiB>
2021/07/08 12:42:36 scheduler task 3a9008ca (flow c3326fda): unloaded list<val<.=5153eee1 35.7MiB> 35.7MiB>
2021/07/08 12:42:36 scheduler task 3a9008ca (flow c3326fda): unloading (try 0): successful, next state: complete
2021/07/08 12:42:36  <-  n1.r02.s1.Main.out_file c3326fda ok     exec 3m22s 35.7MiB
2021/07/08 12:42:36 n1.r02.s1.Main.out_file c3326fda n1/r02/n1.r02.s1.rf:13:21:
	resources: {mem:1.0GiB cpu:1 disk:0B}
	sha256:5cb1f62060afe3d5ef82ccd44fbf971c9e506799e09c0a37d683c41ac091980b
	sha256:c3326fda84e9fa1dd952e139e2bad3bbdac401bb1ee83b149f26353108acd4b2
	ec2-3-23-89-11.us-east-2.compute.amazonaws.com:9000/d1e2c64981855ad8/3a9008caeddd5becbef5076a399bc7fc76a9e933bfc4746f36f16b9293d93ec0
	niemasd/vireflow:latest
	command:
	    # Copy input files locally
	    mkdir "n1.r02.s1_output"
	    wget -O "n1.r02.s1_output/n1.r02.s1.reference.fas" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.fas"
	    wget -O "n1.r02.s1_output/n1.r02.s1.reference.gff" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/NC_045512.2.gff3"
	    wget -O "n1.r02.s1_output/n1.r02.s1.primers.bed" "https://raw.githubusercontent.com/niemasd/ViReflow/main/demo/sarscov2_v2_primers_swift.bed"
	    cp "{{fq1}}" "n1.r02.s1_output/n1.r02.s1.fq1.fastq"
	    cp "{{fq2}}" "n1.r02.s1_output/n1.r02.s1.fq2.fastq"
	    
	    # Map reads using minimap2
	    minimap2 -t 1 -a -x sr "n1.r02.s1_output/n1.r02.s1.reference.fas" "n1.r02.s1_output/n1.r02.s1.fq1.fastq" "n1.r02.s1_output/n1.r02.s1.fq2.fastq" | samtools view -bS - > "n1.r02.s1_output/n1.r02.s1.untrimmed.bam"
	    
	    # Sort mapped reads
	    samtools sort --threads 1 -O bam -o "n1.r02.s1_output/n1.r02.s1.untrimmed.sorted.bam" "n1.r02.s1_output/n1.r02.s1.untrimmed.bam" 1>&2
	    
	    # Trim mapped reads using ivar
	    ivar trim -x 5 -e -i "n1.r02.s1_output/n1.r02.s1.untrimmed.sorted.bam" -b "n1.r02.s1_output/n1.r02.s1.primers.bed" -p "n1.r02.s1_output/n1.r02.s1.trimmed" 1>&2
	    
	    # Sort trimmed mapped reads
	    samtools sort --threads 1 -O bam -o "n1.r02.s1_output/n1.r02.s1.trimmed.sorted.bam" "n1.r02.s1_output/n1.r02.s1.trimmed.bam" 1>&2
	    
	    # Generate pile-up from sorted trimmed BAM
	    samtools mpileup -A -aa -d 0 -Q 0 --reference "n1.r02.s1_output/n1.r02.s1.reference.fas" "n1.r02.s1_output/n1.r02.s1.trimmed.sorted.bam" > "n1.r02.s1_output/n1.r02.s1.pileup.txt"
	    
	    # Call variants using lofreq"
	    lofreq call -f "n1.r02.s1_output/n1.r02.s1.reference.fas" --call-indels "n1.r02.s1_output/n1.r02.s1.trimmed.sorted.bam" > "n1.r02.s1_output/n1.r02.s1.variants.vcf"
	    
	    # Call depth from trimmed BAM
	    samtools depth -d 0 -Q 0 -q 0 -aa "n1.r02.s1_output/n1.r02.s1.trimmed.sorted.bam" > "n1.r02.s1_output/n1.r02.s1.depth.txt"
	    
	    # Find low-depth regions
	    low_depth_regions "n1.r02.s1_output/n1.r02.s1.depth.txt" "n1.r02.s1_output/n1.r02.s1.low_depth.tsv" 10 1>&2
	    
	    # Generate consensus sequence
	    alt_vars.py -i "n1.r02.s1_output/n1.r02.s1.variants.vcf" -o tmp.vcf -v lofreq
	    bgzip tmp.vcf
	    bcftools index tmp.vcf.gz
	    cat "n1.r02.s1_output/n1.r02.s1.reference.fas" | bcftools consensus -m "n1.r02.s1_output/n1.r02.s1.low_depth.tsv" tmp.vcf.gz > "n1.r02.s1_output/n1.r02.s1.consensus.fas"
	    
	    # Remove redundant output files before compressing
	    rm */*trimmed.bam
	    
	    # Compress output files
	    tar cvf - "n1.r02.s1_output" | pigz -1 -p 1 > "{{out}}"
	where:
	    {{fq1}} = 
	        . <zero> 35.4MiB
	    {{fq2}} = 
	        . <zero> 35.4MiB
	result:
	    {{out}} =
	        . sha256:5153eee15fd0c1b26d2fa7fd0300416abefb113729773b0234ae9e6b89521fa1 35.7MiB
	profile:
	    cpu mean=1.0 max=1.2
	    mem mean=16.1MiB max=125.1MiB
	    disk mean=8.9MiB max=35.7MiB
	    tmp mean=517B max=2.0KiB
2021/07/08 12:42:36 scheduler task f2483af8 (flow 4de8797c): submitted with execconfig extern url s3://niema-test/n1/r02/n1.r02.s1.tar.gz resources {}
2021/07/08 12:42:36  ->  n1.r02.s1.Main.cp_out_file 4de8797c exec extern s3://niema-test/n1/r02/n1.r02.s1.tar.gz 35.7MiB
2021/07/08 12:42:37 scheduler task f2483af8 (flow 4de8797c): direct transfer: completed s3://niema-test-quickstart-cache/objects/sha256:5153eee15fd0c1b26d2fa7fd0300416abefb113729773b0234ae9e6b89521fa1 -> s3://niema-test/n1/r02/n1.r02.s1.tar.gz (35.7MiB) in 1s (35.7MiB/s) 
2021/07/08 12:42:37  <-  n1.r02.s1.Main.cp_out_file 4de8797c ok   extern 0s 35.7MiB
2021/07/08 12:42:37 total n=4 time=4m48s
	ident                      n   ncache transfer runtime(m) cpu         mem(GiB)    disk(GiB)   tmp(GiB) requested
	n1.r02.s1.Main.cp_out_file 1   0      0B                                                      
	n1.r02.s1.Main.fq1         1   0      0B                                                      
	n1.r02.s1.Main.fq2         1   0      0B                                                      
	n1.r02.s1.Main.out_file    1   0      0B       3/3/3      1.0/1.0/1.0 0.1/0.1/0.1 0.0/0.0/0.0 0.0/0.0/0.0 {mem:1.0GiB cpu:1 disk:0B}
	warning: reduce memory requirements for over-allocating execs: n1.r02.s1.Main.out_file
2021/07/08 12:42:37 result: [val<.=5153eee1 35.7MiB>]
2021/07/08 12:42:37 waiting for 1 background tasks to complete
